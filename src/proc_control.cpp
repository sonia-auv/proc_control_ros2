//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control.cpp
//
// Code generated for Simulink model 'proc_control'.
//
// Model version                  : 1.202
// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023
// C/C++ source code generated on : Wed Nov 27 16:37:06 2024
//
// Target selection: ert.tlc
// Embedded hardware selection: Intel->x86-64 (Linux 64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control.h"
#include "rtwtypes.h"
#include "proc_control_types.h"
#include "rmw/qos_profiles.h"
#include "coder_array.h"
#include <math.h>

extern "C"
{

#include "rt_nonfinite.h"

}

#include <string.h>
#include <emmintrin.h>
#include "proc_control_private.h"
#include <stddef.h>
#include "zero_crossing_types.h"
#include "rt_defines.h"

// Named constants for MATLAB Function: '<S107>/VariableHorizonOptimizer'
const int32_T proc_control_p = 10;
static void rate_scheduler(RT_MODEL_proc_control_T *const proc_control_M);
uint32_T plook_u32d_binckpang(real_T u, const real_T bp[], uint32_T maxIndex,atomic_int
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'on'

  if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
           0) ? -1 : 0) + numerator / denominator;
}

//
//         This function updates active task flag for each subrate.
//         The function is called at model base rate, hence the
//         generated code self-manages all its subrates.
//
static void rate_scheduler(RT_MODEL_proc_control_T *const proc_control_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_M->Timing.TaskCounters.TID[1])++;
  if ((proc_control_M->Timing.TaskCounters.TID[1]) > 1) {// Sample time: [0.04s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[1] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_M->Timing.TaskCounters.TID[2]) > 4) {// Sample time: [0.1s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_M->Timing.TaskCounters.TID[3]) > 49) {// Sample time: [1.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_M->Timing.TaskCounters.TID[4]) > 99) {// Sample time: [2.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[4] = 0;
  }
}

//
// Output and update for atomic system:
//    '<S2>/MATLAB Function'
//    '<S2>/MATLAB Function1'
//
void proc_control::proc_control_MATLABFunction(const uint16_T rtu_data[8],
  uint16_T *rty_m1, uint16_T *rty_m2, uint16_T *rty_m3, uint16_T *rty_m4,
  uint16_T *rty_m5, uint16_T *rty_m6, uint16_T *rty_m7, uint16_T *rty_m8)
{
  *rty_m1 = rtu_data[0];
  *rty_m2 = rtu_data[1];
  *rty_m3 = rtu_data[2];
  *rty_m4 = rtu_data[3];
  *rty_m5 = rtu_data[4];
  *rty_m6 = rtu_data[5];
  *rty_m7 = rtu_data[6];
  *rty_m8 = rtu_data[7];
}

real_T proc_control::proc_control_xnrm2_pr(int32_T n, const real_T x[140],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S222>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S222>/MATLAB System'
  return y;
}

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T a;
  real_T b;
  real_T y;
  a = fabs(u0);
  b = fabs(u1);
  if (a < b) {
    a /= b;
    y = sqrt(a * a + 1.0) * b;
  } else if (a > b) {
    b /= a;
    y = sqrt(b * b + 1.0) * a;
  } else if (rtIsNaN(b)) {
    y = (rtNaN);
  } else {
    y = a * 1.4142135623730951;
  }

  return y;
}

void proc_control::proc_control_qr(const real_T A[140], real_T Q[140], real_T R
  [49])
{
  __m128d tmp;
  real_T b_tau[7];
  real_T work[7];
  real_T b_atmp;
  real_T beta1;
  real_T c_A;
  int32_T exitg1;
  int32_T i;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  boolean_T exitg2;
  for (i = 0; i < 7; i++) {
    // Start for MATLABSystem: '<S222>/MATLAB System'
    b_tau[i] = 0.0;
  }

  // Start for MATLABSystem: '<S222>/MATLAB System'
  memcpy(&Q[0], &A[0], 140U * sizeof(real_T));
  for (i = 0; i < 7; i++) {
    work[i] = 0.0;
  }

  // Start for MATLABSystem: '<S222>/MATLAB System'
  for (itau = 0; itau < 7; itau++) {
    ii = itau * 20 + itau;
    ix0 = ii + 2;
    b_atmp = Q[ii];
    b_tau[itau] = 0.0;
    beta1 = proc_control_xnrm2_pr(19 - itau, Q, ii + 2);
    if (beta1 != 0.0) {
      c_A = Q[ii];
      beta1 = rt_hypotd_snf(c_A, beta1);
      if (c_A >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          vectorUB = (((((i - ii) + 19) / 2) << 1) + ii) + 2;
          vectorUB_tmp = vectorUB - 2;
          for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
            tmp = _mm_loadu_pd(&Q[lastv - 1]);
            _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (lastv = vectorUB; lastv <= i + 20; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          b_atmp *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt + 1 < 20));

        beta1 = rt_hypotd_snf(b_atmp, proc_control_xnrm2_pr(19 - itau, Q, ii + 2));
        if (b_atmp >= 0.0) {
          beta1 = -beta1;
        }

        b_tau[itau] = (beta1 - b_atmp) / beta1;
        b_atmp = 1.0 / (b_atmp - beta1);
        for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = vectorUB; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          beta1 *= 1.0020841800044864E-292;
        }

        b_atmp = beta1;
      } else {
        b_tau[itau] = (beta1 - c_A) / beta1;
        b_atmp = 1.0 / (c_A - beta1);
        i = ii - itau;
        knt = (((((i - ii) + 19) / 2) << 1) + ii) + 2;
        vectorUB = knt - 2;
        for (lastv = ix0; lastv <= vectorUB; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = knt; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        b_atmp = beta1;
      }
    }

    Q[ii] = b_atmp;
    if (itau + 1 < 7) {
      Q[ii] = 1.0;
      ix0 = ii + 21;
      if (b_tau[itau] != 0.0) {
        lastv = 20 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 19] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 5 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          vectorUB_tmp = i + 21;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= (i + lastv) + 20) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 21;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 20) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[(ii + vectorUB_tmp) - vectorUB] * Q[vectorUB_tmp - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 21, 20);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 21;
              ix0 = (lastv + jA) + 20;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 21] * beta1;
              }
            }

            jA += 20;
          }
        }
      }

      Q[ii] = b_atmp;
    }
  }

  for (ii = 0; ii < 7; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S222>/MATLAB System'
      R[itau + 7 * ii] = Q[20 * ii + itau];
    }

    for (itau = ii + 2; itau < 8; itau++) {
      R[(itau + 7 * ii) - 1] = 0.0;
    }

    work[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S222>/MATLAB System'
  for (itau = 6; itau >= 0; itau--) {
    ii = (itau * 20 + itau) + 20;
    if (itau + 1 < 7) {
      Q[ii - 20] = 1.0;
      ix0 = ii + 1;
      if (b_tau[itau] != 0.0) {
        lastv = 20 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 5 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          vectorUB_tmp = i + 1;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= i + lastv) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 1;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 20) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[((ii + vectorUB_tmp) - vectorUB) - 20] * Q[vectorUB_tmp
                - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 1, 20);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 21] * beta1;
              }
            }

            jA += 20;
          }
        }
      }
    }

    i = ii - itau;
    knt = (((((i - ii) + 19) / 2) << 1) + ii) - 18;
    vectorUB = knt - 2;
    for (lastv = ii - 18; lastv <= vectorUB; lastv += 2) {
      tmp = _mm_loadu_pd(&Q[lastv - 1]);
      _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-b_tau[itau])));
    }

    for (lastv = knt; lastv <= i; lastv++) {
      Q[lastv - 1] *= -b_tau[itau];
    }

    Q[ii - 20] = 1.0 - b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 21] = 0.0;
    }
  }
}

void proc_control::proc_control_trisolve_p(const real_T A[49], real_T B[91])
{
  // Start for MATLABSystem: '<S222>/MATLAB System'
  for (int32_T b_j = 0; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 7 * b_j - 1;
    for (int32_T b_k = 0; b_k < 7; b_k++) {
      real_T B_0;
      int32_T B_tmp;
      int32_T k;
      int32_T kAcol;
      k = b_k + 1;
      kAcol = b_k * 7 - 1;
      B_tmp = (b_k + jBcol) + 1;
      B_0 = B[B_tmp];
      if (B_0 != 0.0) {
        B[B_tmp] = B_0 / A[(b_k + kAcol) + 1];
        for (int32_T i = k + 1; i < 8; i++) {
          int32_T tmp;
          tmp = i + jBcol;
          B[tmp] -= A[i + kAcol] * B[B_tmp];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S222>/MATLAB System'
}

void proc_control::proc_control_trisolve_pr(const real_T A[49], real_T B[91])
{
  // Start for MATLABSystem: '<S222>/MATLAB System'
  for (int32_T b_j = 0; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 7 * b_j;
    for (int32_T k = 6; k >= 0; k--) {
      real_T tmp;
      int32_T kAcol;
      int32_T tmp_0;
      kAcol = 7 * k;
      tmp_0 = k + jBcol;
      tmp = B[tmp_0];
      if (tmp != 0.0) {
        int32_T b;
        B[tmp_0] = tmp / A[k + kAcol];
        b = k - 1;
        for (int32_T b_i = 0; b_i <= b; b_i++) {
          int32_T tmp_1;
          tmp_1 = b_i + jBcol;
          B[tmp_1] -= A[b_i + kAcol] * B[tmp_0];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S222>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr3(int32_T n, const real_T x[260],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S222>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S222>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_p(const real_T A[260], real_T Q[260], real_T
  R[169])
{
  __m128d tmp;
  real_T b_tau[13];
  real_T work[13];
  real_T b_atmp;
  real_T beta1;
  real_T c_A;
  int32_T exitg1;
  int32_T i;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S222>/MATLAB System'
  memset(&b_tau[0], 0, 13U * sizeof(real_T));
  memcpy(&Q[0], &A[0], 260U * sizeof(real_T));
  memset(&work[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S222>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = itau * 20 + itau;
    ix0 = ii + 2;
    b_atmp = Q[ii];
    b_tau[itau] = 0.0;
    beta1 = proc_control_xnrm2_pr3(19 - itau, Q, ii + 2);
    if (beta1 != 0.0) {
      c_A = Q[ii];
      beta1 = rt_hypotd_snf(c_A, beta1);
      if (c_A >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          vectorUB = (((((i - ii) + 19) / 2) << 1) + ii) + 2;
          vectorUB_tmp = vectorUB - 2;
          for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
            tmp = _mm_loadu_pd(&Q[lastv - 1]);
            _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (lastv = vectorUB; lastv <= i + 20; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          b_atmp *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt + 1 < 20));

        beta1 = rt_hypotd_snf(b_atmp, proc_control_xnrm2_pr3(19 - itau, Q, ii +
          2));
        if (b_atmp >= 0.0) {
          beta1 = -beta1;
        }

        b_tau[itau] = (beta1 - b_atmp) / beta1;
        b_atmp = 1.0 / (b_atmp - beta1);
        for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = vectorUB; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          beta1 *= 1.0020841800044864E-292;
        }

        b_atmp = beta1;
      } else {
        b_tau[itau] = (beta1 - c_A) / beta1;
        b_atmp = 1.0 / (c_A - beta1);
        i = ii - itau;
        knt = (((((i - ii) + 19) / 2) << 1) + ii) + 2;
        vectorUB = knt - 2;
        for (lastv = ix0; lastv <= vectorUB; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = knt; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        b_atmp = beta1;
      }
    }

    Q[ii] = b_atmp;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 21;
      if (b_tau[itau] != 0.0) {
        lastv = 20 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 19] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          vectorUB_tmp = i + 21;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= (i + lastv) + 20) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 21;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 20) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[(ii + vectorUB_tmp) - vectorUB] * Q[vectorUB_tmp - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 21, 20);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 21;
              ix0 = (lastv + jA) + 20;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 21] * beta1;
              }
            }

            jA += 20;
          }
        }
      }

      Q[ii] = b_atmp;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S222>/MATLAB System'
      R[itau + 13 * ii] = Q[20 * ii + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    work[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S222>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = (itau * 20 + itau) + 20;
    if (itau + 1 < 13) {
      Q[ii - 20] = 1.0;
      ix0 = ii + 1;
      if (b_tau[itau] != 0.0) {
        lastv = 20 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          vectorUB_tmp = i + 1;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= i + lastv) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 1;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 20) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[((ii + vectorUB_tmp) - vectorUB) - 20] * Q[vectorUB_tmp
                - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 1, 20);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 21] * beta1;
              }
            }

            jA += 20;
          }
        }
      }
    }

    i = ii - itau;
    knt = (((((i - ii) + 19) / 2) << 1) + ii) - 18;
    vectorUB = knt - 2;
    for (lastv = ii - 18; lastv <= vectorUB; lastv += 2) {
      tmp = _mm_loadu_pd(&Q[lastv - 1]);
      _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-b_tau[itau])));
    }

    for (lastv = knt; lastv <= i; lastv++) {
      Q[lastv - 1] *= -b_tau[itau];
    }

    Q[ii - 20] = 1.0 - b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 21] = 0.0;
    }
  }
}

real_T proc_control::proc_control_xnrm2_pr35(int32_T n, const real_T x[48],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S223>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S223>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr(const real_T A[48], real_T Q[48], real_T
  R[9])
{
  __m128d tmp;
  real_T b_tau[3];
  real_T work[3];
  real_T b_atmp;
  real_T beta1;
  real_T c_A;
  int32_T exitg1;
  int32_T i;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S223>/MATLAB System'
  b_tau[0] = 0.0;
  b_tau[1] = 0.0;
  b_tau[2] = 0.0;
  memcpy(&Q[0], &A[0], 48U * sizeof(real_T));
  work[0] = 0.0;
  work[1] = 0.0;
  work[2] = 0.0;

  // Start for MATLABSystem: '<S223>/MATLAB System'
  for (itau = 0; itau < 3; itau++) {
    ii = (itau << 4) + itau;
    ix0 = ii + 2;
    b_atmp = Q[ii];
    b_tau[itau] = 0.0;
    beta1 = proc_control_xnrm2_pr35(15 - itau, Q, ii + 2);
    if (beta1 != 0.0) {
      c_A = Q[ii];
      beta1 = rt_hypotd_snf(c_A, beta1);
      if (c_A >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          vectorUB = (((((i - ii) + 15) / 2) << 1) + ii) + 2;
          vectorUB_tmp = vectorUB - 2;
          for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
            tmp = _mm_loadu_pd(&Q[lastv - 1]);
            _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (lastv = vectorUB; lastv <= i + 16; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          b_atmp *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt + 1 < 20));

        beta1 = rt_hypotd_snf(b_atmp, proc_control_xnrm2_pr35(15 - itau, Q, ii +
          2));
        if (b_atmp >= 0.0) {
          beta1 = -beta1;
        }

        b_tau[itau] = (beta1 - b_atmp) / beta1;
        b_atmp = 1.0 / (b_atmp - beta1);
        for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = vectorUB; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          beta1 *= 1.0020841800044864E-292;
        }

        b_atmp = beta1;
      } else {
        b_tau[itau] = (beta1 - c_A) / beta1;
        b_atmp = 1.0 / (c_A - beta1);
        i = ii - itau;
        knt = (((((i - ii) + 15) / 2) << 1) + ii) + 2;
        vectorUB = knt - 2;
        for (lastv = ix0; lastv <= vectorUB; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = knt; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        b_atmp = beta1;
      }
    }

    Q[ii] = b_atmp;
    if (itau + 1 < 3) {
      Q[ii] = 1.0;
      ix0 = ii + 17;
      if (b_tau[itau] != 0.0) {
        lastv = 16 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 15] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 1 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          vectorUB_tmp = i + 17;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= (i + lastv) + 16) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 17;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 16) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[(ii + vectorUB_tmp) - vectorUB] * Q[vectorUB_tmp - 1];
            }

            vectorUB_tmp = ((vectorUB - ii) - 17) >> 4;
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 17;
              ix0 = (lastv + jA) + 16;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 17] * beta1;
              }
            }

            jA += 16;
          }
        }
      }

      Q[ii] = b_atmp;
    }
  }

  for (ii = 0; ii < 3; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S223>/MATLAB System'
      R[itau + 3 * ii] = Q[(ii << 4) + itau];
    }

    for (itau = ii + 2; itau < 4; itau++) {
      R[(itau + 3 * ii) - 1] = 0.0;
    }

    work[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S223>/MATLAB System'
  for (itau = 2; itau >= 0; itau--) {
    ii = ((itau << 4) + itau) + 16;
    if (itau + 1 < 3) {
      Q[ii - 16] = 1.0;
      ix0 = ii + 1;
      if (b_tau[itau] != 0.0) {
        lastv = 16 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 1 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          vectorUB_tmp = i + 1;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= i + lastv) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 1;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 16) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[((ii + vectorUB_tmp) - vectorUB) - 16] * Q[vectorUB_tmp
                - 1];
            }

            vectorUB_tmp = ((vectorUB - ii) - 1) >> 4;
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 17] * beta1;
              }
            }

            jA += 16;
          }
        }
      }
    }

    i = ii - itau;
    knt = (((((i - ii) + 15) / 2) << 1) + ii) - 14;
    vectorUB = knt - 2;
    for (lastv = ii - 14; lastv <= vectorUB; lastv += 2) {
      tmp = _mm_loadu_pd(&Q[lastv - 1]);
      _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-b_tau[itau])));
    }

    for (lastv = knt; lastv <= i; lastv++) {
      Q[lastv - 1] *= -b_tau[itau];
    }

    Q[ii - 16] = 1.0 - b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 17] = 0.0;
    }
  }
}

void proc_control::proc_control_trisolve_pr3(const real_T A[9], real_T B[39])
{
  // Start for MATLABSystem: '<S223>/MATLAB System'
  for (int32_T b_j = 0; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 3 * b_j - 1;
    for (int32_T b_k = 0; b_k < 3; b_k++) {
      real_T B_0;
      int32_T B_tmp;
      int32_T k;
      int32_T kAcol;
      k = b_k + 1;
      kAcol = b_k * 3 - 1;
      B_tmp = (b_k + jBcol) + 1;
      B_0 = B[B_tmp];
      if (B_0 != 0.0) {
        B[B_tmp] = B_0 / A[(b_k + kAcol) + 1];
        for (int32_T i = k + 1; i < 4; i++) {
          int32_T tmp;
          tmp = i + jBcol;
          B[tmp] -= A[i + kAcol] * B[B_tmp];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S223>/MATLAB System'
}

void proc_control::proc_control_trisolve_pr35(const real_T A[9], real_T B[39])
{
  // Start for MATLABSystem: '<S223>/MATLAB System'
  for (int32_T b_j = 0; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 3 * b_j;
    for (int32_T k = 2; k >= 0; k--) {
      real_T tmp;
      int32_T kAcol;
      int32_T tmp_0;
      kAcol = 3 * k;
      tmp_0 = k + jBcol;
      tmp = B[tmp_0];
      if (tmp != 0.0) {
        int32_T b;
        B[tmp_0] = tmp / A[k + kAcol];
        b = k - 1;
        for (int32_T b_i = 0; b_i <= b; b_i++) {
          int32_T tmp_1;
          tmp_1 = b_i + jBcol;
          B[tmp_1] -= A[b_i + kAcol] * B[tmp_0];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S223>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr351(int32_T n, const real_T x[208],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S223>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S223>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr3(const real_T A[208], real_T Q[208],
  real_T R[169])
{
  __m128d tmp;
  real_T b_tau[13];
  real_T work[13];
  real_T b_atmp;
  real_T beta1;
  real_T c_A;
  int32_T exitg1;
  int32_T i;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S223>/MATLAB System'
  memset(&b_tau[0], 0, 13U * sizeof(real_T));
  memcpy(&Q[0], &A[0], 208U * sizeof(real_T));
  memset(&work[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S223>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = (itau << 4) + itau;
    ix0 = ii + 2;
    b_atmp = Q[ii];
    b_tau[itau] = 0.0;
    beta1 = proc_control_xnrm2_pr351(15 - itau, Q, ii + 2);
    if (beta1 != 0.0) {
      c_A = Q[ii];
      beta1 = rt_hypotd_snf(c_A, beta1);
      if (c_A >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          vectorUB = (((((i - ii) + 15) / 2) << 1) + ii) + 2;
          vectorUB_tmp = vectorUB - 2;
          for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
            tmp = _mm_loadu_pd(&Q[lastv - 1]);
            _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (lastv = vectorUB; lastv <= i + 16; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          b_atmp *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt + 1 < 20));

        beta1 = rt_hypotd_snf(b_atmp, proc_control_xnrm2_pr351(15 - itau, Q, ii
          + 2));
        if (b_atmp >= 0.0) {
          beta1 = -beta1;
        }

        b_tau[itau] = (beta1 - b_atmp) / beta1;
        b_atmp = 1.0 / (b_atmp - beta1);
        for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = vectorUB; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          beta1 *= 1.0020841800044864E-292;
        }

        b_atmp = beta1;
      } else {
        b_tau[itau] = (beta1 - c_A) / beta1;
        b_atmp = 1.0 / (c_A - beta1);
        i = ii - itau;
        knt = (((((i - ii) + 15) / 2) << 1) + ii) + 2;
        vectorUB = knt - 2;
        for (lastv = ix0; lastv <= vectorUB; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = knt; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        b_atmp = beta1;
      }
    }

    Q[ii] = b_atmp;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 17;
      if (b_tau[itau] != 0.0) {
        lastv = 16 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 15] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          vectorUB_tmp = i + 17;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= (i + lastv) + 16) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 17;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 16) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[(ii + vectorUB_tmp) - vectorUB] * Q[vectorUB_tmp - 1];
            }

            vectorUB_tmp = ((vectorUB - ii) - 17) >> 4;
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 17;
              ix0 = (lastv + jA) + 16;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 17] * beta1;
              }
            }

            jA += 16;
          }
        }
      }

      Q[ii] = b_atmp;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S223>/MATLAB System'
      R[itau + 13 * ii] = Q[(ii << 4) + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    work[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S223>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = ((itau << 4) + itau) + 16;
    if (itau + 1 < 13) {
      Q[ii - 16] = 1.0;
      ix0 = ii + 1;
      if (b_tau[itau] != 0.0) {
        lastv = 16 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          vectorUB_tmp = i + 1;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= i + lastv) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 1;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 16) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[((ii + vectorUB_tmp) - vectorUB) - 16] * Q[vectorUB_tmp
                - 1];
            }

            vectorUB_tmp = ((vectorUB - ii) - 1) >> 4;
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 17] * beta1;
              }
            }

            jA += 16;
          }
        }
      }
    }

    i = ii - itau;
    knt = (((((i - ii) + 15) / 2) << 1) + ii) - 14;
    vectorUB = knt - 2;
    for (lastv = ii - 14; lastv <= vectorUB; lastv += 2) {
      tmp = _mm_loadu_pd(&Q[lastv - 1]);
      _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-b_tau[itau])));
    }

    for (lastv = knt; lastv <= i; lastv++) {
      Q[lastv - 1] *= -b_tau[itau];
    }

    Q[ii - 16] = 1.0 - b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 17] = 0.0;
    }
  }
}

real_T proc_control::proc_control_xnrm2_pr351e(int32_T n, const real_T x[14],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S224>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S224>/MATLAB System'
  return y;
}

void proc_control::EKFCorrectorAdditive_getMeasure(real_T Rs, const real_T x[13],
  const real_T S[169], real_T *zEstimated, real_T Pxy[13], real_T *Sy, real_T
  dHdx[13], real_T *Rsqrt)
{
  __m128d tmp;
  real_T S_0[169];
  real_T M[14];
  real_T imvec[13];
  real_T tmp_0[2];
  real_T beta1;
  real_T epsilon;
  int32_T aoffset;
  int32_T b_j;
  int32_T i;

  // Start for MATLABSystem: '<S224>/MATLAB System'
  // EKFNAVDEPTH Summary of this function goes here
  //    Detailed explanation goes here
  *Rsqrt = Rs;

  // EKFNAVDEPTH Summary of this function goes here
  //    Detailed explanation goes here
  *zEstimated = x[2];
  for (b_j = 0; b_j < 13; b_j++) {
    epsilon = 1.4901161193847656E-8 * fabs(x[b_j]);
    if ((epsilon <= 1.4901161193847656E-8) || rtIsNaN(epsilon)) {
      epsilon = 1.4901161193847656E-8;
    }

    // EKFNAVDEPTH Summary of this function goes here
    //    Detailed explanation goes here
    for (i = 0; i < 13; i++) {
      imvec[i] = x[i];
      beta1 = 0.0;
      for (aoffset = 0; aoffset < 13; aoffset++) {
        beta1 += S[13 * aoffset + b_j] * S[13 * aoffset + i];
      }

      S_0[b_j + 13 * i] = beta1;
    }

    imvec[b_j] = x[b_j] + epsilon;
    dHdx[b_j] = (imvec[2] - x[2]) / epsilon;
  }

  for (b_j = 0; b_j < 13; b_j++) {
    // Start for MATLABSystem: '<S224>/MATLAB System'
    aoffset = b_j * 13 - 1;
    epsilon = 0.0;
    beta1 = 0.0;

    // Start for MATLABSystem: '<S224>/MATLAB System'
    for (i = 0; i < 13; i++) {
      _mm_storeu_pd(&tmp_0[0], _mm_add_pd(_mm_mul_pd(_mm_set_pd(S[(aoffset + i)
        + 1], S_0[13 * i + b_j]), _mm_set1_pd(dHdx[i])), _mm_set_pd(epsilon,
        beta1)));
      beta1 = tmp_0[0];
      epsilon = tmp_0[1];
    }

    Pxy[b_j] = beta1;
    M[b_j] = epsilon;
  }

  // Start for MATLABSystem: '<S224>/MATLAB System'
  M[13] = Rs;
  for (b_j = 0; b_j < 1; b_j++) {
    epsilon = M[0];
    beta1 = proc_control_xnrm2_pr351e(13, M, 2);
    if (beta1 != 0.0) {
      beta1 = rt_hypotd_snf(M[0], beta1);
      if (M[0] >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        aoffset = -1;
        do {
          aoffset++;
          for (i = 2; i <= 12; i += 2) {
            tmp = _mm_loadu_pd(&M[i - 1]);
            _mm_storeu_pd(&M[i - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (i = 14; i < 15; i++) {
            M[i - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          epsilon *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (aoffset + 1 < 20));

        beta1 = rt_hypotd_snf(epsilon, proc_control_xnrm2_pr351e(13, M, 2));
        if (epsilon >= 0.0) {
          beta1 = -beta1;
        }

        epsilon = 1.0 / (epsilon - beta1);
        for (i = 2; i <= 12; i += 2) {
          tmp = _mm_loadu_pd(&M[i - 1]);
          _mm_storeu_pd(&M[i - 1], _mm_mul_pd(tmp, _mm_set1_pd(epsilon)));
        }

        for (i = 14; i < 15; i++) {
          M[i - 1] *= epsilon;
        }

        for (i = 0; i <= aoffset; i++) {
          beta1 *= 1.0020841800044864E-292;
        }

        epsilon = beta1;
      } else {
        epsilon = 1.0 / (M[0] - beta1);
        for (i = 2; i <= 12; i += 2) {
          tmp = _mm_loadu_pd(&M[i - 1]);
          _mm_storeu_pd(&M[i - 1], _mm_mul_pd(tmp, _mm_set1_pd(epsilon)));
        }

        for (i = 14; i < 15; i++) {
          M[i - 1] *= epsilon;
        }

        epsilon = beta1;
      }
    }

    M[0] = epsilon;
  }

  *Sy = M[0];
}

void proc_control::proc_control_trisolve_pr351(real_T A, real_T B[13])
{
  // Start for MATLABSystem: '<S224>/MATLAB System'
  for (int32_T b_j = 0; b_j < 13; b_j++) {
    real_T B_0;
    B_0 = B[b_j];
    if (B_0 != 0.0) {
      B[b_j] = B_0 / A;
    }
  }

  // End of Start for MATLABSystem: '<S224>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr351ew(int32_T n, const real_T x[182],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S224>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S224>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr35(const real_T A[182], real_T Q[182],
  real_T R[169])
{
  __m128d tmp;
  real_T b_tau[13];
  real_T work[13];
  real_T b_atmp;
  real_T beta1;
  real_T c_A;
  int32_T exitg1;
  int32_T i;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S224>/MATLAB System'
  memset(&b_tau[0], 0, 13U * sizeof(real_T));
  memcpy(&Q[0], &A[0], 182U * sizeof(real_T));
  memset(&work[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S224>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = itau * 14 + itau;
    ix0 = ii + 2;
    b_atmp = Q[ii];
    b_tau[itau] = 0.0;
    beta1 = proc_control_xnrm2_pr351ew(13 - itau, Q, ii + 2);
    if (beta1 != 0.0) {
      c_A = Q[ii];
      beta1 = rt_hypotd_snf(c_A, beta1);
      if (c_A >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          vectorUB = (((((i - ii) + 13) / 2) << 1) + ii) + 2;
          vectorUB_tmp = vectorUB - 2;
          for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
            tmp = _mm_loadu_pd(&Q[lastv - 1]);
            _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (lastv = vectorUB; lastv <= i + 14; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          b_atmp *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt + 1 < 20));

        beta1 = rt_hypotd_snf(b_atmp, proc_control_xnrm2_pr351ew(13 - itau, Q,
          ii + 2));
        if (b_atmp >= 0.0) {
          beta1 = -beta1;
        }

        b_tau[itau] = (beta1 - b_atmp) / beta1;
        b_atmp = 1.0 / (b_atmp - beta1);
        for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = vectorUB; lastv <= i + 14; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          beta1 *= 1.0020841800044864E-292;
        }

        b_atmp = beta1;
      } else {
        b_tau[itau] = (beta1 - c_A) / beta1;
        b_atmp = 1.0 / (c_A - beta1);
        i = ii - itau;
        knt = (((((i - ii) + 13) / 2) << 1) + ii) + 2;
        vectorUB = knt - 2;
        for (lastv = ix0; lastv <= vectorUB; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = knt; lastv <= i + 14; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        b_atmp = beta1;
      }
    }

    Q[ii] = b_atmp;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 15;
      if (b_tau[itau] != 0.0) {
        lastv = 14 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 13] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 14 + ii;
          vectorUB_tmp = i + 15;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= (i + lastv) + 14) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (14 * knt + ii) + 15;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 14) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[(ii + vectorUB_tmp) - vectorUB] * Q[vectorUB_tmp - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 15, 14);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 15;
              ix0 = (lastv + jA) + 14;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 15] * beta1;
              }
            }

            jA += 14;
          }
        }
      }

      Q[ii] = b_atmp;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S224>/MATLAB System'
      R[itau + 13 * ii] = Q[14 * ii + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    work[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S224>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = (itau * 14 + itau) + 14;
    if (itau + 1 < 13) {
      Q[ii - 14] = 1.0;
      ix0 = ii + 1;
      if (b_tau[itau] != 0.0) {
        lastv = 14 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 14 + ii;
          vectorUB_tmp = i + 1;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= i + lastv) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (14 * knt + ii) + 1;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 14) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[((ii + vectorUB_tmp) - vectorUB) - 14] * Q[vectorUB_tmp
                - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 1, 14);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 15] * beta1;
              }
            }

            jA += 14;
          }
        }
      }
    }

    i = ii - itau;
    knt = (((((i - ii) + 13) / 2) << 1) + ii) - 12;
    vectorUB = knt - 2;
    for (lastv = ii - 12; lastv <= vectorUB; lastv += 2) {
      tmp = _mm_loadu_pd(&Q[lastv - 1]);
      _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-b_tau[itau])));
    }

    for (lastv = knt; lastv <= i; lastv++) {
      Q[lastv - 1] *= -b_tau[itau];
    }

    Q[ii - 14] = 1.0 - b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 15] = 0.0;
    }
  }
}

void proc_control::proc_control_mldivide_pr351(const real_T A[36], real_T B[48])
{
  real_T c_A[36];
  real_T smax;
  int32_T c;
  int32_T ijA;
  int32_T iy;
  int32_T jA;
  int32_T jj;
  int32_T jp1j;
  int32_T kAcol;
  int8_T b_ipiv[6];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  memcpy(&c_A[0], &A[0], 36U * sizeof(real_T));
  for (jj = 0; jj < 6; jj++) {
    b_ipiv[jj] = static_cast<int8_T>(jj + 1);
  }

  for (int32_T b_j = 0; b_j < 5; b_j++) {
    // Start for MATLABSystem: '<S226>/MATLAB System'
    c = b_j * 7 + 2;
    jj = b_j * 7;
    kAcol = 6 - b_j;
    iy = 1;
    smax = fabs(c_A[jj]);
    for (jA = 2; jA <= kAcol; jA++) {
      real_T s;
      s = fabs(c_A[(c + jA) - 3]);
      if (s > smax) {
        iy = jA;
        smax = s;
      }
    }

    if (c_A[(c + iy) - 3] != 0.0) {
      if (iy - 1 != 0) {
        iy += b_j;
        b_ipiv[b_j] = static_cast<int8_T>(iy);
        for (jA = 0; jA < 6; jA++) {
          kAcol = jA * 6 + b_j;
          smax = c_A[kAcol];
          jp1j = (jA * 6 + iy) - 1;
          c_A[kAcol] = c_A[jp1j];
          c_A[jp1j] = smax;
        }
      }

      iy = c - b_j;
      for (jA = c; jA <= iy + 4; jA++) {
        c_A[jA - 1] /= c_A[jj];
      }
    }

    kAcol = 4 - b_j;
    jA = jj;
    jj += 6;
    for (jp1j = 0; jp1j <= kAcol; jp1j++) {
      smax = c_A[jp1j * 6 + jj];
      if (smax != 0.0) {
        int32_T c_0;
        iy = jA + 8;
        c_0 = (jA - b_j) + 12;
        for (ijA = iy; ijA <= c_0; ijA++) {
          c_A[ijA - 1] += c_A[((c + ijA) - jA) - 9] * -smax;
        }
      }

      jA += 6;
    }
  }

  for (c = 0; c < 5; c++) {
    int8_T b_ipiv_0;

    // Start for MATLABSystem: '<S226>/MATLAB System'
    b_ipiv_0 = b_ipiv[c];
    if (c + 1 != b_ipiv_0) {
      for (int32_T b_j = 0; b_j < 8; b_j++) {
        kAcol = 6 * b_j + c;
        smax = B[kAcol];
        jj = (6 * b_j + b_ipiv_0) - 1;
        B[kAcol] = B[jj];
        B[jj] = smax;
      }
    }
  }

  for (int32_T b_j = 0; b_j < 8; b_j++) {
    // Start for MATLABSystem: '<S226>/MATLAB System'
    jp1j = 6 * b_j - 1;
    for (c = 0; c < 6; c++) {
      // Start for MATLABSystem: '<S226>/MATLAB System'
      kAcol = 6 * c - 1;
      jj = (c + jp1j) + 1;
      if (B[jj] != 0.0) {
        // Start for MATLABSystem: '<S226>/MATLAB System'
        for (jA = c + 2; jA < 7; jA++) {
          ijA = jA + jp1j;
          B[ijA] -= c_A[jA + kAcol] * B[jj];
        }
      }
    }
  }

  for (int32_T b_j = 0; b_j < 8; b_j++) {
    // Start for MATLABSystem: '<S226>/MATLAB System'
    jp1j = 6 * b_j;
    for (jA = 5; jA >= 0; jA--) {
      kAcol = 6 * jA;
      jj = jA + jp1j;
      smax = B[jj];
      if (smax != 0.0) {
        B[jj] = smax / c_A[jA + kAcol];
        iy = jA - 1;
        for (c = 0; c <= iy; c++) {
          ijA = c + jp1j;
          B[ijA] -= c_A[c + kAcol] * B[jj];
        }
      }
    }
  }
}

real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    real_T tmp;
    real_T tmp_0;
    tmp = fabs(u0);
    tmp_0 = fabs(u1);
    if (rtIsInf(u1)) {
      if (tmp == 1.0) {
        y = 1.0;
      } else if (tmp > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

real_T proc_control::proc_control_erf(real_T x)
{
  real_T R;
  real_T absx;
  real_T s;
  real_T y;
  real_T z;
  int32_T b_e;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  absx = fabs(x);
  if (rtIsNaN(x)) {
    y = (rtNaN);
  } else if (rtIsInf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (absx < 0.84375) {
    if (absx < 3.7252902984619141E-9) {
      if (absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      z = x * x;
      y = ((((z * -2.3763016656650163E-5 - 0.0057702702964894416) * z -
             0.02848174957559851) * z - 0.3250421072470015) * z +
           0.12837916709551256) / (((((z * -3.9602282787753681E-6 +
        0.00013249473800432164) * z + 0.0050813062818757656) * z +
        0.0650222499887673) * z + 0.39791722395915535) * z + 1.0) * x + x;
    }
  } else if (absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((absx - 1.0) * -0.0021663755948687908 + 0.035478304325618236) *
               (absx - 1.0) - 0.11089469428239668) * (absx - 1.0) +
              0.31834661990116175) * (absx - 1.0) - 0.37220787603570132) * (absx
             - 1.0) + 0.41485611868374833) * (absx - 1.0) -
           0.0023621185607526594) / (((((((absx - 1.0) * 0.011984499846799107 +
        0.013637083912029051) * (absx - 1.0) + 0.12617121980876164) * (absx -
        1.0) + 0.071828654414196266) * (absx - 1.0) + 0.540397917702171) * (absx
        - 1.0) + 0.10642088040084423) * (absx - 1.0) + 1.0) +
        0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((absx - 1.0) * -0.0021663755948687908 +
        0.035478304325618236) * (absx - 1.0) - 0.11089469428239668) * (absx -
        1.0) + 0.31834661990116175) * (absx - 1.0) - 0.37220787603570132) *
        (absx - 1.0) + 0.41485611868374833) * (absx - 1.0) -
        0.0023621185607526594) / (((((((absx - 1.0) * 0.011984499846799107 +
        0.013637083912029051) * (absx - 1.0) + 0.12617121980876164) * (absx -
        1.0) + 0.071828654414196266) * (absx - 1.0) + 0.540397917702171) * (absx
        - 1.0) + 0.10642088040084423) * (absx - 1.0) + 1.0);
    }
  } else if (absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    s = 1.0 / (absx * absx);
    if (absx < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 - 81.2874355063066) * s -
               184.60509290671104) * s - 162.39666946257347) * s -
             62.375332450326006) * s - 10.558626225323291) * s -
           0.69385857270718176) * s - 0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 - 1025.0951316110772) * s -
              637.56644336838963) * s - 160.63638485582192) * s -
            17.757954917754752) * s - 0.799283237680523) * s -
        0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!rtIsNaN(absx)) {
      z = frexp(absx, &b_e);
    } else {
      z = (rtNaN);
      b_e = 0;
    }

    z = floor(z * 2.097152E+6) / 2.097152E+6 * rt_powd_snf(2.0,
      static_cast<real_T>(b_e));
    if (x < 0.0) {
      y = exp((z - absx) * (z + absx) + R / s) * exp(-z * z - 0.5625) / absx -
        1.0;
    } else {
      y = 1.0 - exp((z - absx) * (z + absx) + R / s) * exp(-z * z - 0.5625) /
        absx;
    }
  }

  // End of Start for MATLABSystem: '<S226>/MATLAB System'
  return y;
}

void proc_control::proc_control_ft_3_pr(const real_T ct[1016], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv46[0], _mm_add_pd(_mm_set_pd(ct[493], ct[482]),
    _mm_set_pd(ct[924], ct[914])));
  proc_control_B.t1463 = proc_control_B.dv46[0];
  proc_control_B.t1464 = proc_control_B.dv46[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  proc_control_B.t1465 = ct[504] + ct[921];
  proc_control_B.t1524 = (ct[344] * ct[1014] * -0.5 + ct[864]) * ct[35];
  tmp = _mm_set_pd(-1.0, 1.0);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv46[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[992],
    ct[309]), _mm_set_pd(ct[993], ct[323])), _mm_set_pd(ct[994], ct[331])),
    _mm_set_pd(ct[995], ct[351])), _mm_set_pd(ct[996], ct[353])), _mm_set_pd(ct
    [1000], ct[355])), _mm_set_pd(ct[1001], ct[357])), _mm_set_pd(ct[1005], ct
    [359])), _mm_set_pd(ct[1008], ct[383])), _mm_set_pd(ct[46], ct[414])),
    _mm_set_pd(ct[47], ct[415])), _mm_set_pd(ct[48], ct[416])), _mm_set_pd(ct[49],
    ct[417])), _mm_set_pd(ct[50], ct[418])), _mm_set_pd(ct[51], ct[419])),
    _mm_set_pd(ct[52], ct[420])), _mm_set_pd(ct[53], ct[421])), _mm_set_pd(ct[54],
    ct[422])), _mm_set_pd(ct[56], ct[423])), _mm_set_pd(ct[57], ct[424])),
    _mm_set_pd(ct[58], ct[425])), _mm_set_pd(ct[62], ct[426])), _mm_set_pd(ct[65],
    ct[427])), _mm_set_pd(ct[68], ct[428])), _mm_set_pd(ct[73], ct[429])),
    _mm_set_pd(ct[76], ct[430])), _mm_set_pd(ct[79], ct[431])), _mm_set_pd(ct[83],
    ct[432])), _mm_set_pd(ct[85], ct[433])), _mm_set_pd(ct[86], ct[434])),
    _mm_set_pd(ct[88], ct[435])), _mm_set_pd(ct[89], ct[436])), _mm_set_pd(ct[90],
    ct[437])), _mm_set_pd(ct[91], ct[438])), _mm_set_pd(ct[105], ct[439])),
    _mm_set_pd(ct[106], ct[440])), _mm_set_pd(ct[107], ct[441])), _mm_set_pd(ct
    [120], ct[442])), _mm_set_pd(ct[133], ct[443])), _mm_set_pd(ct[158], ct[448])),
    _mm_set_pd(ct[159], ct[449])), _mm_set_pd(ct[160], ct[454])), _mm_set_pd(ct
    [161], ct[460])), _mm_set_pd(ct[162], ct[508])), _mm_set_pd(ct[163], ct[511])),
    _mm_set_pd(ct[166], ct[514])), _mm_set_pd(ct[169], ct[529])), _mm_set_pd(ct
    [172], ct[530])), _mm_set_pd(ct[173], ct[532])), _mm_set_pd(ct[174], ct[533])),
    _mm_set_pd(ct[175], ct[534])), _mm_set_pd(ct[176], ct[535])), _mm_set_pd(ct
    [177], ct[536])), _mm_set_pd(ct[178], ct[537])), _mm_set_pd(ct[179], ct[539])),
    _mm_set_pd(ct[180], ct[540])), _mm_set_pd(ct[181], ct[545])), _mm_mul_pd
    (_mm_set_pd(ct[750], ct[546]), tmp)), _mm_mul_pd(_mm_set_pd(ct[753], ct[551]),
    tmp)), _mm_mul_pd(_mm_set_pd(ct[756], ct[552]), tmp)), _mm_mul_pd(_mm_set_pd
    (ct[759], ct[555]), tmp)), _mm_mul_pd(_mm_set_pd(ct[762], ct[557]), tmp)),
    _mm_mul_pd(_mm_set_pd(ct[765], ct[559]), tmp)), _mm_mul_pd(_mm_set_pd(ct[791],
    ct[560]), tmp)), _mm_mul_pd(_mm_set_pd(ct[792], ct[561]), tmp)), _mm_mul_pd
    (_mm_set_pd(ct[793], ct[563]), tmp)), _mm_mul_pd(_mm_set_pd(ct[794], ct[564]),
    tmp)), _mm_mul_pd(_mm_set_pd(ct[848], ct[567]), tmp)), _mm_mul_pd(_mm_set_pd
    (ct[849], ct[571]), tmp)), _mm_set_pd(ct[201], ct[572])), _mm_set_pd(ct[202],
    ct[573])), _mm_set_pd(ct[203], ct[574])), _mm_set_pd(ct[204], ct[577])),
    _mm_set_pd(ct[205], ct[579])), _mm_set_pd(ct[206], ct[583])), _mm_set_pd(ct
    [207], ct[585])), _mm_set_pd(ct[209], ct[627])), _mm_set_pd(ct[211], ct[640])),
    _mm_set_pd(ct[212], ct[648])), _mm_set_pd(ct[213], ct[701])), _mm_set_pd(ct
    [215], ct[702])), _mm_set_pd(ct[216], ct[703])), _mm_set_pd(ct[217], ct[705])),
    _mm_set_pd(ct[218], ct[707])), _mm_set_pd(ct[219], ct[709])), _mm_set_pd(ct
    [221], ct[717])), _mm_set_pd(ct[222], ct[718])), _mm_set_pd(ct[223], ct[719])),
    _mm_set_pd(ct[226], ct[720])), _mm_set_pd(ct[227], ct[721])), _mm_set_pd(ct
    [228], ct[722])), _mm_set_pd(ct[229], ct[723])), _mm_set_pd(ct[233], ct[724])),
    _mm_set_pd(ct[234], ct[725])), _mm_set_pd(ct[235], ct[726])), _mm_set_pd(ct
    [236], ct[727])), _mm_set_pd(ct[244], ct[728])), _mm_set_pd(ct[246], ct[729])),
    _mm_set_pd(ct[250], ct[730])), _mm_set_pd(ct[251], ct[731])), _mm_set_pd(ct
    [255], ct[732])), _mm_set_pd(ct[256], ct[733])), _mm_set_pd(ct[257], ct[734])),
    _mm_set_pd(ct[258], ct[735])), _mm_set_pd(ct[259], ct[736])), _mm_set_pd(ct
    [260], ct[737])), _mm_set_pd(ct[261], ct[739])), _mm_set_pd(ct[262], ct[740])),
    _mm_set_pd(ct[263], ct[741])), _mm_set_pd(ct[264], ct[742])), _mm_set_pd(ct
    [265], ct[743])), _mm_set_pd(ct[267], ct[744])), _mm_set_pd(ct[268], ct[745])),
                _mm_set_pd(ct[269], ct[746])), _mm_set_pd(ct[270], ct[747])),
    _mm_set_pd(ct[271], ct[748])), _mm_set_pd(ct[272], ct[751])), _mm_set_pd(ct
    [273], ct[754])), _mm_set_pd(ct[274], ct[757])), _mm_set_pd(ct[275], ct[760])),
     _mm_set_pd(ct[276], ct[763])), _mm_set_pd(ct[278], ct[766])), _mm_set_pd
    (ct[279], ct[768])), _mm_set_pd(ct[280], ct[770])), _mm_set_pd(ct[281], ct
    [772])), _mm_set_pd(ct[282], ct[774])), _mm_set_pd(ct[283], ct[776])),
    _mm_set_pd(ct[284], ct[778])), _mm_set_pd(ct[285], ct[780])));
  proc_control_B.t1546_tmp = ct[23] * ct[515];
  proc_control_B.t1546_tmp_j = ct[24] * ct[531];
  proc_control_B.t1546 = ct[25] * ct[549];
  proc_control_B.t1546 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.dv46
    [0] + ct[782]) + ct[784]) + ct[786]) + ct[788]) + ct[790]) + ct[804]) + ct
    [805]) + ct[811]) + ct[812]) + ct[818]) + ct[819]) + ct[829]) + ct[830]) +
    ct[836]) + ct[837]) + ct[845]) + ct[846]) + ct[877]) + ct[883]) + ct[886]) +
    ct[895]) + ct[896]) + ct[897]) + ct[898]) + ct[900]) + ct[902]) + ct[903]) +
    ct[905]) + ct[907]) + ct[908]) + ct[909]) + ct[911]) + ct[938]) + ct[939]) +
    ct[940]) + ct[942]) + ct[943]) + ct[944]) + ct[945]) + ct[946]) + ct[947]) +
    ct[948]) + ct[949]) + ct[950]) + ct[954]) + ct[955]) + ct[956]) + ct[957]) +
    ct[958]) + ct[959]) + ct[960]) + ct[961]) + ct[962]) + ct[963]) + ct[964]) +
                     ct[965]) + ct[967]) + ct[971]) + ct[972]) + ct[976]) + ct
                [978]) + ct[981]) + ct[982]) + ct[984]) + ct[985]) + ct[986]) +
          ct[987]) + ct[988]) + ct[989]) + ct[990]) + ct[991]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.dv46
    [1] + ct[286]) + ct[287]) + ct[288]) + ct[289]) + ct[290]) + ct[291]) + ct
    [292]) + ct[293]) + ct[294]) + ct[295]) + ct[296]) + ct[297]) + ct[298]) +
    ct[299]) + ct[300]) + ct[301]) + ct[302]) + ct[303]) + ct[304]) + ct[305]) +
    ct[306]) - ct[93]) - ct[95]) - ct[99]) - ct[102]) - ct[111]) - ct[113]) -
    ct[115]) - ct[119]) - ct[124]) - ct[128]) - ct[130]) - ct[132]) + ct[312]) +
    ct[313]) + ct[314]) + ct[315]) + ct[316]) + ct[317]) - ct[164]) - ct[165]) -
    ct[167]) - ct[168]) - ct[170]) - ct[171]) + ct[318]) + ct[319]) + ct[320]) +
                    ct[321]) + ct[322]) + ct[324]) + ct[328]) + ct[329]) + ct
               [330]) + ct[332]) + ct[333]) + ct[334]) +
           proc_control_B.t1546_tmp * ct[952]) + proc_control_B.t1546_tmp * ct
          [953]) + proc_control_B.t1546_tmp_j * ct[951]) +
        proc_control_B.t1546_tmp_j * ct[953]) + proc_control_B.t1546 * ct[951])
      + proc_control_B.t1546 * ct[952]));
  proc_control_B.t1526 = ct[31] - proc_control_B.t1524;
  proc_control_B.t1543_tmp = ct[18] * ct[30];
  proc_control_B.t1543_tmp_k = ct[19] * ct[30];
  proc_control_B.t1542_tmp = ct[17] * ct[30];
  proc_control_B.t1542 = (((((((((ct[4] + ct[151]) + ct[155]) + ct[325]) +
    proc_control_B.t1464 * ct[1012]) - ct[21] * ct[30] * ct[31] * ct[45]) + ct
    [345]) - ct[338]) - ct[347]) + proc_control_B.t1543_tmp * ct[45] *
    proc_control_B.t1524) + proc_control_B.t1542_tmp * ct[894] *
    -proc_control_B.t1524;
  proc_control_B.t1524_g = (((((((ct[22] * ct[30] * ct[31] * ct[45] + ((ct[3] +
    ct[152]) + ct[154])) + proc_control_B.t1463 * ct[1015]) + ct[342]) + ct[349])
    - ct[341]) - ct[346]) + proc_control_B.t1543_tmp_k * ct[45] *
    -proc_control_B.t1524) + proc_control_B.t1542_tmp * ct[327] *
    -proc_control_B.t1524;
  proc_control_B.t1464 = ((((ct[0] + ct[156]) + ct[311]) - ct[34] *
    proc_control_B.t1464) + ct[339]) + ct[30] * ct[893] * proc_control_B.t1526 *
    2.0;
  proc_control_B.t1463 = ((((ct[694] + ct[738]) + ct[149]) + ct[33] *
    proc_control_B.t1463) - ct[335]) + ct[30] * ct[327] * proc_control_B.t1526;
  out1[0] = (((ct[816] + ct[826]) - 1.0) * -ct[1012] + (ct[646] + ct[676]) * ct
             [1015]) + (ct[636] - ct[687]) * ct[1013];
  out1[1] = ((ct[636] + ct[687]) * ct[1012] - ((ct[806] + ct[826]) - 1.0) * ct
             [1013]) + (ct[654] - ct[665]) * ct[1015];
  out1[2] = (ct[45] * ct[1012] + ct[894] * ct[1013]) - ct[327] * ct[1015];
  out1[3] = (ct[26] * ct[32] * -0.5 - ct[27] * ct[33] / 2.0) - ct[28] * ct[34] /
    2.0;
  tmp_0 = _mm_set1_pd(2.0);
  _mm_storeu_pd(&out1[4], _mm_add_pd(_mm_add_pd(_mm_div_pd(_mm_mul_pd(_mm_set_pd
    (ct[28], ct[29]), _mm_set1_pd(ct[32])), tmp_0), _mm_mul_pd(_mm_div_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[28]), _mm_set1_pd(ct[33])), tmp_0), _mm_set_pd
    (1.0, -1.0))), _mm_mul_pd(_mm_div_pd(_mm_mul_pd(_mm_set_pd(ct[26], ct[27]),
    _mm_set1_pd(ct[34])), tmp_0), tmp)));
  out1[6] = (ct[27] * ct[32] * -0.5 + ct[26] * ct[33] / 2.0) + ct[29] * ct[34] /
    2.0;
  proc_control_B.t1542_tmp = ct[9] * ct[13];
  proc_control_B.out1_tmp = ct[10] * ct[12];
  proc_control_B.out1_tmp_b = ct[13] * ct[15];
  proc_control_B.out1_tmp_h = ct[9] * ct[16];
  proc_control_B.out1_tmp_e = ct[15] * ct[16];
  proc_control_B.out1_tmp_hn = ct[5] * ct[9];
  proc_control_B.out1_tmp_k = ct[6] * ct[8];
  proc_control_B.out1_tmp_j = ct[5] * ct[13];
  proc_control_B.out1_tmp_o = ct[7] * ct[11];
  proc_control_B.out1_tmp_c = ct[9] * ct[14];
  proc_control_B.out1_tmp_hw = ct[5] * ct[15];
  proc_control_B.out1_tmp_i = ct[14] * ct[15];
  proc_control_B.out1_tmp_p = ct[6] * ct[10];
  proc_control_B.out1_tmp_f = ct[7] * ct[9];
  proc_control_B.out1_tmp_ew = ct[8] * ct[13];
  proc_control_B.out1_tmp_n = ct[10] * ct[11];
  proc_control_B.out1_tmp_ho = ct[8] * ct[16];
  proc_control_B.out1_tmp_hp = ct[5] * ct[10];
  proc_control_B.out1_tmp_fn = ct[7] * ct[8];
  proc_control_B.out1_tmp_iv = ct[8] * ct[12];
  proc_control_B.out1_tmp_f4 = ct[9] * ct[11];
  proc_control_B.out1_tmp_cy = ct[11] * ct[15];
  proc_control_B.out1_tmp_nn = proc_control_B.out1_tmp_iv * ct[21];
  proc_control_B.out1_tmp_he = proc_control_B.out1_tmp_f4 * ct[21];
  proc_control_B.out1_tmp_kq = proc_control_B.out1_tmp_cy * ct[21];
  proc_control_B.out1_tmp_tmp_b = proc_control_B.out1_tmp_ew * ct[22];
  proc_control_B.out1_tmp_hz = proc_control_B.out1_tmp_tmp_b * ct[24];
  proc_control_B.out1_tmp_tmp_da = proc_control_B.out1_tmp_n * ct[22];
  proc_control_B.out1_tmp_be = proc_control_B.out1_tmp_tmp_da * ct[24];
  proc_control_B.out1_tmp_tmp_hs = proc_control_B.out1_tmp_ho * ct[22];
  proc_control_B.out1_tmp_os = proc_control_B.out1_tmp_tmp_hs * ct[24];
  proc_control_B.out1_tmp_nq = ct[5] * ct[12];
  proc_control_B.out1_tmp_m = ct[6] * ct[11];
  proc_control_B.out1_tmp_ku = ct[12] * ct[14];
  proc_control_B.out1_tmp_jk = proc_control_B.out1_tmp_nq * ct[21];
  proc_control_B.out1_tmp_hc = proc_control_B.out1_tmp_m * ct[21];
  proc_control_B.out1_tmp_f2 = proc_control_B.out1_tmp_ku * ct[21];
  proc_control_B.out1_tmp_d = ct[11] * ct[20];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_jk * ct[24];
  proc_control_B.out1_tmp_kg = proc_control_B.out1_tmp_hc * ct[24];
  proc_control_B.out1_tmp_ic = ct[10] * ct[14];
  proc_control_B.out1_tmp_h5 = proc_control_B.out1_tmp_hp * ct[22];
  proc_control_B.out1_tmp_mg = proc_control_B.out1_tmp_fn * ct[22];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_ic * ct[22];
  proc_control_B.out1_tmp_lf = ct[8] * ct[20];
  proc_control_B.out1_tmp_m4 = proc_control_B.out1_tmp_h5 * ct[24];
  proc_control_B.out1_tmp_nt = proc_control_B.out1_tmp_mg * ct[24];
  proc_control_B.out1_tmp_gv = proc_control_B.out1_tmp_hn * ct[25];
  proc_control_B.out1_tmp_dj = proc_control_B.out1_tmp_k * ct[25];
  proc_control_B.out1_tmp_mq = ct[13] * ct[14];
  proc_control_B.out1_tmp_ft = proc_control_B.out1_tmp_c * ct[25];
  proc_control_B.out1_tmp_gd = ct[5] * ct[16];
  proc_control_B.out1_tmp_jc = proc_control_B.out1_tmp_hw * ct[25];
  proc_control_B.out1_tmp_cq = ct[14] * ct[16];
  proc_control_B.out1_tmp_eg = proc_control_B.out1_tmp_i * ct[25];
  proc_control_B.out1_tmp_mx = proc_control_B.out1_tmp_hn * ct[13];
  proc_control_B.out1_tmp_of = proc_control_B.out1_tmp_hp * ct[12];
  proc_control_B.out1_tmp_a = proc_control_B.out1_tmp_k * ct[13];
  proc_control_B.out1_tmp_ji = proc_control_B.out1_tmp_p * ct[11];
  proc_control_B.out1_tmp_ga = proc_control_B.out1_tmp_fn * ct[12];
  proc_control_B.out1_tmp_jkm = proc_control_B.out1_tmp_f * ct[11];
  proc_control_B.out1_tmp_ee = proc_control_B.t1542_tmp * ct[14];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp * ct[14];
  proc_control_B.out1_tmp_jb = proc_control_B.out1_tmp_j * ct[15];
  proc_control_B.out1_tmp_gi = proc_control_B.out1_tmp_o * ct[15];
  proc_control_B.out1_tmp_om = proc_control_B.out1_tmp_hn * ct[16];
  proc_control_B.out1_tmp_hm = proc_control_B.out1_tmp_k * ct[16];
  proc_control_B.out1_tmp_c2 = proc_control_B.out1_tmp_mq * ct[15];
  proc_control_B.out1_tmp_a0 = proc_control_B.out1_tmp_c * ct[16];
  proc_control_B.out1_tmp_lu = proc_control_B.out1_tmp_hw * ct[16];
  proc_control_B.out1_tmp_jcs = proc_control_B.out1_tmp_i * ct[16];
  proc_control_B.out1_tmp_tmp = ct[6] * ct[13];
  proc_control_B.out1_tmp_tmp_d = proc_control_B.out1_tmp_tmp * ct[20];
  proc_control_B.out1_tmp_ib = proc_control_B.out1_tmp_tmp_d * ct[21];
  proc_control_B.out1_tmp_tmp_o = ct[7] * ct[12];
  proc_control_B.out1_tmp_tmp_n = proc_control_B.out1_tmp_tmp_o * ct[20];
  proc_control_B.out1_tmp_mi = proc_control_B.out1_tmp_tmp_n * ct[21];
  proc_control_B.out1_tmp_tmp_jk = proc_control_B.out1_tmp_ew * ct[20];
  proc_control_B.out1_tmp_ftf = proc_control_B.out1_tmp_tmp_jk * ct[21];
  proc_control_B.out1_tmp_tmp_e = proc_control_B.out1_tmp_n * ct[20];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_tmp_e * ct[21];
  proc_control_B.out1_tmp_tmp_f = ct[6] * ct[16];
  proc_control_B.out1_tmp_tmp_j = proc_control_B.out1_tmp_tmp_f * ct[20];
  proc_control_B.out1_tmp_iz = proc_control_B.out1_tmp_tmp_j * ct[21];
  proc_control_B.out1_tmp_tmp_i = proc_control_B.out1_tmp_ho * ct[20];
  proc_control_B.out1_tmp_e0 = proc_control_B.out1_tmp_tmp_i * ct[21];
  proc_control_B.t1526 = (((((ct[1] + ct[157]) + ct[310]) + ct[336]) - ct[32] *
    proc_control_B.t1465) + ct[30] * ct[478] * proc_control_B.t1526 * 2.0) *
    proc_control_B.t1546;
  proc_control_B.out1_tmp_j0 = ((((((((((((((((((((ct[541] + ct[565]) + ct[575])
    + ct[799]) + ct[821]) + ct[906]) + ct[912]) + ct[968]) + ct[1002]) + ct[64])
    + ct[72]) + ct[75]) + ct[78]) + ct[80]) - ct[854]) - ct[858]) + ct[214]) +
    ct[225]) + ct[231]) + ct[245]) + ct[249]) - ct[87];
  proc_control_B.out1_tmp_m3 = proc_control_B.out1_tmp_nq * ct[20];
  proc_control_B.out1_tmp_ax = proc_control_B.out1_tmp_m * ct[20];
  proc_control_B.out1_tmp_hi = proc_control_B.out1_tmp_ku * ct[20];
  proc_control_B.out1_tmp_oc = ct[7] * ct[15];
  proc_control_B.out1_tmp_hnt = proc_control_B.t1464 * proc_control_B.t1546;
  proc_control_B.out1_tmp_j3 = proc_control_B.out1_tmp_iv * ct[20];
  proc_control_B.out1_tmp_g3 = proc_control_B.out1_tmp_f4 * ct[20];
  proc_control_B.out1_tmp_jz = proc_control_B.out1_tmp_cy * ct[20];
  proc_control_B.out1_tmp_lg = ct[12] * ct[21];
  proc_control_B.t1465 = ((((((((((ct[2] + ct[150]) + ct[153]) +
    proc_control_B.t1465 * ct[1013]) - ct[326]) + ct[348]) - ct[340]) - ct[343])
    - ct[350]) + proc_control_B.t1543_tmp_k * ct[894] * proc_control_B.t1524) +
    proc_control_B.t1543_tmp * ct[327] * proc_control_B.t1524) *
    proc_control_B.t1546;
  proc_control_B.t1524 = ct[11] * ct[21];
  proc_control_B.t1543_tmp = ct[12] * ct[20];
  proc_control_B.t1524_g *= proc_control_B.t1546;
  proc_control_B.t1543_tmp_k = ct[6] * ct[21];
  proc_control_B.out1_tmp_kb = proc_control_B.t1542 * proc_control_B.t1546;
  proc_control_B.out1_tmp_a3 = -proc_control_B.t1463 * proc_control_B.t1546;
  proc_control_B.out1_tmp_dn = proc_control_B.out1_tmp_hp * ct[20];
  proc_control_B.out1_tmp_bf = proc_control_B.out1_tmp_fn * ct[20];
  proc_control_B.out1_tmp_hj = proc_control_B.out1_tmp_ic * ct[20];
  proc_control_B.out1_tmp_nk = ct[8] * ct[22];
  proc_control_B.out1_tmp_jza = ct[10] * ct[20];
  proc_control_B.out1_tmp_ie = ct[7] * ct[22];
  proc_control_B.out1_tmp_p3 = (ct[904] + ct[910]) + ct[920];
  proc_control_B.out1_tmp_mz = ct[10] * ct[21];
  proc_control_B.out1_tmp_ez = proc_control_B.out1_tmp_j * ct[24];
  proc_control_B.out1_tmp_izd = proc_control_B.out1_tmp_o * ct[24];
  proc_control_B.out1_tmp_gr = proc_control_B.out1_tmp_gd * ct[24];
  proc_control_B.out1_tmp_ca = proc_control_B.out1_tmp_cq * ct[24];
  proc_control_B.out1_tmp_tmp_h = proc_control_B.out1_tmp_f * ct[20];
  proc_control_B.out1_tmp_ds = proc_control_B.out1_tmp_tmp_h * ct[22];
  proc_control_B.out1_tmp_kx = proc_control_B.out1_tmp_j3 * ct[22];
  proc_control_B.out1_tmp_pd = proc_control_B.out1_tmp_g3 * ct[22];
  proc_control_B.out1_tmp_tmp_d1 = proc_control_B.out1_tmp_oc * ct[20];
  proc_control_B.out1_tmp_a0x = proc_control_B.out1_tmp_tmp_d1 * ct[22];
  proc_control_B.out1_tmp_fto = proc_control_B.out1_tmp_jz * ct[22];
  proc_control_B.out1_tmp_ci = ((((((((((((((((((((ct[548] + ct[569]) + ct[581])
    + ct[802]) + ct[842]) + ct[901]) + ct[913]) + ct[974]) + ct[1006]) + ct[61])
    + ct[67]) + ct[69]) + ct[70]) + ct[77]) - ct[855]) - ct[865]) + ct[210]) +
    ct[220]) + ct[232]) + ct[248]) + ct[253]) - ct[84];
  proc_control_B.out1_tmp_kbp = proc_control_B.out1_tmp_p * ct[20];
  proc_control_B.out1_tmp_g0 = proc_control_B.t1542_tmp * ct[24];
  proc_control_B.out1_tmp_el = proc_control_B.out1_tmp * ct[24];
  proc_control_B.out1_tmp_n3 = proc_control_B.t1542_tmp * ct[25];
  proc_control_B.out1_tmp_fni = proc_control_B.out1_tmp * ct[25];
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_mz * ct[22];
  proc_control_B.out1_tmp_e2 = proc_control_B.out1_tmp_lg * ct[22];
  proc_control_B.out1_tmp_by = proc_control_B.out1_tmp_b * ct[24];
  proc_control_B.out1_tmp_av = proc_control_B.out1_tmp_h * ct[24];
  proc_control_B.out1_tmp_i2 = proc_control_B.out1_tmp_b * ct[25];
  proc_control_B.out1_tmp_nqp = proc_control_B.out1_tmp_h * ct[25];
  proc_control_B.out1_tmp_fx = proc_control_B.out1_tmp_e * ct[24];
  proc_control_B.out1_tmp_i4 = proc_control_B.out1_tmp_e * ct[25];
  proc_control_B.out1_tmp_nlw = proc_control_B.out1_tmp_nk * ct[25];
  proc_control_B.out1_tmp_gu = ct[10] * ct[25];
  proc_control_B.out1_tmp_nh = -ct[10] * ct[14];
  proc_control_B.out1_tmp_ch = proc_control_B.out1_tmp_ew * ct[25];
  proc_control_B.out1_tmp_d4 = proc_control_B.out1_tmp_n * ct[25];
  proc_control_B.out1_tmp_ky = proc_control_B.out1_tmp_ho * ct[25];
  proc_control_B.out1_tmp_pn1 = proc_control_B.out1_tmp_ew * ct[21];
  proc_control_B.out1_tmp_nm = proc_control_B.out1_tmp_n * ct[21];
  proc_control_B.out1_tmp_ce = proc_control_B.out1_tmp_ho * ct[21];
  proc_control_B.out1_tmp_nhy = ct[11] * ct[22];
  proc_control_B.out1_tmp_da = ((((((((((((((ct[371] - ct[372]) - ct[389]) - ct
    [397]) + ct[405]) + ct[457]) - ct[458]) - ct[464]) - ct[471]) + ct[476]) -
    ct[513]) + ct[521]) - ct[603]) + ct[604]) - ct[613]) + ct[614];
  proc_control_B.out1_tmp_bt = ((((((((((((((ct[362] - ct[364]) - ct[385]) - ct
    [391]) + ct[403]) + ct[455]) - ct[456]) - ct[463]) - ct[469]) + ct[474]) -
    ct[510]) + ct[519]) - ct[597]) + ct[599]) - ct[611]) + ct[612];
  proc_control_B.out1_tmp_jkh = -ct[12] * ct[14];
  proc_control_B.out1_tmp_fa = proc_control_B.t1524 * ct[24];
  proc_control_B.out1_tmp_j11 = ct[12] * ct[24];
  proc_control_B.out1_tmp_heb = proc_control_B.out1_tmp_iv * ct[24];
  proc_control_B.out1_tmp_ih = proc_control_B.out1_tmp_f4 * ct[24];
  proc_control_B.out1_tmp_gn = ct[8] * ct[21];
  proc_control_B.out1_tmp_c1 = proc_control_B.out1_tmp_cy * ct[24];
  out1[7] =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((proc_control_B.out1_tmp_p3 + ct[933]) + ct[941]) +
    ct[966]) + ct[997]) + ct[37]) + ct[55]) + ct[71]) + ct[81]) + ct[101]) + ct
    [191]) + ct[199]) + ct[277]) + ct[307]) + ct[308]) + ct[337]) + ct[352]) +
    ct[354]) + ct[356]) + ct[358]) + ct[382]) + ct[479]) + ct[480]) + ct[481]) +
    ct[483]) + ct[484]) + ct[485]) + ct[487]) + ct[489]) + ct[491]) + ct[492]) +
    ct[494]) + ct[496]) + ct[498]) + ct[499]) + ct[500]) + ct[502]) + ct[503]) +
    ct[505]) + ct[542]) + ct[550]) + ct[553]) + ct[554]) + ct[576]) + ct[578]) +
    ct[582]) + ct[584]) + ct[698]) + ct[699]) + ct[700]) + ct[704]) + ct[706]) +
    ct[708]) + ct[716]) + ct[749]) + ct[755]) + ct[761]) + ct[764]) + ct[767]) +
    ct[771]) + ct[775]) + ct[779]) + ct[781]) + ct[783]) + ct[787]) + ct[789]) +
    ct[970]) + ct[975]) + ct[979]) + ct[980]) + ct[182]) + ct[184]) + ct[187]) +
    ct[188]) + ct[189]) + ct[192]) + ct[198]) + ct[200]) + ct[509] * ct[515]) +
    ct[512] * ct[515]) - ct[515] * ct[518]) - ct[515] * ct[520]) + ct[5] * ct
    [538] * ct[616]) - ct[14] * ct[538] * ct[616]) + proc_control_B.t1543_tmp_k *
                      ct[523] * ct[616]) + proc_control_B.out1_tmp_ie * ct[523] *
                     ct[616]) + proc_control_B.out1_tmp_gn * ct[523] * ct[616])
                   + proc_control_B.out1_tmp_nhy * ct[523] * ct[616]) +
                  proc_control_B.out1_tmp_ez * ct[515] * ct[598]) -
                 proc_control_B.out1_tmp_izd * ct[515] * ct[598]) +
                proc_control_B.out1_tmp_g0 * ct[531] * ct[598]) -
               proc_control_B.out1_tmp_el * ct[531] * ct[598]) +
              proc_control_B.out1_tmp_gv * ct[515] * ct[598]) -
             proc_control_B.out1_tmp_dj * ct[515] * ct[598]) +
            proc_control_B.out1_tmp_n3 * ct[549] * ct[598]) -
           proc_control_B.out1_tmp_fni * ct[549] * ct[598]) +
          proc_control_B.out1_tmp_nl * ct[515] * ct[616]) +
         proc_control_B.out1_tmp_e2 * ct[515] * ct[616]) +
        (((((((((((((((((((((((((((-ct[13] * ct[14] * ct[24] * ct[515] * ct[598]
    - proc_control_B.out1_tmp_ft * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_by * ct[531] * ct[598]) - proc_control_B.out1_tmp_jc
    * ct[515] * ct[598]) - proc_control_B.out1_tmp_gr * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_av * ct[531] * ct[598]) - proc_control_B.out1_tmp_i2
    * ct[549] * ct[598]) - proc_control_B.out1_tmp_nqp * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_eg * ct[515] * ct[598]) + proc_control_B.out1_tmp_ca
    * ct[515] * ct[598]) + proc_control_B.out1_tmp_fx * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_i4 * ct[549] * ct[598]) + proc_control_B.out1_tmp_mx
    * ct[24] * ct[25]) - proc_control_B.out1_tmp_of * ct[24] * ct[25]) -
                      proc_control_B.out1_tmp_a * ct[24] * ct[25]) +
                     proc_control_B.out1_tmp_ji * ct[24] * ct[25]) +
                    proc_control_B.out1_tmp_ga * ct[24] * ct[25]) -
                   proc_control_B.out1_tmp_jkm * ct[24] * ct[25]) -
                  proc_control_B.out1_tmp_ee * ct[24] * ct[25]) +
                 proc_control_B.out1_tmp_jy * ct[24] * ct[25]) -
                proc_control_B.out1_tmp_jb * ct[24] * ct[25]) +
               proc_control_B.out1_tmp_gi * ct[24] * ct[25]) -
              proc_control_B.out1_tmp_om * ct[24] * ct[25]) +
             proc_control_B.out1_tmp_hm * ct[24] * ct[25]) +
            proc_control_B.out1_tmp_c2 * ct[24] * ct[25]) +
           proc_control_B.out1_tmp_a0 * ct[24] * ct[25]) +
          proc_control_B.out1_tmp_lu * ct[24] * ct[25]) -
         proc_control_B.out1_tmp_jcs * ct[24] * ct[25])) +
       (((((((((((proc_control_B.out1_tmp_ib * ct[24] * ct[598] -
                  proc_control_B.out1_tmp_mi * ct[24] * ct[598]) +
                 proc_control_B.out1_tmp_ftf * ct[24] * ct[598]) -
                proc_control_B.out1_tmp_on * ct[24] * ct[598]) -
               proc_control_B.out1_tmp_kbp * ct[22] * ct[25] * ct[598]) +
              proc_control_B.out1_tmp_ds * ct[25] * ct[598]) -
             proc_control_B.out1_tmp_kx * ct[25] * ct[598]) +
            proc_control_B.out1_tmp_pd * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_iz * ct[24] * ct[598]) -
          proc_control_B.out1_tmp_a0x * ct[25] * ct[598]) -
         proc_control_B.out1_tmp_e0 * ct[24] * ct[598]) -
        proc_control_B.out1_tmp_fto * ct[25] * ct[598])) *
      proc_control_B.out1_tmp_hnt + ((((((((((((((((((proc_control_B.out1_tmp_j0
    - ct[22] * ct[363]) + ct[22] * ct[365]) + ct[22] * ct[375]) + ct[22] * ct
    [386]) + ct[22] * ct[393]) + ct[22] * ct[713]) + proc_control_B.out1_tmp_ew *
    ct[549] * ct[607]) - proc_control_B.out1_tmp_n * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_ho * ct[549] * ct[607]) - proc_control_B.out1_tmp_ch
    * ct[549] * ct[598]) + proc_control_B.out1_tmp_d4 * ct[549] * ct[598]) +
             proc_control_B.out1_tmp_ky * ct[549] * ct[598]) +
            proc_control_B.out1_tmp_dn * ct[22] * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_bf * ct[22] * ct[25] * ct[598]) -
          proc_control_B.out1_tmp_nn * ct[22] * ct[25] * ct[598]) +
         proc_control_B.out1_tmp_he * ct[22] * ct[25] * ct[598]) -
        proc_control_B.out1_tmp_hj * ct[22] * ct[25] * ct[598]) -
       proc_control_B.out1_tmp_kq * ct[22] * ct[25] * ct[598]) *
      proc_control_B.t1526) + ((((((((((((((((((proc_control_B.out1_tmp_ci - ct
    [21] * ct[367]) + ct[21] * ct[368]) - ct[21] * ct[376]) + ct[21] * ct[378])
    + ct[21] * ct[387]) + ct[21] * ct[399]) - proc_control_B.out1_tmp_iv * ct
    [531] * ct[607]) + proc_control_B.out1_tmp_f4 * ct[531] * ct[607]) -
    proc_control_B.out1_tmp_cy * ct[531] * ct[607]) +
              proc_control_B.out1_tmp_heb * ct[531] * ct[598]) -
             proc_control_B.out1_tmp_ih * ct[531] * ct[598]) +
            proc_control_B.out1_tmp_c1 * ct[531] * ct[598]) +
           proc_control_B.out1_tmp_m3 * ct[21] * ct[24] * ct[598]) -
          proc_control_B.out1_tmp_ax * ct[21] * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_pn1 * ct[22] * ct[24] * ct[598]) -
        proc_control_B.out1_tmp_nm * ct[22] * ct[24] * ct[598]) -
       proc_control_B.out1_tmp_hi * ct[21] * ct[24] * ct[598]) -
      proc_control_B.out1_tmp_ce * ct[22] * ct[24] * ct[598]) *
     proc_control_B.out1_tmp_a3) + (((((((((((((((((((((((((((((((((((((((((ct
    [375] + ct[376]) - ct[378]) + ct[393]) - ct[399]) + ct[605]) - ct[618]) +
    ct[619]) + ct[635]) + ct[664]) + ct[667]) + ct[713]) + ct[831]) + ct[834]) +
    ct[927]) + ct[930]) + ct[1004]) + ct[1009]) + ct[38]) + ct[40]) + ct[195]) +
    ct[196]) + ct[238]) + ct[243]) - proc_control_B.out1_tmp_hz * ct[598]) +
    proc_control_B.out1_tmp_be * ct[598]) - proc_control_B.out1_tmp_nn * ct[25] *
    ct[598]) + proc_control_B.out1_tmp_he * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_os * ct[598]) - proc_control_B.out1_tmp_kq * ct[25] *
    ct[598]) - proc_control_B.out1_tmp_fa * ct[515] * ct[607]) -
    proc_control_B.t1543_tmp * ct[24] * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_nlw * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_jza * ct[25] * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_nn * ct[24] * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_he * ct[24] * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_hz * ct[25] * ct[31]) - proc_control_B.out1_tmp_be *
    ct[25] * ct[31]) + proc_control_B.out1_tmp_kq * ct[24] * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_os * ct[25] * ct[31]) * proc_control_B.t1465 -
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_da - ct[629])
    + ct[639]) + ct[647]) + ct[658]) + ct[662]) - ct[674]) - ct[680]) - ct[798])
    - ct[808]) - ct[832]) - ct[838]) - ct[844]) + ct[853]) + ct[867]) + ct[874])
    - ct[885]) + ct[925]) + ct[118]) + ct[122]) + ct[123]) + ct[129]) + ct[131])
    - ct[139]) - ct[145]) - ct[12] * ct[544] * ct[616]) +
                   proc_control_B.out1_tmp_jk * ct[607]) -
                  proc_control_B.out1_tmp_hc * ct[607]) -
                 proc_control_B.out1_tmp_f2 * ct[607]) -
                proc_control_B.out1_tmp_d * ct[531] * ct[616]) +
               proc_control_B.out1_tmp_j11 * ct[544] * ct[607]) -
              proc_control_B.out1_tmp_l * ct[598]) + proc_control_B.out1_tmp_kg *
             ct[598]) - proc_control_B.out1_tmp_jk * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_hc * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_f2 * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_f2 * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_d * ct[24] * ct[531] * ct[607]) +
       proc_control_B.out1_tmp_l * ct[25] * ct[31]) - proc_control_B.out1_tmp_kg
      * ct[25] * ct[31]) + proc_control_B.out1_tmp_jkh * ct[21] * ct[24] * ct[25]
     * ct[31]) * proc_control_B.t1524_g) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_bt - ct[630])
    + ct[637]) + ct[645]) + ct[650]) + ct[657]) - ct[669]) - ct[673]) - ct[796])
    - ct[800]) - ct[813]) - ct[823]) - ct[828]) + ct[851]) + ct[859]) + ct[872])
    - ct[882]) + ct[922]) + ct[109]) + ct[110]) + ct[112]) + ct[114]) + ct[125])
                      - ct[135]) - ct[142]) - ct[10] * ct[562] * ct[616]) +
                   proc_control_B.out1_tmp_h5 * ct[607]) -
                  proc_control_B.out1_tmp_mg * ct[607]) -
                 proc_control_B.out1_tmp_g * ct[607]) -
                proc_control_B.out1_tmp_lf * ct[549] * ct[616]) +
               proc_control_B.out1_tmp_gu * ct[562] * ct[607]) -
              proc_control_B.out1_tmp_m4 * ct[598]) + proc_control_B.out1_tmp_nt
             * ct[598]) - proc_control_B.out1_tmp_h5 * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_mg * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_g * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_g * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_lf * ct[25] * ct[549] * ct[607]) +
       proc_control_B.out1_tmp_m4 * ct[25] * ct[31]) -
      proc_control_B.out1_tmp_nt * ct[25] * ct[31]) + proc_control_B.out1_tmp_nh
     * ct[22] * ct[24] * ct[25] * ct[31]) * proc_control_B.out1_tmp_kb);
  proc_control_B.out1_tmp_hz = proc_control_B.out1_tmp_j3 * ct[23];
  proc_control_B.out1_tmp_be = proc_control_B.out1_tmp_g3 * ct[23];
  proc_control_B.out1_tmp_tmp_l = proc_control_B.out1_tmp_tmp * ct[22];
  proc_control_B.out1_tmp_os = proc_control_B.out1_tmp_tmp_l * ct[23];
  proc_control_B.out1_tmp_tmp_ld = proc_control_B.out1_tmp_tmp_o * ct[22];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_tmp_ld * ct[23];
  proc_control_B.out1_tmp_tmp_hb = proc_control_B.out1_tmp_tmp_f * ct[22];
  proc_control_B.out1_tmp_kg = proc_control_B.out1_tmp_tmp_hb * ct[23];
  proc_control_B.out1_tmp_h5 = proc_control_B.out1_tmp_p * ct[22];
  proc_control_B.out1_tmp_mg = proc_control_B.out1_tmp_f * ct[22];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_oc * ct[22];
  proc_control_B.out1_tmp_m4 = proc_control_B.out1_tmp_h5 * ct[23];
  proc_control_B.out1_tmp_nt = proc_control_B.out1_tmp_mg * ct[23];
  proc_control_B.out1_tmp_hzv = proc_control_B.out1_tmp_p * ct[21];
  proc_control_B.out1_tmp_iq = proc_control_B.out1_tmp_f * ct[21];
  proc_control_B.out1_tmp_pn = proc_control_B.out1_tmp_oc * ct[21];
  proc_control_B.out1_tmp_ot = ct[6] * ct[22];
  proc_control_B.out1_tmp_bj = ct[7] * ct[21];
  proc_control_B.out1_tmp_ng = ct[10] * ct[22];
  proc_control_B.out1_tmp_og = ct[7] * ct[20];
  proc_control_B.out1_tmp_otc = proc_control_B.t1542_tmp * ct[23];
  proc_control_B.out1_tmp_gz = proc_control_B.out1_tmp * ct[23];
  proc_control_B.out1_tmp_gb = ct[6] * ct[20];
  proc_control_B.out1_tmp_ge = proc_control_B.out1_tmp_b * ct[23];
  proc_control_B.out1_tmp_gbr = proc_control_B.out1_tmp_h * ct[23];
  proc_control_B.out1_tmp_kt = proc_control_B.out1_tmp_e * ct[23];
  proc_control_B.out1_tmp_mx *= ct[23];
  proc_control_B.out1_tmp_of *= ct[23];
  proc_control_B.out1_tmp_a *= ct[23];
  proc_control_B.out1_tmp_ji *= ct[23];
  proc_control_B.out1_tmp_ga *= ct[23];
  proc_control_B.out1_tmp_jkm *= ct[23];
  proc_control_B.out1_tmp_ee *= ct[23];
  proc_control_B.out1_tmp_jy *= ct[23];
  proc_control_B.out1_tmp_jb *= ct[23];
  proc_control_B.out1_tmp_gi *= ct[23];
  proc_control_B.out1_tmp_om *= ct[23];
  proc_control_B.out1_tmp_hm *= ct[23];
  proc_control_B.out1_tmp_c2 *= ct[23];
  proc_control_B.out1_tmp_a0 *= ct[23];
  proc_control_B.out1_tmp_lu *= ct[23];
  proc_control_B.out1_tmp_jcs *= ct[23];
  proc_control_B.out1_tmp_tmp_ih = proc_control_B.out1_tmp_hp * ct[21];
  proc_control_B.out1_tmp_p5 = proc_control_B.out1_tmp_tmp_ih * ct[22];
  proc_control_B.out1_tmp_tmp_no = proc_control_B.out1_tmp_fn * ct[21];
  proc_control_B.out1_tmp_m4e = proc_control_B.out1_tmp_tmp_no * ct[22];
  proc_control_B.out1_tmp_jk *= ct[22];
  proc_control_B.out1_tmp_hc *= ct[22];
  proc_control_B.out1_tmp_tmp_bi = proc_control_B.out1_tmp_ic * ct[21];
  proc_control_B.out1_tmp_ktf = proc_control_B.out1_tmp_tmp_bi * ct[22];
  proc_control_B.out1_tmp_f2 *= ct[22];
  proc_control_B.out1_tmp_jkx = ((((((((((((((((((((ct[558] + ct[580]) + ct[586])
    + ct[825]) + ct[847]) + ct[899]) + ct[919]) + ct[983]) + ct[1011]) + ct[59])
    + ct[60]) + ct[63]) + ct[66]) + ct[74]) - ct[861]) - ct[868]) + ct[208]) +
    ct[224]) + ct[230]) + ct[252]) + ct[254]) - ct[82];
  proc_control_B.out1_tmp_j1 = ct[12] * ct[22];
  proc_control_B.out1_tmp_np = ct[7] * ct[25];
  proc_control_B.out1_tmp_j0o = -ct[7] * ct[15];
  proc_control_B.out1_tmp_lc = proc_control_B.out1_tmp_tmp * ct[25];
  proc_control_B.out1_tmp_ph = proc_control_B.out1_tmp_tmp_o * ct[25];
  proc_control_B.out1_tmp_po = proc_control_B.out1_tmp_tmp_f * ct[25];
  proc_control_B.out1_tmp_cg = proc_control_B.out1_tmp_ot * ct[25];
  proc_control_B.out1_tmp_k3 = ((((((((((((((ct[380] - ct[381]) - ct[395]) - ct
    [401]) + ct[410]) + ct[452]) - ct[453]) - ct[468]) - ct[470]) + ct[477]) -
    ct[513]) + ct[521]) - ct[595]) + ct[596]) - ct[620]) + ct[621];
  proc_control_B.out1_tmp_mt = proc_control_B.out1_tmp_j * ct[23];
  proc_control_B.out1_tmp_iee = proc_control_B.out1_tmp_o * ct[23];
  proc_control_B.out1_tmp_bjy = proc_control_B.out1_tmp_j * ct[25];
  proc_control_B.out1_tmp_oq = proc_control_B.out1_tmp_o * ct[25];
  proc_control_B.out1_tmp_gs = proc_control_B.out1_tmp_mq * ct[23];
  proc_control_B.out1_tmp_ed = proc_control_B.out1_tmp_og * ct[22];
  proc_control_B.out1_tmp_in = proc_control_B.out1_tmp_d * ct[22];
  proc_control_B.out1_tmp_is = proc_control_B.out1_tmp_mq * ct[25];
  proc_control_B.out1_tmp_m5 = proc_control_B.out1_tmp_gd * ct[23];
  proc_control_B.out1_tmp_dl = proc_control_B.out1_tmp_gd * ct[25];
  proc_control_B.out1_tmp_j4 = proc_control_B.out1_tmp_cq * ct[23];
  proc_control_B.out1_tmp_pe = proc_control_B.out1_tmp_cq * ct[25];
  proc_control_B.out1_tmp_n0 = proc_control_B.t1543_tmp * ct[23];
  proc_control_B.out1_tmp_eu = proc_control_B.out1_tmp_m3 * ct[23];
  proc_control_B.out1_tmp_inq = proc_control_B.out1_tmp_ax * ct[23];
  proc_control_B.out1_tmp_a0m = proc_control_B.out1_tmp_hi * ct[23];
  proc_control_B.out1_tmp_fd = proc_control_B.out1_tmp_nq * ct[23];
  proc_control_B.out1_tmp_ko = proc_control_B.out1_tmp_m * ct[23];
  proc_control_B.out1_tmp_cg1 = proc_control_B.out1_tmp_ku * ct[23];
  proc_control_B.out1_tmp_ok1 = ct[11] * ct[23];
  proc_control_B.out1_tmp_g5 = -ct[11] * ct[15];
  proc_control_B.out1_tmp_o2 = (((((((((((((((ct[360] - ct[361]) - ct[384]) -
    ct[390]) + ct[402]) + ct[450]) - ct[451]) - ct[461]) - ct[465]) + ct[472]) -
    ct[507]) + ct[517]) - ct[587]) + ct[588]) - ct[609]) + ct[610]) + ct[622];
  out1[8] =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((ct[933] + ct[941]) + ct[966]) + ct[977]) + ct[1007])
    + ct[37]) + ct[43]) + ct[81]) + ct[101]) + ct[185]) + ct[199]) + ct[240]) +
    ct[247]) + ct[266]) + ct[277]) + ct[307]) + ct[308]) + ct[337]) + ct[352]) +
    ct[354]) + ct[356]) + ct[358]) + ct[382]) + ct[483]) + ct[484]) + ct[485]) +
    ct[486]) + ct[488]) + ct[489]) + ct[490]) + ct[494]) + ct[495]) + ct[496]) +
    ct[497]) + ct[500]) + ct[501]) + ct[502]) + ct[505]) + ct[543]) + ct[547]) +
    ct[550]) + ct[554]) + ct[566]) + ct[568]) + ct[582]) + ct[584]) + ct[695]) +
    ct[696]) + ct[697]) + ct[698]) + ct[699]) + ct[700]) + ct[704]) + ct[706]) +
    ct[708]) + ct[716]) + ct[752]) + ct[755]) + ct[758]) + ct[761]) + ct[769]) +
    ct[771]) + ct[773]) + ct[777]) + ct[779]) + ct[783]) + ct[785]) + ct[787]) +
    ct[969]) + ct[973]) + ct[975]) + ct[979]) + ct[183]) + ct[184]) + ct[186]) +
    ct[187]) + ct[190]) + ct[192]) + ct[193]) + ct[198]) + ct[506] * ct[531]) +
    ct[512] * ct[531]) - ct[516] * ct[531]) - ct[520] * ct[531]) + ct[9] * ct
    [556] * ct[616]) - ct[15] * ct[556] * ct[616]) + proc_control_B.out1_tmp_gb *
                      ct[544] * ct[616]) + proc_control_B.out1_tmp_lf * ct[544] *
                     ct[616]) + proc_control_B.out1_tmp_ng * ct[544] * ct[616])
                   + proc_control_B.out1_tmp_j1 * ct[544] * ct[616]) +
                  proc_control_B.out1_tmp_mt * ct[515] * ct[598]) -
                 proc_control_B.out1_tmp_iee * ct[515] * ct[598]) +
                proc_control_B.out1_tmp_otc * ct[531] * ct[598]) -
               proc_control_B.out1_tmp_gz * ct[531] * ct[598]) +
              proc_control_B.out1_tmp_gv * ct[531] * ct[598]) -
             proc_control_B.out1_tmp_dj * ct[531] * ct[598]) +
            proc_control_B.out1_tmp_bjy * ct[549] * ct[598]) -
           proc_control_B.out1_tmp_oq * ct[549] * ct[598]) -
          proc_control_B.out1_tmp_gs * ct[515] * ct[598]) +
         proc_control_B.out1_tmp_ed * ct[531] * ct[616]) +
        (((((((((((((((((((((((((((proc_control_B.out1_tmp_in * ct[531] * ct[616]
    - proc_control_B.out1_tmp_ge * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_ft * ct[531] * ct[598]) - proc_control_B.out1_tmp_is
    * ct[549] * ct[598]) - proc_control_B.out1_tmp_m5 * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_gbr * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_jc * ct[531] * ct[598]) - proc_control_B.out1_tmp_dl
    * ct[549] * ct[598]) + proc_control_B.out1_tmp_j4 * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_eg * ct[531] * ct[598]) + proc_control_B.out1_tmp_kt
    * ct[531] * ct[598]) + proc_control_B.out1_tmp_pe * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_mx * ct[25]) - proc_control_B.out1_tmp_of * ct[25])
                      - proc_control_B.out1_tmp_a * ct[25]) +
                     proc_control_B.out1_tmp_ji * ct[25]) +
                    proc_control_B.out1_tmp_ga * ct[25]) -
                   proc_control_B.out1_tmp_jkm * ct[25]) -
                  proc_control_B.out1_tmp_ee * ct[25]) +
                 proc_control_B.out1_tmp_jy * ct[25]) -
                proc_control_B.out1_tmp_jb * ct[25]) +
               proc_control_B.out1_tmp_gi * ct[25]) - proc_control_B.out1_tmp_om
              * ct[25]) + proc_control_B.out1_tmp_hm * ct[25]) +
            proc_control_B.out1_tmp_c2 * ct[25]) + proc_control_B.out1_tmp_a0 *
           ct[25]) + proc_control_B.out1_tmp_lu * ct[25]) -
         proc_control_B.out1_tmp_jcs * ct[25])) +
       (((((((((((proc_control_B.out1_tmp_ib * ct[23] * ct[598] -
                  proc_control_B.out1_tmp_mi * ct[23] * ct[598]) +
                 proc_control_B.out1_tmp_ftf * ct[23] * ct[598]) -
                proc_control_B.out1_tmp_on * ct[23] * ct[598]) +
               proc_control_B.out1_tmp_p5 * ct[25] * ct[598]) -
              proc_control_B.out1_tmp_m4e * ct[25] * ct[598]) +
             proc_control_B.out1_tmp_jk * ct[25] * ct[598]) -
            proc_control_B.out1_tmp_hc * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_ktf * ct[25] * ct[598]) -
          proc_control_B.out1_tmp_f2 * ct[25] * ct[598]) -
         proc_control_B.out1_tmp_iz * ct[23] * ct[598]) -
        proc_control_B.out1_tmp_e0 * ct[23] * ct[598])) * proc_control_B.t1526 +
      ((((((((((((((((((ct[22] * ct[366] + proc_control_B.out1_tmp_j0) - ct[22] *
                       ct[367]) + ct[22] * ct[368]) + ct[22] * ct[387]) + ct[22]
                    * ct[392]) + ct[22] * ct[711]) + proc_control_B.out1_tmp_tmp
                  * ct[549] * ct[607]) - proc_control_B.out1_tmp_tmp_o * ct[549]
                 * ct[607]) - proc_control_B.out1_tmp_tmp_f * ct[549] * ct[607])
               - proc_control_B.out1_tmp_lc * ct[549] * ct[598]) +
              proc_control_B.out1_tmp_ph * ct[549] * ct[598]) +
             proc_control_B.out1_tmp_po * ct[549] * ct[598]) -
            proc_control_B.out1_tmp_hzv * ct[22] * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_iq * ct[22] * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_m3 * ct[22] * ct[25] * ct[598]) -
         proc_control_B.out1_tmp_ax * ct[22] * ct[25] * ct[598]) -
        proc_control_B.out1_tmp_hi * ct[22] * ct[25] * ct[598]) -
       proc_control_B.out1_tmp_pn * ct[22] * ct[25] * ct[598]) *
      proc_control_B.out1_tmp_hnt) +
     ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_k3 - ct
    [631]) + ct[643]) + ct[652]) + ct[660]) + ct[666]) - ct[679]) - ct[686]) -
    ct[824]) - ct[827]) - ct[832]) - ct[838]) - ct[841]) + ct[860]) + ct[863]) +
    ct[874]) - ct[885]) + ct[926]) + ct[104]) + ct[126]) + ct[127]) + ct[129]) +
    ct[131]) - ct[141]) - ct[143]) - ct[11] * ct[523] * ct[616]) -
                      proc_control_B.out1_tmp_j3 * ct[607]) +
                     proc_control_B.out1_tmp_g3 * ct[607]) -
                    proc_control_B.out1_tmp_jz * ct[607]) -
                   proc_control_B.out1_tmp_lg * ct[515] * ct[616]) +
                  proc_control_B.out1_tmp_ok1 * ct[523] * ct[607]) +
                 proc_control_B.out1_tmp_hz * ct[598]) -
                proc_control_B.out1_tmp_be * ct[598]) +
               proc_control_B.out1_tmp_j3 * ct[25] * ct[598]) -
              proc_control_B.out1_tmp_g3 * ct[25] * ct[598]) +
             proc_control_B.out1_tmp_jz * ct[23] * ct[598]) +
            proc_control_B.out1_tmp_jz * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_lg * ct[23] * ct[515] * ct[607]) -
          proc_control_B.out1_tmp_hz * ct[25] * ct[31]) +
         proc_control_B.out1_tmp_be * ct[25] * ct[31]) +
        proc_control_B.out1_tmp_g5 * ct[20] * ct[23] * ct[25] * ct[31]) *
       proc_control_B.t1465 + (((((((((((((((((((((((((((((((((((((((ct[367] -
    ct[373]) + ct[374]) + ct[398]) + ct[590]) + ct[615]) - ct[617]) + ct[624]) +
    ct[628]) - ct[663]) + ct[670]) + ct[712]) + ct[715]) + ct[807]) + ct[810]) -
    ct[831]) - ct[834]) + ct[918]) + ct[929]) + ct[999]) + ct[1010]) + ct[39]) +
    ct[239]) + ct[242]) + proc_control_B.out1_tmp_os * ct[598]) -
    proc_control_B.out1_tmp_l * ct[598]) - proc_control_B.out1_tmp_m3 * ct[25] *
    ct[598]) + proc_control_B.out1_tmp_ax * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_hi * ct[25] * ct[598]) - proc_control_B.out1_tmp_kg *
    ct[598]) + proc_control_B.t1524 * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_n0 * ct[531] * ct[607]) - proc_control_B.out1_tmp_cg
    * ct[531] * ct[607]) - proc_control_B.out1_tmp_bj * ct[25] * ct[549] * ct
              [607]) + proc_control_B.out1_tmp_eu * ct[25] * ct[31]) -
            proc_control_B.out1_tmp_inq * ct[25] * ct[31]) -
           proc_control_B.out1_tmp_os * ct[25] * ct[31]) +
          proc_control_B.out1_tmp_l * ct[25] * ct[31]) -
         proc_control_B.out1_tmp_a0m * ct[25] * ct[31]) +
        proc_control_B.out1_tmp_kg * ct[25] * ct[31]) * proc_control_B.t1524_g)
      - (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_o2 - ct
    [632]) + ct[641]) + ct[644]) + ct[655]) - ct[661]) - ct[671]) - ct[797]) -
    ct[801]) - ct[809]) - ct[814]) - ct[815]) + ct[852]) + ct[856]) + ct[870]) -
    ct[876]) + ct[916]) + ct[92]) + ct[94]) + ct[96]) + ct[97]) + ct[121]) - ct
    [136]) - ct[138]) - ct[7] * ct[562] * ct[616]) - proc_control_B.out1_tmp_h5 *
                       ct[607]) + proc_control_B.out1_tmp_mg * ct[607]) -
                     proc_control_B.out1_tmp_g * ct[607]) -
                    proc_control_B.t1543_tmp_k * ct[549] * ct[616]) +
                   proc_control_B.out1_tmp_np * ct[562] * ct[607]) +
                  proc_control_B.out1_tmp_m4 * ct[598]) -
                 proc_control_B.out1_tmp_nt * ct[598]) +
                proc_control_B.out1_tmp_h5 * ct[25] * ct[598]) -
               proc_control_B.out1_tmp_mg * ct[25] * ct[598]) +
              proc_control_B.out1_tmp_g * ct[23] * ct[598]) +
             proc_control_B.out1_tmp_g * ct[25] * ct[598]) +
            proc_control_B.t1543_tmp_k * ct[25] * ct[549] * ct[607]) -
           proc_control_B.out1_tmp_m4 * ct[25] * ct[31]) +
          proc_control_B.out1_tmp_nt * ct[25] * ct[31]) +
         proc_control_B.out1_tmp_j0o * ct[22] * ct[23] * ct[25] * ct[31]) *
      proc_control_B.out1_tmp_kb)) +
    ((((((((((((((((((proc_control_B.out1_tmp_jkx - ct[20] * ct[373]) + ct[20] *
                     ct[374]) + ct[20] * ct[375]) + ct[20] * ct[393]) + ct[20] *
                  ct[398]) + ct[20] * ct[713]) + proc_control_B.out1_tmp_nq *
                ct[515] * ct[607]) - proc_control_B.out1_tmp_m * ct[515] * ct
               [607]) - proc_control_B.out1_tmp_ku * ct[515] * ct[607]) -
             proc_control_B.out1_tmp_fd * ct[515] * ct[598]) +
            proc_control_B.out1_tmp_ko * ct[515] * ct[598]) +
           proc_control_B.out1_tmp_cg1 * ct[515] * ct[598]) +
          proc_control_B.out1_tmp_tmp_d * ct[22] * ct[23] * ct[598]) -
         proc_control_B.out1_tmp_tmp_n * ct[22] * ct[23] * ct[598]) -
        proc_control_B.out1_tmp_j3 * ct[21] * ct[23] * ct[598]) +
       proc_control_B.out1_tmp_g3 * ct[21] * ct[23] * ct[598]) -
      proc_control_B.out1_tmp_jz * ct[21] * ct[23] * ct[598]) -
     proc_control_B.out1_tmp_tmp_j * ct[22] * ct[23] * ct[598]) *
    proc_control_B.out1_tmp_a3;
  proc_control_B.out1_tmp_hz = proc_control_B.out1_tmp_hzv * ct[23];
  proc_control_B.out1_tmp_be = proc_control_B.out1_tmp_iq * ct[23];
  proc_control_B.out1_tmp_os = proc_control_B.out1_tmp_pn * ct[23];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_tmp_jk * ct[23];
  proc_control_B.out1_tmp_kg = proc_control_B.out1_tmp_tmp_e * ct[23];
  proc_control_B.out1_tmp_h5 = proc_control_B.out1_tmp_tmp * ct[21];
  proc_control_B.out1_tmp_mg = proc_control_B.out1_tmp_tmp_o * ct[21];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_tmp_f * ct[21];
  proc_control_B.out1_tmp_m4 = proc_control_B.out1_tmp_h5 * ct[23];
  proc_control_B.out1_tmp_nt = proc_control_B.out1_tmp_mg * ct[23];
  proc_control_B.out1_tmp_ib = ((((((((((((((ct[377] - ct[379]) - ct[394]) - ct
    [400]) + ct[409]) + ct[446]) - ct[447]) - ct[462]) - ct[467]) + ct[475]) -
    ct[510]) + ct[519]) - ct[593]) + ct[594]) - ct[606]) + ct[608];
  proc_control_B.out1_tmp_mi = -ct[6] * ct[16];
  proc_control_B.out1_tmp_ftf = proc_control_B.t1463 * proc_control_B.t1546;
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_p * ct[24];
  proc_control_B.out1_tmp_iz = proc_control_B.out1_tmp_f * ct[24];
  proc_control_B.out1_tmp_e0 = proc_control_B.out1_tmp_oc * ct[24];
  proc_control_B.out1_tmp_j0 = -proc_control_B.t1542 * proc_control_B.t1546;
  proc_control_B.out1_tmp_j3 = ct[6] * ct[24];
  proc_control_B.out1_tmp_g3 = proc_control_B.out1_tmp_bj * ct[24];
  proc_control_B.out1_tmp_jz = proc_control_B.out1_tmp_jza * ct[23];
  proc_control_B.out1_tmp_a3 = proc_control_B.out1_tmp_dn * ct[23];
  proc_control_B.t1463 = proc_control_B.out1_tmp_bf * ct[23];
  proc_control_B.t1542 = proc_control_B.out1_tmp_hj * ct[23];
  proc_control_B.out1_tmp_fj = proc_control_B.out1_tmp_hp * ct[23];
  proc_control_B.out1_tmp_ay = proc_control_B.out1_tmp_fn * ct[23];
  proc_control_B.out1_tmp_mu = proc_control_B.out1_tmp_ic * ct[23];
  proc_control_B.out1_tmp_cl = ct[8] * ct[23];
  proc_control_B.out1_tmp_jd = -ct[8] * ct[16];
  proc_control_B.out1_tmp_eb = proc_control_B.out1_tmp_mq * ct[24];
  proc_control_B.out1_tmp_b4 = (((((((((((((((ct[369] - ct[370]) - ct[388]) -
    ct[396]) + ct[404]) + ct[444]) - ct[445]) - ct[459]) - ct[466]) + ct[473]) -
    ct[507]) + ct[517]) - ct[591]) + ct[592]) - ct[601]) + ct[602]) + ct[625];
  proc_control_B.out1_tmp_ld = proc_control_B.out1_tmp_hn * ct[23];
  proc_control_B.out1_tmp_ai = proc_control_B.out1_tmp_k * ct[23];
  proc_control_B.out1_tmp_iy = proc_control_B.out1_tmp_hn * ct[24];
  proc_control_B.out1_tmp_ok = proc_control_B.out1_tmp_k * ct[24];
  proc_control_B.out1_tmp_b4z = proc_control_B.out1_tmp_c * ct[23];
  proc_control_B.out1_tmp_an = proc_control_B.out1_tmp_gb * ct[21];
  proc_control_B.out1_tmp_aq = proc_control_B.out1_tmp_lf * ct[21];
  proc_control_B.out1_tmp_i0 = proc_control_B.out1_tmp_c * ct[24];
  proc_control_B.out1_tmp_izy = proc_control_B.out1_tmp_hw * ct[23];
  proc_control_B.out1_tmp_lgo = proc_control_B.out1_tmp_hw * ct[24];
  proc_control_B.out1_tmp_o5 = proc_control_B.out1_tmp_i * ct[23];
  proc_control_B.out1_tmp_py = proc_control_B.out1_tmp_i * ct[24];
  out1[9] = (((((((((((((((((((((((((((((((((((((((((((ct[363] + ct[366]) + ct
    [392]) + ct[589]) + ct[600]) + ct[623]) + ct[628]) + ct[667]) + ct[710]) +
    ct[711]) + ct[714]) + ct[807]) + ct[810]) + ct[915]) + ct[928]) + ct[998]) +
    ct[1003]) + ct[1009]) + ct[36]) + ct[39]) + ct[195]) + ct[196]) + ct[237]) +
    ct[241]) - proc_control_B.out1_tmp_hz * ct[598]) +
    proc_control_B.out1_tmp_be * ct[598]) - proc_control_B.out1_tmp_dn * ct[24] *
    ct[598]) + proc_control_B.out1_tmp_bf * ct[24] * ct[598]) +
    proc_control_B.out1_tmp_hj * ct[24] * ct[598]) - proc_control_B.out1_tmp_os *
    ct[598]) + proc_control_B.out1_tmp_nk * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_jz * ct[549] * ct[607]) - proc_control_B.out1_tmp_ot
                        * ct[24] * ct[531] * ct[607]) -
                       proc_control_B.out1_tmp_g3 * ct[549] * ct[607]) +
                      proc_control_B.out1_tmp_a3 * ct[24] * ct[31]) -
                     proc_control_B.t1463 * ct[24] * ct[31]) +
                    proc_control_B.out1_tmp_hz * ct[24] * ct[31]) -
                   proc_control_B.out1_tmp_be * ct[24] * ct[31]) -
                  proc_control_B.t1542 * ct[24] * ct[31]) +
                 proc_control_B.out1_tmp_os * ct[24] * ct[31]) *
                proc_control_B.out1_tmp_j0 -
                ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ib
    - ct[633]) + ct[642]) + ct[651]) + ct[653]) + ct[659]) - ct[678]) - ct[683])
    - ct[813]) - ct[817]) - ct[828]) - ct[839]) - ct[843]) + ct[857]) + ct[866])
    + ct[872]) - ct[882]) + ct[923]) + ct[98]) + ct[112]) + ct[114]) + ct[116])
    + ct[117]) - ct[137]) - ct[144]) - ct[8] * ct[523] * ct[616]) +
    proc_control_B.out1_tmp_tmp_jk * ct[607]) - proc_control_B.out1_tmp_tmp_e *
    ct[607]) - proc_control_B.out1_tmp_tmp_i * ct[607]) -
    proc_control_B.out1_tmp_ng * ct[515] * ct[616]) + proc_control_B.out1_tmp_cl
    * ct[523] * ct[607]) - proc_control_B.out1_tmp_l * ct[598]) +
    proc_control_B.out1_tmp_kg * ct[598]) - proc_control_B.out1_tmp_tmp_jk * ct
                        [24] * ct[598]) + proc_control_B.out1_tmp_tmp_e * ct[24]
                       * ct[598]) + proc_control_B.out1_tmp_tmp_i * ct[23] * ct
                      [598]) + proc_control_B.out1_tmp_tmp_i * ct[24] * ct[598])
                    + proc_control_B.out1_tmp_ng * ct[23] * ct[515] * ct[607]) +
                   proc_control_B.out1_tmp_l * ct[24] * ct[31]) -
                  proc_control_B.out1_tmp_kg * ct[24] * ct[31]) +
                 proc_control_B.out1_tmp_jd * ct[20] * ct[23] * ct[24] * ct[31])
                * proc_control_B.t1465) +
               (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b4
    - ct[634]) + ct[638]) + ct[649]) + ct[656]) - ct[668]) - ct[672]) - ct[795])
    - ct[801]) - ct[809]) - ct[833]) - ct[840]) + ct[850]) + ct[862]) + ct[870])
    - ct[876]) + ct[917]) + ct[92]) + ct[94]) + ct[100]) + ct[103]) + ct[108]) -
    ct[134]) - ct[140]) - ct[6] * ct[544] * ct[616]) +
    proc_control_B.out1_tmp_h5 * ct[607]) - proc_control_B.out1_tmp_mg * ct[607])
    - proc_control_B.out1_tmp_g * ct[607]) - proc_control_B.out1_tmp_ie * ct[531]
    * ct[616]) + proc_control_B.out1_tmp_j3 * ct[544] * ct[607]) -
    proc_control_B.out1_tmp_m4 * ct[598]) + proc_control_B.out1_tmp_nt * ct[598])
                       - proc_control_B.out1_tmp_h5 * ct[24] * ct[598]) +
                      proc_control_B.out1_tmp_mg * ct[24] * ct[598]) +
                     proc_control_B.out1_tmp_g * ct[23] * ct[598]) +
                    proc_control_B.out1_tmp_g * ct[24] * ct[598]) +
                   proc_control_B.out1_tmp_ie * ct[24] * ct[531] * ct[607]) +
                  proc_control_B.out1_tmp_m4 * ct[24] * ct[31]) -
                 proc_control_B.out1_tmp_nt * ct[24] * ct[31]) +
                proc_control_B.out1_tmp_mi * ct[21] * ct[23] * ct[24] * ct[31]) *
               proc_control_B.t1524_g) -
              (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_p3 + ct[977]) + ct
    [997]) + ct[1007]) + ct[43]) + ct[55]) + ct[71]) + ct[185]) + ct[191]) + ct
    [240]) + ct[247]) + ct[266]) + ct[277]) + ct[307]) + ct[308]) + ct[337]) +
    ct[352]) + ct[354]) + ct[356]) + ct[358]) + ct[382]) + ct[479]) + ct[480]) +
    ct[481]) + ct[486]) + ct[487]) + ct[488]) + ct[490]) + ct[491]) + ct[492]) +
    ct[495]) + ct[497]) + ct[498]) + ct[499]) + ct[501]) + ct[503]) + ct[542]) +
    ct[543]) + ct[547]) + ct[553]) + ct[566]) + ct[568]) + ct[576]) + ct[578]) +
    ct[695]) + ct[696]) + ct[697]) + ct[698]) + ct[699]) + ct[700]) + ct[704]) +
    ct[706]) + ct[708]) + ct[716]) + ct[749]) + ct[752]) + ct[758]) + ct[764]) +
    ct[767]) + ct[769]) + ct[773]) + ct[775]) + ct[777]) + ct[781]) + ct[785]) +
    ct[789]) + ct[969]) + ct[970]) + ct[973]) + ct[980]) + ct[182]) + ct[183]) +
    ct[186]) + ct[188]) + ct[189]) + ct[190]) + ct[193]) + ct[200]) + ct[506] *
    ct[549]) + ct[509] * ct[549]) - ct[516] * ct[549]) - ct[518] * ct[549]) +
    ct[13] * ct[570] * ct[616]) - ct[16] * ct[570] * ct[616]) +
    proc_control_B.out1_tmp_og * ct[562] * ct[616]) + proc_control_B.out1_tmp_mz
    * ct[562] * ct[616]) + proc_control_B.out1_tmp_d * ct[562] * ct[616]) +
    proc_control_B.out1_tmp_lg * ct[562] * ct[616]) + proc_control_B.out1_tmp_ld
    * ct[515] * ct[598]) - proc_control_B.out1_tmp_ai * ct[515] * ct[598]) +
                        proc_control_B.out1_tmp_otc * ct[549] * ct[598]) -
                       proc_control_B.out1_tmp_gz * ct[549] * ct[598]) +
                      proc_control_B.out1_tmp_iy * ct[531] * ct[598]) -
                     proc_control_B.out1_tmp_ok * ct[531] * ct[598]) +
                    proc_control_B.out1_tmp_ez * ct[549] * ct[598]) -
                   proc_control_B.out1_tmp_izd * ct[549] * ct[598]) -
                  proc_control_B.out1_tmp_b4z * ct[515] * ct[598]) +
                 proc_control_B.out1_tmp_an * ct[549] * ct[616]) +
                (((((((((((((((((((((((((((proc_control_B.out1_tmp_aq * ct[549] *
    ct[616] - proc_control_B.out1_tmp_i0 * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_eb * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_izy * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_ge * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_lgo * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_gbr * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_gr * ct[549] * ct[598]) + proc_control_B.out1_tmp_o5
    * ct[515] * ct[598]) + proc_control_B.out1_tmp_py * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_ca * ct[549] * ct[598]) + proc_control_B.out1_tmp_kt
    * ct[549] * ct[598]) + proc_control_B.out1_tmp_mx * ct[24]) -
    proc_control_B.out1_tmp_of * ct[24]) - proc_control_B.out1_tmp_a * ct[24]) +
    proc_control_B.out1_tmp_ji * ct[24]) + proc_control_B.out1_tmp_ga * ct[24])
    - proc_control_B.out1_tmp_jkm * ct[24]) - proc_control_B.out1_tmp_ee * ct[24])
    + proc_control_B.out1_tmp_jy * ct[24]) - proc_control_B.out1_tmp_jb * ct[24])
                       + proc_control_B.out1_tmp_gi * ct[24]) -
                      proc_control_B.out1_tmp_om * ct[24]) +
                     proc_control_B.out1_tmp_hm * ct[24]) +
                    proc_control_B.out1_tmp_c2 * ct[24]) +
                   proc_control_B.out1_tmp_a0 * ct[24]) +
                  proc_control_B.out1_tmp_lu * ct[24]) -
                 proc_control_B.out1_tmp_jcs * ct[24])) + (((((((((((-ct[6] *
    ct[10] * ct[20] * ct[22] * ct[23] * ct[598] + proc_control_B.out1_tmp_ds *
    ct[23] * ct[598]) - proc_control_B.out1_tmp_kx * ct[23] * ct[598]) +
    proc_control_B.out1_tmp_pd * ct[23] * ct[598]) + proc_control_B.out1_tmp_p5 *
    ct[24] * ct[598]) - proc_control_B.out1_tmp_m4e * ct[24] * ct[598]) +
    proc_control_B.out1_tmp_jk * ct[24] * ct[598]) - proc_control_B.out1_tmp_hc *
    ct[24] * ct[598]) - proc_control_B.out1_tmp_ktf * ct[24] * ct[598]) -
    proc_control_B.out1_tmp_f2 * ct[24] * ct[598]) - proc_control_B.out1_tmp_a0x
    * ct[23] * ct[598]) - proc_control_B.out1_tmp_fto * ct[23] * ct[598])) *
              proc_control_B.out1_tmp_ftf) +
             ((((((((((((((((((proc_control_B.out1_tmp_ci - ct[21] * ct[363]) +
    ct[21] * ct[365]) - ct[21] * ct[373]) + ct[21] * ct[374]) + ct[21] * ct[386])
    + ct[21] * ct[398]) - proc_control_B.out1_tmp_p * ct[531] * ct[607]) +
                        proc_control_B.out1_tmp_f * ct[531] * ct[607]) -
                       proc_control_B.out1_tmp_oc * ct[531] * ct[607]) +
                      proc_control_B.out1_tmp_on * ct[531] * ct[598]) -
                     proc_control_B.out1_tmp_iz * ct[531] * ct[598]) +
                    proc_control_B.out1_tmp_e0 * ct[531] * ct[598]) +
                   proc_control_B.out1_tmp_dn * ct[21] * ct[24] * ct[598]) -
                  proc_control_B.out1_tmp_bf * ct[21] * ct[24] * ct[598]) +
                 proc_control_B.out1_tmp_h5 * ct[22] * ct[24] * ct[598]) -
                proc_control_B.out1_tmp_mg * ct[22] * ct[24] * ct[598]) -
               proc_control_B.out1_tmp_hj * ct[21] * ct[24] * ct[598]) -
              proc_control_B.out1_tmp_g * ct[22] * ct[24] * ct[598]) *
             proc_control_B.out1_tmp_hnt) + ((((((((((((((((((ct[20] * ct[366] +
    proc_control_B.out1_tmp_jkx) - ct[20] * ct[376]) + ct[20] * ct[378]) + ct[20]
    * ct[392]) + ct[20] * ct[399]) + ct[20] * ct[711]) +
    proc_control_B.out1_tmp_hp * ct[515] * ct[607]) - proc_control_B.out1_tmp_fn
    * ct[515] * ct[607]) - proc_control_B.out1_tmp_ic * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_fj * ct[515] * ct[598]) + proc_control_B.out1_tmp_ay
    * ct[515] * ct[598]) + proc_control_B.out1_tmp_mu * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_kbp * ct[21] * ct[23] * ct[598]) +
    proc_control_B.out1_tmp_tmp_h * ct[21] * ct[23] * ct[598]) +
    proc_control_B.out1_tmp_tmp_jk * ct[22] * ct[23] * ct[598]) -
    proc_control_B.out1_tmp_tmp_e * ct[22] * ct[23] * ct[598]) -
    proc_control_B.out1_tmp_tmp_d1 * ct[21] * ct[23] * ct[598]) -
    proc_control_B.out1_tmp_tmp_i * ct[22] * ct[23] * ct[598]) *
    proc_control_B.t1526;
  proc_control_B.out1_tmp_hz = proc_control_B.out1_tmp_tmp_d * ct[23];
  proc_control_B.out1_tmp_be = proc_control_B.out1_tmp_tmp_n * ct[23];
  proc_control_B.out1_tmp_os = ct[7] * ct[24];
  proc_control_B.out1_tmp_jk = proc_control_B.out1_tmp_oc * ct[23];
  proc_control_B.out1_tmp_hc = proc_control_B.out1_tmp_p * ct[23];
  proc_control_B.out1_tmp_f2 = proc_control_B.out1_tmp_f * ct[23];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_jza * ct[21];
  proc_control_B.out1_tmp_kg = proc_control_B.t1543_tmp_k * ct[22];
  proc_control_B.out1_tmp_h5 = ct[7] * ct[23];
  proc_control_B.out1_tmp_mg = proc_control_B.out1_tmp_hc * ct[24];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_f2 * ct[24];
  proc_control_B.out1_tmp_m4 = proc_control_B.out1_tmp_l * ct[23];
  proc_control_B.out1_tmp_nt = proc_control_B.out1_tmp_kg * ct[24];
  proc_control_B.out1_tmp_mx = ct[6] * ct[23];
  proc_control_B.out1_tmp_of = ct[6] * ct[25];
  proc_control_B.out1_tmp_a = proc_control_B.out1_tmp_tmp_f * ct[23];
  proc_control_B.out1_tmp_ji = proc_control_B.out1_tmp_tmp * ct[23];
  proc_control_B.out1_tmp_ga = proc_control_B.out1_tmp_tmp_o * ct[23];
  proc_control_B.out1_tmp_jkm = proc_control_B.out1_tmp_tmp * ct[24];
  proc_control_B.out1_tmp_ee = proc_control_B.out1_tmp_tmp_o * ct[24];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_tmp_f * ct[24];
  proc_control_B.out1_tmp_jb = proc_control_B.t1543_tmp * ct[22];
  proc_control_B.out1_tmp_gi = proc_control_B.out1_tmp_bj * ct[22];
  proc_control_B.out1_tmp_om = proc_control_B.out1_tmp_ji * ct[24];
  proc_control_B.out1_tmp_hm = proc_control_B.out1_tmp_ga * ct[24];
  proc_control_B.out1_tmp_c2 = proc_control_B.out1_tmp_jb * ct[23];
  proc_control_B.out1_tmp_a0 = proc_control_B.out1_tmp_gi * ct[24];
  proc_control_B.out1_tmp_lu = proc_control_B.out1_tmp_tmp_l * ct[24];
  proc_control_B.out1_tmp_jcs = proc_control_B.out1_tmp_tmp_ld * ct[24];
  proc_control_B.out1_tmp_lg = proc_control_B.out1_tmp_tmp_hb * ct[24];
  proc_control_B.t1543_tmp_k = ct[13] * ct[24];
  proc_control_B.out1_tmp_ie = ct[9] * ct[25];
  proc_control_B.out1_tmp_p3 = ct[15] * ct[25];
  proc_control_B.out1_tmp_ds = ct[16] * ct[24];
  proc_control_B.out1_tmp_kx = proc_control_B.out1_tmp_ge * ct[24];
  proc_control_B.out1_tmp_pd = proc_control_B.out1_tmp_gbr * ct[24];
  proc_control_B.out1_tmp_a0x = proc_control_B.out1_tmp_kt * ct[24];
  proc_control_B.out1_tmp_fto = ct[13] * ct[23];
  proc_control_B.out1_tmp_ci = ct[15] * ct[23];
  proc_control_B.out1_tmp_ng = ct[16] * ct[23];
  proc_control_B.out1_tmp_p5 = proc_control_B.out1_tmp_otc * ct[24];
  proc_control_B.out1_tmp_m4e = proc_control_B.out1_tmp_gz * ct[24];
  proc_control_B.out1_tmp_ktf = proc_control_B.out1_tmp_nl * ct[24];
  proc_control_B.out1_tmp_jkx = proc_control_B.out1_tmp_e2 * ct[24];
  proc_control_B.out1_tmp_tmp_jk = proc_control_B.out1_tmp_kbp * ct[23];
  proc_control_B.out1_tmp_tmp_e = proc_control_B.out1_tmp_tmp_h * ct[23];
  proc_control_B.out1_tmp_tmp_i = ((((((((((((ct[408] - ct[413]) - ct[522]) -
    ct[524]) - ct[677]) - ct[682]) + ct[691]) + ct[692]) - ct[878]) + ct[887]) +
    ct[889]) + ct[931]) - ct[936]) + ct[148];
  proc_control_B.out1_tmp_tmp_l = proc_control_B.out1_tmp_fto * ct[24];
  proc_control_B.out1_tmp_tmp_ld = proc_control_B.out1_tmp_ng * ct[24];
  proc_control_B.out1_tmp_tmp_hb = -ct[9] * ct[23];
  proc_control_B.out1_tmp_omd = ct[9] * ct[23];
  proc_control_B.out1_tmp_cm = proc_control_B.out1_tmp_omd * ct[25];
  proc_control_B.out1_tmp_oct = proc_control_B.out1_tmp_ci * ct[25];
  proc_control_B.out1_tmp_ol = ((((((((((((ct[407] - ct[412]) - ct[525]) - ct
    [526]) - ct[675]) - ct[685]) + ct[689]) + ct[693]) - ct[879]) + ct[888]) +
    ct[891]) + ct[932]) - ct[937]) + ct[147];
  out1[10] =
    ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ib - ct
    [630]) + ct[642]) + ct[651]) + ct[653]) + ct[659]) - ct[678]) - ct[683]) -
    ct[800]) - ct[817]) - ct[828]) - ct[839]) - ct[843]) + ct[857]) + ct[866]) +
    ct[872]) - ct[882]) + ct[922]) + ct[98]) + ct[110]) + ct[114]) + ct[116]) +
    ct[117]) - ct[137]) - ct[144]) - ct[6] * ct[523] * ct[616]) +
                     proc_control_B.out1_tmp_tmp_d * ct[607]) -
                    proc_control_B.out1_tmp_tmp_n * ct[607]) -
                   proc_control_B.out1_tmp_tmp_j * ct[607]) -
                  proc_control_B.out1_tmp_j1 * ct[515] * ct[616]) +
                 proc_control_B.out1_tmp_mx * ct[523] * ct[607]) -
                proc_control_B.out1_tmp_hz * ct[598]) +
               proc_control_B.out1_tmp_be * ct[598]) -
              proc_control_B.out1_tmp_tmp_d * ct[24] * ct[598]) +
             proc_control_B.out1_tmp_tmp_n * ct[24] * ct[598]) +
            proc_control_B.out1_tmp_tmp_j * ct[23] * ct[598]) +
           proc_control_B.out1_tmp_tmp_j * ct[24] * ct[598]) +
          proc_control_B.out1_tmp_j1 * ct[23] * ct[515] * ct[607]) +
         proc_control_B.out1_tmp_hz * ct[24] * ct[31]) -
        proc_control_B.out1_tmp_be * ct[24] * ct[31]) +
       proc_control_B.out1_tmp_mi * ct[20] * ct[23] * ct[24] * ct[31]) *
      proc_control_B.out1_tmp_ftf + ((((((((((((((((((((((((((((((((((((((((ct
    [366] + ct[373]) - ct[374]) + ct[392]) - ct[398]) + ct[600]) - ct[615]) +
    ct[617]) + ct[635]) + ct[663]) + ct[667]) + ct[711]) + ct[803]) + ct[822]) +
    ct[927]) + ct[930]) + ct[1003]) + ct[1009]) + ct[36]) + ct[40]) + ct[194]) +
    ct[197]) + ct[238]) + ct[243]) - proc_control_B.out1_tmp_lu * ct[598]) +
    proc_control_B.out1_tmp_jcs * ct[598]) - proc_control_B.out1_tmp_hzv * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_iq * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_lg * ct[598]) - proc_control_B.out1_tmp_pn * ct[25] *
    ct[598]) - proc_control_B.out1_tmp_g3 * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_jza * ct[24] * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_cg * ct[515] * ct[607]) + proc_control_B.t1543_tmp *
              ct[25] * ct[549] * ct[607]) + proc_control_B.out1_tmp_hzv * ct[24]
             * ct[25] * ct[31]) - proc_control_B.out1_tmp_iq * ct[24] * ct[25] *
            ct[31]) + proc_control_B.out1_tmp_lu * ct[25] * ct[31]) -
          proc_control_B.out1_tmp_jcs * ct[25] * ct[31]) +
         proc_control_B.out1_tmp_pn * ct[24] * ct[25] * ct[31]) -
        proc_control_B.out1_tmp_lg * ct[25] * ct[31]) *
       proc_control_B.out1_tmp_hnt +
       (((((((((((((((((((((((((((((proc_control_B.out1_tmp_ol -
    proc_control_B.out1_tmp_p * ct[607]) + proc_control_B.out1_tmp_f * ct[607])
    - proc_control_B.out1_tmp_oc * ct[607]) - ct[7] * ct[515] * ct[616]) - ct[7]
    * ct[549] * ct[616]) + proc_control_B.out1_tmp_hc * ct[598]) -
    proc_control_B.out1_tmp_f2 * ct[598]) + proc_control_B.out1_tmp_on * ct[598])
    - proc_control_B.out1_tmp_iz * ct[598]) + proc_control_B.out1_tmp_p * ct[25]
    * ct[598]) - proc_control_B.out1_tmp_f * ct[25] * ct[598]) -
    proc_control_B.out1_tmp_kg * ct[616]) - proc_control_B.out1_tmp_l * ct[616])
                       + proc_control_B.out1_tmp_jk * ct[598]) +
                      proc_control_B.out1_tmp_e0 * ct[598]) +
                     proc_control_B.out1_tmp_oc * ct[25] * ct[598]) +
                    proc_control_B.out1_tmp_h5 * ct[515] * ct[607]) +
                   proc_control_B.out1_tmp_os * ct[515] * ct[607]) +
                  proc_control_B.out1_tmp_os * ct[549] * ct[607]) +
                 proc_control_B.out1_tmp_np * ct[549] * ct[607]) +
                proc_control_B.out1_tmp_jk * ct[24] * ct[25]) -
               proc_control_B.out1_tmp_mg * ct[31]) + proc_control_B.out1_tmp_g *
              ct[31]) - proc_control_B.out1_tmp_hc * ct[25] * ct[31]) +
            proc_control_B.out1_tmp_f2 * ct[25] * ct[31]) -
           proc_control_B.out1_tmp_on * ct[25] * ct[31]) +
          proc_control_B.out1_tmp_iz * ct[25] * ct[31]) +
         ((((((((((((proc_control_B.out1_tmp_j0o * ct[23] * ct[24] * ct[31] -
                     proc_control_B.out1_tmp_jk * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_e0 * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_m4 * ct[607]) +
                  proc_control_B.out1_tmp_nt * ct[607]) +
                 proc_control_B.out1_tmp_l * ct[24] * ct[607]) +
                proc_control_B.out1_tmp_kg * ct[25] * ct[607]) -
               proc_control_B.out1_tmp_h5 * ct[24] * ct[515] * ct[598]) -
              proc_control_B.out1_tmp_os * ct[25] * ct[549] * ct[598]) +
             proc_control_B.out1_tmp_mg * ct[25]) - proc_control_B.out1_tmp_g *
            ct[25]) - proc_control_B.out1_tmp_m4 * ct[24] * ct[598]) -
          proc_control_B.out1_tmp_nt * ct[25] * ct[598])) *
        proc_control_B.out1_tmp_j0 -
        ((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp * ct[607] +
    proc_control_B.out1_tmp_tmp_i) - proc_control_B.out1_tmp_tmp_o * ct[607]) -
    proc_control_B.out1_tmp_tmp_f * ct[607]) - ct[6] * ct[515] * ct[616]) - ct[6]
    * ct[531] * ct[616]) - proc_control_B.out1_tmp_ji * ct[598]) +
    proc_control_B.out1_tmp_ga * ct[598]) - proc_control_B.out1_tmp_jkm * ct[598])
    + proc_control_B.out1_tmp_ee * ct[598]) - proc_control_B.out1_tmp_lc * ct
    [598]) + proc_control_B.out1_tmp_ph * ct[598]) - proc_control_B.out1_tmp_gi *
    ct[616]) - proc_control_B.out1_tmp_jb * ct[616]) + proc_control_B.out1_tmp_a
                       * ct[598]) + proc_control_B.out1_tmp_jy * ct[598]) +
                     proc_control_B.out1_tmp_po * ct[598]) +
                    proc_control_B.out1_tmp_mx * ct[515] * ct[607]) +
                   proc_control_B.out1_tmp_j3 * ct[531] * ct[607]) +
                  proc_control_B.out1_tmp_of * ct[515] * ct[607]) +
                 proc_control_B.out1_tmp_of * ct[531] * ct[607]) +
                proc_control_B.out1_tmp_a * ct[24] * ct[25]) +
               proc_control_B.out1_tmp_om * ct[31]) - proc_control_B.out1_tmp_hm
              * ct[31]) + proc_control_B.out1_tmp_ji * ct[25] * ct[31]) -
            proc_control_B.out1_tmp_ga * ct[25] * ct[31]) +
           proc_control_B.out1_tmp_jkm * ct[25] * ct[31]) -
          proc_control_B.out1_tmp_ee * ct[25] * ct[31]) +
         ((((((((((((proc_control_B.out1_tmp_mi * ct[23] * ct[24] * ct[31] -
                     proc_control_B.out1_tmp_a * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_jy * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_c2 * ct[607]) +
                  proc_control_B.out1_tmp_a0 * ct[607]) +
                 proc_control_B.out1_tmp_gi * ct[25] * ct[607]) +
                proc_control_B.out1_tmp_jb * ct[25] * ct[607]) -
               proc_control_B.out1_tmp_mx * ct[25] * ct[515] * ct[598]) -
              proc_control_B.out1_tmp_j3 * ct[25] * ct[531] * ct[598]) -
             proc_control_B.out1_tmp_om * ct[25]) + proc_control_B.out1_tmp_hm *
            ct[25]) - proc_control_B.out1_tmp_c2 * ct[25] * ct[598]) -
          proc_control_B.out1_tmp_a0 * ct[25] * ct[598])) *
        proc_control_B.t1524_g))) - (((((((((((((((((((((((((((((((((((((((((ct
    [509] + ct[512]) - ct[518]) - ct[520]) - ct[871]) - ct[873]) + ct[881]) +
    ct[884]) - ct[41]) - ct[42]) - ct[538] * ct[626]) - proc_control_B.t1542_tmp
    * ct[607]) + proc_control_B.out1_tmp * ct[607]) + proc_control_B.out1_tmp_b *
    ct[607]) + proc_control_B.out1_tmp_h * ct[607]) - proc_control_B.out1_tmp_e *
    ct[607]) + ct[9] * ct[515] * ct[616]) + ct[13] * ct[515] * ct[616]) - ct[15]
    * ct[515] * ct[616]) - ct[16] * ct[515] * ct[616]) + ct[23] * ct[538] * ct
    [616]) + ct[24] * ct[515] * ct[531] * ct[616]) + ct[25] * ct[515] * ct[549] *
    ct[616]) + proc_control_B.out1_tmp_otc * ct[598]) -
    proc_control_B.out1_tmp_gz * ct[598]) + proc_control_B.out1_tmp_g0 * ct[598])
    - proc_control_B.out1_tmp_el * ct[598]) + proc_control_B.out1_tmp_n3 * ct
    [598]) - proc_control_B.out1_tmp_fni * ct[598]) + proc_control_B.out1_tmp_nl
    * ct[616]) + proc_control_B.out1_tmp_e2 * ct[616]) -
    proc_control_B.out1_tmp_ge * ct[598]) - proc_control_B.out1_tmp_gbr * ct[598])
              - proc_control_B.out1_tmp_by * ct[598]) -
             proc_control_B.out1_tmp_av * ct[598]) - proc_control_B.out1_tmp_i2 *
            ct[598]) - proc_control_B.out1_tmp_nqp * ct[598]) +
          proc_control_B.out1_tmp_kt * ct[598]) + proc_control_B.out1_tmp_fx *
         ct[598]) + proc_control_B.out1_tmp_i4 * ct[598]) +
       (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_hb * ct[515] *
    ct[607] - proc_control_B.out1_tmp_fto * ct[515] * ct[607]) -
    proc_control_B.t1543_tmp_k * ct[515] * ct[607]) - proc_control_B.t1543_tmp_k
    * ct[549] * ct[607]) - proc_control_B.out1_tmp_ie * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_ie * ct[531] * ct[607]) + proc_control_B.out1_tmp_ci
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_ng * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_p3 * ct[515] * ct[607]) + proc_control_B.out1_tmp_ds
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_p3 * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_ds * ct[549] * ct[607]) - proc_control_B.out1_tmp_kx
    * ct[25]) - proc_control_B.out1_tmp_pd * ct[25]) +
                       proc_control_B.out1_tmp_a0x * ct[25]) -
                      proc_control_B.out1_tmp_p5 * ct[31]) +
                     proc_control_B.out1_tmp_m4e * ct[31]) -
                    proc_control_B.out1_tmp_otc * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_gz * ct[25] * ct[31]) -
                  proc_control_B.out1_tmp_g0 * ct[25] * ct[31]) +
                 proc_control_B.out1_tmp_el * ct[25] * ct[31]) +
                proc_control_B.out1_tmp_kx * ct[31]) +
               proc_control_B.out1_tmp_pd * ct[31]) + proc_control_B.out1_tmp_ge
              * ct[25] * ct[31]) + proc_control_B.out1_tmp_gbr * ct[25] * ct[31])
            + proc_control_B.out1_tmp_by * ct[25] * ct[31]) +
           proc_control_B.out1_tmp_av * ct[25] * ct[31]) -
          proc_control_B.out1_tmp_a0x * ct[31]) - proc_control_B.out1_tmp_ktf *
         ct[607]) - proc_control_B.out1_tmp_jkx * ct[607])) +
      (((((((((((((((-ct[15] * ct[16] * ct[23] * ct[25] * ct[31] -
                     proc_control_B.out1_tmp_nl * ct[25] * ct[607]) -
                    proc_control_B.out1_tmp_e2 * ct[25] * ct[607]) -
                   proc_control_B.out1_tmp_fx * ct[25] * ct[31]) +
                  proc_control_B.out1_tmp_tmp_l * ct[515] * ct[598]) +
                 proc_control_B.out1_tmp_cm * ct[515] * ct[598]) + ct[9] * ct[24]
                * ct[25] * ct[531] * ct[598]) + proc_control_B.t1543_tmp_k * ct
               [25] * ct[549] * ct[598]) - proc_control_B.out1_tmp_oct * ct[515]
              * ct[598]) - proc_control_B.out1_tmp_tmp_ld * ct[515] * ct[598]) -
            ct[15] * ct[24] * ct[25] * ct[531] * ct[598]) -
           proc_control_B.out1_tmp_ds * ct[25] * ct[549] * ct[598]) +
          proc_control_B.out1_tmp_p5 * ct[25]) - proc_control_B.out1_tmp_m4e *
         ct[25]) + proc_control_B.out1_tmp_ktf * ct[25] * ct[598]) +
       proc_control_B.out1_tmp_jkx * ct[25] * ct[598])) * proc_control_B.t1465)
    + ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_k3 - ct
    [629]) + ct[643]) + ct[652]) + ct[660]) + ct[666]) - ct[679]) - ct[686]) -
    ct[808]) - ct[824]) - ct[827]) - ct[838]) - ct[841]) + ct[860]) + ct[863]) +
    ct[874]) - ct[885]) + ct[925]) + ct[104]) + ct[123]) + ct[126]) + ct[127]) +
    ct[131]) - ct[141]) - ct[143]) - ct[7] * ct[523] * ct[616]) -
                     proc_control_B.out1_tmp_kbp * ct[607]) +
                    proc_control_B.out1_tmp_tmp_h * ct[607]) -
                   proc_control_B.out1_tmp_tmp_d1 * ct[607]) -
                  proc_control_B.out1_tmp_mz * ct[515] * ct[616]) +
                 proc_control_B.out1_tmp_h5 * ct[523] * ct[607]) +
                proc_control_B.out1_tmp_tmp_jk * ct[598]) -
               proc_control_B.out1_tmp_tmp_e * ct[598]) +
              proc_control_B.out1_tmp_kbp * ct[25] * ct[598]) -
             proc_control_B.out1_tmp_tmp_h * ct[25] * ct[598]) +
            proc_control_B.out1_tmp_tmp_d1 * ct[23] * ct[598]) +
           proc_control_B.out1_tmp_tmp_d1 * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_mz * ct[23] * ct[515] * ct[607]) -
         proc_control_B.out1_tmp_tmp_jk * ct[25] * ct[31]) +
        proc_control_B.out1_tmp_tmp_e * ct[25] * ct[31]) +
       proc_control_B.out1_tmp_j0o * ct[20] * ct[23] * ct[25] * ct[31]) *
    proc_control_B.t1526;
  proc_control_B.t1542_tmp = proc_control_B.out1_tmp_tmp_b * ct[23];
  proc_control_B.out1_tmp = proc_control_B.out1_tmp_tmp_da * ct[23];
  proc_control_B.out1_tmp_b = proc_control_B.out1_tmp_tmp_hs * ct[23];
  proc_control_B.out1_tmp_h = ct[10] * ct[23];
  proc_control_B.out1_tmp_e = proc_control_B.out1_tmp_hp * ct[24];
  proc_control_B.out1_tmp_p = proc_control_B.out1_tmp_fn * ct[24];
  proc_control_B.out1_tmp_f = proc_control_B.out1_tmp_ic * ct[24];
  proc_control_B.out1_tmp_hz = proc_control_B.out1_tmp_og * ct[21];
  proc_control_B.out1_tmp_be = proc_control_B.out1_tmp_lf * ct[22];
  proc_control_B.out1_tmp_os = proc_control_B.out1_tmp_fj * ct[24];
  proc_control_B.out1_tmp_jk = proc_control_B.out1_tmp_ay * ct[24];
  proc_control_B.out1_tmp_hc = proc_control_B.out1_tmp_mu * ct[24];
  proc_control_B.out1_tmp_f2 = proc_control_B.out1_tmp_hz * ct[23];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_be * ct[23];
  proc_control_B.out1_tmp_kg = ct[8] * ct[25];
  proc_control_B.out1_tmp_h5 = proc_control_B.out1_tmp_ho * ct[23];
  proc_control_B.out1_tmp_mg = proc_control_B.out1_tmp_ew * ct[23];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_n * ct[23];
  proc_control_B.out1_tmp_lf = proc_control_B.out1_tmp_ew * ct[24];
  proc_control_B.out1_tmp_m4 = proc_control_B.out1_tmp_n * ct[24];
  proc_control_B.out1_tmp_nt = proc_control_B.out1_tmp_ho * ct[24];
  proc_control_B.out1_tmp_mx = proc_control_B.out1_tmp_jza * ct[22];
  proc_control_B.out1_tmp_of = proc_control_B.t1524 * ct[22];
  proc_control_B.out1_tmp_a = ct[8] * ct[24];
  proc_control_B.out1_tmp_ji = proc_control_B.out1_tmp_mg * ct[24];
  proc_control_B.out1_tmp_ga = proc_control_B.out1_tmp_g * ct[24];
  proc_control_B.out1_tmp_jkm = proc_control_B.out1_tmp_mx * ct[23];
  proc_control_B.out1_tmp_ee = proc_control_B.out1_tmp_of * ct[24];
  proc_control_B.out1_tmp_jy = ct[5] * ct[25];
  proc_control_B.out1_tmp_jb = ct[14] * ct[25];
  proc_control_B.out1_tmp_gi = proc_control_B.out1_tmp_m5 * ct[24];
  proc_control_B.out1_tmp_om = proc_control_B.out1_tmp_j4 * ct[24];
  proc_control_B.out1_tmp_hm = ct[5] * ct[24];
  proc_control_B.out1_tmp_c2 = ct[14] * ct[24];
  proc_control_B.out1_tmp_a0 = proc_control_B.out1_tmp_mt * ct[24];
  proc_control_B.out1_tmp_lu = proc_control_B.out1_tmp_iee * ct[24];
  proc_control_B.out1_tmp_jcs = proc_control_B.out1_tmp_gs * ct[24];
  proc_control_B.out1_tmp_ib = proc_control_B.out1_tmp_ed * ct[23];
  proc_control_B.out1_tmp_mi = proc_control_B.out1_tmp_in * ct[23];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_pn1 * ct[23];
  proc_control_B.out1_tmp_iz = proc_control_B.out1_tmp_nm * ct[23];
  proc_control_B.out1_tmp_e0 = ct[10] * ct[24];
  proc_control_B.out1_tmp_j0 = proc_control_B.out1_tmp_tmp_ih * ct[24];
  proc_control_B.out1_tmp_oc = proc_control_B.out1_tmp_tmp_no * ct[24];
  proc_control_B.out1_tmp_j3 = ((((((((((((ct[406] - ct[411]) - ct[527]) - ct
    [528]) - ct[681]) - ct[684]) + ct[688]) + ct[690]) - ct[880]) + ct[890]) +
    ct[892]) + ct[934]) - ct[935]) + ct[146];
  proc_control_B.out1_tmp_g3 = ct[5] * ct[23];
  proc_control_B.out1_tmp_lg = proc_control_B.out1_tmp_hm * ct[25];
  proc_control_B.out1_tmp_jza = ct[14] * ct[23];
  proc_control_B.out1_tmp_mz = proc_control_B.out1_tmp_c2 * ct[25];
  out1[11] = (((((((((((((((((((((((((((((((((((((((((((ct[363] - ct[376]) + ct
    [378]) + ct[399]) + ct[589]) + ct[618]) - ct[619]) + ct[623]) + ct[628]) -
    ct[664]) + ct[670]) + ct[710]) + ct[714]) - ct[803]) + ct[820]) - ct[822]) +
    ct[835]) + ct[918]) + ct[929]) + ct[998]) + ct[1010]) + ct[39]) + ct[239]) +
    ct[242]) + proc_control_B.t1542_tmp * ct[598]) - proc_control_B.out1_tmp *
    ct[598]) - proc_control_B.out1_tmp_dn * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_bf * ct[25] * ct[598]) + proc_control_B.out1_tmp_hj *
    ct[25] * ct[598]) - proc_control_B.out1_tmp_b * ct[598]) +
    proc_control_B.out1_tmp_bj * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_jz * ct[531] * ct[607]) -
    proc_control_B.out1_tmp_nlw * ct[531] * ct[607]) - proc_control_B.t1524 *
                        ct[25] * ct[549] * ct[607]) + proc_control_B.out1_tmp_a3
                       * ct[25] * ct[31]) - proc_control_B.t1463 * ct[25] * ct
                      [31]) - proc_control_B.t1542_tmp * ct[25] * ct[31]) +
                    proc_control_B.out1_tmp * ct[25] * ct[31]) -
                   proc_control_B.t1542 * ct[25] * ct[31]) +
                  proc_control_B.out1_tmp_b * ct[25] * ct[31]) *
                 proc_control_B.t1526 -
                 ((((((((((((((((((((((((((((proc_control_B.out1_tmp_hp * ct[607]
    + proc_control_B.out1_tmp_j3) - proc_control_B.out1_tmp_fn * ct[607]) -
    proc_control_B.out1_tmp_ic * ct[607]) - ct[10] * ct[531] * ct[616]) - ct[10]
    * ct[549] * ct[616]) - proc_control_B.out1_tmp_fj * ct[598]) +
    proc_control_B.out1_tmp_ay * ct[598]) - proc_control_B.out1_tmp_e * ct[598])
    + proc_control_B.out1_tmp_p * ct[598]) - proc_control_B.out1_tmp_hp * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_fn * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_mu * ct[598]) - proc_control_B.out1_tmp_hz * ct[616])
    - proc_control_B.out1_tmp_be * ct[616]) + proc_control_B.out1_tmp_f * ct[598])
    + proc_control_B.out1_tmp_ic * ct[25] * ct[598]) + proc_control_B.out1_tmp_h
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_h * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_e0 * ct[531] * ct[607]) + proc_control_B.out1_tmp_gu
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_os * ct[31]) -
                        proc_control_B.out1_tmp_jk * ct[31]) +
                       proc_control_B.out1_tmp_fj * ct[25] * ct[31]) -
                      proc_control_B.out1_tmp_ay * ct[25] * ct[31]) +
                     proc_control_B.out1_tmp_e * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_p * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_hc * ct[31]) +
                  ((((((((((((proc_control_B.out1_tmp_nh * ct[23] * ct[25] * ct
    [31] - proc_control_B.out1_tmp_f * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_f2 * ct[607]) + proc_control_B.out1_tmp_l * ct[607])
    + proc_control_B.out1_tmp_hz * ct[24] * ct[607]) +
    proc_control_B.out1_tmp_be * ct[25] * ct[607]) - proc_control_B.out1_tmp_h *
    ct[24] * ct[531] * ct[598]) - proc_control_B.out1_tmp_h * ct[25] * ct[549] *
                        ct[598]) - proc_control_B.out1_tmp_os * ct[25]) +
                      proc_control_B.out1_tmp_jk * ct[25]) +
                     proc_control_B.out1_tmp_hc * ct[25]) -
                    proc_control_B.out1_tmp_f2 * ct[24] * ct[598]) -
                   proc_control_B.out1_tmp_l * ct[25] * ct[598])) *
                 proc_control_B.out1_tmp_kb) -
                ((((((((((((((((((((((((((((proc_control_B.out1_tmp_ew * ct[607]
    + proc_control_B.out1_tmp_tmp_i) - proc_control_B.out1_tmp_n * ct[607]) -
    proc_control_B.out1_tmp_ho * ct[607]) - ct[8] * ct[515] * ct[616]) - ct[8] *
    ct[531] * ct[616]) - proc_control_B.out1_tmp_mg * ct[598]) +
    proc_control_B.out1_tmp_g * ct[598]) - proc_control_B.out1_tmp_lf * ct[598])
    + proc_control_B.out1_tmp_m4 * ct[598]) - proc_control_B.out1_tmp_ch * ct
    [598]) + proc_control_B.out1_tmp_d4 * ct[598]) - proc_control_B.out1_tmp_mx *
    ct[616]) - proc_control_B.out1_tmp_of * ct[616]) +
    proc_control_B.out1_tmp_h5 * ct[598]) + proc_control_B.out1_tmp_nt * ct[598])
    + proc_control_B.out1_tmp_ky * ct[598]) + proc_control_B.out1_tmp_cl * ct
    [515] * ct[607]) + proc_control_B.out1_tmp_a * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_kg * ct[515] * ct[607]) + proc_control_B.out1_tmp_kg
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_h5 * ct[24] * ct[25]) +
                       proc_control_B.out1_tmp_ji * ct[31]) -
                      proc_control_B.out1_tmp_ga * ct[31]) +
                     proc_control_B.out1_tmp_mg * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_g * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_lf * ct[25] * ct[31]) -
                  proc_control_B.out1_tmp_m4 * ct[25] * ct[31]) +
                 ((((((((((((proc_control_B.out1_tmp_jd * ct[23] * ct[24] * ct
    [31] - proc_control_B.out1_tmp_h5 * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_nt * ct[25] * ct[31]) + proc_control_B.out1_tmp_jkm *
    ct[607]) + proc_control_B.out1_tmp_ee * ct[607]) +
    proc_control_B.out1_tmp_mx * ct[25] * ct[607]) + proc_control_B.out1_tmp_of *
                        ct[25] * ct[607]) - proc_control_B.out1_tmp_cl * ct[25] *
                       ct[515] * ct[598]) - proc_control_B.out1_tmp_a * ct[25] *
                      ct[531] * ct[598]) - proc_control_B.out1_tmp_ji * ct[25])
                    + proc_control_B.out1_tmp_ga * ct[25]) -
                   proc_control_B.out1_tmp_jkm * ct[25] * ct[598]) -
                  proc_control_B.out1_tmp_ee * ct[25] * ct[598])) *
                proc_control_B.t1465) -
               (((((((((((((((((((((((((((((((((((((((((ct[506] + ct[512]) - ct
    [516]) - ct[520]) - ct[869]) - ct[873]) + ct[875]) + ct[884]) - ct[41]) -
    ct[44]) - ct[556] * ct[626]) - proc_control_B.out1_tmp_j * ct[607]) +
    proc_control_B.out1_tmp_o * ct[607]) + proc_control_B.out1_tmp_mq * ct[607])
    + proc_control_B.out1_tmp_gd * ct[607]) - proc_control_B.out1_tmp_cq * ct
    [607]) + ct[5] * ct[531] * ct[616]) + ct[13] * ct[531] * ct[616]) - ct[14] *
    ct[531] * ct[616]) - ct[16] * ct[531] * ct[616]) + ct[24] * ct[556] * ct[616])
    + proc_control_B.t1546_tmp * ct[531] * ct[616]) + ct[25] * ct[531] * ct[549]
    * ct[616]) + proc_control_B.out1_tmp_mt * ct[598]) -
    proc_control_B.out1_tmp_iee * ct[598]) + proc_control_B.out1_tmp_ez * ct[598])
    - proc_control_B.out1_tmp_izd * ct[598]) + proc_control_B.out1_tmp_bjy * ct
    [598]) - proc_control_B.out1_tmp_oq * ct[598]) - proc_control_B.out1_tmp_gs *
    ct[598]) + proc_control_B.out1_tmp_ed * ct[616]) +
    proc_control_B.out1_tmp_in * ct[616]) - proc_control_B.out1_tmp_eb * ct[598])
                        - proc_control_B.out1_tmp_is * ct[598]) -
                       proc_control_B.out1_tmp_m5 * ct[598]) -
                      proc_control_B.out1_tmp_gr * ct[598]) -
                     proc_control_B.out1_tmp_dl * ct[598]) +
                    proc_control_B.out1_tmp_j4 * ct[598]) +
                   proc_control_B.out1_tmp_ca * ct[598]) +
                  proc_control_B.out1_tmp_pe * ct[598]) +
                 (((((((((((((((((((((((((((((-ct[13] * ct[23] * ct[531] * ct
    [607] - proc_control_B.out1_tmp_fto * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_hm * ct[531] * ct[607]) - proc_control_B.t1543_tmp_k
    * ct[531] * ct[607]) - proc_control_B.out1_tmp_jy * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_jy * ct[531] * ct[607]) + proc_control_B.out1_tmp_c2
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_jb * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_jb * ct[531] * ct[607]) + proc_control_B.out1_tmp_ng
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_ng * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_ds * ct[531] * ct[607]) - proc_control_B.out1_tmp_gi
    * ct[25]) + proc_control_B.out1_tmp_om * ct[25]) -
    proc_control_B.out1_tmp_a0 * ct[31]) + proc_control_B.out1_tmp_lu * ct[31])
    - proc_control_B.out1_tmp_mt * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_iee * ct[25] * ct[31]) - proc_control_B.out1_tmp_ez *
    ct[25] * ct[31]) + proc_control_B.out1_tmp_izd * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_jcs * ct[31]) + proc_control_B.out1_tmp_gs * ct[25] *
    ct[31]) + proc_control_B.out1_tmp_eb * ct[25] * ct[31]) +
                        proc_control_B.out1_tmp_gi * ct[31]) +
                       proc_control_B.out1_tmp_m5 * ct[25] * ct[31]) +
                      proc_control_B.out1_tmp_gr * ct[25] * ct[31]) -
                     proc_control_B.out1_tmp_om * ct[31]) -
                    proc_control_B.out1_tmp_j4 * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_ib * ct[607]) -
                  proc_control_B.out1_tmp_mi * ct[607])) + (((((((((((((((-ct[14]
    * ct[16] * ct[24] * ct[25] * ct[31] - proc_control_B.out1_tmp_ed * ct[25] *
    ct[607]) - proc_control_B.out1_tmp_in * ct[25] * ct[607]) +
    proc_control_B.out1_tmp_tmp_l * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_g3 * ct[25] * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_fto * ct[25] * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_lg * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_jza * ct[25] * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_mz * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_tmp_ld * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_ng * ct[25] * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_a0 * ct[25]) - proc_control_B.out1_tmp_lu * ct[25])
    - proc_control_B.out1_tmp_jcs * ct[25]) + proc_control_B.out1_tmp_ib * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_mi * ct[25] * ct[598])) *
               proc_control_B.t1524_g) -
              (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b4
    - ct[632]) + ct[638]) + ct[649]) + ct[656]) - ct[668]) - ct[672]) - ct[795])
    - ct[809]) - ct[814]) - ct[833]) - ct[840]) + ct[850]) + ct[862]) + ct[870])
    - ct[876]) + ct[916]) + ct[94]) + ct[96]) + ct[100]) + ct[103]) + ct[108]) -
    ct[134]) - ct[140]) - ct[8] * ct[544] * ct[616]) +
    proc_control_B.out1_tmp_pn1 * ct[607]) - proc_control_B.out1_tmp_nm * ct[607])
    - proc_control_B.out1_tmp_ce * ct[607]) - proc_control_B.out1_tmp_nhy * ct
    [531] * ct[616]) + proc_control_B.out1_tmp_a * ct[544] * ct[607]) -
                        proc_control_B.out1_tmp_on * ct[598]) +
                       proc_control_B.out1_tmp_iz * ct[598]) -
                      proc_control_B.out1_tmp_pn1 * ct[24] * ct[598]) +
                     proc_control_B.out1_tmp_nm * ct[24] * ct[598]) +
                    proc_control_B.out1_tmp_ce * ct[23] * ct[598]) +
                   proc_control_B.out1_tmp_ce * ct[24] * ct[598]) +
                  proc_control_B.out1_tmp_nhy * ct[24] * ct[531] * ct[607]) +
                 proc_control_B.out1_tmp_on * ct[24] * ct[31]) -
                proc_control_B.out1_tmp_iz * ct[24] * ct[31]) +
               proc_control_B.out1_tmp_jd * ct[21] * ct[23] * ct[24] * ct[31]) *
              proc_control_B.out1_tmp_ftf) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_da - ct[631])
    + ct[639]) + ct[647]) + ct[658]) + ct[662]) - ct[674]) - ct[680]) - ct[798])
    - ct[808]) - ct[827]) - ct[832]) - ct[844]) + ct[853]) + ct[867]) + ct[874])
    - ct[885]) + ct[926]) + ct[118]) + ct[122]) + ct[123]) + ct[127]) + ct[129])
                      - ct[139]) - ct[145]) - ct[10] * ct[544] * ct[616]) +
                   proc_control_B.out1_tmp_tmp_ih * ct[607]) -
                  proc_control_B.out1_tmp_tmp_no * ct[607]) -
                 proc_control_B.out1_tmp_tmp_bi * ct[607]) -
                proc_control_B.out1_tmp_og * ct[531] * ct[616]) +
               proc_control_B.out1_tmp_e0 * ct[544] * ct[607]) -
              proc_control_B.out1_tmp_j0 * ct[598]) + proc_control_B.out1_tmp_oc
             * ct[598]) - proc_control_B.out1_tmp_tmp_ih * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_tmp_no * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_tmp_bi * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_tmp_bi * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_og * ct[24] * ct[531] * ct[607]) +
       proc_control_B.out1_tmp_j0 * ct[25] * ct[31]) -
      proc_control_B.out1_tmp_oc * ct[25] * ct[31]) + proc_control_B.out1_tmp_nh
     * ct[21] * ct[24] * ct[25] * ct[31]) * (-proc_control_B.t1464 *
    proc_control_B.t1546);
  proc_control_B.t1542_tmp = proc_control_B.out1_tmp_nq * ct[22];
  proc_control_B.out1_tmp = proc_control_B.out1_tmp_m * ct[22];
  proc_control_B.out1_tmp_b = proc_control_B.out1_tmp_ku * ct[22];
  proc_control_B.out1_tmp_h = proc_control_B.t1542_tmp * ct[24];
  proc_control_B.out1_tmp_e = proc_control_B.out1_tmp * ct[24];
  proc_control_B.out1_tmp_j = proc_control_B.out1_tmp_nn * ct[23];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_he * ct[23];
  proc_control_B.out1_tmp_p = proc_control_B.out1_tmp_kq * ct[23];
  proc_control_B.out1_tmp_f = ct[12] * ct[23];
  proc_control_B.out1_tmp_ew = ct[12] * ct[25];
  proc_control_B.out1_tmp_n = proc_control_B.out1_tmp_nq * ct[24];
  proc_control_B.out1_tmp_ho = proc_control_B.out1_tmp_m * ct[24];
  proc_control_B.out1_tmp_hp = proc_control_B.out1_tmp_ku * ct[24];
  proc_control_B.out1_tmp_fn = proc_control_B.out1_tmp_gb * ct[22];
  proc_control_B.out1_tmp_nn = proc_control_B.out1_tmp_d * ct[21];
  proc_control_B.out1_tmp_he = proc_control_B.out1_tmp_fd * ct[24];
  proc_control_B.out1_tmp_kq = proc_control_B.out1_tmp_ko * ct[24];
  proc_control_B.out1_tmp_hz = proc_control_B.out1_tmp_cg1 * ct[24];
  proc_control_B.out1_tmp_be = proc_control_B.out1_tmp_nn * ct[23];
  proc_control_B.out1_tmp_os = proc_control_B.out1_tmp_fn * ct[23];
  proc_control_B.out1_tmp_jk = proc_control_B.out1_tmp_izy * ct[24];
  proc_control_B.out1_tmp_hc = proc_control_B.out1_tmp_o5 * ct[24];
  proc_control_B.out1_tmp_f2 = proc_control_B.out1_tmp_ld * ct[24];
  proc_control_B.out1_tmp_d = proc_control_B.out1_tmp_ai * ct[24];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_b4z * ct[24];
  proc_control_B.out1_tmp_kg = proc_control_B.out1_tmp_an * ct[23];
  proc_control_B.out1_tmp_ic = ct[11] * ct[24];
  proc_control_B.out1_tmp_h5 = proc_control_B.out1_tmp_cy * ct[23];
  proc_control_B.out1_tmp_mg = proc_control_B.out1_tmp_iv * ct[23];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_f4 * ct[23];
  proc_control_B.out1_tmp_lf = proc_control_B.t1543_tmp * ct[21];
  proc_control_B.out1_tmp_m4 = proc_control_B.out1_tmp_gn * ct[22];
  proc_control_B.out1_tmp_nt = proc_control_B.out1_tmp_mg * ct[24];
  proc_control_B.out1_tmp_mq = proc_control_B.out1_tmp_g * ct[24];
  proc_control_B.out1_tmp_gd = proc_control_B.out1_tmp_lf * ct[23];
  proc_control_B.out1_tmp_cq = proc_control_B.out1_tmp_m4 * ct[24];
  proc_control_B.out1_tmp_mx = ct[11] * ct[25];
  proc_control_B.out1_tmp_of = proc_control_B.out1_tmp_iv * ct[22];
  proc_control_B.out1_tmp_a = proc_control_B.out1_tmp_f4 * ct[22];
  proc_control_B.out1_tmp_ji = proc_control_B.out1_tmp_cy * ct[22];
  proc_control_B.out1_tmp_ga = proc_control_B.out1_tmp_of * ct[23];
  proc_control_B.out1_tmp_jkm = proc_control_B.out1_tmp_a * ct[23];
  out1[12] = (((((((((((((((((((((((((((((((((((((((((((ct[367] + ct[375]) + ct
    [393]) + ct[590]) + ct[605]) + ct[624]) + ct[628]) + ct[667]) + ct[712]) +
    ct[713]) + ct[715]) + ct[820]) + ct[835]) + ct[915]) + ct[928]) + ct[999]) +
    ct[1004]) + ct[1009]) + ct[38]) + ct[39]) + ct[194]) + ct[197]) + ct[237]) +
    ct[241]) - proc_control_B.out1_tmp_j * ct[598]) + proc_control_B.out1_tmp_o *
    ct[598]) - proc_control_B.out1_tmp_m3 * ct[24] * ct[598]) +
    proc_control_B.out1_tmp_ax * ct[24] * ct[598]) + proc_control_B.out1_tmp_hi *
    ct[24] * ct[598]) - proc_control_B.out1_tmp_p * ct[598]) +
    proc_control_B.out1_tmp_ot * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_n0 * ct[549] * ct[607]) - proc_control_B.out1_tmp_nk
    * ct[24] * ct[531] * ct[607]) - proc_control_B.out1_tmp_fa * ct[549] * ct
                        [607]) + proc_control_B.out1_tmp_eu * ct[24] * ct[31]) -
                      proc_control_B.out1_tmp_inq * ct[24] * ct[31]) +
                     proc_control_B.out1_tmp_j * ct[24] * ct[31]) -
                    proc_control_B.out1_tmp_o * ct[24] * ct[31]) -
                   proc_control_B.out1_tmp_a0m * ct[24] * ct[31]) +
                  proc_control_B.out1_tmp_p * ct[24] * ct[31]) *
                 proc_control_B.out1_tmp_ftf -
                 ((((((((((((((((((((((((((((proc_control_B.out1_tmp_nq * ct[607]
    + proc_control_B.out1_tmp_j3) - proc_control_B.out1_tmp_m * ct[607]) -
    proc_control_B.out1_tmp_ku * ct[607]) - ct[12] * ct[531] * ct[616]) - ct[12]
    * ct[549] * ct[616]) - proc_control_B.out1_tmp_fd * ct[598]) +
    proc_control_B.out1_tmp_ko * ct[598]) - proc_control_B.out1_tmp_n * ct[598])
    + proc_control_B.out1_tmp_ho * ct[598]) - proc_control_B.out1_tmp_nq * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_m * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_cg1 * ct[598]) - proc_control_B.out1_tmp_fn * ct[616])
    - proc_control_B.out1_tmp_nn * ct[616]) + proc_control_B.out1_tmp_hp * ct
    [598]) + proc_control_B.out1_tmp_ku * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_f * ct[531] * ct[607]) + proc_control_B.out1_tmp_f *
    ct[549] * ct[607]) + proc_control_B.out1_tmp_j11 * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_ew * ct[549] * ct[607]) + proc_control_B.out1_tmp_he
    * ct[31]) - proc_control_B.out1_tmp_kq * ct[31]) +
                       proc_control_B.out1_tmp_fd * ct[25] * ct[31]) -
                      proc_control_B.out1_tmp_ko * ct[25] * ct[31]) +
                     proc_control_B.out1_tmp_n * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_ho * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_hz * ct[31]) +
                  ((((((((((((proc_control_B.out1_tmp_jkh * ct[23] * ct[25] *
    ct[31] - proc_control_B.out1_tmp_hp * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_os * ct[607]) + proc_control_B.out1_tmp_be * ct[607])
    + proc_control_B.out1_tmp_nn * ct[24] * ct[607]) +
    proc_control_B.out1_tmp_fn * ct[25] * ct[607]) - proc_control_B.out1_tmp_f *
    ct[24] * ct[531] * ct[598]) - proc_control_B.out1_tmp_f * ct[25] * ct[549] *
                        ct[598]) - proc_control_B.out1_tmp_he * ct[25]) +
                      proc_control_B.out1_tmp_kq * ct[25]) +
                     proc_control_B.out1_tmp_hz * ct[25]) -
                    proc_control_B.out1_tmp_be * ct[24] * ct[598]) -
                   proc_control_B.out1_tmp_os * ct[25] * ct[598])) *
                 proc_control_B.t1524_g) -
                (((((((((((((((((((((((((((((((((((((((((ct[506] + ct[509]) -
    ct[516]) - ct[518]) - ct[869]) - ct[871]) + ct[875]) + ct[881]) - ct[42]) -
    ct[44]) - ct[570] * ct[626]) - proc_control_B.out1_tmp_hn * ct[607]) +
    proc_control_B.out1_tmp_k * ct[607]) + proc_control_B.out1_tmp_c * ct[607])
    + proc_control_B.out1_tmp_hw * ct[607]) - proc_control_B.out1_tmp_i * ct[607])
    + ct[5] * ct[549] * ct[616]) + ct[9] * ct[549] * ct[616]) - ct[14] * ct[549]
    * ct[616]) - ct[15] * ct[549] * ct[616]) + ct[25] * ct[570] * ct[616]) +
    proc_control_B.t1546_tmp * ct[549] * ct[616]) + proc_control_B.t1546_tmp_j *
    ct[549] * ct[616]) + proc_control_B.out1_tmp_ld * ct[598]) -
    proc_control_B.out1_tmp_ai * ct[598]) + proc_control_B.out1_tmp_iy * ct[598])
    - proc_control_B.out1_tmp_ok * ct[598]) + proc_control_B.out1_tmp_gv * ct
    [598]) - proc_control_B.out1_tmp_dj * ct[598]) - proc_control_B.out1_tmp_b4z
    * ct[598]) + proc_control_B.out1_tmp_an * ct[616]) +
    proc_control_B.out1_tmp_aq * ct[616]) - proc_control_B.out1_tmp_i0 * ct[598])
    - proc_control_B.out1_tmp_izy * ct[598]) - proc_control_B.out1_tmp_ft * ct
                        [598]) - proc_control_B.out1_tmp_lgo * ct[598]) -
                      proc_control_B.out1_tmp_jc * ct[598]) +
                     proc_control_B.out1_tmp_o5 * ct[598]) +
                    proc_control_B.out1_tmp_py * ct[598]) +
                   proc_control_B.out1_tmp_eg * ct[598]) +
                  (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_hb *
    ct[531] * ct[607] - proc_control_B.out1_tmp_omd * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_hm * ct[515] * ct[607]) - proc_control_B.out1_tmp_hm
    * ct[549] * ct[607]) - proc_control_B.out1_tmp_jy * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_ie * ct[549] * ct[607]) + proc_control_B.out1_tmp_c2
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_c2 * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_ci * ct[531] * ct[607]) + proc_control_B.out1_tmp_ci
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_jb * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_p3 * ct[549] * ct[607]) - proc_control_B.out1_tmp_jk
    * ct[25]) + proc_control_B.out1_tmp_hc * ct[25]) -
    proc_control_B.out1_tmp_f2 * ct[31]) + proc_control_B.out1_tmp_d * ct[31]) -
    proc_control_B.out1_tmp_ld * ct[25] * ct[31]) + proc_control_B.out1_tmp_ai *
    ct[25] * ct[31]) - proc_control_B.out1_tmp_iy * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_ok * ct[25] * ct[31]) + proc_control_B.out1_tmp_l *
    ct[31]) + proc_control_B.out1_tmp_b4z * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_jk * ct[31]) + proc_control_B.out1_tmp_i0 * ct[25] *
    ct[31]) + proc_control_B.out1_tmp_izy * ct[25] * ct[31]) +
                       proc_control_B.out1_tmp_lgo * ct[25] * ct[31]) -
                      proc_control_B.out1_tmp_hc * ct[31]) -
                     proc_control_B.out1_tmp_o5 * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_py * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_kg * ct[607])) + (((((((((((((((-ct[8]
    * ct[20] * ct[21] * ct[23] * ct[607] - proc_control_B.out1_tmp_an * ct[24] *
    ct[607]) - proc_control_B.out1_tmp_aq * ct[24] * ct[607]) +
    proc_control_B.out1_tmp_g3 * ct[24] * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_omd * ct[24] * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_cm * ct[549] * ct[598]) + proc_control_B.out1_tmp_lg
    * ct[549] * ct[598]) - proc_control_B.out1_tmp_jza * ct[24] * ct[515] * ct
    [598]) - proc_control_B.out1_tmp_ci * ct[24] * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_mz * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_oct * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_f2 * ct[25]) - proc_control_B.out1_tmp_d * ct[25]) -
    proc_control_B.out1_tmp_l * ct[25]) + proc_control_B.out1_tmp_kg * ct[24] *
    ct[598]) + proc_control_B.out1_tmp_aq * ct[23] * ct[24] * ct[598])) *
                proc_control_B.out1_tmp_kb) -
               ((((((((((((((((((((((((((((proc_control_B.out1_tmp_ol -
    proc_control_B.out1_tmp_iv * ct[607]) + proc_control_B.out1_tmp_f4 * ct[607])
    - proc_control_B.out1_tmp_cy * ct[607]) - ct[11] * ct[515] * ct[616]) - ct
    [11] * ct[549] * ct[616]) + proc_control_B.out1_tmp_mg * ct[598]) -
    proc_control_B.out1_tmp_g * ct[598]) + proc_control_B.out1_tmp_heb * ct[598])
    - proc_control_B.out1_tmp_ih * ct[598]) + proc_control_B.out1_tmp_iv * ct[25]
    * ct[598]) - proc_control_B.out1_tmp_f4 * ct[25] * ct[598]) -
    proc_control_B.out1_tmp_m4 * ct[616]) - proc_control_B.out1_tmp_lf * ct[616])
    + proc_control_B.out1_tmp_h5 * ct[598]) + proc_control_B.out1_tmp_c1 * ct
    [598]) + proc_control_B.out1_tmp_cy * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_ok1 * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_ic * ct[515] * ct[607]) + proc_control_B.out1_tmp_ic
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_mx * ct[549] * ct[607]) +
                       proc_control_B.out1_tmp_h5 * ct[24] * ct[25]) -
                      proc_control_B.out1_tmp_nt * ct[31]) +
                     proc_control_B.out1_tmp_mq * ct[31]) -
                    proc_control_B.out1_tmp_mg * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_g * ct[25] * ct[31]) -
                  proc_control_B.out1_tmp_heb * ct[25] * ct[31]) +
                 proc_control_B.out1_tmp_ih * ct[25] * ct[31]) +
                ((((((((((((proc_control_B.out1_tmp_g5 * ct[23] * ct[24] * ct[31]
    - proc_control_B.out1_tmp_h5 * ct[25] * ct[31]) - proc_control_B.out1_tmp_c1
    * ct[25] * ct[31]) + proc_control_B.out1_tmp_gd * ct[607]) +
    proc_control_B.out1_tmp_cq * ct[607]) + proc_control_B.out1_tmp_lf * ct[24] *
                        ct[607]) + proc_control_B.out1_tmp_m4 * ct[25] * ct[607])
                      - proc_control_B.out1_tmp_ok1 * ct[24] * ct[515] * ct[598])
                     - proc_control_B.out1_tmp_ic * ct[25] * ct[549] * ct[598])
                    + proc_control_B.out1_tmp_nt * ct[25]) -
                   proc_control_B.out1_tmp_mq * ct[25]) -
                  proc_control_B.out1_tmp_gd * ct[24] * ct[598]) -
                 proc_control_B.out1_tmp_cq * ct[25] * ct[598])) *
               proc_control_B.t1465) +
              ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_bt
    - ct[633]) + ct[637]) + ct[645]) + ct[650]) + ct[657]) - ct[669]) - ct[673])
    - ct[796]) - ct[800]) - ct[813]) - ct[823]) - ct[839]) + ct[851]) + ct[859])
    + ct[872]) - ct[882]) + ct[923]) + ct[109]) + ct[110]) + ct[112]) + ct[116])
    + ct[125]) - ct[135]) - ct[142]) - ct[12] * ct[562] * ct[616]) +
    proc_control_B.t1542_tmp * ct[607]) - proc_control_B.out1_tmp * ct[607]) -
    proc_control_B.out1_tmp_b * ct[607]) - proc_control_B.out1_tmp_gb * ct[549] *
    ct[616]) + proc_control_B.out1_tmp_ew * ct[562] * ct[607]) -
                        proc_control_B.out1_tmp_h * ct[598]) +
                       proc_control_B.out1_tmp_e * ct[598]) -
                      proc_control_B.t1542_tmp * ct[25] * ct[598]) +
                     proc_control_B.out1_tmp * ct[25] * ct[598]) +
                    proc_control_B.out1_tmp_b * ct[24] * ct[598]) +
                   proc_control_B.out1_tmp_b * ct[25] * ct[598]) +
                  proc_control_B.out1_tmp_gb * ct[25] * ct[549] * ct[607]) +
                 proc_control_B.out1_tmp_h * ct[25] * ct[31]) -
                proc_control_B.out1_tmp_e * ct[25] * ct[31]) +
               proc_control_B.out1_tmp_jkh * ct[22] * ct[24] * ct[25] * ct[31]) *
              proc_control_B.out1_tmp_hnt) -
    (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_o2 - ct[634])
    + ct[641]) + ct[644]) + ct[655]) - ct[661]) - ct[671]) - ct[797]) - ct[801])
    - ct[814]) - ct[815]) - ct[833]) + ct[852]) + ct[856]) + ct[870]) - ct[876])
    + ct[917]) + ct[92]) + ct[96]) + ct[97]) + ct[100]) + ct[121]) - ct[136]) -
                     ct[138]) - ct[11] * ct[562] * ct[616]) -
                   proc_control_B.out1_tmp_of * ct[607]) +
                  proc_control_B.out1_tmp_a * ct[607]) -
                 proc_control_B.out1_tmp_ji * ct[607]) -
                proc_control_B.out1_tmp_gn * ct[549] * ct[616]) +
               proc_control_B.out1_tmp_mx * ct[562] * ct[607]) +
              proc_control_B.out1_tmp_ga * ct[598]) -
             proc_control_B.out1_tmp_jkm * ct[598]) + proc_control_B.out1_tmp_of
            * ct[25] * ct[598]) - proc_control_B.out1_tmp_a * ct[25] * ct[598])
          + proc_control_B.out1_tmp_ji * ct[23] * ct[598]) +
         proc_control_B.out1_tmp_ji * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_gn * ct[25] * ct[549] * ct[607]) -
       proc_control_B.out1_tmp_ga * ct[25] * ct[31]) +
      proc_control_B.out1_tmp_jkm * ct[25] * ct[31]) +
     proc_control_B.out1_tmp_g5 * ct[22] * ct[23] * ct[25] * ct[31]) *
    proc_control_B.t1526;
}

void proc_control::proc_control_ft_2_pr(const real_T ct[812], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp = _mm_set1_pd(ct[22]);
  tmp_2 = _mm_set1_pd(ct[440]);
  _mm_storeu_pd(&proc_control_B.dv45[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[20], ct[21]), tmp), _mm_loadu_pd(&ct[23])),
    _mm_set_pd(ct[333], ct[311])), tmp_2));
  proc_control_B.t1164 = proc_control_B.dv45[0];
  proc_control_B.t1165 = proc_control_B.dv45[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  proc_control_B.t1166 = ct[20] * ct[21] * ct[25] * ct[360] * ct[440];
  proc_control_B.t1466 = (ct[618] + ct[628]) - 1.0;
  _mm_storeu_pd(&proc_control_B.dv45[0], _mm_add_pd(_mm_set_pd(ct[125], ct[126]),
    _mm_set_pd(ct[289], ct[278])));
  proc_control_B.t1488 = proc_control_B.dv45[0];
  proc_control_B.t1489 = proc_control_B.dv45[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  proc_control_B.t1490 = ct[127] + ct[300];
  _mm_storeu_pd(&proc_control_B.dv45[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[99], ct[45]), _mm_set_pd(ct[769], ct[671])), _mm_set_pd(ct
    [138], ct[132])), _mm_set_pd(ct[588], ct[579])));
  proc_control_B.t1491 = proc_control_B.dv45[0];
  proc_control_B.t1492 = proc_control_B.dv45[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv45[0], _mm_mul_pd(tmp, _mm_set_pd(ct[203], ct
    [198])));
  memcpy(&proc_control_B.ct_o[0], &ct[0], 36U * sizeof(real_T));
  proc_control_B.ct_o[36] = -ct[475];
  proc_control_B.ct_o[37] = ct[37];
  proc_control_B.ct_o[38] = -ct[478];
  proc_control_B.ct_o[39] = -(ct[20] * ct[201]);
  proc_control_B.ct_o[40] = -proc_control_B.dv45[1];
  proc_control_B.ct_o[41] = ct[38];
  proc_control_B.ct_o[42] = ct[39];
  proc_control_B.ct_o[43] = ct[40];
  proc_control_B.ct_o[44] = ct[41];
  proc_control_B.ct_o[45] = ct[470] + ct[654];
  tmp_0 = _mm_set1_pd(ct[23]);
  _mm_storeu_pd(&proc_control_B.ct_o[46], _mm_mul_pd(tmp_0, _mm_set_pd(ct[580],
    ct[573])));
  _mm_storeu_pd(&proc_control_B.ct_o[48], _mm_mul_pd(tmp_0, _mm_set_pd(ct[589],
    ct[586])));
  tmp_1 = _mm_set1_pd(ct[24]);
  _mm_storeu_pd(&proc_control_B.ct_o[50], _mm_mul_pd(tmp_1, _mm_set_pd(ct[580],
    ct[575])));
  _mm_storeu_pd(&proc_control_B.ct_o[52], _mm_mul_pd(tmp_1, _mm_set_pd(ct[586],
    ct[583])));
  proc_control_B.ct_o[54] = ct[25] * ct[573];
  proc_control_B.ct_o[55] = ct[42];
  _mm_storeu_pd(&proc_control_B.ct_o[56], _mm_mul_pd(_mm_set1_pd(ct[25]),
    _mm_set_pd(ct[583], ct[575])));
  _mm_storeu_pd(&proc_control_B.ct_o[58], _mm_mul_pd(_mm_set_pd(ct[196], ct[25]),
    _mm_set_pd(ct[311], ct[589])));
  _mm_storeu_pd(&proc_control_B.ct_o[60], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[612])));
  _mm_storeu_pd(&proc_control_B.ct_o[62], _mm_mul_pd(_mm_set_pd(ct[21], ct[6]),
    _mm_set_pd(ct[620], ct[678])));
  _mm_storeu_pd(&proc_control_B.ct_o[64], _mm_mul_pd(_mm_set_pd(ct[7], ct[22]),
    _mm_set_pd(ct[679], ct[615])));
  _mm_storeu_pd(&proc_control_B.ct_o[66], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[625])));
  _mm_storeu_pd(&proc_control_B.ct_o[68], _mm_mul_pd(_mm_set_pd(ct[197], ct[8]),
    _mm_set_pd(ct[333], ct[678])));
  proc_control_B.ct_o[70] = ct[21] * ct[635];
  proc_control_B.ct_o[71] = ct[43];
  _mm_storeu_pd(&proc_control_B.ct_o[72], _mm_mul_pd(_mm_set_pd(ct[10], ct[22]),
    _mm_set_pd(ct[680], ct[633])));
  _mm_storeu_pd(&proc_control_B.ct_o[74], _mm_mul_pd(_mm_loadu_pd(&ct[21]),
    _mm_set_pd(ct[641], ct[642])));
  _mm_storeu_pd(&proc_control_B.ct_o[76], _mm_mul_pd(_mm_set_pd(ct[21], ct[11]),
    _mm_set_pd(ct[646], ct[679])));
  _mm_storeu_pd(&proc_control_B.ct_o[78], _mm_mul_pd(_mm_set_pd(ct[12], ct[22]),
    _mm_set_pd(ct[680], ct[644])));
  proc_control_B.ct_o[80] = ct[198] * ct[360];
  proc_control_B.ct_o[81] = ct[44];
  _mm_storeu_pd(&proc_control_B.ct_o[82], _mm_mul_pd(_mm_set_pd(ct[23], ct[201]),
    _mm_set_pd(ct[606], ct[311])));
  _mm_storeu_pd(&proc_control_B.ct_o[84], _mm_mul_pd(_mm_set_pd(ct[23], ct[202]),
    _mm_set_pd(ct[608], ct[333])));
  _mm_storeu_pd(&proc_control_B.ct_o[86], _mm_mul_pd(_mm_set_pd(ct[203], ct[24]),
    _mm_set_pd(ct[360], ct[607])));
  tmp_1 = _mm_set_pd(ct[24], ct[25]);
  _mm_storeu_pd(&proc_control_B.ct_o[88], _mm_mul_pd(tmp_1, _mm_set_pd(ct[608],
    ct[606])));
  _mm_storeu_pd(&proc_control_B.ct_o[90], _mm_mul_pd(tmp_1, _mm_set_pd(ct[609],
    ct[607])));
  proc_control_B.ct_o[92] = ct[46];
  proc_control_B.ct_o[93] = ct[6] * ct[687];
  proc_control_B.ct_o[94] = ct[47];
  proc_control_B.ct_o[95] = ct[7] * ct[688];
  proc_control_B.ct_o[96] = ct[48];
  proc_control_B.ct_o[97] = ct[49];
  proc_control_B.ct_o[98] = ct[50];
  proc_control_B.ct_o[99] = ct[8] * ct[687];
  proc_control_B.ct_o[100] = ct[51];
  proc_control_B.ct_o[101] = ct[52];
  proc_control_B.ct_o[102] = ct[11] * ct[688];
  proc_control_B.ct_o[103] = ct[53];
  proc_control_B.ct_o[104] = ct[54];
  _mm_storeu_pd(&proc_control_B.ct_o[105], _mm_mul_pd(tmp_0, _mm_loadu_pd(&ct
    [656])));
  proc_control_B.ct_o[107] = ct[25] * ct[609];
  proc_control_B.ct_o[108] = ct[55];
  proc_control_B.ct_o[109] = ct[56];
  proc_control_B.ct_o[110] = ct[57];
  proc_control_B.ct_o[111] = ct[6] * ct[689];
  proc_control_B.ct_o[112] = ct[58];
  proc_control_B.ct_o[113] = ct[8] * ct[689];
  proc_control_B.ct_o[114] = ct[59];
  proc_control_B.ct_o[115] = ct[10] * ct[690];
  proc_control_B.ct_o[116] = ct[60];
  proc_control_B.ct_o[117] = ct[61];
  proc_control_B.ct_o[118] = ct[62];
  _mm_storeu_pd(&proc_control_B.ct_o[119], _mm_mul_pd(_mm_set_pd(ct[24], ct[12]),
    _mm_set_pd(ct[656], ct[690])));
  proc_control_B.ct_o[121] = ct[63];
  proc_control_B.ct_o[122] = ct[64];
  proc_control_B.ct_o[123] = ct[65];
  proc_control_B.ct_o[124] = ct[7] * ct[691];
  proc_control_B.ct_o[125] = ct[66];
  proc_control_B.ct_o[126] = ct[67];
  proc_control_B.ct_o[127] = ct[68];
  proc_control_B.ct_o[128] = ct[10] * ct[692];
  proc_control_B.ct_o[129] = ct[69];
  proc_control_B.ct_o[130] = ct[11] * ct[691];
  proc_control_B.ct_o[131] = ct[70];
  _mm_storeu_pd(&proc_control_B.ct_o[132], _mm_mul_pd(_mm_set_pd(ct[25], ct[12]),
    _mm_set_pd(ct[657], ct[692])));
  memcpy(&proc_control_B.ct_o[134], &ct[71], 12U * sizeof(real_T));
  proc_control_B.ct_o[146] = proc_control_B.t1164;
  proc_control_B.ct_o[147] = proc_control_B.t1165;
  proc_control_B.ct_o[148] = proc_control_B.t1166;
  proc_control_B.ct_o[149] = ct[31] * ct[34] * ct[268];
  proc_control_B.ct_o[150] = -(ct[32] * ct[118]);
  tmp_0 = _mm_set1_pd(ct[31]);
  _mm_storeu_pd(&proc_control_B.ct_o[151], _mm_mul_pd(_mm_mul_pd(tmp_0,
    _mm_loadu_pd(&ct[268])), _mm_set_pd(ct[809], ct[811])));
  proc_control_B.ct_o[153] = ct[31] * ct[270] * ct[808];
  proc_control_B.ct_o[154] = -(ct[33] * ct[119]);
  proc_control_B.ct_o[155] = -(ct[34] * ct[120]);
  proc_control_B.ct_o[156] = -(ct[121] * ct[808]);
  proc_control_B.ct_o[157] = -(ct[122] * ct[809]);
  proc_control_B.ct_o[158] = ct[85];
  proc_control_B.ct_o[159] = ct[87];
  proc_control_B.ct_o[160] = ct[89];
  proc_control_B.ct_o[161] = ct[91];
  proc_control_B.ct_o[162] = ct[93];
  proc_control_B.ct_o[163] = ct[95];
  _mm_storeu_pd(&proc_control_B.ct_o[164], _mm_mul_pd(_mm_set_pd(ct[12], ct[10]),
    _mm_set1_pd(proc_control_B.t1164)));
  proc_control_B.ct_o[166] = ct[96];
  _mm_storeu_pd(&proc_control_B.ct_o[167], _mm_mul_pd(_mm_set_pd(ct[11], ct[7]),
    _mm_set1_pd(proc_control_B.t1165)));
  proc_control_B.ct_o[169] = ct[97];
  _mm_storeu_pd(&proc_control_B.ct_o[170], _mm_mul_pd(_mm_set_pd(ct[8], ct[6]),
    _mm_set1_pd(proc_control_B.t1166)));
  proc_control_B.ct_o[172] = ct[98];
  memcpy(&proc_control_B.ct_o[173], &ct[100], 9U * sizeof(real_T));
  proc_control_B.ct_o[182] = -ct[573];
  proc_control_B.ct_o[183] = -ct[575];
  proc_control_B.ct_o[184] = -ct[580];
  proc_control_B.ct_o[185] = ct[115];
  proc_control_B.ct_o[186] = -ct[583];
  proc_control_B.ct_o[187] = -ct[586];
  proc_control_B.ct_o[188] = -ct[589];
  proc_control_B.ct_o[189] = -ct[606];
  proc_control_B.ct_o[190] = -ct[607];
  proc_control_B.ct_o[191] = ct[116];
  proc_control_B.ct_o[192] = -ct[608];
  proc_control_B.ct_o[193] = -ct[609];
  proc_control_B.ct_o[194] = -ct[614];
  proc_control_B.ct_o[195] = -ct[627];
  proc_control_B.ct_o[196] = -ct[635];
  proc_control_B.ct_o[197] = -ct[646];
  proc_control_B.ct_o[198] = -ct[656];
  proc_control_B.ct_o[199] = ct[117];
  proc_control_B.ct_o[200] = -ct[657];
  proc_control_B.ct_o[201] = -ct[667];
  proc_control_B.ct_o[202] = -ct[670];
  proc_control_B.ct_o[203] = -ct[674];
  proc_control_B.ct_o[204] = -ct[695];
  proc_control_B.ct_o[205] = -ct[698];
  proc_control_B.ct_o[206] = -ct[699];
  proc_control_B.ct_o[207] = -ct[702];
  proc_control_B.ct_o[208] = -ct[704];
  proc_control_B.ct_o[209] = -ct[706];
  proc_control_B.ct_o[210] = -ct[708];
  proc_control_B.ct_o[211] = -ct[710];
  proc_control_B.ct_o[212] = -ct[713];
  proc_control_B.ct_o[213] = -ct[715];
  proc_control_B.ct_o[214] = -ct[717];
  proc_control_B.ct_o[215] = -ct[719];
  proc_control_B.ct_o[216] = -ct[720];
  proc_control_B.ct_o[217] = -ct[724];
  proc_control_B.ct_o[218] = -ct[725];
  proc_control_B.ct_o[219] = -ct[727];
  proc_control_B.ct_o[220] = -ct[728];
  proc_control_B.ct_o[221] = -ct[729];
  proc_control_B.ct_o[222] = -ct[730];
  proc_control_B.ct_o[223] = -ct[731];
  proc_control_B.ct_o[224] = -ct[732];
  proc_control_B.ct_o[225] = -ct[733];
  proc_control_B.ct_o[226] = -ct[734];
  proc_control_B.ct_o[227] = -ct[735];
  proc_control_B.ct_o[228] = -ct[736];
  proc_control_B.ct_o[229] = -ct[737];
  proc_control_B.ct_o[230] = -ct[738];
  proc_control_B.ct_o[231] = -ct[739];
  proc_control_B.ct_o[232] = -ct[740];
  proc_control_B.ct_o[233] = -ct[741];
  proc_control_B.ct_o[234] = -ct[742];
  proc_control_B.ct_o[235] = -ct[743];
  proc_control_B.ct_o[236] = -ct[744];
  proc_control_B.ct_o[237] = -ct[753];
  proc_control_B.ct_o[238] = -ct[756];
  proc_control_B.ct_o[239] = -ct[757];
  proc_control_B.ct_o[240] = ct[128];
  proc_control_B.ct_o[241] = -ct[762];
  proc_control_B.ct_o[242] = -ct[764];
  proc_control_B.ct_o[243] = -ct[765];
  proc_control_B.ct_o[244] = ct[5] * ct[38];
  proc_control_B.ct_o[245] = ct[6] * ct[311] * ct[333] * ct[440];
  proc_control_B.ct_o[246] = ct[5] * ct[39];
  proc_control_B.ct_o[247] = ct[129];
  _mm_storeu_pd(&proc_control_B.ct_o[248], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[7]), _mm_set1_pd(ct[311])), _mm_set_pd(ct[333], ct[360])),
    tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_o[250], _mm_mul_pd(_mm_set1_pd(ct[9]),
    _mm_set_pd(ct[41], ct[38])));
  tmp_1 = _mm_set_pd(ct[311], ct[333]);
  _mm_storeu_pd(&proc_control_B.ct_o[252], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[10]), tmp_1), _mm_set1_pd(ct[360])), tmp_2));
  proc_control_B.ct_o[254] = ct[12] * ct[333] * ct[360] * ct[440];
  _mm_storeu_pd(&proc_control_B.ct_o[255], _mm_mul_pd(_mm_set1_pd(ct[13]),
    _mm_set_pd(ct[41], ct[39])));
  proc_control_B.ct_o[257] = -ct[775];
  proc_control_B.ct_o[258] = -ct[777];
  proc_control_B.ct_o[259] = -ct[780];
  proc_control_B.ct_o[260] = -ct[783];
  proc_control_B.ct_o[261] = -ct[784];
  proc_control_B.ct_o[262] = -ct[786];
  _mm_storeu_pd(&proc_control_B.ct_o[263], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [23], ct[24]), tmp_1), _mm_set_pd(ct[315], ct[312])));
  proc_control_B.ct_o[265] = ct[25] * ct[360] * ct[312];
  proc_control_B.ct_o[266] = ct[130];
  _mm_storeu_pd(&proc_control_B.ct_o[267], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [25], ct[23]), _mm_set_pd(ct[360], ct[311])), _mm_set_pd(ct[315], ct[318])));
  proc_control_B.ct_o[269] = ct[24] * ct[333] * ct[318];
  proc_control_B.ct_o[270] = -(ct[23] * ct[574]);
  proc_control_B.ct_o[271] = -(ct[23] * ct[581]);
  proc_control_B.ct_o[272] = -(ct[23] * ct[587]);
  proc_control_B.ct_o[273] = -(ct[23] * ct[591]);
  proc_control_B.ct_o[274] = -(ct[24] * ct[577]);
  proc_control_B.ct_o[275] = -(ct[24] * ct[581]);
  proc_control_B.ct_o[276] = -(ct[24] * ct[584]);
  proc_control_B.ct_o[277] = ct[131];
  proc_control_B.ct_o[278] = -(ct[24] * ct[587]);
  proc_control_B.ct_o[279] = -(ct[25] * ct[574]);
  proc_control_B.ct_o[280] = -(ct[25] * ct[577]);
  proc_control_B.ct_o[281] = -(ct[25] * ct[584]);
  proc_control_B.ct_o[282] = -(ct[25] * ct[591]);
  proc_control_B.ct_o[283] = -(ct[23] * ct[593]);
  proc_control_B.ct_o[284] = -(ct[23] * ct[596]);
  proc_control_B.ct_o[285] = -(ct[24] * ct[594]);
  proc_control_B.ct_o[286] = -(ct[24] * ct[596]);
  proc_control_B.ct_o[287] = -(ct[24] * ct[597]);
  proc_control_B.ct_o[288] = -(ct[23] * ct[598]);
  proc_control_B.ct_o[289] = -(ct[23] * ct[600]);
  proc_control_B.ct_o[290] = -(ct[23] * ct[601]);
  proc_control_B.ct_o[291] = -(ct[25] * ct[593]);
  proc_control_B.ct_o[292] = -(ct[25] * ct[594]);
  proc_control_B.ct_o[293] = -(ct[25] * ct[597]);
  proc_control_B.ct_o[294] = -(ct[23] * ct[602]);
  proc_control_B.ct_o[295] = -(ct[24] * ct[599]);
  proc_control_B.ct_o[296] = -(ct[23] * ct[604]);
  proc_control_B.ct_o[297] = -(ct[23] * ct[605]);
  proc_control_B.ct_o[298] = -(ct[24] * ct[600]);
  proc_control_B.ct_o[299] = -(ct[25] * ct[598]);
  proc_control_B.ct_o[300] = -(ct[24] * ct[602]);
  proc_control_B.ct_o[301] = -(ct[25] * ct[599]);
  proc_control_B.ct_o[302] = -(ct[24] * ct[603]);
  proc_control_B.ct_o[303] = -(ct[24] * ct[604]);
  proc_control_B.ct_o[304] = -(ct[25] * ct[601]);
  proc_control_B.ct_o[305] = -(ct[25] * ct[603]);
  proc_control_B.ct_o[306] = -(ct[25] * ct[605]);
  proc_control_B.ct_o[307] = ct[133];
  proc_control_B.ct_o[308] = ct[134];
  proc_control_B.ct_o[309] = ct[135];
  proc_control_B.ct_o[310] = -(ct[31] * ct[33] * ct[269]);
  proc_control_B.ct_o[311] = -(ct[31] * ct[32] * ct[270]);
  proc_control_B.ct_o[312] = -ct[84];
  proc_control_B.ct_o[313] = -ct[86];
  proc_control_B.ct_o[314] = -ct[88];
  proc_control_B.ct_o[315] = -ct[90];
  proc_control_B.ct_o[316] = -ct[92];
  proc_control_B.ct_o[317] = -ct[94];
  proc_control_B.ct_o[318] = -ct[109];
  proc_control_B.ct_o[319] = -ct[110];
  proc_control_B.ct_o[320] = -ct[111];
  proc_control_B.ct_o[321] = -ct[112];
  proc_control_B.ct_o[322] = -ct[113];
  proc_control_B.ct_o[323] = ct[136];
  proc_control_B.ct_o[324] = -ct[114];
  tmp_2 = _mm_set1_pd(ct[30]);
  _mm_storeu_pd(&proc_control_B.ct_o[325], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[22], ct[20]), tmp_2), tmp_0), _mm_set1_pd(ct[694])));
  proc_control_B.ct_o[327] = proc_control_B.t1466;
  proc_control_B.ct_o[328] = -(ct[14] * ct[38]);
  proc_control_B.ct_o[329] = -(ct[14] * ct[39]);
  proc_control_B.ct_o[330] = -(ct[15] * ct[38]);
  proc_control_B.ct_o[331] = ct[137];
  proc_control_B.ct_o[332] = -(ct[15] * ct[41]);
  proc_control_B.ct_o[333] = -(ct[16] * ct[39]);
  proc_control_B.ct_o[334] = -(ct[16] * ct[41]);
  tmp_1 = _mm_set_pd(ct[34], ct[32]);
  _mm_storeu_pd(&proc_control_B.ct_o[335], _mm_mul_pd(tmp_1, _mm_set_pd
    (proc_control_B.t1488, proc_control_B.t1489)));
  proc_control_B.ct_o[337] = ct[139];
  _mm_storeu_pd(&proc_control_B.ct_o[338], _mm_mul_pd(_mm_set_pd(ct[33],
    proc_control_B.t1488), _mm_set_pd(proc_control_B.t1490, ct[809])));
  _mm_storeu_pd(&proc_control_B.ct_o[340], _mm_mul_pd(_mm_set_pd
    (proc_control_B.t1490, proc_control_B.t1489), _mm_set_pd(ct[808], ct[811])));
  tmp_3 = _mm_loadu_pd(&ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_o[342], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_2), tmp_0), _mm_set1_pd(proc_control_B.t1466)));
  proc_control_B.ct_o[344] = proc_control_erf(ct[83] * ct[569] * 4.0);
  _mm_storeu_pd(&proc_control_B.ct_o[345], _mm_mul_pd(_mm_loadu_pd(&ct[33]),
    _mm_set1_pd(proc_control_B.t1491)));
  _mm_storeu_pd(&proc_control_B.ct_o[347], _mm_mul_pd(tmp_1, _mm_set1_pd
    (proc_control_B.t1492)));
  _mm_storeu_pd(&proc_control_B.ct_o[349], _mm_mul_pd(_mm_loadu_pd(&ct[32]),
    _mm_set1_pd(((ct[36] + ct[123]) + ct[144]) + ct[595])));
  proc_control_B.ct_o[351] = ct[140];
  proc_control_B.ct_o[352] = ct[141];
  proc_control_B.ct_o[353] = ct[142];
  proc_control_B.ct_o[354] = ct[143];
  memcpy(&proc_control_B.ct_o[355], &ct[145], 123U * sizeof(real_T));
  proc_control_B.ct_o[478] = ct[271];
  memcpy(&proc_control_B.ct_o[479], &ct[275], 38U * sizeof(real_T));
  proc_control_B.ct_o[517] = ct[313];
  proc_control_B.ct_o[518] = ct[315];
  proc_control_B.ct_o[519] = ct[316];
  proc_control_B.ct_o[520] = ct[318];
  proc_control_B.ct_o[521] = ct[319];
  proc_control_B.ct_o[522] = ct[321];
  proc_control_B.ct_o[523] = ct[322];
  proc_control_B.ct_o[524] = ct[323];
  proc_control_B.ct_o[525] = ct[324];
  proc_control_B.ct_o[526] = ct[325];
  proc_control_B.ct_o[527] = ct[326];
  proc_control_B.ct_o[528] = ct[327];
  proc_control_B.ct_o[529] = ct[329];
  proc_control_B.ct_o[530] = ct[330];
  proc_control_B.ct_o[531] = ct[333];
  proc_control_B.ct_o[532] = ct[334];
  proc_control_B.ct_o[533] = ct[336];
  proc_control_B.ct_o[534] = ct[337];
  proc_control_B.ct_o[535] = ct[340];
  proc_control_B.ct_o[536] = ct[342];
  proc_control_B.ct_o[537] = ct[343];
  proc_control_B.ct_o[538] = ct[344];
  proc_control_B.ct_o[539] = ct[347];
  proc_control_B.ct_o[540] = ct[348];
  proc_control_B.ct_o[541] = ct[351];
  proc_control_B.ct_o[542] = ct[352];
  proc_control_B.ct_o[543] = ct[353];
  proc_control_B.ct_o[544] = ct[354];
  proc_control_B.ct_o[545] = ct[355];
  proc_control_B.ct_o[546] = ct[356];
  memcpy(&proc_control_B.ct_o[547], &ct[358], 10U * sizeof(real_T));
  proc_control_B.ct_o[557] = ct[368];
  proc_control_B.ct_o[558] = ct[370];
  proc_control_B.ct_o[559] = ct[371];
  proc_control_B.ct_o[560] = ct[373];
  proc_control_B.ct_o[561] = ct[375];
  proc_control_B.ct_o[562] = ct[376];
  proc_control_B.ct_o[563] = ct[378];
  proc_control_B.ct_o[564] = ct[380];
  proc_control_B.ct_o[565] = ct[382];
  proc_control_B.ct_o[566] = ct[383];
  proc_control_B.ct_o[567] = ct[10] * ct[201];
  proc_control_B.ct_o[568] = ct[384];
  proc_control_B.ct_o[569] = ct[385];
  proc_control_B.ct_o[570] = ct[386];
  proc_control_B.ct_o[571] = ct[12] * ct[201];
  proc_control_B.ct_o[572] = ct[387];
  proc_control_B.ct_o[573] = ct[389];
  proc_control_B.ct_o[574] = ct[392];
  proc_control_B.ct_o[575] = ct[394];
  proc_control_B.ct_o[576] = ct[395];
  proc_control_B.ct_o[577] = ct[7] * ct[202];
  proc_control_B.ct_o[578] = ct[396];
  proc_control_B.ct_o[579] = ct[11] * ct[202];
  proc_control_B.ct_o[580] = ct[397];
  proc_control_B.ct_o[581] = ct[400];
  proc_control_B.ct_o[582] = ct[401];
  proc_control_B.ct_o[583] = ct[6] * ct[203];
  proc_control_B.ct_o[584] = ct[402];
  proc_control_B.ct_o[585] = ct[8] * ct[203];
  proc_control_B.ct_o[586] = ct[403];
  memcpy(&proc_control_B.ct_o[587], &ct[406], 9U * sizeof(real_T));
  proc_control_B.ct_o[596] = ct[415];
  memcpy(&proc_control_B.ct_o[597], &ct[419], 11U * sizeof(real_T));
  proc_control_B.ct_o[608] = ct[430];
  memcpy(&proc_control_B.ct_o[609], &ct[433], sizeof(real_T) << 4U);
  proc_control_B.ct_o[625] = ct[449];
  proc_control_B.ct_o[626] = ct[451];
  proc_control_B.ct_o[627] = ct[452];
  proc_control_B.ct_o[628] = ct[20] * ct[196];
  proc_control_B.ct_o[629] = ct[453];
  proc_control_B.ct_o[630] = ct[454];
  proc_control_B.ct_o[631] = ct[455];
  proc_control_B.ct_o[632] = ct[456];
  proc_control_B.ct_o[633] = ct[457];
  proc_control_B.ct_o[634] = ct[458];
  proc_control_B.ct_o[635] = proc_control_B.dv45[0];
  proc_control_B.ct_o[636] = ct[459];
  proc_control_B.ct_o[637] = ct[460];
  proc_control_B.ct_o[638] = ct[461];
  proc_control_B.ct_o[639] = ct[462];
  memcpy(&proc_control_B.ct_o[640], &ct[464], 10U * sizeof(real_T));
  proc_control_B.ct_o[650] = ct[474];
  proc_control_B.ct_o[651] = ct[476];
  proc_control_B.ct_o[652] = ct[477];
  memcpy(&proc_control_B.ct_o[653], &ct[479], 14U * sizeof(real_T));
  proc_control_B.ct_o[667] = ct[21] * ct[202];
  proc_control_B.ct_o[668] = ct[493];
  proc_control_B.ct_o[669] = ct[494];
  proc_control_B.ct_o[670] = proc_control_B.dv45[1];
  memcpy(&proc_control_B.ct_o[671], &ct[495], 23U * sizeof(real_T));
  proc_control_B.ct_o[694] = ct[124] * ct[811];
  memcpy(&proc_control_B.ct_o[695], &ct[518], 50U * sizeof(real_T));
  proc_control_B.ct_o[745] = ct[568];
  proc_control_B.ct_o[746] = ct[570];
  proc_control_B.ct_o[747] = ct[571];
  proc_control_B.ct_o[748] = ct[572];
  proc_control_B.ct_o[749] = ct[574];
  proc_control_B.ct_o[750] = ct[9] * ct[302];
  proc_control_B.ct_o[751] = ct[576];
  proc_control_B.ct_o[752] = ct[577];
  proc_control_B.ct_o[753] = ct[5] * ct[305];
  proc_control_B.ct_o[754] = ct[578];
  proc_control_B.ct_o[755] = ct[581];
  proc_control_B.ct_o[756] = ct[13] * ct[302];
  proc_control_B.ct_o[757] = ct[582];
  proc_control_B.ct_o[758] = ct[584];
  proc_control_B.ct_o[759] = ct[5] * ct[308];
  proc_control_B.ct_o[760] = ct[585];
  proc_control_B.ct_o[761] = ct[587];
  proc_control_B.ct_o[762] = ct[13] * ct[305];
  proc_control_B.ct_o[763] = ct[590];
  proc_control_B.ct_o[764] = ct[591];
  proc_control_B.ct_o[765] = ct[9] * ct[308];
  proc_control_B.ct_o[766] = ct[592];
  proc_control_B.ct_o[767] = ct[593];
  proc_control_B.ct_o[768] = ct[9] * ct[312];
  proc_control_B.ct_o[769] = ct[594];
  proc_control_B.ct_o[770] = ct[14] * ct[305];
  proc_control_B.ct_o[771] = ct[596];
  proc_control_B.ct_o[772] = ct[13] * ct[312];
  proc_control_B.ct_o[773] = ct[597];
  proc_control_B.ct_o[774] = ct[14] * ct[308];
  proc_control_B.ct_o[775] = ct[598];
  proc_control_B.ct_o[776] = ct[15] * ct[302];
  proc_control_B.ct_o[777] = ct[599];
  proc_control_B.ct_o[778] = ct[5] * ct[315];
  proc_control_B.ct_o[779] = ct[600];
  proc_control_B.ct_o[780] = ct[13] * ct[315];
  proc_control_B.ct_o[781] = ct[601];
  proc_control_B.ct_o[782] = ct[15] * ct[308];
  proc_control_B.ct_o[783] = ct[602];
  proc_control_B.ct_o[784] = ct[16] * ct[302];
  proc_control_B.ct_o[785] = ct[603];
  proc_control_B.ct_o[786] = ct[5] * ct[318];
  proc_control_B.ct_o[787] = ct[604];
  proc_control_B.ct_o[788] = ct[16] * ct[305];
  proc_control_B.ct_o[789] = ct[605];
  _mm_storeu_pd(&proc_control_B.ct_o[790], _mm_mul_pd(_mm_set_pd(ct[15], ct[9]),
    _mm_set_pd(ct[312], ct[318])));
  _mm_storeu_pd(&proc_control_B.ct_o[792], _mm_mul_pd(_mm_set_pd(ct[16], ct[14]),
    _mm_set_pd(ct[312], ct[315])));
  proc_control_B.ct_o[794] = ct[14] * ct[318];
  proc_control_B.ct_o[795] = ct[610];
  proc_control_B.ct_o[796] = ct[21] * ct[302];
  proc_control_B.ct_o[797] = ct[611];
  tmp_2 = _mm_set_pd(ct[21], ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_o[798], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [302])));
  proc_control_B.ct_o[800] = ct[612];
  proc_control_B.ct_o[801] = ct[613];
  proc_control_B.ct_o[802] = ct[22] * ct[303];
  memcpy(&proc_control_B.ct_o[803], &ct[615], 12U * sizeof(real_T));
  proc_control_B.ct_o[815] = ct[20] * ct[305];
  proc_control_B.ct_o[816] = ct[628];
  proc_control_B.ct_o[817] = ct[629];
  proc_control_B.ct_o[818] = ct[630];
  proc_control_B.ct_o[819] = ct[631];
  proc_control_B.ct_o[820] = ct[632];
  proc_control_B.ct_o[821] = ct[20] * ct[306];
  proc_control_B.ct_o[822] = ct[633];
  proc_control_B.ct_o[823] = ct[634];
  _mm_storeu_pd(&proc_control_B.ct_o[824], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[305])));
  memcpy(&proc_control_B.ct_o[826], &ct[636], 9U * sizeof(real_T));
  proc_control_B.ct_o[835] = ct[645];
  proc_control_B.ct_o[836] = ct[647];
  proc_control_B.ct_o[837] = ct[648];
  proc_control_B.ct_o[838] = ct[649];
  proc_control_B.ct_o[839] = ct[650];
  proc_control_B.ct_o[840] = ct[20] * ct[308];
  proc_control_B.ct_o[841] = ct[651];
  _mm_storeu_pd(&proc_control_B.ct_o[842], _mm_mul_pd(tmp_3, _mm_set_pd(ct[308],
    ct[309])));
  proc_control_B.ct_o[844] = ct[652];
  proc_control_B.ct_o[845] = ct[653];
  proc_control_B.ct_o[846] = ct[655];
  _mm_storeu_pd(&proc_control_B.ct_o[847], _mm_mul_pd(_mm_set_pd(ct[16], ct[21]),
    _mm_set_pd(ct[315], ct[309])));
  proc_control_B.ct_o[849] = ct[15] * ct[318];
  proc_control_B.ct_o[850] = ct[658];
  proc_control_B.ct_o[851] = ct[21] * ct[312];
  proc_control_B.ct_o[852] = ct[659];
  _mm_storeu_pd(&proc_control_B.ct_o[853], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [312])));
  _mm_storeu_pd(&proc_control_B.ct_o[855], _mm_mul_pd(_mm_set_pd(ct[20], ct[22]),
    _mm_set_pd(ct[315], ct[313])));
  proc_control_B.ct_o[857] = ct[660];
  proc_control_B.ct_o[858] = ct[20] * ct[316];
  proc_control_B.ct_o[859] = ct[661];
  _mm_storeu_pd(&proc_control_B.ct_o[860], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[315])));
  proc_control_B.ct_o[862] = ct[20] * ct[318];
  proc_control_B.ct_o[863] = ct[662];
  proc_control_B.ct_o[864] = ct[663];
  _mm_storeu_pd(&proc_control_B.ct_o[865], _mm_mul_pd(tmp_3, _mm_set_pd(ct[318],
    ct[319])));
  proc_control_B.ct_o[867] = ct[664];
  proc_control_B.ct_o[868] = ct[21] * ct[319];
  proc_control_B.ct_o[869] = ct[665];
  proc_control_B.ct_o[870] = ct[666];
  proc_control_B.ct_o[871] = ct[668];
  proc_control_B.ct_o[872] = ct[669];
  proc_control_B.ct_o[873] = ct[672];
  proc_control_B.ct_o[874] = ct[673];
  memcpy(&proc_control_B.ct_o[875], &ct[675], 19U * sizeof(real_T));
  proc_control_B.ct_o[894] = ct[694];
  proc_control_B.ct_o[895] = ct[696];
  proc_control_B.ct_o[896] = ct[697];
  proc_control_B.ct_o[897] = ct[700];
  proc_control_B.ct_o[898] = ct[701];
  proc_control_B.ct_o[899] = ct[703];
  proc_control_B.ct_o[900] = ct[705];
  proc_control_B.ct_o[901] = ct[707];
  proc_control_B.ct_o[902] = ct[709];
  proc_control_B.ct_o[903] = ct[711];
  proc_control_B.ct_o[904] = ct[712];
  proc_control_B.ct_o[905] = ct[714];
  proc_control_B.ct_o[906] = ct[716];
  proc_control_B.ct_o[907] = ct[718];
  proc_control_B.ct_o[908] = ct[721];
  proc_control_B.ct_o[909] = ct[722];
  proc_control_B.ct_o[910] = ct[723];
  proc_control_B.ct_o[911] = ct[726];
  proc_control_B.ct_o[912] = ct[745];
  proc_control_B.ct_o[913] = ct[746];
  proc_control_B.ct_o[914] = -ct[272];
  proc_control_B.ct_o[915] = ct[747];
  proc_control_B.ct_o[916] = ct[748];
  proc_control_B.ct_o[917] = ct[749];
  proc_control_B.ct_o[918] = ct[750];
  proc_control_B.ct_o[919] = ct[751];
  proc_control_B.ct_o[920] = ct[752];
  proc_control_B.ct_o[921] = -ct[273];
  proc_control_B.ct_o[922] = ct[754];
  proc_control_B.ct_o[923] = ct[755];
  proc_control_B.ct_o[924] = -ct[274];
  proc_control_B.ct_o[925] = ct[758];
  proc_control_B.ct_o[926] = ct[759];
  proc_control_B.ct_o[927] = ct[760];
  proc_control_B.ct_o[928] = ct[761];
  proc_control_B.ct_o[929] = ct[763];
  proc_control_B.ct_o[930] = ct[766];
  proc_control_B.ct_o[931] = ct[767];
  proc_control_B.ct_o[932] = ct[768];
  proc_control_B.ct_o[933] = ct[770];
  proc_control_B.ct_o[934] = ct[771];
  proc_control_B.ct_o[935] = ct[772];
  proc_control_B.ct_o[936] = ct[773];
  proc_control_B.ct_o[937] = ct[774];
  proc_control_B.ct_o[938] = ct[776];
  proc_control_B.ct_o[939] = ct[778];
  proc_control_B.ct_o[940] = ct[779];
  proc_control_B.ct_o[941] = ct[781];
  proc_control_B.ct_o[942] = ct[782];
  proc_control_B.ct_o[943] = ct[785];
  proc_control_B.ct_o[944] = ct[787];
  proc_control_B.ct_o[945] = ct[788];
  proc_control_B.ct_o[946] = ct[789];
  proc_control_B.ct_o[947] = ct[790];
  proc_control_B.ct_o[948] = ct[791];
  proc_control_B.ct_o[949] = ct[792];
  proc_control_B.ct_o[950] = ct[793];
  proc_control_B.ct_o[951] = -ct[302];
  proc_control_B.ct_o[952] = -ct[305];
  proc_control_B.ct_o[953] = -ct[308];
  proc_control_B.ct_o[954] = -ct[314];
  proc_control_B.ct_o[955] = -ct[317];
  proc_control_B.ct_o[956] = -ct[320];
  proc_control_B.ct_o[957] = -ct[328];
  proc_control_B.ct_o[958] = -ct[331];
  proc_control_B.ct_o[959] = -ct[332];
  proc_control_B.ct_o[960] = -ct[335];
  proc_control_B.ct_o[961] = -ct[338];
  proc_control_B.ct_o[962] = -ct[339];
  proc_control_B.ct_o[963] = -ct[341];
  proc_control_B.ct_o[964] = -ct[345];
  proc_control_B.ct_o[965] = -ct[346];
  proc_control_B.ct_o[966] = ct[794];
  proc_control_B.ct_o[967] = -ct[349];
  proc_control_B.ct_o[968] = -ct[350];
  proc_control_B.ct_o[969] = ct[795];
  proc_control_B.ct_o[970] = ct[796];
  proc_control_B.ct_o[971] = -(ct[10] * ct[196]);
  proc_control_B.ct_o[972] = -(ct[7] * ct[197]);
  proc_control_B.ct_o[973] = ct[797];
  proc_control_B.ct_o[974] = -ct[357];
  proc_control_B.ct_o[975] = ct[798];
  proc_control_B.ct_o[976] = -(ct[12] * ct[196]);
  proc_control_B.ct_o[977] = ct[799];
  proc_control_B.ct_o[978] = -(ct[6] * ct[198]);
  proc_control_B.ct_o[979] = ct[800];
  proc_control_B.ct_o[980] = ct[801];
  proc_control_B.ct_o[981] = -(ct[8] * ct[198]);
  proc_control_B.ct_o[982] = -(ct[11] * ct[197]);
  proc_control_B.ct_o[983] = -ct[369];
  proc_control_B.ct_o[984] = -ct[372];
  proc_control_B.ct_o[985] = -ct[374];
  proc_control_B.ct_o[986] = -ct[377];
  proc_control_B.ct_o[987] = -ct[379];
  proc_control_B.ct_o[988] = -ct[381];
  proc_control_B.ct_o[989] = -ct[388];
  proc_control_B.ct_o[990] = -ct[390];
  proc_control_B.ct_o[991] = -ct[391];
  proc_control_B.ct_o[992] = -ct[393];
  proc_control_B.ct_o[993] = -ct[398];
  proc_control_B.ct_o[994] = -ct[399];
  proc_control_B.ct_o[995] = -ct[404];
  proc_control_B.ct_o[996] = -ct[405];
  proc_control_B.ct_o[997] = ct[802];
  proc_control_B.ct_o[998] = ct[803];
  proc_control_B.ct_o[999] = ct[804];
  proc_control_B.ct_o[1000] = -ct[416];
  proc_control_B.ct_o[1001] = -ct[417];
  proc_control_B.ct_o[1002] = -ct[418];
  proc_control_B.ct_o[1003] = ct[805];
  proc_control_B.ct_o[1004] = ct[806];
  proc_control_B.ct_o[1005] = -ct[431];
  proc_control_B.ct_o[1006] = -ct[432];
  proc_control_B.ct_o[1007] = ct[807];
  proc_control_B.ct_o[1008] = -ct[450];
  proc_control_B.ct_o[1009] = -(ct[21] * ct[197]);
  proc_control_B.ct_o[1010] = -proc_control_B.dv45[0];
  proc_control_B.ct_o[1011] = -ct[463];
  proc_control_B.ct_o[1012] = ct[808];
  proc_control_B.ct_o[1013] = ct[809];
  proc_control_B.ct_o[1014] = ct[810];
  proc_control_B.ct_o[1015] = ct[811];
  proc_control_ft_3_pr(proc_control_B.ct_o, out1);
}

void proc_control::proc_control_ft_1_pr(const real_T ct[445], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp = _mm_set1_pd(ct[318]);
  tmp_0 = _mm_set1_pd(ct[26]);
  tmp_1 = _mm_set1_pd(ct[29]);
  tmp_l = _mm_set_pd(ct[15], ct[19]);
  tmp_16 = _mm_loadu_pd(&ct[27]);
  tmp_17 = _mm_loadu_pd(&ct[30]);
  _mm_storeu_pd(&proc_control_B.dv44[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_0), tmp_16), tmp_1), tmp_17), tmp));
  proc_control_B.t898 = proc_control_B.dv44[0];
  proc_control_B.t899 = proc_control_B.dv44[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_4 = _mm_set1_pd(ct[30]);
  tmp_5 = _mm_set1_pd(ct[28]);
  tmp_a = _mm_set1_pd(ct[31]);
  tmp_n = _mm_set_pd(ct[20], ct[11]);
  tmp_v = _mm_set1_pd(ct[27]);
  _mm_storeu_pd(&proc_control_B.dv44[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_n, tmp_v), tmp_5), tmp_4), tmp_a), tmp));
  proc_control_B.t900 = proc_control_B.dv44[0];
  proc_control_B.t901 = proc_control_B.dv44[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_m = _mm_set_pd(ct[21], ct[22]);
  _mm_storeu_pd(&proc_control_B.dv44[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_m, tmp_0), tmp_16), tmp_1), tmp_17), tmp));

  // Start for MATLABSystem: '<S226>/MATLAB System'
  memcpy(&proc_control_B.ct_n[0], &ct[6], 38U * sizeof(real_T));
  tmp_2 = _mm_set1_pd(ct[272]);
  tmp_c = _mm_set_pd(ct[290], ct[280]);
  tmp_13 = _mm_set1_pd(ct[348]);
  _mm_storeu_pd(&proc_control_B.ct_n[38], _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_c),
    tmp_13));
  proc_control_B.ct_n[40] = ct[44];
  proc_control_B.ct_n[41] = ct[280] * ct[290] * ct[348];
  proc_control_B.ct_n[42] = ct[45];
  proc_control_B.ct_n[43] = ct[46];
  proc_control_B.ct_n[44] = ct[47];
  proc_control_B.ct_n[45] = ct[48];
  tmp_3 = _mm_set1_pd(ct[329]);
  tmp_1d = _mm_loadu_pd(&ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_n[46], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1d, tmp_16), tmp_1), tmp_2), tmp_3));
  tmp_o = _mm_set_pd(ct[280], ct[272]);
  tmp_q = _mm_set_pd(ct[26], ct[27]);
  _mm_storeu_pd(&proc_control_B.ct_n[48], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[14]), tmp_q), tmp_1), tmp_o), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[50], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[17], ct[15]), tmp_16), tmp_1), tmp_2), tmp_3));
  proc_control_B.ct_n[52] = ct[49];
  tmp_7 = _mm_set1_pd(ct[19]);
  tmp_9 = _mm_set_pd(ct[28], ct[26]);
  tmp_b = _mm_set_pd(ct[272], ct[290]);
  _mm_storeu_pd(&proc_control_B.ct_n[53], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_7, tmp_9), tmp_1), tmp_b), tmp_3));
  tmp_8 = _mm_set1_pd(ct[11]);
  tmp_e = _mm_set_pd(ct[272], ct[280]);
  tmp_18 = _mm_loadu_pd(&ct[26]);
  _mm_storeu_pd(&proc_control_B.ct_n[55], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_8, tmp_18), tmp_4), tmp_e), tmp_3));
  tmp_6 = _mm_set1_pd(ct[280]);
  tmp_15 = _mm_mul_pd(_mm_set_pd(ct[14], ct[12]), tmp_0);
  _mm_storeu_pd(&proc_control_B.ct_n[57], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_15, tmp_4), tmp_6), tmp_3));
  tmp_14 = _mm_set_pd(ct[18], ct[16]);
  _mm_storeu_pd(&proc_control_B.ct_n[59], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_14, tmp_5), tmp_4), tmp_6), tmp_3));
  tmp_h = _mm_set_pd(ct[280], ct[290]);
  _mm_storeu_pd(&proc_control_B.ct_n[61], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_7, tmp_16), tmp_4), tmp_h), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[63], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_8, tmp_9), tmp_a), tmp_b), tmp_3));
  tmp_d = _mm_set1_pd(ct[290]);
  _mm_storeu_pd(&proc_control_B.ct_n[65], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[15], ct[13]), tmp_18), tmp_a), tmp_d), tmp_3));
  tmp_t = _mm_set_pd(ct[27], ct[28]);
  tmp_19 = _mm_loadu_pd(&ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_n[67], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_19, tmp_t), tmp_a), tmp_c), tmp_3));
  tmp_1e = _mm_loadu_pd(&ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_n[69], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1e, tmp_18), tmp_a), tmp_d), tmp_3));
  tmp_f = _mm_set1_pd(ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_n[71], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_f, tmp_18), tmp_4), tmp_e), tmp_3));
  tmp_g = _mm_set1_pd(ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_n[73], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, tmp_18), tmp_1), tmp_e), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[75], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_f, tmp_9), tmp_a), tmp_b), tmp_3));
  tmp_i = _mm_set1_pd(ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_n[77], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_i, tmp_9), tmp_1), tmp_b), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[79], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, tmp_16), tmp_a), tmp_h), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[81], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_i, tmp_16), tmp_4), tmp_h), tmp_3));
  proc_control_B.ct_n[83] = ct[414] + ct[425];
  tmp_9 = _mm_mul_pd(_mm_set_pd(ct[13], ct[11]), _mm_set_pd(ct[17], ct[19]));
  _mm_storeu_pd(&proc_control_B.ct_n[84], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_9, tmp_1), tmp_4), tmp_2), tmp));
  tmp_j = _mm_set_pd(ct[18], ct[19]);
  tmp_j = _mm_mul_pd(tmp_19, tmp_j);
  tmp_1a = _mm_mul_pd(tmp_j, tmp_1);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_n[86], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1a, tmp_4), tmp_6), tmp));
  tmp_k = _mm_set_pd(ct[14], ct[15]);
  tmp_k = _mm_mul_pd(_mm_loadu_pd(&ct[11]), tmp_k);
  _mm_storeu_pd(&proc_control_B.ct_n[88], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, tmp_1), tmp_a), tmp_2), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[90], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1a, tmp_a), tmp_d), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[92], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, tmp_4), tmp_a), tmp_6), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[94], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_9, tmp_4), tmp_a), tmp_d), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[96], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_f), tmp_1), tmp_17), tmp_2), tmp));
  proc_control_B.ct_n[98] = ct[19] * ct[21] * ct[29] * ct[30] * ct[280] * ct[318];
  proc_control_B.ct_n[99] = ct[50];
  tmp_l = _mm_set_pd(ct[19], ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_n[100], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_f), tmp_4), tmp_a), tmp_c), tmp));
  tmp_1a = _mm_set_pd(ct[30], ct[31]);
  tmp_1b = _mm_loadu_pd(&ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_n[102], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_8, tmp_1b), tmp_1), tmp_1a), tmp_2), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[104], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_m), tmp_1), tmp_17), tmp_c), tmp));
  tmp_l = _mm_set_pd(ct[29], ct[30]);
  tmp_p = _mm_set_pd(ct[15], ct[11]);
  _mm_storeu_pd(&proc_control_B.ct_n[106], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_p, tmp_1b), tmp_l), tmp_a), tmp_c), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[108], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_n, tmp_m), tmp_l), tmp_a), tmp_b), tmp));
  tmp_1b = _mm_loadu_pd(&ct[29]);
  _mm_storeu_pd(&proc_control_B.ct_n[110], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_f, tmp_m), tmp_1b), tmp_17), tmp_o), tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[112], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[20], ct[21]), tmp_i), tmp_1b), tmp_17),
    tmp_c), tmp));
  proc_control_B.ct_n[114] = ct[21] * ct[22] * ct[29] * ct[31] * ct[290] * ct
    [318];
  proc_control_B.ct_n[115] = ct[51];
  proc_control_B.ct_n[116] = ct[52];
  proc_control_B.ct_n[117] = ct[53];
  _mm_storeu_pd(&proc_control_B.ct_n[118], _mm_add_pd(_mm_loadu_pd(&ct[3]),
    _mm_set_pd(ct[407], ct[405])));
  _mm_storeu_pd(&proc_control_B.ct_n[120], _mm_add_pd(_mm_set_pd(ct[0], ct[5]),
    _mm_loadu_pd(&ct[408])));
  proc_control_B.ct_n[122] = ct[1] + ct[410];
  proc_control_B.ct_n[123] = ct[54];
  proc_control_B.ct_n[124] = ct[2] + ct[411];
  tmp_l = _mm_set1_pd(ct[37]);
  _mm_storeu_pd(&proc_control_B.ct_n[125], _mm_mul_pd(_mm_sub_pd(_mm_set_pd(ct
    [192], ct[143]), _mm_set_pd(ct[441], ct[442])), tmp_l));
  proc_control_B.ct_n[127] = (ct[151] - ct[444]) * ct[37];
  proc_control_B.ct_n[128] = ct[55];
  proc_control_B.ct_n[129] = ct[56];
  proc_control_B.ct_n[130] = ct[59];
  proc_control_B.ct_n[131] = ct[60];
  proc_control_B.ct_n[132] = ct[63];
  proc_control_B.ct_n[133] = ct[64];
  proc_control_B.ct_n[134] = ct[65];
  proc_control_B.ct_n[135] = ct[67];
  proc_control_B.ct_n[136] = ct[70];
  proc_control_B.ct_n[137] = ct[71];
  proc_control_B.ct_n[138] = ct[74];
  proc_control_B.ct_n[139] = ct[75];
  proc_control_B.ct_n[140] = ct[77];
  proc_control_B.ct_n[141] = ct[79];
  proc_control_B.ct_n[142] = ct[81];
  proc_control_B.ct_n[143] = ct[83];
  memcpy(&proc_control_B.ct_n[144], &ct[85], 12U * sizeof(real_T));
  proc_control_B.ct_n[156] = ct[97];
  memcpy(&proc_control_B.ct_n[157], &ct[99], sizeof(real_T) << 3U);
  proc_control_B.ct_n[165] = ct[107];
  memcpy(&proc_control_B.ct_n[166], &ct[109], 13U * sizeof(real_T));
  proc_control_B.ct_n[179] = ct[122];
  memcpy(&proc_control_B.ct_n[180], &ct[125], sizeof(real_T) << 4U);
  tmp_n = _mm_set1_pd(ct[338]);
  _mm_storeu_pd(&proc_control_B.ct_n[196], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_p, tmp_q), tmp_5), tmp_n));
  proc_control_B.ct_n[198] = ct[19] * ct[26] * ct[27] * ct[338];
  proc_control_B.ct_n[199] = ct[141];
  proc_control_B.ct_n[200] = ct[142];
  tmp_1c = _mm_loadu_pd(&ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_n[201], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1c, tmp_q), tmp_5), tmp_n));
  proc_control_B.ct_n[203] = ct[22] * ct[26] * ct[27] * ct[338];
  proc_control_B.ct_n[204] = ct[145];
  proc_control_B.ct_n[205] = ct[146];
  proc_control_B.ct_n[206] = ct[149];
  proc_control_B.ct_n[207] = ct[150];
  proc_control_B.ct_n[208] = ct[153];
  proc_control_B.ct_n[209] = ct[155];
  proc_control_B.ct_n[210] = ct[160];
  proc_control_B.ct_n[211] = ct[161];
  proc_control_B.ct_n[212] = ct[164];
  proc_control_B.ct_n[213] = ct[165];
  proc_control_B.ct_n[214] = ct[167];
  proc_control_B.ct_n[215] = ct[170];
  proc_control_B.ct_n[216] = ct[171];
  proc_control_B.ct_n[217] = ct[173];
  proc_control_B.ct_n[218] = ct[176];
  proc_control_B.ct_n[219] = ct[177];
  proc_control_B.ct_n[220] = ct[180];
  proc_control_B.ct_n[221] = ct[182];
  proc_control_B.ct_n[222] = ct[184];
  proc_control_B.ct_n[223] = ct[186];
  proc_control_B.ct_n[224] = ct[188];
  proc_control_B.ct_n[225] = ct[190];
  proc_control_B.ct_n[226] = ct[193];
  proc_control_B.ct_n[227] = ct[195];
  proc_control_B.ct_n[228] = ct[196];
  memcpy(&proc_control_B.ct_n[229], &ct[198], 14U * sizeof(real_T));
  proc_control_B.ct_n[243] = ct[212];
  proc_control_B.ct_n[244] = ct[214];
  proc_control_B.ct_n[245] = ct[215];
  proc_control_B.ct_n[246] = ct[216];
  proc_control_B.ct_n[247] = ct[217];
  proc_control_B.ct_n[248] = ct[218];
  proc_control_B.ct_n[249] = ct[219];
  proc_control_B.ct_n[250] = ct[220];
  proc_control_B.ct_n[251] = ct[222];
  proc_control_B.ct_n[252] = ct[224];
  proc_control_B.ct_n[253] = ct[225];
  proc_control_B.ct_n[254] = ct[226];
  memcpy(&proc_control_B.ct_n[255], &ct[228], 17U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_n[272], _mm_mul_pd(tmp_l, _mm_loadu_pd(&ct
    [428])));
  proc_control_B.ct_n[274] = ct[37] * ct[430];
  memcpy(&proc_control_B.ct_n[275], &ct[245], 27U * sizeof(real_T));
  tmp_l = _mm_set_pd(ct[274], ct[272]);
  _mm_storeu_pd(&proc_control_B.ct_n[302], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_l),
    tmp_n));
  tmp_m = _mm_set_pd(ct[280], ct[281]);
  tmp_b = _mm_set_pd(ct[338], ct[348]);
  _mm_storeu_pd(&proc_control_B.ct_n[304], _mm_mul_pd(_mm_mul_pd(tmp_p, tmp_m),
    tmp_b));
  tmp_p = _mm_set_pd(ct[296], ct[285]);
  tmp_r = _mm_set_pd(ct[348], ct[338]);
  tmp_x = _mm_set1_pd(ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_n[306], _mm_mul_pd(_mm_mul_pd(tmp_x, tmp_p),
    tmp_r));
  tmp_s = _mm_set_pd(ct[297], ct[290]);
  _mm_storeu_pd(&proc_control_B.ct_n[308], _mm_mul_pd(_mm_mul_pd(tmp_7, tmp_s),
    tmp_n));
  proc_control_B.ct_n[310] = ct[19] * ct[300] * ct[348];
  proc_control_B.ct_n[311] = ct[272];
  _mm_storeu_pd(&proc_control_B.ct_n[312], _mm_mul_pd(_mm_mul_pd(tmp_f, tmp_l),
    tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[314], _mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_m),
    tmp_b));
  _mm_storeu_pd(&proc_control_B.ct_n[316], _mm_mul_pd(_mm_mul_pd(tmp_g, tmp_p),
    tmp_r));
  _mm_storeu_pd(&proc_control_B.ct_n[318], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_s),
    tmp_n));
  proc_control_B.ct_n[320] = ct[22] * ct[300] * ct[348];
  proc_control_B.ct_n[321] = ct[273];
  proc_control_B.ct_n[322] = ct[274];
  proc_control_B.ct_n[323] = ct[275];
  proc_control_B.ct_n[324] = ct[276];
  proc_control_B.ct_n[325] = ct[277];
  proc_control_B.ct_n[326] = ct[278];
  proc_control_B.ct_n[327] = ct[279];
  _mm_storeu_pd(&proc_control_B.ct_n[328], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct[60])));
  _mm_storeu_pd(&proc_control_B.ct_n[330], _mm_mul_pd(tmp_1, _mm_set_pd(ct[64],
    ct[62])));
  proc_control_B.ct_n[332] = ct[29] * ct[65];
  proc_control_B.ct_n[333] = ct[280];
  tmp_l = _mm_set_pd(ct[60], ct[66]);
  _mm_storeu_pd(&proc_control_B.ct_n[334], _mm_mul_pd(tmp_1b, tmp_l));
  tmp_m = _mm_loadu_pd(&ct[61]);
  _mm_storeu_pd(&proc_control_B.ct_n[336], _mm_mul_pd(tmp_4, tmp_m));
  tmp_b = _mm_loadu_pd(&ct[64]);
  _mm_storeu_pd(&proc_control_B.ct_n[338], _mm_mul_pd(tmp_4, tmp_b));
  _mm_storeu_pd(&proc_control_B.ct_n[340], _mm_mul_pd(tmp_17, tmp_l));
  _mm_storeu_pd(&proc_control_B.ct_n[342], _mm_mul_pd(tmp_a, tmp_m));
  proc_control_B.ct_n[344] = ct[281];
  _mm_storeu_pd(&proc_control_B.ct_n[345], _mm_mul_pd(tmp_a, tmp_b));
  tmp_l = _mm_set_pd(ct[29], ct[31]);
  _mm_storeu_pd(&proc_control_B.ct_n[347], _mm_mul_pd(tmp_l, _mm_set_pd(ct[73],
    ct[66])));
  _mm_storeu_pd(&proc_control_B.ct_n[349], _mm_mul_pd(_mm_set_pd(ct[27], ct[29]),
    _mm_set_pd(ct[91], ct[75])));
  proc_control_B.ct_n[351] = ct[27] * ct[92];
  proc_control_B.ct_n[352] = ct[283];
  proc_control_B.ct_n[353] = ct[284];
  proc_control_B.ct_n[354] = ct[285];
  _mm_storeu_pd(&proc_control_B.ct_n[355], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1d, _mm_set_pd(ct[14], ct[16])), tmp_18), tmp_5), tmp_n));
  proc_control_B.ct_n[357] = ct[28] * ct[101];
  proc_control_B.ct_n[358] = ct[288];
  proc_control_B.ct_n[359] = ct[28] * ct[102];
  proc_control_B.ct_n[360] = ct[290];
  proc_control_B.ct_n[361] = ct[291];
  _mm_storeu_pd(&proc_control_B.ct_n[362], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1d, tmp_1e), tmp_q), tmp_t), tmp_n));
  proc_control_B.ct_n[364] = ct[292];
  proc_control_B.ct_n[365] = ct[295];
  proc_control_B.ct_tmp = ct[14] * ct[18] * ct[26] * ct[28];
  proc_control_B.ct_n[366] = proc_control_B.ct_tmp * ct[338];
  proc_control_B.ct_n[367] = ct[296];
  proc_control_B.ct_n[368] = ct[16] * ct[17] * ct[26] * ct[27] * ct[338];
  _mm_storeu_pd(&proc_control_B.ct_n[369], _mm_mul_pd(tmp_5, _mm_set_pd(ct[112],
    ct[110])));
  _mm_storeu_pd(&proc_control_B.ct_n[371], _mm_mul_pd(tmp_4, _mm_set_pd(ct[75],
    ct[73])));
  tmp_b = _mm_loadu_pd(&ct[78]);
  _mm_storeu_pd(&proc_control_B.ct_n[373], _mm_mul_pd(tmp_1, tmp_b));
  proc_control_B.ct_n[375] = ct[31] * ct[73];
  proc_control_B.ct_n[376] = ct[297];
  _mm_storeu_pd(&proc_control_B.ct_n[377], _mm_mul_pd(tmp_l, _mm_set_pd(ct[82],
    ct[75])));
  _mm_storeu_pd(&proc_control_B.ct_n[379], _mm_mul_pd(tmp_1b, _mm_set_pd(ct[78],
    ct[83])));
  tmp_m = _mm_set_pd(ct[27], ct[30]);
  _mm_storeu_pd(&proc_control_B.ct_n[381], _mm_mul_pd(tmp_m, _mm_set_pd(ct[117],
    ct[79])));
  proc_control_B.ct_n[383] = ct[298];
  proc_control_B.ct_n[384] = ct[299];
  proc_control_B.ct_n[385] = ct[28] * ct[121];
  proc_control_B.ct_n[386] = ct[300];
  _mm_storeu_pd(&proc_control_B.ct_n[387], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct[82])));
  _mm_storeu_pd(&proc_control_B.ct_n[389], _mm_mul_pd(tmp_a, tmp_b));
  tmp_b = _mm_set_pd(ct[31], ct[29]);
  _mm_storeu_pd(&proc_control_B.ct_n[391], _mm_mul_pd(tmp_b, _mm_set_pd(ct[82],
    ct[87])));
  tmp_r = _mm_set_pd(ct[27], ct[31]);
  _mm_storeu_pd(&proc_control_B.ct_n[393], _mm_mul_pd(tmp_r, _mm_set_pd(ct[125],
    ct[83])));
  proc_control_B.ct_n[395] = ct[301];
  proc_control_B.ct_n[396] = ct[302];
  tmp_1c = _mm_loadu_pd(&ct[28]);
  _mm_storeu_pd(&proc_control_B.ct_n[397], _mm_mul_pd(tmp_1c, _mm_set_pd(ct[89],
    ct[129])));
  tmp_u = _mm_set_pd(ct[28], ct[30]);
  _mm_storeu_pd(&proc_control_B.ct_n[399], _mm_mul_pd(tmp_u, _mm_set_pd(ct[131],
    ct[87])));
  proc_control_B.ct_n[401] = ct[303];
  proc_control_B.ct_n[402] = ct[304];
  tmp_w = _mm_set_pd(ct[30], ct[28]);
  _mm_storeu_pd(&proc_control_B.ct_n[403], _mm_mul_pd(tmp_w, _mm_set_pd(ct[89],
    ct[135])));
  proc_control_B.ct_n[405] = ct[31] * ct[87];
  proc_control_B.ct_n[406] = ct[305];
  proc_control_B.ct_n[407] = ct[306];
  proc_control_B.ct_n[408] = ct[308];
  proc_control_B.ct_n[409] = ct[310];
  proc_control_B.ct_n[410] = ct[311];
  proc_control_B.ct_n[411] = ct[312];
  proc_control_B.ct_n[412] = ct[313];
  proc_control_B.ct_n[413] = ct[314];
  proc_control_B.ct_n[414] = ct[315];
  proc_control_B.ct_n[415] = ct[316];
  _mm_storeu_pd(&proc_control_B.ct_n[416], _mm_mul_pd(tmp_b, _mm_set_pd(ct[89],
    ct[115])));
  proc_control_B.ct_n[418] = ct[27] * ct[137];
  proc_control_B.ct_n[419] = ct[317];
  proc_control_B.ct_n[420] = ct[318];
  proc_control_B.ct_n[421] = ct[319];
  proc_control_B.ct_n[422] = ct[321];
  proc_control_B.ct_n[423] = ct[322];
  proc_control_B.ct_n[424] = ct[323];
  proc_control_B.ct_n[425] = ct[324];
  proc_control_B.ct_n[426] = ct[325];
  proc_control_B.ct_n[427] = ct[327];
  proc_control_B.ct_n[428] = ct[328];
  proc_control_B.ct_n[429] = ct[329];
  proc_control_B.ct_n[430] = ct[330];
  _mm_storeu_pd(&proc_control_B.ct_n[431], _mm_mul_pd(tmp_u, _mm_set_pd(ct[139],
    ct[115])));
  memcpy(&proc_control_B.ct_n[433], &ct[331], 17U * sizeof(real_T));
  proc_control_B.ct_n[450] = ct[31] * ct[115];
  proc_control_B.ct_n[451] = ct[348];
  proc_control_B.ct_n[452] = ct[29] * ct[123];
  _mm_storeu_pd(&proc_control_B.ct_n[453], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1d, tmp_0), tmp_v), tmp_5), tmp_n));
  tmp_b = _mm_set_pd(ct[16], ct[14]);
  _mm_storeu_pd(&proc_control_B.ct_n[455], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_b, tmp_0), tmp_v), tmp_5), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[457], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1e, tmp_0), tmp_v), tmp_5), tmp_n));
  proc_control_B.ct_n[459] = ct[349];
  proc_control_B.ct_n[460] = ct[350];
  proc_control_B.ct_n[461] = ct[351];
  proc_control_B.ct_n[462] = ct[352];
  _mm_storeu_pd(&proc_control_B.ct_n[463], _mm_mul_pd(tmp_w, _mm_set_pd(ct[123],
    ct[141])));
  proc_control_B.ct_n[465] = ct[353];
  proc_control_B.ct_n[466] = ct[354];
  proc_control_B.ct_n[467] = ct[355];
  proc_control_B.ct_n[468] = ct[356];
  proc_control_B.ct_n[469] = ct[357];
  proc_control_B.ct_n[470] = ct[358];
  proc_control_B.ct_n[471] = ct[359];
  proc_control_B.ct_n[472] = ct[31] * ct[123];
  memcpy(&proc_control_B.ct_n[473], &ct[360], 44U * sizeof(real_T));
  proc_control_B.ct_n[517] = ct[404];
  proc_control_B.ct_n[518] = ct[406];
  proc_control_B.ct_n[519] = -ct[57];
  proc_control_B.ct_n[520] = -ct[58];
  proc_control_B.ct_n[521] = -ct[61];
  proc_control_B.ct_n[522] = -ct[62];
  proc_control_B.ct_n[523] = -ct[66];
  proc_control_B.ct_n[524] = -ct[68];
  proc_control_B.ct_n[525] = -ct[69];
  proc_control_B.ct_n[526] = -ct[72];
  proc_control_B.ct_n[527] = -ct[73];
  proc_control_B.ct_n[528] = -ct[76];
  proc_control_B.ct_n[529] = -ct[78];
  proc_control_B.ct_n[530] = -ct[80];
  proc_control_B.ct_n[531] = -ct[82];
  proc_control_B.ct_n[532] = -ct[84];
  proc_control_B.ct_n[533] = -ct[96];
  proc_control_B.ct_n[534] = -ct[98];
  proc_control_B.ct_n[535] = -ct[100];
  proc_control_B.ct_n[536] = -ct[108];
  proc_control_B.ct_n[537] = -ct[119];
  proc_control_B.ct_n[538] = -ct[120];
  proc_control_B.ct_n[539] = -ct[123];
  proc_control_B.ct_n[540] = -ct[124];
  proc_control_B.ct_n[541] = -ct[144];
  proc_control_B.ct_n[542] = -ct[147];
  proc_control_B.ct_n[543] = -ct[148];
  proc_control_B.ct_n[544] = -ct[152];
  proc_control_B.ct_n[545] = -ct[154];
  proc_control_B.ct_n[546] = -ct[156];
  proc_control_B.ct_n[547] = -ct[157];
  proc_control_B.ct_n[548] = -ct[158];
  proc_control_B.ct_n[549] = -ct[159];
  proc_control_B.ct_n[550] = -ct[162];
  proc_control_B.ct_n[551] = -ct[163];
  proc_control_B.ct_n[552] = -ct[166];
  proc_control_B.ct_n[553] = -ct[168];
  proc_control_B.ct_n[554] = -ct[169];
  proc_control_B.ct_n[555] = -ct[172];
  proc_control_B.ct_n[556] = -ct[174];
  proc_control_B.ct_n[557] = -ct[175];
  proc_control_B.ct_n[558] = -ct[178];
  proc_control_B.ct_n[559] = -ct[179];
  proc_control_B.ct_n[560] = -ct[181];
  proc_control_B.ct_n[561] = ct[412];
  proc_control_B.ct_n[562] = -ct[183];
  proc_control_B.ct_n[563] = -ct[185];
  proc_control_B.ct_n[564] = -ct[187];
  proc_control_B.ct_n[565] = -ct[189];
  proc_control_B.ct_n[566] = -ct[191];
  proc_control_B.ct_n[567] = -ct[194];
  proc_control_B.ct_n[568] = -ct[197];
  proc_control_B.ct_n[569] = ct[413];
  proc_control_B.ct_n[570] = -ct[221];
  proc_control_B.ct_n[571] = -ct[223];
  proc_control_B.ct_n[572] = -ct[227];
  _mm_storeu_pd(&proc_control_B.ct_n[573], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_2),
    tmp_3));
  tmp_u = _mm_set_pd(ct[338], ct[329]);
  _mm_storeu_pd(&proc_control_B.ct_n[575], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_e),
    tmp_u));
  tmp_k = _mm_set1_pd(ct[12]);
  tmp_z = _mm_set1_pd(ct[14]);
  _mm_storeu_pd(&proc_control_B.ct_n[577], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_z), tmp_6), tmp_u));
  proc_control_B.ct_n[579] = ct[415];
  _mm_storeu_pd(&proc_control_B.ct_n[580], _mm_mul_pd(_mm_mul_pd(tmp_9, tmp_2),
    tmp_3));
  tmp_9 = _mm_set_pd(ct[290], ct[272]);
  tmp_12 = _mm_set_pd(ct[329], ct[338]);
  _mm_storeu_pd(&proc_control_B.ct_n[582], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[11], ct[13]), _mm_set_pd(ct[19], ct[17])), tmp_9), tmp_12));
  tmp_y = _mm_set1_pd(ct[13]);
  tmp_10 = _mm_set1_pd(ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_n[584], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_y, tmp_10), tmp_d), tmp_u));
  _mm_storeu_pd(&proc_control_B.ct_n[586], _mm_mul_pd(_mm_mul_pd(tmp_j, tmp_6),
    tmp_3));
  proc_control_B.ct_n[588] = ct[416];
  _mm_storeu_pd(&proc_control_B.ct_n[589], _mm_mul_pd(_mm_mul_pd(tmp_j, tmp_h),
    tmp_u));
  tmp_j = _mm_set1_pd(ct[16]);
  tmp_11 = _mm_set1_pd(ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_n[591], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_11), tmp_d), tmp_u));
  _mm_storeu_pd(&proc_control_B.ct_n[593], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_x, tmp_f), tmp_o), tmp_3));
  proc_control_B.ct_n[595] = ct[417];
  _mm_storeu_pd(&proc_control_B.ct_n[596], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_f), tmp_9), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[598], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_g), tmp_o), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[600], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_g), tmp_c), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[602], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_i), tmp_9), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[604], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_x, tmp_i), tmp_c), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[606], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_f, tmp_g), tmp_o), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[608], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_f, tmp_i), tmp_9), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[610], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_0), tmp_c), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[612], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_18), tmp_e), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[614], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, tmp_t), tmp_2), tmp_n));
  tmp_2 = _mm_set_pd(ct[275], ct[273]);
  _mm_storeu_pd(&proc_control_B.ct_n[616], _mm_mul_pd(tmp_k, tmp_2));
  proc_control_B.ct_n[618] = ct[421];
  tmp_k = _mm_set_pd(ct[26], ct[28]);
  _mm_storeu_pd(&proc_control_B.ct_n[619], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, tmp_k), tmp_c), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[621], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_y, tmp_t), tmp_9), tmp_n));
  tmp_1f = _mm_loadu_pd(&ct[276]);
  _mm_storeu_pd(&proc_control_B.ct_n[623], _mm_mul_pd(tmp_y, tmp_1f));
  _mm_storeu_pd(&proc_control_B.ct_n[625], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_z, tmp_18), tmp_e), tmp_n));
  proc_control_B.ct_n[627] = ct[14] * ct[28] * ct[272] * ct[338];
  proc_control_B.ct_n[628] = ct[422];
  proc_control_B.ct_n[629] = ct[15] * ct[27] * ct[272] * ct[338];
  _mm_storeu_pd(&proc_control_B.ct_n[630], _mm_mul_pd(tmp_z, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_n[632], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp_k), tmp_6), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[634], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_19, tmp_q), tmp_d), tmp_n));
  proc_control_B.ct_n[636] = ct[423];
  _mm_storeu_pd(&proc_control_B.ct_n[637], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_16), tmp_h), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[639], _mm_mul_pd(tmp_j, _mm_loadu_pd(&ct
    [278])));
  _mm_storeu_pd(&proc_control_B.ct_n[641], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_10, tmp_q), tmp_9), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[643], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1e, tmp_k), tmp_o), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[645], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1e, tmp_q), tmp_d), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[647], _mm_mul_pd(tmp_10, tmp_1f));
  _mm_storeu_pd(&proc_control_B.ct_n[649], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_11, tmp_16), tmp_h), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[651], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_5), tmp_o), tmp_n));
  proc_control_B.ct_n[653] = ct[18] * ct[278];
  proc_control_B.ct_n[654] = -ct[387];
  proc_control_B.ct_n[655] = ct[18] * ct[279];
  _mm_storeu_pd(&proc_control_B.ct_n[656], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_i), tmp_c), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[658], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_f, tmp_0), tmp_c), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[660], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_v), tmp_9), tmp_n));
  proc_control_B.ct_n[662] = ct[22] * ct[28] * ct[272] * ct[338];
  proc_control_B.ct_n[663] = ct[426];
  _mm_storeu_pd(&proc_control_B.ct_n[664], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[11], ct[22]), tmp_1c), tmp_e), tmp_12));
  tmp_2 = _mm_set_pd(ct[281], ct[274]);
  _mm_storeu_pd(&proc_control_B.ct_n[666], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_1), tmp_2), tmp_u));
  _mm_storeu_pd(&proc_control_B.ct_n[668], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_x, tmp_4), _mm_set_pd(ct[285], ct[280])), tmp_3));
  proc_control_B.ct_n[670] = ct[15] * ct[30] * ct[296] * ct[338];
  proc_control_B.ct_n[671] = ct[427];
  _mm_storeu_pd(&proc_control_B.ct_n[672], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_a), tmp_s), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[674], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[19]), tmp_l), _mm_set_pd(ct[272], ct[300])), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_n[676], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_f, tmp_1), tmp_2), tmp_u));
  _mm_storeu_pd(&proc_control_B.ct_n[678], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_0, tmp_16), tmp_h), tmp_13));
  _mm_storeu_pd(&proc_control_B.ct_n[680], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[21], ct[27]), tmp_w), tmp_o), _mm_set_pd(ct[329], ct[348])));
  _mm_storeu_pd(&proc_control_B.ct_n[682], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_4), tmp_p), tmp_u));
  _mm_storeu_pd(&proc_control_B.ct_n[684], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_a), tmp_s), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[686], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[27], ct[22]), tmp_l), _mm_set_pd(ct[274], ct[300])), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[688], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_1b), _mm_set_pd(ct[285], ct[274])), tmp_n));
  _mm_storeu_pd(&proc_control_B.ct_n[690], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_17), _mm_set_pd(ct[297], ct[285])), tmp_n));
  proc_control_B.ct_n[692] = ct[27] * ct[31] * ct[297] * ct[338];
  _mm_storeu_pd(&proc_control_B.ct_n[693], _mm_add_pd(_mm_set_pd(ct[367], ct[213]),
    _mm_set_pd(ct[378], ct[424])));
  _mm_storeu_pd(&proc_control_B.ct_n[695], _mm_mul_pd(tmp_1, _mm_set_pd(ct[286],
    ct[283])));
  _mm_storeu_pd(&proc_control_B.ct_n[697], _mm_mul_pd(tmp_1, _mm_set_pd(ct[291],
    ct[289])));
  _mm_storeu_pd(&proc_control_B.ct_n[699], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [292])));
  _mm_storeu_pd(&proc_control_B.ct_n[701], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [294])));
  _mm_storeu_pd(&proc_control_B.ct_n[703], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [313])));
  _mm_storeu_pd(&proc_control_B.ct_n[705], _mm_mul_pd(tmp_4, _mm_set_pd(ct[284],
    ct[282])));
  _mm_storeu_pd(&proc_control_B.ct_n[707], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [322])));
  _mm_storeu_pd(&proc_control_B.ct_n[709], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [287])));
  proc_control_B.ct_n[711] = ct[30] * ct[289];
  proc_control_B.ct_n[712] = ct[431];
  _mm_storeu_pd(&proc_control_B.ct_n[713], _mm_mul_pd(tmp_4, _mm_set_pd(ct[293],
    ct[291])));
  _mm_storeu_pd(&proc_control_B.ct_n[715], _mm_mul_pd(tmp_m, _mm_set_pd(ct[331],
    ct[295])));
  _mm_storeu_pd(&proc_control_B.ct_n[717], _mm_mul_pd(_mm_set_pd(ct[31], ct[27]),
    _mm_set_pd(ct[282], ct[332])));
  _mm_storeu_pd(&proc_control_B.ct_n[719], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [283])));
  _mm_storeu_pd(&proc_control_B.ct_n[721], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [286])));
  proc_control_B.ct_n[723] = ct[432];
  _mm_storeu_pd(&proc_control_B.ct_n[724], _mm_mul_pd(tmp_a, _mm_set_pd(ct[292],
    ct[288])));
  _mm_storeu_pd(&proc_control_B.ct_n[726], _mm_mul_pd(tmp_1a, _mm_set_pd(ct[298],
    ct[294])));
  _mm_storeu_pd(&proc_control_B.ct_n[728], _mm_mul_pd(tmp_w, _mm_set_pd(ct[299],
    ct[351])));
  _mm_storeu_pd(&proc_control_B.ct_n[730], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [301])));
  _mm_storeu_pd(&proc_control_B.ct_n[732], _mm_mul_pd(tmp_t, _mm_set_pd(ct[356],
    ct[354])));
  _mm_storeu_pd(&proc_control_B.ct_n[734], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [298])));
  _mm_storeu_pd(&proc_control_B.ct_n[736], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [303])));
  _mm_storeu_pd(&proc_control_B.ct_n[738], _mm_mul_pd(tmp_t, _mm_set_pd(ct[368],
    ct[363])));
  _mm_storeu_pd(&proc_control_B.ct_n[740], _mm_mul_pd(tmp_w, _mm_set_pd(ct[303],
    ct[369])));
  _mm_storeu_pd(&proc_control_B.ct_n[742], _mm_mul_pd(tmp_1a, _mm_set_pd(ct[304],
    ct[301])));
  _mm_storeu_pd(&proc_control_B.ct_n[744], _mm_mul_pd(tmp_r, _mm_set_pd(ct[382],
    ct[302])));
  _mm_storeu_pd(&proc_control_B.ct_n[746], _mm_mul_pd(tmp_t, _mm_set_pd(ct[386],
    ct[383])));
  _mm_storeu_pd(&proc_control_B.ct_n[748], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_14, tmp_0), tmp_v), tmp_5), tmp_1), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[750], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [388])));
  proc_control_B.ct_n[752] = ct[433];
  proc_control_B.ct_n[753] = ct[26] * ct[392];
  _mm_storeu_pd(&proc_control_B.ct_n[754], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[17], ct[13]), tmp_0), tmp_v), tmp_5),
    tmp_4), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[756], _mm_mul_pd(tmp_k, _mm_set_pd(ct[395],
    ct[393])));
  _mm_storeu_pd(&proc_control_B.ct_n[758], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp_v), tmp_5), tmp_a), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_n[760], _mm_mul_pd(tmp_q, _mm_set_pd(ct[399],
    ct[396])));
  _mm_storeu_pd(&proc_control_B.ct_n[762], _mm_mul_pd(tmp_q, _mm_loadu_pd(&ct
    [400])));
  _mm_storeu_pd(&proc_control_B.ct_n[764], _mm_mul_pd(tmp_t, _mm_set_pd(ct[404],
    ct[402])));
  proc_control_B.ct_n[766] = ct[28] * ct[403];
  proc_control_B.ct_n[767] = proc_control_B.t898;
  proc_control_B.ct_n[768] = proc_control_B.t899;
  proc_control_B.ct_n[769] = ct[434];
  proc_control_B.ct_n[770] = ct[435];
  proc_control_B.ct_n[771] = proc_control_B.t900;
  proc_control_B.ct_n[772] = proc_control_B.t901;
  proc_control_B.ct_n[773] = proc_control_B.dv44[0];
  proc_control_B.ct_n[774] = proc_control_B.dv44[1];
  proc_control_B.ct_n[775] = ct[12] * proc_control_B.t898;
  proc_control_B.ct_n[776] = ct[13] * ct[18] * ct[26] * ct[27] * ct[29] * ct[30]
    * ct[318];
  proc_control_B.ct_n[777] = ct[14] * proc_control_B.t898;
  tmp_l = _mm_set_pd(ct[16], ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_n[778], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[12], ct[16]), tmp_l), tmp_0),
                tmp_16), tmp_1), tmp_17), tmp));
  proc_control_B.ct_n[780] = ct[13] * proc_control_B.t899;
  proc_control_B.ct_n[781] = ct[436];
  proc_control_B.ct_n[782] = proc_control_B.ct_tmp * ct[29] * ct[31] * ct[318];
  _mm_storeu_pd(&proc_control_B.ct_n[783], _mm_mul_pd(tmp_l, _mm_set_pd
    (proc_control_B.t900, proc_control_B.t899)));
  proc_control_B.ct_n[785] = ct[13] * ct[14] * ct[27] * ct[28] * ct[30] * ct[31]
    * ct[318];
  proc_control_B.ct_n[786] = ct[18] * proc_control_B.t900;
  proc_control_B.ct_n[787] = ct[12] * ct[17] * ct[27] * ct[28] * ct[30] * ct[31]
    * ct[318];
  _mm_storeu_pd(&proc_control_B.ct_n[788], _mm_mul_pd(tmp_14, _mm_set1_pd
    (proc_control_B.t901)));
  tmp = _mm_set_pd(proc_control_B.dv44[1], proc_control_B.dv44[0]);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_n[790], _mm_mul_pd(tmp_1d, tmp));
  _mm_storeu_pd(&proc_control_B.ct_n[792], _mm_mul_pd(_mm_set_pd(ct[17], ct[14]),
    tmp));
  proc_control_B.ct_n[794] = ct[437];
  proc_control_B.ct_n[795] = -ct[282];
  proc_control_B.ct_n[796] = -ct[286];
  proc_control_B.ct_n[797] = -ct[287];
  proc_control_B.ct_n[798] = -ct[289];
  proc_control_B.ct_n[799] = ct[438];
  proc_control_B.ct_n[800] = -ct[293];
  proc_control_B.ct_n[801] = -ct[294];
  proc_control_B.ct_n[802] = ct[439];
  proc_control_B.ct_n[803] = -ct[307];
  proc_control_B.ct_n[804] = -ct[309];
  proc_control_B.ct_n[805] = -ct[320];
  proc_control_B.ct_n[806] = -ct[326];
  proc_control_B.ct_n[807] = ct[440];
  proc_control_B.ct_n[808] = ct[441];
  proc_control_B.ct_n[809] = ct[442];
  proc_control_B.ct_n[810] = ct[443];
  proc_control_B.ct_n[811] = ct[444];
  proc_control_ft_2_pr(proc_control_B.ct_n, out1);
}

void proc_control::proc_con_AUVQuatPerturbedSimFcn(const real_T in1[13], const
  real_T in2[6], const real_T in4[38], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_1g;
  __m128d tmp_1h;
  __m128d tmp_1i;
  __m128d tmp_1j;
  __m128d tmp_1k;
  __m128d tmp_1l;
  __m128d tmp_1m;
  __m128d tmp_1n;
  __m128d tmp_1o;
  __m128d tmp_1p;
  __m128d tmp_1q;
  __m128d tmp_1r;
  __m128d tmp_1s;
  __m128d tmp_1t;
  __m128d tmp_1u;
  __m128d tmp_1v;
  __m128d tmp_1w;
  __m128d tmp_1x;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  // AUVQuatPerturbedSimFcn
  //     OUT1 = AUVQuatPerturbedSimFcn(IN1,IN2,IN3,IN4)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     17-Jul-2022 14:58:45
  tmp_m = _mm_set_pd(in4[14], in4[12]);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_set1_pd(in1[10]), tmp_m));
  proc_control_B.t20_d = proc_control_B.dv43[0];
  proc_control_B.t22 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_1o = _mm_loadu_pd(&in4[12]);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_set1_pd(in1[11]), tmp_1o));
  proc_control_B.t23 = proc_control_B.dv43[0];
  proc_control_B.t24_j = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_1q = _mm_loadu_pd(&in4[13]);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_set1_pd(in1[12]), tmp_1q));
  proc_control_B.t27 = proc_control_B.dv43[0];
  proc_control_B.t28 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_1b = _mm_loadu_pd(&in1[4]);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(tmp_1b, _mm_set1_pd(in1[6])));
  proc_control_B.t29 = proc_control_B.dv43[0];
  proc_control_B.t30 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_set1_pd(in1[3]), tmp_1b));
  proc_control_B.t31 = proc_control_B.dv43[0];
  proc_control_B.t32_f = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  proc_control_B.t36 = in4[12] * in4[12];
  proc_control_B.t37 = rt_powd_snf(in4[12], 3.0);
  proc_control_B.t38 = in4[13] * in4[13];
  proc_control_B.t40_j = rt_powd_snf(in4[13], 3.0);
  proc_control_B.t41_h = in4[14] * in4[14];
  proc_control_B.t43_c = rt_powd_snf(in4[14], 3.0);
  proc_control_B.t48 = in4[0] * in4[0];
  proc_control_B.t49 = rt_powd_snf(in4[0], 3.0);
  proc_control_B.t51 = rt_powd_snf(in4[0], 5.0);
  tmp = _mm_set1_pd(in4[31]);
  tmp_0 = _mm_set1_pd(in4[0]);
  tmp_1 = _mm_set1_pd(in4[3]);
  tmp_2 = _mm_set_pd(in4[10], in4[11]);
  tmp_1d = _mm_loadu_pd(&in4[7]);
  tmp_1c = _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_1d), tmp_2);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1c, tmp),
    tmp_0));
  proc_control_B.t83 = proc_control_B.dv43[0];
  proc_control_B.t84 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_8 = _mm_set_pd(in4[9], in4[11]);
  tmp_k = _mm_set_pd(in4[8], in4[6]);
  tmp_11 = _mm_set1_pd(in4[4]);
  tmp_13 = _mm_mul_pd(tmp_11, tmp_k);
  tmp_3 = _mm_mul_pd(tmp_13, tmp_8);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_3, tmp),
    tmp_0));
  proc_control_B.t85 = proc_control_B.dv43[0];
  proc_control_B.t86 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_5 = _mm_set1_pd(in4[5]);
  tmp_6 = _mm_set_pd(in4[9], in4[10]);
  tmp_1m = _mm_loadu_pd(&in4[6]);
  tmp_5 = _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_1m), tmp_6);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_5, tmp),
    tmp_0));
  proc_control_B.t87 = proc_control_B.dv43[0];
  proc_control_B.t88 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_4 = _mm_set1_pd(in4[32]);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_4),
    tmp_0));
  proc_control_B.t89 = proc_control_B.dv43[0];
  proc_control_B.t90 = proc_control_B.dv43[1];
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_3, tmp_4),
    tmp_0));
  proc_control_B.t91 = proc_control_B.dv43[0];
  proc_control_B.t92 = proc_control_B.dv43[1];
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_4),
    tmp_0));
  proc_control_B.t93 = proc_control_B.dv43[0];
  proc_control_B.t94 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_7 = _mm_set1_pd(in4[33]);
  tmp_9 = _mm_set1_pd(in4[30]);
  tmp_2 = _mm_mul_pd(tmp_1d, tmp_2);
  tmp_1e = _mm_mul_pd(tmp_2, tmp_7);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1e, tmp_9),
    tmp_0));
  proc_control_B.t95 = proc_control_B.dv43[0];
  proc_control_B.t96 = proc_control_B.dv43[1];
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1e, tmp),
    tmp_0));
  proc_control_B.t97 = proc_control_B.dv43[0];
  proc_control_B.t98 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_1e = _mm_set1_pd(in4[34]);
  tmp_q = _mm_set_pd(in4[5], in4[3]);
  tmp_y = _mm_mul_pd(tmp_q, tmp_8);
  tmp_a = _mm_mul_pd(tmp_y, tmp_1e);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_a, tmp_9),
    tmp_0));
  proc_control_B.t99 = proc_control_B.dv43[0];
  proc_control_B.t100 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_b = _mm_set_pd(in4[6], in4[7]);
  tmp_c = _mm_set1_pd(in4[35]);
  tmp_1h = _mm_loadu_pd(&in4[3]);
  tmp_1u = _mm_mul_pd(tmp_1h, tmp_b);
  tmp_1f = _mm_mul_pd(tmp_1u, tmp_c);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp_9),
    tmp_0));
  proc_control_B.t103 = proc_control_B.dv43[0];
  proc_control_B.t104 = proc_control_B.dv43[1];
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_a, tmp),
    tmp_0));
  proc_control_B.t105 = proc_control_B.dv43[0];
  proc_control_B.t106 = proc_control_B.dv43[1];
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp),
    tmp_0));
  proc_control_B.t107 = proc_control_B.dv43[0];
  proc_control_B.t108 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_a = _mm_set_pd(in4[7], in4[11]);
  tmp_1f = _mm_mul_pd(tmp_a, tmp_7);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_1l = _mm_loadu_pd(&in4[34]);
  tmp_1f = _mm_mul_pd(tmp_1f, tmp_1l);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp_9),
    tmp_0));
  proc_control_B.t111 = proc_control_B.dv43[0];
  proc_control_B.t114 = proc_control_B.dv43[1];
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp),
    tmp_0));
  proc_control_B.t115 = proc_control_B.dv43[0];
  proc_control_B.t116 = proc_control_B.dv43[1];

  // Start for MATLABSystem: '<S226>/MATLAB System'
  tmp_1g = _mm_loadu_pd(&in4[30]);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_1e), tmp_c), tmp_1g), tmp_0));
  proc_control_B.t118 = proc_control_B.dv43[0];
  proc_control_B.t120 = proc_control_B.dv43[1];
  tmp_19 = _mm_mul_pd(tmp_7, tmp_1e);
  _mm_storeu_pd(&proc_control_B.dv43[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_19,
    tmp_c), tmp_1g), tmp_0));

  // Start for MATLABSystem: '<S226>/MATLAB System'
  proc_control_B.in4[0] = in4[18];
  proc_control_B.in4[1] = in4[19];
  proc_control_B.in4[2] = in4[20];
  proc_control_B.in4[3] = in4[21];
  proc_control_B.in4[4] = in4[22];
  proc_control_B.in4[5] = in4[23];
  proc_control_B.in4[6] = in2[0];
  proc_control_B.in4[7] = in2[1];
  proc_control_B.in4[8] = in2[3];
  proc_control_B.in4[9] = in2[4];
  proc_control_B.in4[10] = in2[5];
  memcpy(&proc_control_B.in4[11], &in4[3], sizeof(real_T) << 3U);
  proc_control_B.in4[19] = in4[11];
  proc_control_B.in4[20] = in4[33];
  proc_control_B.in4[21] = in4[34];
  proc_control_B.in4[22] = in4[35];
  proc_control_B.in4[23] = in4[15];
  proc_control_B.in4[24] = in4[16];
  proc_control_B.in4[25] = in4[17];
  proc_control_B.in4[26] = in4[12];
  proc_control_B.in4[27] = in4[13];
  proc_control_B.in4[28] = in4[14];
  proc_control_B.in4[29] = in4[30];
  proc_control_B.in4[30] = in4[31];
  proc_control_B.in4[31] = in4[32];
  proc_control_B.in4[32] = in1[4];
  proc_control_B.in4[33] = in1[5];
  proc_control_B.in4[34] = in1[6];
  proc_control_B.in4[35] = in1[3];
  proc_control_B.in4[36] = in4[37];
  proc_control_B.in4[37] = in4[0];
  proc_control_B.in4[38] = in1[10];
  proc_control_B.in4[39] = in1[11];
  proc_control_B.in4[40] = in1[12];
  proc_control_B.in4[41] = in4[36];
  proc_control_B.in4[42] = in4[9] * in1[10];
  proc_control_B.in4_tmp = in4[7] * in4[11] * in4[33];
  proc_control_B.in4[43] = proc_control_B.in4_tmp * in4[32] * in4[0];
  proc_control_B.in4[44] = proc_control_B.t103;
  proc_control_B.in4[45] = proc_control_B.t105;
  proc_control_B.in4[46] = proc_control_B.t107;
  proc_control_B.in4[47] = in4[3] * in4[11] * in4[34] * in4[32] * in4[0];
  proc_control_B.in4[48] = in4[4] * in1[11];
  proc_control_B.in4_tmp_f = in4[3] * in4[7];
  proc_control_B.in4[49] = proc_control_B.in4_tmp_f * in4[35] * in4[32] * in4[0];
  proc_control_B.in4[50] = in4[7] * in1[11];
  proc_control_B.in4[51] = proc_control_B.dv43[0];
  proc_control_B.in4[52] = proc_control_B.dv43[1];
  proc_control_B.in4_tmp_n = in4[33] * in4[34] * in4[35];
  proc_control_B.in4[53] = proc_control_B.in4_tmp_n * in4[32] * in4[0];
  proc_control_B.in4[54] = in4[10] * in1[11];
  tmp_d = _mm_set_pd(in4[6], in4[8]);
  tmp_1k = _mm_loadu_pd(&in4[10]);
  tmp_1p = _mm_mul_pd(tmp_1h, tmp_d);
  tmp_1j = _mm_mul_pd(tmp_1p, tmp_1k);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[55], _mm_mul_pd(_mm_mul_pd(tmp_1j, tmp_9),
    tmp_0));
  tmp_1x = _mm_loadu_pd(&in4[9]);
  tmp_1i = _mm_mul_pd(_mm_mul_pd(_mm_loadu_pd(&in4[4]), tmp_d), tmp_1x);
  _mm_storeu_pd(&proc_control_B.in4[57], _mm_mul_pd(_mm_mul_pd(tmp_1i, tmp_9),
    tmp_0));
  proc_control_B.in4[59] = in4[5] * in4[7] * in4[9] * in4[30] * in4[0];
  tmp_e = _mm_set1_pd(proc_control_B.t48);
  _mm_storeu_pd(&proc_control_B.in4[60], _mm_mul_pd(tmp_1c, tmp_e));
  proc_control_B.in4_tmp_a = in4[4] * in4[6];
  proc_control_B.in4[62] = proc_control_B.in4_tmp_a * in4[11] *
    proc_control_B.t48;
  proc_control_B.in4[63] = in4[5] * in1[12];
  _mm_storeu_pd(&proc_control_B.in4[64], _mm_mul_pd(tmp_1i, tmp_e));
  tmp_g = _mm_set_pd(proc_control_B.t49, proc_control_B.t48);
  tmp_h = _mm_set_pd(in4[3], in4[5]);
  tmp_i = _mm_set_pd(in4[11], in4[9]);
  tmp_14 = _mm_set1_pd(in4[7]);
  _mm_storeu_pd(&proc_control_B.in4[66], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_h,
    tmp_14), tmp_i), tmp_g));
  tmp_f = _mm_set1_pd(proc_control_B.t49);
  _mm_storeu_pd(&proc_control_B.in4[68], _mm_mul_pd(tmp_1j, tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[70], _mm_mul_pd(tmp_1i, tmp_f));
  tmp_1j = _mm_set_pd(proc_control_B.t48, proc_control_B.t49);
  tmp_1i = _mm_set_pd(in4[11], in4[7]);
  _mm_storeu_pd(&proc_control_B.in4[72], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(in4[7], in4[5]), tmp_1i), _mm_set_pd(in4[33], in4[9])), tmp_1j));
  proc_control_B.in4[74] = in4[8] * in1[12];
  tmp_n = _mm_set_pd(in4[7], in4[8]);
  tmp_1r = _mm_mul_pd(tmp_n, tmp_1k);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[75], _mm_mul_pd(_mm_mul_pd(tmp_1r, tmp_7),
    tmp_g));
  tmp_o = _mm_set_pd(in4[3], in4[8]);
  tmp_1s = _mm_loadu_pd(&in4[33]);
  tmp_1t = _mm_mul_pd(_mm_mul_pd(tmp_o, tmp_1k), tmp_1s);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[77], _mm_mul_pd(tmp_1t, tmp_1j));
  tmp_l = _mm_mul_pd(tmp_h, tmp_i);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[79], _mm_mul_pd(_mm_mul_pd(tmp_l, tmp_1e),
    tmp_g));
  tmp_v = _mm_mul_pd(tmp_h, _mm_set_pd(in4[7], in4[9]));
  tmp_v = _mm_mul_pd(tmp_v, tmp_1l);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[81], _mm_mul_pd(tmp_v, tmp_1j));
  tmp_j = _mm_set_pd(in4[3], in4[4]);
  tmp_1n = _mm_mul_pd(tmp_j, tmp_1m);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[83], _mm_mul_pd(_mm_mul_pd(tmp_1n, tmp_c),
    tmp_g));
  proc_control_B.in4[85] = in4[11] * in1[12];
  tmp_t = _mm_set_pd(in4[34], in4[35]);
  tmp_w = _mm_mul_pd(_mm_mul_pd(_mm_set_pd(in4[11], in4[4]), _mm_set_pd(in4[33],
    in4[6])), tmp_t);
  _mm_storeu_pd(&proc_control_B.in4[86], _mm_mul_pd(tmp_w, tmp_1j));
  _mm_storeu_pd(&proc_control_B.in4[88], _mm_mul_pd(tmp_1f, tmp_1j));
  tmp_1f = _mm_set_pd(in4[12], in4[35]);
  tmp_x = _mm_set_pd(in4[3], in4[7]);
  tmp_1a = _mm_set_pd(in4[7], in4[33]);
  _mm_storeu_pd(&proc_control_B.in4[90], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_x,
    tmp_1a), tmp_1f), tmp_f));
  tmp_1n = _mm_mul_pd(tmp_1n, tmp_1o);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[92], _mm_mul_pd(tmp_1n, tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[94], _mm_mul_pd(_mm_mul_pd(tmp_1p, tmp_1o),
    tmp_f));
  tmp_1p = _mm_set_pd(in4[4], in4[5]);
  _mm_storeu_pd(&proc_control_B.in4[96], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_1p,
    tmp_k), tmp_1o), tmp_f));
  tmp_k = _mm_set_pd(in4[12], in4[13]);
  tmp_10 = _mm_mul_pd(tmp_h, _mm_set_pd(in4[10], in4[7]));
  _mm_storeu_pd(&proc_control_B.in4[98], _mm_mul_pd(_mm_mul_pd(tmp_10, tmp_k),
    tmp_f));
  tmp_p = _mm_set1_pd(in4[12]);
  _mm_storeu_pd(&proc_control_B.in4[100], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_j,
    tmp_i), tmp_p), tmp_f));
  tmp_l = _mm_mul_pd(tmp_l, tmp_m);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[102], _mm_mul_pd(tmp_l, tmp_f));
  tmp_r = _mm_set1_pd(in4[14]);
  tmp_1p = _mm_mul_pd(_mm_mul_pd(tmp_1p, tmp_i), tmp_r);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[104], _mm_mul_pd(tmp_1p, tmp_f));
  tmp_s = _mm_set_pd(in4[13], in4[14]);
  tmp_12 = _mm_set1_pd(in4[10]);
  tmp_1w = _mm_loadu_pd(&in4[5]);
  tmp_12 = _mm_mul_pd(tmp_1w, tmp_12);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[106], _mm_mul_pd(_mm_mul_pd(tmp_12, tmp_s),
    tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[108], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_b,
    tmp_i), tmp_1q), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[110], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, tmp_8), tmp_1q), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[112], _mm_mul_pd(_mm_mul_pd(tmp_1r, tmp_1q),
    tmp_f));
  tmp_b = _mm_set_pd(in4[35], in4[14]);
  _mm_storeu_pd(&proc_control_B.in4[114], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_o,
    _mm_set_pd(in4[34], in4[10])), tmp_b), tmp_1j));
  tmp_1r = _mm_set_pd(in4[33], in4[34]);
  tmp_z = _mm_set_pd(in4[7], in4[3]);
  _mm_storeu_pd(&proc_control_B.in4[116], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_z,
    tmp_1r), tmp_1f), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[118], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, tmp_7), tmp_k), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[120], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1k, tmp_7), tmp_p), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[122], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(in4[33], in4[11]), tmp_1s), tmp_b), tmp_1j));
  tmp_b = _mm_set_pd(in4[3], in4[33]);
  _mm_storeu_pd(&proc_control_B.in4[124], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_b,
    tmp_1e), tmp_1f), tmp_f));
  tmp_1d = _mm_set1_pd(in4[13]);
  tmp_16 = _mm_mul_pd(_mm_mul_pd(tmp_q, tmp_1e), tmp_1d);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[126], _mm_mul_pd(tmp_16, tmp_f));
  tmp_17 = _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_1e), tmp_1d);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[128], _mm_mul_pd(tmp_17, tmp_f));
  tmp_u = _mm_set_pd(in4[12], in4[14]);
  tmp_15 = _mm_set_pd(in4[3], in4[11]);
  _mm_storeu_pd(&proc_control_B.in4[130], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_15, tmp_1l), tmp_u), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[132], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1h, tmp_c), tmp_r), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[134], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1m, tmp_c), tmp_s), tmp_f));
  tmp_18 = _mm_set_pd(in4[33], in4[7]);
  _mm_storeu_pd(&proc_control_B.in4[136], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_18, tmp_t), tmp_u), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[138], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_7,
    tmp_1l), tmp_k), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[140], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1s, tmp_c), tmp_s), tmp_f));
  proc_control_B.in4_tmp_k = in4[34] * in4[35] * in4[14];
  proc_control_B.in4[142] = proc_control_B.in4_tmp_k * proc_control_B.t49;
  proc_control_B.in4[143] = proc_control_B.t22;
  _mm_storeu_pd(&proc_control_B.in4[144], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1c, tmp_9), tmp), tmp_4));
  _mm_storeu_pd(&proc_control_B.in4[146], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_3,
    tmp_9), tmp), tmp_4));
  _mm_storeu_pd(&proc_control_B.in4[148], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_5,
    tmp_9), tmp), tmp_4));
  proc_control_B.in4[150] = proc_control_B.in4_tmp * in4[30] * in4[31] * in4[32];
  proc_control_B.in4[151] = proc_control_B.t23;
  _mm_storeu_pd(&proc_control_B.in4[152], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1t, tmp_9), tmp), tmp_4));
  _mm_storeu_pd(&proc_control_B.in4[154], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_v,
    tmp_9), tmp), tmp_4));
  _mm_storeu_pd(&proc_control_B.in4[156], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_w,
    tmp_9), tmp), tmp_4));
  _mm_storeu_pd(&proc_control_B.in4[158], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_x, tmp_1s), tmp_c), tmp_9), tmp), tmp_4));
  proc_control_B.in4[160] = proc_control_B.in4_tmp_n * in4[30] * in4[31] * in4
    [32];
  tmp_3 = _mm_set_pd(proc_control_B.t84, proc_control_B.t83);
  _mm_storeu_pd(&proc_control_B.in4[161], _mm_mul_pd(tmp_9, tmp_3));
  tmp_5 = _mm_set_pd(proc_control_B.t86, proc_control_B.t85);
  _mm_storeu_pd(&proc_control_B.in4[163], _mm_mul_pd(tmp_9, tmp_5));
  tmp_v = _mm_set_pd(proc_control_B.t88, proc_control_B.t87);
  _mm_storeu_pd(&proc_control_B.in4[165], _mm_mul_pd(tmp_9, tmp_v));
  _mm_storeu_pd(&proc_control_B.in4[167], _mm_mul_pd(tmp_9, _mm_set_pd
    (proc_control_B.t90, proc_control_B.t89)));
  _mm_storeu_pd(&proc_control_B.in4[169], _mm_mul_pd(tmp_9, _mm_set_pd
    (proc_control_B.t92, proc_control_B.t91)));
  _mm_storeu_pd(&proc_control_B.in4[171], _mm_mul_pd(tmp_9, _mm_set_pd
    (proc_control_B.t94, proc_control_B.t93)));
  _mm_storeu_pd(&proc_control_B.in4[173], _mm_mul_pd(tmp_4, tmp_3));
  _mm_storeu_pd(&proc_control_B.in4[175], _mm_mul_pd(tmp_4, tmp_5));
  _mm_storeu_pd(&proc_control_B.in4[177], _mm_mul_pd(tmp_4, tmp_v));
  tmp_3 = _mm_set_pd(proc_control_B.t96, proc_control_B.t95);
  _mm_storeu_pd(&proc_control_B.in4[179], _mm_mul_pd(tmp, tmp_3));
  _mm_storeu_pd(&proc_control_B.in4[181], _mm_mul_pd(tmp_4, tmp_3));
  tmp_3 = _mm_set_pd(proc_control_B.t100, proc_control_B.t99);
  _mm_storeu_pd(&proc_control_B.in4[183], _mm_mul_pd(tmp, tmp_3));
  _mm_storeu_pd(&proc_control_B.in4[185], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t98, proc_control_B.t97)));
  _mm_storeu_pd(&proc_control_B.in4[187], _mm_mul_pd(tmp, _mm_set_pd
    (proc_control_B.t104, proc_control_B.t103)));
  _mm_storeu_pd(&proc_control_B.in4[189], _mm_mul_pd(tmp_4, tmp_3));
  proc_control_B.in4[191] = in4[32] * proc_control_B.t103;
  proc_control_B.in4[192] = proc_control_B.t27;
  _mm_storeu_pd(&proc_control_B.in4[193], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t105, proc_control_B.t104)));
  tmp_3 = _mm_set_pd(in4[31], in4[32]);
  _mm_storeu_pd(&proc_control_B.in4[195], _mm_mul_pd(tmp_3, _mm_set_pd
    (proc_control_B.t111, proc_control_B.t106)));
  _mm_storeu_pd(&proc_control_B.in4[197], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t108, proc_control_B.t107)));
  tmp_1c = _mm_loadu_pd(&in4[31]);
  _mm_storeu_pd(&proc_control_B.in4[199], _mm_mul_pd(tmp_1c, _mm_set_pd
    (proc_control_B.t111, proc_control_B.t114)));
  _mm_storeu_pd(&proc_control_B.in4[201], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t115, proc_control_B.t114)));
  tmp_5 = _mm_mul_pd(_mm_mul_pd(tmp_y, tmp_p), tmp_9);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[203], _mm_mul_pd(_mm_mul_pd(tmp_5, tmp),
    tmp_0));
  tmp_1t = _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_1d), tmp_9);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[205], _mm_mul_pd(_mm_mul_pd(tmp_1t, tmp),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in4[207], _mm_mul_pd(tmp_1c, _mm_set_pd
    (proc_control_B.t116, proc_control_B.t118)));
  tmp_1v = _mm_mul_pd(_mm_mul_pd(tmp_1u, tmp_p), tmp_9);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[209], _mm_mul_pd(_mm_mul_pd(tmp_1v, tmp_4),
    tmp_0));
  tmp_2 = _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_r), tmp_9);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[211], _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_4),
    tmp_0));
  proc_control_B.in4[213] = proc_control_B.t29;
  proc_control_B.in4[214] = in4[32] * proc_control_B.t118;
  _mm_storeu_pd(&proc_control_B.in4[215], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1u, tmp_1d), tmp), tmp_4), tmp_0));
  _mm_storeu_pd(&proc_control_B.in4[217], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_y, tmp_r), tmp), tmp_4), tmp_0));
  proc_control_B.in4_tmp = in4[11] * in4[33];
  proc_control_B.in4_tmp_n = proc_control_B.in4_tmp * in4[12] * in4[30];
  proc_control_B.in4[219] = proc_control_B.in4_tmp_n * in4[31] * in4[0];
  _mm_storeu_pd(&proc_control_B.in4[220], _mm_mul_pd(tmp_3, _mm_set_pd
    (proc_control_B.dv43[0], proc_control_B.t120)));
  proc_control_B.t103 = in4[7] * in4[33];
  proc_control_B.in4[222] = proc_control_B.t103 * in4[12] * in4[30] * in4[32] *
    in4[0];
  proc_control_B.in4[223] = proc_control_B.dv43[0] * in4[32];
  _mm_storeu_pd(&proc_control_B.in4[224], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_a, tmp_1r), tmp_1d), tmp_1g), tmp_1c), tmp_0));
  proc_control_B.in4[226] = proc_control_B.in4_tmp * in4[14] * in4[31] * in4[32]
    * in4[0];
  proc_control_B.in4[227] = proc_control_B.dv43[1] * in4[32];
  tmp_1 = _mm_mul_pd(tmp_1, tmp_1l);
  tmp_1u = _mm_mul_pd(tmp_1, tmp_p);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[228], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1u, tmp_9), tmp_3), tmp_0));
  tmp_y = _mm_mul_pd(tmp_1i, tmp_t);
  tmp_y = _mm_mul_pd(tmp_y, tmp_1q);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[230], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_y,
    tmp_9), tmp_1c), tmp_0));
  tmp_a = _mm_set_pd(in4[30], in4[31]);
  _mm_storeu_pd(&proc_control_B.in4[232], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_z, tmp_1l), tmp_1q), tmp_a), tmp_4), tmp_0));
  _mm_storeu_pd(&proc_control_B.in4[234], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(in4[33], in4[3]), tmp_t), tmp_u), tmp_a),
    tmp_4), tmp_0));
  tmp_v = _mm_mul_pd(tmp_7, tmp_t);
  tmp_v = _mm_mul_pd(tmp_v, tmp_1o);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[236], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_v,
    tmp_1g), tmp_1c), tmp_0));
  tmp_w = _mm_mul_pd(tmp_1r, tmp_c);

  // Start for MATLABSystem: '<S226>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in4[238], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_w, tmp_1q), tmp_1g), tmp_1c), tmp_0));
  proc_control_B.in4[240] = proc_control_B.in4_tmp_k * in4[30] * in4[32] * in4[0];
  proc_control_B.in4[241] = proc_control_B.t20_d + proc_control_B.t24_j;
  proc_control_B.in4[242] = proc_control_B.t20_d + proc_control_B.t28;
  proc_control_B.in4[243] = proc_control_B.t24_j + proc_control_B.t28;
  proc_control_B.in4[244] = proc_control_B.t30 + proc_control_B.t31;
  proc_control_B.in4[245] = -proc_control_B.t83;
  proc_control_B.in4[246] = -proc_control_B.t86;
  proc_control_B.in4[247] = -proc_control_B.t87;
  proc_control_B.in4[248] = in1[7] * in4[30];
  proc_control_B.in4[249] = -proc_control_B.t89;
  proc_control_B.in4[250] = -proc_control_B.t92;
  proc_control_B.in4[251] = -proc_control_B.t93;
  proc_control_B.in4[252] = -proc_control_B.t96;
  proc_control_B.in4[253] = -proc_control_B.t98;
  proc_control_B.in4[254] = -proc_control_B.t100;
  proc_control_B.in4[255] = -(in4[8] * in4[10] * in4[33] * in4[32] * in4[0]);
  proc_control_B.in4[256] = -proc_control_B.t104;
  proc_control_B.in4[257] = -proc_control_B.t106;
  proc_control_B.in4[258] = -proc_control_B.t108;
  proc_control_B.in4[259] = in1[8] * in4[31];
  proc_control_B.in4[260] = -(in4[5] * in4[9] * in4[34] * in4[32] * in4[0]);
  proc_control_B.in4[261] = -proc_control_B.t111;
  proc_control_B.in4[262] = -(proc_control_B.in4_tmp_a * in4[35] * in4[32] *
    in4[0]);
  proc_control_B.in4[263] = -proc_control_B.t114;
  proc_control_B.in4[264] = -proc_control_B.t115;
  proc_control_B.in4[265] = -proc_control_B.t116;
  proc_control_B.in4[266] = -(proc_control_B.in4_tmp * in4[34] * in4[32] * in4[0]);
  proc_control_B.in4[267] = -proc_control_B.t118;
  proc_control_B.in4[268] = -(proc_control_B.t103 * in4[35] * in4[32] * in4[0]);
  proc_control_B.in4[269] = -proc_control_B.t120;
  proc_control_B.in4[270] = in1[9] * in4[32];
  proc_control_B.in4[271] = -(in4[3] * in4[34] * in4[35] * in4[32] * in4[0]);
  proc_control_B.in4[272] = proc_control_B.t36;
  proc_control_B.in4[273] = in4[12] * proc_control_B.t40_j * proc_control_B.t51;
  proc_control_B.in4[274] = proc_control_B.t37;
  tmp_0 = _mm_set_pd(proc_control_B.t43_c, proc_control_B.t37);
  tmp_x = _mm_set1_pd(proc_control_B.t51);
  _mm_storeu_pd(&proc_control_B.in4[275], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_0),
    tmp_x));
  _mm_storeu_pd(&proc_control_B.in4[277], _mm_mul_pd(_mm_mul_pd(tmp_s, tmp_0),
    tmp_x));
  proc_control_B.in4[279] = in4[14] * proc_control_B.t40_j * proc_control_B.t51;
  proc_control_B.in4[280] = proc_control_B.t38;
  proc_control_B.in4[281] = proc_control_B.t36 * proc_control_B.t36;
  _mm_storeu_pd(&proc_control_B.in4[282], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1h, _mm_set1_pd(in4[8])), tmp_k), tmp_r), tmp_f));
  proc_control_B.in4[284] = in4[5] * in4[6] * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[285] = proc_control_B.t40_j;
  _mm_storeu_pd(&proc_control_B.in4[286], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_10, tmp_1o), tmp_r), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[288], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_11, tmp_i), tmp_k), tmp_s), tmp_f));
  proc_control_B.in4[290] = proc_control_B.t41_h;
  _mm_storeu_pd(&proc_control_B.in4[291], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_12, tmp_p), tmp_1q), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[293], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1m, tmp_8), tmp_p), tmp_1q), tmp_f));
  proc_control_B.in4[295] = in4[8] * in4[9] * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[296] = proc_control_B.t38 * proc_control_B.t38;
  proc_control_B.in4[297] = proc_control_B.t43_c;
  tmp_0 = _mm_mul_pd(_mm_set_pd(in4[10], in4[8]), tmp_7);
  _mm_storeu_pd(&proc_control_B.in4[298], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_0,
    tmp_1d), tmp_r), tmp_f));
  proc_control_B.in4[300] = proc_control_B.t41_h * proc_control_B.t41_h;
  _mm_storeu_pd(&proc_control_B.in4[301], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in4[9], in4[5]), tmp_1e), tmp_p), tmp_r), tmp_f));
  tmp_8 = _mm_mul_pd(_mm_set_pd(in4[6], in4[4]), tmp_c);
  _mm_storeu_pd(&proc_control_B.in4[303], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_8,
    tmp_p), tmp_1d), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[305], _mm_mul_pd(tmp_1v, tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[307], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_q, tmp_d), tmp_p), tmp_9), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[309], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1h, tmp_6), tmp_p), tmp_9), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[311], _mm_mul_pd(tmp_5, tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[313], _mm_mul_pd(tmp_1t, tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[315], _mm_mul_pd(tmp_2, tmp_e));
  proc_control_B.in4[317] = proc_control_B.in4_tmp_f * in4[13] * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[318] = proc_control_B.t48;
  _mm_storeu_pd(&proc_control_B.in4[319], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_13, tmp_1d), tmp), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[321], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_h, tmp_1i), tmp_k), tmp), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[323], _mm_mul_pd(_mm_mul_pd(tmp_l, tmp),
    tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[325], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1w, tmp_1x), tmp_s), tmp), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[327], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_14, tmp_i), tmp_1d), tmp), tmp_e));
  proc_control_B.in4[329] = proc_control_B.t49;
  _mm_storeu_pd(&proc_control_B.in4[330], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_o, _mm_set_pd(in4[7], in4[10])), tmp_k), tmp_1c), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[332], _mm_mul_pd(_mm_mul_pd(tmp_1n, tmp_4),
    tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[334], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_j, _mm_set_pd(in4[11], in4[6])), tmp_1q), tmp_4), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[336], _mm_mul_pd(_mm_mul_pd(tmp_1p, tmp_4),
    tmp_e));
  proc_control_B.in4[338] = proc_control_B.t48 * proc_control_B.t48;
  _mm_storeu_pd(&proc_control_B.in4[339], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1w, tmp_1k), tmp_r), tmp_4), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[341], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_n, tmp_i), tmp_r), tmp_4), tmp_e));
  tmp_2 = _mm_set_pd(in4[30], in4[32]);
  _mm_storeu_pd(&proc_control_B.in4[343], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_n, _mm_set_pd(in4[33], in4[10])), tmp_u), tmp_2), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[345], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_0,
    tmp_p), tmp_9), tmp_e));
  proc_control_B.in4[347] = proc_control_B.in4_tmp_n * proc_control_B.t48;
  proc_control_B.in4[348] = proc_control_B.t51;
  proc_control_B.in4[349] = in1[4] * in1[5] * 2.0;
  _mm_storeu_pd(&proc_control_B.in4[350], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_7), tmp_k), tmp), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[352], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp_1s), tmp_u), tmp_a), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[354], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(in4[11]), tmp_1e), tmp_1q), tmp_9), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[356], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_14, tmp_7), tmp_1o), tmp_4), tmp_e));
  proc_control_B.in4[358] = proc_control_B.t29 * 2.0;
  tmp_0 = _mm_set_pd(in4[35], in4[33]);
  _mm_storeu_pd(&proc_control_B.in4[359], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp_0), tmp_u), tmp_2), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[361], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp),
    tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[363], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_14, tmp_c), tmp_1q), tmp_9), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[365], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp),
    tmp_e));
  proc_control_B.in4[367] = proc_control_B.t30 * 2.0;
  _mm_storeu_pd(&proc_control_B.in4[368], _mm_mul_pd(_mm_mul_pd(tmp_1u, tmp_3),
    tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[370], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_1,
    tmp_1q), tmp_3), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[372], _mm_mul_pd(_mm_mul_pd(tmp_y, tmp_1c),
    tmp_e));
  tmp_1 = _mm_set_pd(in4[32], in4[30]);
  _mm_storeu_pd(&proc_control_B.in4[374], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_b, tmp_1l), tmp_m), tmp_1), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[376], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_8,
    tmp_r), tmp_4), tmp_e));
  proc_control_B.in4[378] = proc_control_B.t31 * 2.0;
  _mm_storeu_pd(&proc_control_B.in4[379], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_18, tmp_c), tmp_u), tmp_2), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[381], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_19, tmp_k), tmp_1c), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[383], _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_1c),
    tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[385], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1a, tmp_1f), tmp_r), tmp_a), tmp_g));
  proc_control_B.in4[387] = proc_control_B.t32_f * 2.0;
  tmp_m = _mm_set_pd(in4[35], in4[12]);
  _mm_storeu_pd(&proc_control_B.in4[388], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in4[34], in4[11]), tmp_m), tmp_1d), tmp_9), tmp_1j));
  _mm_storeu_pd(&proc_control_B.in4[390], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_w,
    tmp_r), tmp_1), tmp_e));
  _mm_storeu_pd(&proc_control_B.in4[392], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in4[11], in4[3]), tmp_k), tmp_s), tmp), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[394], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in4[3], in4[34]), _mm_set_pd(in4[13], in4[35])),
     tmp_1q), tmp_1c), tmp_g));
  _mm_storeu_pd(&proc_control_B.in4[396], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in4[34], in4[7]), tmp_m), tmp_r), tmp_4), tmp_1j));
  proc_control_B.in4[398] = in1[3] * in1[6] * 2.0;
  _mm_storeu_pd(&proc_control_B.in4[399], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, tmp_1s), tmp_r), tmp_a), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[401], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, tmp_0), tmp_s), tmp_2), tmp_f));
  _mm_storeu_pd(&proc_control_B.in4[403], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_p, tmp_t), tmp_1q), tmp_1c), tmp_f));
  proc_control_B.in4[405] = in4[27] * fabs(in1[10]);
  proc_control_B.in4[406] = -(proc_control_B.in4_tmp_f * in4[11] * in4[30] *
    in4[0]);
  _mm_storeu_pd(&proc_control_B.in4[407], _mm_mul_pd(_mm_loadu_pd(&in4[28]),
    _mm_set_pd(fabs(in1[12]), fabs(in1[11]))));
  _mm_storeu_pd(&proc_control_B.in4[409], _mm_mul_pd(_mm_loadu_pd(&in4[24]),
    _mm_set_pd(fabs(in1[8]), fabs(in1[7]))));
  proc_control_B.in4[411] = in4[26] * fabs(in1[9]);
  proc_control_B.in4[412] = -in2[2];
  proc_control_B.in4[413] = 1.0 / in4[2];
  proc_control_B.in4[414] = -in1[2];
  proc_control_B.in4[415] = -(in1[10] * in4[33]);
  proc_control_B.in4[416] = -(in1[11] * in4[34]);
  proc_control_B.in4[417] = -(in1[12] * in4[35]);
  proc_control_B.in4[418] = -proc_control_B.t22;
  proc_control_B.in4[419] = -proc_control_B.t23;
  proc_control_B.in4[420] = -proc_control_B.t27;
  tmp_m = _mm_set1_pd(2.0);
  _mm_storeu_pd(&proc_control_B.in4[421], _mm_mul_pd(_mm_mul_pd(tmp_1b, tmp_1b),
    tmp_m));
  proc_control_B.in4[423] = in1[6] * in1[6] * 2.0;
  proc_control_B.in4[424] = -proc_control_B.t32_f;
  _mm_storeu_pd(&proc_control_B.in4[425], _mm_div_pd(_mm_set_pd(in4[1], in4[2]),
    tmp_m));
  proc_control_B.in4[427] = in4[3] * in1[10];
  _mm_storeu_pd(&proc_control_B.in4[428], _mm_add_pd(_mm_mul_pd(_mm_set_pd(in1
    [10], in1[11]), tmp_s), _mm_set_pd(in1[9], in1[7])));
  proc_control_B.in4[430] = in4[12] * in1[12] + in1[8];
  proc_control_B.in4[431] = proc_control_B.t84;
  proc_control_B.in4[432] = proc_control_B.t85;
  proc_control_B.in4[433] = proc_control_B.t88;
  proc_control_B.in4[434] = in4[6] * in1[10];
  proc_control_B.in4[435] = proc_control_B.t90;
  proc_control_B.in4[436] = proc_control_B.t91;
  proc_control_B.in4[437] = proc_control_B.t94;
  proc_control_B.in4[438] = proc_control_B.t95;
  proc_control_B.in4[439] = proc_control_B.t97;
  proc_control_B.in4[440] = proc_control_B.t99;
  proc_control_B.in4[441] = in1[7];
  proc_control_B.in4[442] = in1[8];
  proc_control_B.in4[443] = in4[1];
  proc_control_B.in4[444] = in1[9];
  proc_control_ft_1_pr(proc_control_B.in4, out1);
}

void proc_control::proc_control_EkfNavStatesEq(real_T x[13], const real_T
  inputs[95])
{
  __m128d tmp;
  __m128d tmp_0;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  //  Split u vector and constMec from inputs
  //  Crée la matrice thrusters
  proc_control_B.b_i_c = 0;
  for (proc_control_B.i23 = 0; proc_control_B.i23 < 6; proc_control_B.i23++) {
    proc_control_B.T_a[proc_control_B.b_i_c] = inputs[proc_control_B.i23 + 47];
    proc_control_B.T_a[proc_control_B.b_i_c + 1] = inputs[proc_control_B.i23 +
      53];
    proc_control_B.T_a[proc_control_B.b_i_c + 2] = inputs[proc_control_B.i23 +
      59];
    proc_control_B.T_a[proc_control_B.b_i_c + 3] = inputs[proc_control_B.i23 +
      65];
    proc_control_B.T_a[proc_control_B.b_i_c + 4] = inputs[proc_control_B.i23 +
      71];
    proc_control_B.T_a[proc_control_B.b_i_c + 5] = inputs[proc_control_B.i23 +
      77];
    proc_control_B.T_a[proc_control_B.b_i_c + 6] = inputs[proc_control_B.i23 +
      83];
    proc_control_B.T_a[proc_control_B.b_i_c + 7] = inputs[proc_control_B.i23 +
      89];
    proc_control_B.b_i_c += 8;
  }

  proc_control_B.t15_g = inputs[21];
  proc_control_B.t14_l = inputs[22];
  proc_control_B.inputs_d = inputs[23];
  proc_control_B.b_i_c = 0;
  for (proc_control_B.b_i_o = 0; proc_control_B.b_i_o < 8; proc_control_B.b_i_o
       ++) {
    proc_control_B.qt_idx_0 = proc_control_B.T_a[proc_control_B.b_i_o + 24] *
      0.017453292519943295 / 2.0;
    proc_control_B.s_idx_0 = proc_control_B.qt_idx_0;
    proc_control_B.c_idx_0 = proc_control_B.qt_idx_0;
    proc_control_B.qt_idx_0 = proc_control_B.T_a[proc_control_B.b_i_o + 32] *
      0.017453292519943295 / 2.0;
    proc_control_B.s_idx_1 = proc_control_B.qt_idx_0;
    proc_control_B.c_idx_1 = proc_control_B.qt_idx_0;
    proc_control_B.qt_idx_0 = proc_control_B.T_a[proc_control_B.b_i_o + 40] *
      0.017453292519943295 / 2.0;
    proc_control_B.c_idx_0 = cos(proc_control_B.c_idx_0);
    proc_control_B.s_idx_0 = sin(proc_control_B.s_idx_0);
    proc_control_B.c_idx_1 = cos(proc_control_B.c_idx_1);
    proc_control_B.s_idx_1 = sin(proc_control_B.s_idx_1);
    proc_control_B.c_idx_2 = cos(proc_control_B.qt_idx_0);
    proc_control_B.s_idx_2 = sin(proc_control_B.qt_idx_0);
    proc_control_B.qt_idx_1 = proc_control_B.c_idx_0 * proc_control_B.c_idx_1;
    proc_control_B.qt_idx_0_tmp = proc_control_B.s_idx_0 *
      proc_control_B.s_idx_1;
    proc_control_B.qt_idx_0 = proc_control_B.qt_idx_1 * proc_control_B.c_idx_2 +
      proc_control_B.qt_idx_0_tmp * proc_control_B.s_idx_2;
    proc_control_B.qt_idx_1 = proc_control_B.qt_idx_1 * proc_control_B.s_idx_2 -
      proc_control_B.qt_idx_0_tmp * proc_control_B.c_idx_2;
    proc_control_B.s_idx_0 *= proc_control_B.c_idx_1;
    proc_control_B.s_idx_1 *= proc_control_B.c_idx_0;
    proc_control_B.c_idx_0 = proc_control_B.s_idx_1 * proc_control_B.c_idx_2 +
      proc_control_B.s_idx_0 * proc_control_B.s_idx_2;
    proc_control_B.s_idx_0 = proc_control_B.s_idx_0 * proc_control_B.c_idx_2 -
      proc_control_B.s_idx_1 * proc_control_B.s_idx_2;

    //  convertir les angle d'euler en quaternion
    // ThrusterVector
    //     Tt = ThrusterVector(IN1,IN2,IN3)
    //     This function was generated by the Symbolic Math Toolbox version 9.1. 
    //     12-Jul-2022 16:58:54
    proc_control_B.c_idx_2 = proc_control_B.c_idx_0 * proc_control_B.s_idx_0 *
      2.0;
    proc_control_B.s_idx_2 = proc_control_B.qt_idx_0 * proc_control_B.qt_idx_1 *
      2.0;
    _mm_storeu_pd(&proc_control_B.dv42[0], _mm_sub_pd(_mm_set_pd
      (proc_control_B.t14_l, proc_control_B.t15_g), _mm_set_pd
      (proc_control_B.T_a[proc_control_B.b_i_o + 8],
       proc_control_B.T_a[proc_control_B.b_i_o])));
    proc_control_B.s_idx_1 = proc_control_B.inputs_d -
      proc_control_B.T_a[proc_control_B.b_i_o + 16];
    proc_control_B.qt_idx_0 = proc_control_B.qt_idx_1 * proc_control_B.s_idx_0 *
      2.0 + proc_control_B.qt_idx_0 * proc_control_B.c_idx_0 * 2.0;
    proc_control_B.s_idx_0 = proc_control_B.c_idx_2 - proc_control_B.s_idx_2;
    proc_control_B.qt_idx_1 = (proc_control_B.qt_idx_1 * proc_control_B.qt_idx_1
      * 2.0 + proc_control_B.c_idx_0 * proc_control_B.c_idx_0 * 2.0) - 1.0;
    proc_control_B.Tm_g[proc_control_B.b_i_c] = -proc_control_B.qt_idx_0;
    proc_control_B.Tm_g[proc_control_B.b_i_c + 1] = -proc_control_B.c_idx_2 +
      proc_control_B.s_idx_2;
    proc_control_B.Tm_g[proc_control_B.b_i_c + 2] = proc_control_B.qt_idx_1;
    proc_control_B.Tm_g[proc_control_B.b_i_c + 3] = -proc_control_B.dv42[1] *
      proc_control_B.qt_idx_1 - proc_control_B.s_idx_1 * proc_control_B.s_idx_0;
    proc_control_B.Tm_g[proc_control_B.b_i_c + 4] = proc_control_B.dv42[0] *
      proc_control_B.qt_idx_1 + proc_control_B.s_idx_1 * proc_control_B.qt_idx_0;
    proc_control_B.Tm_g[proc_control_B.b_i_c + 5] = proc_control_B.dv42[0] *
      proc_control_B.s_idx_0 - proc_control_B.dv42[1] * proc_control_B.qt_idx_0;

    //  Calculer le vecteur thrusters
    proc_control_B.b_i_c += 6;
  }

  //  prendre la matrice M
  // AUVModelMatrices
  //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     12-Jul-2022 16:58:53
  _mm_storeu_pd(&proc_control_B.dv42[0], _mm_mul_pd(_mm_set1_pd(inputs[9]),
    _mm_loadu_pd(&inputs[21])));
  proc_control_B.t15_g = inputs[9] * inputs[23];

  //  M inverse * Tm
  proc_control_B.inputs[0] = -inputs[39] + inputs[9];
  proc_control_B.inputs[1] = 0.0;
  proc_control_B.inputs[2] = 0.0;
  proc_control_B.inputs[3] = 0.0;
  proc_control_B.inputs[4] = proc_control_B.t15_g;
  proc_control_B.inputs[5] = -proc_control_B.dv42[1];
  proc_control_B.inputs[6] = 0.0;
  proc_control_B.inputs[7] = -inputs[40] + inputs[9];
  proc_control_B.inputs[8] = 0.0;
  proc_control_B.inputs[9] = -proc_control_B.t15_g;
  proc_control_B.inputs[10] = 0.0;
  proc_control_B.inputs[11] = proc_control_B.dv42[0];
  proc_control_B.inputs[12] = 0.0;
  proc_control_B.inputs[13] = 0.0;
  proc_control_B.inputs[14] = -inputs[41] + inputs[9];
  proc_control_B.inputs[15] = proc_control_B.dv42[1];
  proc_control_B.inputs[16] = -proc_control_B.dv42[0];
  proc_control_B.inputs[17] = 0.0;
  proc_control_B.inputs[18] = 0.0;
  proc_control_B.inputs[19] = -proc_control_B.t15_g;
  proc_control_B.inputs[20] = proc_control_B.dv42[1];
  proc_control_B.inputs[21] = inputs[12] - inputs[42];
  proc_control_B.inputs[22] = inputs[15];
  proc_control_B.inputs[23] = inputs[18];
  proc_control_B.inputs[24] = proc_control_B.t15_g;
  proc_control_B.inputs[25] = 0.0;
  proc_control_B.inputs[26] = -proc_control_B.dv42[0];
  proc_control_B.inputs[27] = inputs[13];
  proc_control_B.inputs[28] = inputs[16] - inputs[43];
  proc_control_B.inputs[29] = inputs[19];
  proc_control_B.inputs[30] = -proc_control_B.dv42[1];
  proc_control_B.inputs[31] = proc_control_B.dv42[0];
  proc_control_B.inputs[32] = 0.0;
  proc_control_B.inputs[33] = inputs[14];
  proc_control_B.inputs[34] = inputs[17];
  proc_control_B.inputs[35] = inputs[20] - inputs[44];
  proc_control_mldivide_pr351(proc_control_B.inputs, proc_control_B.Tm_g);
  for (proc_control_B.b_i_c = 0; proc_control_B.b_i_c < 8; proc_control_B.b_i_c
       ++) {
    for (proc_control_B.i23 = 0; proc_control_B.i23 < 7; proc_control_B.i23++) {
      proc_control_B.Bc_i[proc_control_B.i23 + 13 * proc_control_B.b_i_c] = 0.0;
    }

    for (proc_control_B.i23 = 0; proc_control_B.i23 < 6; proc_control_B.i23++) {
      proc_control_B.Bc_i[(proc_control_B.i23 + 13 * proc_control_B.b_i_c) + 7] =
        proc_control_B.Tm_g[6 * proc_control_B.b_i_c + proc_control_B.i23];
    }
  }

  //  Préparer estimation
  for (proc_control_B.b_i_c = 0; proc_control_B.b_i_c < 6; proc_control_B.b_i_c
       ++) {
    proc_control_B.dv19[proc_control_B.b_i_c] = 0.0;
  }

  for (proc_control_B.b_i_o = 0; proc_control_B.b_i_o < 2; proc_control_B.b_i_o
       ++) {
    //      % X(k+1) = A(xk)*xk + B*xk
    //      x_dot_k =  AUVQuatPerturbedSimFcn(xk,zeros(6,1),constValues) + Bc*u.' ; 
    //      % Intégration trapezoidale
    //      xk = xk + ((x_dot_k + x_dot_kk)*(Ts))/2;
    //      x_dot_kk = x_dot_k;
    proc_con_AUVQuatPerturbedSimFcn(x, proc_control_B.dv19, &inputs[9],
      proc_control_B.dv14);
    for (proc_control_B.b_i_c = 0; proc_control_B.b_i_c < 13;
         proc_control_B.b_i_c++) {
      proc_control_B.t15_g = 0.0;
      proc_control_B.i23 = 0;
      for (proc_control_B.i24 = 0; proc_control_B.i24 < 8; proc_control_B.i24++)
      {
        proc_control_B.t15_g += proc_control_B.Bc_i[proc_control_B.i23 +
          proc_control_B.b_i_c] * inputs[proc_control_B.i24 + 1];
        proc_control_B.i23 += 13;
      }

      x[proc_control_B.b_i_c] += (proc_control_B.dv14[proc_control_B.b_i_c] +
        proc_control_B.t15_g) * 0.01;
    }

    //  correct Quaternion
    // =================================================================
    //  Fonction qui normalise un quaternion.
    //  quatnormalize de matlab demande areospace block set pour etre compilable. 
    //  Fossen(2021) eq 2.86 p.37
    proc_control_B.t15_g = 3.3121686421112381E-170;
    proc_control_B.c_idx_2 = fabs(x[3]);
    if (proc_control_B.c_idx_2 > 3.3121686421112381E-170) {
      proc_control_B.t14_l = 1.0;
      proc_control_B.t15_g = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / 3.3121686421112381E-170;
      proc_control_B.t14_l = proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.c_idx_2 = fabs(x[4]);
    if (proc_control_B.c_idx_2 > proc_control_B.t15_g) {
      proc_control_B.s_idx_2 = proc_control_B.t15_g / proc_control_B.c_idx_2;
      proc_control_B.t14_l = proc_control_B.t14_l * proc_control_B.s_idx_2 *
        proc_control_B.s_idx_2 + 1.0;
      proc_control_B.t15_g = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / proc_control_B.t15_g;
      proc_control_B.t14_l += proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.c_idx_2 = fabs(x[5]);
    if (proc_control_B.c_idx_2 > proc_control_B.t15_g) {
      proc_control_B.s_idx_2 = proc_control_B.t15_g / proc_control_B.c_idx_2;
      proc_control_B.t14_l = proc_control_B.t14_l * proc_control_B.s_idx_2 *
        proc_control_B.s_idx_2 + 1.0;
      proc_control_B.t15_g = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / proc_control_B.t15_g;
      proc_control_B.t14_l += proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.c_idx_2 = fabs(x[6]);
    if (proc_control_B.c_idx_2 > proc_control_B.t15_g) {
      proc_control_B.s_idx_2 = proc_control_B.t15_g / proc_control_B.c_idx_2;
      proc_control_B.t14_l = proc_control_B.t14_l * proc_control_B.s_idx_2 *
        proc_control_B.s_idx_2 + 1.0;
      proc_control_B.t15_g = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / proc_control_B.t15_g;
      proc_control_B.t14_l += proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    tmp_0 = _mm_set1_pd(proc_control_B.t15_g * sqrt(proc_control_B.t14_l));
    tmp = _mm_div_pd(_mm_loadu_pd(&x[3]), tmp_0);
    _mm_storeu_pd(&x[3], tmp);
    tmp_0 = _mm_div_pd(_mm_loadu_pd(&x[5]), tmp_0);
    _mm_storeu_pd(&x[5], tmp_0);
  }

  // End of Start for MATLABSystem: '<S226>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr351ewp(int32_T n, const real_T x[338],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S226>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr351(const real_T A[338], real_T Q[338],
  real_T R[169])
{
  __m128d tmp;
  real_T b_tau[13];
  real_T work[13];
  real_T b_atmp;
  real_T beta1;
  real_T c_A;
  int32_T exitg1;
  int32_T i;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S226>/MATLAB System'
  memset(&b_tau[0], 0, 13U * sizeof(real_T));
  memcpy(&Q[0], &A[0], 338U * sizeof(real_T));
  memset(&work[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S226>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = itau * 26 + itau;
    ix0 = ii + 2;
    b_atmp = Q[ii];
    b_tau[itau] = 0.0;
    beta1 = proc_control_xnrm2_pr351ewp(25 - itau, Q, ii + 2);
    if (beta1 != 0.0) {
      c_A = Q[ii];
      beta1 = rt_hypotd_snf(c_A, beta1);
      if (c_A >= 0.0) {
        beta1 = -beta1;
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          vectorUB = (((((i - ii) + 25) / 2) << 1) + ii) + 2;
          vectorUB_tmp = vectorUB - 2;
          for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
            tmp = _mm_loadu_pd(&Q[lastv - 1]);
            _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (lastv = vectorUB; lastv <= i + 26; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          beta1 *= 9.9792015476736E+291;
          b_atmp *= 9.9792015476736E+291;
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt + 1 < 20));

        beta1 = rt_hypotd_snf(b_atmp, proc_control_xnrm2_pr351ewp(25 - itau, Q,
          ii + 2));
        if (b_atmp >= 0.0) {
          beta1 = -beta1;
        }

        b_tau[itau] = (beta1 - b_atmp) / beta1;
        b_atmp = 1.0 / (b_atmp - beta1);
        for (lastv = ix0; lastv <= vectorUB_tmp; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = vectorUB; lastv <= i + 26; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          beta1 *= 1.0020841800044864E-292;
        }

        b_atmp = beta1;
      } else {
        b_tau[itau] = (beta1 - c_A) / beta1;
        b_atmp = 1.0 / (c_A - beta1);
        i = ii - itau;
        knt = (((((i - ii) + 25) / 2) << 1) + ii) + 2;
        vectorUB = knt - 2;
        for (lastv = ix0; lastv <= vectorUB; lastv += 2) {
          tmp = _mm_loadu_pd(&Q[lastv - 1]);
          _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(b_atmp)));
        }

        for (lastv = knt; lastv <= i + 26; lastv++) {
          Q[lastv - 1] *= b_atmp;
        }

        b_atmp = beta1;
      }
    }

    Q[ii] = b_atmp;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 27;
      if (b_tau[itau] != 0.0) {
        lastv = 26 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 25] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 26 + ii;
          vectorUB_tmp = i + 27;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= (i + lastv) + 26) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (26 * knt + ii) + 27;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 26) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[(ii + vectorUB_tmp) - vectorUB] * Q[vectorUB_tmp - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 27, 26);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 27;
              ix0 = (lastv + jA) + 26;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 27] * beta1;
              }
            }

            jA += 26;
          }
        }
      }

      Q[ii] = b_atmp;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S226>/MATLAB System'
      R[itau + 13 * ii] = Q[26 * ii + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    work[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S226>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = (itau * 26 + itau) + 26;
    if (itau + 1 < 13) {
      Q[ii - 26] = 1.0;
      ix0 = ii + 1;
      if (b_tau[itau] != 0.0) {
        lastv = 26 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 26 + ii;
          vectorUB_tmp = i + 1;
          do {
            exitg1 = 0;
            if (vectorUB_tmp <= i + lastv) {
              if (Q[vectorUB_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                vectorUB_tmp++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            memset(&work[0], 0, static_cast<uint32_T>(knt + 1) * sizeof(real_T));
          }

          i = (26 * knt + ii) + 1;
          for (vectorUB = ix0; vectorUB <= i; vectorUB += 26) {
            beta1 = 0.0;
            jA = vectorUB + lastv;
            for (vectorUB_tmp = vectorUB; vectorUB_tmp < jA; vectorUB_tmp++) {
              beta1 += Q[((ii + vectorUB_tmp) - vectorUB) - 26] * Q[vectorUB_tmp
                - 1];
            }

            vectorUB_tmp = div_nde_s32_floor((vectorUB - ii) - 1, 26);
            work[vectorUB_tmp] += beta1;
          }
        }

        if (!(-b_tau[itau] == 0.0)) {
          jA = ii;
          for (vectorUB_tmp = 0; vectorUB_tmp <= knt; vectorUB_tmp++) {
            beta1 = work[vectorUB_tmp];
            if (beta1 != 0.0) {
              beta1 *= -b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (vectorUB = i; vectorUB <= ix0; vectorUB++) {
                Q[vectorUB - 1] += Q[((ii + vectorUB) - jA) - 27] * beta1;
              }
            }

            jA += 26;
          }
        }
      }
    }

    i = ii - itau;
    knt = (((((i - ii) + 25) / 2) << 1) + ii) - 24;
    vectorUB = knt - 2;
    for (lastv = ii - 24; lastv <= vectorUB; lastv += 2) {
      tmp = _mm_loadu_pd(&Q[lastv - 1]);
      _mm_storeu_pd(&Q[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-b_tau[itau])));
    }

    for (lastv = knt; lastv <= i; lastv++) {
      Q[lastv - 1] *= -b_tau[itau];
    }

    Q[ii - 26] = 1.0 - b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 27] = 0.0;
    }
  }
}

void proc_control::proc_contr_mpcManager_resetImpl(mpcManager_proc_control_T
  *b_this)
{
  static const int8_T tmp[13] = { 30, 30, 30, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0 };

  static const real_T tmp_0[8] = { 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  //         %% Fonction Reset
  //  Initialize discrete state
  b_this->init = 0.0;

  // Start for MATLABSystem: '<S69>/MATLAB System'
  memset(&b_this->currentFaultCount[0], 0, sizeof(real_T) << 3U);
  for (int32_T i = 0; i < 8; i++) {
    // Start for MATLABSystem: '<S69>/MATLAB System'
    b_this->isThrusterFault[i] = false;
  }

  // Start for MATLABSystem: '<S69>/MATLAB System'
  memset(&b_this->gainsList[0], 0, 600U * sizeof(real_T));

  // initialiser les gains debug
  for (int32_T i = 0; i < 13; i++) {
    // Start for MATLABSystem: '<S69>/MATLAB System'
    b_this->rosOV[i] = tmp[i];
  }

  for (int32_T i = 0; i < 8; i++) {
    // Start for MATLABSystem: '<S69>/MATLAB System'
    b_this->rosMV[i] = 0.2;
    b_this->rosMVR[i] = tmp_0[i];
  }
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    int32_T tmp;
    int32_T tmp_0;
    if (u0 > 0.0) {
      tmp = 1;
    } else {
      tmp = -1;
    }

    if (u1 > 0.0) {
      tmp_0 = 1;
    } else {
      tmp_0 = -1;
    }

    y = atan2(static_cast<real_T>(tmp), static_cast<real_T>(tmp_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

void proc_control::proc_control_expand_atan2(const real_T a_data[], const
  int32_T a_size[1], const real_T b_data[], const int32_T b_size[1], real_T
  c_data[], int32_T c_size[1])
{
  int32_T csz_idx_0;

  // Start for MATLABSystem: '<S69>/MATLAB System' incorporates:
  //   MATLABSystem: '<S233>/MATLAB System'
  //   MATLABSystem: '<S238>/MATLAB System'

  if (b_size[0] == 1) {
    csz_idx_0 = a_size[0];
  } else {
    csz_idx_0 = 0;
  }

  c_size[0] = csz_idx_0;
  if (csz_idx_0 != 0) {
    c_size[0] = 1;
    c_data[0] = rt_atan2d_snf(a_data[0], b_data[0]);
  }

  // End of Start for MATLABSystem: '<S69>/MATLAB System'
}

void proc_control::proc_control_binary_expand_op_1(real_T in1[3], const int32_T
  in2_size[1], const real_T in3_data[], const real_T in4_data[])
{
  int32_T in2_idx_0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'
  //
  in2_idx_0 = in2_size[0];
  for (int32_T i = 0; i < in2_idx_0; i++) {
    in1[0] = in3_data[0] * in4_data[0];
  }

  // End of If: '<S5>/If'
  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
}

real_T rt_roundd_snf(real_T u)
{
  real_T y;
  if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
      y = floor(u + 0.5);
    } else if (u > -0.5) {
      y = u * 0.0;
    } else {
      y = ceil(u - 0.5);
    }
  } else {
    y = u;
  }

  return y;
}

void proc_control::pr_ProcPlannerManager_resetImpl
  (ProcPlannerManager_proc_contr_T *b_this)
{
  int32_T i;

  //  Perform one-time calculations, such as computing constants
  b_this->dummy = 999.0;

  //  Chiffre NULL
  for (i = 0; i < 13; i++) {
    // Start for MATLABSystem: '<S233>/MATLAB System'
    b_this->emptyArray[i] = b_this->dummy;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;
  for (i = 0; i < 7; i++) {
    // Start for MATLABSystem: '<S233>/MATLAB System'
    b_this->initialPose[i] = 0.0;
  }

  // Start for MATLABSystem: '<S233>/MATLAB System'
  //  Buffer trajectoire
  i = 0;
  for (int32_T i_1 = 0; i_1 < 13; i_1++) {
    for (int32_T i_0 = 0; i_0 < 6000; i_0++) {
      // Start for MATLABSystem: '<S233>/MATLAB System'
      b_this->poseBuffer[i_0 + i] = b_this->dummy;
    }

    // Start for MATLABSystem: '<S233>/MATLAB System'
    i += 6000;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = false;
}

void proc_control::proc_control_binary_expand_op_8(real_T in1[3], const int32_T
  in2_data[], const int32_T in2_size[1], const real_T in3_data[], const real_T
  in4_data[])
{
  int32_T in2_idx_0;

  // Start for MATLABSystem: '<S233>/MATLAB System'
  in2_idx_0 = in2_size[0];
  for (int32_T i = 0; i < in2_idx_0; i++) {
    in1[in2_data[0] + 2] = in3_data[0] * in4_data[0];
  }
}

real_T proc_control::proc_control_norm_pr3(const real_T x[3])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;

  // Start for MATLABSystem: '<S233>/MATLAB System' incorporates:
  //   MATLABSystem: '<S238>/MATLAB System1'

  absxk = fabs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  // Start for MATLABSystem: '<S233>/MATLAB System' incorporates:
  //   MATLABSystem: '<S238>/MATLAB System1'

  absxk = fabs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  // Start for MATLABSystem: '<S233>/MATLAB System' incorporates:
  //   MATLABSystem: '<S238>/MATLAB System1'

  absxk = fabs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * sqrt(y);
}

void proc_control::pro_ProcPlannerManager_stepImpl
  (ProcPlannerManager_proc_contr_T *b_this, boolean_T isNew, const
   SL_Bus_geometry_msgs_Transform trajMsg_transforms[16], uint32_T
   trajMsg_transforms_SL_Info_Rece, const SL_Bus_geometry_msgs_Twist
   trajMsg_velocities[16], real_T reset, const real_T mesuredPose[13], real_T
   mpcParams_targetReached_linearT, real_T mpcParams_targetReached_angular,
   real_T mpcParams_targetReached_timeInT, real_T currentPose[130], boolean_T
   *isReached, boolean_T *isTrajDone, real_T initWpt[7])
{
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  real_T tamp[13];
  real_T qRel[4];
  real_T s[3];
  real_T tmp[2];
  real_T aSinInput;
  real_T b_idx_0;
  real_T b_x_data;
  real_T c_idx_0;
  real_T j_data;
  real_T s_tmp;
  real_T s_tmp_0;
  real_T s_tmp_1;
  real_T y_data;
  real_T y_data_0;
  real_T y_idx_0;
  int32_T g_data[1];
  int32_T g_size[1];
  int32_T j_size[1];
  int32_T y_size[1];
  int32_T y_size_0[1];
  int32_T h_size_idx_0;
  int32_T i;
  int32_T k;
  int32_T partialTrueCount;
  int32_T trueCount;
  boolean_T x[13];
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T mask1;
  boolean_T mask2;

  // Start for MATLABSystem: '<S233>/MATLAB System' incorporates:
  //   MATLABSystem: '<S238>/MATLAB System'
  //   MATLABSystem: '<S69>/MATLAB System'

  //         %% ================================================================ 
  //  Main execute a chaque iteration.
  if ((reset != 0.0) || (!b_this->init)) {
    pr_ProcPlannerManager_resetImpl(b_this);
    memcpy(&tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

    // =================================================================
    //  Fonction qui reset la trajectoire
    //  remove roll and pitch from initial condition
    tmp_0 = _mm_set1_pd(1.0 / sqrt(((mesuredPose[3] * mesuredPose[3] +
      mesuredPose[4] * mesuredPose[4]) + mesuredPose[5] * mesuredPose[5]) +
      mesuredPose[6] * mesuredPose[6]));
    _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_loadu_pd(&mesuredPose[3]), tmp_0));
    y_idx_0 = tmp[0];
    c_idx_0 = tmp[1];
    _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_loadu_pd(&mesuredPose[5]), tmp_0));
    aSinInput = (c_idx_0 * tmp[1] + y_idx_0 * tmp[0]) * 2.0;
    mask1 = (aSinInput >= 0.99999999999999778);
    b_idx_0 = aSinInput;
    if (mask1) {
      b_idx_0 = 1.0;
    }

    if (aSinInput <= -0.99999999999999778) {
      b_idx_0 = -1.0;
    }

    mask1 = (mask1 || (aSinInput <= -0.99999999999999778));
    aSinInput = y_idx_0 * y_idx_0;
    s_tmp = c_idx_0 * c_idx_0;
    s_tmp_0 = tmp[0] * tmp[0];
    s_tmp_1 = tmp[1] * tmp[1];
    s[0] = rt_atan2d_snf((tmp[0] * tmp[1] - y_idx_0 * c_idx_0) * -2.0,
                         ((aSinInput - s_tmp) - s_tmp_0) + s_tmp_1);
    s[1] = asin(b_idx_0);
    s[2] = rt_atan2d_snf((c_idx_0 * tmp[0] - y_idx_0 * tmp[1]) * -2.0,
                         ((aSinInput + s_tmp) - s_tmp_0) - s_tmp_1);
    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    if (trueCount - 1 >= 0) {
      s[0] = 0.0;
    }

    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    g_size[0] = trueCount;
    partialTrueCount = 0;
    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        g_data[partialTrueCount] = 0;
        partialTrueCount++;
      }

      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    h_size_idx_0 = trueCount;
    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    if (trueCount - 1 >= 0) {
      b_x_data = b_idx_0;
    }

    partialTrueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        partialTrueCount++;
      }
    }

    partialTrueCount--;
    for (k = 0; k <= partialTrueCount; k++) {
      if (rtIsNaN(b_x_data)) {
        b_x_data = (rtNaN);
      } else if (b_x_data < 0.0) {
        b_x_data = -1.0;
      } else {
        b_x_data = (b_x_data > 0.0);
      }
    }

    for (i = 0; i < trueCount; i++) {
      b_x_data *= 2.0;
    }

    if (g_size[0] == h_size_idx_0) {
      j_size[0] = g_size[0];
      if (g_size[0] - 1 >= 0) {
        j_data = rt_atan2d_snf(c_idx_0, y_idx_0);
      }
    } else {
      partialTrueCount = 0;
      if (mask1) {
        for (i = 0; i < 1; i++) {
          partialTrueCount++;
        }
      }

      y_size[0] = partialTrueCount;
      y_size_0[0] = partialTrueCount;
      if (partialTrueCount - 1 >= 0) {
        y_data = c_idx_0;
        y_data_0 = y_idx_0;
      }

      proc_control_expand_atan2(&y_data, y_size, &y_data_0, y_size_0, &j_data,
        j_size);
    }

    partialTrueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        partialTrueCount++;
      }
    }

    g_size[0] = partialTrueCount;
    partialTrueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        g_data[partialTrueCount] = 0;
        partialTrueCount++;
      }
    }

    if (trueCount == j_size[0]) {
      if (g_size[0] - 1 >= 0) {
        s[2] = b_x_data * j_data;
      }
    } else {
      proc_control_binary_expand_op_8(s, g_data, g_size, &b_x_data, &j_data);
    }

    //  Retransformer en quaternion
    y_idx_0 = s[0] * 0.0 / 2.0;
    s[0] = y_idx_0;
    c_idx_0 = y_idx_0;
    y_idx_0 = s[1] * 0.0 / 2.0;
    s[1] = y_idx_0;
    aSinInput = y_idx_0;
    y_idx_0 = s[2] / 2.0;
    c_idx_0 = cos(c_idx_0);
    s[0] = sin(s[0]);
    s[1] = sin(s[1]);
    tmp_0 = _mm_set1_pd(cos(aSinInput));
    tmp_1 = _mm_set1_pd(sin(y_idx_0));
    tmp_2 = _mm_set_pd(s[0], c_idx_0);
    tmp_3 = _mm_set1_pd(s[1]);
    tmp_4 = _mm_set1_pd(cos(y_idx_0));
    _mm_storeu_pd(&tamp[3], _mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_2, tmp_0),
      tmp_4), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(c_idx_0, s[0]), tmp_3),
      tmp_1), _mm_set_pd(1.0, -1.0))));
    _mm_storeu_pd(&tamp[5], _mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(c_idx_0,
      -s[0]), tmp_0), tmp_1), _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_3), tmp_4)));

    //  Mettre les vitesse à 0;
    for (i = 0; i < 6; i++) {
      tamp[i + 7] = 0.0;
    }

    //  definir les conditions initiaux
    i = 0;
    for (partialTrueCount = 0; partialTrueCount < 13; partialTrueCount++) {
      b_this->poseBuffer[i] = tamp[partialTrueCount];
      i += 6000;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    for (i = 0; i < 7; i++) {
      b_this->initialPose[i] = tamp[i];
    }

    b_this->init = true;
    isNew = false;
  }

  //  Add new pose if new arrive
  //         %% ================================================================ 
  //  Fonction qui traites les nouveau poses.
  //  Si il y a des noiveau points
  if (isNew) {
    //  nombre de points recu.
    //  si il y a asser de place dans le buffer.
    if (static_cast<real_T>(trajMsg_transforms_SL_Info_Rece) +
        b_this->bufferCount < 6000.0) {
      memset(&tamp[0], 0, 13U * sizeof(real_T));

      //  Remplire le tampon
      partialTrueCount = static_cast<int32_T>(trajMsg_transforms_SL_Info_Rece) -
        1;
      for (k = 0; k <= partialTrueCount; k++) {
        tamp[0] = trajMsg_transforms[k].translation.x;
        tamp[1] = trajMsg_transforms[k].translation.y;
        tamp[2] = trajMsg_transforms[k].translation.z;
        tamp[3] = trajMsg_transforms[k].rotation.w;
        tamp[4] = trajMsg_transforms[k].rotation.x;
        tamp[5] = trajMsg_transforms[k].rotation.y;
        tamp[6] = trajMsg_transforms[k].rotation.z;
        tamp[7] = trajMsg_velocities[k].linear.x;
        tamp[8] = trajMsg_velocities[k].linear.y;
        tamp[9] = trajMsg_velocities[k].linear.z;
        tamp[10] = trajMsg_velocities[k].angular.x;
        tamp[11] = trajMsg_velocities[k].angular.y;
        tamp[12] = trajMsg_velocities[k].angular.z;
        b_this->bufferCount++;
        for (i = 0; i < 13; i++) {
          b_this->poseBuffer[(static_cast<int32_T>(b_this->bufferCount) + 6000 *
                              i) - 1] = tamp[i];
        }
      }

      //  Definir le pose initial pour la prochaine trajectoire
      for (i = 0; i < 7; i++) {
        b_this->initialPose[i] = tamp[i];
      }
    } else {
      std::printf("WARNING : proc control : trajectory buffer overflow.");
      std::fflush(stdout);
    }
  }

  //         %% ================================================================ 
  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  aSinInput = 2.0;
  mask1 = false;

  //  Vérifier s'il reste au moins mpc.p points dans les buffers
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 9)) {
    aSinInput = static_cast<real_T>(k) + 2.0;
    for (i = 0; i < 13; i++) {
      x[i] = (b_this->poseBuffer[(6000 * i + k) + 1] == b_this->emptyArray[i]);
    }

    mask2 = true;
    partialTrueCount = 0;
    exitg2 = false;
    while ((!exitg2) && (partialTrueCount < 13)) {
      if (!x[partialTrueCount]) {
        mask2 = false;
        exitg2 = true;
      } else {
        partialTrueCount++;
      }
    }

    if (mask2) {
      mask1 = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  memset(&currentPose[0], 0, 130U * sizeof(real_T));

  // Start for MATLABSystem: '<S233>/MATLAB System'
  trueCount = static_cast<int32_T>(aSinInput);
  i = 0;
  partialTrueCount = 0;
  for (k = 0; k < 13; k++) {
    // Start for MATLABSystem: '<S233>/MATLAB System'
    for (h_size_idx_0 = 0; h_size_idx_0 < trueCount; h_size_idx_0++) {
      currentPose[h_size_idx_0 + i] = b_this->poseBuffer[h_size_idx_0 +
        partialTrueCount];
    }

    i += 10;
    partialTrueCount += 6000;
  }

  //  S'il ya moins de mpc.p points, padder avec le dernier points
  if (mask1) {
    k = 10 - trueCount;
    for (partialTrueCount = 0; partialTrueCount <= k; partialTrueCount++) {
      // Start for MATLABSystem: '<S233>/MATLAB System'
      h_size_idx_0 = trueCount + partialTrueCount;
      for (i = 0; i < 13; i++) {
        tamp[i] = currentPose[(10 * i + trueCount) - 2];
      }

      for (i = 0; i < 13; i++) {
        currentPose[(h_size_idx_0 + 10 * i) - 1] = tamp[i];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  i = 0;
  for (partialTrueCount = 0; partialTrueCount < 13; partialTrueCount++) {
    // Start for MATLABSystem: '<S233>/MATLAB System'
    x[partialTrueCount] = !(b_this->poseBuffer[i + 1] == b_this->
      emptyArray[partialTrueCount]);
    i += 6000;
  }

  mask2 = true;
  partialTrueCount = 0;
  exitg1 = false;
  while ((!exitg1) && (partialTrueCount < 13)) {
    if (!x[partialTrueCount]) {
      mask2 = false;
      exitg1 = true;
    } else {
      partialTrueCount++;
    }
  }

  if (mask2) {
    // this.prediction+1
    i = 0;
    for (partialTrueCount = 0; partialTrueCount < 13; partialTrueCount++) {
      // Start for MATLABSystem: '<S233>/MATLAB System'
      memcpy(&proc_control_B.b_this_m[i], &b_this->poseBuffer[i + 1], 5999U *
             sizeof(real_T));
      proc_control_B.b_this_m[i + 5999] = b_this->emptyArray[partialTrueCount];
      i += 6000;
    }

    // Start for MATLABSystem: '<S233>/MATLAB System'
    memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this_m[0], 78000U * sizeof
           (real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    // Start for MATLABSystem: '<S233>/MATLAB System'
    b_this->done = true;
  }

  // Start for MATLABSystem: '<S233>/MATLAB System'
  memcpy(&tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

  //         %% ================================================================ 
  //  Fonction qui verifie le target reached
  *isReached = false;

  // Start for MATLABSystem: '<S233>/MATLAB System'
  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  prendre le target
    //  check flip (exemple ne pas comparer 0deg avec 360deg)
    y_idx_0 = mesuredPose[3];
    c_idx_0 = mesuredPose[4];
    aSinInput = mesuredPose[5];
    s_tmp = mesuredPose[6];

    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    if (((mesuredPose[3] * b_this->poseBuffer[18000] + mesuredPose[4] *
          b_this->poseBuffer[24000]) + mesuredPose[5] * b_this->poseBuffer[30000])
        + mesuredPose[6] * b_this->poseBuffer[36000] < 0.0) {
      y_idx_0 = -mesuredPose[3];
      c_idx_0 = -mesuredPose[4];
      aSinInput = -mesuredPose[5];
      s_tmp = -mesuredPose[6];
    }

    //  calculer l'erreur angulaire.
    // =================================================================
    //  Fonction qui calcule l'angle entre 2 quaternion
    qRel[0] = ((b_this->poseBuffer[18000] * y_idx_0 - -b_this->poseBuffer[24000]
                * c_idx_0) - -b_this->poseBuffer[30000] * aSinInput) -
      -b_this->poseBuffer[36000] * s_tmp;
    _mm_storeu_pd(&qRel[1], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
      (b_this->poseBuffer[18000]), _mm_set_pd(aSinInput, c_idx_0)), _mm_mul_pd
      (_mm_set_pd(-b_this->poseBuffer[30000], -b_this->poseBuffer[24000]),
       _mm_set1_pd(y_idx_0))), _mm_sub_pd(_mm_mul_pd(_mm_set_pd
      (-b_this->poseBuffer[36000], -b_this->poseBuffer[30000]), _mm_set_pd
      (c_idx_0, s_tmp)), _mm_mul_pd(_mm_set_pd(-b_this->poseBuffer[24000],
      -b_this->poseBuffer[36000]), _mm_set_pd(s_tmp, aSinInput)))));
    qRel[3] = (b_this->poseBuffer[18000] * s_tmp + y_idx_0 * -b_this->
               poseBuffer[36000]) + (-b_this->poseBuffer[24000] * aSinInput -
      -b_this->poseBuffer[30000] * c_idx_0);
    aSinInput = fabs(2.0 * rt_atan2d_snf(proc_control_norm_pr3(&qRel[1]), qRel[0]));

    //  Ramener l'erreur de 0 à pi
    if (aSinInput > 6.2831853071795862) {
      aSinInput = 6.2831853071795862 - aSinInput;
    }

    //  calculer l'erreur lineaire
    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    tmp_0 = _mm_sub_pd(_mm_set_pd(b_this->poseBuffer[6000], b_this->poseBuffer[0]),
                       _mm_loadu_pd(&tamp[0]));
    _mm_storeu_pd(&s[0], tmp_0);
    s[2] = b_this->poseBuffer[12000] - tamp[2];
    if ((proc_control_norm_pr3(s) < mpcParams_targetReached_linearT) &&
        (aSinInput < mpcParams_targetReached_angular)) {
      //  incrementer le nombre de sample en target reached
      b_this->targetReachedCount++;

      //  si le sub est dans la zone de convergence depuis le temps demander
      *isReached = (b_this->targetReachedCount * 0.1 >=
                    mpcParams_targetReached_timeInT);
    } else {
      //  Remettre le compteur a 0 si le sub n'est pas dans la zone
      b_this->targetReachedCount = 0.0;
    }
  } else {
    b_this->targetReachedCount = 0.0;
  }

  *isTrajDone = b_this->done;
  for (i = 0; i < 7; i++) {
    initWpt[i] = b_this->initialPose[i];
  }
}

void proc_control::proc_control_binary_expand_op(real_T in1[3], const int32_T
  in2_size[1], const real_T in3_data[], const real_T in4_data[])
{
  int32_T in2_idx_0;

  // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
  //   ActionPort: '<S238>/Action Port'

  // SwitchCase: '<S7>/Switch Case' incorporates:
  //   MATLABSystem: '<S238>/MATLAB System'
  //
  in2_idx_0 = in2_size[0];
  for (int32_T i = 0; i < in2_idx_0; i++) {
    in1[2] = in3_data[0] * in4_data[0];
  }

  // End of SwitchCase: '<S7>/Switch Case'
  // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
}

void proc_control::proc__quaternion_parenReference(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, boolean_T varargin_1, real_T o_a_data[], int32_T
  o_a_size[2], real_T o_b_data[], int32_T o_b_size[2], real_T o_c_data[],
  int32_T o_c_size[2], real_T o_d_data[], int32_T o_d_size[2])
{
  int32_T trueCount;
  int32_T trueCount_0;
  int32_T trueCount_1;
  int32_T trueCount_2;
  trueCount = 0;
  trueCount_0 = 0;
  if (varargin_1) {
    for (int32_T i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  trueCount_1 = 0;
  if (varargin_1) {
    for (int32_T i = 0; i < 1; i++) {
      trueCount_0++;
    }
  }

  trueCount_2 = 0;
  if (varargin_1) {
    for (int32_T i = 0; i < 1; i++) {
      trueCount_1++;
    }

    for (int32_T i = 0; i < 1; i++) {
      trueCount_2++;
    }
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  o_a_size[0] = 1;
  o_a_size[1] = trueCount;
  if (trueCount - 1 >= 0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    o_a_data[0] = obj_a;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  o_b_size[0] = 1;
  o_b_size[1] = trueCount_0;
  if (trueCount_0 - 1 >= 0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    o_b_data[0] = obj_b;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  o_c_size[0] = 1;
  o_c_size[1] = trueCount_1;
  if (trueCount_1 - 1 >= 0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    o_c_data[0] = obj_c;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  o_d_size[0] = 1;
  o_d_size[1] = trueCount_2;
  if (trueCount_2 - 1 >= 0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    o_d_data[0] = obj_d;
  }
}

void proc_control::proc_con_quaternion_parenAssign(quaternion_proc_control_T
  *obj, const real_T rhs_a_data[], const real_T rhs_b_data[], const real_T
  rhs_c_data[], const real_T rhs_d_data[], boolean_T varargin_1)
{
  real_T c_idx_0;

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  c_idx_0 = obj->a;
  if (varargin_1) {
    c_idx_0 = rhs_a_data[0];
  }

  obj->a = c_idx_0;
  c_idx_0 = obj->b;
  if (varargin_1) {
    c_idx_0 = rhs_b_data[0];
  }

  obj->b = c_idx_0;
  c_idx_0 = obj->c;
  if (varargin_1) {
    c_idx_0 = rhs_c_data[0];
  }

  obj->c = c_idx_0;
  c_idx_0 = obj->d;
  if (varargin_1) {
    c_idx_0 = rhs_d_data[0];
  }

  obj->d = c_idx_0;

  // End of Start for MATLABSystem: '<S251>/Rotation Trajectory'
}

quaternion_proc_control_T proc_control::proc_contr_quaternionBase_slerp(real_T
  q1_a, real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T
  q2_c, real_T q2_d)
{
  quaternion_proc_control_T qo;
  real_T assign_temp_a_data;
  real_T assign_temp_b_data;
  real_T assign_temp_c_data;
  real_T assign_temp_d_data;
  real_T dp;
  real_T n;
  real_T oa;
  real_T oa_0;
  real_T ob;
  real_T ob_0;
  real_T ob_tmp;
  real_T oc;
  real_T oc_tmp;
  real_T od;
  real_T od_tmp;
  int32_T assign_temp_a_size[2];
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  n = sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  od_tmp = q1_a / n;
  dp = q1_b / n;
  oa_0 = q1_c / n;
  ob_0 = q1_d / n;
  oa = ((od_tmp - dp * 0.0) - oa_0 * 0.0) - ob_0 * 0.0;
  ob = ((od_tmp * 0.0 + dp) + oa_0 * 0.0) - ob_0 * 0.0;
  oc = ((od_tmp * 0.0 - dp * 0.0) + oa_0) + ob_0 * 0.0;
  od = ((od_tmp * 0.0 + dp * 0.0) - oa_0 * 0.0) + ob_0;
  n = sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  od_tmp = q2_a / n;
  dp = q2_b / n;
  oa_0 = q2_c / n;
  ob_0 = q2_d / n;
  n = ((od_tmp - dp * 0.0) - oa_0 * 0.0) - ob_0 * 0.0;
  ob_tmp = ((od_tmp * 0.0 + dp) + oa_0 * 0.0) - ob_0 * 0.0;
  oc_tmp = ((od_tmp * 0.0 - dp * 0.0) + oa_0) + ob_0 * 0.0;
  od_tmp = ((od_tmp * 0.0 + dp * 0.0) - oa_0 * 0.0) + ob_0;
  dp = ((oa * n + ob * ob_tmp) + oc * oc_tmp) + od * od_tmp;
  if (dp < 0.0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    n = -n;
    ob_tmp = -ob_tmp;
    oc_tmp = -oc_tmp;
    od_tmp = -od_tmp;
    dp = -dp;
  }

  if (dp > 1.0) {
    dp = 1.0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  dp = acos(dp);
  oa_0 = sin(dp);
  ob_0 = 1.0 / oa_0;
  dp = sin(0.0 * dp);
  qo.a = (oa_0 * oa + dp * n) * ob_0;
  qo.b = (oa_0 * ob + dp * ob_tmp) * ob_0;
  qo.c = (oa_0 * oc + dp * oc_tmp) * ob_0;
  qo.d = (oa_0 * od + dp * od_tmp) * ob_0;
  if (rtIsInf(ob_0)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size);
    proc_con_quaternion_parenAssign(&qo, &assign_temp_a_data,
      &assign_temp_b_data, &assign_temp_c_data, &assign_temp_d_data, true);
  }

  n = sqrt(((qo.a * qo.a + qo.b * qo.b) + qo.c * qo.c) + qo.d * qo.d);
  qo.a /= n;
  qo.b /= n;
  qo.c /= n;
  qo.d /= n;
  return qo;
}

quaternion_proc_control_T proc_control::proc_con_quaternionBase_slerp_p(real_T
  q1_a, real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T
  q2_c, real_T q2_d)
{
  quaternion_proc_control_T qo;
  real_T assign_temp_a_data;
  real_T assign_temp_b_data;
  real_T assign_temp_c_data;
  real_T assign_temp_d_data;
  real_T dp;
  real_T n;
  real_T oa;
  real_T oa_0;
  real_T ob;
  real_T ob_0;
  real_T ob_tmp;
  real_T oc;
  real_T oc_tmp;
  real_T od;
  real_T od_tmp;
  int32_T assign_temp_a_size[2];
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  n = sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  od_tmp = q1_a / n;
  dp = q1_b / n;
  oa_0 = q1_c / n;
  ob_0 = q1_d / n;
  oa = ((od_tmp - dp * 0.0) - oa_0 * 0.0) - ob_0 * 0.0;
  ob = ((od_tmp * 0.0 + dp) + oa_0 * 0.0) - ob_0 * 0.0;
  oc = ((od_tmp * 0.0 - dp * 0.0) + oa_0) + ob_0 * 0.0;
  od = ((od_tmp * 0.0 + dp * 0.0) - oa_0 * 0.0) + ob_0;
  n = sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  od_tmp = q2_a / n;
  dp = q2_b / n;
  oa_0 = q2_c / n;
  ob_0 = q2_d / n;
  n = ((od_tmp - dp * 0.0) - oa_0 * 0.0) - ob_0 * 0.0;
  ob_tmp = ((od_tmp * 0.0 + dp) + oa_0 * 0.0) - ob_0 * 0.0;
  oc_tmp = ((od_tmp * 0.0 - dp * 0.0) + oa_0) + ob_0 * 0.0;
  od_tmp = ((od_tmp * 0.0 + dp * 0.0) - oa_0 * 0.0) + ob_0;
  dp = ((oa * n + ob * ob_tmp) + oc * oc_tmp) + od * od_tmp;
  if (dp < 0.0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    n = -n;
    ob_tmp = -ob_tmp;
    oc_tmp = -oc_tmp;
    od_tmp = -od_tmp;
    dp = -dp;
  }

  if (dp > 1.0) {
    dp = 1.0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  dp = acos(dp);
  oa_0 = sin(dp);
  ob_0 = 1.0 / oa_0;
  dp = sin(0.0 * dp);
  qo.a = (dp * oa + oa_0 * n) * ob_0;
  qo.b = (dp * ob + oa_0 * ob_tmp) * ob_0;
  qo.c = (dp * oc + oa_0 * oc_tmp) * ob_0;
  qo.d = (dp * od + oa_0 * od_tmp) * ob_0;
  if (rtIsInf(ob_0)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size);
    proc_con_quaternion_parenAssign(&qo, &assign_temp_a_data,
      &assign_temp_b_data, &assign_temp_c_data, &assign_temp_d_data, true);
  }

  n = sqrt(((qo.a * qo.a + qo.b * qo.b) + qo.c * qo.c) + qo.d * qo.d);
  qo.a /= n;
  qo.b /= n;
  qo.c /= n;
  qo.d /= n;
  return qo;
}

quaternion_proc_control_T proc_control::proc_co_quaternionBase_slerp_pr(real_T
  q1_a, real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T
  q2_c, real_T q2_d, real_T t)
{
  quaternion_proc_control_T qo;
  real_T assign_temp_a_data;
  real_T assign_temp_b_data;
  real_T assign_temp_c_data;
  real_T assign_temp_d_data;
  real_T dp;
  real_T n;
  real_T oa;
  real_T oa_0;
  real_T ob;
  real_T ob_0;
  real_T ob_tmp;
  real_T oc;
  real_T oc_tmp;
  real_T od;
  real_T od_tmp;
  int32_T assign_temp_a_size[2];
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  n = sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  od_tmp = q1_a / n;
  dp = q1_b / n;
  oa_0 = q1_c / n;
  ob_0 = q1_d / n;
  oa = ((od_tmp - dp * 0.0) - oa_0 * 0.0) - ob_0 * 0.0;
  ob = ((od_tmp * 0.0 + dp) + oa_0 * 0.0) - ob_0 * 0.0;
  oc = ((od_tmp * 0.0 - dp * 0.0) + oa_0) + ob_0 * 0.0;
  od = ((od_tmp * 0.0 + dp * 0.0) - oa_0 * 0.0) + ob_0;
  n = sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  od_tmp = q2_a / n;
  dp = q2_b / n;
  oa_0 = q2_c / n;
  ob_0 = q2_d / n;
  n = ((od_tmp - dp * 0.0) - oa_0 * 0.0) - ob_0 * 0.0;
  ob_tmp = ((od_tmp * 0.0 + dp) + oa_0 * 0.0) - ob_0 * 0.0;
  oc_tmp = ((od_tmp * 0.0 - dp * 0.0) + oa_0) + ob_0 * 0.0;
  od_tmp = ((od_tmp * 0.0 + dp * 0.0) - oa_0 * 0.0) + ob_0;
  dp = ((oa * n + ob * ob_tmp) + oc * oc_tmp) + od * od_tmp;
  if (dp < 0.0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    n = -n;
    ob_tmp = -ob_tmp;
    oc_tmp = -oc_tmp;
    od_tmp = -od_tmp;
    dp = -dp;
  }

  if (dp > 1.0) {
    dp = 1.0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  dp = acos(dp);
  oa_0 = 1.0 / sin(dp);
  ob_0 = sin((1.0 - t) * dp);
  dp = sin(t * dp);
  qo.a = (ob_0 * oa + dp * n) * oa_0;
  qo.b = (ob_0 * ob + dp * ob_tmp) * oa_0;
  qo.c = (ob_0 * oc + dp * oc_tmp) * oa_0;
  qo.d = (ob_0 * od + dp * od_tmp) * oa_0;
  if (rtIsInf(oa_0)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size);
    proc_con_quaternion_parenAssign(&qo, &assign_temp_a_data,
      &assign_temp_b_data, &assign_temp_c_data, &assign_temp_d_data, true);
  }

  n = sqrt(((qo.a * qo.a + qo.b * qo.b) + qo.c * qo.c) + qo.d * qo.d);
  qo.a /= n;
  qo.b /= n;
  qo.c /= n;
  qo.d /= n;
  return qo;
}

void proc_control::proc_contro_binary_expand_op_12(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  real_T in1_data_0;
  int32_T in1_size_idx_1;
  int32_T loop_ub;
  int32_T stride_0_1;
  if (in3 == 1) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    in1_size_idx_1 = in1_size[1];
  } else {
    in1_size_idx_1 = in3;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  stride_0_1 = (in1_size[1] != 1);
  if (in3 == 1) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    loop_ub = in1_size[1];
  } else {
    loop_ub = in3;
  }

  for (int32_T i = 0; i < loop_ub; i++) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    in1_data_0 = in1_data[i * stride_0_1] / in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in1_size_idx_1;
  for (int32_T i = 0; i < in1_size_idx_1; i++) {
    in1_data[0] = in1_data_0;
  }
}

void proc_control::proc_control_binary_expand_op_9(real_T *in1, const int32_T
  in2_size[2], real_T in3, const real_T in4_data[], const int32_T in4_size[2])
{
  int32_T loop_ub;

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  if (in4_size[1] == 1) {
    loop_ub = in2_size[1];
  } else {
    loop_ub = in4_size[1];
  }

  for (int32_T i = 0; i < loop_ub; i++) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    *in1 = in3 * in4_data[0];
  }
}

void proc_control::proc_control_quaternionBase_log(real_T q_a, real_T q_b,
  real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T
  *b_q_d)
{
  real_T qnorm;
  real_T vnorm;
  real_T vscale_data;
  int32_T tmp_size[2];
  int32_T tmp_size_0[2];
  int32_T tmp_size_1[2];
  int32_T vscale_size[2];
  int32_T tmp_data[1];
  int32_T tmp_data_0[1];
  int32_T tmp_data_1[1];
  int32_T b_tmp;
  int32_T i;
  int32_T trueCount;
  int32_T vscale_data_tmp;
  boolean_T tmp;

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  vnorm = sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  qnorm = sqrt(q_a * q_a + vnorm * vnorm);
  trueCount = 0;
  if (vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  if (trueCount - 1 >= 0) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    vscale_data = q_a / qnorm;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  vscale_size[0] = 1;
  vscale_size[1] = trueCount;
  b_tmp = trueCount - 1;
  for (i = 0; i <= b_tmp; i++) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    vscale_data = acos(vscale_data);
  }

  vscale_data_tmp = 0;
  if (vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      vscale_data_tmp++;
    }
  }

  if (trueCount == vscale_data_tmp) {
    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    vscale_size[0] = 1;
    for (trueCount = 0; trueCount <= b_tmp; trueCount++) {
      // Start for MATLABSystem: '<S251>/Rotation Trajectory'
      vscale_data /= vnorm;
    }
  } else {
    proc_contro_binary_expand_op_12(&vscale_data, vscale_size, vnorm,
      vscale_data_tmp);
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  *b_q_b = q_b;
  trueCount = 0;
  if (vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  tmp_size[0] = 1;
  tmp_size[1] = trueCount;
  if (vnorm != 0.0) {
    tmp_data[0] = 0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  if (trueCount == vscale_size[1]) {
    if (vscale_size[1] - 1 >= 0) {
      *b_q_b = q_b * vscale_data;
    }
  } else {
    proc_control_binary_expand_op_9(b_q_b, tmp_size, q_b, &vscale_data,
      vscale_size);
  }

  tmp = !(vnorm != 0.0);
  if (tmp) {
    *b_q_b = 0.0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  *b_q_c = q_c;
  trueCount = 0;
  if (vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  tmp_size_0[0] = 1;
  tmp_size_0[1] = trueCount;
  if (vnorm != 0.0) {
    tmp_data_0[0] = 0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  if (trueCount == vscale_size[1]) {
    if (vscale_size[1] - 1 >= 0) {
      *b_q_c = q_c * vscale_data;
    }
  } else {
    proc_control_binary_expand_op_9(b_q_c, tmp_size_0, q_c, &vscale_data,
      vscale_size);
  }

  if (tmp) {
    *b_q_c = 0.0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  *b_q_d = q_d;
  trueCount = 0;
  if (vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  tmp_size_1[0] = 1;
  tmp_size_1[1] = trueCount;
  if (vnorm != 0.0) {
    tmp_data_1[0] = 0;
  }

  if (trueCount == vscale_size[1]) {
    if (vscale_size[1] - 1 >= 0) {
      // Start for MATLABSystem: '<S251>/Rotation Trajectory'
      *b_q_d = q_d * vscale_data;
    }
  } else {
    proc_control_binary_expand_op_9(b_q_d, tmp_size_1, q_d, &vscale_data,
      vscale_size);
  }

  if (tmp) {
    *b_q_d = 0.0;
  }

  // Start for MATLABSystem: '<S251>/Rotation Trajectory'
  *b_q_a = log(qnorm);
}

void proc_control::proc_contro_generateCubicCoeffs(const real_T posPts[2], const
  real_T velPts[2], real_T finalTime, real_T coeffVec[4])
{
  real_T tmp[2];
  real_T coeffVec_tmp;

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  _mm_storeu_pd(&tmp[0], _mm_sub_pd(_mm_set_pd(velPts[1], posPts[1]), _mm_add_pd
    (_mm_mul_pd(_mm_set_pd(0.0, finalTime), _mm_set_pd(posPts[0], velPts[0])),
     _mm_set_pd(velPts[0], posPts[0]))));
  coeffVec_tmp = finalTime * finalTime;
  coeffVec[0] = 1.0 / coeffVec_tmp * tmp[1] + -2.0 / rt_powd_snf(finalTime, 3.0)
    * tmp[0];
  coeffVec[3] = posPts[0];
  coeffVec[1] = 3.0 / coeffVec_tmp * tmp[0] + -1.0 / finalTime * tmp[1];
  coeffVec[2] = velPts[0];
}

void proc_control::pr_addFlatSegmentsToPPFormParts(const real_T oldbreaks[2],
  const real_T oldCoeffs[12], real_T newBreaks[4], real_T newCoefs[36])
{
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  real_T coefsWithFlatStart[24];
  real_T newSegmentCoeffs[12];
  real_T evalPointVector_idx_0;
  real_T evalPointVector_idx_1;
  real_T evalPointVector_idx_2;
  real_T holdPoint;
  int32_T i;
  int32_T i_0;
  int32_T tmp;
  memset(&newSegmentCoeffs[0], 0, 12U * sizeof(real_T));
  for (i = 0; i <= 0; i += 2) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    tmp_3 = _mm_set1_pd(0.0);
    _mm_storeu_pd(&newSegmentCoeffs[i + 9], _mm_add_pd(_mm_add_pd(_mm_add_pd
      (_mm_mul_pd(_mm_loadu_pd(&oldCoeffs[i + 3]), tmp_3), _mm_mul_pd
       (_mm_loadu_pd(&oldCoeffs[i]), tmp_3)), _mm_mul_pd(_mm_loadu_pd
      (&oldCoeffs[i + 6]), tmp_3)), _mm_loadu_pd(&oldCoeffs[i + 9])));
  }

  for (i = 2; i < 3; i++) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    newSegmentCoeffs[i + 9] = ((oldCoeffs[i + 3] * 0.0 + oldCoeffs[i] * 0.0) +
      oldCoeffs[i + 6] * 0.0) + oldCoeffs[i + 9];
  }

  memset(&coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
  i = 0;
  tmp = 0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    coefsWithFlatStart[i] = newSegmentCoeffs[tmp];

    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    coefsWithFlatStart[i + 3] = oldCoeffs[tmp];
    coefsWithFlatStart[i + 1] = newSegmentCoeffs[tmp + 1];

    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    coefsWithFlatStart[i + 4] = oldCoeffs[tmp + 1];
    coefsWithFlatStart[i + 2] = newSegmentCoeffs[tmp + 2];

    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    coefsWithFlatStart[i + 5] = oldCoeffs[tmp + 2];
    i += 6;
    tmp += 3;
  }

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  holdPoint = oldbreaks[1] - oldbreaks[0];
  evalPointVector_idx_0 = rt_powd_snf(holdPoint, 3.0);
  evalPointVector_idx_1 = rt_powd_snf(holdPoint, 2.0);
  evalPointVector_idx_2 = rt_powd_snf(holdPoint, 1.0);
  holdPoint = rt_powd_snf(holdPoint, 0.0);
  memset(&newSegmentCoeffs[0], 0, 12U * sizeof(real_T));
  for (i = 0; i <= 0; i += 2) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    tmp_3 = _mm_loadu_pd(&coefsWithFlatStart[i + 3]);
    tmp_0 = _mm_loadu_pd(&coefsWithFlatStart[i + 9]);
    tmp_1 = _mm_loadu_pd(&coefsWithFlatStart[i + 15]);
    tmp_2 = _mm_loadu_pd(&coefsWithFlatStart[i + 21]);
    _mm_storeu_pd(&newSegmentCoeffs[i + 9], _mm_add_pd(_mm_add_pd(_mm_add_pd
      (_mm_mul_pd(tmp_3, _mm_set1_pd(evalPointVector_idx_0)), _mm_mul_pd(tmp_0,
      _mm_set1_pd(evalPointVector_idx_1))), _mm_mul_pd(tmp_1, _mm_set1_pd
      (evalPointVector_idx_2))), _mm_mul_pd(tmp_2, _mm_set1_pd(holdPoint))));
  }

  for (i = 2; i < 3; i++) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    newSegmentCoeffs[i + 9] = ((coefsWithFlatStart[i + 3] *
      evalPointVector_idx_0 + coefsWithFlatStart[i + 9] * evalPointVector_idx_1)
      + coefsWithFlatStart[i + 15] * evalPointVector_idx_2) +
      coefsWithFlatStart[i + 21] * holdPoint;
  }

  memset(&newCoefs[0], 0, 36U * sizeof(real_T));
  for (i = 0; i < 6; i++) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    newCoefs[i] = coefsWithFlatStart[i];
    newCoefs[i + 9] = coefsWithFlatStart[i + 6];
    newCoefs[i + 18] = coefsWithFlatStart[i + 12];
    newCoefs[i + 27] = coefsWithFlatStart[i + 18];
  }

  i = 0;
  tmp = 0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    newCoefs[i + 6] = newSegmentCoeffs[tmp];
    newCoefs[i + 7] = newSegmentCoeffs[tmp + 1];
    newCoefs[i + 8] = newSegmentCoeffs[tmp + 2];
    i += 9;
    tmp += 3;
  }

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  newBreaks[0] = oldbreaks[0] - 1.0;
  newBreaks[1] = oldbreaks[0];
  newBreaks[2] = oldbreaks[1];
  newBreaks[3] = oldbreaks[1] + 1.0;
}

void proc_control::PolyTrajSys_updateStoredPPForms
  (robotics_slcore_internal_bl_p_T *obj, const real_T pp_breaks[4], const real_T
   pp_coefs[36])
{
  int32_T b_i_0;
  int32_T tmp_0;
  memset(&obj->PPDStruct.coefs[0], 0, 36U * sizeof(real_T));
  b_i_0 = 0;
  for (int32_T b_i = 0; b_i < 3; b_i++) {
    for (int32_T i = 0; i <= 6; i += 2) {
      // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
      tmp_0 = i + b_i_0;
      _mm_storeu_pd(&obj->PPDStruct.coefs[tmp_0 + 9], _mm_mul_pd(_mm_loadu_pd
        (&pp_coefs[tmp_0]), _mm_set1_pd(3.0 - static_cast<real_T>(b_i))));
    }

    for (int32_T i = 8; i < 9; i++) {
      // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
      tmp_0 = i + b_i_0;
      obj->PPDStruct.coefs[tmp_0 + 9] = (3.0 - static_cast<real_T>(b_i)) *
        pp_coefs[tmp_0];
    }

    b_i_0 += 9;
  }

  memset(&obj->PPDDStruct.coefs[0], 0, 36U * sizeof(real_T));
  b_i_0 = 0;
  for (int32_T b_i = 0; b_i < 3; b_i++) {
    for (int32_T i = 0; i <= 6; i += 2) {
      __m128d tmp;

      // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
      tmp_0 = i + b_i_0;
      tmp = _mm_loadu_pd(&obj->PPDStruct.coefs[tmp_0]);
      _mm_storeu_pd(&obj->PPDDStruct.coefs[tmp_0 + 9], _mm_mul_pd(tmp,
        _mm_set1_pd(3.0 - static_cast<real_T>(b_i))));
    }

    for (int32_T i = 8; i < 9; i++) {
      // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
      tmp_0 = i + b_i_0;
      obj->PPDDStruct.coefs[tmp_0 + 9] = (3.0 - static_cast<real_T>(b_i)) *
        obj->PPDStruct.coefs[tmp_0];
    }

    b_i_0 += 9;
  }

  obj->PPStruct.breaks[0] = pp_breaks[0];
  obj->PPStruct.breaks[1] = pp_breaks[1];
  obj->PPStruct.breaks[2] = pp_breaks[2];
  obj->PPStruct.breaks[3] = pp_breaks[3];
  memcpy(&obj->PPStruct.coefs[0], &pp_coefs[0], 36U * sizeof(real_T));

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  obj->PPDStruct.breaks[0] = pp_breaks[0];
  obj->PPDDStruct.breaks[0] = pp_breaks[0];
  obj->PPDStruct.breaks[1] = pp_breaks[1];
  obj->PPDDStruct.breaks[1] = pp_breaks[1];
  obj->PPDStruct.breaks[2] = pp_breaks[2];
  obj->PPDDStruct.breaks[2] = pp_breaks[2];
  obj->PPDStruct.breaks[3] = pp_breaks[3];
  obj->PPDDStruct.breaks[3] = pp_breaks[3];
}

void proc_control::proc_control_ppval(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3])
{
  real_T tmp[2];

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  if (rtIsNaN(x)) {
    v[0] = (rtNaN);
    v[1] = (rtNaN);
    v[2] = (rtNaN);
  } else {
    real_T v_0;
    real_T v_1;
    real_T v_2;
    real_T xloc;
    int32_T high_i;
    int32_T ic0;
    int32_T low_i;
    int32_T low_ip1;
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    xloc = x - pp_breaks[low_i];
    v_0 = pp_coefs[low_ip1];
    v_1 = pp_coefs[low_ip1 + 1];
    v_2 = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      _mm_storeu_pd(&tmp[0], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(xloc), _mm_set_pd
        (v_1, v_0)), _mm_loadu_pd(&pp_coefs[ic0 + 1])));
      v_0 = tmp[0];
      v_1 = tmp[1];
      v_2 = xloc * v_2 + pp_coefs[ic0 + 3];
    }

    v[2] = v_2;
    v[1] = v_1;
    v[0] = v_0;
  }

  // End of Start for MATLABSystem: '<S254>/Polynomial Trajectory'
}

void proc_control::proc_TrajectoryManager_stepImpl
  (TrajectoryManager_proc_contro_T *b_this, real_T reset, const real_T poses[13],
   const real_T target[7], const real_T x0[7], const real_T mesuredPose[13],
   real_T currentPose[130], boolean_T *isReached)
{
  __m128d tmp_1;
  real_T a[13];
  real_T mp[7];
  real_T y_0[7];
  real_T qRel[4];
  real_T target_0[3];
  real_T tmp[2];
  real_T tmp_0[2];
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_itilerow;
  int32_T b_jcol;
  int32_T b_jcol_0;
  boolean_T x[13];
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T isempty;
  boolean_T y;

  //  Main execute a chaque iteration.
  //  Implement algorithm. Calculate y as a function of input u and
  for (b_jcol_0 = 0; b_jcol_0 < 7; b_jcol_0++) {
    mp[b_jcol_0] = mesuredPose[b_jcol_0];
  }

  if (reset == 1.0) {
    b_this->init = 0.0;
  }

  if (b_this->init == 0.0) {
    //  Conditions Initiales
    for (b_jcol_0 = 0; b_jcol_0 < 7; b_jcol_0++) {
      a[b_jcol_0] = x0[b_jcol_0];
    }

    a[7] = 0.0;
    a[8] = 0.0;
    a[9] = 0.0;
    a[10] = 0.0;
    a[11] = 0.0;
    a[12] = 0.0;
    b_jcol_0 = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      for (b_itilerow = 0; b_itilerow < 10; b_itilerow++) {
        b_this->poseBuffer[b_itilerow + b_jcol_0] = a[b_jcol];
      }

      b_jcol_0 += 6001;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    b_this->init = 1.0;
  }

  // Start for MATLABSystem: '<S238>/MATLAB System1'
  // this.BufferReset(reset,mp);
  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  // if new == this.generationNumber %new>
  if (b_this->bufferCount + 1.0 < 6001.0) {
    for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
      b_this->poseBuffer[(static_cast<int32_T>(b_this->bufferCount + 1.0) + 6001
                          * b_jcol_0) - 1] = poses[b_jcol_0];
    }

    // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
    b_this->bufferCount++;
    b_this->generationNumber++;
  } else {
    std::printf("%s\n", "Problem");
    std::fflush(stdout);
  }

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_itilerow = 0;
  exitg1 = false;
  while ((!exitg1) && (b_itilerow < 9)) {
    b_index = b_itilerow + 2;
    for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
      x[b_jcol_0] = (b_this->poseBuffer[(6001 * b_jcol_0 + b_itilerow) + 1] ==
                     b_this->emptyArray[b_jcol_0]);
    }

    y = true;
    b_jcol = 0;
    exitg2 = false;
    while ((!exitg2) && (b_jcol < 13)) {
      if (!x[b_jcol]) {
        y = false;
        exitg2 = true;
      } else {
        b_jcol++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_itilerow++;
    }
  }

  memset(&currentPose[0], 0, 130U * sizeof(real_T));
  b_jcol_0 = 0;
  b_jcol = 0;
  for (b_itilerow = 0; b_itilerow < 13; b_itilerow++) {
    // Start for MATLABSystem: '<S238>/MATLAB System1'
    for (b_index_0 = 0; b_index_0 < b_index; b_index_0++) {
      currentPose[b_index_0 + b_jcol_0] = b_this->poseBuffer[b_index_0 + b_jcol];
    }

    b_jcol_0 += 10;
    b_jcol += 6001;
  }

  if (isempty) {
    b_itilerow = 10 - b_index;
    for (b_jcol = 0; b_jcol <= b_itilerow; b_jcol++) {
      // Start for MATLABSystem: '<S238>/MATLAB System1'
      b_index_0 = b_index + b_jcol;
      for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
        a[b_jcol_0] = currentPose[(10 * b_jcol_0 + b_index) - 2];
      }

      for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
        currentPose[(b_index_0 + 10 * b_jcol_0) - 1] = a[b_jcol_0];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  b_jcol_0 = 0;
  for (b_jcol = 0; b_jcol < 13; b_jcol++) {
    // Start for MATLABSystem: '<S238>/MATLAB System1'
    x[b_jcol] = !(b_this->poseBuffer[b_jcol_0 + 10] == b_this->emptyArray[b_jcol]);
    b_jcol_0 += 6001;
  }

  y = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 13)) {
    if (!x[b_jcol]) {
      y = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  if (y) {
    b_jcol_0 = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      // Start for MATLABSystem: '<S238>/MATLAB System1'
      memcpy(&proc_control_B.b_this[b_jcol_0], &b_this->poseBuffer[b_jcol_0 + 1],
             6000U * sizeof(real_T));
      proc_control_B.b_this[b_jcol_0 + 6000] = b_this->emptyArray[b_jcol];
      b_jcol_0 += 6001;
    }

    // Start for MATLABSystem: '<S238>/MATLAB System1'
    memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this[0], 78013U * sizeof
           (real_T));
    b_this->bufferCount--;
  }

  //  Fonction qui verifie le target reached
  //  vérifier si la trajectoire est fini
  for (b_jcol_0 = 0; b_jcol_0 <= 4; b_jcol_0 += 2) {
    // Start for MATLABSystem: '<S238>/MATLAB System1'
    _mm_storeu_pd(&tmp_0[0], _mm_sub_pd(_mm_loadu_pd(&poses[b_jcol_0]),
      _mm_loadu_pd(&target[b_jcol_0])));
    tmp[0] = fabs(tmp_0[0]);
    tmp[1] = fabs(tmp_0[1]);
    tmp_1 = _mm_loadu_pd(&tmp[0]);
    _mm_storeu_pd(&y_0[b_jcol_0], tmp_1);
  }

  for (b_jcol_0 = 6; b_jcol_0 < 7; b_jcol_0++) {
    // Start for MATLABSystem: '<S238>/MATLAB System1'
    y_0[b_jcol_0] = fabs(poses[b_jcol_0] - target[b_jcol_0]);
  }

  // Start for MATLABSystem: '<S238>/MATLAB System1'
  b_this->done = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 7)) {
    if (!(y_0[b_jcol] < 0.001)) {
      b_this->done = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  *isReached = false;

  // Start for MATLABSystem: '<S238>/MATLAB System1'
  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  check flip
    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    mp[3] = mesuredPose[3];
    mp[4] = mesuredPose[4];
    mp[5] = mesuredPose[5];
    mp[6] = mesuredPose[6];
    if (((target[3] * mesuredPose[3] + target[4] * mesuredPose[4]) + target[5] *
         mesuredPose[5]) + target[6] * mesuredPose[6] < 0.0) {
      mp[3] = -mesuredPose[3];
      mp[4] = -mesuredPose[4];
      mp[5] = -mesuredPose[5];
      mp[6] = -mesuredPose[6];
    }

    //  calculer l'erreur angulaire.
    // =================================================================
    //  Fonction qui calcule l'angle entre 2 quaternion
    qRel[0] = ((target[3] * mp[3] - -target[4] * mp[4]) - -target[5] * mp[5]) -
      -target[6] * mp[6];
    tmp_1 = _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(target[3]),
      _mm_loadu_pd(&mp[4])), _mm_mul_pd(_mm_set_pd(-target[5], -target[4]),
      _mm_set1_pd(mp[3]))), _mm_sub_pd(_mm_mul_pd(_mm_set_pd(-target[6],
      -target[5]), _mm_set_pd(mp[4], mp[6])), _mm_mul_pd(_mm_set_pd(-target[4],
      -target[6]), _mm_loadu_pd(&mp[5]))));
    _mm_storeu_pd(&qRel[1], tmp_1);
    qRel[3] = (target[3] * mp[6] + mp[3] * -target[6]) + (-target[4] * mp[5] -
      -target[5] * mp[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    tmp_1 = _mm_sub_pd(_mm_loadu_pd(&target[0]), _mm_loadu_pd(&mp[0]));
    _mm_storeu_pd(&target_0[0], tmp_1);
    target_0[2] = target[2] - mp[2];
    if ((proc_control_norm_pr3(target_0) < b_this->linearConvergence) && (2.0 *
         rt_atan2d_snf(proc_control_norm_pr3(&qRel[1]), qRel[0]) <
         b_this->quaternionConvergence)) {
      b_this->targetReachedCount++;
      *isReached = (b_this->targetReachedCount * 0.1 >= b_this->TargetThreshold);
    } else {
      b_this->targetReachedCount = 0.0;
    }
  }
}

void proc_control::proc_contro_TrimPlant_resetImpl(TrimPlant_proc_control_T
  *b_this)
{
  static const real_T tmp[13] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const int8_T tmp_0[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  // Start for MATLABSystem: '<S71>/MATLAB System'
  //  reset  fonction
  // ------------------------------------------------------------------------------ 
  //  Initialize / reset discrete-state properties
  b_this->qkm[0] = 1.0;
  b_this->qkt[0] = 1.0;
  b_this->qkm[1] = 0.0;
  b_this->qkt[1] = 0.0;
  b_this->qkm[2] = 0.0;
  b_this->qkt[2] = 0.0;
  b_this->qkm[3] = 0.0;
  b_this->qkt[3] = 0.0;
  memcpy(&b_this->xl[0], &tmp[0], 13U * sizeof(real_T));
  memset(&b_this->constValues[0], 0, 38U * sizeof(real_T));
  b_this->init = false;

  //  initialize matrix size
  for (int32_T i = 0; i < 169; i++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    b_this->C[i] = tmp_0[i];
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memset(&b_this->D[0], 0, 104U * sizeof(real_T));
  memset(&b_this->Bc[0], 0, 104U * sizeof(real_T));
}

void proc_control::proc_control_eul2quat(const real_T eul[3], real_T q[4])
{
  real_T c_idx_0;
  real_T c_idx_1;
  real_T c_idx_2;
  real_T q_tmp;
  real_T q_tmp_0;
  real_T s_idx_0;
  real_T s_idx_1;
  real_T s_idx_2;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  s_idx_2 = eul[0] / 2.0;
  s_idx_0 = s_idx_2;
  c_idx_0 = s_idx_2;
  s_idx_2 = eul[1] / 2.0;
  s_idx_1 = s_idx_2;
  c_idx_1 = s_idx_2;
  s_idx_2 = eul[2] / 2.0;
  c_idx_0 = cos(c_idx_0);
  s_idx_0 = sin(s_idx_0);
  c_idx_1 = cos(c_idx_1);
  s_idx_1 = sin(s_idx_1);
  c_idx_2 = cos(s_idx_2);
  s_idx_2 = sin(s_idx_2);
  q_tmp = c_idx_0 * c_idx_1;
  q_tmp_0 = s_idx_0 * s_idx_1;
  q[0] = q_tmp * c_idx_2 + q_tmp_0 * s_idx_2;
  q[1] = q_tmp * s_idx_2 - q_tmp_0 * c_idx_2;
  q_tmp = s_idx_0 * c_idx_1;
  q_tmp_0 = c_idx_0 * s_idx_1;
  q[2] = q_tmp_0 * c_idx_2 + q_tmp * s_idx_2;
  q[3] = q_tmp * c_idx_2 - q_tmp_0 * s_idx_2;
}

void proc_control::proc_control_xgetrf_p(real_T A[36], int32_T ipiv[6], int32_T *
  info)
{
  int32_T ix;
  static const int32_T offsets[4] = { 0, 1, 2, 3 };

  for (ix = 0; ix <= 0; ix += 4) {
    _mm_storeu_si128((__m128i *)&ipiv[ix], _mm_add_epi32(_mm_add_epi32
      (_mm_set1_epi32(ix), _mm_loadu_si128((const __m128i *)&offsets[0])),
      _mm_set1_epi32(1)));
  }

  for (ix = 4; ix < 6; ix++) {
    ipiv[ix] = ix + 1;
  }

  *info = 0;
  for (int32_T b_j = 0; b_j < 5; b_j++) {
    real_T smax;
    int32_T c;
    int32_T ipiv_tmp;
    int32_T iy;
    int32_T jj;
    int32_T jp1j;
    int32_T k;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    c = b_j * 7 + 2;
    jj = b_j * 7;
    iy = 6 - b_j;
    ix = 1;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    smax = fabs(A[jj]);
    for (k = 2; k <= iy; k++) {
      real_T s;
      s = fabs(A[(c + k) - 3]);
      if (s > smax) {
        ix = k;
        smax = s;
      }
    }

    if (A[(c + ix) - 3] != 0.0) {
      if (ix - 1 != 0) {
        ipiv_tmp = b_j + ix;
        ipiv[b_j] = ipiv_tmp;
        for (k = 0; k < 6; k++) {
          iy = k * 6 + b_j;
          smax = A[iy];
          ix = (k * 6 + ipiv_tmp) - 1;
          A[iy] = A[ix];
          A[ix] = smax;
        }
      }

      k = c - b_j;
      for (ix = c; ix <= k + 4; ix++) {
        A[ix - 1] /= A[jj];
      }
    } else {
      *info = b_j + 1;
    }

    jp1j = jj;
    jj += 6;
    k = 5 - b_j;
    for (ix = 0; ix < k; ix++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      smax = A[ix * 6 + jj];
      if (smax != 0.0) {
        int32_T d;

        // Start for MATLABSystem: '<S71>/MATLAB System'
        iy = jp1j + 8;
        d = (jp1j - b_j) + 12;
        for (ipiv_tmp = iy; ipiv_tmp <= d; ipiv_tmp++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          A[ipiv_tmp - 1] += A[((c + ipiv_tmp) - jp1j) - 9] * -smax;
        }
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jp1j += 6;
    }
  }

  if ((*info == 0) && (!(A[35] != 0.0))) {
    *info = 6;
  }
}

void proc_control::proc_control_mldivide_pr3(const real_T A[36], real_T B[48])
{
  real_T c_A[36];
  real_T temp;
  int32_T ipiv[6];
  int32_T b;
  int32_T b_i;
  int32_T b_info;
  int32_T b_j;
  int32_T ip;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memcpy(&c_A[0], &A[0], 36U * sizeof(real_T));
  proc_control_xgetrf_p(c_A, ipiv, &b_info);
  for (b_i = 0; b_i < 5; b_i++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    ip = ipiv[b_i];
    if (b_i + 1 != ip) {
      for (b_j = 0; b_j < 8; b_j++) {
        kAcol = 6 * b_j + b_i;
        temp = B[kAcol];
        tmp = (6 * b_j + ip) - 1;
        B[kAcol] = B[tmp];
        B[tmp] = temp;
      }
    }
  }

  for (b_j = 0; b_j < 8; b_j++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    ip = 6 * b_j - 1;
    for (b_i = 0; b_i < 6; b_i++) {
      kAcol = 6 * b_i - 1;
      tmp = (b_i + ip) + 1;
      if (B[tmp] != 0.0) {
        for (b_info = b_i + 2; b_info < 7; b_info++) {
          tmp_0 = b_info + ip;

          // Start for MATLABSystem: '<S71>/MATLAB System'
          B[tmp_0] -= c_A[b_info + kAcol] * B[tmp];
        }
      }
    }
  }

  for (b_j = 0; b_j < 8; b_j++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    ip = 6 * b_j;
    for (b_info = 5; b_info >= 0; b_info--) {
      kAcol = 6 * b_info;
      tmp = b_info + ip;
      temp = B[tmp];
      if (temp != 0.0) {
        B[tmp] = temp / c_A[b_info + kAcol];
        b = b_info - 1;
        for (b_i = 0; b_i <= b; b_i++) {
          tmp_0 = b_i + ip;
          B[tmp_0] -= c_A[b_i + kAcol] * B[tmp];
        }
      }
    }
  }
}

void proc_control::proc_control_quatmultiply(const real_T q[4], const real_T r[4],
  real_T qout[4])
{
  // Start for MATLABSystem: '<S71>/MATLAB System'
  qout[0] = ((q[0] * r[0] - q[1] * r[1]) - q[2] * r[2]) - q[3] * r[3];
  _mm_storeu_pd(&qout[1], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(q[0]),
    _mm_loadu_pd(&r[1])), _mm_mul_pd(_mm_set1_pd(r[0]), _mm_loadu_pd(&q[1]))),
    _mm_sub_pd(_mm_mul_pd(_mm_set_pd(r[1], q[2]), _mm_set_pd(q[3], r[3])),
               _mm_mul_pd(_mm_set_pd(q[1], r[2]), _mm_set_pd(r[3], q[3])))));
  qout[3] = (q[0] * r[3] + r[0] * q[3]) + (q[1] * r[2] - r[1] * q[2]);
}

void proc_control::proc_control_ft_6(const real_T ct[2166], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  real_T tmp_i;
  real_T tmp_j;
  real_T tmp_k;
  real_T tmp_l;
  real_T tmp_m;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_set_pd(ct[148], ct[144]),
    _mm_set_pd(ct[1697], ct[1693])));
  proc_control_B.t3179 = proc_control_B.dv48[0];
  proc_control_B.t3180 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_set_pd(ct[208],
    ct[202]), _mm_set_pd(ct[2043], ct[2041])), _mm_set_pd(ct[37], ct[40])));
  proc_control_B.t3181 = proc_control_B.dv48[0];
  proc_control_B.t3182 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t3183 = (ct[214] + ct[2042]) + ct[41];
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[1736], ct[1729]), _mm_set_pd(ct[2093], ct[2129])), _mm_set_pd
    (ct[1576], ct[1565])), _mm_set_pd(ct[828], ct[820])));
  proc_control_B.t3184 = proc_control_B.dv48[0];
  proc_control_B.t3185 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[1729], ct[1744]), _mm_set_pd(ct[2129], ct[2104])), _mm_set_pd
    (ct[1565], ct[1554])), _mm_set_pd(ct[1445], ct[825])));
  proc_control_B.t3186 = proc_control_B.dv48[0];
  proc_control_B.t3190 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[1744], ct[1736]), _mm_set_pd(ct[2104], ct[2093])), _mm_set_pd
    (ct[1554], ct[1576])), _mm_set_pd(ct[1451], ct[1442])));
  proc_control_B.t3191 = proc_control_B.dv48[0];
  proc_control_B.t3192 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_loadu_pd(&ct[1688]), _mm_set_pd(ct[2014], ct[1692])), _mm_set_pd(ct
    [2047], ct[139])), _mm_set_pd(ct[140], ct[143])));
  proc_control_B.t3196 = proc_control_B.dv48[0];
  proc_control_B.t3197 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[1698], ct[1690]), _mm_set1_pd(ct[1699])), _mm_set_pd(ct[149],
    ct[141])), _mm_set1_pd(ct[150])));
  proc_control_B.t3198 = proc_control_B.dv48[0];
  proc_control_B.t3199 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[1696], ct[1691]), _mm_set_pd(ct[2016], ct[1700])), _mm_set_pd
    (ct[2048], ct[142])), _mm_set_pd(ct[147], ct[151])));
  proc_control_B.t3200 = proc_control_B.dv48[0];
  proc_control_B.t3201 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_loadu_pd(&ct[1694]), _mm_set_pd(ct[1701], ct[2017])), _mm_set_pd(ct[146],
    ct[2049])), _mm_set_pd(ct[152], ct[145])));
  proc_control_B.t3202 = proc_control_B.dv48[0];
  proc_control_B.t3203 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[382], ct[283]), _mm_set_pd(ct[845], ct
    [1150])), _mm_set_pd(ct[1913], ct[1887])), _mm_set_pd(ct[2155], ct[46])),
    _mm_set_pd(ct[163], ct[153])), _mm_set_pd(ct[869], ct[856])));
  proc_control_B.t3204 = proc_control_B.dv48[0];
  proc_control_B.t3205 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[283], ct[1012]), _mm_set_pd(ct[730],
    ct[1369])), _mm_set_pd(ct[1904], ct[1880])), _mm_set_pd(ct[153], ct[21])),
    _mm_set_pd(ct[1595], ct[168])), _mm_set_pd(ct[857], ct[855])));
  proc_control_B.t3206 = proc_control_B.dv48[0];
  proc_control_B.t3207 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[583], ct[845]), _mm_set_pd(ct[1369],
    ct[1277])), _mm_set_pd(ct[1895], ct[1871])), _mm_set_pd(ct[168], ct[163])),
    _mm_set_pd(ct[1587], ct[1605])), _mm_set_pd(ct[868], ct[854])));
  proc_control_B.t3208 = proc_control_B.dv48[0];
  proc_control_B.t3209 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_sub_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[826], ct[788]), _mm_set_pd(ct[960], ct
    [894])), _mm_set_pd(ct[1118], ct[1066])), _mm_set_pd(ct[1197], ct[1189])),
    _mm_set_pd(ct[1285], ct[1264])), _mm_set_pd(ct[1359], ct[1328])), _mm_set_pd
    (ct[1669], ct[1638])), _mm_loadu_pd(&ct[1675])), _mm_set_pd(ct[1740], ct
    [1733])), _mm_set_pd(ct[1837], ct[1831])), _mm_set_pd(ct[1852], ct[1845])),
    _mm_set_pd(ct[1866], ct[1860])), _mm_set_pd(ct[1882], ct[1878])), _mm_set_pd
    (ct[1886], ct[1883])), _mm_set1_pd(ct[1922])), _mm_loadu_pd(&ct[2056])),
    _mm_set_pd(ct[2087], ct[2083])), _mm_set_pd(ct[2097], ct[2092])), _mm_set_pd
    (ct[2107], ct[2102])), _mm_set_pd(ct[2151], ct[2134])), _mm_set_pd(ct[2153],
    ct[2138])), _mm_set1_pd(ct[33])), _mm_set1_pd(ct[34])), _mm_set1_pd(ct[269])),
    _mm_set1_pd(ct[295])), _mm_set_pd(ct[314], ct[310])), _mm_set_pd(ct[352],
    ct[347])), _mm_set_pd(ct[413], ct[409])), _mm_set_pd(ct[426], ct[421])),
    _mm_set_pd(ct[437], ct[433])), _mm_set1_pd(ct[446])), _mm_set_pd(ct[457],
    ct[455])), _mm_set_pd(ct[463], ct[461])), _mm_set_pd(ct[468], ct[465])),
    _mm_set1_pd(ct[735])), _mm_set_pd(ct[836], ct[834])), _mm_set_pd(ct[848],
    ct[844])), _mm_set1_pd(ct[852])), _mm_set_pd(ct[1049], ct[1046])),
     _mm_set_pd(ct[1054], ct[1052])), _mm_set_pd(ct[1058], ct[1056])),
    _mm_set_pd(ct[1064], ct[1061])), _mm_set1_pd(ct[1070])), _mm_set1_pd(ct[1074])),
                _mm_set_pd(ct[1220], ct[1218])), _mm_set_pd(ct[1231], ct[1229])),
    _mm_set_pd(ct[1332], ct[1325])), _mm_set_pd(ct[1346], ct[1337])), _mm_set_pd
    (ct[1347], ct[1340])), _mm_set_pd(ct[1358], ct[1352])), _mm_set1_pd(ct[1388])),
     _mm_set1_pd(ct[1391])), _mm_set1_pd(ct[1463])), _mm_set1_pd(ct[1234])));
  proc_control_B.t3224 = proc_control_B.dv48[0];
  proc_control_B.t3225 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp = _mm_set1_pd(ct[2128]);
  tmp_0 = _mm_set1_pd(ct[732]);
  tmp_1 = _mm_set1_pd(ct[870]);
  tmp_2 = _mm_set1_pd(ct[1322]);
  tmp_e = _mm_loadu_pd(&ct[1591]);
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set1_pd(ct[1780]),
    _mm_set_pd(ct[1792], ct[1784])), _mm_set1_pd(ct[1804])), _mm_set1_pd(ct[1818])),
    _mm_set_pd(ct[1824], ct[1821])), _mm_set1_pd(ct[1964])), _mm_set_pd(ct[1970],
    ct[1966])), _mm_set1_pd(ct[2000])), _mm_set1_pd(ct[2019])), _mm_set_pd(ct
    [2026], ct[2021])), tmp), _mm_set_pd(ct[2143], ct[2136])), _mm_set1_pd(ct
    [172])), _mm_set_pd(ct[179], ct[174])), _mm_set1_pd(ct[191])), _mm_set_pd
    (ct[199], ct[195])), _mm_set_pd(ct[234], ct[236])), _mm_set1_pd(ct[256])),
    _mm_set1_pd(ct[260])), _mm_set1_pd(ct[385])), _mm_set_pd(ct[395], ct[389])),
    _mm_set1_pd(ct[429])), _mm_set1_pd(ct[513])), _mm_set_pd(ct[518], ct[515])),
    _mm_set1_pd(ct[552])), _mm_set1_pd(ct[610])), _mm_set_pd(ct[629], ct[616])),
    _mm_set_pd(ct[638], ct[629])), _mm_set_pd(ct[667], ct[634])), _mm_set_pd(ct
    [673], ct[667])), _mm_set1_pd(ct[680])), tmp_0), tmp_1), _mm_set1_pd(ct[916])),
    _mm_set_pd(ct[925], ct[919])), _mm_set1_pd(ct[940])), _mm_set_pd(ct[948],
    ct[944])), _mm_set1_pd(ct[976])), _mm_set1_pd(ct[983])), _mm_set1_pd(ct[1005])),
                _mm_set_pd(ct[1013], ct[1008])), _mm_set1_pd(ct[1021])),
    _mm_set_pd(ct[1031], ct[1026])), _mm_set1_pd(ct[1206])), _mm_set1_pd(ct[1212])),
    _mm_set1_pd(ct[1303])), _mm_set1_pd(ct[1315])), tmp_2), _mm_set_pd(ct[1342],
    ct[1338])), _mm_set_pd(ct[1443], ct[1444])), _mm_loadu_pd(&ct[1590])), tmp_e),
                _mm_set1_pd(ct[1598])), _mm_set1_pd(ct[1601])), _mm_set1_pd(ct
    [1603])), _mm_set_pd(ct[1621], ct[1611])));
  proc_control_B.t3228 = proc_control_B.dv48[0];
  proc_control_B.t3229 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set1_pd(ct[1769]),
    _mm_set_pd(ct[1791], ct[1777])), _mm_set1_pd(ct[1799])), _mm_set1_pd(ct[1807])),
    _mm_set_pd(ct[1814], ct[1811])), _mm_set1_pd(ct[1975])), _mm_set_pd(ct[1983],
    ct[1978])), _mm_set1_pd(ct[2002])), _mm_set1_pd(ct[2018])), _mm_set_pd(ct
    [2029], ct[2024])), tmp), _mm_set_pd(ct[2156], ct[2139])), _mm_set1_pd(ct
    [165])), _mm_set_pd(ct[180], ct[170])), _mm_set1_pd(ct[203])), _mm_set_pd
    (ct[221], ct[211])), _mm_set_pd(ct[236], ct[234])), _mm_set1_pd(ct[252])),
    _mm_set1_pd(ct[259])), _mm_set1_pd(ct[373])), _mm_set_pd(ct[396], ct[380])),
    _mm_set1_pd(ct[417])), _mm_set1_pd(ct[520])), _mm_set_pd(ct[528], ct[524])),
    _mm_set1_pd(ct[551])), _mm_set1_pd(ct[612])), _mm_set1_pd(ct[616])),
    _mm_set_pd(ct[638], ct[625])), _mm_set_pd(ct[643], ct[629])), _mm_set_pd(ct
    [646], ct[638])), _mm_set_pd(ct[667], ct[643])), tmp_0), tmp_1), _mm_set1_pd
    (ct[910])), _mm_set_pd(ct[924], ct[914])), _mm_set1_pd(ct[954])), _mm_set_pd
    (ct[971], ct[962])), _mm_set1_pd(ct[975])), _mm_set1_pd(ct[987])),
    _mm_set_pd(ct[994], ct[991])), _mm_set1_pd(ct[997])), _mm_set1_pd(ct[1020])),
    _mm_set_pd(ct[1035], ct[1029])), _mm_set1_pd(ct[1208])), _mm_set1_pd(ct[1210])),
    _mm_set1_pd(ct[1305])), _mm_set1_pd(ct[1309])), tmp_2), _mm_set_pd(ct[1360],
    ct[1353])), _mm_loadu_pd(&ct[1443])), _mm_set1_pd(ct[1590])), tmp_e),
                _mm_loadu_pd(&ct[1592])), _mm_set_pd(ct[1598], ct[1593])),
    _mm_set1_pd(ct[1186])), _mm_set_pd(ct[1628], ct[1625])));
  proc_control_B.t3230 = proc_control_B.dv48[0];
  proc_control_B.t3231 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp = _mm_set1_pd(ct[2144]);
  tmp_0 = _mm_set_pd(ct[235], ct[231]);
  tmp_1 = _mm_set1_pd(ct[737]);
  tmp_2 = _mm_set1_pd(ct[873]);
  tmp_e = _mm_set1_pd(ct[1343]);
  tmp_f = _mm_loadu_pd(&ct[1447]);
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_sub_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set1_pd(ct[1772]),
    _mm_set_pd(ct[1781], ct[1776])), _mm_set1_pd(ct[1800])), _mm_set_pd(ct[1805],
    ct[1802])), _mm_set1_pd(ct[1808])), _mm_set1_pd(ct[1988])), _mm_set_pd(ct
    [1994], ct[1991])), _mm_set1_pd(ct[2007])), _mm_set_pd(ct[2011], ct[2009])),
    _mm_set1_pd(ct[2031])), tmp), _mm_set_pd(ct[2159], ct[2150])), _mm_set1_pd
    (ct[184])), _mm_set_pd(ct[192], ct[187])), _mm_set1_pd(ct[204])), _mm_set_pd
    (ct[215], ct[209])), tmp_0), _mm_set1_pd(ct[257])), _mm_set1_pd(ct[261])),
    _mm_set1_pd(ct[374])), _mm_set_pd(ct[386], ct[378])), _mm_set1_pd(ct[418])),
    _mm_set1_pd(ct[531])), _mm_set_pd(ct[537], ct[534])), _mm_set1_pd(ct[554])),
    _mm_set1_pd(ct[611])), _mm_set1_pd(ct[615])), _mm_set_pd(ct[619], ct[637])),
    _mm_set_pd(ct[637], ct[640])), _mm_set1_pd(ct[652])), _mm_set_pd(ct[679],
    ct[659])), tmp_1), tmp_2), _mm_set1_pd(ct[933])), _mm_set_pd(ct[941], ct[936])),
    _mm_set1_pd(ct[956])), _mm_set_pd(ct[965], ct[961])), _mm_set1_pd(ct[978])),
    _mm_set_pd(ct[984], ct[981])), _mm_set1_pd(ct[998])), _mm_set_pd(ct[1003],
    ct[1000])), _mm_set1_pd(ct[1006])), _mm_set1_pd(ct[1022])), _mm_set1_pd(ct
    [1207])), _mm_set1_pd(ct[1214])), _mm_set1_pd(ct[1304])), _mm_set1_pd(ct
    [1312])), tmp_e), _mm_set_pd(ct[1362], ct[1357])), tmp_f), _mm_set1_pd(ct
    [1604])), _mm_set1_pd(ct[1606])), _mm_set1_pd(ct[1612])), _mm_set_pd(ct[1622],
    ct[1616])), _mm_set_pd(ct[1624], ct[1627])), _mm_set1_pd(ct[1195])));
  proc_control_B.t3232 = proc_control_B.dv48[0];
  proc_control_B.t3233 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[1790], ct[1782]),
    _mm_set1_pd(ct[1795])), _mm_set1_pd(ct[1815])), _mm_set_pd(ct[1823], ct[1819])),
    _mm_set1_pd(ct[1826])), _mm_set_pd(ct[1969], ct[1965])), _mm_set1_pd(ct[1971])),
    _mm_set1_pd(ct[2006])), _mm_set_pd(ct[2025], ct[2020])), _mm_set1_pd(ct[2027])),
    _mm_set_pd(ct[2141], ct[2132])), tmp), _mm_set_pd(ct[177], ct[173])),
    _mm_set1_pd(ct[182])), _mm_set_pd(ct[197], ct[193])), _mm_set1_pd(ct[200])),
    tmp_0), _mm_set1_pd(ct[275])), _mm_set1_pd(ct[289])), _mm_set_pd(ct[393],
    ct[387])), _mm_set1_pd(ct[398])), _mm_set1_pd(ct[453])), _mm_set_pd(ct[516],
    ct[514])), _mm_set1_pd(ct[519])), _mm_set1_pd(ct[555])), _mm_set_pd(ct[637],
    ct[615])), _mm_set1_pd(ct[644])), _mm_set_pd(ct[656], ct[659])), _mm_set_pd
    (ct[659], ct[675])), _mm_set1_pd(ct[679])), _mm_set1_pd(ct[686])), tmp_1),
    tmp_2), _mm_set_pd(ct[923], ct[918])), _mm_set1_pd(ct[927])), _mm_set_pd(ct
    [947], ct[942])), _mm_set1_pd(ct[951])), _mm_set1_pd(ct[995])), _mm_set_pd
    (ct[1011], ct[1007])), _mm_set1_pd(ct[1015])), _mm_set1_pd(ct[1018])),
     _mm_set_pd(ct[1030], ct[1024])), _mm_set1_pd(ct[1032])), _mm_set1_pd(ct
    [1209])), _mm_set1_pd(ct[1216])), _mm_set1_pd(ct[1310])), _mm_set1_pd(ct
    [1319])), _mm_set_pd(ct[1329], ct[1324])), tmp_e), tmp_f), _mm_set1_pd(ct
    [1594])), _mm_set_pd(ct[1597], ct[1600])), _mm_set_pd(ct[1612], ct[1606])),
     _mm_set1_pd(ct[1616])), _mm_set1_pd(ct[1622])), _mm_set1_pd(ct[1623])));
  proc_control_B.t3234 = proc_control_B.dv48[0];
  proc_control_B.t3235 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp = _mm_set1_pd(ct[2160]);
  tmp_0 = _mm_set1_pd(ct[740]);
  tmp_1 = _mm_set1_pd(ct[876]);
  tmp_2 = _mm_set1_pd(ct[1363]);
  tmp_e = _mm_loadu_pd(&ct[1199]);
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_sub_pd(_mm_sub_pd(_mm_sub_pd
    (_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[1779], ct[1774]),
    _mm_set1_pd(ct[1783])), _mm_set_pd(ct[1803], ct[1801])), _mm_set1_pd(ct[1806])),
    _mm_set1_pd(ct[1820])), _mm_set_pd(ct[1992], ct[1989])), _mm_set1_pd(ct[1995])),
    _mm_set_pd(ct[2010], ct[2008])), _mm_set1_pd(ct[2012])), _mm_set1_pd(ct[2037])),
    _mm_set_pd(ct[2157], ct[2147])), tmp), _mm_set_pd(ct[190], ct[186])),
    _mm_set1_pd(ct[194])), _mm_set_pd(ct[213], ct[206])), _mm_set1_pd(ct[216])),
    _mm_set_pd(ct[230], ct[232])), _mm_set1_pd(ct[262])), _mm_set1_pd(ct[277])),
    _mm_set_pd(ct[384], ct[376])), _mm_set1_pd(ct[388])), _mm_set1_pd(ct[430])),
    _mm_set_pd(ct[536], ct[533])), _mm_set1_pd(ct[538])), _mm_set1_pd(ct[556])),
    _mm_set1_pd(ct[613])), _mm_set_pd(ct[628], ct[622])), _mm_set_pd(ct[664],
    ct[628])), _mm_set_pd(ct[666], ct[658])), _mm_set_pd(ct[678], ct[666])),
    _mm_set1_pd(ct[687])), tmp_0), tmp_1), _mm_set_pd(ct[939], ct[934])),
    _mm_set1_pd(ct[943])), _mm_set_pd(ct[964], ct[958])), _mm_set1_pd(ct[966])),
    _mm_set_pd(ct[982], ct[980])), _mm_set1_pd(ct[985])), _mm_set_pd(ct[1002],
    ct[999])), _mm_set1_pd(ct[1004])), _mm_set1_pd(ct[1025])), _mm_set1_pd(ct
    [1037])), _mm_set1_pd(ct[1211])), _mm_set1_pd(ct[1217])), _mm_set1_pd(ct
    [1306])), _mm_set1_pd(ct[1320])), _mm_set_pd(ct[1349], ct[1345])), tmp_2),
    _mm_set_pd(ct[1453], ct[1454])), _mm_set_pd(ct[1617], ct[1607])),
    _mm_set1_pd(ct[1183])), _mm_set1_pd(ct[1187])), _mm_set1_pd(ct[1191])),
    tmp_e), _mm_set_pd(ct[1203], ct[1200])));
  proc_control_B.t3236 = proc_control_B.dv48[0];
  proc_control_B.t3237 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_sub_pd(_mm_sub_pd(_mm_sub_pd
    (_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[1788], ct[1773]),
    _mm_set1_pd(ct[1796])), _mm_set_pd(ct[1812], ct[1809])), _mm_set1_pd(ct[1816])),
    _mm_set1_pd(ct[1827])), _mm_set_pd(ct[1982], ct[1977])), _mm_set1_pd(ct[1985])),
    _mm_set_pd(ct[2028], ct[2022])), _mm_set1_pd(ct[2030])), _mm_set1_pd(ct[2035])),
    _mm_set_pd(ct[2152], ct[2137])), tmp), _mm_set_pd(ct[176], ct[167])),
    _mm_set1_pd(ct[183])), _mm_set_pd(ct[219], ct[207])), _mm_set1_pd(ct[224])),
    _mm_set_pd(ct[232], ct[230])), _mm_set1_pd(ct[276])), _mm_set1_pd(ct[302])),
    _mm_set_pd(ct[392], ct[377])), _mm_set1_pd(ct[400])), _mm_set1_pd(ct[454])),
    _mm_set_pd(ct[527], ct[523])), _mm_set1_pd(ct[530])), _mm_set1_pd(ct[557])),
    _mm_set_pd(ct[654], ct[628])), _mm_set_pd(ct[658], ct[651])), _mm_set_pd(ct
    [666], ct[654])), _mm_set_pd(ct[669], ct[658])), _mm_set1_pd(ct[678])),
    _mm_set1_pd(ct[681])), tmp_0), tmp_1), _mm_set_pd(ct[921], ct[912])),
    _mm_set1_pd(ct[928])), _mm_set_pd(ct[969], ct[957])), _mm_set1_pd(ct[974])),
    _mm_set_pd(ct[992], ct[988])), _mm_set1_pd(ct[996])), _mm_set1_pd(ct[1016])),
                _mm_set_pd(ct[1033], ct[1027])), _mm_set1_pd(ct[1036])),
    _mm_set1_pd(ct[1040])), _mm_set1_pd(ct[1213])), _mm_set1_pd(ct[1215])),
    _mm_set1_pd(ct[1313])), _mm_set1_pd(ct[1316])), _mm_set_pd(ct[1333], ct[1326])),
    tmp_2), _mm_loadu_pd(&ct[1453])), _mm_set_pd(ct[1599], ct[1596])),
    _mm_set1_pd(ct[1602])), _mm_set_pd(ct[1196], ct[1191])), _mm_set_pd(ct[1199],
    ct[1196])), tmp_e), _mm_set1_pd(ct[1203])));
  proc_control_B.t3238 = proc_control_B.dv48[0];
  proc_control_B.t3239 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_sub_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[488], ct[425]),
    _mm_set_pd(ct[812], ct[757])), _mm_set_pd(ct[917], ct[858])), _mm_set_pd(ct
    [1095], ct[1023])), _mm_set_pd(ct[1405], ct[1380])), _mm_set_pd(ct[1427],
    ct[1395])), _mm_set_pd(ct[1449], ct[1416])), _mm_set_pd(ct[1663], ct[1614])),
    _mm_set_pd(ct[1683], ct[1679])), _mm_set_pd(ct[1737], ct[1730])), _mm_set_pd
    (ct[1751], ct[1748])), _mm_set_pd(ct[1834], ct[1828])), _mm_set_pd(ct[1849],
    ct[1842])), _mm_set_pd(ct[1863], ct[1857])), _mm_set_pd(ct[1874], ct[1870])),
    _mm_set_pd(ct[1894], ct[1891])), _mm_set_pd(ct[1901], ct[1896])), _mm_set_pd
    (ct[1903], ct[1898])), _mm_set_pd(ct[1911], ct[1902])), _mm_set_pd(ct[1917],
    ct[1910])), _mm_set_pd(ct[2045], ct[2046])), _mm_set_pd(ct[2067], ct[2064])),
    _mm_set_pd(ct[2085], ct[2081])), _mm_set_pd(ct[2095], ct[2090])), _mm_set_pd
    (ct[2105], ct[2100])), _mm_loadu_pd(&ct[2110])), _mm_loadu_pd(&ct[2112])),
    _mm_set_pd(ct[2117], ct[2114])), _mm_set_pd(ct[2119], ct[2116])), _mm_set_pd
    (ct[2123], ct[2118])), _mm_set_pd(ct[2126], ct[2122])), _mm_set1_pd(ct[22])),
    _mm_set_pd(ct[23], ct[24])), _mm_set_pd(ct[29], ct[26])), _mm_set_pd(ct[30],
    ct[27])), _mm_set_pd(ct[266], ct[263])), _mm_set_pd(ct[272], ct[267])),
    _mm_set_pd(ct[292], ct[278])), _mm_set_pd(ct[298], ct[282])), _mm_set_pd(ct
    [312], ct[307])), _mm_loadu_pd(&ct[317])), _mm_set_pd(ct[322], ct[320])),
    _mm_set_pd(ct[349], ct[345])), _mm_set_pd(ct[411], ct[407])), _mm_set_pd(ct
    [423], ct[419])), _mm_set_pd(ct[435], ct[431])), _mm_set_pd(ct[444], ct[442])),
    _mm_set_pd(ct[448], ct[445])), _mm_set_pd(ct[473], ct[469])), _mm_set_pd(ct
    [475], ct[472])), _mm_set_pd(ct[477], ct[474])), _mm_set1_pd(ct[691])),
    _mm_set_pd(ct[703], ct[696])), _mm_set_pd(ct[704], ct[697])), _mm_loadu_pd
    (&ct[705])), _mm_set_pd(ct[715], ct[707])), _mm_set_pd(ct[717], ct[710])),
    _mm_set_pd(ct[718], ct[720])), _mm_set_pd(ct[729], ct[726])), _mm_set1_pd
    (ct[859])), _mm_set_pd(ct[860], ct[861])), _mm_set_pd(ct[866], ct[863])),
    _mm_set_pd(ct[867], ct[864])), _mm_set_pd(ct[881], ct[882])), _mm_set_pd(ct
    [1075], ct[1076])), _mm_set1_pd(ct[1077])), _mm_set_pd(ct[1235], ct[1233])),
    _mm_loadu_pd(&ct[1237])), _mm_set_pd(ct[1242], ct[1239])), _mm_set_pd(ct
    [1245], ct[1243])), _mm_set1_pd(ct[1364])), _mm_loadu_pd(&ct[1365])),
    _mm_set_pd(ct[1372], ct[1367])), _mm_set_pd(ct[1373], ct[1370])), _mm_set_pd
    (ct[1377], ct[1371])), _mm_set_pd(ct[1378], ct[1374])), _mm_set_pd(ct[1383],
    ct[1376])), _mm_set_pd(ct[1386], ct[1384])), _mm_set_pd(ct[1462], ct[1458])),
    _mm_set_pd(ct[1464], ct[1459])), _mm_set_pd(ct[1633], ct[1630])), _mm_set_pd
    (ct[1634], ct[1631])), _mm_loadu_pd(&ct[1636])), _mm_set_pd(ct[1639], ct
    [1640])), _mm_set_pd(ct[1495], ct[1496])), _mm_set_pd(ct[1501], ct[1499])));
  proc_control_B.t3240 = proc_control_B.dv48[0];
  proc_control_B.t3241 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t3242 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[456] + ct[521]) + ct[853]) + ct[1001]) + ct[1145]) + ct[1438]) +
    ct[1460]) + ct[1471]) + ct[1672]) + ct[1684]) + ct[1743]) + ct[1840]) + ct
    [1855]) + ct[1869]) + ct[1897]) + ct[1907]) + ct[1908]) + ct[1915]) + ct
    [1916]) + ct[1920]) + ct[2044]) + ct[2072]) + ct[2089]) + ct[2099]) + ct
    [2109]) + ct[2115]) + ct[2120]) + ct[2121]) + ct[2124]) + ct[2125]) + ct
    [2127]) + ct[25]) + ct[26]) + ct[28]) + ct[30]) + ct[284]) + ct[288]) + ct
    [297]) + ct[301]) + ct[316]) + ct[321]) + ct[323]) + ct[354]) + ct[416]) +
    ct[428]) + ct[439]) + ct[447]) + ct[450]) + ct[476]) + ct[478]) + ct[479]) +
    ct[695]) + ct[701]) + ct[710]) + ct[714]) + ct[716]) + ct[724]) + ct[725]) +
    ct[729]) + ct[862]) + ct[863]) + ct[865]) + ct[867]) + ct[880]) + ct[1075])
    + ct[1076]) + ct[1240]) + ct[1241]) + ct[1244]) + ct[1246]) + ct[1368]) +
                  ct[1375]) + ct[1376]) + ct[1379]) + ct[1381]) + ct[1382]) +
             ct[1385]) + ct[1386]) + ct[1466]) + ct[1467]) + ct[1632]) + ct[1635])
       + ct[1641]) + ct[1642]) - ct[1497]) - ct[1500];
  tmp = _mm_set_pd(ct[1778], ct[1771]);
  tmp_0 = _mm_set_pd(ct[171], ct[166]);
  tmp_1 = _mm_set1_pd(ct[229]);
  tmp_2 = _mm_set_pd(ct[381], ct[375]);
  tmp_e = _mm_set_pd(ct[915], ct[911]);
  tmp_f = _mm_set1_pd(ct[1019]);
  tmp_3 = _mm_set_pd(ct[1789], ct[1775]);
  tmp_4 = _mm_set_pd(ct[1813], ct[1810]);
  tmp_5 = _mm_set_pd(ct[198], ct[188]);
  tmp_7 = _mm_set1_pd(ct[255]);
  tmp_8 = _mm_set_pd(ct[394], ct[379]);
  tmp_b = _mm_set_pd(ct[946], ct[935]);
  tmp_c = _mm_set1_pd(ct[233]);
  tmp_d = _mm_set_pd(ct[1017], ct[1010]);
  tmp_g = _mm_loadu_pd(&ct[225]);
  tmp_h = _mm_loadu_pd(&ct[401]);
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(tmp,
    tmp_3), tmp_4), _mm_set_pd(ct[1963], ct[1960])), _mm_set_pd(ct[1967], ct
    [1961])), _mm_set_pd(ct[2005], ct[2003])), tmp_0), _mm_set_pd(ct[178], ct
    [169])), _mm_set_pd(ct[189], ct[185])), tmp_5), tmp_g), tmp_1), _mm_loadu_pd
    (&ct[239])), tmp_7), tmp_2), tmp_8), tmp_h), _mm_set_pd(ct[512], ct[509])),
    _mm_set_pd(ct[517], ct[511])), _mm_loadu_pd(&ct[542])), _mm_set_pd(ct[648],
    ct[627])), _mm_set_pd(ct[671], ct[631])), _mm_set1_pd(ct[821])), _mm_set1_pd
    (ct[830])), tmp_e), _mm_set_pd(ct[922], ct[913])), _mm_set_pd(ct[937], ct
    [932])), tmp_b), tmp_c), _mm_set_pd(ct[993], ct[989])), tmp_d), tmp_f),
    _mm_set_pd(ct[1167], ct[1169])), _mm_set_pd(ct[1174], ct[1171])), _mm_set_pd
    (ct[620], ct[641])), _mm_set_pd(ct[674], ct[655])), _mm_set1_pd(ct[1446])),
     _mm_set1_pd(ct[1455])), _mm_set_pd(ct[1613], ct[1609])), _mm_set_pd(ct[1620],
    ct[1610])));
  proc_control_B.t3210 = proc_control_B.dv48[0];
  proc_control_B.t3211 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_6 = _mm_set1_pd(ct[238]);
  tmp_9 = _mm_set_pd(ct[665], ct[623]);
  tmp_a = _mm_set_pd(ct[668], ct[650]);
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_sub_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(tmp,
    _mm_set_pd(ct[1786], ct[1794])), _mm_set_pd(ct[1822], ct[1825])), _mm_set_pd
    (ct[1979], ct[1976])), _mm_set_pd(ct[1981], ct[1984])), _mm_set_pd(ct[2032],
    ct[2034])), tmp_0), _mm_set_pd(ct[175], ct[181])), _mm_set_pd(ct[212], ct
    [205])), _mm_set_pd(ct[217], ct[222])), tmp_g), tmp_1), _mm_loadu_pd(&ct[244])),
    _mm_set1_pd(ct[258])), tmp_2), _mm_set_pd(ct[390], ct[397])), tmp_h),
    _mm_set_pd(ct[525], ct[522])), _mm_set_pd(ct[526], ct[529])), _mm_loadu_pd
    (&ct[545])), _mm_set_pd(ct[627], ct[648])), _mm_set_pd(ct[631], ct[671])),
    _mm_set1_pd(ct[822])), _mm_set1_pd(ct[831])), tmp_e), _mm_set_pd(ct[920],
    ct[926])), _mm_set_pd(ct[963], ct[955])), _mm_set_pd(ct[968], ct[973])),
    tmp_6), _mm_set_pd(ct[1009], ct[1014])), tmp_f), _mm_set_pd(ct[1038], ct
    [1039])), _mm_set_pd(ct[1172], ct[1168])), _mm_set_pd(ct[1173], ct[1170])),
    tmp_9), tmp_a), _mm_set1_pd(ct[1452])), _mm_set1_pd(ct[1456])), _mm_set_pd
    (ct[1190], ct[1194])), _mm_set_pd(ct[1192], ct[1201])));
  proc_control_B.t3212 = proc_control_B.dv48[0];
  proc_control_B.t3213 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(tmp_3,
    _mm_set_pd(ct[1793], ct[1785])), tmp_4), _mm_set_pd(ct[1997], ct[1990])),
    _mm_set_pd(ct[1998], ct[1996])), _mm_set_pd(ct[2036], ct[2033])), tmp_5),
    _mm_set_pd(ct[201], ct[196])), _mm_set_pd(ct[220], ct[210])), _mm_set_pd(ct
    [223], ct[218])), tmp_6), _mm_loadu_pd(&ct[250])), _mm_loadu_pd(&ct[253])),
    tmp_7), tmp_8), _mm_set_pd(ct[399], ct[391])), _mm_loadu_pd(&ct[405])),
    _mm_set_pd(ct[540], ct[535])), _mm_set_pd(ct[541], ct[539])), _mm_loadu_pd
    (&ct[549])), tmp_9), tmp_a), _mm_set1_pd(ct[829])), _mm_set1_pd(ct[832])),
                tmp_b), _mm_set_pd(ct[950], ct[945])), _mm_set_pd(ct[970], ct
    [959])), _mm_set_pd(ct[972], ct[967])), tmp_c), tmp_d), _mm_set_pd(ct[1034],
    ct[1028])), _mm_set1_pd(ct[1041])), _mm_set_pd(ct[1193], ct[1188])),
    _mm_set_pd(ct[1198], ct[1202])), _mm_set_pd(ct[641], ct[620])), _mm_set_pd
    (ct[655], ct[674])), _mm_set1_pd(ct[1450])), _mm_set1_pd(ct[1457])),
    _mm_set_pd(ct[1618], ct[1608])), _mm_set_pd(ct[1619], ct[1615])));
  proc_control_B.t3214 = proc_control_B.dv48[0];
  proc_control_B.t3215 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_sub_pd
    (_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_sub_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[89], ct[59]), _mm_set_pd(ct[93], ct[106])), _mm_set1_pd(ct
    [110])), _mm_set_pd(ct[134], ct[130])), _mm_set1_pd(ct[138])), _mm_set_pd
    (ct[157], ct[161])), _mm_set1_pd(ct[164])), _mm_set_pd(ct[566], ct[560])),
    _mm_set1_pd(ct[657])), _mm_set1_pd(ct[690])), _mm_set_pd(ct[754], ct[748])),
    _mm_set_pd(ct[758], ct[763])), _mm_set1_pd(ct[765])), _mm_set1_pd(ct[823])),
    _mm_set_pd(ct[87], ct[62])), _mm_set_pd(ct[94], ct[102])), _mm_set1_pd(ct
    [109])), _mm_set1_pd(ct[986])), _mm_loadu_pd(&ct[1080])), _mm_loadu_pd(&ct
    [1113])), _mm_set1_pd(ct[1115])), _mm_set1_pd(ct[1117])), _mm_set1_pd(ct
    [1121])), _mm_set1_pd(ct[1126])), _mm_set1_pd(ct[1134])), _mm_set_pd(ct[1275],
    ct[1273])), _mm_set_pd(ct[1286], ct[1284])), _mm_set1_pd(ct[1314])),
    _mm_set1_pd(ct[1321])), _mm_set_pd(ct[755], ct[747])), _mm_set_pd(ct[756],
    ct[764])), _mm_set1_pd(ct[766])), _mm_set_pd(ct[1407], ct[1403])),
    _mm_set1_pd(ct[1410])), _mm_set_pd(ct[1421], ct[1424])), _mm_set1_pd(ct[1425])),
                _mm_set1_pd(ct[1480])), _mm_set1_pd(ct[1483])), _mm_set_pd(ct
    [1505], ct[1503])), _mm_set1_pd(ct[1569])));
  proc_control_B.t3216 = proc_control_B.dv48[0];
  proc_control_B.t3217 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_sub_pd
    (_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_sub_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[74], ct[57]), _mm_set1_pd(ct[82])), _mm_set_pd(ct[108], ct[91])),
    _mm_set_pd(ct[121], ct[117])), _mm_set1_pd(ct[124])), _mm_set1_pd(ct[154])),
    _mm_set_pd(ct[162], ct[158])), _mm_set_pd(ct[575], ct[565])), _mm_set1_pd
    (ct[617])), _mm_set1_pd(ct[685])), _mm_set_pd(ct[771], ct[767])),
    _mm_set1_pd(ct[775])), _mm_set_pd(ct[785], ct[781])), _mm_set1_pd(ct[817])),
    _mm_set_pd(ct[73], ct[56])), _mm_set1_pd(ct[78])), _mm_set_pd(ct[107], ct[90])),
    _mm_set1_pd(ct[953])), _mm_set_pd(ct[1098], ct[1092])), _mm_set1_pd(ct[1119])),
    _mm_set1_pd(ct[1127])), _mm_set1_pd(ct[1129])), _mm_set1_pd(ct[1130])),
    _mm_set1_pd(ct[1138])), _mm_loadu_pd(&ct[1146])), _mm_set_pd(ct[1280], ct
    [1274])), _mm_loadu_pd(&ct[1287])), _mm_set1_pd(ct[1308])), _mm_set1_pd(ct
    [1317])), _mm_set_pd(ct[773], ct[768])), _mm_set1_pd(ct[778])), _mm_set_pd
     (ct[786], ct[782])), _mm_set_pd(ct[1399], ct[1396])), _mm_set1_pd(ct[1401])),
    _mm_set1_pd(ct[1428])), _mm_set_pd(ct[1437], ct[1431])), _mm_set1_pd(ct[1474])),
     _mm_set1_pd(ct[1481])), _mm_set_pd(ct[1519], ct[1514])), _mm_set1_pd(ct
    [1588])));
  proc_control_B.t3218 = proc_control_B.dv48[0];
  proc_control_B.t3219 = proc_control_B.dv48[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv48[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_sub_pd
    (_mm_sub_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_sub_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set1_pd(ct[55]), _mm_set_pd(ct[61], ct[69])), _mm_set_pd(ct[100], ct[76])),
    _mm_set1_pd(ct[116])), _mm_set_pd(ct[118], ct[122])), _mm_set1_pd(ct[129])),
    _mm_set_pd(ct[137], ct[133])), _mm_set_pd(ct[576], ct[573])), _mm_set1_pd
    (ct[614])), _mm_set1_pd(ct[649])), _mm_set1_pd(ct[787])), _mm_set_pd(ct[790],
    ct[797])), _mm_set_pd(ct[806], ct[798])), _mm_set1_pd(ct[816])), _mm_set1_pd
    (ct[54])), _mm_set_pd(ct[58], ct[72])), _mm_set_pd(ct[104], ct[75])),
    _mm_set1_pd(ct[931])), _mm_loadu_pd(&ct[1108])), _mm_set1_pd(ct[1123])),
    _mm_set1_pd(ct[1131])), _mm_set1_pd(ct[1136])), _mm_set1_pd(ct[1140])),
    _mm_set1_pd(ct[1143])), _mm_loadu_pd(&ct[1152])), _mm_set_pd(ct[1282], ct
    [1279])), _mm_loadu_pd(&ct[1289])), _mm_set1_pd(ct[1307])), _mm_set1_pd(ct
    [1311])), _mm_set1_pd(ct[789])), _mm_set_pd(ct[791], ct[796])), _mm_set_pd
     (ct[805], ct[799])), _mm_set1_pd(ct[1411])), _mm_set_pd(ct[1412], ct[1415])),
    _mm_set1_pd(ct[1426])), _mm_set_pd(ct[1441], ct[1434])), _mm_set1_pd(ct[1472])),
     _mm_set1_pd(ct[1475])), _mm_set_pd(ct[1530], ct[1528])), _mm_set1_pd(ct
    [1589])));
  proc_control_B.t3245 = (ct[308] + ct[319]) + ct[350];
  tmp_i =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.t3245 + ct
    [467]) + ct[532]) + ct[553]) + ct[592]) + ct[609]) + ct[632]) + ct[738]) +
    ct[741]) + ct[1702]) + ct[1703]) + ct[1704]) + ct[1711]) + ct[1713]) + ct
    [1715]) + ct[1719]) + ct[1721]) + ct[1725]) + ct[1745]) + ct[1746]) + ct
    [1747]) + ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct[1761]) + ct
    [1763]) + ct[1765]) + ct[1767]) + ct[1797]) + ct[2050]) + ct[2051]) + ct
    [2052]) + ct[2058]) + ct[2061]) + ct[2062]) + ct[2065]) + ct[2066]) + ct
    [2068]) + ct[2070]) + ct[2073]) + ct[2074]) + ct[2075]) + ct[2077]) + ct
    [2079]) + ct[2161]) + ct[64]) + ct[65]) + ct[79]) + ct[95]) + ct[119]) + ct
    [123]) + ct[131]) + ct[135]) + ct[324]) + ct[325]) + ct[326]) + ct[333]) +
    ct[335]) + ct[337]) + ct[342]) + ct[355]) + ct[356]) + ct[357]) + ct[360]) +
    ct[361]) + ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) + ct[558]) +
    ct[562]) + ct[571]) + ct[580]) + ct[584]) + ct[586]) + ct[590]) + ct[593]) +
    ct[595]) + ct[599]) + ct[603]) + ct[607]) + ct[630]) + ct[660]) + ct[670]) +
    ct[682]) + ct[751]) + ct[761]) + ct[769]) + ct[774]) + ct[877]) - ct[63]) -
    ct[66]) - ct[77]) - ct[97]) + ct[1078]) + ct[1087]) + ct[1090]) + ct[1096])
    + ct[1116]) + ct[1125]) + ct[1148]) + ct[1155]) + ct[1165]) + ct[1178]) +
    ct[1271]) + ct[1272]) + ct[1278]) + ct[1283]) + ct[1291]) + ct[1293]) + ct
                    [1297]) + ct[1301]) - ct[749]) - ct[759]) - ct[770]) - ct
               [776]) + ct[1397]) + ct[1400]) + ct[1404]) + ct[1408]) + ct[1470])
         + ct[1478]) + ct[1502]) + ct[1510]) + ct[1512]) + ct[1517]) + ct[1534];
  proc_control_B.t3243 = ((((((((tmp_i + ct[1538]) + ct[1542]) + ct[1545]) + ct
    [1549]) + ct[1559]) + ct[1564]) + ct[1577]) + ct[1652]) + ct[1657];
  tmp_j =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[371] + ct[383]) + ct
    [414]) + ct[467]) + ct[553]) + ct[568]) + ct[592]) + ct[653]) + ct[684]) +
    ct[738]) + ct[750]) + ct[1705]) + ct[1706]) + ct[1707]) + ct[1712]) + ct
    [1716]) + ct[1717]) + ct[1722]) + ct[1723]) + ct[1727]) + ct[1745]) + ct
    [1746]) + ct[1747]) + ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct
    [1761]) + ct[1763]) + ct[1765]) + ct[1767]) + ct[1797]) + ct[2053]) + ct
    [2054]) + ct[2055]) + ct[2058]) + ct[2062]) + ct[2063]) + ct[2065]) + ct
    [2069]) + ct[2070]) + ct[2071]) + ct[2073]) + ct[2076]) + ct[2077]) + ct
    [2078]) + ct[2080]) + ct[2146]) + ct[65]) + ct[79]) + ct[83]) + ct[98]) +
    ct[119]) + ct[123]) + ct[155]) + ct[159]) + ct[327]) + ct[328]) + ct[329]) +
    ct[334]) + ct[338]) + ct[339]) + ct[343]) + ct[355]) + ct[356]) + ct[357]) +
    ct[360]) + ct[361]) + ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) +
    ct[562]) + ct[567]) + ct[571]) + ct[577]) + ct[586]) + ct[588]) + ct[590]) +
    ct[595]) + ct[597]) + ct[601]) + ct[603]) + ct[605]) + ct[618]) + ct[639]) +
    ct[661]) + ct[683]) + ct[752]) + ct[760]) + ct[792]) + ct[800]) + ct[874]) -
    ct[63]) - ct[77]) - ct[80]) - ct[96]) + ct[1082]) + ct[1085]) + ct[1103]) +
    ct[1105]) + ct[1122]) + ct[1135]) + ct[1154]) + ct[1162]) + ct[1176]) + ct
    [1180]) + ct[1272]) + ct[1276]) + ct[1278]) + ct[1281]) + ct[1293]) + ct
                   [1295]) + ct[1297]) + ct[1299]) - ct[753]) - ct[762]) - ct
              [794]) - ct[801]) + ct[1413]) + ct[1417]) + ct[1419]) + ct[1422])
        + ct[1468]) + ct[1486]) + ct[1506]) + ct[1508]) + ct[1525];
  proc_control_B.t3244 = ((((((((((tmp_j + ct[1527]) + ct[1536]) + ct[1547]) +
    ct[1553]) + ct[1556]) + ct[1558]) + ct[1562]) + ct[1573]) + ct[1583]) + ct
    [1650]) + ct[1661];
  tmp_k =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.t3245 + ct
    [371]) + ct[383]) + ct[414]) + ct[532]) + ct[568]) + ct[609]) + ct[632]) +
    ct[653]) + ct[684]) + ct[741]) + ct[750]) + ct[1708]) + ct[1709]) + ct[1710])
    + ct[1714]) + ct[1718]) + ct[1720]) + ct[1724]) + ct[1726]) + ct[1728]) +
    ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct[1761]) + ct[1763]) + ct
    [1765]) + ct[1767]) + ct[1797]) + ct[2050]) + ct[2051]) + ct[2052]) + ct
    [2053]) + ct[2054]) + ct[2055]) + ct[2061]) + ct[2063]) + ct[2066]) + ct
    [2068]) + ct[2069]) + ct[2071]) + ct[2074]) + ct[2075]) + ct[2076]) + ct
    [2078]) + ct[2079]) + ct[2080]) + ct[2131]) + ct[64]) + ct[83]) + ct[95]) +
    ct[98]) + ct[131]) + ct[135]) + ct[155]) + ct[159]) + ct[330]) + ct[331]) +
    ct[332]) + ct[336]) + ct[340]) + ct[341]) + ct[344]) + ct[360]) + ct[361]) +
    ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) + ct[558]) + ct[567]) +
    ct[577]) + ct[580]) + ct[584]) + ct[588]) + ct[593]) + ct[597]) + ct[599]) +
    ct[601]) + ct[605]) + ct[607]) + ct[621]) + ct[633]) + ct[642]) + ct[672]) +
    ct[777]) + ct[783]) + ct[795]) + ct[804]) + ct[871]) - ct[66]) - ct[80]) -
    ct[96]) - ct[97]) + ct[1093]) + ct[1099]) + ct[1101]) + ct[1110]) + ct[1132])
    + ct[1141]) + ct[1159]) + ct[1160]) + ct[1184]) + ct[1204]) + ct[1271]) +
    ct[1276]) + ct[1281]) + ct[1283]) + ct[1291]) + ct[1295]) + ct[1299]) + ct
                   [1301]) - ct[779]) - ct[784]) - ct[793]) - ct[802]) + ct[1429])
             + ct[1432]) + ct[1435]) + ct[1439]) + ct[1476]) + ct[1484]) + ct
        [1515]) + ct[1520]) + ct[1523]) + ct[1531]) + ct[1540];
  proc_control_B.t3245 = ((((((((tmp_k + ct[1551]) + ct[1567]) + ct[1570]) + ct
    [1571]) + ct[1579]) + ct[1581]) + ct[1585]) + ct[1654]) + ct[1659];
  proc_control_B.t3247 = ct[11] * ct[1787];
  proc_control_B.t3247_tmp = ct[9] * ct[1757];
  proc_control_B.t3247_tmp_o = ct[10] * ct[1770];
  tmp_l =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[1755] + ct[1756]) + ct
    [1758]) + ct[1760]) + ct[1762]) + ct[1764]) + ct[1766]) + ct[1768]) + ct
    [1798]) + ct[1925]) + ct[1926]) + ct[1927]) + ct[1928]) + ct[1929]) + ct
    [1931]) + ct[1932]) + ct[1933]) + ct[1934]) + ct[1936]) + ct[1937]) + ct
    [1938]) + ct[1939]) + ct[1940]) + ct[1942]) + ct[1943]) + ct[1944]) + ct
    [1945]) + ct[1946]) + ct[1948]) + ct[1949]) + ct[1950]) + ct[1951]) + ct
    [1952]) + ct[1954]) + ct[1955]) + ct[1956]) + ct[1957]) + ct[1958]) + ct
    [1959]) + ct[1972]) + ct[1973]) + ct[1986]) + ct[2001]) + ct[2135]) + ct
    [2149]) + ct[2162]) + ct[43]) + ct[44]) + ct[45]) + ct[47]) + ct[48]) + ct
    [49]) + ct[50]) + ct[51]) + ct[52]) + ct[53]) + ct[68]) + ct[70]) + ct[85])
    + ct[88]) + ct[99]) + ct[105]) + ct[111]) + ct[112]) + ct[113]) + ct[114]) +
    ct[115]) + ct[120]) + ct[125]) + ct[126]) + ct[127]) + ct[128]) + ct[132]) +
    ct[136]) + ct[156]) + ct[160]) + ct[228]) + ct[242]) + ct[247]) + ct[363]) +
    ct[364]) + ct[365]) + ct[367]) + ct[369]) + ct[372]) + ct[404]) + ct[480]) +
    ct[481]) + ct[482]) + ct[483]) + ct[484]) + ct[485]) + ct[486]) + ct[487]) +
    ct[489]) + ct[490]) + ct[491]) + ct[492]) + ct[493]) + ct[494]) + ct[495]) +
    ct[496]) + ct[497]) + ct[498]) + ct[500]) + ct[501]) + ct[502]) + ct[503]) +
    ct[504]) + ct[505]) + ct[506]) + ct[507]) + ct[508]) + ct[544]) + ct[547]) +
                 ct[548]) + ct[561]) + ct[564]) + ct[570]) + ct[574]) + ct[579])
           + ct[582]) + ct[585]) + ct[587]) + ct[589]) + ct[591]) + ct[594]) +
     ct[596]) + ct[598];
  tmp_m =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[904] + ct[905]) + ct
    [907]) + ct[908]) + ct[909]) + ct[929]) + ct[930]) + ct[952]) + ct[977]) +
    ct[1079]) + ct[1084]) + ct[1086]) + ct[1088]) + ct[1091]) + ct[1094]) + ct
    [1097]) + ct[1100]) + ct[1102]) + ct[1104]) + ct[1107]) + ct[1111]) + ct
    [1120]) + ct[1124]) + ct[1128]) + ct[1133]) + ct[1137]) + ct[1142]) + ct
    [1149]) + ct[1156]) + ct[1157]) + ct[1161]) + ct[1163]) + ct[1164]) + ct
    [1166]) + ct[1177]) + ct[1179]) + ct[1181]) + ct[1185]) + ct[1205]) + ct
    [1249]) + ct[1250]) + ct[1252]) + ct[1253]) + ct[1254]) + ct[1255]) + ct
    [1256]) + ct[1258]) + ct[1259]) + ct[1260]) + ct[1261]) + ct[1262]) + ct
    [1263]) + ct[1265]) + ct[1266]) + ct[1267]) + ct[1268]) + ct[1269]) - ct[559])
    - ct[563]) - ct[569]) - ct[572]) - ct[578]) - ct[581]) + ct[1292]) + ct[1294])
    + ct[1296]) + ct[1298]) + ct[1300]) + ct[1302]) - ct[693]) - ct[712]) - ct
    [731]) - ct[9] * ct[64]) - ct[9] * ct[83]) - ct[9] * ct[95]) - ct[9] * ct[98])
    - ct[10] * ct[65]) - ct[10] * ct[79]) - ct[10] * ct[83]) - ct[10] * ct[98])
    - ct[11] * ct[64]) - ct[11] * ct[65]) - ct[11] * ct[79]) - ct[11] * ct[95])
    + ct[1398]) + ct[1402]) + ct[1406]) + ct[1409]) + ct[1414]) + ct[1418]) +
    ct[1420]) + ct[1423]) + ct[1430]) + ct[1433]) + ct[1436]) + ct[1440]) + ct
    [1469]) + ct[1473]) + ct[1477]) + ct[1479]) + ct[1485]) + ct[1487]) - ct[10]
    * ct[752]) - ct[10] * ct[760]) - ct[11] * ct[751]) - ct[11] * ct[761]) - ct
    [11] * ct[769]) - ct[11] * ct[774]) + ct[10] * ct[1488]) + ct[9] * ct[1490])
                      + ct[11] * ct[1489]) + ct[9] * ct[1493]) + ct[11] * ct
                    [1492]) + ct[10] * ct[1494]) + ct[1504]) + ct[1507]) + ct
                [1509]) + ct[1511]) + ct[1513]) + ct[1516]) + ct[1518]) + ct
           [1522]) + ct[1524]) + ct[1526]) + ct[1529]) + ct[1533]) + ct[1535]) +
     ct[1537]) + ct[1539];
  proc_control_B.t3247 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_l
    + ct[600]) + ct[602]) + ct[604]) + ct[606]) + ct[608]) + ct[624]) + ct[626])
    + ct[635]) + ct[636]) + ct[645]) + ct[647]) + ct[662]) + ct[663]) + ct[676])
    + ct[677]) + ct[688]) + ct[689]) + ct[733]) + ct[739]) + ct[742]) + ct[9] *
    ct[66]) + ct[9] * ct[80]) + ct[9] * ct[96]) + ct[9] * ct[97]) + ct[10] * ct
    [63]) + ct[10] * ct[77]) + ct[10] * ct[80]) + ct[10] * ct[96]) + ct[11] *
    ct[63]) + ct[11] * ct[66]) + ct[11] * ct[77]) + ct[11] * ct[97]) + ct[10] *
    ct[753]) + ct[10] * ct[762]) + ct[11] * ct[749]) + ct[11] * ct[759]) + ct[11]
    * ct[770]) + ct[11] * ct[776]) + ct[11] * ct[807]) + ct[11] * ct[808]) + ct
    [10] * ct[813]) + ct[11] * ct[810]) + ct[10] * ct[814]) + ct[11] * ct[811])
    + ct[872]) + ct[875]) + ct[878]) + ct[883]) + ct[884]) + ct[885]) + ct[886])
    + ct[887]) + ct[888]) + ct[889]) + ct[891]) + ct[892]) + ct[893]) - ct[67])
                  - ct[71]) - ct[84]) - ct[86]) - ct[101]) - ct[103]) + ct[896])
            + ct[897]) + ct[898]) + ct[899]) + ct[900]) + ct[901]) + ct[902]) +
      ct[903]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_m + ct
    [1541]) + ct[1544]) + ct[1546]) + ct[1548]) + ct[1550]) + ct[1552]) + ct
    [1555]) + ct[1557]) + ct[1560]) + ct[1561]) + ct[1563]) + ct[1566]) + ct
    [1568]) + ct[1572]) + ct[1574]) + ct[1575]) + ct[1578]) + ct[1580]) + ct
    [1582]) + ct[1584]) + ct[1586]) - ct[9] * ct[621]) - ct[9] * ct[633]) - ct[9]
    * ct[642]) - ct[9] * ct[672]) - ct[10] * ct[618]) - ct[10] * ct[639]) - ct
    [10] * ct[661]) - ct[10] * ct[683]) - ct[11] * ct[630]) - ct[11] * ct[660])
    - ct[11] * ct[670]) - ct[11] * ct[682]) + ct[10] * ct[1757] * ct[411]) +
    proc_control_B.t3247_tmp_o * ct[416]) + ct[11] * ct[1757] * ct[407]) +
    proc_control_B.t3247 * ct[416]) + ct[11] * ct[1770] * ct[419]) +
    proc_control_B.t3247 * ct[423]) + proc_control_B.t3247_tmp * ct[447]) +
    proc_control_B.t3247_tmp * ct[450]) + proc_control_B.t3247_tmp_o * ct[444])
    + proc_control_B.t3247_tmp_o * ct[448]) + proc_control_B.t3247 * ct[442]) +
    proc_control_B.t3247 * ct[445]) + ct[1643]) + ct[1645]) + ct[1646]) + ct
                    [1647]) + ct[1648]) + ct[1649]) + ct[1651]) + ct[1653]) +
               ct[1656]) + ct[1658]) + ct[1660]) + ct[1662]) + ct[9] * ct[1770] *
           ct[862]) + ct[9] * ct[1787] * ct[865]) + proc_control_B.t3247_tmp_o *
         ct[859]) + ct[10] * ct[1787] * ct[866]) + proc_control_B.t3247 * ct[859])
      + proc_control_B.t3247 * ct[863]));
  memset(&Anq[0], 0, 39U * sizeof(real_T));
  tmp = _mm_set_pd(-1.0, 1.0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&Anq[39], _mm_add_pd(_mm_set_pd(ct[1968], -ct[1993]), _mm_mul_pd
    (_mm_set_pd(ct[2004], ct[2013]), tmp)));
  Anq[41] = -ct[1962] + ct[1980];
  Anq[42] = 0.0;
  Anq[43] = ct[246];
  Anq[44] = ct[248];
  Anq[45] = ct[249];
  proc_control_B.t3247_tmp = ct[13] * ct[16] * ct[1817];
  proc_control_B.t3247_tmp_o = ct[12] * ct[16] * ct[1817];
  Anq[46] = (((-proc_control_B.t3179 * proc_control_B.t3215 *
               proc_control_B.t3247 - proc_control_B.t3180 *
               proc_control_B.t3237 * proc_control_B.t3247) -
              proc_control_B.t3196 * proc_control_B.t3232 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_o * proc_control_B.dv48[1] *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3245 * proc_control_B.t3247 * 2.0;
  Anq[47] = (((-proc_control_B.t3180 * proc_control_B.t3213 *
               proc_control_B.t3247 + proc_control_B.t3179 *
               proc_control_B.t3239 * proc_control_B.t3247) +
              proc_control_B.t3196 * proc_control_B.t3230 * proc_control_B.t3247)
             - proc_control_B.t3247_tmp * proc_control_B.dv48[0] *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_o *
    proc_control_B.t3244 * proc_control_B.t3247 * 2.0;
  Anq[48] = (((-proc_control_B.t3196 * proc_control_B.t3210 *
               proc_control_B.t3247 + proc_control_B.t3180 *
               proc_control_B.t3228 * proc_control_B.t3247) -
              proc_control_B.t3179 * proc_control_B.t3235 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_o * proc_control_B.t3216 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_tmp = ct[1] * ct[5];
  proc_control_B.Anq_tmp = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_e = ct[0] * ct[9];
  proc_control_B.Anq_tmp_m = ct[6] * ct[7];
  proc_control_B.Anq_tmp_b = proc_control_B.Anq_tmp_m * ct[1856] * ct[81];
  proc_control_B.Anq_tmp_m = proc_control_B.Anq_tmp_m * ct[9] * ct[10] * ct[1841]
    * ct[81];
  proc_control_B.Anq_tmp_gr = proc_control_B.t3180 * proc_control_B.t3247;
  proc_control_B.Anq_tmp =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[499] + ct[815]) + ct
    [938]) + ct[1106]) + ct[1664]) - ct[1668]) - ct[1738]) + ct[1739]) - ct[1835])
    + ct[1836]) - ct[1850]) + ct[1851]) - ct[1864]) + ct[1865]) - ct[1879]) -
    ct[1889]) + ct[1890]) + ct[1905]) + ct[1912]) + ct[1918]) - ct[2130]) - ct
    [2133]) - ct[31]) - ct[32]) + ct[273]) - ct[274]) + ct[281]) - ct[287]) +
    ct[293]) + ct[300]) + ct[305]) + ct[306]) + ct[692]) + ct[708]) + ct[719]) +
                      ct[721]) - ct[734]) + ct[743]) + ct[744]) + ct[838]) - ct
                 [842]) - ct[847]) - ct[1223]) - ct[1228]) + ct[1236]) + ct[0] *
            ct[1848] * ct[81]) + proc_control_B.Anq_tmp_b) +
          proc_control_B.Anq_tmp * ct[10] * ct[92]) + proc_control_B.Anq_tmp *
         ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct[92])
       + proc_control_B.Anq_tmp_e * ct[10] * ct[17] * ct[81]) +
      proc_control_B.Anq_tmp_e * ct[11] * ct[17] * ct[81]) + ct[0] * ct[10] *
     ct[11] * ct[17] * ct[81]) + proc_control_B.Anq_tmp_m;
  Anq[49] = (((proc_control_B.t3196 * proc_control_B.t3224 *
               proc_control_B.t3247 - proc_control_B.t3179 *
               proc_control_B.t3242 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_gr) -
             proc_control_B.t3247_tmp * proc_control_B.t3214 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_o *
    proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_tmp = ct[1] * ct[2];
  proc_control_B.Anq_tmp_e = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_c = ct[3] * ct[9];
  proc_control_B.Anq_tmp_g = ct[7] * ct[8];
  proc_control_B.Anq_tmp_tmp_p = ct[3] * ct[4];
  proc_control_B.Anq_tmp_p = proc_control_B.Anq_tmp_tmp_p * ct[9];
  proc_control_B.Anq_tmp_a = ct[2] * ct[9];
  proc_control_B.Anq_tmp_f = proc_control_B.Anq_tmp_g * ct[1856] * ct[60];
  proc_control_B.Anq_tmp_g = proc_control_B.Anq_tmp_g * ct[10] * ct[11] * ct
    [1841] * ct[60];
  proc_control_B.Anq_tmp_e =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[772] + ct[879]) + ct
    [1044]) + ct[1626]) - ct[1629]) - ct[1731]) + ct[1732]) + ct[1749]) - ct
    [1829]) + ct[1830]) - ct[1843]) + ct[1844]) - ct[1858]) + ct[1859]) + ct
    [1872]) + ct[1875]) - ct[1877]) - ct[1881]) + ct[1892]) + ct[1899]) - ct
    [2145]) - ct[2148]) - ct[35]) - ct[36]) + ct[265]) + ct[268]) - ct[279]) +
    ct[280]) - ct[290]) + ct[294]) + ct[303]) + ct[304]) + ct[698]) + ct[699]) +
                       ct[711]) + ct[727]) - ct[736]) + ct[745]) + ct[746]) -
                  ct[833]) - ct[840]) + ct[843]) - ct[1219]) - ct[1225]) + ct
             [1232]) + ct[3] * ct[1848] * ct[60]) + proc_control_B.Anq_tmp_f) +
          proc_control_B.Anq_tmp_e * ct[10] * ct[92]) + proc_control_B.Anq_tmp_e
         * ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct
        [92]) + proc_control_B.Anq_tmp_c * ct[10] * ct[17] * ct[60]) +
      proc_control_B.Anq_tmp_c * ct[11] * ct[17] * ct[60]) + ct[3] * ct[10] *
     ct[11] * ct[17] * ct[60]) + proc_control_B.Anq_tmp_g;
  proc_control_B.Anq_tmp_m +=
    (((((((((((((((((((((((((((((((((((((((((((((((((((ct[510] + ct[837]) + ct
    [979]) + ct[1139]) + ct[1670]) - ct[1671]) - ct[1741]) + ct[1742]) - ct[1838])
    + ct[1839]) - ct[1853]) + ct[1854]) - ct[1867]) + ct[1868]) - ct[1884]) -
    ct[1888]) + ct[1890]) + ct[1906]) + ct[1914]) + ct[1919]) - ct[2140]) - ct
    [2142]) - ct[31]) - ct[32]) + ct[270]) - ct[274]) + ct[286]) - ct[287]) +
    ct[296]) + ct[299]) + ct[305]) + ct[306]) + ct[694]) + ct[709]) + ct[722]) +
                     ct[723]) - ct[734]) + ct[743]) + ct[744]) + ct[838]) - ct
                [841]) - ct[849]) - ct[1224]) - ct[1230]) + ct[1236]) + ct[2] *
           ct[1848] * ct[81]) + proc_control_B.Anq_tmp_b) +
         proc_control_B.Anq_tmp_p * ct[10] * ct[92]) + proc_control_B.Anq_tmp_p *
        ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp_p * ct[10] * ct[11] * ct
       [92]) + proc_control_B.Anq_tmp_a * ct[10] * ct[17] * ct[81]) +
     proc_control_B.Anq_tmp_a * ct[11] * ct[17] * ct[81]) + ct[2] * ct[10] * ct
    [11] * ct[17] * ct[81];
  proc_control_B.Anq_tmp_b = proc_control_B.t3179 * proc_control_B.t3247;
  Anq[50] = ((proc_control_B.t3247_tmp_o * proc_control_B.t3212 *
              proc_control_B.t3247 * 2.0 + -proc_control_B.t3196 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_e) -
             proc_control_B.t3247_tmp * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (-proc_control_B.t3180 *
    proc_control_B.t3241 * proc_control_B.t3247 + proc_control_B.Anq_tmp_m *
    proc_control_B.Anq_tmp_b);
  proc_control_B.Anq_tmp_tmp = ct[0] * ct[4];
  proc_control_B.Anq_tmp_c = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_p = ct[5] * ct[9];
  proc_control_B.Anq_tmp_c =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[803] + ct[895]) + ct
    [1083]) + ct[1644]) - ct[1655]) - ct[1734]) + ct[1735]) + ct[1750]) - ct
    [1832]) + ct[1833]) - ct[1846]) + ct[1847]) - ct[1861]) + ct[1862]) + ct
    [1873]) + ct[1875]) - ct[1876]) - ct[1885]) + ct[1893]) + ct[1900]) - ct
    [2154]) - ct[2158]) - ct[35]) - ct[36]) + ct[264]) + ct[271]) - ct[279]) +
    ct[285]) - ct[290]) + ct[291]) + ct[303]) + ct[304]) + ct[700]) + ct[702]) +
                       ct[713]) + ct[728]) - ct[736]) + ct[745]) + ct[746]) -
                  ct[835]) - ct[839]) + ct[843]) - ct[1221]) - ct[1226]) + ct
             [1232]) + ct[5] * ct[1848] * ct[60]) + proc_control_B.Anq_tmp_f) +
          proc_control_B.Anq_tmp_c * ct[10] * ct[92]) + proc_control_B.Anq_tmp_c
         * ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct
        [92]) + proc_control_B.Anq_tmp_p * ct[10] * ct[17] * ct[60]) +
      proc_control_B.Anq_tmp_p * ct[11] * ct[17] * ct[60]) + ct[5] * ct[10] *
     ct[11] * ct[17] * ct[60]) + proc_control_B.Anq_tmp_g;
  Anq[51] = (((-proc_control_B.t3179 * proc_control_B.t3225 *
               proc_control_B.t3247 + proc_control_B.t3196 *
               proc_control_B.t3240 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_gr) +
             proc_control_B.t3247_tmp_o * proc_control_B.t3231 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp *
    proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[52] = ct[1987] + ct[2015];
  tmp_0 = _mm_set1_pd(ct[12]);
  tmp_1 = _mm_set1_pd(4.0);
  tmp_2 = _mm_set_pd(1.0, -1.0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&Anq[53], _mm_sub_pd(_mm_add_pd(_mm_set_pd(ct[1968], ct[1962]),
    _mm_mul_pd(_mm_set_pd(ct[1999], ct[2023]), tmp_2)), _mm_mul_pd(_mm_mul_pd
    (tmp_0, _mm_loadu_pd(&ct[2164])), tmp_1)));
  Anq[55] = ct[1685];
  Anq[56] = 0.0;
  Anq[57] = ct[1687];
  Anq[58] = ct[248];
  tmp_e = _mm_set1_pd(proc_control_B.t3247);
  tmp_f = _mm_set1_pd(ct[16]);
  tmp_3 = _mm_set1_pd(ct[1817]);
  tmp_4 = _mm_set1_pd(2.0);
  tmp_5 = _mm_set_pd(proc_control_B.t3213, proc_control_B.t3215);
  tmp_7 = _mm_set_pd(proc_control_B.t3230, proc_control_B.t3232);
  tmp_8 = _mm_set_pd(proc_control_B.t3239, proc_control_B.t3237);
  tmp_b = _mm_set_pd(proc_control_B.t3217, proc_control_B.t3219);
  tmp_c = _mm_set1_pd(ct[14]);
  tmp_d = _mm_mul_pd(_mm_mul_pd(tmp_c, tmp_f), tmp_3);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_6 = _mm_set_pd(proc_control_B.t3244, proc_control_B.dv48[1]);
  tmp_9 = _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(ct[15]), tmp_f), tmp_3);
  tmp_a = _mm_set_pd(proc_control_B.dv48[0], proc_control_B.t3245);
  _mm_storeu_pd(&Anq[59], _mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(proc_control_B.t3198,
    -proc_control_B.t3203), tmp_5), tmp_e), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(proc_control_B.t3201), tmp_7), tmp_e), tmp)), _mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(proc_control_B.t3203, proc_control_B.t3198), tmp_8),
     tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_0,
    tmp_f), tmp_3), tmp_b), tmp_e), tmp_1)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_d, tmp_a), tmp_e), tmp_4)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_9,
    tmp_6), tmp_e), tmp_4)));
  proc_control_B.Anq_tmp_g = ct[14] * ct[16] * ct[1817];
  proc_control_B.Anq_tmp_p = ct[15] * ct[16] * ct[1817];
  Anq[61] = ((((proc_control_B.t3201 * proc_control_B.t3210 *
                proc_control_B.t3247 - proc_control_B.t3198 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3203 * proc_control_B.t3235 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
              proc_control_B.t3218 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp_o * proc_control_B.t3243 *
             proc_control_B.t3247 * 4.0) + proc_control_B.Anq_tmp_p *
    proc_control_B.t3216 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_a = proc_control_B.t3198 * proc_control_B.t3247;
  Anq[62] = ((((-proc_control_B.t3201 * proc_control_B.t3224 *
                proc_control_B.t3247 - proc_control_B.t3203 *
                proc_control_B.t3242 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_a) +
              proc_control_B.Anq_tmp_g * proc_control_B.t3214 *
              proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_o *
             proc_control_B.t3234 * proc_control_B.t3247 * 4.0) -
    proc_control_B.Anq_tmp_p * proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  Anq[63] = (((proc_control_B.t3247_tmp_o * proc_control_B.t3229 *
               proc_control_B.t3247 * 4.0 + proc_control_B.t3201 *
               proc_control_B.t3247 * proc_control_B.Anq_tmp_e) +
              proc_control_B.Anq_tmp_g * proc_control_B.t3236 *
              proc_control_B.t3247 * 2.0) + proc_control_B.Anq_tmp_p *
             proc_control_B.t3212 * proc_control_B.t3247 * 2.0) +
    (proc_control_B.t3203 * proc_control_B.t3247 * proc_control_B.Anq_tmp_m +
     proc_control_B.t3198 * proc_control_B.t3241 * proc_control_B.t3247);
  Anq[64] = ((((-proc_control_B.t3203 * proc_control_B.t3225 *
                proc_control_B.t3247 - proc_control_B.t3201 *
                proc_control_B.t3240 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_a) +
              proc_control_B.t3247_tmp_o * proc_control_B.t3211 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_g *
             proc_control_B.t3233 * proc_control_B.t3247 * 2.0) +
    proc_control_B.Anq_tmp_p * proc_control_B.t3231 * proc_control_B.t3247 * 2.0;
  Anq[65] = (ct[1980] + ct[2023]) - ct[13] * ct[2163] * 4.0;
  Anq[66] = ct[1953] + ct[2015];
  Anq[67] = (-ct[1974] + ct[1993]) - ct[13] * ct[2165] * 4.0;
  Anq[68] = ct[1686];
  Anq[69] = ct[249];
  Anq[70] = 0.0;
  Anq[71] = ct[1685];
  _mm_storeu_pd(&Anq[72], _mm_sub_pd(_mm_add_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(proc_control_B.t3202,
    -proc_control_B.t3199), tmp_5), tmp_e), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(proc_control_B.t3200), tmp_7), tmp_e), tmp_2)), _mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(proc_control_B.t3199, proc_control_B.t3202), tmp_8),
     tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd
    (ct[13]), tmp_f), tmp_3), tmp_b), tmp_e), tmp_1)), _mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_d, tmp_6), tmp_e), tmp_4)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_9, tmp_a), tmp_e), tmp_4)));
  Anq[74] = ((((-proc_control_B.t3200 * proc_control_B.t3210 *
                proc_control_B.t3247 - proc_control_B.t3202 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3199 * proc_control_B.t3235 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
              proc_control_B.t3216 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp * proc_control_B.t3243 *
             proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_p *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_a = proc_control_B.t3202 * proc_control_B.t3247;
  Anq[75] = ((((proc_control_B.t3200 * proc_control_B.t3224 *
                proc_control_B.t3247 - proc_control_B.t3199 *
                proc_control_B.t3242 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_a) -
              proc_control_B.t3247_tmp * proc_control_B.t3234 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_g *
             proc_control_B.t3238 * proc_control_B.t3247 * 2.0) -
    proc_control_B.Anq_tmp_p * proc_control_B.t3214 * proc_control_B.t3247 * 2.0;
  Anq[76] = (((proc_control_B.Anq_tmp_g * proc_control_B.t3212 *
               proc_control_B.t3247 * 2.0 + -proc_control_B.t3200 *
               proc_control_B.t3247 * proc_control_B.Anq_tmp_e) +
              proc_control_B.t3247_tmp * proc_control_B.t3229 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_p *
             proc_control_B.t3236 * proc_control_B.t3247 * 2.0) +
    (proc_control_B.t3199 * proc_control_B.t3247 * proc_control_B.Anq_tmp_m +
     proc_control_B.t3202 * proc_control_B.t3241 * proc_control_B.t3247);
  Anq[77] = ((((-proc_control_B.t3199 * proc_control_B.t3225 *
                proc_control_B.t3247 + proc_control_B.t3200 *
                proc_control_B.t3240 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_a) +
              proc_control_B.t3247_tmp * proc_control_B.t3211 *
              proc_control_B.t3247 * 4.0) + proc_control_B.Anq_tmp_g *
             proc_control_B.t3231 * proc_control_B.t3247 * 2.0) +
    proc_control_B.Anq_tmp_p * proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  _mm_storeu_pd(&Anq[78], _mm_sub_pd(_mm_add_pd(_mm_set_pd(ct[1974], -ct[1999]),
    _mm_set_pd(ct[2013], ct[2004])), _mm_mul_pd(_mm_mul_pd(tmp_c, _mm_loadu_pd
    (&ct[2163])), tmp_1)));
  Anq[80] = ct[1953] + ct[1987];
  Anq[81] = ct[1687];
  Anq[82] = ct[1686];
  Anq[83] = ct[246];
  Anq[84] = 0.0;
  tmp_0 = _mm_set_pd(proc_control_B.t3244, proc_control_B.t3245);
  tmp_1 = _mm_set_pd(proc_control_B.dv48[0], proc_control_B.dv48[1]);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&Anq[85], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[12], ct[13]), tmp_f), tmp_3), tmp_1),
    tmp_e), tmp_4), _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd
    (proc_control_B.t3179, -proc_control_B.t3180), tmp_5), tmp_e), _mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(proc_control_B.t3180, proc_control_B.t3179), tmp_8),
     tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.t3197),
    tmp_7), tmp_e), tmp_2))), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[12]), tmp_f), tmp_3), tmp_0), tmp_e), tmp_4)));
  Anq[87] = (((-proc_control_B.t3179 * proc_control_B.t3228 *
               proc_control_B.t3247 - proc_control_B.t3197 *
               proc_control_B.t3210 * proc_control_B.t3247) -
              proc_control_B.t3180 * proc_control_B.t3235 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp * proc_control_B.t3216 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_o *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  Anq[88] = (((proc_control_B.t3197 * proc_control_B.t3224 *
               proc_control_B.t3247 - proc_control_B.t3180 *
               proc_control_B.t3242 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_b) +
             proc_control_B.t3247_tmp_o * proc_control_B.t3214 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  Anq[89] = ((proc_control_B.t3247_tmp * proc_control_B.t3212 *
              proc_control_B.t3247 * 2.0 + -proc_control_B.t3197 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_e) +
             proc_control_B.t3247_tmp_o * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (proc_control_B.t3179 *
    proc_control_B.t3241 * proc_control_B.t3247 + proc_control_B.Anq_tmp_m *
    proc_control_B.Anq_tmp_gr);
  Anq[90] = (((-proc_control_B.t3180 * proc_control_B.t3225 *
               proc_control_B.t3247 + proc_control_B.t3197 *
               proc_control_B.t3240 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_b) +
             proc_control_B.t3247_tmp * proc_control_B.t3231 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_o *
    proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[91] = (ct[1491] + ct[1498]) + 1.0;
  _mm_storeu_pd(&Anq[92], _mm_add_pd(_mm_set_pd(ct[1924], ct[1921]), _mm_mul_pd
    (_mm_set_pd(ct[1941], ct[1947]), tmp)));
  Anq[94] = 0.0;
  Anq[95] = 0.0;
  Anq[96] = 0.0;
  Anq[97] = 0.0;
  tmp_f = _mm_set_pd(proc_control_B.t3244, proc_control_B.t3219);
  _mm_storeu_pd(&Anq[98], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_sub_pd
    (_mm_mul_pd(_mm_add_pd(_mm_sub_pd(_mm_set1_pd(ct[1744]), _mm_set1_pd(ct[39])),
    _mm_set1_pd(ct[1451])), _mm_mul_pd(_mm_set_pd(-proc_control_B.t3213,
    -proc_control_B.t3237), tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(ct[1247]),
    tmp_a), tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd
    (proc_control_B.t3182), tmp_7), tmp_e), tmp)), _mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[19], ct[17]), _mm_set_pd(ct[1521], ct
    [2040])), _mm_set_pd(proc_control_B.t3217, proc_control_B.t3215)), tmp_e),
    tmp)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_loadu_pd(&ct[19]),
    _mm_set1_pd(ct[1521])), tmp_f), tmp_e), tmp_2)), _mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[92], ct[20]), _mm_set_pd(ct[2040], ct[1521])),
     _mm_set_pd(proc_control_B.t3239, proc_control_B.dv48[1])), tmp_e)));
  proc_control_B.t3247_tmp = (ct[1744] - ct[39]) + ct[1451];
  proc_control_B.t3247_tmp_o = ct[17] * ct[2040];
  proc_control_B.Anq_tmp_b = ct[19] * ct[1521];
  proc_control_B.Anq_tmp_gr = ct[20] * ct[1521];
  Anq[100] = ((((proc_control_B.t3228 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3218 *
                 proc_control_B.t3247) + proc_control_B.t3182 *
                proc_control_B.t3210 * proc_control_B.t3247) +
               proc_control_B.t3247_tmp_o * proc_control_B.t3235 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_b *
              proc_control_B.t3243 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_gr * proc_control_B.t3216 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_g = proc_control_B.t3247_tmp * proc_control_B.t3247;
  Anq[101] = ((((proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_g - ct[1247] *
                 proc_control_B.t3214 * proc_control_B.t3247) -
                proc_control_B.t3182 * proc_control_B.t3224 *
                proc_control_B.t3247) + proc_control_B.t3247_tmp_o *
               proc_control_B.t3242 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_b * proc_control_B.t3234 *
              proc_control_B.t3247) - proc_control_B.Anq_tmp_gr *
    proc_control_B.t3238 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_p = ct[92] * ct[2040];
  Anq[102] = ((((-proc_control_B.t3241 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3236 *
                 proc_control_B.t3247) + proc_control_B.t3182 *
                proc_control_B.t3247 * proc_control_B.Anq_tmp_e) +
               proc_control_B.Anq_tmp_b * proc_control_B.t3229 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_gr *
              proc_control_B.t3212 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_p * proc_control_B.t3247 * proc_control_B.Anq_tmp_m;
  Anq[103] = ((((ct[1247] * proc_control_B.t3233 * proc_control_B.t3247 +
                 proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_g) -
                proc_control_B.t3182 * proc_control_B.t3240 *
                proc_control_B.t3247) + proc_control_B.t3247_tmp_o *
               proc_control_B.t3225 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_b * proc_control_B.t3211 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_gr *
    proc_control_B.t3231 * proc_control_B.t3247;
  Anq[104] = ct[1921] - ct[1947];
  Anq[105] = (ct[1482] + ct[1498]) + 1.0;
  Anq[106] = ct[1930] + ct[1935];
  Anq[107] = 0.0;
  Anq[108] = 0.0;
  Anq[109] = 0.0;
  Anq[110] = 0.0;
  tmp_3 = _mm_set1_pd(ct[1532]);
  tmp_4 = _mm_set_pd(proc_control_B.t3213, proc_control_B.t3237);
  tmp_c = _mm_set1_pd(ct[2039]);
  _mm_storeu_pd(&Anq[111], _mm_sub_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_sub_pd(_mm_mul_pd(_mm_add_pd(_mm_sub_pd(_mm_set1_pd(ct[1729]),
    _mm_set1_pd(ct[38])), _mm_set1_pd(ct[1445])), _mm_mul_pd(_mm_set_pd
    (-proc_control_B.t3230, proc_control_B.t3232), tmp_e)), _mm_mul_pd
                (_mm_mul_pd(_mm_set1_pd(ct[1248]), tmp_6), tmp_e)), _mm_mul_pd
     (_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.t3183), _mm_set_pd
    (proc_control_B.t3239, proc_control_B.t3215)), tmp_e), tmp_2)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(ct[17]), tmp_c), tmp_4), tmp_e)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(ct[18]), tmp_3), tmp_b), tmp_e)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(ct[20]), tmp_3), tmp_a), tmp_e)));
  proc_control_B.t3247_tmp = ct[92] * ct[2039];
  proc_control_B.Anq_tmp_b = (ct[1729] - ct[38]) + ct[1445];
  proc_control_B.Anq_tmp_gr = ct[18] * ct[1532];
  proc_control_B.Anq_tmp_g = ct[20] * ct[1532];
  Anq[113] = ((((proc_control_B.t3210 * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_b - ct[1248] * proc_control_B.t3216 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3235 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_gr * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_g *
              proc_control_B.t3218 * proc_control_B.t3247) +
    proc_control_B.t3247_tmp * proc_control_B.t3228 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_a = proc_control_B.t3247_tmp * proc_control_B.t3247;
  Anq[114] = ((((-proc_control_B.t3224 * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_b + ct[1248] * proc_control_B.t3238 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3242 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_gr * proc_control_B.t3234 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_g *
              proc_control_B.t3214 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_a;
  proc_control_B.Anq_tmp_f = ct[17] * ct[2039];
  Anq[115] = (((proc_control_B.t3183 * proc_control_B.t3247 *
                proc_control_B.Anq_tmp_m + proc_control_B.Anq_tmp_f *
                proc_control_B.t3241 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_gr * proc_control_B.t3229 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_g *
              proc_control_B.t3236 * proc_control_B.t3247) +
    (proc_control_B.Anq_tmp_b * proc_control_B.t3247 * proc_control_B.Anq_tmp_e
     - ct[1248] * proc_control_B.t3212 * proc_control_B.t3247);
  Anq[116] = ((((-proc_control_B.t3240 * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_b - ct[1248] * proc_control_B.t3231 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3225 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_gr * proc_control_B.t3211 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
              proc_control_B.t3233 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_a;
  _mm_storeu_pd(&Anq[117], _mm_add_pd(_mm_set_pd(ct[1930], ct[1924]), _mm_mul_pd
    (_mm_set_pd(ct[1935], ct[1941]), tmp)));
  Anq[119] = (ct[1482] + ct[1491]) + 1.0;
  Anq[120] = 0.0;
  Anq[121] = 0.0;
  Anq[122] = 0.0;
  Anq[123] = 0.0;
  _mm_storeu_pd(&Anq[124], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_sub_pd
    (_mm_sub_pd(_mm_mul_pd(_mm_add_pd(_mm_sub_pd(_mm_set1_pd(ct[1736]),
    _mm_set1_pd(ct[42])), _mm_set1_pd(ct[1442])), _mm_mul_pd(_mm_set_pd
    (proc_control_B.t3239, -proc_control_B.t3215), tmp_e)), _mm_mul_pd
                (_mm_mul_pd(_mm_set1_pd(ct[1251]), tmp_b), tmp_e)), _mm_mul_pd
     (_mm_mul_pd(_mm_set1_pd(proc_control_B.t3181), tmp_4), tmp_e)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[17], ct[18]), _mm_set_pd(ct
    [2038], ct[1543])), _mm_set_pd(proc_control_B.t3230, proc_control_B.dv48[1])),
                tmp_e), tmp_2)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[18], ct[19]), _mm_set1_pd(ct[1543])), tmp_0), tmp_e), tmp)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[19], ct[92]), _mm_set_pd(ct
    [1543], ct[2038])), _mm_set_pd(proc_control_B.dv48[0], proc_control_B.t3232)),
               tmp_e)));
  proc_control_B.Anq_tmp_b = (ct[1736] - ct[42]) + ct[1442];
  proc_control_B.Anq_tmp_gr = ct[18] * ct[1543];
  proc_control_B.Anq_tmp_g = ct[19] * ct[1543];
  proc_control_B.Anq_tmp_a = ct[92] * ct[2038];
  Anq[126] = ((((-proc_control_B.t3235 * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_b - ct[1251] * proc_control_B.t3243 *
                 proc_control_B.t3247) + proc_control_B.t3181 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_gr * proc_control_B.t3216 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
              proc_control_B.t3218 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_a * proc_control_B.t3210 * proc_control_B.t3247;
  proc_control_B.t3179 = proc_control_B.t3181 * proc_control_B.t3247;
  proc_control_B.t3180 = ct[17] * ct[2038];
  Anq[127] = ((((-proc_control_B.t3242 * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_b - ct[1251] * proc_control_B.t3234 *
                 proc_control_B.t3247) + proc_control_B.Anq_tmp *
                proc_control_B.t3179) + proc_control_B.t3180 *
               proc_control_B.t3224 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_gr * proc_control_B.t3238 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
    proc_control_B.t3214 * proc_control_B.t3247;
  Anq[128] = ((((proc_control_B.Anq_tmp_b * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_m + ct[1251] * proc_control_B.t3229 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3241 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_gr * proc_control_B.t3212 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
              proc_control_B.t3236 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_a * proc_control_B.t3247 * proc_control_B.Anq_tmp_e;
  Anq[129] = ((((-proc_control_B.t3225 * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_b + ct[1251] * proc_control_B.t3211 *
                 proc_control_B.t3247) + proc_control_B.Anq_tmp_c *
                proc_control_B.t3179) + proc_control_B.t3180 *
               proc_control_B.t3240 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_gr * proc_control_B.t3231 *
              proc_control_B.t3247) - proc_control_B.Anq_tmp_g *
    proc_control_B.t3233 * proc_control_B.t3247;
  Anq[130] = 0.0;
  Anq[131] = 0.0;
  Anq[132] = 0.0;
  Anq[133] = ct[1680];
  Anq[134] = ct[243];
  Anq[135] = ct[241];
  Anq[136] = ct[1681];
  tmp_3 = _mm_set1_pd(ct[92]);
  _mm_storeu_pd(&Anq[137], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(proc_control_B.t3191,
    -proc_control_B.t3186), _mm_set_pd(proc_control_B.t3217,
    proc_control_B.dv48[1])), tmp_e), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(proc_control_B.t3206, ct[1665]), tmp_5), tmp_e), tmp_2)),
     _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(proc_control_B.t3186,
    proc_control_B.t3191), tmp_f), tmp_e), tmp)), _mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[1665], proc_control_B.t3208), _mm_set_pd(proc_control_B.t3239,
    proc_control_B.t3232)), tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd
    (proc_control_B.t3208, proc_control_B.t3206), _mm_set_pd
    (proc_control_B.t3230, proc_control_B.t3237)), tmp_e), tmp)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_3, _mm_set1_pd(ct[2040])), tmp_a), tmp_e)));
  Anq[139] = ((((-proc_control_B.t3186 * proc_control_B.t3216 *
                 proc_control_B.t3247 + proc_control_B.t3208 *
                 proc_control_B.t3210 * proc_control_B.t3247) - ct[1665] *
                proc_control_B.t3235 * proc_control_B.t3247) +
               proc_control_B.t3191 * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.t3206 *
              proc_control_B.t3228 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_p * proc_control_B.t3218 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_b = proc_control_B.t3206 * proc_control_B.t3247;
  Anq[140] = ((((proc_control_B.t3186 * proc_control_B.t3238 *
                 proc_control_B.t3247 + proc_control_B.t3191 *
                 proc_control_B.t3234 * proc_control_B.t3247) -
                proc_control_B.t3208 * proc_control_B.t3224 *
                proc_control_B.t3247) - ct[1665] * proc_control_B.t3242 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp *
              proc_control_B.Anq_tmp_b) + proc_control_B.Anq_tmp_p *
    proc_control_B.t3214 * proc_control_B.t3247;
  Anq[141] = (((-proc_control_B.t3186 * proc_control_B.t3212 *
                proc_control_B.t3247 - proc_control_B.t3191 *
                proc_control_B.t3229 * proc_control_B.t3247) +
               proc_control_B.t3206 * proc_control_B.t3241 *
               proc_control_B.t3247) + ct[1665] * proc_control_B.t3247 *
              proc_control_B.Anq_tmp_m) + (proc_control_B.t3208 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_e + proc_control_B.Anq_tmp_p *
    proc_control_B.t3236 * proc_control_B.t3247);
  Anq[142] = ((((-proc_control_B.t3191 * proc_control_B.t3211 *
                 proc_control_B.t3247 - proc_control_B.t3186 *
                 proc_control_B.t3231 * proc_control_B.t3247) - ct[1665] *
                proc_control_B.t3225 * proc_control_B.t3247) -
               proc_control_B.t3208 * proc_control_B.t3240 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_c *
              proc_control_B.Anq_tmp_b) + proc_control_B.t3247_tmp_o *
    proc_control_B.t3233 * proc_control_B.t3247;
  Anq[143] = 0.0;
  Anq[144] = 0.0;
  Anq[145] = 0.0;
  Anq[146] = ct[1681];
  Anq[147] = ct[1682];
  Anq[148] = ct[243];
  Anq[149] = ct[227];
  _mm_storeu_pd(&Anq[150], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_sub_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(-proc_control_B.t3184), tmp_b),
    tmp_e), _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[1666], proc_control_B.t3209),
    tmp_5), tmp_e)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd
    (proc_control_B.t3192, ct[1666]), _mm_set_pd(proc_control_B.dv48[0],
    proc_control_B.t3237)), tmp_e), tmp_2)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(proc_control_B.t3204), tmp_7), tmp_e), tmp_2)), _mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(proc_control_B.t3209, proc_control_B.t3192),
                _mm_set_pd(proc_control_B.t3239, proc_control_B.t3245)), tmp_e)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_3, tmp_c), tmp_6), tmp_e)));
  Anq[152] = ((((proc_control_B.t3192 * proc_control_B.t3218 *
                 proc_control_B.t3247 - proc_control_B.t3204 *
                 proc_control_B.t3210 * proc_control_B.t3247) + ct[1666] *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3184 * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.t3209 *
              proc_control_B.t3235 * proc_control_B.t3247) +
    proc_control_B.t3247_tmp * proc_control_B.t3216 * proc_control_B.t3247;
  proc_control_B.t3247_tmp_o = ct[1666] * proc_control_B.t3247;
  Anq[153] = ((((proc_control_B.t3192 * proc_control_B.t3214 *
                 proc_control_B.t3247 - proc_control_B.t3184 *
                 proc_control_B.t3234 * proc_control_B.t3247) +
                proc_control_B.t3204 * proc_control_B.t3224 *
                proc_control_B.t3247) - proc_control_B.t3209 *
               proc_control_B.t3242 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp * proc_control_B.t3247_tmp_o) +
    proc_control_B.Anq_tmp_f * proc_control_B.t3238 * proc_control_B.t3247;
  Anq[154] = (((proc_control_B.t3184 * proc_control_B.t3229 *
                proc_control_B.t3247 + proc_control_B.t3192 *
                proc_control_B.t3236 * proc_control_B.t3247) - ct[1666] *
               proc_control_B.t3241 * proc_control_B.t3247) +
              proc_control_B.t3209 * proc_control_B.t3247 *
              proc_control_B.Anq_tmp_m) + (-proc_control_B.t3204 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_e + proc_control_B.t3247_tmp *
    proc_control_B.t3212 * proc_control_B.t3247);
  Anq[155] = ((((proc_control_B.t3184 * proc_control_B.t3211 *
                 proc_control_B.t3247 - proc_control_B.t3192 *
                 proc_control_B.t3233 * proc_control_B.t3247) -
                proc_control_B.t3209 * proc_control_B.t3225 *
                proc_control_B.t3247) + proc_control_B.t3204 *
               proc_control_B.t3240 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_c * proc_control_B.t3247_tmp_o) +
    proc_control_B.t3247_tmp * proc_control_B.t3231 * proc_control_B.t3247;
  Anq[156] = 0.0;
  Anq[157] = 0.0;
  Anq[158] = 0.0;
  Anq[159] = ct[1682];
  Anq[160] = ct[237];
  Anq[161] = ct[1680];
  Anq[162] = ct[243];
  _mm_storeu_pd(&Anq[163], _mm_add_pd(_mm_sub_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(-proc_control_B.t3185,
    proc_control_B.t3190), tmp_1), tmp_e), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(proc_control_B.t3207, proc_control_B.t3205), tmp_5), tmp_e), tmp)),
     _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(ct[1667]), tmp_7), tmp_e), tmp)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(proc_control_B.t3190,
    proc_control_B.t3185), tmp_0), tmp_e), tmp_2)), _mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(proc_control_B.t3205, proc_control_B.t3207), tmp_8), tmp_e)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_3, _mm_set1_pd(ct[2038])), tmp_b),
               tmp_e)));
  Anq[165] = ((((-proc_control_B.t3185 * proc_control_B.t3218 *
                 proc_control_B.t3247 + ct[1667] * proc_control_B.t3210 *
                 proc_control_B.t3247) + proc_control_B.t3190 *
                proc_control_B.t3216 * proc_control_B.t3247) +
               proc_control_B.t3207 * proc_control_B.t3228 *
               proc_control_B.t3247) + proc_control_B.t3205 *
              proc_control_B.t3235 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_a * proc_control_B.t3243 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = proc_control_B.t3207 * proc_control_B.t3247;
  Anq[166] = ((((-proc_control_B.t3185 * proc_control_B.t3214 *
                 proc_control_B.t3247 - ct[1667] * proc_control_B.t3224 *
                 proc_control_B.t3247) - proc_control_B.t3190 *
                proc_control_B.t3238 * proc_control_B.t3247) +
               proc_control_B.t3205 * proc_control_B.t3242 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp *
              proc_control_B.t3247_tmp) + proc_control_B.Anq_tmp_a *
    proc_control_B.t3234 * proc_control_B.t3247;
  Anq[167] = (((proc_control_B.t3190 * proc_control_B.t3212 *
                proc_control_B.t3247 - proc_control_B.t3185 *
                proc_control_B.t3236 * proc_control_B.t3247) -
               proc_control_B.t3207 * proc_control_B.t3241 *
               proc_control_B.t3247) - proc_control_B.t3205 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_m) + (ct[1667] *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_e + proc_control_B.t3180 *
    proc_control_B.t3229 * proc_control_B.t3247);
  Anq[168] = ((((proc_control_B.t3185 * proc_control_B.t3233 *
                 proc_control_B.t3247 + proc_control_B.t3190 *
                 proc_control_B.t3231 * proc_control_B.t3247) +
                proc_control_B.t3205 * proc_control_B.t3225 *
                proc_control_B.t3247) - ct[1667] * proc_control_B.t3240 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_c *
              proc_control_B.t3247_tmp) + proc_control_B.t3180 *
    proc_control_B.t3211 * proc_control_B.t3247;
}

void proc_control::proc_control_ft_5(const real_T ct[1959], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.ct[0] = ct[0];
  proc_control_B.ct[1] = ct[1];
  proc_control_B.ct[2] = ct[2];
  proc_control_B.ct[3] = ct[3];
  proc_control_B.ct[4] = ct[4];
  proc_control_B.ct[5] = ct[5];
  memcpy(&proc_control_B.ct[6], &ct[7], 15U * sizeof(real_T));
  proc_control_B.ct[21] = ct[22];
  proc_control_B.ct[22] = ct[24];
  proc_control_B.ct[23] = ct[26];
  proc_control_B.ct[24] = ct[28];
  proc_control_B.ct[25] = ct[29];
  proc_control_B.ct[26] = ct[30];
  proc_control_B.ct[27] = ct[32];
  proc_control_B.ct[28] = ct[34];
  proc_control_B.ct[29] = ct[35];
  proc_control_B.ct[30] = ct[36];
  proc_control_B.ct[31] = ct[39];
  proc_control_B.ct[32] = ct[40];
  proc_control_B.ct[33] = ct[41];
  proc_control_B.ct[34] = ct[42];
  proc_control_B.ct[35] = ct[43];
  proc_control_B.ct[36] = ct[44];
  proc_control_B.ct[37] = ct[48];
  proc_control_B.ct[38] = ct[49];
  proc_control_B.ct[39] = ct[50];
  proc_control_B.ct[40] = ct[51];
  proc_control_B.ct[41] = ct[52];
  proc_control_B.ct[42] = ct[53];
  proc_control_B.ct[43] = ct[55];
  proc_control_B.ct[44] = ct[56];
  proc_control_B.ct[45] = ct[59];
  proc_control_B.ct[46] = ct[60];
  proc_control_B.ct[47] = ct[62];
  proc_control_B.ct[48] = ct[63];
  proc_control_B.ct[49] = ct[66];
  proc_control_B.ct[50] = ct[68];
  proc_control_B.ct[51] = ct[69];
  memcpy(&proc_control_B.ct[52], &ct[72], 18U * sizeof(real_T));
  proc_control_B.ct[70] = ct[90];
  memcpy(&proc_control_B.ct[71], &ct[92], 94U * sizeof(real_T));
  proc_control_B.ct[165] = ct[186];
  proc_control_B.ct[166] = ct[189];
  proc_control_B.ct[167] = ct[191];
  proc_control_B.ct[168] = ct[193];
  proc_control_B.ct[169] = ct[194];
  proc_control_B.ct[170] = ct[196];
  proc_control_B.ct[171] = ct[198];
  proc_control_B.ct[172] = ct[199];
  proc_control_B.ct[173] = ct[201];
  proc_control_B.ct[174] = ct[203];
  proc_control_B.ct[175] = ct[205];
  proc_control_B.ct[176] = ct[208];
  proc_control_B.ct[177] = ct[210];
  proc_control_B.ct[178] = ct[211];
  proc_control_B.ct[179] = ct[214];
  proc_control_B.ct[180] = ct[215];
  proc_control_B.ct[181] = ct[217];
  proc_control_B.ct[182] = ct[218];
  proc_control_B.ct[183] = ct[221];
  proc_control_B.ct[184] = ct[223];
  proc_control_B.ct[185] = ct[226];
  proc_control_B.ct[186] = ct[227];
  proc_control_B.ct[187] = ct[229];
  proc_control_B.ct[188] = ct[232];
  proc_control_B.ct[189] = ct[234];
  proc_control_B.ct[190] = ct[235];
  proc_control_B.ct[191] = ct[236];
  proc_control_B.ct[192] = ct[239];
  proc_control_B.ct[193] = ct[241];
  proc_control_B.ct[194] = ct[243];
  proc_control_B.ct[195] = ct[244];
  proc_control_B.ct[196] = ct[248];
  proc_control_B.ct[197] = ct[250];
  proc_control_B.ct[198] = ct[251];
  proc_control_B.ct[199] = ct[253];
  proc_control_B.ct[200] = ct[256];
  proc_control_B.ct[201] = ct[257];
  proc_control_B.ct[202] = ct[259];
  proc_control_B.ct[203] = ct[260];
  proc_control_B.ct[204] = ct[262];
  proc_control_B.ct[205] = ct[265];
  proc_control_B.ct[206] = ct[266];
  proc_control_B.ct[207] = ct[269];
  proc_control_B.ct[208] = ct[270];
  proc_control_B.ct[209] = ct[271];
  proc_control_B.ct[210] = ct[274];
  proc_control_B.ct[211] = ct[276];
  proc_control_B.ct[212] = ct[278];
  proc_control_B.ct[213] = ct[279];
  proc_control_B.ct[214] = ct[281];
  proc_control_B.ct[215] = ct[282];
  proc_control_B.ct[216] = ct[284];
  proc_control_B.ct[217] = ct[286];
  proc_control_B.ct[218] = ct[287];
  proc_control_B.ct[219] = ct[289];
  proc_control_B.ct[220] = ct[291];
  proc_control_B.ct[221] = ct[293];
  proc_control_B.ct[222] = ct[294];
  proc_control_B.ct[223] = ct[295];
  proc_control_B.ct[224] = ct[296];
  memcpy(&proc_control_B.ct[225], &ct[298], 15U * sizeof(real_T));
  proc_control_B.ct[240] = ct[314];
  proc_control_B.ct[241] = ct[317];
  proc_control_B.ct[242] = ct[318];
  proc_control_B.ct[243] = ct[322];
  proc_control_B.ct[244] = ct[324];
  proc_control_B.ct[245] = ct[326];
  proc_control_B.ct[246] = ct[328];
  proc_control_B.ct[247] = ct[329];
  proc_control_B.ct[248] = ct[332];
  proc_control_B.ct[249] = ct[337];
  proc_control_B.ct[250] = ct[340];
  proc_control_B.ct[251] = ct[344];
  memcpy(&proc_control_B.ct[252], &ct[347], 305U * sizeof(real_T));
  proc_control_B.ct[557] = ct[652];
  proc_control_B.ct[558] = ct[654];
  proc_control_B.ct[559] = ct[655];
  proc_control_B.ct[560] = ct[657];
  proc_control_B.ct[561] = ct[658];
  proc_control_B.ct[562] = ct[659];
  proc_control_B.ct[563] = ct[661];
  proc_control_B.ct[564] = ct[662];
  proc_control_B.ct[565] = ct[664];
  proc_control_B.ct[566] = ct[665];
  proc_control_B.ct[567] = ct[668];
  proc_control_B.ct[568] = ct[669];
  proc_control_B.ct[569] = ct[670];
  proc_control_B.ct[570] = ct[671];
  proc_control_B.ct[571] = ct[673];
  proc_control_B.ct[572] = ct[674];
  proc_control_B.ct[573] = ct[675];
  proc_control_B.ct[574] = ct[676];
  proc_control_B.ct[575] = ct[679];
  proc_control_B.ct[576] = ct[680];
  proc_control_B.ct[577] = ct[683];
  proc_control_B.ct[578] = ct[684];
  memcpy(&proc_control_B.ct[579], &ct[686], 30U * sizeof(real_T));
  proc_control_B.ct[609] = ct[716];
  proc_control_B.ct[610] = ct[721];
  proc_control_B.ct[611] = ct[722];
  proc_control_B.ct[612] = ct[723];
  proc_control_B.ct[613] = ct[724];
  tmp_1 = _mm_set_pd(ct[7], ct[8]);
  _mm_storeu_pd(&proc_control_B.ct[614], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1919],
    ct[1912])));
  tmp_6 = _mm_loadu_pd(&ct[8]);
  _mm_storeu_pd(&proc_control_B.ct[616], _mm_mul_pd(tmp_6, _mm_set_pd(ct[1912],
    ct[1915])));
  proc_control_B.ct[618] = ct[7] * ct[1922];
  proc_control_B.ct[619] = ct[725];
  tmp_0 = _mm_set_pd(ct[8], ct[9]);
  _mm_storeu_pd(&proc_control_B.ct[620], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1918],
    ct[1915])));
  proc_control_B.ct[622] = ct[726];
  proc_control_B.ct[623] = ct[8] * ct[1920];
  proc_control_B.ct[624] = ct[727];
  proc_control_B.ct[625] = ct[728];
  proc_control_B.ct[626] = ct[729];
  tmp = _mm_set_pd(ct[7], ct[9]);
  _mm_storeu_pd(&proc_control_B.ct[627], _mm_mul_pd(tmp, _mm_set_pd(ct[1924],
    ct[1919])));
  _mm_storeu_pd(&proc_control_B.ct[629], _mm_mul_pd(tmp, _mm_set_pd(ct[1925],
    ct[1920])));
  proc_control_B.ct[631] = ct[8] * ct[1924];
  proc_control_B.ct[632] = ct[730];
  proc_control_B.ct[633] = ct[9] * ct[1923];
  proc_control_B.ct[634] = ct[731];
  proc_control_B.ct[635] = ct[732];
  proc_control_B.ct[636] = ct[733];
  tmp_5 = _mm_loadu_pd(&ct[7]);
  _mm_storeu_pd(&proc_control_B.ct[637], _mm_mul_pd(tmp_5, _mm_set_pd(ct[1926],
    ct[1928])));
  proc_control_B.ct[639] = ct[7] * ct[1930];
  proc_control_B.ct[640] = ct[734];
  _mm_storeu_pd(&proc_control_B.ct[641], _mm_mul_pd(tmp_0, _mm_loadu_pd(&ct[1926])));
  _mm_storeu_pd(&proc_control_B.ct[643], _mm_mul_pd(tmp_5, _mm_set_pd(ct[1929],
    ct[1931])));
  proc_control_B.ct[645] = ct[735];
  proc_control_B.ct[646] = ct[736];
  proc_control_B.ct[647] = ct[737];
  _mm_storeu_pd(&proc_control_B.ct[648], _mm_mul_pd(tmp, _mm_set_pd(ct[1932],
    ct[1928])));
  proc_control_B.ct[650] = ct[7] * ct[1934];
  proc_control_B.ct[651] = ct[738];
  proc_control_B.ct[652] = ct[8] * ct[1933];
  proc_control_B.ct[653] = ct[739];
  _mm_storeu_pd(&proc_control_B.ct[654], _mm_mul_pd(tmp, _mm_set_pd(ct[1937],
    ct[1931])));
  proc_control_B.ct[656] = ct[740];
  _mm_storeu_pd(&proc_control_B.ct[657], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1937],
    ct[1932])));
  _mm_storeu_pd(&proc_control_B.ct[659], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1939],
    ct[1934])));
  proc_control_B.ct[661] = ct[9] * ct[1936];
  proc_control_B.ct[662] = ct[741];
  proc_control_B.ct[663] = ct[742];
  proc_control_B.ct[664] = ct[743];
  _mm_storeu_pd(&proc_control_B.ct[665], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1942],
    ct[1940])));
  _mm_storeu_pd(&proc_control_B.ct[667], _mm_mul_pd(tmp, _mm_set_pd(ct[1943],
    ct[1940])));
  proc_control_B.ct[669] = ct[744];
  _mm_storeu_pd(&proc_control_B.ct[670], _mm_mul_pd(tmp_5, _mm_set_pd(ct[1942],
    ct[1946])));
  proc_control_B.ct[672] = ct[9] * ct[1941];
  proc_control_B.ct[673] = ct[745];
  proc_control_B.ct[674] = ct[7] * ct[1948];
  proc_control_B.ct[675] = ct[746];
  proc_control_B.ct[676] = ct[747];
  proc_control_B.ct[677] = ct[748];
  _mm_storeu_pd(&proc_control_B.ct[678], _mm_mul_pd(tmp_6, _mm_set_pd(ct[1943],
    ct[1948])));
  tmp_1 = _mm_set_pd(ct[9], ct[7]);
  _mm_storeu_pd(&proc_control_B.ct[680], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1944],
    ct[1951])));
  _mm_storeu_pd(&proc_control_B.ct[682], _mm_mul_pd(tmp_6, _mm_set_pd(ct[1947],
    ct[1950])));
  proc_control_B.ct[684] = ct[749];
  _mm_storeu_pd(&proc_control_B.ct[685], _mm_mul_pd(tmp_5, _mm_set_pd(ct[1951],
    ct[1952])));
  proc_control_B.ct[687] = ct[9] * ct[1949];
  proc_control_B.ct[688] = ct[750];
  proc_control_B.ct[689] = ct[751];
  proc_control_B.ct[690] = ct[8] * ct[1952];
  proc_control_B.ct[691] = ct[754];
  proc_control_B.ct[692] = ct[755];
  proc_control_B.ct[693] = ct[10] * ct[1916];
  memcpy(&proc_control_B.ct[694], &ct[756], 18U * sizeof(real_T));
  proc_control_B.ct[712] = ct[11] * ct[1935];
  memcpy(&proc_control_B.ct[713], &ct[774], 18U * sizeof(real_T));
  proc_control_B.ct[731] = ct[12] * ct[1953];
  proc_control_B.ct[732] = ct[792];
  proc_control_B.ct[733] = ct[10] * ct[27];
  proc_control_B.ct[734] = ct[793];
  proc_control_B.ct[735] = ct[794];
  proc_control_B.ct[736] = ct[795];
  proc_control_B.ct[737] = ct[796];
  proc_control_B.ct[738] = ct[797];
  proc_control_B.ct[739] = ct[11] * ct[33];
  proc_control_B.ct[740] = ct[798];
  proc_control_B.ct[741] = ct[799];
  proc_control_B.ct[742] = ct[12] * ct[38];
  proc_control_B.ct[743] = ct[800];
  proc_control_B.ct[744] = ct[802];
  proc_control_B.ct[745] = ct[803];
  proc_control_B.ct[746] = ct[805];
  tmp = _mm_set1_pd(ct[8]);
  _mm_storeu_pd(&proc_control_B.ct[747], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[190])));
  proc_control_B.ct[749] = ct[9] * ct[190];
  proc_control_B.ct[750] = ct[806];
  _mm_storeu_pd(&proc_control_B.ct[751], _mm_mul_pd(tmp_0, _mm_set_pd(ct[201],
    ct[191])));
  _mm_storeu_pd(&proc_control_B.ct[753], _mm_mul_pd(tmp_6, _mm_set_pd(ct[201],
    ct[202])));
  _mm_storeu_pd(&proc_control_B.ct[755], _mm_mul_pd(tmp_0, _mm_set_pd(ct[207],
    ct[202])));
  proc_control_B.ct[757] = ct[807];
  _mm_storeu_pd(&proc_control_B.ct[758], _mm_mul_pd(tmp_6, _mm_set_pd(ct[207],
    ct[208])));
  _mm_storeu_pd(&proc_control_B.ct[760], _mm_mul_pd(tmp_6, _mm_set_pd(ct[208],
    ct[210])));
  _mm_storeu_pd(&proc_control_B.ct[762], _mm_mul_pd(tmp_6, _mm_set_pd(ct[210],
    ct[212])));
  tmp_5 = _mm_set1_pd(ct[9]);
  _mm_storeu_pd(&proc_control_B.ct[764], _mm_mul_pd(tmp_5, _mm_set_pd(ct[218],
    ct[212])));
  _mm_storeu_pd(&proc_control_B.ct[766], _mm_mul_pd(tmp_0, _mm_set_pd(ct[224],
    ct[220])));
  _mm_storeu_pd(&proc_control_B.ct[768], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct[226])));
  _mm_storeu_pd(&proc_control_B.ct[770], _mm_mul_pd(tmp_0, _mm_set_pd(ct[233],
    ct[228])));
  proc_control_B.ct[772] = ct[808];
  _mm_storeu_pd(&proc_control_B.ct[773], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct[234])));
  _mm_storeu_pd(&proc_control_B.ct[775], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[236])));
  _mm_storeu_pd(&proc_control_B.ct[777], _mm_mul_pd(tmp_6, _mm_set_pd(ct[238],
    ct[241])));
  proc_control_B.ct[779] = ct[8] * ct[242];
  proc_control_B.ct[780] = ct[809];
  _mm_storeu_pd(&proc_control_B.ct[781], _mm_mul_pd(tmp_5, _mm_set_pd(ct[246],
    ct[244])));
  _mm_storeu_pd(&proc_control_B.ct[783], _mm_mul_pd(tmp, _mm_set_pd(ct[252], ct
    [250])));
  _mm_storeu_pd(&proc_control_B.ct[785], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[253])));
  proc_control_B.ct[787] = ct[8] * ct[260];
  proc_control_B.ct[788] = ct[810];
  _mm_storeu_pd(&proc_control_B.ct[789], _mm_mul_pd(tmp_6, _mm_set_pd(ct[263],
    ct[261])));
  _mm_storeu_pd(&proc_control_B.ct[791], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[265])));
  _mm_storeu_pd(&proc_control_B.ct[793], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[267])));
  _mm_storeu_pd(&proc_control_B.ct[795], _mm_mul_pd(tmp_5, _mm_set_pd(ct[272],
    ct[269])));
  _mm_storeu_pd(&proc_control_B.ct[797], _mm_mul_pd(tmp_5, _mm_set_pd(ct[277],
    ct[274])));
  _mm_storeu_pd(&proc_control_B.ct[799], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[278])));
  _mm_storeu_pd(&proc_control_B.ct[801], _mm_mul_pd(tmp_5, _mm_set_pd(ct[288],
    ct[280])));
  proc_control_B.ct[803] = ct[811];
  _mm_storeu_pd(&proc_control_B.ct[804], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[289])));
  _mm_storeu_pd(&proc_control_B.ct[806], _mm_mul_pd(tmp_5, _mm_set_pd(ct[313],
    ct[291])));
  proc_control_B.ct[808] = ct[9] * ct[315];
  proc_control_B.ct[809] = ct[812];
  _mm_storeu_pd(&proc_control_B.ct[810], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[319])));
  proc_control_B.ct[812] = ct[813];
  _mm_storeu_pd(&proc_control_B.ct[813], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[330])));
  proc_control_B.ct[815] = ct[814];
  _mm_storeu_pd(&proc_control_B.ct[816], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct[354])));
  proc_control_B.ct[818] = ct[815];
  proc_control_B.ct[819] = ct[816];
  proc_control_B.ct[820] = ct[817];
  proc_control_B.ct[821] = ct[818];
  proc_control_B.ct[822] = ct[821];
  proc_control_B.ct[823] = ct[9] * ct[370];
  proc_control_B.ct[824] = ct[822];
  proc_control_B.ct[825] = ct[823];
  proc_control_B.ct[826] = ct[826];
  proc_control_B.ct[827] = ct[829];
  proc_control_B.ct[828] = ct[830];
  memcpy(&proc_control_B.ct[829], &ct[834], 25U * sizeof(real_T));
  proc_control_B.ct[854] = -ct[1907];
  proc_control_B.ct[855] = -ct[1908];
  proc_control_B.ct[856] = -ct[1909];
  proc_control_B.ct[857] = -ct[1910];
  proc_control_B.ct[858] = ct[859];
  proc_control_B.ct[859] = -ct[1911];
  proc_control_B.ct[860] = -ct[1913];
  proc_control_B.ct[861] = -ct[1917];
  proc_control_B.ct[862] = -ct[1929];
  proc_control_B.ct[863] = -ct[1931];
  proc_control_B.ct[864] = -ct[1933];
  proc_control_B.ct[865] = -ct[1944];
  proc_control_B.ct[866] = -ct[1949];
  proc_control_B.ct[867] = -ct[1951];
  proc_control_B.ct[868] = -ct[1955];
  proc_control_B.ct[869] = -ct[23];
  proc_control_B.ct[870] = ct[860];
  proc_control_B.ct[871] = ct[861];
  proc_control_B.ct[872] = ct[80] * ct[1823];
  proc_control_B.ct[873] = ct[862];
  proc_control_B.ct[874] = ct[863];
  proc_control_B.ct[875] = ct[91] * ct[1824];
  proc_control_B.ct[876] = ct[864];
  proc_control_B.ct[877] = ct[865];
  proc_control_B.ct[878] = ct[102] * ct[1825];
  proc_control_B.ct[879] = ct[866];
  proc_control_B.ct[880] = -ct[45];
  proc_control_B.ct[881] = -ct[46];
  proc_control_B.ct[882] = -ct[47];
  proc_control_B.ct[883] = -ct[54];
  proc_control_B.ct[884] = -ct[57];
  proc_control_B.ct[885] = -ct[58];
  proc_control_B.ct[886] = -ct[61];
  proc_control_B.ct[887] = -ct[64];
  proc_control_B.ct[888] = -ct[65];
  proc_control_B.ct[889] = -ct[67];
  proc_control_B.ct[890] = ct[867];
  proc_control_B.ct[891] = -ct[70];
  proc_control_B.ct[892] = -ct[71];
  memcpy(&proc_control_B.ct[893], &ct[868], 17U * sizeof(real_T));
  proc_control_B.ct[910] = -ct[187];
  proc_control_B.ct[911] = -ct[188];
  proc_control_B.ct[912] = -ct[190];
  proc_control_B.ct[913] = -ct[192];
  proc_control_B.ct[914] = -ct[195];
  proc_control_B.ct[915] = -ct[197];
  proc_control_B.ct[916] = -ct[200];
  proc_control_B.ct[917] = ct[885];
  proc_control_B.ct[918] = -ct[202];
  proc_control_B.ct[919] = -ct[204];
  proc_control_B.ct[920] = -ct[206];
  proc_control_B.ct[921] = -ct[207];
  proc_control_B.ct[922] = -ct[209];
  proc_control_B.ct[923] = -ct[212];
  proc_control_B.ct[924] = -ct[213];
  proc_control_B.ct[925] = -ct[216];
  proc_control_B.ct[926] = -ct[219];
  proc_control_B.ct[927] = -ct[220];
  proc_control_B.ct[928] = -ct[222];
  proc_control_B.ct[929] = ct[886];
  proc_control_B.ct[930] = ct[887];
  proc_control_B.ct[931] = ct[888];
  proc_control_B.ct[932] = -ct[224];
  proc_control_B.ct[933] = -ct[225];
  proc_control_B.ct[934] = -ct[228];
  proc_control_B.ct[935] = -ct[230];
  proc_control_B.ct[936] = -ct[231];
  proc_control_B.ct[937] = -ct[233];
  proc_control_B.ct[938] = ct[889];
  proc_control_B.ct[939] = -ct[237];
  proc_control_B.ct[940] = -ct[238];
  proc_control_B.ct[941] = -ct[240];
  proc_control_B.ct[942] = -ct[242];
  proc_control_B.ct[943] = -ct[245];
  proc_control_B.ct[944] = -ct[246];
  proc_control_B.ct[945] = -ct[247];
  proc_control_B.ct[946] = -ct[249];
  proc_control_B.ct[947] = -ct[252];
  proc_control_B.ct[948] = -ct[254];
  proc_control_B.ct[949] = ct[890];
  proc_control_B.ct[950] = -ct[255];
  proc_control_B.ct[951] = -ct[258];
  proc_control_B.ct[952] = ct[891];
  proc_control_B.ct[953] = ct[892];
  proc_control_B.ct[954] = -ct[261];
  proc_control_B.ct[955] = -ct[263];
  proc_control_B.ct[956] = -ct[264];
  proc_control_B.ct[957] = -ct[267];
  proc_control_B.ct[958] = -ct[268];
  proc_control_B.ct[959] = -ct[272];
  proc_control_B.ct[960] = ct[893];
  proc_control_B.ct[961] = -ct[273];
  proc_control_B.ct[962] = -ct[275];
  proc_control_B.ct[963] = -ct[277];
  proc_control_B.ct[964] = -ct[280];
  proc_control_B.ct[965] = -ct[283];
  proc_control_B.ct[966] = -ct[285];
  proc_control_B.ct[967] = -ct[286];
  proc_control_B.ct[968] = -ct[287];
  proc_control_B.ct[969] = -ct[288];
  proc_control_B.ct[970] = -ct[290];
  proc_control_B.ct[971] = -ct[292];
  proc_control_B.ct[972] = -ct[294];
  proc_control_B.ct[973] = -ct[295];
  proc_control_B.ct[974] = -ct[297];
  memcpy(&proc_control_B.ct[975], &ct[894], 104U * sizeof(real_T));
  proc_control_B.ct[1079] = ct[10] * ct[653];
  proc_control_B.ct[1080] = ct[1000];
  proc_control_B.ct[1081] = ct[1002];
  proc_control_B.ct[1082] = ct[1003];
  proc_control_B.ct[1083] = ct[1004];
  proc_control_B.ct[1084] = ct[10] * ct[667];
  proc_control_B.ct[1085] = ct[1006];
  proc_control_B.ct[1086] = ct[10] * ct[681];
  proc_control_B.ct[1087] = ct[1008];
  proc_control_B.ct[1088] = ct[10] * ct[685];
  proc_control_B.ct[1089] = ct[1010];
  proc_control_B.ct[1090] = ct[1011];
  proc_control_B.ct[1091] = ct[11] * ct[656];
  proc_control_B.ct[1092] = ct[1013];
  proc_control_B.ct[1093] = ct[1015];
  proc_control_B.ct[1094] = ct[11] * ct[667];
  proc_control_B.ct[1095] = ct[1017];
  proc_control_B.ct[1096] = ct[1018];
  proc_control_B.ct[1097] = ct[11] * ct[672];
  proc_control_B.ct[1098] = ct[1020];
  proc_control_B.ct[1099] = ct[1022];
  proc_control_B.ct[1100] = ct[11] * ct[681];
  proc_control_B.ct[1101] = ct[1024];
  proc_control_B.ct[1102] = ct[12] * ct[653];
  proc_control_B.ct[1103] = ct[1026];
  proc_control_B.ct[1104] = ct[12] * ct[656];
  proc_control_B.ct[1105] = ct[1028];
  proc_control_B.ct[1106] = ct[1029];
  proc_control_B.ct[1107] = ct[12] * ct[672];
  proc_control_B.ct[1108] = ct[1032];
  proc_control_B.ct[1109] = ct[1034];
  proc_control_B.ct[1110] = ct[1035];
  proc_control_B.ct[1111] = ct[12] * ct[685];
  proc_control_B.ct[1112] = ct[1037];
  proc_control_B.ct[1113] = ct[1039];
  proc_control_B.ct[1114] = ct[1040];
  _mm_storeu_pd(&proc_control_B.ct[1115], _mm_mul_pd(_mm_set_pd(ct[1559], ct
    [1529]), _mm_set_pd(ct[1647], ct[1648])));
  proc_control_B.ct[1117] = ct[1542] * ct[1649];
  proc_control_B.ct[1118] = ct[1042];
  proc_control_B.ct[1119] = ct[1529] * ct[1651];
  proc_control_B.ct[1120] = ct[1043];
  tmp = _mm_set_pd(ct[1542], ct[1559]);
  _mm_storeu_pd(&proc_control_B.ct[1121], _mm_mul_pd(tmp, _mm_set_pd(ct[1652],
    ct[1650])));
  proc_control_B.ct[1123] = ct[1529] * ct[1653];
  proc_control_B.ct[1124] = ct[1044];
  _mm_storeu_pd(&proc_control_B.ct[1125], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[1655])));
  proc_control_B.ct[1127] = ct[1529] * ct[1657];
  proc_control_B.ct[1128] = ct[1045];
  tmp_4 = _mm_set_pd(ct[1559], ct[1542]);
  _mm_storeu_pd(&proc_control_B.ct[1129], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [1658])));
  tmp_2 = _mm_set_pd(ct[1529], ct[1542]);
  _mm_storeu_pd(&proc_control_B.ct[1131], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [1660])));
  proc_control_B.ct[1133] = ct[1046];
  _mm_storeu_pd(&proc_control_B.ct[1134], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[1662])));
  proc_control_B.ct[1136] = ct[1529] * ct[1666];
  proc_control_B.ct[1137] = ct[1047];
  proc_control_B.ct[1138] = ct[1559] * ct[1664];
  proc_control_B.ct[1139] = ct[1048];
  _mm_storeu_pd(&proc_control_B.ct[1140], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1669],
    ct[1667])));
  proc_control_B.ct[1142] = ct[1049];
  proc_control_B.ct[1143] = ct[1559] * ct[1668];
  proc_control_B.ct[1144] = ct[1052];
  proc_control_B.ct[1145] = ct[1056];
  proc_control_B.ct[1146] = ct[1059];
  proc_control_B.ct[1147] = ct[1062];
  proc_control_B.ct[1148] = ct[1064];
  proc_control_B.ct[1149] = ct[10] * ct[717];
  proc_control_B.ct[1150] = ct[1065];
  proc_control_B.ct[1151] = ct[1066];
  proc_control_B.ct[1152] = ct[1067];
  proc_control_B.ct[1153] = ct[1068];
  proc_control_B.ct[1154] = ct[1069];
  proc_control_B.ct[1155] = ct[1070];
  tmp_2 = _mm_set_pd(ct[718], ct[719]);
  _mm_storeu_pd(&proc_control_B.ct[1156], _mm_mul_pd(_mm_loadu_pd(&ct[10]),
    tmp_2));
  proc_control_B.ct[1158] = ct[1071];
  proc_control_B.ct[1159] = ct[1072];
  proc_control_B.ct[1160] = ct[1073];
  proc_control_B.ct[1161] = ct[12] * ct[717];
  proc_control_B.ct[1162] = ct[1074];
  tmp_7 = _mm_loadu_pd(&ct[11]);
  _mm_storeu_pd(&proc_control_B.ct[1163], _mm_mul_pd(tmp_7, tmp_2));
  proc_control_B.ct[1165] = ct[1075];
  proc_control_B.ct[1166] = ct[11] * ct[720];
  proc_control_B.ct[1167] = ct[1077];
  proc_control_B.ct[1168] = ct[1078];
  proc_control_B.ct[1169] = ct[1081];
  proc_control_B.ct[1170] = ct[1084];
  proc_control_B.ct[1171] = ct[1085];
  proc_control_B.ct[1172] = ct[1086];
  proc_control_B.ct[1173] = ct[1088];
  proc_control_B.ct[1174] = ct[1089];
  proc_control_B.ct[1175] = ct[1090];
  proc_control_B.ct[1176] = ct[1093];
  proc_control_B.ct[1177] = ct[10] * ct[752];
  proc_control_B.ct[1178] = ct[1094];
  proc_control_B.ct[1179] = ct[10] * ct[753];
  proc_control_B.ct[1180] = ct[1095];
  proc_control_B.ct[1181] = ct[12] * ct[720];
  proc_control_B.ct[1182] = ct[1097];
  proc_control_B.ct[1183] = ct[1112];
  proc_control_B.ct[1184] = ct[1113];
  proc_control_B.ct[1185] = ct[11] * ct[752];
  memcpy(&proc_control_B.ct[1186], &ct[1114], 19U * sizeof(real_T));
  proc_control_B.ct[1205] = ct[12] * ct[753];
  memcpy(&proc_control_B.ct[1206], &ct[1133], 43U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct[1249], _mm_mul_pd(_mm_set1_pd(ct[11]),
    _mm_set_pd(ct[1007], ct[1005])));
  proc_control_B.ct[1251] = ct[1176];
  tmp_2 = _mm_set1_pd(ct[12]);
  _mm_storeu_pd(&proc_control_B.ct[1252], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1009],
    ct[998])));
  _mm_storeu_pd(&proc_control_B.ct[1254], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1019],
    ct[1012])));
  proc_control_B.ct[1256] = ct[11] * ct[1041];
  proc_control_B.ct[1257] = ct[1177];
  tmp_3 = _mm_set_pd(ct[11], ct[12]);
  _mm_storeu_pd(&proc_control_B.ct[1258], _mm_mul_pd(tmp_3, _mm_set_pd(ct[1054],
    ct[1038])));
  _mm_storeu_pd(&proc_control_B.ct[1260], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [1050])));
  _mm_storeu_pd(&proc_control_B.ct[1262], _mm_mul_pd(tmp_3, _mm_set_pd(ct[1057],
    ct[1053])));
  proc_control_B.ct[1264] = ct[1178];
  _mm_storeu_pd(&proc_control_B.ct[1265], _mm_mul_pd(tmp_7, _mm_set_pd(ct[1055],
    ct[1060])));
  _mm_storeu_pd(&proc_control_B.ct[1267], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1061],
    ct[1058])));
  proc_control_B.ct[1269] = ct[12] * ct[1063];
  proc_control_B.ct[1270] = ct[1179];
  proc_control_B.ct[1271] = -ct[653];
  proc_control_B.ct[1272] = -ct[656];
  proc_control_B.ct[1273] = -ct[660];
  proc_control_B.ct[1274] = -ct[663];
  proc_control_B.ct[1275] = -ct[666];
  proc_control_B.ct[1276] = -ct[667];
  proc_control_B.ct[1277] = ct[1180];
  proc_control_B.ct[1278] = -ct[672];
  proc_control_B.ct[1279] = -ct[677];
  proc_control_B.ct[1280] = -ct[678];
  proc_control_B.ct[1281] = -ct[681];
  proc_control_B.ct[1282] = -ct[682];
  proc_control_B.ct[1283] = -ct[685];
  memcpy(&proc_control_B.ct[1284], &ct[1181], sizeof(real_T) << 3U);
  proc_control_B.ct[1292] = ct[29] * ct[80];
  proc_control_B.ct[1293] = ct[1189];
  proc_control_B.ct[1294] = ct[30] * ct[80];
  proc_control_B.ct[1295] = ct[1190];
  proc_control_B.ct[1296] = ct[34] * ct[80];
  proc_control_B.ct[1297] = ct[1191];
  proc_control_B.ct[1298] = ct[36] * ct[80];
  proc_control_B.ct[1299] = ct[1192];
  proc_control_B.ct[1300] = ct[35] * ct[91];
  proc_control_B.ct[1301] = ct[1193];
  proc_control_B.ct[1302] = ct[36] * ct[91];
  proc_control_B.ct[1303] = ct[1194];
  proc_control_B.ct[1304] = ct[1195];
  proc_control_B.ct[1305] = ct[1196];
  proc_control_B.ct[1306] = ct[1197];
  _mm_storeu_pd(&proc_control_B.ct[1307], _mm_mul_pd(tmp_6, _mm_set1_pd(ct[860])));
  proc_control_B.ct[1309] = ct[1198];
  proc_control_B.ct[1310] = ct[1199];
  proc_control_B.ct[1311] = ct[7] * ct[862];
  proc_control_B.ct[1312] = ct[1200];
  proc_control_B.ct[1313] = ct[1201];
  proc_control_B.ct[1314] = ct[9] * ct[862];
  proc_control_B.ct[1315] = ct[1202];
  proc_control_B.ct[1316] = ct[1203];
  proc_control_B.ct[1317] = ct[7] * ct[864];
  proc_control_B.ct[1318] = ct[1204];
  proc_control_B.ct[1319] = ct[1205];
  proc_control_B.ct[1320] = ct[1206];
  proc_control_B.ct[1321] = ct[8] * ct[864];
  memcpy(&proc_control_B.ct[1322], &ct[1207], 65U * sizeof(real_T));
  proc_control_B.ct[1387] = -ct[800];
  proc_control_B.ct[1388] = -ct[801];
  proc_control_B.ct[1389] = -ct[802];
  proc_control_B.ct[1390] = -ct[803];
  proc_control_B.ct[1391] = -ct[804];
  proc_control_B.ct[1392] = -ct[805];
  proc_control_B.ct[1393] = ct[1272];
  proc_control_B.ct[1394] = ct[1273];
  proc_control_B.ct[1395] = ct[1274];
  _mm_storeu_pd(&proc_control_B.ct[1396], _mm_mul_pd(tmp_1, _mm_set1_pd(ct[899])));
  proc_control_B.ct[1398] = ct[1275];
  _mm_storeu_pd(&proc_control_B.ct[1399], _mm_mul_pd(tmp_1, _mm_set1_pd(ct[901])));
  proc_control_B.ct[1401] = ct[1276];
  proc_control_B.ct[1402] = ct[1277];
  _mm_storeu_pd(&proc_control_B.ct[1403], _mm_mul_pd(tmp_6, _mm_set1_pd(ct[907])));
  proc_control_B.ct[1405] = ct[1278];
  proc_control_B.ct[1406] = ct[1279];
  _mm_storeu_pd(&proc_control_B.ct[1407], _mm_mul_pd(tmp_6, _mm_set1_pd(ct[911])));
  proc_control_B.ct[1409] = ct[1280];
  proc_control_B.ct[1410] = ct[1281];
  proc_control_B.ct[1411] = ct[1282];
  _mm_storeu_pd(&proc_control_B.ct[1412], _mm_mul_pd(tmp_1, _mm_set_pd(ct[918],
    ct[919])));
  proc_control_B.ct[1414] = ct[1283];
  proc_control_B.ct[1415] = ct[7] * ct[922];
  proc_control_B.ct[1416] = ct[1284];
  proc_control_B.ct[1417] = ct[9] * ct[921];
  proc_control_B.ct[1418] = ct[1285];
  proc_control_B.ct[1419] = ct[8] * ct[926];
  proc_control_B.ct[1420] = ct[1286];
  _mm_storeu_pd(&proc_control_B.ct[1421], _mm_mul_pd(tmp_0, _mm_set_pd(ct[930],
    ct[926])));
  proc_control_B.ct[1423] = ct[1287];
  proc_control_B.ct[1424] = ct[9] * ct[930];
  proc_control_B.ct[1425] = ct[1288];
  proc_control_B.ct[1426] = ct[1289];
  proc_control_B.ct[1427] = ct[1290];
  proc_control_B.ct[1428] = ct[1291];
  proc_control_B.ct[1429] = ct[8] * ct[943];
  proc_control_B.ct[1430] = ct[1292];
  _mm_storeu_pd(&proc_control_B.ct[1431], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct[945])));
  proc_control_B.ct[1433] = ct[1293];
  _mm_storeu_pd(&proc_control_B.ct[1434], _mm_mul_pd(tmp_0, _mm_set_pd(ct[949],
    ct[947])));
  proc_control_B.ct[1436] = ct[1294];
  proc_control_B.ct[1437] = ct[9] * ct[950];
  proc_control_B.ct[1438] = ct[1295];
  proc_control_B.ct[1439] = ct[9] * ct[952];
  proc_control_B.ct[1440] = ct[1296];
  proc_control_B.ct[1441] = ct[9] * ct[953];
  proc_control_B.ct[1442] = ct[1297];
  proc_control_B.ct[1443] = -ct[819];
  proc_control_B.ct[1444] = -ct[820];
  proc_control_B.ct[1445] = ct[1298];
  proc_control_B.ct[1446] = -ct[824];
  proc_control_B.ct[1447] = -ct[825];
  proc_control_B.ct[1448] = -ct[827];
  proc_control_B.ct[1449] = ct[1299];
  proc_control_B.ct[1450] = -ct[828];
  proc_control_B.ct[1451] = ct[1300];
  proc_control_B.ct[1452] = -ct[831];
  proc_control_B.ct[1453] = -ct[832];
  proc_control_B.ct[1454] = -ct[833];
  memcpy(&proc_control_B.ct[1455], &ct[1301], 13U * sizeof(real_T));
  proc_control_B.ct[1468] = ct[1542] * ct[1911];
  proc_control_B.ct[1469] = ct[1314];
  proc_control_B.ct[1470] = ct[1559] * ct[1911];
  proc_control_B.ct[1471] = ct[1315];
  proc_control_B.ct[1472] = ct[1542] * ct[1915];
  proc_control_B.ct[1473] = ct[1316];
  _mm_storeu_pd(&proc_control_B.ct[1474], _mm_mul_pd(tmp, _mm_set_pd(ct[1926],
    ct[1920])));
  proc_control_B.ct[1476] = ct[1542] * ct[1929];
  proc_control_B.ct[1477] = ct[1317];
  proc_control_B.ct[1478] = ct[1559] * ct[1931];
  proc_control_B.ct[1479] = ct[1318];
  tmp_1 = _mm_set1_pd(ct[1559]);
  _mm_storeu_pd(&proc_control_B.ct[1480], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1940],
    ct[1934])));
  proc_control_B.ct[1482] = ct[1319];
  _mm_storeu_pd(&proc_control_B.ct[1483], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1943])));
  proc_control_B.ct[1485] = ct[1320];
  proc_control_B.ct[1486] = ct[1559] * ct[1949];
  proc_control_B.ct[1487] = ct[1321];
  _mm_storeu_pd(&proc_control_B.ct[1488], _mm_mul_pd(_mm_set1_pd(ct[24]), tmp_4));
  proc_control_B.ct[1490] = ct[29] * ct[1542];
  proc_control_B.ct[1491] = ct[1322];
  _mm_storeu_pd(&proc_control_B.ct[1492], _mm_mul_pd(_mm_set_pd(ct[34], ct[30]),
    tmp_1));
  proc_control_B.ct[1494] = ct[35] * ct[1559];
  proc_control_B.ct[1495] = ct[1323];
  proc_control_B.ct[1496] = ct[1324];
  proc_control_B.ct[1497] = ct[1325];
  proc_control_B.ct[1498] = ct[1326];
  proc_control_B.ct[1499] = ct[1327];
  proc_control_B.ct[1500] = ct[1328];
  proc_control_B.ct[1501] = ct[1329];
  proc_control_B.ct[1502] = -ct[998];
  proc_control_B.ct[1503] = -ct[999];
  proc_control_B.ct_tmp_n = ct[10] * ct[1529];
  proc_control_B.ct[1504] = proc_control_B.ct_tmp_n * ct[402];
  proc_control_B.ct[1505] = -ct[1001];
  proc_control_B.ct[1506] = -ct[1005];
  proc_control_B.ct[1507] = proc_control_B.ct_tmp_n * ct[407];
  proc_control_B.ct[1508] = -ct[1007];
  proc_control_B.ct[1509] = ct[10] * ct[1542] * ct[411];
  proc_control_B.ct[1510] = -ct[1009];
  proc_control_B.ct[1511] = ct[10] * ct[1559] * ct[411];
  proc_control_B.ct[1512] = -ct[1012];
  proc_control_B.ct_tmp_n = ct[11] * ct[1542];
  proc_control_B.ct[1513] = proc_control_B.ct_tmp_n * ct[402];
  proc_control_B.ct[1514] = -ct[1014];
  proc_control_B.ct[1515] = -ct[1016];
  proc_control_B.ct[1516] = ct[11] * ct[1529] * ct[407];
  proc_control_B.ct[1517] = -ct[1019];
  proc_control_B.ct[1518] = ct[11] * ct[1559] * ct[407];
  proc_control_B.ct[1519] = -ct[1021];
  proc_control_B.ct[1520] = -ct[1023];
  proc_control_B.ct[1521] = ct[1330];
  proc_control_B.ct[1522] = proc_control_B.ct_tmp_n * ct[411];
  proc_control_B.ct[1523] = -ct[1025];
  proc_control_B.ct[1524] = ct[12] * ct[1529] * ct[402];
  proc_control_B.ct[1525] = -ct[1027];
  proc_control_B.ct[1526] = ct[12] * ct[1542] * ct[402];
  proc_control_B.ct[1527] = -ct[1030];
  proc_control_B.ct[1528] = -ct[1031];
  proc_control_B.ct_tmp_n = ct[12] * ct[1559];
  proc_control_B.ct[1529] = proc_control_B.ct_tmp_n * ct[407];
  proc_control_B.ct[1530] = -ct[1033];
  proc_control_B.ct[1531] = -ct[1036];
  proc_control_B.ct[1532] = ct[1331];
  proc_control_B.ct[1533] = proc_control_B.ct_tmp_n * ct[411];
  memcpy(&proc_control_B.ct[1534], &ct[1332], 35U * sizeof(real_T));
  proc_control_B.ct[1569] = ct[9] * ct[1195];
  memcpy(&proc_control_B.ct[1570], &ct[1367], 18U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct[1588], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1202],
    ct[1198])));
  proc_control_B.ct[1590] = -ct[1076];
  proc_control_B.ct[1591] = -ct[1079];
  proc_control_B.ct[1592] = -ct[1080];
  proc_control_B.ct[1593] = -ct[1082];
  proc_control_B.ct[1594] = -ct[1083];
  proc_control_B.ct[1595] = ct[1385];
  proc_control_B.ct[1596] = ct[1386];
  proc_control_B.ct[1597] = ct[1387];
  proc_control_B.ct[1598] = -ct[1087];
  proc_control_B.ct[1599] = ct[1388];
  proc_control_B.ct[1600] = ct[1389];
  proc_control_B.ct[1601] = -ct[1091];
  proc_control_B.ct[1602] = -ct[1092];
  proc_control_B.ct[1603] = -ct[1096];
  proc_control_B.ct[1604] = -ct[1098];
  proc_control_B.ct[1605] = ct[1390];
  proc_control_B.ct[1606] = -ct[1099];
  proc_control_B.ct[1607] = ct[1391];
  proc_control_B.ct[1608] = -ct[1100];
  proc_control_B.ct[1609] = -ct[1101];
  proc_control_B.ct[1610] = -ct[1102];
  proc_control_B.ct[1611] = ct[1392];
  proc_control_B.ct[1612] = -ct[1103];
  proc_control_B.ct[1613] = -ct[1104];
  proc_control_B.ct[1614] = ct[1393];
  proc_control_B.ct[1615] = -ct[1105];
  proc_control_B.ct[1616] = -ct[1106];
  proc_control_B.ct[1617] = ct[1394];
  proc_control_B.ct[1618] = -ct[1107];
  proc_control_B.ct[1619] = -ct[1108];
  proc_control_B.ct[1620] = -ct[1109];
  proc_control_B.ct[1621] = ct[1395];
  proc_control_B.ct[1622] = -ct[1110];
  proc_control_B.ct[1623] = -ct[1111];
  memcpy(&proc_control_B.ct[1624], &ct[1396], 250U * sizeof(real_T));
  proc_control_B.ct[1874] = ct[1646];
  proc_control_B.ct[1875] = ct[1648];
  proc_control_B.ct[1876] = ct[1649];
  proc_control_B.ct[1877] = ct[1650];
  proc_control_B.ct[1878] = ct[1651];
  proc_control_B.ct[1879] = ct[1653];
  proc_control_B.ct[1880] = ct[1654];
  proc_control_B.ct[1881] = ct[1656];
  proc_control_B.ct[1882] = ct[1657];
  proc_control_B.ct[1883] = ct[1659];
  proc_control_B.ct[1884] = ct[1660];
  proc_control_B.ct[1885] = ct[1662];
  proc_control_B.ct[1886] = ct[1664];
  proc_control_B.ct[1887] = ct[1665];
  proc_control_B.ct[1888] = ct[1666];
  proc_control_B.ct[1889] = ct[1667];
  proc_control_B.ct[1890] = ct[1668];
  memcpy(&proc_control_B.ct[1891], &ct[1670], 237U * sizeof(real_T));
  proc_control_B.ct[2128] = ct[1912];
  proc_control_B.ct[2129] = ct[1914];
  proc_control_B.ct[2130] = ct[1915];
  proc_control_B.ct[2131] = ct[1916];
  memcpy(&proc_control_B.ct[2132], &ct[1918], 10U * sizeof(real_T));
  proc_control_B.ct[2142] = ct[1928];
  proc_control_B.ct[2143] = ct[1930];
  proc_control_B.ct[2144] = ct[1932];
  memcpy(&proc_control_B.ct[2145], &ct[1934], 9U * sizeof(real_T));
  proc_control_B.ct[2154] = ct[1943];
  proc_control_B.ct[2155] = ct[1945];
  proc_control_B.ct[2156] = ct[1946];
  proc_control_B.ct[2157] = ct[1947];
  proc_control_B.ct[2158] = ct[1948];
  proc_control_B.ct[2159] = ct[1950];
  proc_control_B.ct[2160] = ct[1952];
  proc_control_B.ct[2161] = ct[1953];
  proc_control_B.ct[2162] = ct[1954];
  proc_control_B.ct[2163] = ct[1956];
  proc_control_B.ct[2164] = ct[1957];
  proc_control_B.ct[2165] = ct[1958];
  proc_control_ft_6(proc_control_B.ct, Anq);
}

void proc_control::proc_control_ft_4(const real_T ct[1640], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.ct_l[0] = ct[7];
  proc_control_B.ct_l[1] = ct[8];
  proc_control_B.ct_l[2] = ct[9];
  proc_control_B.ct_l[3] = ct[11];
  proc_control_B.ct_l[4] = ct[12];
  proc_control_B.ct_l[5] = ct[13];
  memcpy(&proc_control_B.ct_l[6], &ct[17], 25U * sizeof(real_T));
  proc_control_B.ct_l[31] = ct[42];
  memcpy(&proc_control_B.ct_l[32], &ct[44], 38U * sizeof(real_T));
  proc_control_B.ct_l[70] = ct[82];
  proc_control_B.ct_l[71] = ct[84];
  proc_control_B.ct_l[72] = ct[85];
  proc_control_B.ct_l[73] = ct[86];
  tmp = _mm_set1_pd(ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_l[74], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[1169])));
  _mm_storeu_pd(&proc_control_B.ct_l[76], _mm_mul_pd(tmp, _mm_set_pd(ct[1175],
    ct[1173])));
  tmp_0 = _mm_set_pd(ct[19], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_l[78], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1177],
    ct[1173])));
  proc_control_B.ct_l[80] = ct[87];
  _mm_storeu_pd(&proc_control_B.ct_l[81], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1179],
    ct[1175])));
  tmp_1 = _mm_set1_pd(ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_l[83], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1176])));
  _mm_storeu_pd(&proc_control_B.ct_l[85], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1178])));
  _mm_storeu_pd(&proc_control_B.ct_l[87], _mm_mul_pd(_mm_set1_pd(ct[11]),
    _mm_loadu_pd(&ct[1313])));
  _mm_storeu_pd(&proc_control_B.ct_l[89], _mm_mul_pd(_mm_set_pd(ct[9], ct[20]),
    _mm_set_pd(ct[1318], ct[1181])));
  proc_control_B.ct_l[91] = ct[88];
  _mm_storeu_pd(&proc_control_B.ct_l[92], _mm_mul_pd(_mm_set_pd(ct[20], ct[10]),
    _mm_set_pd(ct[1183], ct[1317])));
  tmp_8 = _mm_loadu_pd(&ct[1186]);
  _mm_storeu_pd(&proc_control_B.ct_l[94], _mm_mul_pd(tmp, tmp_8));
  _mm_storeu_pd(&proc_control_B.ct_l[96], _mm_mul_pd(tmp_1, tmp_8));
  _mm_storeu_pd(&proc_control_B.ct_l[98], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1188])));
  _mm_storeu_pd(&proc_control_B.ct_l[100], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1194],
    ct[1190])));
  proc_control_B.ct_l[102] = ct[89];
  _mm_storeu_pd(&proc_control_B.ct_l[103], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1195],
    ct[1191])));
  _mm_storeu_pd(&proc_control_B.ct_l[105], _mm_mul_pd(_mm_set_pd(ct[12], ct[13]),
    _mm_set_pd(ct[1316], ct[1313])));
  tmp_8 = _mm_set_pd(ct[20], ct[14]);
  _mm_storeu_pd(&proc_control_B.ct_l[107], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1194],
    ct[1312])));
  tmp_2 = _mm_set_pd(ct[20], ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_l[109], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1195],
    ct[1315])));
  _mm_storeu_pd(&proc_control_B.ct_l[111], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1199],
    ct[1197])));
  proc_control_B.ct_l[113] = ct[90];
  _mm_storeu_pd(&proc_control_B.ct_l[114], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[1203])));
  _mm_storeu_pd(&proc_control_B.ct_l[116], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1206],
    ct[1203])));
  _mm_storeu_pd(&proc_control_B.ct_l[118], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1208],
    ct[1204])));
  _mm_storeu_pd(&proc_control_B.ct_l[120], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1205],
    ct[1321])));
  _mm_storeu_pd(&proc_control_B.ct_l[122], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1206],
    ct[1320])));
  tmp_8 = _mm_set_pd(ct[20], ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_l[124], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1207],
    ct[1323])));
  _mm_storeu_pd(&proc_control_B.ct_l[126], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1208],
    ct[1324])));
  _mm_storeu_pd(&proc_control_B.ct_l[128], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1212],
    ct[1210])));
  _mm_storeu_pd(&proc_control_B.ct_l[130], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1216],
    ct[1214])));
  proc_control_B.ct_l[132] = ct[92];
  proc_control_B.ct_l[133] = ct[94];
  proc_control_B.ct_l[134] = ct[95];
  proc_control_B.ct_l[135] = ct[96];
  proc_control_B.ct_l[136] = ct[97];
  _mm_storeu_pd(&proc_control_B.ct_l[137], _mm_mul_pd(tmp, _mm_set_pd(ct[1223],
    ct[1221])));
  _mm_storeu_pd(&proc_control_B.ct_l[139], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1223])));
  _mm_storeu_pd(&proc_control_B.ct_l[141], _mm_mul_pd(_mm_set_pd(ct[19], ct[15]),
    _mm_set_pd(ct[1226], ct[1326])));
  _mm_storeu_pd(&proc_control_B.ct_l[143], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1226])));
  _mm_storeu_pd(&proc_control_B.ct_l[145], _mm_mul_pd(_mm_set_pd(ct[15], ct[20]),
    _mm_set_pd(ct[1334], ct[1228])));
  proc_control_B.ct_l[147] = ct[99];
  proc_control_B.ct_l[148] = ct[101];
  proc_control_B.ct_l[149] = ct[102];
  _mm_storeu_pd(&proc_control_B.ct_l[150], _mm_mul_pd(tmp, _mm_set_pd(ct[1233],
    ct[1231])));
  tmp = _mm_set_pd(ct[16], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_l[152], _mm_mul_pd(tmp, _mm_set_pd(ct[1317],
    ct[1233])));
  _mm_storeu_pd(&proc_control_B.ct_l[154], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1236],
    ct[1234])));
  _mm_storeu_pd(&proc_control_B.ct_l[156], _mm_mul_pd(tmp, _mm_set_pd(ct[1328],
    ct[1236])));
  _mm_storeu_pd(&proc_control_B.ct_l[158], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1239],
    ct[1237])));
  proc_control_B.ct_l[160] = ct[104];
  proc_control_B.ct_l[161] = ct[105];
  proc_control_B.ct_l[162] = ct[106];
  proc_control_B.ct_l[163] = ct[107];
  proc_control_B.ct_l[164] = ct[108];
  memcpy(&proc_control_B.ct_l[165], &ct[110], 10U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_l[175], _mm_mul_pd(tmp_0, _mm_loadu_pd(&ct
    [1242])));
  tmp = _mm_set_pd(ct[20], ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_l[177], _mm_mul_pd(tmp, _mm_set_pd(ct[1243],
    ct[1312])));
  _mm_storeu_pd(&proc_control_B.ct_l[179], _mm_mul_pd(tmp_0, _mm_set_pd(ct[1247],
    ct[1245])));
  _mm_storeu_pd(&proc_control_B.ct_l[181], _mm_mul_pd(tmp, _mm_set_pd(ct[1247],
    ct[1320])));
  proc_control_B.ct_l[183] = ct[20] * ct[1248];
  proc_control_B.ct_l[184] = ct[120];
  proc_control_B.ct_l[185] = ct[20] * ct[1250];
  memcpy(&proc_control_B.ct_l[186], &ct[121], 116U * sizeof(real_T));
  tmp = _mm_set_pd(ct[20], ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_l[302], _mm_mul_pd(tmp, _mm_set_pd(ct[1312],
    ct[1313])));
  _mm_storeu_pd(&proc_control_B.ct_l[304], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1320],
    ct[1315])));
  tmp_a = _mm_loadu_pd(&ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_l[306], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [1323])));
  _mm_storeu_pd(&proc_control_B.ct_l[308], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1329],
    ct[1327])));
  proc_control_B.ct_l[310] = ct[237];
  proc_control_B.ct_l[311] = ct[20] * ct[1333];
  memcpy(&proc_control_B.ct_l[312], &ct[238], 33U * sizeof(real_T));
  proc_control_B.ct_l[345] = ct[271];
  proc_control_B.ct_l[346] = ct[273];
  proc_control_B.ct_l[347] = ct[274];
  proc_control_B.ct_l[348] = ct[275];
  proc_control_B.ct_l[349] = ct[276];
  proc_control_B.ct_l[350] = ct[19] * ct[1370];
  proc_control_B.ct_l[351] = ct[277];
  proc_control_B.ct_l[352] = ct[278];
  proc_control_B.ct_l[353] = ct[20] * ct[1373];
  proc_control_B.ct_l[354] = ct[279];
  proc_control_B.ct_l[355] = ct[280];
  proc_control_B.ct_l[356] = ct[281];
  proc_control_B.ct_l[357] = ct[282];
  proc_control_B.ct_l[358] = ct[283];
  proc_control_B.ct_l[359] = ct[284];
  proc_control_B.ct_l[360] = ct[285];
  proc_control_B.ct_l[361] = ct[286];
  memcpy(&proc_control_B.ct_l[362], &ct[288], 24U * sizeof(real_T));
  proc_control_B.ct_l[386] = ct[312];
  proc_control_B.ct_l[387] = ct[315];
  proc_control_B.ct_l[388] = ct[316];
  proc_control_B.ct_l[389] = ct[317];
  memcpy(&proc_control_B.ct_l[390], &ct[319], 68U * sizeof(real_T));
  proc_control_B.ct_l[458] = -ct[1153];
  proc_control_B.ct_l[459] = -ct[1154];
  proc_control_B.ct_l[460] = -ct[1158];
  proc_control_B.ct_l[461] = ct[387];
  proc_control_B.ct_l[462] = ct[388];
  proc_control_B.ct_l[463] = ct[389];
  proc_control_B.ct_l[464] = ct[390];
  proc_control_B.ct_l[465] = ct[391];
  proc_control_B.ct_l[466] = ct[392];
  proc_control_B.ct_l[467] = ct[393];
  proc_control_B.ct_l[468] = -ct[1169];
  proc_control_B.ct_l[469] = -ct[1172];
  proc_control_B.ct_l[470] = -ct[1175];
  proc_control_B.ct_l[471] = -ct[1176];
  proc_control_B.ct_l[472] = -ct[1179];
  proc_control_B.ct_l[473] = -ct[1180];
  proc_control_B.ct_l[474] = -ct[1183];
  proc_control_B.ct_l[475] = -ct[1185];
  proc_control_B.ct_l[476] = -ct[1187];
  proc_control_B.ct_l[477] = ct[394];
  proc_control_B.ct_l[478] = ct[395];
  proc_control_B.ct_l[479] = -ct[1188];
  proc_control_B.ct_l[480] = -ct[1189];
  proc_control_B.ct_l[481] = -ct[1192];
  proc_control_B.ct_l[482] = -ct[1194];
  proc_control_B.ct_l[483] = -ct[1196];
  proc_control_B.ct_l[484] = -ct[1197];
  proc_control_B.ct_l[485] = -ct[1200];
  proc_control_B.ct_l[486] = -ct[1201];
  proc_control_B.ct_l[487] = -ct[1204];
  proc_control_B.ct_l[488] = -ct[1206];
  proc_control_B.ct_l[489] = -ct[1207];
  proc_control_B.ct_l[490] = -ct[1210];
  proc_control_B.ct_l[491] = -ct[1211];
  proc_control_B.ct_l[492] = -ct[1213];
  proc_control_B.ct_l[493] = -ct[1214];
  proc_control_B.ct_l[494] = -ct[1215];
  proc_control_B.ct_l[495] = -ct[1217];
  memcpy(&proc_control_B.ct_l[496], &ct[396], 41U * sizeof(real_T));
  proc_control_B.ct_l[537] = -ct[1312];
  proc_control_B.ct_l[538] = -ct[1313];
  proc_control_B.ct_l[539] = -ct[1317];
  proc_control_B.ct_l[540] = -ct[1320];
  proc_control_B.ct_l[541] = -ct[1323];
  proc_control_B.ct_l[542] = -ct[1326];
  proc_control_B.ct_l[543] = -ct[1328];
  proc_control_B.ct_l[544] = -ct[1333];
  proc_control_B.ct_l[545] = -ct[1334];
  memcpy(&proc_control_B.ct_l[546], &ct[437], 36U * sizeof(real_T));
  proc_control_B.ct_l[582] = ct[473];
  memcpy(&proc_control_B.ct_l[583], &ct[475], 72U * sizeof(real_T));
  proc_control_B.ct_l[655] = ct[10] * ct[1594];
  proc_control_B.ct_l[656] = ct[547];
  proc_control_B.ct_l[657] = ct[548];
  proc_control_B.ct_l[658] = ct[9] * ct[1598];
  proc_control_B.ct_l[659] = ct[549];
  proc_control_B.ct_l[660] = ct[550];
  _mm_storeu_pd(&proc_control_B.ct_l[661], _mm_mul_pd(_mm_set_pd(ct[9], ct[10]),
    _mm_set_pd(ct[1602], ct[1596])));
  proc_control_B.ct_l[663] = ct[551];
  proc_control_B.ct_l[664] = ct[552];
  proc_control_B.ct_l[665] = ct[553];
  proc_control_B.ct_l[666] = ct[554];
  proc_control_B.ct_l[667] = ct[555];
  proc_control_B.ct_l[668] = ct[556];
  proc_control_B.ct_l[669] = ct[557];
  _mm_storeu_pd(&proc_control_B.ct_l[670], _mm_mul_pd(_mm_set_pd(ct[12], ct[14]),
    _mm_set_pd(ct[1603], ct[1594])));
  proc_control_B.ct_l[672] = ct[558];
  proc_control_B.ct_l[673] = ct[559];
  proc_control_B.ct_l[674] = ct[14] * ct[1600];
  proc_control_B.ct_l[675] = ct[560];
  proc_control_B.ct_l[676] = ct[12] * ct[1606];
  proc_control_B.ct_l[677] = ct[561];
  proc_control_B.ct_l[678] = ct[562];
  proc_control_B.ct_l[679] = ct[563];
  proc_control_B.ct_l[680] = ct[564];
  proc_control_B.ct_l[681] = ct[565];
  proc_control_B.ct_l[682] = ct[566];
  proc_control_B.ct_l[683] = ct[567];
  proc_control_B.ct_l[684] = ct[14] * ct[1614];
  proc_control_B.ct_l[685] = ct[568];
  proc_control_B.ct_l[686] = ct[13] * ct[1617];
  proc_control_B.ct_l[687] = ct[569];
  _mm_storeu_pd(&proc_control_B.ct_l[688], _mm_mul_pd(_mm_set_pd(ct[13], ct[14]),
    _mm_set_pd(ct[1620], ct[1616])));
  proc_control_B.ct_l[690] = ct[570];
  proc_control_B.ct_l[691] = ct[571];
  proc_control_B.ct_l[692] = ct[15] * ct[1612];
  proc_control_B.ct_l[693] = ct[572];
  proc_control_B.ct_l[694] = ct[15] * ct[1614];
  proc_control_B.ct_l[695] = ct[573];
  proc_control_B.ct_l[696] = ct[15] * ct[1626];
  proc_control_B.ct_l[697] = ct[574];
  proc_control_B.ct_l[698] = ct[15] * ct[1633];
  proc_control_B.ct_l[699] = ct[575];
  proc_control_B.ct_l[700] = ct[576];
  proc_control_B.ct_l[701] = ct[16] * ct[1594];
  proc_control_B.ct_l[702] = ct[577];
  proc_control_B.ct_l[703] = ct[16] * ct[1596];
  proc_control_B.ct_l[704] = ct[578];
  proc_control_B.ct_l[705] = ct[16] * ct[1631];
  proc_control_B.ct_l[706] = ct[579];
  proc_control_B.ct_l[707] = ct[16] * ct[1633];
  proc_control_B.ct_l[708] = ct[580];
  proc_control_B.ct_l[709] = ct[17] * ct[1594];
  proc_control_B.ct_l[710] = ct[581];
  proc_control_B.ct_l[711] = ct[17] * ct[1600];
  proc_control_B.ct_l[712] = ct[582];
  proc_control_B.ct_l[713] = ct[17] * ct[1614];
  proc_control_B.ct_l[714] = ct[583];
  proc_control_B.ct_l[715] = ct[17] * ct[1616];
  proc_control_B.ct_l[716] = ct[584];
  proc_control_B.ct_l[717] = ct[585];
  proc_control_B.ct_l[718] = ct[586];
  proc_control_B.ct_l[719] = ct[587];
  proc_control_B.ct_l[720] = ct[588];
  tmp_b = _mm_loadu_pd(&ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_l[721], _mm_mul_pd(tmp_b, _mm_set_pd(ct[1594],
    ct[1596])));
  _mm_storeu_pd(&proc_control_B.ct_l[723], _mm_mul_pd(tmp, _mm_set_pd(ct[1594],
    ct[1600])));
  memcpy(&proc_control_B.ct_l[725], &ct[589], 29U * sizeof(real_T));
  proc_control_B.ct_l[754] = ct[618];
  proc_control_B.ct_l[755] = ct[620];
  proc_control_B.ct_l[756] = ct[624];
  proc_control_B.ct_l[757] = ct[626];
  proc_control_B.ct_l[758] = ct[627];
  proc_control_B.ct_l[759] = ct[628];
  proc_control_B.ct_l[760] = ct[629];
  proc_control_B.ct_l[761] = ct[630];
  memcpy(&proc_control_B.ct_l[762], &ct[633], 9U * sizeof(real_T));
  proc_control_B.ct_l[771] = ct[645];
  proc_control_B.ct_l[772] = ct[647];
  proc_control_B.ct_l[773] = ct[649];
  proc_control_B.ct_l[774] = ct[653];
  proc_control_B.ct_l[775] = ct[654];
  proc_control_B.ct_l[776] = ct[656];
  proc_control_B.ct_l[777] = ct[657];
  proc_control_B.ct_l[778] = ct[658];
  proc_control_B.ct_l[779] = ct[659];
  proc_control_B.ct_l[780] = ct[660];
  proc_control_B.ct_l[781] = ct[661];
  proc_control_B.ct_l[782] = ct[662];
  proc_control_B.ct_l[783] = ct[665];
  proc_control_B.ct_l[784] = ct[666];
  proc_control_B.ct_l[785] = ct[667];
  proc_control_B.ct_l[786] = ct[668];
  proc_control_B.ct_l[787] = ct[669];
  proc_control_B.ct_l[788] = ct[670];
  proc_control_B.ct_l[789] = ct[674];
  proc_control_B.ct_l[790] = ct[676];
  proc_control_B.ct_l[791] = ct[678];
  proc_control_B.ct_l[792] = ct[679];
  proc_control_B.ct_l[793] = ct[680];
  proc_control_B.ct_l[794] = ct[681];
  proc_control_B.ct_l[795] = ct[682];
  proc_control_B.ct_l[796] = ct[690];
  proc_control_B.ct_l[797] = ct[691];
  memcpy(&proc_control_B.ct_l[798], &ct[697], 40U * sizeof(real_T));
  proc_control_B.ct_l[838] = ct[738];
  proc_control_B.ct_l[839] = ct[740];
  proc_control_B.ct_l[840] = ct[741];
  proc_control_B.ct_l[841] = ct[742];
  proc_control_B.ct_l[842] = ct[743];
  proc_control_B.ct_l[843] = ct[744];
  proc_control_B.ct_l[844] = ct[745];
  proc_control_B.ct_l[845] = ct[747];
  proc_control_B.ct_l[846] = ct[749];
  proc_control_B.ct_l[847] = ct[751];
  proc_control_B.ct_l[848] = ct[752];
  proc_control_B.ct_l[849] = ct[753];
  proc_control_B.ct_l[850] = ct[754];
  proc_control_B.ct_l[851] = ct[755];
  proc_control_B.ct_l[852] = ct[756];
  proc_control_B.ct_l[853] = ct[757];
  proc_control_B.ct_l[854] = ct[759];
  memcpy(&proc_control_B.ct_l[855], &ct[761], 25U * sizeof(real_T));
  proc_control_B.ct_l[880] = ct[786];
  memcpy(&proc_control_B.ct_l[881], &ct[788], 99U * sizeof(real_T));
  proc_control_B.ct_l[980] = -ct[314];
  proc_control_B.ct_l[981] = -ct[316];
  proc_control_B.ct_l[982] = -ct[317];
  proc_control_B.ct_l[983] = -ct[318];
  proc_control_B.ct_l[984] = -ct[320];
  proc_control_B.ct_l[985] = ct[887];
  proc_control_B.ct_l[986] = -ct[323];
  proc_control_B.ct_l[987] = -ct[324];
  memcpy(&proc_control_B.ct_l[988], &ct[888], 9U * sizeof(real_T));
  tmp_1 = _mm_set1_pd(ct[1156]);
  _mm_storeu_pd(&proc_control_B.ct_l[997], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1252])));
  _mm_storeu_pd(&proc_control_B.ct_l[999], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1254])));
  _mm_storeu_pd(&proc_control_B.ct_l[1001], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1257])));
  proc_control_B.ct_l[1003] = ct[1156] * ct[1259];
  proc_control_B.ct_l[1004] = ct[897];
  tmp_8 = _mm_set_pd(ct[1171], ct[1156]);
  _mm_storeu_pd(&proc_control_B.ct_l[1005], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1266],
    ct[1260])));
  tmp_2 = _mm_set_pd(ct[1202], ct[1171]);
  _mm_storeu_pd(&proc_control_B.ct_l[1007], _mm_mul_pd(tmp_2, _mm_set_pd(ct[1266],
    ct[1267])));
  proc_control_B.ct_l[1009] = ct[1202] * ct[1267];
  proc_control_B.ct_l[1010] = ct[898];
  tmp_3 = _mm_set1_pd(ct[1171]);
  _mm_storeu_pd(&proc_control_B.ct_l[1011], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [1270])));
  _mm_storeu_pd(&proc_control_B.ct_l[1013], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [1274])));
  tmp_4 = _mm_set_pd(ct[1280], ct[1278]);
  _mm_storeu_pd(&proc_control_B.ct_l[1015], _mm_mul_pd(tmp_1, tmp_4));
  proc_control_B.ct_l[1017] = ct[899];
  tmp_5 = _mm_set1_pd(ct[1202]);
  _mm_storeu_pd(&proc_control_B.ct_l[1018], _mm_mul_pd(tmp_5, tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_l[1020], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [1283])));
  _mm_storeu_pd(&proc_control_B.ct_l[1022], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [1287])));
  tmp_4 = _mm_loadu_pd(&ct[1291]);
  _mm_storeu_pd(&proc_control_B.ct_l[1024], _mm_mul_pd(tmp_1, tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_l[1026], _mm_mul_pd(tmp_3, tmp_4));
  proc_control_B.ct_l[1028] = ct[1202] * ct[1298];
  proc_control_B.ct_l[1029] = ct[901];
  _mm_storeu_pd(&proc_control_B.ct_l[1030], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [1299])));
  _mm_storeu_pd(&proc_control_B.ct_l[1032], _mm_mul_pd(tmp_5, _mm_set_pd(ct[1303],
    ct[1301])));
  _mm_storeu_pd(&proc_control_B.ct_l[1034], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [1304])));
  proc_control_B.ct_l[1036] = ct[1202] * ct[1306];
  proc_control_B.ct_l[1037] = ct[902];
  _mm_storeu_pd(&proc_control_B.ct_l[1038], _mm_mul_pd(tmp_1, _mm_set_pd(ct[1309],
    ct[1307])));
  _mm_storeu_pd(&proc_control_B.ct_l[1040], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [1310])));
  proc_control_B.ct_l[1042] = ct[903];
  _mm_storeu_pd(&proc_control_B.ct_l[1043], _mm_mul_pd(_mm_loadu_pd(&ct[7]),
    _mm_loadu_pd(&ct[680])));
  _mm_storeu_pd(&proc_control_B.ct_l[1045], _mm_mul_pd(_mm_set_pd(ct[11], ct[9]),
    _mm_set_pd(ct[682], ct[680])));
  proc_control_B.ct_l[1047] = ct[12] * ct[681];
  proc_control_B.ct_l[1048] = ct[904];
  _mm_storeu_pd(&proc_control_B.ct_l[1049], _mm_mul_pd(_mm_set_pd(ct[1171], ct
    [13]), _mm_set_pd(ct[1335], ct[682])));
  proc_control_B.ct_l[1051] = ct[1202] * ct[1338];
  proc_control_B.ct_l[1052] = ct[905];
  _mm_storeu_pd(&proc_control_B.ct_l[1053], _mm_mul_pd(tmp_8, _mm_loadu_pd(&ct
    [1341])));
  proc_control_B.ct_l[1055] = ct[1202] * ct[1342];
  proc_control_B.ct_l[1056] = ct[906];
  _mm_storeu_pd(&proc_control_B.ct_l[1057], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1347],
    ct[1348])));
  _mm_storeu_pd(&proc_control_B.ct_l[1059], _mm_mul_pd(tmp_3, _mm_set_pd(ct[1353],
    ct[1351])));
  tmp_3 = _mm_set_pd(ct[1171], ct[1202]);
  _mm_storeu_pd(&proc_control_B.ct_l[1061], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [1353])));
  tmp_4 = _mm_set_pd(ct[1156], ct[1202]);
  _mm_storeu_pd(&proc_control_B.ct_l[1063], _mm_mul_pd(tmp_4, _mm_set_pd(ct[1364],
    ct[1358])));
  proc_control_B.ct_l[1065] = ct[907];
  proc_control_B.ct_l[1066] = ct[908];
  _mm_storeu_pd(&proc_control_B.ct_l[1067], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [1366])));
  _mm_storeu_pd(&proc_control_B.ct_l[1069], _mm_mul_pd(tmp_8, _mm_set_pd(ct[1371],
    ct[1372])));
  proc_control_B.ct_l[1071] = ct[909];
  tmp_9 = _mm_loadu_pd(&ct[1374]);
  _mm_storeu_pd(&proc_control_B.ct_l[1072], _mm_mul_pd(tmp_1, tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_l[1074], _mm_mul_pd(tmp_2, tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_l[1076], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[620])));
  _mm_storeu_pd(&proc_control_B.ct_l[1078], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[622])));
  _mm_storeu_pd(&proc_control_B.ct_l[1080], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[624])));
  _mm_storeu_pd(&proc_control_B.ct_l[1082], _mm_mul_pd(tmp_b, _mm_set_pd(ct[626],
    ct[627])));
  tmp_9 = _mm_set1_pd(ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_l[1084], _mm_mul_pd(tmp_9, _mm_loadu_pd(&ct
    [629])));
  _mm_storeu_pd(&proc_control_B.ct_l[1086], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[631])));
  _mm_storeu_pd(&proc_control_B.ct_l[1088], _mm_mul_pd(tmp_9, _mm_set_pd(ct[635],
    ct[633])));
  proc_control_B.ct_l[1090] = ct[914];
  _mm_storeu_pd(&proc_control_B.ct_l[1091], _mm_mul_pd(tmp, _mm_set_pd(ct[634],
    ct[637])));
  _mm_storeu_pd(&proc_control_B.ct_l[1093], _mm_mul_pd(tmp_2, _mm_set1_pd(ct
    [1376])));
  tmp_9 = _mm_set_pd(ct[18], ct[1202]);
  _mm_storeu_pd(&proc_control_B.ct_l[1095], _mm_mul_pd(tmp_9, _mm_set_pd(ct[639],
    ct[1377])));
  proc_control_B.ct_l[1097] = ct[915];
  tmp_6 = _mm_set_pd(ct[18], ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_l[1098], _mm_mul_pd(tmp_6, _mm_set_pd(ct[641],
    ct[638])));
  _mm_storeu_pd(&proc_control_B.ct_l[1100], _mm_mul_pd(tmp_a, _mm_set_pd(ct[641],
    ct[642])));
  _mm_storeu_pd(&proc_control_B.ct_l[1102], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct
    [644])));
  tmp_7 = _mm_set_pd(ct[18], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_l[1104], _mm_mul_pd(tmp_7, _mm_set_pd(ct[649],
    ct[645])));
  _mm_storeu_pd(&proc_control_B.ct_l[1106], _mm_mul_pd(tmp_0, _mm_set_pd(ct[651],
    ct[649])));
  _mm_storeu_pd(&proc_control_B.ct_l[1108], _mm_mul_pd(tmp_b, _mm_set_pd(ct[652],
    ct[653])));
  _mm_storeu_pd(&proc_control_B.ct_l[1110], _mm_mul_pd(tmp_0, _mm_set_pd(ct[657],
    ct[653])));
  _mm_storeu_pd(&proc_control_B.ct_l[1112], _mm_mul_pd(_mm_set_pd(ct[1171], ct
    [20]), _mm_set_pd(ct[1378], ct[656])));
  _mm_storeu_pd(&proc_control_B.ct_l[1114], _mm_mul_pd(tmp, _mm_set_pd(ct[658],
    ct[661])));
  proc_control_B.ct_l[1116] = ct[20] * ct[660];
  proc_control_B.ct_l[1117] = ct[922];
  _mm_storeu_pd(&proc_control_B.ct_l[1118], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [662])));
  _mm_storeu_pd(&proc_control_B.ct_l[1120], _mm_mul_pd(tmp_a, _mm_set_pd(ct[665],
    ct[663])));
  _mm_storeu_pd(&proc_control_B.ct_l[1122], _mm_mul_pd(tmp_0, _mm_set_pd(ct[669],
    ct[666])));
  proc_control_B.ct_l[1124] = ct[20] * ct[668];
  proc_control_B.ct_l[1125] = ct[925];
  _mm_storeu_pd(&proc_control_B.ct_l[1126], _mm_mul_pd(tmp_b, _mm_set1_pd(ct[670])));
  _mm_storeu_pd(&proc_control_B.ct_l[1128], _mm_mul_pd(tmp_b, _mm_set1_pd(ct[672])));
  _mm_storeu_pd(&proc_control_B.ct_l[1130], _mm_mul_pd(tmp_b, _mm_set1_pd(ct[674])));
  _mm_storeu_pd(&proc_control_B.ct_l[1132], _mm_mul_pd(tmp_9, _mm_set_pd(ct[684],
    ct[1379])));
  _mm_storeu_pd(&proc_control_B.ct_l[1134], _mm_mul_pd(tmp_6, _mm_set_pd(ct[686],
    ct[683])));
  _mm_storeu_pd(&proc_control_B.ct_l[1136], _mm_mul_pd(tmp_6, _mm_set_pd(ct[688],
    ct[685])));
  _mm_storeu_pd(&proc_control_B.ct_l[1138], _mm_mul_pd(tmp_7, _mm_set_pd(ct[692],
    ct[687])));
  _mm_storeu_pd(&proc_control_B.ct_l[1140], _mm_mul_pd(tmp_0, _mm_set_pd(ct[695],
    ct[689])));
  _mm_storeu_pd(&proc_control_B.ct_l[1142], _mm_mul_pd(tmp_0, _mm_set_pd(ct[696],
    ct[693])));
  proc_control_B.ct_l[1144] = ct[20] * ct[694];
  proc_control_B.ct_l[1145] = ct[927];
  proc_control_B.ct_l[1146] = ct[929];
  proc_control_B.ct_l[1147] = ct[930];
  proc_control_B.ct_l[1148] = ct[931];
  proc_control_B.ct_l[1149] = ct[933];
  proc_control_B.ct_l[1150] = ct[936];
  proc_control_B.ct_l[1151] = ct[937];
  proc_control_B.ct_l[1152] = ct[940];
  proc_control_B.ct_l[1153] = ct[941];
  proc_control_B.ct_l[1154] = ct[944];
  proc_control_B.ct_l[1155] = ct[946];
  proc_control_B.ct_l[1156] = ct[947];
  proc_control_B.ct_l[1157] = ct[948];
  proc_control_B.ct_l[1158] = ct[950];
  proc_control_B.ct_l[1159] = ct[19] * ct[20] * ct[21] * ct[1156] * ct[1290];
  proc_control_B.ct_l[1160] = ct[952];
  proc_control_B.ct_l[1161] = ct[18] * ct[20] * ct[22] * ct[1171] * ct[1290];
  proc_control_B.ct_l[1162] = ct[953];
  proc_control_B.ct_l[1163] = ct[18] * ct[19] * ct[23] * ct[1202] * ct[1290];
  memcpy(&proc_control_B.ct_l[1164], &ct[954], 10U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_l[1174], _mm_add_pd(_mm_add_pd(_mm_loadu_pd
    (&ct[0]), _mm_set_pd(ct[1523], ct[1512])), _mm_set_pd(ct[93], ct[91])));
  proc_control_B.ct_l[1176] = (ct[2] + ct[1534]) + ct[98];
  memcpy(&proc_control_B.ct_l[1177], &ct[964], 17U * sizeof(real_T));
  tmp_9 = _mm_set1_pd(ct[1290]);
  tmp_6 = _mm_set1_pd(ct[87]);
  tmp_7 = _mm_set_pd(ct[1156], ct[1171]);
  tmp_b = _mm_mul_pd(_mm_mul_pd(tmp_b, tmp_7), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_l[1194], _mm_mul_pd(tmp_b, tmp_6));
  tmp = _mm_mul_pd(_mm_mul_pd(tmp, tmp_4), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_l[1196], _mm_mul_pd(tmp, tmp_6));
  tmp_4 = _mm_set1_pd(ct[88]);
  _mm_storeu_pd(&proc_control_B.ct_l[1198], _mm_mul_pd(tmp_b, tmp_4));
  tmp_b = _mm_mul_pd(_mm_mul_pd(tmp_a, tmp_3), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_l[1200], _mm_mul_pd(tmp_b, tmp_4));
  tmp_6 = _mm_set1_pd(ct[89]);
  _mm_storeu_pd(&proc_control_B.ct_l[1202], _mm_mul_pd(tmp, tmp_6));
  proc_control_B.ct_l[1204] = ct[981];
  _mm_storeu_pd(&proc_control_B.ct_l[1205], _mm_mul_pd(tmp_b, tmp_6));
  proc_control_B.ct_l[1207] = -ct[619];
  proc_control_B.ct_l[1208] = -ct[620];
  proc_control_B.ct_l[1209] = -ct[621];
  proc_control_B.ct_l[1210] = -ct[622];
  proc_control_B.ct_l[1211] = -ct[623];
  proc_control_B.ct_l[1212] = -ct[624];
  proc_control_B.ct_l[1213] = ct[982];
  proc_control_B.ct_l[1214] = -ct[625];
  proc_control_B.ct_l[1215] = -ct[629];
  proc_control_B.ct_l[1216] = -ct[630];
  proc_control_B.ct_l[1217] = -ct[631];
  proc_control_B.ct_l[1218] = -ct[632];
  proc_control_B.ct_l[1219] = -ct[633];
  proc_control_B.ct_l[1220] = -ct[635];
  proc_control_B.ct_l[1221] = -ct[641];
  proc_control_B.ct_l[1222] = -ct[642];
  proc_control_B.ct_l[1223] = -ct[643];
  proc_control_B.ct_l[1224] = ct[983];
  proc_control_B.ct_l[1225] = -ct[644];
  proc_control_B.ct_l[1226] = -ct[645];
  proc_control_B.ct_l[1227] = -ct[646];
  proc_control_B.ct_l[1228] = -ct[648];
  proc_control_B.ct_l[1229] = -ct[649];
  proc_control_B.ct_l[1230] = -ct[650];
  proc_control_B.ct_l[1231] = -ct[651];
  proc_control_B.ct_l[1232] = -ct[652];
  proc_control_B.ct_l[1233] = -ct[653];
  proc_control_B.ct_l[1234] = -ct[655];
  proc_control_B.ct_l[1235] = -ct[660];
  proc_control_B.ct_l[1236] = -ct[662];
  proc_control_B.ct_l[1237] = -ct[663];
  proc_control_B.ct_l[1238] = -ct[664];
  proc_control_B.ct_l[1239] = -ct[665];
  proc_control_B.ct_l[1240] = -ct[666];
  proc_control_B.ct_l[1241] = -ct[670];
  proc_control_B.ct_l[1242] = -ct[671];
  proc_control_B.ct_l[1243] = -ct[672];
  proc_control_B.ct_l[1244] = ct[984];
  proc_control_B.ct_l[1245] = -ct[673];
  proc_control_B.ct_l[1246] = -ct[674];
  proc_control_B.ct_l[1247] = -ct[675];
  proc_control_B.ct_l[1248] = -ct[677];
  memcpy(&proc_control_B.ct_l[1249], &ct[985], 26U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_l[1275], _mm_mul_pd(_mm_set_pd(ct[20], ct[87]),
    _mm_set_pd(ct[809], ct[305])));
  proc_control_B.ct_l[1277] = ct[87] * ct[309];
  proc_control_B.ct_l[1278] = ct[1011];
  _mm_storeu_pd(&proc_control_B.ct_l[1279], _mm_mul_pd(tmp_4, _mm_set_pd(ct[293],
    ct[286])));
  _mm_storeu_pd(&proc_control_B.ct_l[1281], _mm_mul_pd(tmp_0, _mm_set_pd(ct[823],
    ct[821])));
  proc_control_B.ct_l[1283] = ct[87] * ct[321];
  proc_control_B.ct_l[1284] = ct[1012];
  _mm_storeu_pd(&proc_control_B.ct_l[1285], _mm_mul_pd(_mm_set_pd(ct[89], ct[87]),
    _mm_set_pd(ct[283], ct[325])));
  _mm_storeu_pd(&proc_control_B.ct_l[1287], _mm_mul_pd(_mm_set_pd(ct[20], ct[89]),
    _mm_set_pd(ct[841], ct[288])));
  proc_control_B.ct_l[1289] = ct[19] * ct[846];
  proc_control_B.ct_l[1290] = ct[1013];
  _mm_storeu_pd(&proc_control_B.ct_l[1291], _mm_mul_pd(_mm_set_pd(ct[89], ct[20]),
    _mm_set_pd(ct[299], ct[847])));
  _mm_storeu_pd(&proc_control_B.ct_l[1293], _mm_mul_pd(_mm_loadu_pd(&ct[88]),
    _mm_set_pd(ct[303], ct[315])));
  proc_control_B.ct_l[1295] = ct[1014];
  proc_control_B.ct_l[1296] = ct[88] * ct[322];
  proc_control_B.ct_l[1297] = ct[1015];
  proc_control_B.ct_l[1298] = ct[1016];
  proc_control_B.ct_l[1299] = ct[1017];
  proc_control_B.ct_l[1300] = ct[1018];
  _mm_storeu_pd(&proc_control_B.ct_l[1301], _mm_mul_pd(tmp_a, _mm_set_pd(ct[891],
    ct[889])));
  proc_control_B.ct_l[1303] = ct[19] * ct[893];
  proc_control_B.ct_l[1304] = -ct[737];
  proc_control_B.ct_l[1305] = -ct[739];
  proc_control_B.ct_l[1306] = ct[1019];
  proc_control_B.ct_l[1307] = -ct[744];
  proc_control_B.ct_l[1308] = -ct[746];
  proc_control_B.ct_l[1309] = -ct[748];
  proc_control_B.ct_l[1310] = -ct[750];
  proc_control_B.ct_l[1311] = -ct[752];
  proc_control_B.ct_l[1312] = -ct[758];
  proc_control_B.ct_l[1313] = -ct[760];
  proc_control_B.ct_l[1314] = ct[6] * ct[894];
  proc_control_B.ct_l[1315] = ct[1020];
  _mm_storeu_pd(&proc_control_B.ct_l[1316], _mm_mul_pd(_mm_set_pd(ct[10], ct[6]),
    _mm_set_pd(ct[894], ct[895])));
  proc_control_B.ct_l[1318] = ct[10] * ct[896];
  proc_control_B.ct_l[1319] = ct[1021];
  _mm_storeu_pd(&proc_control_B.ct_l[1320], _mm_mul_pd(_mm_set1_pd(ct[14]),
    _mm_loadu_pd(&ct[895])));
  proc_control_B.ct_l[1322] = ct[1022];
  _mm_storeu_pd(&proc_control_B.ct_l[1323], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(ct[21]), tmp_1), tmp_2), tmp_9));
  proc_control_B.ct_tmp_ly = ct[22] * ct[1156];
  proc_control_B.ct_l[1325] = proc_control_B.ct_tmp_ly * ct[1171] * ct[1290];
  proc_control_B.ct_l[1326] = ct[1023];
  tmp_0 = _mm_loadu_pd(&ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_l[1327], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_0, tmp_7), tmp_5), tmp_9));
  proc_control_B.ct_tmp_e = ct[23] * ct[1171];
  proc_control_B.ct_l[1329] = proc_control_B.ct_tmp_e * ct[1202] * ct[1290];
  proc_control_B.ct_l[1330] = ct[1024];
  proc_control_B.ct_l[1331] = ct[1025];
  proc_control_B.ct_l[1332] = ct[1026];
  proc_control_B.ct_tmp_c5 = ct[21] * ct[1156];
  proc_control_B.ct_l[1333] = proc_control_B.ct_tmp_c5 * ct[341];
  proc_control_B.ct_l[1334] = ct[1027];
  proc_control_B.ct_l[1335] = proc_control_B.ct_tmp_c5 * ct[342];
  proc_control_B.ct_l[1336] = ct[1028];
  proc_control_B.ct_tmp_m = ct[22] * ct[1171];
  proc_control_B.ct_l[1337] = proc_control_B.ct_tmp_m * ct[341];
  proc_control_B.ct_l[1338] = ct[1029];
  proc_control_B.ct_l[1339] = proc_control_B.ct_tmp_ly * ct[342];
  proc_control_B.ct_l[1340] = ct[1030];
  proc_control_B.ct_l[1341] = ct[1031];
  proc_control_B.ct_tmp_ly = ct[22] * ct[1202];
  proc_control_B.ct_l[1342] = proc_control_B.ct_tmp_ly * ct[342];
  proc_control_B.ct_l[1343] = ct[1032];
  proc_control_B.ct_l[1344] = proc_control_B.ct_tmp_c5 * ct[344];
  proc_control_B.ct_l[1345] = ct[1033];
  proc_control_B.ct_tmp_c5 = ct[21] * ct[1171];
  proc_control_B.ct_l[1346] = proc_control_B.ct_tmp_c5 * ct[345];
  proc_control_B.ct_l[1347] = ct[1034];
  proc_control_B.ct_tmp_d = ct[21] * ct[1202];
  proc_control_B.ct_l[1348] = proc_control_B.ct_tmp_d * ct[345];
  proc_control_B.ct_l[1349] = ct[1035];
  proc_control_B.ct_tmp_f = ct[23] * ct[1156];
  proc_control_B.ct_l[1350] = proc_control_B.ct_tmp_f * ct[341];
  proc_control_B.ct_l[1351] = ct[1036];
  proc_control_B.ct_l[1352] = ct[1037];
  proc_control_B.ct_l[1353] = proc_control_B.ct_tmp_e * ct[341];
  proc_control_B.ct_l[1354] = ct[1038];
  proc_control_B.ct_tmp_e = ct[23] * ct[1202];
  proc_control_B.ct_l[1355] = proc_control_B.ct_tmp_e * ct[342];
  proc_control_B.ct_l[1356] = ct[1039];
  proc_control_B.ct_l[1357] = ct[1040];
  tmp = _mm_set_pd(ct[344], ct[346]);
  _mm_storeu_pd(&proc_control_B.ct_l[1358], _mm_mul_pd(_mm_mul_pd(_mm_loadu_pd
    (&ct[21]), tmp_8), tmp));
  proc_control_B.ct_l[1360] = ct[1041];
  proc_control_B.ct_l[1361] = proc_control_B.ct_tmp_c5 * ct[347];
  proc_control_B.ct_l[1362] = ct[1042];
  proc_control_B.ct_l[1363] = ct[1043];
  proc_control_B.ct_l[1364] = proc_control_B.ct_tmp_d * ct[347];
  proc_control_B.ct_l[1365] = ct[1044];
  proc_control_B.ct_l[1366] = proc_control_B.ct_tmp_m * ct[345];
  proc_control_B.ct_l[1367] = ct[1045];
  proc_control_B.ct_l[1368] = ct[1046];
  proc_control_B.ct_l[1369] = proc_control_B.ct_tmp_f * ct[344];
  proc_control_B.ct_l[1370] = ct[1047];
  tmp_1 = _mm_mul_pd(tmp_0, tmp_8);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_l[1371], _mm_mul_pd(tmp_1, tmp));
  proc_control_B.ct_l[1373] = ct[1048];
  proc_control_B.ct_l[1374] = ct[1049];
  proc_control_B.ct_l[1375] = proc_control_B.ct_tmp_ly * ct[346];
  proc_control_B.ct_l[1376] = ct[1050];
  proc_control_B.ct_l[1377] = proc_control_B.ct_tmp_m * ct[347];
  proc_control_B.ct_l[1378] = ct[1051];
  proc_control_B.ct_l[1379] = proc_control_B.ct_tmp_e * ct[345];
  proc_control_B.ct_l[1380] = ct[1052];
  proc_control_B.ct_l[1381] = proc_control_B.ct_tmp_e * ct[346];
  proc_control_B.ct_l[1382] = ct[1053];
  proc_control_B.ct_l[1383] = proc_control_B.ct_tmp_e * ct[347];
  proc_control_B.ct_l[1384] = ct[1054];
  proc_control_B.ct_l[1385] = ct[1055];
  proc_control_B.ct_l[1386] = -ct[910];
  proc_control_B.ct_l[1387] = -ct[911];
  proc_control_B.ct_l[1388] = -ct[912];
  proc_control_B.ct_l[1389] = -ct[913];
  proc_control_B.ct_l[1390] = ct[1056];
  proc_control_B.ct_l[1391] = -ct[916];
  proc_control_B.ct_l[1392] = -ct[917];
  proc_control_B.ct_l[1393] = ct[1057];
  proc_control_B.ct_l[1394] = -ct[918];
  proc_control_B.ct_l[1395] = -ct[919];
  proc_control_B.ct_l[1396] = -ct[920];
  proc_control_B.ct_l[1397] = -ct[921];
  proc_control_B.ct_l[1398] = ct[1058];
  proc_control_B.ct_l[1399] = -ct[923];
  proc_control_B.ct_l[1400] = -ct[924];
  proc_control_B.ct_l[1401] = ct[1059];
  proc_control_B.ct_l[1402] = -ct[926];
  proc_control_B.ct_l[1403] = -ct[928];
  proc_control_B.ct_l[1404] = -ct[932];
  proc_control_B.ct_l[1405] = -ct[934];
  proc_control_B.ct_l[1406] = -ct[935];
  proc_control_B.ct_l[1407] = -ct[938];
  proc_control_B.ct_l[1408] = -ct[939];
  proc_control_B.ct_l[1409] = -ct[942];
  proc_control_B.ct_l[1410] = ct[1060];
  proc_control_B.ct_l[1411] = -ct[943];
  proc_control_B.ct_l[1412] = -ct[945];
  proc_control_B.ct_l[1413] = -ct[949];
  proc_control_B.ct_l[1414] = -ct[951];
  proc_control_B.ct_l[1415] = proc_control_B.ct_tmp_f * ct[455];
  proc_control_B.ct_l[1416] = ct[1061];
  _mm_storeu_pd(&proc_control_B.ct_l[1417], _mm_mul_pd(tmp_1, _mm_set_pd(ct[458],
    ct[459])));
  _mm_storeu_pd(&proc_control_B.ct_l[1419], _mm_mul_pd(_mm_mul_pd(tmp_0, tmp_2),
    _mm_set_pd(ct[461], ct[462])));
  proc_control_B.ct_l[1421] = proc_control_B.ct_tmp_e * ct[462];
  proc_control_B.ct_tmp_ly = ct[1156] * ct[1171] * ct[1290];
  proc_control_B.ct_l[1422] = proc_control_B.ct_tmp_ly * ct[87];
  proc_control_B.ct_l[1423] = ct[87] * ct[894];
  proc_control_B.ct_tmp_e = ct[1156] * ct[1202] * ct[1290];
  proc_control_B.ct_l[1424] = proc_control_B.ct_tmp_e * ct[87];
  proc_control_B.ct_l[1425] = ct[87] * ct[895];
  proc_control_B.ct_l[1426] = proc_control_B.ct_tmp_ly * ct[88];
  proc_control_B.ct_l[1427] = ct[1062];
  proc_control_B.ct_l[1428] = ct[88] * ct[894];
  proc_control_B.ct_tmp_ly = ct[1171] * ct[1202] * ct[1290];
  proc_control_B.ct_l[1429] = proc_control_B.ct_tmp_ly * ct[88];
  proc_control_B.ct_l[1430] = ct[88] * ct[896];
  proc_control_B.ct_l[1431] = proc_control_B.ct_tmp_e * ct[89];
  proc_control_B.ct_l[1432] = ct[89] * ct[895];
  proc_control_B.ct_l[1433] = proc_control_B.ct_tmp_ly * ct[89];
  proc_control_B.ct_l[1434] = ct[89] * ct[896];
  proc_control_B.ct_l[1435] = ct[1063];
  proc_control_B.ct_l[1436] = ct[1064];
  _mm_storeu_pd(&proc_control_B.ct_l[1437], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_loadu_pd(&ct[3]), _mm_set_pd(ct[900],
    ct[787])), _mm_set_pd(ct[1495], ct[1490])), _mm_set_pd(ct[1607], ct[43])),
     _mm_set1_pd(ct[83])), _mm_set_pd(ct[100], ct[109])), _mm_set_pd(ct[287],
    ct[272])));
  proc_control_B.ct_l[1439] = (((((ct[5] + ct[474]) + ct[1504]) + ct[1607]) +
    ct[43]) + ct[103]) + ct[313];
  memcpy(&proc_control_B.ct_l[1440], &ct[1065], 87U * sizeof(real_T));
  proc_control_B.ct_l[1527] = ct[1152];
  proc_control_B.ct_l[1528] = ct[1155];
  proc_control_B.ct_l[1529] = ct[1156];
  proc_control_B.ct_l[1530] = ct[1157];
  memcpy(&proc_control_B.ct_l[1531], &ct[1159], 9U * sizeof(real_T));
  proc_control_B.ct_l[1540] = ct[1168];
  proc_control_B.ct_l[1541] = ct[1170];
  proc_control_B.ct_l[1542] = ct[1171];
  proc_control_B.ct_l[1543] = ct[1173];
  proc_control_B.ct_l[1544] = ct[1174];
  proc_control_B.ct_l[1545] = ct[1177];
  proc_control_B.ct_l[1546] = ct[1178];
  proc_control_B.ct_l[1547] = ct[1181];
  proc_control_B.ct_l[1548] = ct[1182];
  proc_control_B.ct_l[1549] = ct[1184];
  proc_control_B.ct_l[1550] = ct[1186];
  proc_control_B.ct_l[1551] = ct[1190];
  proc_control_B.ct_l[1552] = ct[1191];
  proc_control_B.ct_l[1553] = ct[1193];
  proc_control_B.ct_l[1554] = ct[1195];
  proc_control_B.ct_l[1555] = ct[1198];
  proc_control_B.ct_l[1556] = ct[1199];
  proc_control_B.ct_l[1557] = ct[1200];
  proc_control_B.ct_l[1558] = ct[1201];
  proc_control_B.ct_l[1559] = ct[1202];
  proc_control_B.ct_l[1560] = ct[1203];
  proc_control_B.ct_l[1561] = ct[1205];
  proc_control_B.ct_l[1562] = ct[1208];
  proc_control_B.ct_l[1563] = ct[1209];
  proc_control_B.ct_l[1564] = ct[1212];
  proc_control_B.ct_l[1565] = ct[1213];
  proc_control_B.ct_l[1566] = ct[1215];
  proc_control_B.ct_l[1567] = ct[1216];
  proc_control_B.ct_l[1568] = ct[1218];
  proc_control_B.ct_l[1569] = ct[1219];
  proc_control_B.ct_l[1570] = ct[1220];
  proc_control_B.ct_l[1571] = ct[1221];
  proc_control_B.ct_l[1572] = ct[1222];
  proc_control_B.ct_l[1573] = ct[1224];
  proc_control_B.ct_l[1574] = ct[1225];
  memcpy(&proc_control_B.ct_l[1575], &ct[1227], 24U * sizeof(real_T));
  proc_control_B.ct_l[1599] = ct[1251];
  proc_control_B.ct_l[1600] = ct[1253];
  proc_control_B.ct_l[1601] = ct[1254];
  proc_control_B.ct_l[1602] = ct[1255];
  proc_control_B.ct_l[1603] = ct[1256];
  proc_control_B.ct_l[1604] = ct[1257];
  proc_control_B.ct_l[1605] = ct[1258];
  proc_control_B.ct_l[1606] = ct[1260];
  proc_control_B.ct_l[1607] = ct[1261];
  proc_control_B.ct_l[1608] = ct[1262];
  proc_control_B.ct_l[1609] = ct[1263];
  proc_control_B.ct_l[1610] = ct[1264];
  proc_control_B.ct_l[1611] = ct[1265];
  proc_control_B.ct_l[1612] = ct[1267];
  proc_control_B.ct_l[1613] = ct[1269];
  proc_control_B.ct_l[1614] = ct[1271];
  proc_control_B.ct_l[1615] = ct[1272];
  proc_control_B.ct_l[1616] = ct[1273];
  proc_control_B.ct_l[1617] = ct[1275];
  proc_control_B.ct_l[1618] = ct[1276];
  proc_control_B.ct_l[1619] = ct[1277];
  proc_control_B.ct_l[1620] = ct[1279];
  proc_control_B.ct_l[1621] = ct[1280];
  proc_control_B.ct_l[1622] = ct[1281];
  proc_control_B.ct_l[1623] = ct[1282];
  proc_control_B.ct_l[1624] = ct[1284];
  proc_control_B.ct_l[1625] = ct[1285];
  proc_control_B.ct_l[1626] = ct[1286];
  proc_control_B.ct_l[1627] = ct[1288];
  proc_control_B.ct_l[1628] = ct[1290];
  proc_control_B.ct_l[1629] = ct[1292];
  proc_control_B.ct_l[1630] = ct[1293];
  proc_control_B.ct_l[1631] = ct[1294];
  proc_control_B.ct_l[1632] = ct[1295];
  proc_control_B.ct_l[1633] = ct[1296];
  proc_control_B.ct_l[1634] = ct[1297];
  proc_control_B.ct_l[1635] = ct[1299];
  proc_control_B.ct_l[1636] = ct[1300];
  proc_control_B.ct_l[1637] = ct[1301];
  proc_control_B.ct_l[1638] = ct[1302];
  proc_control_B.ct_l[1639] = ct[1303];
  proc_control_B.ct_l[1640] = ct[1304];
  memcpy(&proc_control_B.ct_l[1641], &ct[1306], sizeof(real_T) << 5U);
  proc_control_B.ct_l[1673] = ct[1338];
  memcpy(&proc_control_B.ct_l[1674], &ct[1340], 10U * sizeof(real_T));
  proc_control_B.ct_l[1684] = ct[1350];
  proc_control_B.ct_l[1685] = ct[1352];
  proc_control_B.ct_l[1686] = ct[1353];
  memcpy(&proc_control_B.ct_l[1687], &ct[1355], sizeof(real_T) << 3U);
  proc_control_B.ct_l[1695] = ct[1363];
  proc_control_B.ct_l[1696] = ct[1365];
  proc_control_B.ct_l[1697] = ct[1366];
  proc_control_B.ct_l[1698] = ct[1367];
  proc_control_B.ct_l[1699] = ct[1368];
  proc_control_B.ct_l[1700] = ct[1369];
  proc_control_B.ct_l[1701] = ct[1370];
  proc_control_B.ct_l[1702] = ct[1373];
  memcpy(&proc_control_B.ct_l[1703], &ct[1380], 109U * sizeof(real_T));
  proc_control_B.ct_l[1812] = ct[1489];
  proc_control_B.ct_l[1813] = ct[1491];
  proc_control_B.ct_l[1814] = ct[1492];
  proc_control_B.ct_l[1815] = ct[1493];
  proc_control_B.ct_l[1816] = ct[1494];
  proc_control_B.ct_l[1817] = ct[1496];
  proc_control_B.ct_l[1818] = ct[1497];
  proc_control_B.ct_l[1819] = ct[1498];
  proc_control_B.ct_l[1820] = ct[1499];
  proc_control_B.ct_l[1821] = ct[1500];
  proc_control_B.ct_l[1822] = ct[1501];
  proc_control_B.ct_l[1823] = ct[1502];
  proc_control_B.ct_l[1824] = ct[1503];
  proc_control_B.ct_l[1825] = ct[1505];
  proc_control_B.ct_l[1826] = ct[1506];
  proc_control_B.ct_l[1827] = ct[1507];
  proc_control_B.ct_l[1828] = ct[1508];
  proc_control_B.ct_l[1829] = ct[1509];
  proc_control_B.ct_l[1830] = ct[1510];
  proc_control_B.ct_l[1831] = ct[1511];
  memcpy(&proc_control_B.ct_l[1832], &ct[1513], 9U * sizeof(real_T));
  proc_control_B.ct_l[1841] = ct[1522];
  memcpy(&proc_control_B.ct_l[1842], &ct[1524], 9U * sizeof(real_T));
  proc_control_B.ct_l[1851] = ct[1533];
  memcpy(&proc_control_B.ct_l[1852], &ct[1535], 69U * sizeof(real_T));
  proc_control_B.ct_l[1921] = ct[6] * ct[1502];
  proc_control_B.ct_l[1922] = ct[1604];
  proc_control_B.ct_l[1923] = ct[1605];
  proc_control_B.ct_l[1924] = ct[1606];
  memcpy(&proc_control_B.ct_l[1925], &ct[1608], 13U * sizeof(real_T));
  proc_control_B.ct_l[1938] = ct[10] * ct[1503];
  memcpy(&proc_control_B.ct_l[1939], &ct[1621], 15U * sizeof(real_T));
  proc_control_B.ct_l[1954] = ct[14] * ct[1505];
  proc_control_B.ct_l[1955] = ct[1636];
  proc_control_B.ct_l[1956] = ct[1637];
  proc_control_B.ct_l[1957] = ct[1638];
  proc_control_B.ct_l[1958] = ct[1639];
  proc_control_ft_5(proc_control_B.ct_l, Anq);
}

void proc_control::proc_control_ft_3(const real_T ct[1260], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memcpy(&proc_control_B.ct_f[0], &ct[0], 57U * sizeof(real_T));
  tmp_9 = _mm_set1_pd(ct[888]);
  tmp_d = _mm_loadu_pd(&ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_f[57], _mm_mul_pd(_mm_mul_pd(tmp_d,
    _mm_set_pd(ct[805], ct[772])), tmp_9));
  proc_control_B.ct_f[59] = ct[23] * ct[826] * ct[888];
  _mm_storeu_pd(&proc_control_B.ct_f[60], _mm_mul_pd(_mm_loadu_pd(&ct[596]),
    _mm_set_pd(ct[1257], ct[1258])));
  _mm_storeu_pd(&proc_control_B.ct_f[62], _mm_mul_pd(_mm_set_pd(ct[603], ct[596]),
    _mm_set_pd(ct[1257], ct[1259])));
  _mm_storeu_pd(&proc_control_B.ct_f[64], _mm_mul_pd(_mm_set_pd(ct[603], ct[597]),
    _mm_set_pd(ct[1258], ct[1259])));
  tmp = _mm_set1_pd(ct[21]);
  tmp_a = _mm_loadu_pd(&ct[732]);
  _mm_storeu_pd(&proc_control_B.ct_f[66], _mm_mul_pd(tmp, tmp_a));
  tmp_b = _mm_loadu_pd(&ct[734]);
  _mm_storeu_pd(&proc_control_B.ct_f[68], _mm_mul_pd(tmp, tmp_b));
  tmp_c = _mm_loadu_pd(&ct[736]);
  _mm_storeu_pd(&proc_control_B.ct_f[70], _mm_mul_pd(tmp, tmp_c));
  proc_control_B.ct_f[72] = ct[57];
  tmp_0 = _mm_set1_pd(ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_f[73], _mm_mul_pd(tmp_0, tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_f[75], _mm_mul_pd(tmp_0, tmp_b));
  _mm_storeu_pd(&proc_control_B.ct_f[77], _mm_mul_pd(tmp_0, tmp_c));
  tmp_1 = _mm_set1_pd(ct[23]);
  _mm_storeu_pd(&proc_control_B.ct_f[79], _mm_mul_pd(tmp_1, tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_f[81], _mm_mul_pd(tmp_1, tmp_b));
  proc_control_B.ct_f[83] = ct[58];
  _mm_storeu_pd(&proc_control_B.ct_f[84], _mm_mul_pd(tmp_1, tmp_c));
  proc_control_B.ct_f[86] = ct[21] * ct[745];
  proc_control_B.ct_f[87] = ct[59];
  proc_control_B.ct_f[88] = ct[60];
  proc_control_B.ct_f[89] = ct[61];
  proc_control_B.ct_f[90] = ct[62];
  proc_control_B.ct_f[91] = ct[63];
  proc_control_B.ct_f[92] = ct[22] * ct[745];
  proc_control_B.ct_f[93] = ct[64];
  _mm_storeu_pd(&proc_control_B.ct_f[94], _mm_mul_pd(_mm_set_pd(ct[23], ct[21]),
    _mm_set_pd(ct[745], ct[748])));
  _mm_storeu_pd(&proc_control_B.ct_f[96], _mm_mul_pd(tmp_d, _mm_set_pd(ct[748],
    ct[752])));
  proc_control_B.ct_f[98] = ct[65];
  proc_control_B.ct_f[99] = ct[22] * ct[752];
  proc_control_B.ct_f[100] = ct[66];
  _mm_storeu_pd(&proc_control_B.ct_f[101], _mm_mul_pd(tmp_1, _mm_set_pd(ct[752],
    ct[748])));
  proc_control_B.ct_f[103] = ct[67];
  proc_control_B.ct_f[104] = -ct[1076];
  proc_control_B.ct_f[105] = -ct[1077];
  proc_control_B.ct_f[106] = -ct[1080];
  proc_control_B.ct_f[107] = -ct[1081];
  proc_control_B.ct_f[108] = -ct[1082];
  proc_control_B.ct_f[109] = ct[68];
  proc_control_B.ct_f[110] = -ct[1083];
  proc_control_B.ct_f[111] = -ct[1084];
  proc_control_B.ct_f[112] = -ct[1085];
  proc_control_B.ct_f[113] = -ct[1086];
  proc_control_B.ct_f[114] = -ct[1087];
  proc_control_B.ct_f[115] = -ct[1088];
  proc_control_B.ct_f[116] = -ct[1090];
  proc_control_B.ct_f[117] = -ct[1092];
  proc_control_B.ct_f[118] = -ct[1093];
  proc_control_B.ct_f[119] = ct[69];
  proc_control_B.ct_f[120] = ct[70];
  tmp_d = _mm_set1_pd(ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_f[121], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [848])));
  _mm_storeu_pd(&proc_control_B.ct_f[123], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [850])));
  _mm_storeu_pd(&proc_control_B.ct_f[125], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [852])));
  proc_control_B.ct_f[127] = ct[19] * ct[852];
  proc_control_B.ct_f[128] = ct[71];
  tmp_a = _mm_loadu_pd(&ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_f[129], _mm_mul_pd(tmp_a, _mm_set_pd(ct[852],
    ct[853])));
  tmp_b = _mm_set_pd(ct[18], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_f[131], _mm_mul_pd(tmp_b, _mm_loadu_pd(&ct
    [853])));
  _mm_storeu_pd(&proc_control_B.ct_f[133], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [855])));
  _mm_storeu_pd(&proc_control_B.ct_f[135], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [857])));
  tmp_c = _mm_set_pd(ct[858], ct[859]);
  tmp_e = _mm_loadu_pd(&ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_f[137], _mm_mul_pd(tmp_e, tmp_c));
  _mm_storeu_pd(&proc_control_B.ct_f[139], _mm_mul_pd(tmp_a, tmp_c));
  _mm_storeu_pd(&proc_control_B.ct_f[141], _mm_mul_pd(tmp_b, _mm_loadu_pd(&ct
    [859])));
  _mm_storeu_pd(&proc_control_B.ct_f[143], _mm_mul_pd(tmp_e, _mm_set_pd(ct[860],
    ct[861])));
  tmp_c = _mm_set_pd(ct[861], ct[862]);
  _mm_storeu_pd(&proc_control_B.ct_f[145], _mm_mul_pd(tmp_e, tmp_c));
  tmp_3 = _mm_set_pd(ct[20], ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_f[147], _mm_mul_pd(tmp_3, _mm_set_pd(ct[860],
    ct[863])));
  _mm_storeu_pd(&proc_control_B.ct_f[149], _mm_mul_pd(tmp_a, tmp_c));
  _mm_storeu_pd(&proc_control_B.ct_f[151], _mm_mul_pd(tmp_a, _mm_set_pd(ct[862],
    ct[863])));
  _mm_storeu_pd(&proc_control_B.ct_f[153], _mm_mul_pd(tmp_a, _mm_set_pd(ct[863],
    ct[864])));
  _mm_storeu_pd(&proc_control_B.ct_f[155], _mm_mul_pd(tmp_a, _mm_set_pd(ct[864],
    ct[865])));
  tmp_c = _mm_set_pd(ct[19], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_f[157], _mm_mul_pd(tmp_c, _mm_set_pd(ct[868],
    ct[865])));
  _mm_storeu_pd(&proc_control_B.ct_f[159], _mm_mul_pd(tmp_e, _mm_set_pd(ct[869],
    ct[870])));
  tmp_2 = _mm_set_pd(ct[870], ct[871]);
  _mm_storeu_pd(&proc_control_B.ct_f[161], _mm_mul_pd(tmp_e, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_f[163], _mm_mul_pd(tmp_a, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_f[165], _mm_mul_pd(tmp_a, _mm_set_pd(ct[871],
    ct[872])));
  tmp_2 = _mm_set_pd(ct[18], ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_f[167], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [873])));
  _mm_storeu_pd(&proc_control_B.ct_f[169], _mm_mul_pd(tmp_e, _mm_set_pd(ct[874],
    ct[875])));
  _mm_storeu_pd(&proc_control_B.ct_f[171], _mm_mul_pd(tmp_e, _mm_set_pd(ct[875],
    ct[876])));
  _mm_storeu_pd(&proc_control_B.ct_f[173], _mm_mul_pd(tmp_3, _mm_set_pd(ct[874],
    ct[878])));
  _mm_storeu_pd(&proc_control_B.ct_f[175], _mm_mul_pd(tmp_b, _mm_set_pd(ct[879],
    ct[875])));
  _mm_storeu_pd(&proc_control_B.ct_f[177], _mm_mul_pd(tmp_3, _mm_set_pd(ct[876],
    ct[880])));
  _mm_storeu_pd(&proc_control_B.ct_f[179], _mm_mul_pd(tmp_a, _mm_set_pd(ct[878],
    ct[879])));
  _mm_storeu_pd(&proc_control_B.ct_f[181], _mm_mul_pd(tmp_a, _mm_set_pd(ct[879],
    ct[880])));
  _mm_storeu_pd(&proc_control_B.ct_f[183], _mm_mul_pd(tmp_c, _mm_loadu_pd(&ct
    [880])));
  _mm_storeu_pd(&proc_control_B.ct_f[185], _mm_mul_pd(tmp_e, _mm_set_pd(ct[882],
    ct[883])));
  tmp_4 = _mm_set_pd(ct[883], ct[884]);
  _mm_storeu_pd(&proc_control_B.ct_f[187], _mm_mul_pd(tmp_e, tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_f[189], _mm_mul_pd(tmp_a, tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_f[191], _mm_mul_pd(tmp_a, _mm_set_pd(ct[884],
    ct[885])));
  proc_control_B.ct_f[193] = ct[19] * ct[886];
  proc_control_B.ct_f[194] = ct[72];
  _mm_storeu_pd(&proc_control_B.ct_f[195], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [889])));
  _mm_storeu_pd(&proc_control_B.ct_f[197], _mm_mul_pd(tmp_2, _mm_set_pd(ct[891],
    ct[889])));
  _mm_storeu_pd(&proc_control_B.ct_f[199], _mm_mul_pd(tmp_2, _mm_set_pd(ct[892],
    ct[890])));
  tmp_4 = _mm_set_pd(ct[893], ct[891]);
  _mm_storeu_pd(&proc_control_B.ct_f[201], _mm_mul_pd(tmp_2, tmp_4));
  tmp_5 = _mm_set_pd(ct[894], ct[892]);
  _mm_storeu_pd(&proc_control_B.ct_f[203], _mm_mul_pd(tmp_2, tmp_5));
  proc_control_B.ct_f[205] = ct[73];
  _mm_storeu_pd(&proc_control_B.ct_f[206], _mm_mul_pd(tmp_c, tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_f[208], _mm_mul_pd(tmp_c, tmp_5));
  tmp_4 = _mm_set1_pd(ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_f[210], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [893])));
  tmp_f = _mm_loadu_pd(&ct[895]);
  _mm_storeu_pd(&proc_control_B.ct_f[212], _mm_mul_pd(tmp_d, tmp_f));
  tmp_5 = _mm_set1_pd(ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_f[214], _mm_mul_pd(tmp_5, tmp_f));
  proc_control_B.ct_f[216] = ct[74];
  _mm_storeu_pd(&proc_control_B.ct_f[217], _mm_mul_pd(tmp_4, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[219], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [897])));
  _mm_storeu_pd(&proc_control_B.ct_f[221], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [899])));
  tmp_f = _mm_loadu_pd(&ct[901]);
  _mm_storeu_pd(&proc_control_B.ct_f[223], _mm_mul_pd(tmp_d, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[225], _mm_mul_pd(tmp_5, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[227], _mm_mul_pd(tmp_4, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[229], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [903])));
  _mm_storeu_pd(&proc_control_B.ct_f[231], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [905])));
  _mm_storeu_pd(&proc_control_B.ct_f[233], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [909])));
  proc_control_B.ct_f[235] = ct[75];
  proc_control_B.ct_f[236] = ct[21] * ct[825];
  proc_control_B.ct_f[237] = ct[76];
  _mm_storeu_pd(&proc_control_B.ct_f[238], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[936])));
  _mm_storeu_pd(&proc_control_B.ct_f[240], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[937])));
  proc_control_B.ct_f[242] = ct[18] * ct[938];
  proc_control_B.ct_f[243] = ct[77];
  _mm_storeu_pd(&proc_control_B.ct_f[244], _mm_mul_pd(_mm_set_pd(ct[18], ct[22]),
    _mm_set_pd(ct[942], ct[825])));
  _mm_storeu_pd(&proc_control_B.ct_f[246], _mm_mul_pd(tmp_e, _mm_loadu_pd(&ct
    [943])));
  proc_control_B.ct_f[248] = ct[78];
  _mm_storeu_pd(&proc_control_B.ct_f[249], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [945])));
  _mm_storeu_pd(&proc_control_B.ct_f[251], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [946])));
  proc_control_B.ct_f[253] = ct[19] * ct[947];
  proc_control_B.ct_f[254] = ct[79];
  _mm_storeu_pd(&proc_control_B.ct_f[255], _mm_mul_pd(_mm_set_pd(ct[18], ct[23]),
    _mm_set_pd(ct[952], ct[825])));
  proc_control_B.ct_f[257] = ct[18] * ct[954];
  proc_control_B.ct_f[258] = ct[80];
  _mm_storeu_pd(&proc_control_B.ct_f[259], _mm_mul_pd(tmp_2, _mm_set_pd(ct[959],
    ct[955])));
  _mm_storeu_pd(&proc_control_B.ct_f[261], _mm_mul_pd(tmp_d, _mm_loadu_pd(&ct
    [960])));
  proc_control_B.ct_f[263] = ct[81];
  tmp_f = _mm_set_pd(ct[963], ct[961]);
  _mm_storeu_pd(&proc_control_B.ct_f[264], _mm_mul_pd(tmp_2, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[266], _mm_mul_pd(tmp_c, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[268], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[964])));
  _mm_storeu_pd(&proc_control_B.ct_f[270], _mm_mul_pd(tmp_b, _mm_set_pd(ct[966],
    ct[964])));
  proc_control_B.ct_f[272] = ct[82];
  _mm_storeu_pd(&proc_control_B.ct_f[273], _mm_mul_pd(tmp_2, _mm_set_pd(ct[968],
    ct[966])));
  _mm_storeu_pd(&proc_control_B.ct_f[275], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [970])));
  _mm_storeu_pd(&proc_control_B.ct_f[277], _mm_mul_pd(tmp_e, _mm_set_pd(ct[975],
    ct[976])));
  tmp_f = _mm_loadu_pd(&ct[978]);
  _mm_storeu_pd(&proc_control_B.ct_f[279], _mm_mul_pd(tmp_d, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[281], _mm_mul_pd(tmp_a, tmp_f));
  proc_control_B.ct_f[283] = ct[84];
  proc_control_B.ct_f[284] = ct[85];
  proc_control_B.ct_f[285] = ct[86];
  proc_control_B.ct_f[286] = ct[87];
  proc_control_B.ct_f[287] = ct[88];
  proc_control_B.ct_f[288] = ct[89];
  proc_control_B.ct_f[289] = ct[90];
  proc_control_B.ct_f[290] = ct[91];
  proc_control_B.ct_f[291] = ct[93];
  proc_control_B.ct_f[292] = ct[94];
  proc_control_B.ct_f[293] = ct[95];
  proc_control_B.ct_f[294] = ct[97];
  proc_control_B.ct_f[295] = ct[98];
  _mm_storeu_pd(&proc_control_B.ct_f[296], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[980])));
  proc_control_B.ct_f[298] = ct[20] * ct[981];
  proc_control_B.ct_f[299] = ct[100];
  proc_control_B.ct_f[300] = ct[101];
  proc_control_B.ct_f[301] = ct[102];
  proc_control_B.ct_f[302] = ct[104];
  proc_control_B.ct_f[303] = ct[105];
  proc_control_B.ct_f[304] = ct[107];
  proc_control_B.ct_f[305] = ct[110];
  proc_control_B.ct_f[306] = ct[111];
  proc_control_B.ct_f[307] = ct[113];
  proc_control_B.ct_f[308] = ct[114];
  proc_control_B.ct_f[309] = ct[115];
  proc_control_B.ct_f[310] = ct[19] * ct[982];
  memcpy(&proc_control_B.ct_f[311], &ct[116], 15U * sizeof(real_T));
  proc_control_B.ct_f[326] = ct[20] * ct[983];
  proc_control_B.ct_f[327] = ct[131];
  proc_control_B.ct_f[328] = ct[133];
  proc_control_B.ct_f[329] = ct[134];
  proc_control_B.ct_f[330] = ct[135];
  proc_control_B.ct_f[331] = -ct[630];
  proc_control_B.ct_f[332] = ct[137];
  proc_control_B.ct_f[333] = -ct[631];
  proc_control_B.ct_f[334] = -ct[634];
  proc_control_B.ct_f[335] = -ct[635];
  proc_control_B.ct_f[336] = -ct[638];
  proc_control_B.ct_f[337] = -ct[639];
  proc_control_B.ct_f[338] = -ct[642];
  proc_control_B.ct_f[339] = -ct[643];
  proc_control_B.ct_f[340] = -ct[646];
  memcpy(&proc_control_B.ct_f[341], &ct[138], 43U * sizeof(real_T));
  proc_control_B.ct_f[384] = -ct[733];
  proc_control_B.ct_f[385] = -ct[734];
  proc_control_B.ct_f[386] = -ct[737];
  proc_control_B.ct_f[387] = ct[181];
  proc_control_B.ct_f[388] = ct[59] * ct[645];
  proc_control_B.ct_f[389] = ct[182];
  proc_control_B.ct_f[390] = ct[60] * ct[637];
  proc_control_B.ct_f[391] = ct[183];
  proc_control_B.ct_f[392] = ct[184];
  proc_control_B.ct_f[393] = ct[61] * ct[629];
  proc_control_B.ct_f[394] = ct[185];
  proc_control_B.ct_f[395] = ct[186];
  proc_control_B.ct_f[396] = ct[187];
  proc_control_B.ct_f[397] = ct[188];
  proc_control_B.ct_f[398] = ct[189];
  proc_control_B.ct_f[399] = ct[59] * ct[664];
  proc_control_B.ct_f[400] = ct[190];
  proc_control_B.ct_f[401] = ct[191];
  proc_control_B.ct_f[402] = -ct[848];
  proc_control_B.ct_f[403] = -ct[851];
  proc_control_B.ct_f[404] = -ct[852];
  proc_control_B.ct_f[405] = -ct[855];
  proc_control_B.ct_f[406] = -ct[856];
  proc_control_B.ct_f[407] = -ct[859];
  proc_control_B.ct_f[408] = -ct[860];
  proc_control_B.ct_f[409] = ct[192];
  proc_control_B.ct_f[410] = -ct[863];
  proc_control_B.ct_f[411] = -ct[864];
  proc_control_B.ct_f[412] = ct[193];
  proc_control_B.ct_f[413] = ct[194];
  proc_control_B.ct_f[414] = -ct[868];
  proc_control_B.ct_f[415] = -ct[871];
  proc_control_B.ct_f[416] = -ct[872];
  proc_control_B.ct_f[417] = -ct[875];
  proc_control_B.ct_f[418] = -ct[876];
  proc_control_B.ct_f[419] = -ct[880];
  proc_control_B.ct_f[420] = ct[195];
  proc_control_B.ct_f[421] = -ct[881];
  proc_control_B.ct_f[422] = -ct[884];
  proc_control_B.ct_f[423] = -ct[885];
  proc_control_B.ct_f[424] = ct[196];
  proc_control_B.ct_f[425] = ct[197];
  proc_control_B.ct_f[426] = -ct[889];
  proc_control_B.ct_f[427] = -ct[892];
  proc_control_B.ct_f[428] = -ct[893];
  proc_control_B.ct_f[429] = -ct[896];
  proc_control_B.ct_f[430] = -ct[897];
  proc_control_B.ct_f[431] = -ct[900];
  proc_control_B.ct_f[432] = -ct[901];
  proc_control_B.ct_f[433] = -ct[904];
  proc_control_B.ct_f[434] = -ct[905];
  memcpy(&proc_control_B.ct_f[435], &ct[198], 31U * sizeof(real_T));
  proc_control_B.ct_f[466] = -ct[985];
  proc_control_B.ct_f[467] = -ct[988];
  proc_control_B.ct_f[468] = -ct[989];
  memcpy(&proc_control_B.ct_f[469], &ct[229], 29U * sizeof(real_T));
  proc_control_B.ct_f[498] = ct[19] * ct[1165];
  proc_control_B.ct_f[499] = ct[258];
  proc_control_B.ct_f[500] = ct[259];
  _mm_storeu_pd(&proc_control_B.ct_f[501], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[1168])));
  _mm_storeu_pd(&proc_control_B.ct_f[503], _mm_mul_pd(tmp_e, _mm_set_pd(ct[1169],
    ct[1170])));
  proc_control_B.ct_f[505] = ct[19] * ct[1170];
  proc_control_B.ct_f[506] = ct[260];
  proc_control_B.ct_f[507] = ct[261];
  proc_control_B.ct_f[508] = ct[262];
  proc_control_B.ct_f[509] = ct[263];
  _mm_storeu_pd(&proc_control_B.ct_f[510], _mm_mul_pd(tmp_3, _mm_set1_pd(ct[1174])));
  proc_control_B.ct_f[512] = ct[264];
  _mm_storeu_pd(&proc_control_B.ct_f[513], _mm_mul_pd(tmp_b, _mm_loadu_pd(&ct
    [1178])));
  _mm_storeu_pd(&proc_control_B.ct_f[515], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [1179])));
  proc_control_B.ct_f[517] = ct[265];
  proc_control_B.ct_f[518] = ct[266];
  proc_control_B.ct_f[519] = ct[267];
  _mm_storeu_pd(&proc_control_B.ct_f[520], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[1183])));
  _mm_storeu_pd(&proc_control_B.ct_f[522], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [1184])));
  proc_control_B.ct_f[524] = ct[20] * ct[1185];
  proc_control_B.ct_f[525] = ct[268];
  proc_control_B.ct_f[526] = ct[269];
  proc_control_B.ct_f[527] = ct[19] * ct[1189];
  memcpy(&proc_control_B.ct_f[528], &ct[270], 17U * sizeof(real_T));
  tmp_f = _mm_set1_pd(ct[742]);
  _mm_storeu_pd(&proc_control_B.ct_f[545], _mm_mul_pd(_mm_loadu_pd(&ct[629]),
    tmp_f));
  tmp_6 = _mm_set_pd(ct[742], ct[761]);
  _mm_storeu_pd(&proc_control_B.ct_f[547], _mm_mul_pd(_mm_set_pd(ct[631], ct[629]),
    tmp_6));
  _mm_storeu_pd(&proc_control_B.ct_f[549], _mm_mul_pd(_mm_set_pd(ct[632], ct[630]),
    tmp_6));
  tmp_7 = _mm_set1_pd(ct[761]);
  _mm_storeu_pd(&proc_control_B.ct_f[551], _mm_mul_pd(_mm_loadu_pd(&ct[633]),
    tmp_7));
  _mm_storeu_pd(&proc_control_B.ct_f[553], _mm_mul_pd(_mm_loadu_pd(&ct[635]),
    tmp_f));
  tmp_g = _mm_loadu_pd(&ct[637]);
  _mm_storeu_pd(&proc_control_B.ct_f[555], _mm_mul_pd(tmp_g, tmp_f));
  proc_control_B.ct_f[557] = ct[287];
  tmp_f = _mm_set1_pd(ct[794]);
  _mm_storeu_pd(&proc_control_B.ct_f[558], _mm_mul_pd(tmp_g, tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[560], _mm_mul_pd(_mm_loadu_pd(&ct[639]),
    tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[562], _mm_mul_pd(_mm_loadu_pd(&ct[641]),
    tmp_7));
  tmp_7 = _mm_set_pd(ct[761], ct[794]);
  _mm_storeu_pd(&proc_control_B.ct_f[564], _mm_mul_pd(_mm_set_pd(ct[645], ct[643]),
    tmp_7));
  _mm_storeu_pd(&proc_control_B.ct_f[566], _mm_mul_pd(_mm_set_pd(ct[646], ct[644]),
    tmp_7));
  _mm_storeu_pd(&proc_control_B.ct_f[568], _mm_mul_pd(_mm_loadu_pd(&ct[645]),
    tmp_f));
  proc_control_B.ct_f[570] = ct[288];
  tmp_f = _mm_set_pd(ct[761], ct[742]);
  _mm_storeu_pd(&proc_control_B.ct_f[571], _mm_mul_pd(_mm_set1_pd(ct[647]),
    tmp_f));
  tmp_g = _mm_set_pd(ct[794], ct[742]);
  _mm_storeu_pd(&proc_control_B.ct_f[573], _mm_mul_pd(_mm_set1_pd(ct[650]),
    tmp_g));
  proc_control_B.ct_f[575] = ct[289];
  _mm_storeu_pd(&proc_control_B.ct_f[576], _mm_mul_pd(_mm_set1_pd(ct[651]),
    tmp_f));
  tmp_8 = _mm_set_pd(ct[794], ct[761]);
  _mm_storeu_pd(&proc_control_B.ct_f[578], _mm_mul_pd(_mm_set1_pd(ct[654]),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.ct_f[580], _mm_mul_pd(_mm_set1_pd(ct[655]),
    tmp_g));
  _mm_storeu_pd(&proc_control_B.ct_f[582], _mm_mul_pd(_mm_set1_pd(ct[658]),
    tmp_8));
  proc_control_B.ct_f[584] = ct[290];
  _mm_storeu_pd(&proc_control_B.ct_f[585], _mm_mul_pd(_mm_set1_pd(ct[659]),
    tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[587], _mm_mul_pd(_mm_set1_pd(ct[663]),
    tmp_g));
  _mm_storeu_pd(&proc_control_B.ct_f[589], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[7]), tmp_d), tmp_7), tmp_9));
  proc_control_B.ct_f[591] = ct[7] * ct[51];
  proc_control_B.ct_f[592] = ct[7] * ct[19] * ct[794] * ct[888];
  proc_control_B.ct_f[593] = ct[7] * ct[52];
  proc_control_B.ct_f[594] = ct[291];
  proc_control_B.ct_f[595] = ct[8] * ct[20] * ct[761] * ct[888];
  tmp_d = _mm_loadu_pd(&ct[53]);
  _mm_storeu_pd(&proc_control_B.ct_f[596], _mm_mul_pd(_mm_set1_pd(ct[8]), tmp_d));
  proc_control_B.ct_f[598] = ct[9] * ct[18] * ct[794] * ct[888];
  proc_control_B.ct_f[599] = ct[9] * ct[51];
  proc_control_B.ct_f[600] = ct[9] * ct[19] * ct[794] * ct[888];
  proc_control_B.ct_f[601] = ct[9] * ct[52];
  proc_control_B.ct_f[602] = ct[11] * ct[19] * ct[742] * ct[888];
  proc_control_B.ct_f[603] = ct[292];
  proc_control_B.ct_f[604] = ct[11] * ct[20] * ct[742] * ct[888];
  tmp_f = _mm_loadu_pd(&ct[55]);
  _mm_storeu_pd(&proc_control_B.ct_f[605], _mm_mul_pd(_mm_set1_pd(ct[11]), tmp_f));
  tmp_7 = _mm_loadu_pd(&ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_f[607], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_e), tmp_6), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_f[609], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_4), tmp_6), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_f[611], _mm_mul_pd(_mm_set1_pd(ct[12]), tmp_d));
  proc_control_B.ct_f[613] = ct[293];
  _mm_storeu_pd(&proc_control_B.ct_f[614], _mm_mul_pd(_mm_set1_pd(ct[13]), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_f[616], _mm_mul_pd(_mm_set1_pd(ct[664]),
    tmp_8));
  memcpy(&proc_control_B.ct_f[618], &ct[294], 81U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_f[699], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_a, tmp), _mm_set1_pd(ct[751])), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_f[701], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_0), _mm_set1_pd(ct[783])), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_f[703], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_e, tmp_1), _mm_set1_pd(ct[816])), tmp_9));
  memcpy(&proc_control_B.ct_f[705], &ct[375], 11U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_f[716], _mm_mul_pd(_mm_set_pd(ct[19], ct[62]),
    _mm_set_pd(ct[91], ct[83])));
  _mm_storeu_pd(&proc_control_B.ct_f[718], _mm_mul_pd(tmp_4, _mm_set_pd(ct[96],
    ct[92])));
  proc_control_B.ct_f[720] = ct[20] * ct[98];
  proc_control_B.ct_f[721] = ct[386];
  tmp = _mm_set_pd(ct[18], ct[62]);
  _mm_storeu_pd(&proc_control_B.ct_f[722], _mm_mul_pd(tmp, _mm_set_pd(ct[101],
    ct[99])));
  proc_control_B.ct_f[724] = ct[20] * ct[102];
  proc_control_B.ct_f[725] = ct[387];
  _mm_storeu_pd(&proc_control_B.ct_f[726], _mm_mul_pd(tmp_4, _mm_set_pd(ct[114],
    ct[111])));
  proc_control_B.ct_f[728] = ct[388];
  _mm_storeu_pd(&proc_control_B.ct_f[729], _mm_mul_pd(tmp, _mm_set_pd(ct[116],
    ct[108])));
  _mm_storeu_pd(&proc_control_B.ct_f[731], _mm_mul_pd(tmp_5, _mm_set_pd(ct[122],
    ct[117])));
  _mm_storeu_pd(&proc_control_B.ct_f[733], _mm_mul_pd(tmp_2, _mm_set_pd(ct[131],
    ct[124])));
  _mm_storeu_pd(&proc_control_B.ct_f[735], _mm_mul_pd(tmp_3, _mm_set_pd(ct[135],
    ct[133])));
  memcpy(&proc_control_B.ct_f[737], &ct[389], 29U * sizeof(real_T));
  tmp = _mm_set1_pd(ct[59]);
  _mm_storeu_pd(&proc_control_B.ct_f[766], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [772], ct[751]), tmp_9), tmp));
  _mm_storeu_pd(&proc_control_B.ct_f[768], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [805], ct[783]), tmp_9), _mm_set1_pd(ct[60])));
  _mm_storeu_pd(&proc_control_B.ct_f[770], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [826], ct[816]), tmp_9), _mm_set1_pd(ct[61])));
  proc_control_B.ct_f[772] = ct[418];
  proc_control_B.ct_f[773] = ct[419];
  proc_control_B.ct_f[774] = ct[59] * ct[865];
  proc_control_B.ct_f[775] = ct[420];
  proc_control_B.ct_f[776] = ct[421];
  _mm_storeu_pd(&proc_control_B.ct_f[777], _mm_mul_pd(_mm_loadu_pd(&ct[59]),
    _mm_set_pd(ct[857], ct[886])));
  _mm_storeu_pd(&proc_control_B.ct_f[779], _mm_mul_pd(_mm_set_pd(ct[61], ct[59]),
    _mm_set_pd(ct[849], ct[906])));
  _mm_storeu_pd(&proc_control_B.ct_f[781], _mm_mul_pd(_mm_loadu_pd(&ct[60]),
    _mm_set_pd(ct[869], ct[878])));
  tmp_9 = _mm_set_pd(ct[59], ct[60]);
  _mm_storeu_pd(&proc_control_B.ct_f[783], _mm_mul_pd(tmp_9, _mm_set_pd(ct[944],
    ct[898])));
  _mm_storeu_pd(&proc_control_B.ct_f[785], _mm_mul_pd(_mm_set_pd(ct[59], ct[61]),
    _mm_set_pd(ct[955], ct[890])));
  proc_control_B.ct_f[787] = ct[422];
  proc_control_B.ct_f[788] = ct[423];
  _mm_storeu_pd(&proc_control_B.ct_f[789], _mm_mul_pd(tmp, _mm_set_pd(ct[965],
    ct[957])));
  proc_control_B.ct_f[791] = ct[59] * ct[967];
  proc_control_B.ct_f[792] = ct[424];
  _mm_storeu_pd(&proc_control_B.ct_f[793], _mm_mul_pd(tmp_9, _mm_set_pd(ct[972],
    ct[950])));
  proc_control_B.ct_f[795] = ct[19] * ct[193];
  proc_control_B.ct_f[796] = ct[425];
  proc_control_B.ct_f[797] = ct[426];
  _mm_storeu_pd(&proc_control_B.ct_f[798], _mm_mul_pd(_mm_set_pd(ct[20], ct[60]),
    _mm_set_pd(ct[196], ct[960])));
  proc_control_B.ct_f[800] = ct[427];
  proc_control_B.ct_f[801] = ct[428];
  proc_control_B.ct_f[802] = ct[429];
  proc_control_B.ct_f[803] = ct[60] * ct[969];
  proc_control_B.ct_f[804] = ct[430];
  proc_control_B.ct_f[805] = ct[431];
  _mm_storeu_pd(&proc_control_B.ct_f[806], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[200])));
  proc_control_B.ct_f[808] = ct[19] * ct[201];
  proc_control_B.ct_f[809] = ct[432];
  proc_control_B.ct_f[810] = ct[20] * ct[201];
  proc_control_B.ct_f[811] = ct[433];
  proc_control_B.ct_f[812] = ct[20] * ct[202];
  proc_control_B.ct_f[813] = ct[434];
  _mm_storeu_pd(&proc_control_B.ct_f[814], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[204])));
  proc_control_B.ct_f[816] = ct[435];
  _mm_storeu_pd(&proc_control_B.ct_f[817], _mm_mul_pd(tmp_b, _mm_set_pd(ct[206],
    ct[204])));
  _mm_storeu_pd(&proc_control_B.ct_f[819], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[206])));
  proc_control_B.ct_f[821] = ct[436];
  proc_control_B.ct_f[822] = ct[437];
  proc_control_B.ct_f[823] = ct[438];
  proc_control_B.ct_f[824] = ct[439];
  _mm_storeu_pd(&proc_control_B.ct_f[825], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[207])));
  proc_control_B.ct_f[827] = ct[440];
  _mm_storeu_pd(&proc_control_B.ct_f[828], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[208])));
  proc_control_B.ct_f[830] = ct[441];
  proc_control_B.ct_f[831] = ct[442];
  proc_control_B.ct_f[832] = ct[443];
  _mm_storeu_pd(&proc_control_B.ct_f[833], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[209])));
  _mm_storeu_pd(&proc_control_B.ct_f[835], _mm_mul_pd(tmp_c, _mm_loadu_pd(&ct
    [209])));
  proc_control_B.ct_f[837] = ct[18] * ct[211];
  proc_control_B.ct_f[838] = ct[444];
  _mm_storeu_pd(&proc_control_B.ct_f[839], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[211])));
  proc_control_B.ct_f[841] = ct[445];
  proc_control_B.ct_f[842] = ct[446];
  proc_control_B.ct_f[843] = ct[19] * ct[212];
  proc_control_B.ct_f[844] = ct[447];
  proc_control_B.ct_tmp_g = ct[18] * ct[19] * ct[20] * ct[888];
  proc_control_B.ct_f[845] = proc_control_B.ct_tmp_g * ct[59];
  proc_control_B.ct_f[846] = ct[448];
  proc_control_B.ct_f[847] = ct[449];
  proc_control_B.ct_f[848] = ct[450];
  proc_control_B.ct_f[849] = ct[451];
  proc_control_B.ct_f[850] = ct[18] * ct[213];
  proc_control_B.ct_f[851] = ct[452];
  _mm_storeu_pd(&proc_control_B.ct_f[852], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [213])));
  _mm_storeu_pd(&proc_control_B.ct_f[854], _mm_mul_pd(tmp_a, _mm_set1_pd(ct[214])));
  _mm_storeu_pd(&proc_control_B.ct_f[856], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[215])));
  proc_control_B.ct_f[858] = ct[453];
  _mm_storeu_pd(&proc_control_B.ct_f[859], _mm_mul_pd(tmp_e, _mm_set1_pd(ct[217])));
  proc_control_B.ct_f[861] = ct[20] * ct[217];
  proc_control_B.ct_f[862] = ct[454];
  proc_control_B.ct_f[863] = ct[455];
  _mm_storeu_pd(&proc_control_B.ct_f[864], _mm_mul_pd(tmp_4, _mm_loadu_pd(&ct
    [219])));
  proc_control_B.ct_f[866] = ct[456];
  proc_control_B.ct_f[867] = proc_control_B.ct_tmp_g * ct[61];
  proc_control_B.ct_f[868] = -ct[85];
  proc_control_B.ct_f[869] = -ct[86];
  proc_control_B.ct_f[870] = ct[457];
  proc_control_B.ct_f[871] = -ct[90];
  proc_control_B.ct_f[872] = -ct[92];
  proc_control_B.ct_f[873] = -ct[93];
  proc_control_B.ct_f[874] = -ct[94];
  proc_control_B.ct_f[875] = -ct[96];
  proc_control_B.ct_f[876] = -ct[97];
  proc_control_B.ct_f[877] = -ct[102];
  proc_control_B.ct_f[878] = -ct[103];
  proc_control_B.ct_f[879] = -ct[104];
  proc_control_B.ct_f[880] = -ct[106];
  proc_control_B.ct_f[881] = ct[458];
  proc_control_B.ct_f[882] = -ct[109];
  proc_control_B.ct_f[883] = -ct[111];
  proc_control_B.ct_f[884] = -ct[112];
  proc_control_B.ct_f[885] = -ct[113];
  proc_control_B.ct_f[886] = -ct[117];
  memcpy(&proc_control_B.ct_f[887], &ct[459], 170U * sizeof(real_T));
  proc_control_B.ct_f[1057] = ct[629];
  proc_control_B.ct_f[1058] = ct[631];
  proc_control_B.ct_f[1059] = ct[632];
  proc_control_B.ct_f[1060] = ct[633];
  proc_control_B.ct_f[1061] = ct[635];
  proc_control_B.ct_f[1062] = ct[636];
  proc_control_B.ct_f[1063] = ct[637];
  proc_control_B.ct_f[1064] = ct[639];
  proc_control_B.ct_f[1065] = ct[640];
  proc_control_B.ct_f[1066] = ct[641];
  proc_control_B.ct_f[1067] = ct[643];
  proc_control_B.ct_f[1068] = ct[644];
  proc_control_B.ct_f[1069] = ct[645];
  proc_control_B.ct_f[1070] = ct[648];
  proc_control_B.ct_f[1071] = ct[649];
  proc_control_B.ct_f[1072] = ct[652];
  proc_control_B.ct_f[1073] = ct[653];
  proc_control_B.ct_f[1074] = ct[656];
  proc_control_B.ct_f[1075] = ct[657];
  memcpy(&proc_control_B.ct_f[1076], &ct[659], 73U * sizeof(real_T));
  proc_control_B.ct_f[1149] = ct[732];
  proc_control_B.ct_f[1150] = ct[735];
  proc_control_B.ct_f[1151] = ct[736];
  proc_control_B.ct_f[1152] = ct[738];
  proc_control_B.ct_f[1153] = ct[739];
  proc_control_B.ct_f[1154] = ct[740];
  proc_control_B.ct_f[1155] = ct[741];
  proc_control_B.ct_f[1156] = ct[742];
  proc_control_B.ct_f[1157] = ct[743];
  proc_control_B.ct_f[1158] = ct[744];
  proc_control_B.ct_f[1159] = ct[746];
  proc_control_B.ct_f[1160] = ct[747];
  proc_control_B.ct_f[1161] = ct[749];
  proc_control_B.ct_f[1162] = ct[750];
  memcpy(&proc_control_B.ct_f[1163], &ct[753], 18U * sizeof(real_T));
  proc_control_B.ct_f[1181] = ct[771];
  memcpy(&proc_control_B.ct_f[1182], &ct[773], 9U * sizeof(real_T));
  proc_control_B.ct_f[1191] = ct[782];
  memcpy(&proc_control_B.ct_f[1192], &ct[784], 20U * sizeof(real_T));
  proc_control_B.ct_f[1212] = ct[804];
  memcpy(&proc_control_B.ct_f[1213], &ct[806], 9U * sizeof(real_T));
  proc_control_B.ct_f[1222] = ct[815];
  proc_control_B.ct_f[1223] = ct[817];
  proc_control_B.ct_f[1224] = ct[818];
  proc_control_B.ct_f[1225] = ct[819];
  proc_control_B.ct_f[1226] = ct[820];
  proc_control_B.ct_f[1227] = ct[821];
  proc_control_B.ct_f[1228] = ct[822];
  proc_control_B.ct_f[1229] = ct[823];
  proc_control_B.ct_f[1230] = ct[824];
  memcpy(&proc_control_B.ct_f[1231], &ct[827], 24U * sizeof(real_T));
  proc_control_B.ct_f[1255] = ct[851];
  proc_control_B.ct_f[1256] = ct[853];
  proc_control_B.ct_f[1257] = ct[854];
  proc_control_B.ct_f[1258] = ct[855];
  proc_control_B.ct_f[1259] = ct[856];
  proc_control_B.ct_f[1260] = ct[857];
  proc_control_B.ct_f[1261] = ct[858];
  proc_control_B.ct_f[1262] = ct[859];
  memcpy(&proc_control_B.ct_f[1263], &ct[861], 31U * sizeof(real_T));
  proc_control_B.ct_f[1294] = ct[892];
  proc_control_B.ct_f[1295] = ct[894];
  proc_control_B.ct_f[1296] = ct[895];
  proc_control_B.ct_f[1297] = ct[896];
  proc_control_B.ct_f[1298] = ct[897];
  proc_control_B.ct_f[1299] = ct[898];
  proc_control_B.ct_f[1300] = ct[899];
  proc_control_B.ct_f[1301] = ct[900];
  memcpy(&proc_control_B.ct_f[1302], &ct[902], 39U * sizeof(real_T));
  proc_control_B.ct_f[1341] = ct[941];
  memcpy(&proc_control_B.ct_f[1342], &ct[944], 18U * sizeof(real_T));
  proc_control_B.ct_f[1360] = ct[962];
  proc_control_B.ct_f[1361] = ct[964];
  proc_control_B.ct_f[1362] = ct[965];
  memcpy(&proc_control_B.ct_f[1363], &ct[967], 17U * sizeof(real_T));
  proc_control_B.ct_f[1380] = ct[984];
  proc_control_B.ct_f[1381] = ct[986];
  proc_control_B.ct_f[1382] = ct[987];
  memcpy(&proc_control_B.ct_f[1383], &ct[990], 85U * sizeof(real_T));
  proc_control_B.ct_f[1468] = ct[1075];
  proc_control_B.ct_f[1469] = ct[1078];
  proc_control_B.ct_f[1470] = ct[1079];
  proc_control_B.ct_f[1471] = ct[1089];
  proc_control_B.ct_f[1472] = ct[1091];
  memcpy(&proc_control_B.ct_f[1473], &ct[1093], 167U * sizeof(real_T));
  proc_control_ft_4(proc_control_B.ct_f, Anq);
}

void proc_control::proc_control_ft_2(const real_T ct[805], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_1g;
  __m128d tmp_1h;
  __m128d tmp_1i;
  __m128d tmp_1j;
  __m128d tmp_1k;
  __m128d tmp_1l;
  __m128d tmp_1m;
  __m128d tmp_1n;
  __m128d tmp_1o;
  __m128d tmp_1p;
  __m128d tmp_1q;
  __m128d tmp_1r;
  __m128d tmp_1s;
  __m128d tmp_1t;
  __m128d tmp_1u;
  __m128d tmp_1v;
  __m128d tmp_1w;
  __m128d tmp_1x;
  __m128d tmp_1y;
  __m128d tmp_1z;
  __m128d tmp_2;
  __m128d tmp_20;
  __m128d tmp_21;
  __m128d tmp_22;
  __m128d tmp_23;
  __m128d tmp_24;
  __m128d tmp_25;
  __m128d tmp_26;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memcpy(&proc_control_B.ct_j[0], &ct[0], 34U * sizeof(real_T));
  proc_control_B.ct_j[34] = ct[31] * ct[319];
  tmp = _mm_set1_pd(ct[15]);
  tmp_0 = _mm_set1_pd(ct[504]);
  tmp_e = _mm_set_pd(ct[452], ct[447]);
  _mm_storeu_pd(&proc_control_B.ct_j[35], _mm_mul_pd(_mm_mul_pd(tmp, tmp_e),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[37], _mm_mul_pd(_mm_mul_pd(tmp,
    _mm_loadu_pd(&ct[457])), tmp_0));
  tmp_h = _mm_set_pd(ct[447], ct[460]);
  tmp_24 = _mm_loadu_pd(&ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_j[39], _mm_mul_pd(_mm_mul_pd(tmp_24, tmp_h),
    tmp_0));
  tmp_1 = _mm_set1_pd(ct[16]);
  tmp_1l = _mm_set_pd(ct[459], ct[457]);
  _mm_storeu_pd(&proc_control_B.ct_j[41], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_1l),
    tmp_0));
  proc_control_B.ct_j[43] = ct[34];
  _mm_storeu_pd(&proc_control_B.ct_j[44], _mm_mul_pd(_mm_mul_pd(tmp_1,
    _mm_loadu_pd(&ct[460])), tmp_0));
  tmp_2 = _mm_set1_pd(ct[17]);
  tmp_g = _mm_set_pd(ct[457], ct[447]);
  _mm_storeu_pd(&proc_control_B.ct_j[46], _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_g),
    tmp_0));
  tmp_s = _mm_set_pd(ct[463], ct[460]);
  _mm_storeu_pd(&proc_control_B.ct_j[48], _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_s),
    tmp_0));
  proc_control_B.ct_j[50] = ct[17] * ct[465] * ct[504];
  memcpy(&proc_control_B.ct_j[51], &ct[35], 20U * sizeof(real_T));
  proc_control_B.ct_j[71] = ct[55];
  proc_control_B.ct_j[72] = ct[62];
  proc_control_B.ct_j[73] = ct[63];
  proc_control_B.ct_j[74] = ct[64];
  memcpy(&proc_control_B.ct_j[75], &ct[66], 162U * sizeof(real_T));
  tmp_3 = _mm_set1_pd(ct[46]);
  _mm_storeu_pd(&proc_control_B.ct_j[237], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [382])));
  _mm_storeu_pd(&proc_control_B.ct_j[239], _mm_mul_pd(tmp_3, _mm_set_pd(ct[388],
    ct[386])));
  _mm_storeu_pd(&proc_control_B.ct_j[241], _mm_mul_pd(tmp_3, _mm_set_pd(ct[392],
    ct[389])));
  _mm_storeu_pd(&proc_control_B.ct_j[243], _mm_mul_pd(tmp_3, _mm_loadu_pd(&ct
    [394])));
  proc_control_B.ct_j[245] = ct[46] * ct[398];
  proc_control_B.ct_j[246] = ct[228];
  tmp_a = _mm_set1_pd(ct[43]);
  _mm_storeu_pd(&proc_control_B.ct_j[247], _mm_mul_pd(tmp_a, _mm_set_pd(ct[271],
    ct[257])));
  tmp_1h = _mm_set_pd(ct[43], ct[44]);
  _mm_storeu_pd(&proc_control_B.ct_j[249], _mm_mul_pd(tmp_1h, _mm_set_pd(ct[286],
    ct[250])));
  tmp_4 = _mm_set_pd(ct[44], ct[45]);
  _mm_storeu_pd(&proc_control_B.ct_j[251], _mm_mul_pd(tmp_4, _mm_set_pd(ct[265],
    ct[244])));
  _mm_storeu_pd(&proc_control_B.ct_j[253], _mm_mul_pd(tmp_4, _mm_set_pd(ct[279],
    ct[258])));
  proc_control_B.ct_j[255] = ct[45] * ct[273];
  proc_control_B.ct_j[256] = ct[8] * ct[9] * ct[18] * ct[21] * ct[22] * ct[46];
  proc_control_B.ct_j[257] = ct[229];
  tmp_5 = _mm_set1_pd(ct[21]);
  tmp_6 = _mm_set1_pd(ct[18]);
  tmp_9 = _mm_set1_pd(ct[22]);
  tmp_p = _mm_set_pd(ct[6], ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_j[258], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_p, _mm_set_pd(ct[14], ct[12])), tmp_6), tmp_5),
    tmp_9), tmp_3));
  tmp_1g = _mm_set_pd(ct[10], ct[14]);
  tmp_7 = _mm_mul_pd(_mm_set_pd(ct[6], ct[10]), tmp_1g);
  tmp_y = _mm_set_pd(ct[18], ct[19]);
  tmp_1u = _mm_loadu_pd(&ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_j[260], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_7, tmp_y), tmp_5), tmp_1u), tmp_3));
  proc_control_B.ct_j[262] = ct[230];
  tmp_8 = _mm_set1_pd(ct[23]);
  tmp_l = _mm_set_pd(ct[7], ct[8]);
  _mm_storeu_pd(&proc_control_B.ct_j[263], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, _mm_set_pd(ct[12], ct[9])), tmp_6), tmp_5),
    tmp_8), tmp_3));
  tmp_10 = _mm_set_pd(ct[19], ct[20]);
  tmp_1t = _mm_loadu_pd(&ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_j[265], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_7, tmp_10), tmp_1t), tmp_8), tmp_3));
  proc_control_B.ct_j[267] = ct[231];
  tmp_7 = _mm_set1_pd(ct[20]);
  tmp_i = _mm_set_pd(ct[13], ct[14]);
  tmp_1b = _mm_set_pd(ct[8], ct[6]);
  _mm_storeu_pd(&proc_control_B.ct_j[268], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1b, tmp_i), tmp_7), tmp_9), tmp_8), tmp_3));
  tmp_3 = _mm_set1_pd(ct[11]);
  _mm_storeu_pd(&proc_control_B.ct_j[270], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_3, _mm_set_pd(ct[18], ct[12])), _mm_loadu_pd(&ct
    [20])), tmp_9), _mm_set_pd(ct[29], ct[23])), _mm_set_pd(ct[43], ct[46])));
  proc_control_B.ct_j[272] = ct[13] * ct[18] * ct[21] * ct[22] * ct[29] * ct[43];
  proc_control_B.ct_j[273] = ct[43] * ct[313];
  tmp_b = _mm_set1_pd(ct[29]);
  tmp_1e = _mm_set_pd(ct[13], ct[11]);
  _mm_storeu_pd(&proc_control_B.ct_j[274], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1e, tmp_6), tmp_5), tmp_8), tmp_b), tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_j[276], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [315])));
  tmp_w = _mm_set1_pd(ct[45]);
  tmp_1c = _mm_set_pd(ct[9], ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_j[278], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_7), tmp_9), tmp_8), tmp_b), tmp_w));
  tmp_c = _mm_set_pd(ct[22], ct[23]);
  tmp_1m = _mm_loadu_pd(&ct[16]);
  _mm_storeu_pd(&proc_control_B.ct_j[280], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_6), tmp_5), tmp_c), tmp_b), tmp_a));
  proc_control_B.ct_j[282] = ct[232];
  tmp_d = _mm_set_pd(ct[21], ct[22]);
  tmp_u = _mm_set1_pd(ct[19]);
  tmp_1n = _mm_loadu_pd(&ct[43]);
  _mm_storeu_pd(&proc_control_B.ct_j[283], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_u), tmp_d), tmp_c), tmp_b), tmp_1n));
  _mm_storeu_pd(&proc_control_B.ct_j[285], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_2, tmp_7), tmp_d), tmp_8), tmp_b), tmp_1n));
  proc_control_B.ct_j[287] = ct[233];
  proc_control_B.ct_j[288] = ct[234];
  proc_control_B.ct_j[289] = ct[235];
  proc_control_B.ct_j[290] = ct[236];
  proc_control_B.ct_j[291] = ct[237];
  proc_control_B.ct_j[292] = ct[238];
  proc_control_B.ct_j[293] = ct[239];
  tmp_f = _mm_set1_pd(ct[494]);
  tmp_j = _mm_set1_pd(ct[6]);
  _mm_storeu_pd(&proc_control_B.ct_j[294], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_5), tmp_e), tmp_f));
  tmp_19 = _mm_set1_pd(ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_j[296], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_19, tmp_5), tmp_e), tmp_f));
  tmp_16 = _mm_set1_pd(ct[8]);
  _mm_storeu_pd(&proc_control_B.ct_j[298], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_16, tmp_5), tmp_e), tmp_f));
  tmp_1a = _mm_set1_pd(ct[9]);
  _mm_storeu_pd(&proc_control_B.ct_j[300], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1a, tmp_5), tmp_e), tmp_f));
  tmp_r = _mm_set1_pd(ct[10]);
  tmp_1d = _mm_mul_pd(tmp_r, tmp_5);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[302], _mm_mul_pd(_mm_mul_pd(tmp_1d, tmp_g),
    tmp_f));
  tmp_k = _mm_set_pd(ct[457], ct[460]);
  tmp_1o = _mm_loadu_pd(&ct[10]);
  tmp_20 = _mm_mul_pd(tmp_1o, tmp_5);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[304], _mm_mul_pd(_mm_mul_pd(tmp_20, tmp_k),
    tmp_f));
  tmp_1p = _mm_loadu_pd(&ct[11]);
  _mm_storeu_pd(&proc_control_B.ct_j[306], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1p, tmp_5), tmp_h), tmp_f));
  tmp_1k = _mm_set_pd(ct[457], ct[452]);
  tmp_1q = _mm_loadu_pd(&ct[12]);
  tmp_21 = _mm_mul_pd(tmp_1q, tmp_5);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[308], _mm_mul_pd(_mm_mul_pd(tmp_21, tmp_1k),
    tmp_f));
  tmp_q = _mm_set_pd(ct[460], ct[447]);
  _mm_storeu_pd(&proc_control_B.ct_j[310], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_5), tmp_q), tmp_f));
  tmp_n = _mm_set1_pd(ct[14]);
  tmp_o = _mm_set_pd(ct[460], ct[457]);
  _mm_storeu_pd(&proc_control_B.ct_j[312], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_n, tmp_5), tmp_o), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[314], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_9), tmp_g), tmp_f));
  tmp_1x = _mm_loadu_pd(&ct[6]);
  tmp_22 = _mm_mul_pd(tmp_1x, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[316], _mm_mul_pd(_mm_mul_pd(tmp_22, tmp_k),
    tmp_f));
  tmp_m = _mm_set_pd(ct[459], ct[447]);
  _mm_storeu_pd(&proc_control_B.ct_j[318], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_l, tmp_9), tmp_m), tmp_f));
  tmp_1r = _mm_loadu_pd(&ct[8]);
  tmp_23 = _mm_mul_pd(tmp_1r, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[320], _mm_mul_pd(_mm_mul_pd(tmp_23, tmp_k),
    tmp_f));
  tmp_l = _mm_set_pd(ct[457], ct[459]);
  tmp_1s = _mm_loadu_pd(&ct[9]);
  _mm_storeu_pd(&proc_control_B.ct_j[322], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1s, tmp_9), tmp_l), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[324], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1o, tmp_9), tmp_l), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[326], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1p, tmp_9), _mm_set_pd(ct[447], ct[459])), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[328], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1q, tmp_9), tmp_k), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[330], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_9), tmp_m), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[332], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_n, tmp_9), tmp_o), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[334], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_8), tmp_g), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[336], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_p, tmp_8), tmp_q), tmp_f));
  tmp_1v = _mm_loadu_pd(&ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_j[338], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1v, tmp_8), tmp_o), tmp_f));
  tmp_l = _mm_set_pd(ct[447], ct[463]);
  _mm_storeu_pd(&proc_control_B.ct_j[340], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1r, tmp_8), tmp_l), tmp_f));
  tmp_t = _mm_set_pd(ct[447], ct[457]);
  _mm_storeu_pd(&proc_control_B.ct_j[342], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1s, tmp_8), tmp_t), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[344], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_r, tmp_8), tmp_o), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[346], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_8), tmp_s), tmp_f));
  tmp_18 = _mm_set1_pd(ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_j[348], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_18, tmp_8), tmp_s), tmp_f));
  tmp_15 = _mm_set1_pd(ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_j[350], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_15, tmp_8), tmp_s), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[352], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_n, tmp_8), tmp_s), tmp_f));
  proc_control_B.ct_j[354] = ct[240];
  _mm_storeu_pd(&proc_control_B.ct_j[355], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[18], ct[15]), _mm_set_pd(ct[19], ct[21])), _mm_set_pd(ct[460],
    ct[452])), _mm_set_pd(ct[514], ct[494])));
  tmp_13 = _mm_set1_pd(ct[514]);
  tmp_1z = _mm_loadu_pd(&ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_j[357], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1z, tmp_7), tmp_t), tmp_13));
  tmp_1f = _mm_mul_pd(tmp, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[359], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp_g),
    tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[361], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1, tmp_5), tmp_g), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[363], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp,
    tmp_8), tmp_q), tmp_f));
  tmp = _mm_set_pd(ct[16], ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_j[365], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp,
    tmp_1t), tmp_m), tmp_f));
  proc_control_B.ct_j[367] = ct[241];
  tmp_1 = _mm_set_pd(ct[23], ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_j[368], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp,
    tmp_1), tmp_k), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[370], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp,
    tmp_1u), tmp_o), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[372], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_2, tmp_1u), tmp_s), tmp_f));
  memcpy(&proc_control_B.ct_j[374], &ct[242], 10U * sizeof(real_T));
  proc_control_B.ct_j[384] = (ct[357] - ct[803]) * ct[46];
  proc_control_B.ct_j[385] = ct[252];
  proc_control_B.ct_j[386] = (ct[403] - ct[802]) * ct[46];
  proc_control_B.ct_j[387] = ct[253];
  proc_control_B.ct_tmp_c = ct[368] - ct[804];
  proc_control_B.ct_j[388] = proc_control_B.ct_tmp_c * ct[46];
  tmp_v = _mm_set1_pd(ct[484]);
  tmp_26 = _mm_mul_pd(tmp_1v, tmp_6);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[389], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_26, tmp_u), tmp_5), tmp_9), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[391], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[11], ct[9]), tmp_6), tmp_u), tmp_5),
    tmp_9), tmp_v));
  tmp_1w = _mm_mul_pd(tmp_1q, tmp_6);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_j[393], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1w, tmp_u), tmp_5), tmp_9), tmp_v));
  proc_control_B.ct_j[395] = ct[254];
  tmp_1y = _mm_loadu_pd(&ct[19]);
  _mm_storeu_pd(&proc_control_B.ct_j[396], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[7], ct[14]), tmp_6), tmp_1y), tmp_5),
    tmp_1u), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[398], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1r, tmp_6), tmp_7), tmp_5), tmp_8), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[400], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1o, tmp_6), tmp_7), tmp_5), tmp_8), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[402], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1w, tmp_7), tmp_5), tmp_8), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[404], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1x, tmp_u), tmp_7), tmp_9), tmp_8), tmp_v));
  proc_control_B.ct_j[406] = ct[255];
  proc_control_B.ct_j[407] = ct[256];
  _mm_storeu_pd(&proc_control_B.ct_j[408], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1r, tmp_u), tmp_7), tmp_9), tmp_8), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[410], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1p, tmp_u), tmp_7), tmp_9), tmp_8), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[412], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[15], ct[13]), tmp_u), tmp_7), tmp_9),
    tmp_8), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[414], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp, tmp_6), tmp_1y), tmp_5), tmp_1u), tmp_v));
  memcpy(&proc_control_B.ct_j[416], &ct[257], 12U * sizeof(real_T));
  tmp_u = _mm_set_pd(ct[14], ct[10]);
  _mm_storeu_pd(&proc_control_B.ct_j[428], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_6), tmp_5), tmp_v), tmp_a));
  proc_control_B.ct_j[430] = ct[10] * ct[19] * ct[22] * ct[484] * ct[43];
  proc_control_B.ct_j[431] = ct[269];
  tmp_17 = _mm_set_pd(ct[20], ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_j[432], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_n, tmp_17), tmp_9), tmp_v), tmp_a));
  proc_control_B.ct_j[434] = ct[6] * ct[18] * ct[21] * ct[484] * ct[44];
  proc_control_B.ct_j[435] = ct[270];
  tmp_z = _mm_set1_pd(ct[44]);
  _mm_storeu_pd(&proc_control_B.ct_j[436], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_n, tmp_1y), tmp_5), tmp_v), tmp_z));
  _mm_storeu_pd(&proc_control_B.ct_j[438], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_r, tmp_1z), tmp_8), tmp_v), tmp_a));
  proc_control_B.ct_j[440] = ct[271];
  tmp_x = _mm_set_pd(ct[6], ct[14]);
  tmp_11 = _mm_set_pd(ct[21], ct[23]);
  tmp_12 = _mm_set_pd(ct[45], ct[43]);
  tmp_1j = _mm_set_pd(ct[18], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_j[441], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_1j), tmp_11), tmp_v), tmp_12));
  proc_control_B.ct_j[443] = ct[6] * ct[19] * ct[22] * ct[484] * ct[44];
  proc_control_B.ct_j[444] = ct[272];
  _mm_storeu_pd(&proc_control_B.ct_j[445], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_r, tmp_1y), tmp_5), tmp_v), tmp_w));
  _mm_storeu_pd(&proc_control_B.ct_j[447], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_y), tmp_1u), tmp_v), tmp_z));
  _mm_storeu_pd(&proc_control_B.ct_j[449], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_j, tmp_1z), tmp_1u), tmp_v), tmp_4));
  proc_control_B.ct_j[451] = ct[273];
  tmp_1i = _mm_set_pd(ct[10], ct[6]);
  _mm_storeu_pd(&proc_control_B.ct_j[452], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_10), tmp_9), tmp_v), tmp_w));
  tmp_25 = _mm_loadu_pd(&ct[44]);
  _mm_storeu_pd(&proc_control_B.ct_j[454], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_7), tmp_8), tmp_v), tmp_25));
  proc_control_B.ct_j[456] = ct[10] * ct[20] * ct[23] * ct[484] * ct[45];
  proc_control_B.ct_j[457] = ct[274];
  proc_control_B.ct_j[458] = ct[275];
  proc_control_B.ct_j[459] = ct[276];
  _mm_storeu_pd(&proc_control_B.ct_j[460], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_y, tmp_7), tmp_d), tmp_f), tmp_1n));
  _mm_storeu_pd(&proc_control_B.ct_j[462], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_y, tmp_10), tmp_11), tmp_f), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_j[464], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_6, tmp_1y), tmp_1u), tmp_f), tmp_4));
  tmp_14 = _mm_set1_pd(ct[447]);
  _mm_storeu_pd(&proc_control_B.ct_j[466], _mm_mul_pd(_mm_mul_pd(tmp_14, tmp_o),
    tmp_13));
  proc_control_B.ct_j[468] = ct[457] * ct[460] * ct[514];
  memcpy(&proc_control_B.ct_j[469], &ct[277], 13U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_j[482], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_3, tmp_1y), tmp_5), tmp_14), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[484], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp_1y), tmp_5), tmp_14), tmp_f));
  proc_control_B.ct_j[486] = ct[290];
  proc_control_B.ct_j[487] = ct[291];
  tmp_15 = _mm_set1_pd(ct[457]);
  _mm_storeu_pd(&proc_control_B.ct_j[488], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_16, tmp_17), tmp_9), tmp_15), tmp_f));
  _mm_storeu_pd(&proc_control_B.ct_j[490], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_18, tmp_17), tmp_9), tmp_15), tmp_f));
  tmp_16 = _mm_set1_pd(ct[460]);
  _mm_storeu_pd(&proc_control_B.ct_j[492], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_19, tmp_1z), tmp_8), tmp_16), tmp_f));
  proc_control_B.ct_j[494] = ct[292];
  _mm_storeu_pd(&proc_control_B.ct_j[495], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1a, tmp_1z), tmp_8), tmp_16), tmp_f));
  proc_control_B.ct_j[497] = ct[293];
  _mm_storeu_pd(&proc_control_B.ct_j[498], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1b, tmp_5), tmp_9), tmp_14), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[500], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_20, tmp_9), tmp_15), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[502], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_21, tmp_9), tmp_g), tmp_v));
  proc_control_B.ct_j[504] = ct[14] * ct[21] * ct[22] * ct[447] * ct[484];
  proc_control_B.ct_j[505] = ct[294];
  _mm_storeu_pd(&proc_control_B.ct_j[506], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_5), tmp_1u), tmp_t), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[508], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1c, tmp_5), tmp_8), tmp_14), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[510], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, tmp_8), tmp_q), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[512], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1e, tmp_5), tmp_8), tmp_16), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[514], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_1t), tmp_8), tmp_k), tmp_v));
  proc_control_B.ct_j[516] = ct[295];
  _mm_storeu_pd(&proc_control_B.ct_j[517], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_22, tmp_8), tmp_k), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[519], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_23, tmp_8), tmp_k), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[521], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[12], ct[10]), tmp_9), tmp_8), tmp_o), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[523], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[14]), tmp_d), tmp_c), tmp_h), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[525], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_24, tmp_5), tmp_c), tmp_g), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[527], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1f, tmp_8), tmp_o), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[529], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1m, tmp_5), tmp_c), tmp_14), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[531], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp, tmp_5), tmp_1u), tmp_o), tmp_v));
  _mm_storeu_pd(&proc_control_B.ct_j[533], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1m, tmp_d), tmp_8), tmp_o), tmp_v));
  proc_control_B.ct_j[535] = ct[17] * ct[22] * ct[23] * ct[460] * ct[484];
  proc_control_B.ct_j[536] = ct[296];
  proc_control_B.ct_j[537] = ct[297];
  proc_control_B.ct_j[538] = ct[298];
  proc_control_B.ct_j[539] = ct[299];
  proc_control_B.ct_j[540] = ct[11] * ct[447] * ct[494] * ct[43];
  proc_control_B.ct_j[541] = ct[300];
  _mm_storeu_pd(&proc_control_B.ct_j[542], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[8], ct[13]), tmp_g), tmp_f), tmp_1n));
  _mm_storeu_pd(&proc_control_B.ct_j[544], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[7], ct[12]), tmp_o), tmp_f), tmp_25));
  _mm_storeu_pd(&proc_control_B.ct_j[546], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[16], ct[9]), tmp_h), tmp_f), _mm_set_pd(ct[43], ct[45])));
  _mm_storeu_pd(&proc_control_B.ct_j[548], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1m, tmp_t), tmp_f), tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_j[550], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_2, tmp_k), tmp_f), tmp_1n));
  proc_control_B.ct_j[552] = ct[17] * ct[460] * ct[494] * ct[44];
  proc_control_B.ct_j[553] = ct[301];
  proc_control_B.ct_j[554] = ct[302];
  proc_control_B.ct_j[555] = ct[303];
  proc_control_B.ct_j[556] = ct[304];
  _mm_storeu_pd(&proc_control_B.ct_j[557], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1t, tmp_14), tmp_f), tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_j[559], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_9, tmp_o), tmp_f), tmp_a));
  proc_control_B.ct_j[561] = ct[21] * ct[447] * ct[494] * ct[44];
  proc_control_B.ct_j[562] = ct[305];
  _mm_storeu_pd(&proc_control_B.ct_j[563], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_5, tmp_o), tmp_f), tmp_z));
  _mm_storeu_pd(&proc_control_B.ct_j[565], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_g), tmp_f), tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_j[567], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_11, tmp_h), tmp_f), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_j[569], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_d, tmp_15), tmp_f), tmp_25));
  _mm_storeu_pd(&proc_control_B.ct_j[571], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1, tmp_h), tmp_f), tmp_4));
  proc_control_B.ct_j[573] = ct[306];
  _mm_storeu_pd(&proc_control_B.ct_j[574], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1u, tmp_g), tmp_f), tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_j[576], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1u, tmp_o), tmp_f), tmp_4));
  _mm_storeu_pd(&proc_control_B.ct_j[578], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1u, tmp_16), tmp_f), tmp_w));
  proc_control_B.ct_j[580] = ct[307];
  proc_control_B.ct_j[581] = ct[308];
  proc_control_B.ct_j[582] = ct[309];
  proc_control_B.ct_j[583] = ct[310];
  proc_control_B.ct_j[584] = ct[311];
  proc_control_B.ct_j[585] = ct[312];
  proc_control_B.ct_j[586] = ct[313];
  _mm_storeu_pd(&proc_control_B.ct_j[587], _mm_mul_pd(_mm_sub_pd(_mm_set_pd(ct
    [403], ct[357]), _mm_set_pd(ct[802], ct[803])), tmp_b));
  proc_control_B.ct_j[589] = ct[314];
  proc_control_B.ct_j[590] = proc_control_B.ct_tmp_c * ct[29];
  proc_control_B.ct_j[591] = ct[315];
  proc_control_B.ct_j[592] = ct[316];
  proc_control_B.ct_j[593] = -ct[59];
  proc_control_B.ct_j[594] = -ct[60];
  proc_control_B.ct_j[595] = -ct[61];
  proc_control_B.ct_j[596] = ct[320];
  proc_control_B.ct_j[597] = ct[321];
  _mm_storeu_pd(&proc_control_B.ct_j[598], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_5), tmp_14), tmp_v), tmp_a));
  _mm_storeu_pd(&proc_control_B.ct_j[600], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_9), tmp_t), tmp_v), tmp_a));
  proc_control_B.ct_j[602] = ct[14] * ct[22] * ct[460] * ct[484] * ct[43];
  proc_control_B.ct_j[603] = ct[322];
  _mm_storeu_pd(&proc_control_B.ct_j[604], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[14], ct[6]), tmp_5), tmp_g), tmp_v), tmp_z));
  _mm_storeu_pd(&proc_control_B.ct_j[606], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1g, tmp_1), tmp_h), tmp_v), tmp_1h));
  proc_control_B.ct_tmp_c = ct[10] * ct[23];
  proc_control_B.ct_j[608] = proc_control_B.ct_tmp_c * ct[457] * ct[484] * ct[43];
  proc_control_B.ct_j[609] = -ct[751];
  _mm_storeu_pd(&proc_control_B.ct_j[610], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_11), tmp_h), tmp_v), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_j[612], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_d), tmp_15), tmp_v), tmp_25));
  proc_control_B.ct_j[614] = ct[10] * ct[21] * ct[460] * ct[484] * ct[45];
  proc_control_B.ct_j[615] = -ct[784];
  _mm_storeu_pd(&proc_control_B.ct_j[616], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_1u), tmp_t), tmp_v), tmp_z));
  _mm_storeu_pd(&proc_control_B.ct_j[618], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_j, tmp_1u), tmp_g), tmp_v), tmp_4));
  proc_control_B.ct_j[620] = -ct[795];
  _mm_storeu_pd(&proc_control_B.ct_j[621], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_9), tmp_k), tmp_v), tmp_w));
  _mm_storeu_pd(&proc_control_B.ct_j[623], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_8), tmp_16), tmp_v), tmp_25));
  proc_control_B.ct_j[625] = proc_control_B.ct_tmp_c * ct[460] * ct[484] * ct[45];
  memcpy(&proc_control_B.ct_j[626], &ct[323], 33U * sizeof(real_T));
  proc_control_B.ct_j[659] = ct[356];
  memcpy(&proc_control_B.ct_j[660], &ct[358], 9U * sizeof(real_T));
  proc_control_B.ct_j[669] = ct[367];
  memcpy(&proc_control_B.ct_j[670], &ct[369], 12U * sizeof(real_T));
  proc_control_B.ct_j[682] = ct[381];
  proc_control_B.ct_j[683] = ct[384];
  proc_control_B.ct_j[684] = ct[385];
  proc_control_B.ct_j[685] = ct[387];
  proc_control_B.ct_j[686] = ct[390];
  proc_control_B.ct_j[687] = ct[391];
  proc_control_B.ct_j[688] = ct[393];
  proc_control_B.ct_j[689] = ct[396];
  proc_control_B.ct_j[690] = ct[397];
  proc_control_B.ct_j[691] = ct[399];
  proc_control_B.ct_j[692] = ct[400];
  proc_control_B.ct_j[693] = ct[401];
  proc_control_B.ct_j[694] = ct[402];
  memcpy(&proc_control_B.ct_j[695], &ct[404], 43U * sizeof(real_T));
  tmp = _mm_set_pd(ct[328], ct[326]);
  _mm_storeu_pd(&proc_control_B.ct_j[738], _mm_mul_pd(tmp_i, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[740], _mm_mul_pd(_mm_set_pd(ct[12], ct[14]),
    _mm_set_pd(ct[330], ct[327])));
  proc_control_B.ct_j[742] = ct[447];
  tmp_h = _mm_set_pd(ct[331], ct[329]);
  _mm_storeu_pd(&proc_control_B.ct_j[743], _mm_mul_pd(_mm_set_pd(ct[12], ct[13]),
    tmp_h));
  proc_control_B.ct_j[745] = ct[448];
  proc_control_B.ct_j[746] = ct[449];
  proc_control_B.ct_j[747] = ct[15] * ct[343];
  proc_control_B.ct_j[748] = ct[450];
  proc_control_B.ct_j[749] = ct[451];
  proc_control_B.ct_j[750] = ct[16] * ct[335];
  proc_control_B.ct_j[751] = ct[452];
  proc_control_B.ct_j[752] = ct[453];
  proc_control_B.ct_j[753] = ct[454];
  proc_control_B.ct_j[754] = ct[17] * ct[327];
  proc_control_B.ct_j[755] = ct[455];
  proc_control_B.ct_j[756] = ct[16] * ct[347];
  proc_control_B.ct_j[757] = ct[456];
  tmp_24 = _mm_loadu_pd(&ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_j[758], _mm_mul_pd(tmp_24, _mm_set_pd(ct[326],
    ct[344])));
  proc_control_B.ct_j[760] = ct[18] * ct[327];
  proc_control_B.ct_j[761] = ct[457];
  _mm_storeu_pd(&proc_control_B.ct_j[762], _mm_mul_pd(tmp_y, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[764], _mm_mul_pd(tmp_y, _mm_set_pd(ct[329],
    ct[327])));
  tmp = _mm_set_pd(ct[330], ct[328]);
  _mm_storeu_pd(&proc_control_B.ct_j[766], _mm_mul_pd(tmp_y, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[768], _mm_mul_pd(tmp_y, tmp_h));
  _mm_storeu_pd(&proc_control_B.ct_j[770], _mm_mul_pd(tmp_10, tmp));
  proc_control_B.ct_j[772] = ct[458];
  _mm_storeu_pd(&proc_control_B.ct_j[773], _mm_mul_pd(tmp_10, tmp_h));
  _mm_storeu_pd(&proc_control_B.ct_j[775], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [330])));
  tmp = _mm_loadu_pd(&ct[332]);
  _mm_storeu_pd(&proc_control_B.ct_j[777], _mm_mul_pd(tmp_6, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[779], _mm_mul_pd(tmp_y, _mm_set_pd(ct[334],
    ct[332])));
  _mm_storeu_pd(&proc_control_B.ct_j[781], _mm_mul_pd(tmp_y, _mm_set_pd(ct[335],
    ct[333])));
  proc_control_B.ct_j[783] = ct[459];
  _mm_storeu_pd(&proc_control_B.ct_j[784], _mm_mul_pd(tmp_7, tmp));
  tmp = _mm_loadu_pd(&ct[336]);
  _mm_storeu_pd(&proc_control_B.ct_j[786], _mm_mul_pd(tmp_6, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[788], _mm_mul_pd(tmp_10, _mm_set_pd(ct[336],
    ct[334])));
  _mm_storeu_pd(&proc_control_B.ct_j[790], _mm_mul_pd(tmp_10, _mm_set_pd(ct[337],
    ct[335])));
  _mm_storeu_pd(&proc_control_B.ct_j[792], _mm_mul_pd(tmp_7, tmp));
  proc_control_B.ct_j[794] = ct[460];
  _mm_storeu_pd(&proc_control_B.ct_j[795], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct
    [338])));
  tmp = _mm_set_pd(ct[340], ct[338]);
  _mm_storeu_pd(&proc_control_B.ct_j[797], _mm_mul_pd(tmp_y, tmp));
  tmp_h = _mm_set_pd(ct[341], ct[339]);
  _mm_storeu_pd(&proc_control_B.ct_j[799], _mm_mul_pd(tmp_y, tmp_h));
  _mm_storeu_pd(&proc_control_B.ct_j[801], _mm_mul_pd(tmp_10, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[803], _mm_mul_pd(tmp_10, tmp_h));
  proc_control_B.ct_j[805] = ct[461];
  _mm_storeu_pd(&proc_control_B.ct_j[806], _mm_mul_pd(tmp_10, _mm_set_pd(ct[342],
    ct[340])));
  _mm_storeu_pd(&proc_control_B.ct_j[808], _mm_mul_pd(tmp_10, _mm_set_pd(ct[343],
    ct[341])));
  _mm_storeu_pd(&proc_control_B.ct_j[810], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [342])));
  proc_control_B.ct_j[812] = ct[462];
  _mm_storeu_pd(&proc_control_B.ct_j[813], _mm_mul_pd(tmp_24, _mm_set_pd(ct[344],
    ct[348])));
  proc_control_B.ct_j[815] = ct[19] * ct[344];
  proc_control_B.ct_j[816] = ct[463];
  _mm_storeu_pd(&proc_control_B.ct_j[817], _mm_mul_pd(tmp_1z, _mm_set1_pd(ct[345])));
  _mm_storeu_pd(&proc_control_B.ct_j[819], _mm_mul_pd(tmp_1j, _mm_loadu_pd(&ct
    [345])));
  tmp = _mm_loadu_pd(&ct[346]);
  _mm_storeu_pd(&proc_control_B.ct_j[821], _mm_mul_pd(tmp_y, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[823], _mm_mul_pd(tmp_7, tmp));
  proc_control_B.ct_j[825] = ct[464];
  proc_control_B.ct_j[826] = ct[465];
  _mm_storeu_pd(&proc_control_B.ct_j[827], _mm_mul_pd(tmp_1z, _mm_set1_pd(ct[348])));
  _mm_storeu_pd(&proc_control_B.ct_j[829], _mm_mul_pd(tmp_1z, _mm_set1_pd(ct[349])));
  _mm_storeu_pd(&proc_control_B.ct_j[831], _mm_mul_pd(tmp_1j, _mm_loadu_pd(&ct
    [349])));
  _mm_storeu_pd(&proc_control_B.ct_j[833], _mm_mul_pd(tmp_1y, _mm_set1_pd(ct[350])));
  _mm_storeu_pd(&proc_control_B.ct_j[835], _mm_mul_pd(tmp_1y, _mm_set1_pd(ct[351])));
  proc_control_B.ct_j[837] = ct[29] + ct[65];
  tmp = _mm_loadu_pd(&ct[352]);
  _mm_storeu_pd(&proc_control_B.ct_j[838], _mm_mul_pd(tmp_6, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[840], _mm_mul_pd(tmp_10, tmp));
  _mm_storeu_pd(&proc_control_B.ct_j[842], _mm_mul_pd(tmp_1j, _mm_loadu_pd(&ct
    [353])));
  _mm_storeu_pd(&proc_control_B.ct_j[844], _mm_mul_pd(tmp_1y, _mm_set1_pd(ct[354])));
  _mm_storeu_pd(&proc_control_B.ct_j[846], _mm_mul_pd(tmp_1y, _mm_set1_pd(ct[355])));
  memcpy(&proc_control_B.ct_j[848], &ct[466], 18U * sizeof(real_T));
  proc_control_B.ct_j[866] = ct[18] * ct[356];
  memcpy(&proc_control_B.ct_j[867], &ct[484], 20U * sizeof(real_T));
  proc_control_B.ct_j[887] = ct[18] * ct[361];
  memcpy(&proc_control_B.ct_j[888], &ct[504], 9U * sizeof(real_T));
  proc_control_B.ct_j[897] = ct[513];
  memcpy(&proc_control_B.ct_j[898], &ct[515], 14U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_j[912], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_p, tmp_1z), tmp_1y), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[914], _mm_mul_pd(_mm_mul_pd(tmp_26, tmp_10),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[916], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1v, tmp_y), tmp_7), tmp_0));
  proc_control_B.ct_j[918] = ct[8] * ct[19] * ct[20] * ct[504];
  proc_control_B.ct_j[919] = ct[529];
  _mm_storeu_pd(&proc_control_B.ct_j[920], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1a, tmp_6), tmp_1y), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[922], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1s, tmp_y), tmp_7), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[924], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_6), tmp_1y), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[926], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1p, tmp_y), tmp_10), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[928], _mm_mul_pd(_mm_mul_pd(tmp_1w, tmp_10),
    tmp_0));
  proc_control_B.ct_j[930] = ct[530];
  _mm_storeu_pd(&proc_control_B.ct_j[931], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1q, tmp_y), tmp_7), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[933], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_1z), tmp_1y), tmp_0));
  proc_control_B.ct_j[935] = ct[531];
  proc_control_B.ct_j[936] = ct[532];
  proc_control_B.ct_j[937] = ct[533];
  proc_control_B.ct_j[938] = ct[534];
  proc_control_B.ct_j[939] = ct[19] * ct[362];
  memcpy(&proc_control_B.ct_j[940], &ct[535], 18U * sizeof(real_T));
  proc_control_B.ct_j[958] = ct[15] * ct[19] * ct[20] * ct[504];
  memcpy(&proc_control_B.ct_j[959], &ct[553], 15U * sizeof(real_T));
  proc_control_B.ct_j[974] = ct[16] * ct[18] * ct[20] * ct[504];
  proc_control_B.ct_j[975] = ct[568];
  proc_control_B.ct_j[976] = ct[569];
  proc_control_B.ct_j[977] = ct[17] * ct[18] * ct[19] * ct[504];
  memcpy(&proc_control_B.ct_j[978], &ct[570], 141U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_j[1119], _mm_mul_pd(tmp_b, _mm_set_pd(ct[90],
    ct[74])));
  _mm_storeu_pd(&proc_control_B.ct_j[1121], _mm_mul_pd(_mm_set_pd(ct[458], ct[29]),
    _mm_set_pd(ct[514], ct[99])));
  proc_control_B.ct_j[1123] = ct[461] * ct[514];
  proc_control_B.ct_j[1124] = ct[711];
  proc_control_B.ct_j[1125] = ct[465] * ct[514];
  memcpy(&proc_control_B.ct_j[1126], &ct[712], 38U * sizeof(real_T));
  proc_control_B.ct_j[1164] = ct[750];
  memcpy(&proc_control_B.ct_j[1165], &ct[752], 31U * sizeof(real_T));
  proc_control_B.ct_j[1196] = ct[783];
  memcpy(&proc_control_B.ct_j[1197], &ct[785], 9U * sizeof(real_T));
  proc_control_B.ct_j[1206] = ct[794];
  proc_control_B.ct_j[1207] = ct[796];
  proc_control_B.ct_j[1208] = ct[797];
  proc_control_B.ct_j[1209] = ct[798];
  _mm_storeu_pd(&proc_control_B.ct_j[1210], _mm_mul_pd(_mm_loadu_pd(&ct[31]),
    _mm_set1_pd(ct[317])));
  _mm_storeu_pd(&proc_control_B.ct_j[1212], _mm_mul_pd(_mm_set1_pd(ct[30]),
    _mm_loadu_pd(&ct[318])));
  _mm_storeu_pd(&proc_control_B.ct_j[1214], _mm_mul_pd(_mm_mul_pd(tmp_j, tmp_e),
    tmp_0));
  proc_control_B.ct_j[1216] = ct[6] * ct[457] * ct[504];
  proc_control_B.ct_j[1217] = ct[799];
  _mm_storeu_pd(&proc_control_B.ct_j[1218], _mm_mul_pd(_mm_mul_pd(tmp_p,
    _mm_set_pd(ct[458], ct[447])), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1220], _mm_mul_pd(_mm_mul_pd(tmp_1x,
    _mm_set_pd(ct[452], ct[460])), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1222], _mm_mul_pd(_mm_mul_pd(tmp_1v, tmp_t),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1224], _mm_mul_pd(_mm_mul_pd(tmp_1v,
    _mm_set_pd(ct[452], ct[459])), tmp_0));
  proc_control_B.ct_j[1226] = ct[8] * ct[460] * ct[504];
  proc_control_B.ct_j[1227] = ct[800];
  _mm_storeu_pd(&proc_control_B.ct_j[1228], _mm_mul_pd(_mm_mul_pd(tmp_1r, tmp_l),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1230], _mm_mul_pd(_mm_mul_pd(tmp_1a, tmp_1k),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1232], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [9], ct[10]), tmp_m), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1234], _mm_mul_pd(_mm_mul_pd(tmp_r, tmp_1l),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1236], _mm_mul_pd(_mm_mul_pd(tmp_1o, tmp_k),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1238], _mm_mul_pd(_mm_mul_pd(tmp_1o,
    _mm_set_pd(ct[459], ct[461])), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1240], _mm_mul_pd(_mm_mul_pd(tmp_3, tmp_s),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1242], _mm_mul_pd(_mm_mul_pd(tmp_18, tmp_e),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1244], _mm_mul_pd(_mm_mul_pd(tmp_1q, tmp_k),
    tmp_0));
  proc_control_B.ct_j[1246] = ct[14] * ct[447] * ct[504];
  proc_control_B.ct_j[1247] = ct[801];
  _mm_storeu_pd(&proc_control_B.ct_j[1248], _mm_mul_pd(_mm_mul_pd(tmp_1q,
    _mm_set_pd(ct[459], ct[463])), tmp_0));
  tmp = _mm_loadu_pd(&ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_j[1250], _mm_mul_pd(_mm_mul_pd(tmp, tmp_k),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1252], _mm_mul_pd(_mm_mul_pd(tmp,
    _mm_set_pd(ct[460], ct[463])), tmp_0));
  _mm_storeu_pd(&proc_control_B.ct_j[1254], _mm_mul_pd(_mm_mul_pd(tmp_n,
    _mm_set_pd(ct[465], ct[463])), tmp_0));
  proc_control_B.ct_j[1256] = ct[32] * ct[318];
  proc_control_B.ct_j[1257] = ct[802];
  proc_control_B.ct_j[1258] = ct[803];
  proc_control_B.ct_j[1259] = ct[804];
  proc_control_ft_3(proc_control_B.ct_j, Anq);
}

void proc_control::proc_control_ft_1(const real_T ct[433], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_1g;
  __m128d tmp_1h;
  __m128d tmp_1i;
  __m128d tmp_1j;
  __m128d tmp_1k;
  __m128d tmp_1l;
  __m128d tmp_1m;
  __m128d tmp_1n;
  __m128d tmp_1o;
  __m128d tmp_1p;
  __m128d tmp_1q;
  __m128d tmp_1r;
  __m128d tmp_1s;
  __m128d tmp_1t;
  __m128d tmp_1u;
  __m128d tmp_1v;
  __m128d tmp_1w;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memcpy(&proc_control_B.ct_m[0], &ct[0], 17U * sizeof(real_T));
  proc_control_B.ct_m[17] = ct[17];
  memcpy(&proc_control_B.ct_m[18], &ct[21], 17U * sizeof(real_T));
  tmp = _mm_set1_pd(ct[391]);
  tmp_1h = _mm_loadu_pd(&ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_m[35], _mm_mul_pd(_mm_mul_pd(tmp_1h,
    _mm_set_pd(ct[369], ct[376])), tmp));
  tmp_i = _mm_set_pd(ct[23], ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_m[37], _mm_mul_pd(_mm_mul_pd(tmp_i,
    _mm_set_pd(ct[369], ct[380])), tmp));
  tmp_1g = _mm_loadu_pd(&ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_m[39], _mm_mul_pd(_mm_mul_pd(tmp_1g,
    _mm_set_pd(ct[376], ct[380])), tmp));
  memcpy(&proc_control_B.ct_m[41], &ct[38], 34U * sizeof(real_T));
  tmp = _mm_set1_pd(ct[21]);
  tmp_0 = _mm_set1_pd(ct[24]);
  tmp_1 = _mm_set1_pd(ct[389]);
  _mm_storeu_pd(&proc_control_B.ct_m[75], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(ct[7]), tmp), tmp_1g), tmp_0), tmp_1));
  tmp_15 = _mm_set1_pd(ct[8]);
  _mm_storeu_pd(&proc_control_B.ct_m[77], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp), tmp_1g), tmp_0), tmp_1));
  proc_control_B.ct_m[79] = ct[72];
  _mm_storeu_pd(&proc_control_B.ct_m[80], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(ct[9]), tmp), tmp_1g), tmp_0), tmp_1));
  tmp_2 = _mm_set_pd(ct[22], ct[23]);
  tmp_1m = _mm_loadu_pd(&ct[10]);
  _mm_storeu_pd(&proc_control_B.ct_m[82], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1m, tmp), tmp_2), tmp_0), tmp_1));
  _mm_storeu_pd(&proc_control_B.ct_m[84], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[11]), tmp), tmp_2), tmp_0), tmp_1));
  tmp_1i = _mm_mul_pd(_mm_loadu_pd(&ct[12]), tmp);
  _mm_storeu_pd(&proc_control_B.ct_m[86], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1i, tmp_2), tmp_0), tmp_1));
  tmp_1v = _mm_loadu_pd(&ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_m[88], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1v, tmp), tmp_2), tmp_0), tmp_1));
  proc_control_B.ct_m[90] = ct[73];
  tmp_3 = _mm_set1_pd(ct[25]);
  tmp_r = _mm_set_pd(ct[6], ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_m[91], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_r, tmp_1h), tmp_1g), tmp_3), tmp_1));
  tmp_s = _mm_set_pd(ct[7], ct[8]);
  _mm_storeu_pd(&proc_control_B.ct_m[93], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_s, tmp_1h), tmp_1g), tmp_3), tmp_1));
  tmp_4 = _mm_set_pd(ct[21], ct[22]);
  tmp_1n = _mm_loadu_pd(&ct[8]);
  tmp_1j = _mm_mul_pd(tmp_1n, tmp_4);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[95], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1j, tmp_2), tmp_3), tmp_1));
  proc_control_B.ct_m[97] = ct[9] * ct[22] * ct[23] * ct[25] * ct[389];
  proc_control_B.ct_m[98] = ct[74];
  proc_control_B.ct_m[99] = ct[75];
  tmp_8 = _mm_set1_pd(ct[11]);
  tmp_8 = _mm_mul_pd(tmp_8, tmp_1h);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[100], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_1g), tmp_3), tmp_1));
  tmp_5 = _mm_set1_pd(ct[22]);
  _mm_storeu_pd(&proc_control_B.ct_m[102], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1i, tmp_5), tmp_3), tmp_1));
  tmp_1i = _mm_set_pd(ct[14], ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_m[104], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_4), tmp_2), tmp_3), tmp_1));
  tmp_6 = _mm_set1_pd(ct[23]);
  tmp_1k = _mm_loadu_pd(&ct[25]);
  _mm_storeu_pd(&proc_control_B.ct_m[106], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[6], ct[13]), tmp_5), tmp_6), tmp_1k), tmp_1));
  proc_control_B.ct_m[108] = ct[7] * ct[21] * ct[23] * ct[26] * ct[389];
  proc_control_B.ct_m[109] = ct[76];
  tmp_7 = _mm_set1_pd(ct[26]);
  tmp_1s = _mm_loadu_pd(&ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_m[110], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1s, tmp_4), tmp_6), tmp_7), tmp_1));
  _mm_storeu_pd(&proc_control_B.ct_m[112], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1j, tmp_6), tmp_7), tmp_1));
  tmp_1j = _mm_loadu_pd(&ct[9]);
  _mm_storeu_pd(&proc_control_B.ct_m[114], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1j, tmp_4), tmp_6), tmp_7), tmp_1));
  _mm_storeu_pd(&proc_control_B.ct_m[116], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_6), tmp_7), tmp_1));
  _mm_storeu_pd(&proc_control_B.ct_m[118], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(ct[12]), tmp_1h), tmp_6), tmp_7), tmp_1));
  tmp_8 = _mm_set1_pd(ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_m[120], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_8, tmp_1h), tmp_6), tmp_7), tmp_1));
  tmp_f = _mm_set_pd(ct[24], ct[25]);
  _mm_storeu_pd(&proc_control_B.ct_m[122], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[15]), tmp_4), tmp_6), tmp_f), tmp_1));
  tmp_n = _mm_set_pd(ct[24], ct[26]);
  _mm_storeu_pd(&proc_control_B.ct_m[124], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[17], ct[15]), tmp_4), tmp_2), tmp_n), tmp_1));
  tmp_4 = _mm_set_pd(ct[16], ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_m[126], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_4, tmp), tmp_1g), tmp_1k), tmp_1));
  proc_control_B.ct_m[128] = ct[78];
  tmp_9 = _mm_set1_pd(ct[40]);
  tmp_c = _mm_set_pd(ct[14], ct[10]);
  _mm_storeu_pd(&proc_control_B.ct_m[129], _mm_mul_pd(_mm_mul_pd(tmp_c, tmp_1),
    tmp_9));
  proc_control_B.ct_m[131] = ct[79];
  tmp_k = _mm_set1_pd(ct[41]);
  _mm_storeu_pd(&proc_control_B.ct_m[132], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [14], ct[6]), tmp_1), tmp_k));
  tmp_a = _mm_set_pd(ct[10], ct[6]);
  tmp_p = _mm_set1_pd(ct[42]);
  _mm_storeu_pd(&proc_control_B.ct_m[134], _mm_mul_pd(_mm_mul_pd(tmp_a, tmp_1),
    tmp_p));
  proc_control_B.ct_m[136] = -ct[291];
  proc_control_B.ct_m[137] = -ct[292];
  proc_control_B.ct_m[138] = -ct[295];
  proc_control_B.ct_m[139] = -ct[297];
  proc_control_B.ct_m[140] = -ct[298];
  proc_control_B.ct_m[141] = -ct[301];
  proc_control_B.ct_m[142] = -ct[303];
  proc_control_B.ct_m[143] = -ct[304];
  proc_control_B.ct_m[144] = -ct[307];
  tmp_b = _mm_set1_pd(ct[14]);
  _mm_storeu_pd(&proc_control_B.ct_m[145], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(ct[10]), tmp_b), tmp_0), tmp_1k), tmp_9));
  tmp_m = _mm_set_pd(ct[40], ct[41]);
  tmp_1l = _mm_loadu_pd(&ct[24]);
  _mm_storeu_pd(&proc_control_B.ct_m[147], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_a, tmp_b), tmp_1l), tmp_1k), tmp_m));
  tmp_10 = _mm_set1_pd(ct[6]);
  tmp_d = _mm_mul_pd(tmp_10, tmp_c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_e = _mm_set_pd(ct[41], ct[42]);
  _mm_storeu_pd(&proc_control_B.ct_m[149], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_d, tmp_0), tmp_1k), tmp_e));
  _mm_storeu_pd(&proc_control_B.ct_m[151], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_d, tmp_1l), tmp_7), tmp_e));
  tmp_d = _mm_set_pd(ct[25], ct[26]);
  tmp_q = _mm_set_pd(ct[40], ct[42]);
  tmp_12 = _mm_set_pd(ct[17], ct[10]);
  _mm_storeu_pd(&proc_control_B.ct_m[153], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[16], ct[6]), tmp_12), tmp_f), tmp_d), tmp_q));
  tmp_g = _mm_set1_pd(ct[16]);
  tmp_h = _mm_set1_pd(ct[17]);
  tmp_11 = _mm_mul_pd(tmp_g, tmp_h);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[155], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_11, tmp_1l), tmp_7), tmp_9));
  proc_control_B.ct_m[157] = -ct[330];
  proc_control_B.ct_m[158] = -ct[333];
  proc_control_B.ct_m[159] = -ct[334];
  proc_control_B.ct_m[160] = -ct[337];
  proc_control_B.ct_m[161] = -ct[339];
  proc_control_B.ct_m[162] = ct[82];
  proc_control_B.ct_m[163] = -ct[342];
  proc_control_B.ct_m[164] = -ct[343];
  proc_control_B.ct_m[165] = -ct[346];
  proc_control_B.ct_m[166] = -ct[347];
  tmp_13 = _mm_set_pd(ct[12], ct[14]);
  tmp_14 = _mm_set1_pd(ct[43]);
  tmp_1r = _mm_loadu_pd(&ct[6]);
  tmp_1w = _mm_mul_pd(_mm_mul_pd(tmp_1r, tmp_1m), tmp_13);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[167], _mm_mul_pd(_mm_mul_pd(tmp_1w, tmp_0),
    tmp_14));
  tmp_l = _mm_set_pd(ct[26], ct[24]);
  tmp_16 = _mm_set_pd(ct[24], ct[9]);
  tmp_17 = _mm_set_pd(ct[25], ct[13]);
  tmp_1f = _mm_set_pd(ct[40], ct[43]);
  _mm_storeu_pd(&proc_control_B.ct_m[169], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[11], ct[8]), tmp_16), tmp_17), tmp_l), tmp_1f));
  proc_control_B.ct_m[171] = ct[13] * ct[24] * ct[25] * ct[26] * ct[40];
  tmp_j = _mm_set1_pd(ct[388]);
  tmp_1q = _mm_loadu_pd(&ct[40]);
  _mm_storeu_pd(&proc_control_B.ct_m[172], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[6], ct[10]), tmp_b), tmp_j), tmp_1q));
  proc_control_B.ct_m[174] = ct[6] * ct[10] * ct[388] * ct[42];
  proc_control_B.ct_m[175] = ct[84];
  proc_control_B.ct_m[176] = ct[85];
  proc_control_B.ct_m[177] = ct[86];
  tmp_b = _mm_set_pd(ct[13], ct[11]);
  _mm_storeu_pd(&proc_control_B.ct_m[178], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp), tmp_1), tmp_9));
  tmp_o = _mm_set_pd(ct[42], ct[40]);
  _mm_storeu_pd(&proc_control_B.ct_m[180], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[7], ct[16]), _mm_set_pd(ct[23], ct[17])), _mm_loadu_pd(&ct
    [388])), tmp_o));
  proc_control_B.ct_m[182] = ct[9] * ct[23] * ct[389] * ct[42];
  proc_control_B.ct_m[183] = ct[89];
  _mm_storeu_pd(&proc_control_B.ct_m[184], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_1h), tmp_1), tmp_9));
  proc_control_B.ct_m[186] = ct[90];
  _mm_storeu_pd(&proc_control_B.ct_m[187], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_h, tmp_i), tmp_1), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[189], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp_0), tmp_j), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[191], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp_3), tmp_j), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[193], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_h, tmp_1g), tmp_1), tmp_k));
  proc_control_B.ct_m[195] = ct[8] * ct[24] * ct[388] * ct[41];
  proc_control_B.ct_m[196] = ct[92];
  tmp_1 = _mm_set_pd(ct[11], ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_m[197], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1, tmp_l), tmp_j), tmp_m));
  _mm_storeu_pd(&proc_control_B.ct_m[199], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[7], ct[13]), tmp_n), tmp_j), tmp_o));
  tmp_1o = _mm_loadu_pd(&ct[41]);
  _mm_storeu_pd(&proc_control_B.ct_m[201], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1n, tmp_f), tmp_j), tmp_1o));
  _mm_storeu_pd(&proc_control_B.ct_m[203], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[7], ct[12]), tmp_3), tmp_j), tmp_1o));
  _mm_storeu_pd(&proc_control_B.ct_m[205], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1n, tmp_d), tmp_j), tmp_1o));
  proc_control_B.ct_m[207] = ct[93];
  tmp_19 = _mm_set_pd(ct[16], ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_m[208], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_19, tmp_n), tmp_j), tmp_m));
  tmp_18 = _mm_set_pd(ct[9], ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_m[210], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_18, tmp_7), tmp_j), tmp_p));
  tmp_1p = _mm_loadu_pd(&ct[16]);
  _mm_storeu_pd(&proc_control_B.ct_m[212], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1p, tmp_f), tmp_j), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[214], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1p, tmp_d), tmp_j), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[216], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_h, tmp_l), tmp_j), tmp_m));
  _mm_storeu_pd(&proc_control_B.ct_m[218], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_h, tmp_1k), tmp_j), tmp_k));
  _mm_storeu_pd(&proc_control_B.ct_m[220], _mm_mul_pd(tmp_1q, _mm_set_pd(ct[340],
    ct[348])));
  _mm_storeu_pd(&proc_control_B.ct_m[222], _mm_mul_pd(tmp_q, _mm_set_pd(ct[92],
    ct[331])));
  proc_control_B.ct_m[224] = ct[40] * ct[99];
  proc_control_B.ct_m[225] = ct[95];
  proc_control_B.ct_m[226] = ct[96];
  proc_control_B.ct_m[227] = ct[41] * ct[96];
  proc_control_B.ct_m[228] = ct[97];
  proc_control_B.ct_m[229] = ct[98];
  proc_control_B.ct_m[230] = ct[99];
  proc_control_B.ct_m[231] = ct[100];
  proc_control_B.ct_m[232] = ct[102];
  proc_control_B.ct_m[233] = ct[104];
  proc_control_B.ct_m[234] = ct[105];
  proc_control_B.ct_m[235] = ct[107];
  proc_control_B.ct_m[236] = ct[109];
  proc_control_B.ct_m[237] = ct[111];
  proc_control_B.ct_m[238] = ct[113];
  proc_control_B.ct_m[239] = ct[115];
  proc_control_B.ct_m[240] = ct[120];
  proc_control_B.ct_m[241] = ct[122];
  proc_control_B.ct_m[242] = ct[123];
  proc_control_B.ct_m[243] = ct[124];
  proc_control_B.ct_m[244] = ct[125];
  proc_control_B.ct_m[245] = ct[126];
  proc_control_B.ct_m[246] = ct[127];
  proc_control_B.ct_m[247] = ct[128];
  proc_control_B.ct_m[248] = ct[130];
  proc_control_B.ct_m[249] = ct[131];
  proc_control_B.ct_m[250] = ct[132];
  proc_control_B.ct_m[251] = ct[134];
  proc_control_B.ct_m[252] = ct[135];
  proc_control_B.ct_m[253] = ct[136];
  proc_control_B.ct_m[254] = ct[138];
  proc_control_B.ct_m[255] = ct[139];
  proc_control_B.ct_m[256] = ct[140];
  proc_control_B.ct_m[257] = ct[141];
  proc_control_B.ct_m[258] = ct[143];
  proc_control_B.ct_m[259] = ct[145];
  proc_control_B.ct_m[260] = ct[146];
  proc_control_B.ct_m[261] = ct[147];
  proc_control_B.ct_m[262] = ct[149];
  proc_control_B.ct_m[263] = ct[150];
  proc_control_B.ct_m[264] = ct[151];
  proc_control_B.ct_m[265] = ct[152];
  proc_control_B.ct_m[266] = ct[153];
  proc_control_B.ct_m[267] = ct[154];
  proc_control_B.ct_m[268] = ct[155];
  proc_control_B.ct_m[269] = ct[157];
  proc_control_B.ct_m[270] = ct[158];
  proc_control_B.ct_m[271] = ct[159];
  proc_control_B.ct_m[272] = ct[160];
  proc_control_B.ct_m[273] = ct[162];
  proc_control_B.ct_m[274] = ct[164];
  proc_control_B.ct_m[275] = ct[165];
  proc_control_B.ct_m[276] = ct[166];
  proc_control_B.ct_m[277] = ct[168];
  proc_control_B.ct_m[278] = ct[169];
  proc_control_B.ct_m[279] = ct[170];
  proc_control_B.ct_m[280] = ct[171];
  proc_control_B.ct_m[281] = ct[173];
  proc_control_B.ct_m[282] = ct[174];
  proc_control_B.ct_m[283] = ct[175];
  proc_control_B.ct_m[284] = ct[177];
  proc_control_B.ct_m[285] = ct[178];
  proc_control_B.ct_m[286] = ct[179];
  proc_control_B.ct_m[287] = ct[180];
  proc_control_B.ct_m[288] = ct[181];
  proc_control_B.ct_m[289] = ct[182];
  proc_control_B.ct_m[290] = ct[185];
  proc_control_B.ct_m[291] = ct[186];
  proc_control_B.ct_m[292] = ct[187];
  proc_control_B.ct_m[293] = ct[188];
  proc_control_B.ct_m[294] = ct[191];
  proc_control_B.ct_m[295] = ct[192];
  proc_control_B.ct_m[296] = ct[196];
  proc_control_B.ct_m[297] = ct[197];
  proc_control_B.ct_m[298] = ct[198];
  proc_control_B.ct_m[299] = ct[199];
  proc_control_B.ct_m[300] = ct[201];
  proc_control_B.ct_m[301] = ct[204];
  proc_control_B.ct_m[302] = ct[205];
  proc_control_B.ct_m[303] = ct[206];
  proc_control_B.ct_m[304] = ct[208];
  proc_control_B.ct_m[305] = ct[209];
  proc_control_B.ct_m[306] = ct[210];
  memcpy(&proc_control_B.ct_m[307], &ct[212], 29U * sizeof(real_T));
  proc_control_B.ct_m[336] = ct[241];
  memcpy(&proc_control_B.ct_m[337], &ct[243], 31U * sizeof(real_T));
  proc_control_B.ct_m[368] = ct[274];
  memcpy(&proc_control_B.ct_m[369], &ct[276], 9U * sizeof(real_T));
  proc_control_B.ct_m[378] = ct[286];
  memcpy(&proc_control_B.ct_m[379], &ct[288], 19U * sizeof(real_T));
  proc_control_B.ct_m[398] = ct[307];
  memcpy(&proc_control_B.ct_m[399], &ct[309], 9U * sizeof(real_T));
  proc_control_B.ct_m[408] = ct[318];
  memcpy(&proc_control_B.ct_m[409], &ct[320], 9U * sizeof(real_T));
  proc_control_B.ct_m[418] = ct[329];
  proc_control_B.ct_m[419] = ct[331];
  proc_control_B.ct_m[420] = ct[332];
  proc_control_B.ct_m[421] = ct[333];
  proc_control_B.ct_m[422] = ct[335];
  proc_control_B.ct_m[423] = ct[336];
  proc_control_B.ct_m[424] = ct[337];
  proc_control_B.ct_m[425] = ct[338];
  proc_control_B.ct_m[426] = ct[340];
  proc_control_B.ct_m[427] = ct[341];
  proc_control_B.ct_m[428] = ct[342];
  proc_control_B.ct_m[429] = ct[344];
  proc_control_B.ct_m[430] = ct[345];
  proc_control_B.ct_m[431] = ct[346];
  memcpy(&proc_control_B.ct_m[432], &ct[348], sizeof(real_T) << 3U);
  proc_control_B.ct_m[440] = ct[356];
  memcpy(&proc_control_B.ct_m[441], &ct[358], 30U * sizeof(real_T));
  tmp_q = _mm_mul_pd(_mm_set_pd(ct[6], ct[8]), _mm_set_pd(ct[13], ct[10]));
  tmp_1a = _mm_mul_pd(tmp_q, tmp_0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[471], _mm_mul_pd(tmp_1a, tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[473], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_r, tmp_1i), tmp_0), tmp_j));
  tmp_s = _mm_mul_pd(tmp_s, tmp_1i);
  tmp_1b = _mm_mul_pd(tmp_s, tmp_0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[475], _mm_mul_pd(tmp_1b, tmp_j));
  tmp_8 = _mm_mul_pd(tmp_1n, tmp_8);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[477], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_0),
    tmp_j));
  tmp_t = _mm_set_pd(ct[9], ct[10]);
  tmp_v = _mm_mul_pd(tmp_t, tmp_1i);
  tmp_1c = _mm_mul_pd(tmp_v, tmp_0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[479], _mm_mul_pd(tmp_1c, tmp_j));
  tmp_u = _mm_set_pd(ct[10], ct[11]);
  tmp_w = _mm_mul_pd(tmp_u, tmp_1i);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[481], _mm_mul_pd(_mm_mul_pd(tmp_w, tmp_0),
    tmp_j));
  proc_control_B.ct_tmp_j = ct[11] * ct[13];
  proc_control_B.ct_m[483] = proc_control_B.ct_tmp_j * ct[24] * ct[388];
  proc_control_B.ct_m[484] = ct[388];
  tmp_t = _mm_mul_pd(tmp_1r, tmp_t);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[485], _mm_mul_pd(_mm_mul_pd(tmp_t, tmp_3),
    tmp_j));
  tmp_z = _mm_set_pd(ct[8], ct[6]);
  tmp_x = _mm_mul_pd(tmp_z, _mm_set_pd(ct[9], ct[11]));
  _mm_storeu_pd(&proc_control_B.ct_m[487], _mm_mul_pd(_mm_mul_pd(tmp_x, tmp_3),
    tmp_j));
  tmp_1t = _mm_mul_pd(tmp_1s, tmp_u);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[489], _mm_mul_pd(_mm_mul_pd(tmp_1t, tmp_3),
    tmp_j));
  tmp_y = _mm_set_pd(ct[12], ct[13]);
  tmp_1u = _mm_mul_pd(tmp_1r, tmp_y);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[491], _mm_mul_pd(_mm_mul_pd(tmp_1u, tmp_3),
    tmp_j));
  proc_control_B.ct_tmp_l = ct[6] * ct[14];
  proc_control_B.ct_m[493] = proc_control_B.ct_tmp_l * ct[25] * ct[388];
  proc_control_B.ct_m[494] = ct[389];
  tmp_1d = _mm_mul_pd(tmp_s, tmp_3);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[495], _mm_mul_pd(tmp_1d, tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[497], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_3),
    tmp_j));
  tmp_1e = _mm_mul_pd(tmp_v, tmp_3);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[499], _mm_mul_pd(tmp_1e, tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[501], _mm_mul_pd(_mm_mul_pd(tmp_w, tmp_3),
    tmp_j));
  proc_control_B.ct_m[503] = proc_control_B.ct_tmp_j * ct[25] * ct[388];
  proc_control_B.ct_m[504] = ct[390];
  _mm_storeu_pd(&proc_control_B.ct_m[505], _mm_mul_pd(_mm_mul_pd(tmp_t, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[507], _mm_mul_pd(_mm_mul_pd(tmp_x, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[509], _mm_mul_pd(_mm_mul_pd(tmp_1t, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[511], _mm_mul_pd(_mm_mul_pd(tmp_1u, tmp_7),
    tmp_j));
  proc_control_B.ct_m[513] = proc_control_B.ct_tmp_l * ct[26] * ct[388];
  proc_control_B.ct_m[514] = ct[391];
  _mm_storeu_pd(&proc_control_B.ct_m[515], _mm_mul_pd(_mm_mul_pd(tmp_s, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[517], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[519], _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[521], _mm_mul_pd(_mm_mul_pd(tmp_w, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[523], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_u, _mm_set_pd(ct[15], ct[13])), tmp_n), tmp_j));
  proc_control_B.ct_m[525] = ct[392];
  tmp_s = _mm_set1_pd(ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_m[526], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp_s), tmp_0), tmp_j));
  proc_control_B.ct_m[528] = ct[14] * ct[15] * ct[24] * ct[388];
  proc_control_B.ct_m[529] = ct[393];
  proc_control_B.ct_m[530] = ct[394];
  tmp_1m = _mm_mul_pd(tmp_1m, tmp_s);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[531], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_3),
    tmp_j));
  tmp_1v = _mm_mul_pd(tmp_1v, tmp_s);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[533], _mm_mul_pd(_mm_mul_pd(tmp_1v, tmp_3),
    tmp_j));
  proc_control_B.ct_m[535] = ct[395];
  _mm_storeu_pd(&proc_control_B.ct_m[536], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_z, tmp_g), tmp_0), tmp_j));
  tmp_8 = _mm_mul_pd(tmp_1i, tmp_g);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[538], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_0),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[540], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_7),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[542], _mm_mul_pd(_mm_mul_pd(tmp_1v, tmp_7),
    tmp_j));
  tmp_1m = _mm_mul_pd(tmp_10, tmp_1p);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[544], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_f),
    tmp_j));
  proc_control_B.ct_m[546] = ct[396];
  _mm_storeu_pd(&proc_control_B.ct_m[547], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1s, tmp_4), tmp_1l), tmp_j));
  tmp_1i = _mm_mul_pd(tmp_1j, tmp_h);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[549], _mm_mul_pd(_mm_mul_pd(tmp_1i, tmp_0),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[551], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_3),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[553], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_d),
    tmp_j));
  proc_control_B.ct_m[555] = ct[7] * ct[17] * ct[25] * ct[388];
  proc_control_B.ct_m[556] = ct[397];
  _mm_storeu_pd(&proc_control_B.ct_m[557], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1n, tmp_1p), tmp_d), tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[559], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[12], ct[10]), tmp_4), tmp_1k), tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[561], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[14]), tmp_g), tmp_n), tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[563], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1r, tmp_h), tmp_7), tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[565], _mm_mul_pd(_mm_mul_pd(tmp_1i, tmp_7),
    tmp_j));
  proc_control_B.ct_m[567] = ct[398];
  tmp_1m = _mm_mul_pd(tmp_s, tmp_1p);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[568], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_f),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[570], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_d),
    tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[572], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[15], ct[16]), tmp_h), tmp_l), tmp_j));
  _mm_storeu_pd(&proc_control_B.ct_m[574], _mm_mul_pd(_mm_mul_pd(tmp_11, tmp_1k),
    tmp_j));
  proc_control_B.ct_m[576] = ct[399];
  _mm_storeu_pd(&proc_control_B.ct_m[577], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [290])));
  _mm_storeu_pd(&proc_control_B.ct_m[579], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [292])));
  _mm_storeu_pd(&proc_control_B.ct_m[581], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [294])));
  _mm_storeu_pd(&proc_control_B.ct_m[583], _mm_mul_pd(_mm_set_pd(ct[14], ct[26]),
    _mm_set_pd(ct[90], ct[308])));
  proc_control_B.ct_m[585] = ct[400];
  _mm_storeu_pd(&proc_control_B.ct_m[586], _mm_mul_pd(tmp_12, _mm_set_pd(ct[106],
    ct[96])));
  _mm_storeu_pd(&proc_control_B.ct_m[588], _mm_mul_pd(tmp_0, _mm_set_pd(ct[80],
    ct[77])));
  proc_control_B.ct_m[590] = ct[401];
  _mm_storeu_pd(&proc_control_B.ct_m[591], _mm_mul_pd(tmp_0, _mm_set_pd(ct[83],
    ct[81])));
  _mm_storeu_pd(&proc_control_B.ct_m[593], _mm_mul_pd(tmp_0, _mm_loadu_pd(&ct[87])));
  proc_control_B.ct_m[595] = ct[26] * ct[77];
  proc_control_B.ct_m[596] = ct[402];
  _mm_storeu_pd(&proc_control_B.ct_m[597], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct[80])));
  _mm_storeu_pd(&proc_control_B.ct_m[599], _mm_mul_pd(tmp_1k, _mm_set1_pd(ct[94])));
  proc_control_B.ct_m[601] = ct[25] * ct[103];
  proc_control_B.ct_m[602] = ct[403];
  _mm_storeu_pd(&proc_control_B.ct_m[603], _mm_mul_pd(tmp_d, _mm_set_pd(ct[108],
    ct[101])));
  _mm_storeu_pd(&proc_control_B.ct_m[605], _mm_mul_pd(tmp_7, _mm_set_pd(ct[108],
    ct[103])));
  proc_control_B.ct_m[607] = ct[26] * ct[110];
  proc_control_B.ct_m[608] = ct[404];
  _mm_storeu_pd(&proc_control_B.ct_m[609], _mm_mul_pd(tmp_1k, _mm_set_pd(ct[112],
    ct[114])));
  _mm_storeu_pd(&proc_control_B.ct_m[611], _mm_mul_pd(tmp_1k, _mm_set_pd(ct[114],
    ct[116])));
  _mm_storeu_pd(&proc_control_B.ct_m[613], _mm_mul_pd(tmp_7, _mm_loadu_pd(&ct
    [116])));
  _mm_storeu_pd(&proc_control_B.ct_m[615], _mm_mul_pd(tmp_1h, _mm_set_pd(ct[128],
    ct[126])));
  proc_control_B.ct_m[617] = ct[405];
  _mm_storeu_pd(&proc_control_B.ct_m[618], _mm_mul_pd(tmp, _mm_set_pd(ct[133],
    ct[130])));
  _mm_storeu_pd(&proc_control_B.ct_m[620], _mm_mul_pd(tmp_1h, _mm_set1_pd(ct[135])));
  proc_control_B.ct_m[622] = ct[22] * ct[136];
  proc_control_B.ct_m[623] = ct[406];
  _mm_storeu_pd(&proc_control_B.ct_m[624], _mm_mul_pd(tmp_1h, _mm_set1_pd(ct[140])));
  _mm_storeu_pd(&proc_control_B.ct_m[626], _mm_mul_pd(_mm_set_pd(ct[25], ct[22]),
    _mm_set_pd(ct[119], ct[142])));
  proc_control_B.ct_m[628] = ct[26] * ct[118];
  proc_control_B.ct_m[629] = ct[407];
  _mm_storeu_pd(&proc_control_B.ct_m[630], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[144])));
  _mm_storeu_pd(&proc_control_B.ct_m[632], _mm_mul_pd(tmp_i, _mm_set1_pd(ct[147])));
  proc_control_B.ct_m[634] = ct[21] * ct[149];
  proc_control_B.ct_m[635] = ct[408];
  tmp_s = _mm_set_pd(ct[21], ct[23]);
  _mm_storeu_pd(&proc_control_B.ct_m[636], _mm_mul_pd(tmp_s, _mm_loadu_pd(&ct
    [154])));
  _mm_storeu_pd(&proc_control_B.ct_m[638], _mm_mul_pd(tmp_6, _mm_set_pd(ct[158],
    ct[155])));
  _mm_storeu_pd(&proc_control_B.ct_m[640], _mm_mul_pd(_mm_set_pd(ct[26], ct[23]),
    _mm_set_pd(ct[119], ct[161])));
  proc_control_B.ct_m[642] = ct[409];
  _mm_storeu_pd(&proc_control_B.ct_m[643], _mm_mul_pd(tmp_5, _mm_set_pd(ct[165],
    ct[163])));
  _mm_storeu_pd(&proc_control_B.ct_m[645], _mm_mul_pd(tmp_1g, _mm_set_pd(ct[165],
    ct[166])));
  proc_control_B.ct_m[647] = ct[22] * ct[169];
  proc_control_B.ct_m[648] = ct[410];
  _mm_storeu_pd(&proc_control_B.ct_m[649], _mm_mul_pd(tmp_6, _mm_set_pd(ct[172],
    ct[169])));
  _mm_storeu_pd(&proc_control_B.ct_m[651], _mm_mul_pd(tmp_2, _mm_set_pd(ct[175],
    ct[173])));
  proc_control_B.ct_m[653] = ct[23] * ct[177];
  proc_control_B.ct_m[654] = ct[411];
  _mm_storeu_pd(&proc_control_B.ct_m[655], _mm_mul_pd(_mm_set_pd(ct[26], ct[21]),
    _mm_set_pd(ct[121], ct[183])));
  _mm_storeu_pd(&proc_control_B.ct_m[657], _mm_mul_pd(tmp_1h, _mm_set_pd(ct[187],
    ct[184])));
  proc_control_B.ct_m[659] = ct[412];
  _mm_storeu_pd(&proc_control_B.ct_m[660], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [188])));
  _mm_storeu_pd(&proc_control_B.ct_m[662], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [190])));
  _mm_storeu_pd(&proc_control_B.ct_m[664], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [191])));
  _mm_storeu_pd(&proc_control_B.ct_m[666], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct
    [192])));
  tmp_8 = _mm_set1_pd(ct[31]);
  tmp_1i = _mm_set1_pd(ct[357]);
  tmp_b = _mm_set1_pd(2.0);
  tmp_1m = _mm_loadu_pd(&ct[27]);
  _mm_storeu_pd(&proc_control_B.ct_m[668], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(ct[18]), tmp_1m), tmp_8), tmp_1i), tmp_b));
  proc_control_B.ct_m[670] = ct[413];
  tmp_12 = _mm_set_pd(4.0, 2.0);
  _mm_storeu_pd(&proc_control_B.ct_m[671], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[18], ct[19]), _mm_set1_pd(ct[27])), tmp_8), tmp_1i),
    tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_m[673], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[18]), _mm_set_pd(ct[28], ct[29])), tmp_8),
    tmp_1i), tmp_b));
  tmp_g = _mm_set_pd(ct[18], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_m[675], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, tmp_1m), tmp_8), tmp_1i), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_m[677], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(ct[19]), _mm_set_pd(ct[29], ct[27])), tmp_8), tmp_1i),
    _mm_set_pd(2.0, 4.0)));
  _mm_storeu_pd(&proc_control_B.ct_m[679], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[19], ct[20]), _mm_set1_pd(ct[28])), tmp_8), tmp_1i),
    tmp_12));
  proc_control_B.ct_m[681] = ct[414];
  _mm_storeu_pd(&proc_control_B.ct_m[682], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, _mm_loadu_pd(&ct[29])), tmp_8), tmp_1i), tmp_b));
  _mm_storeu_pd(&proc_control_B.ct_m[684], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[19]), _mm_set1_pd(ct[30])), tmp_8), tmp_1i),
    tmp_b));
  _mm_storeu_pd(&proc_control_B.ct_m[686], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[194])));
  _mm_storeu_pd(&proc_control_B.ct_m[688], _mm_mul_pd(tmp_1h, _mm_set1_pd(ct[196])));
  proc_control_B.ct_m[690] = ct[21] * ct[197];
  proc_control_B.ct_m[691] = ct[415];
  _mm_storeu_pd(&proc_control_B.ct_m[692], _mm_mul_pd(tmp_s, _mm_loadu_pd(&ct
    [197])));
  _mm_storeu_pd(&proc_control_B.ct_m[694], _mm_mul_pd(tmp_5, _mm_set_pd(ct[200],
    ct[198])));
  _mm_storeu_pd(&proc_control_B.ct_m[696], _mm_mul_pd(tmp_i, _mm_set1_pd(ct[201])));
  _mm_storeu_pd(&proc_control_B.ct_m[698], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [202])));
  _mm_storeu_pd(&proc_control_B.ct_m[700], _mm_mul_pd(tmp_2, _mm_loadu_pd(&ct
    [204])));
  proc_control_B.ct_m[702] = ct[416];
  _mm_storeu_pd(&proc_control_B.ct_m[703], _mm_mul_pd(tmp_6, _mm_loadu_pd(&ct
    [206])));
  _mm_storeu_pd(&proc_control_B.ct_m[705], _mm_mul_pd(tmp_1g, _mm_set_pd(ct[211],
    ct[208])));
  proc_control_B.ct_m[707] = ct[417];
  _mm_storeu_pd(&proc_control_B.ct_m[708], _mm_add_pd(_mm_set1_pd(ct[242]),
    _mm_set_pd(ct[319], ct[285])));
  proc_control_B.ct_m[710] = ct[285] + ct[319];
  proc_control_B.ct_m[711] = ct[418];
  proc_control_B.ct_m[712] = -ct[275];
  proc_control_B.ct_m[713] = -ct[287];
  proc_control_B.ct_m[714] = -ct[289];
  _mm_storeu_pd(&proc_control_B.ct_m[715], _mm_mul_pd(_mm_mul_pd(tmp_1w, tmp_3),
    tmp_14));
  proc_control_B.ct_m[717] = ct[8] * ct[9] * ct[13] * ct[25] * ct[43];
  proc_control_B.ct_m[718] = ct[419];
  _mm_storeu_pd(&proc_control_B.ct_m[719], _mm_mul_pd(_mm_mul_pd(tmp_1w, tmp_7),
    tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[721], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp_16), tmp_17), tmp_7), _mm_set_pd(ct[41], ct[43])));
  tmp = _mm_set_pd(ct[32], ct[26]);
  _mm_storeu_pd(&proc_control_B.ct_m[723], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, _mm_set_pd(ct[13], ct[24])), tmp_f), tmp), tmp_m));
  _mm_storeu_pd(&proc_control_B.ct_m[725], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_18, tmp_0), tmp_3), tmp_7), tmp_p));
  tmp_i = _mm_set1_pd(ct[32]);
  _mm_storeu_pd(&proc_control_B.ct_m[727], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[8], ct[11]), tmp_y), tmp_f), tmp_i), tmp_1q));
  proc_control_B.ct_m[729] = ct[420];
  tmp_1 = _mm_set_pd(ct[26], ct[32]);
  tmp_15 = _mm_set_pd(ct[24], ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_m[730], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[16], ct[11]), tmp_15), tmp_d), tmp_1), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[732], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1s, _mm_set_pd(ct[12], ct[9])), tmp_1l), tmp_i), tmp_e));
  _mm_storeu_pd(&proc_control_B.ct_m[734], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[7], ct[17]), _mm_set_pd(ct[9], ct[24])), tmp_3),
    tmp), tmp_o));
  _mm_storeu_pd(&proc_control_B.ct_m[736], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[14], ct[8]), tmp_19), tmp_n), tmp_i), tmp_m));
  _mm_storeu_pd(&proc_control_B.ct_m[738], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[17], ct[7]), tmp_16), tmp_d), tmp_1), tmp_e));
  proc_control_B.ct_m[740] = ct[421];
  tmp_1 = _mm_mul_pd(tmp_c, tmp_4);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[741], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1, tmp_1l), tmp_i), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[743], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1, tmp_1k), tmp_i), tmp_9));
  _mm_storeu_pd(&proc_control_B.ct_m[745], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_a, tmp_h), tmp_l), tmp_i), tmp_m));
  _mm_storeu_pd(&proc_control_B.ct_m[747], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_10, tmp_h), tmp_1k), tmp_i), tmp_k));
  tmp_1 = _mm_set_pd(ct[11], ct[9]);
  tmp_2 = _mm_mul_pd(tmp_r, tmp_1);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[749], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_2, tmp_0), tmp_3), tmp_14));
  proc_control_B.ct_m[751] = ct[422];
  _mm_storeu_pd(&proc_control_B.ct_m[752], _mm_mul_pd(_mm_mul_pd(tmp_1a, tmp_3),
    tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[754], _mm_mul_pd(_mm_mul_pd(tmp_1b, tmp_3),
    tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[756], _mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_3),
    tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[758], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[7], ct[11]), _mm_set_pd(ct[9], ct[13])), tmp_0),
    tmp_1k), tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[760], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_z, tmp_u), tmp_0), tmp_7), tmp_14));
  proc_control_B.ct_m[762] = ct[423];
  _mm_storeu_pd(&proc_control_B.ct_m[763], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_z, tmp_y), tmp_0), tmp_7), tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[765], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[10], ct[7]), tmp_13), tmp_0), tmp_7), tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[767], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, _mm_set_pd(ct[13], ct[14])), tmp_0), tmp_7), tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[769], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_2, tmp_3), tmp_7), tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[771], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_q, tmp_3), tmp_7), tmp_14));
  proc_control_B.ct_m[773] = ct[424];
  _mm_storeu_pd(&proc_control_B.ct_m[774], _mm_mul_pd(_mm_mul_pd(tmp_1d, tmp_7),
    tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[776], _mm_mul_pd(_mm_mul_pd(tmp_1e, tmp_7),
    tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_m[778], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_15), tmp_3), tmp), tmp_1f));
  tmp = _mm_set_pd(ct[10], ct[14]);
  _mm_storeu_pd(&proc_control_B.ct_m[780], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp, tmp_0), tmp_1k), tmp_i), tmp_9));
  tmp_1 = _mm_set_pd(ct[6], ct[14]);
  _mm_storeu_pd(&proc_control_B.ct_m[782], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_0), tmp_d), tmp_i), tmp_1q));
  proc_control_B.ct_m[784] = ct[425];
  _mm_storeu_pd(&proc_control_B.ct_m[785], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp, tmp_1l), tmp_1k), tmp_i), tmp_m));
  _mm_storeu_pd(&proc_control_B.ct_m[787], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_f), tmp_7), tmp_i), tmp_1q));
  tmp = _mm_mul_pd(tmp_a, tmp_0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_m[789], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp,
    tmp_3), tmp_i), tmp_p));
  _mm_storeu_pd(&proc_control_B.ct_m[791], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_1l), tmp_7), tmp_i), tmp_k));
  _mm_storeu_pd(&proc_control_B.ct_m[793], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp,
    tmp_7), tmp_i), tmp_p));
  proc_control_B.ct_m[795] = ct[426];
  _mm_storeu_pd(&proc_control_B.ct_m[796], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_3), tmp_7), tmp_i), tmp_1o));
  proc_control_B.ct_m[798] = ct[10] * ct[25] * ct[26] * ct[32] * ct[42];
  proc_control_B.ct_m[799] = ct[427];
  proc_control_B.ct_m[800] = ct[428];
  proc_control_B.ct_m[801] = ct[429];
  proc_control_B.ct_m[802] = ct[430];
  proc_control_B.ct_m[803] = ct[431];
  proc_control_B.ct_m[804] = ct[432];
  proc_control_ft_2(proc_control_B.ct_m, Anq);
}

void proc_control::proc_cont_AUVQuatJacobianMatrix(const real_T in1[13], const
  real_T in3[38], real_T Anq[169])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_1g;
  __m128d tmp_1h;
  __m128d tmp_1i;
  __m128d tmp_1j;
  __m128d tmp_1k;
  __m128d tmp_1l;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  // AUVQuatJacobianMatrix
  //     Anq = AUVQuatJacobianMatrix(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     05-Jul-2022 23:04:31
  tmp = _mm_set1_pd(in1[10]);
  tmp_10 = _mm_set_pd(in3[9], in3[6]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(tmp_10, tmp));
  proc_control_B.t15_cx = proc_control_B.dv47[0];
  proc_control_B.t17_d = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_0 = _mm_set1_pd(in1[11]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(_mm_set_pd(in3[10], in3[4]),
    tmp_0));
  proc_control_B.t19_a2 = proc_control_B.dv47[0];
  proc_control_B.t23_b = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(_mm_set_pd(in3[8], in3[5]),
    _mm_set1_pd(in1[12])));
  proc_control_B.t25_g = proc_control_B.dv47[0];
  proc_control_B.t27_f = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_16 = _mm_loadu_pd(&in3[13]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(tmp, tmp_16));
  proc_control_B.t33_c = proc_control_B.dv47[0];
  proc_control_B.t34_p = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp = _mm_set_pd(in3[14], in3[12]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(tmp_0, tmp));
  proc_control_B.t35 = proc_control_B.dv47[0];
  proc_control_B.t37_a = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(_mm_set_pd(in1[12], in3[12]),
    _mm_set_pd(in3[13], in1[12])));
  proc_control_B.t38_n = proc_control_B.dv47[0];
  proc_control_B.t39_h = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_1b = _mm_loadu_pd(&in3[30]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(_mm_loadu_pd(&in1[7]),
    tmp_1b));
  proc_control_B.t41_m = proc_control_B.dv47[0];
  proc_control_B.t42_f = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(_mm_set_pd(in3[1], in1[9]),
    _mm_set_pd(in3[36], in3[32])));
  proc_control_B.t43_b = proc_control_B.dv47[0];
  proc_control_B.t44_e = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_15 = _mm_loadu_pd(&in3[12]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(tmp_15, tmp_15));
  proc_control_B.t45_n = proc_control_B.dv47[0];
  proc_control_B.t47 = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_0 = _mm_set_pd(in3[0], in3[14]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_mul_pd(tmp_0, tmp_0));
  proc_control_B.t50 = proc_control_B.dv47[0];
  proc_control_B.t57_p = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t58 = rt_powd_snf(in3[0], 3.0);
  tmp_0 = _mm_set1_pd(2.0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_17 = _mm_loadu_pd(&in1[4]);
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_div_pd(tmp_17, tmp_0));
  proc_control_B.t129 = proc_control_B.dv47[0];
  proc_control_B.t130 = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_div_pd(_mm_set_pd(in1[10], in1[6]),
    tmp_0));
  proc_control_B.t131 = proc_control_B.dv47[0];
  proc_control_B.t133 = proc_control_B.dv47[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv47[0], _mm_div_pd(_mm_loadu_pd(&in1[11]),
    tmp_0));
  proc_control_B.in3_p[0] = in3[18];
  proc_control_B.in3_p[1] = in3[19];
  proc_control_B.in3_p[2] = in3[20];
  proc_control_B.in3_p[3] = in3[21];
  proc_control_B.in3_p[4] = in3[22];
  proc_control_B.in3_p[5] = in3[23];
  memcpy(&proc_control_B.in3_p[6], &in3[3], sizeof(real_T) << 3U);
  proc_control_B.in3_p[14] = in3[11];
  proc_control_B.in3_p[15] = in3[33];
  proc_control_B.in3_p[16] = in3[34];
  proc_control_B.in3_p[17] = in3[35];
  proc_control_B.in3_p[18] = in3[15];
  proc_control_B.in3_p[19] = in3[16];
  proc_control_B.in3_p[20] = in3[17];
  proc_control_B.in3_p[21] = in3[12];
  proc_control_B.in3_p[22] = in3[13];
  proc_control_B.in3_p[23] = in3[14];
  proc_control_B.in3_p[24] = in3[30];
  proc_control_B.in3_p[25] = in3[31];
  proc_control_B.in3_p[26] = in3[32];
  proc_control_B.in3_p[27] = in1[4];
  proc_control_B.in3_p[28] = in1[5];
  proc_control_B.in3_p[29] = in1[6];
  proc_control_B.in3_p[30] = in1[3];
  proc_control_B.in3_p[31] = in3[37];
  proc_control_B.in3_p[32] = in3[0];
  proc_control_B.in3_p[33] = in1[10];
  proc_control_B.in3_p[34] = in1[11];
  proc_control_B.in3_p[35] = in1[12];
  tmp_1 = _mm_set1_pd(in3[0]);
  tmp_13 = _mm_set1_pd(in1[8]);
  _mm_storeu_pd(&proc_control_B.in3_p[36], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_15),
    tmp_13));
  tmp_14 = _mm_set1_pd(in1[9]);
  _mm_storeu_pd(&proc_control_B.in3_p[38], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_16),
    tmp_14));
  proc_control_B.in3_p[40] = -in3[33];
  proc_control_B.in3_p[41] = -in3[34];
  proc_control_B.in3_p[42] = -in3[35];
  proc_control_B.in3_p[43] = -in3[0];
  if (rtIsNaN(in1[7])) {
    proc_control_B.in3_tmp_i = (rtNaN);
  } else if (in1[7] < 0.0) {
    proc_control_B.in3_tmp_i = -1.0;
  } else {
    proc_control_B.in3_tmp_i = (in1[7] > 0.0);
  }

  proc_control_B.in3_p[44] = in3[24] * proc_control_B.in3_tmp_i * in1[7];
  if (rtIsNaN(in1[8])) {
    proc_control_B.in3_tmp_i = (rtNaN);
  } else if (in1[8] < 0.0) {
    proc_control_B.in3_tmp_i = -1.0;
  } else {
    proc_control_B.in3_tmp_i = (in1[8] > 0.0);
  }

  proc_control_B.in3_p[45] = in3[25] * proc_control_B.in3_tmp_i * in1[8];
  if (rtIsNaN(in1[9])) {
    proc_control_B.in3_tmp_i = (rtNaN);
  } else if (in1[9] < 0.0) {
    proc_control_B.in3_tmp_i = -1.0;
  } else {
    proc_control_B.in3_tmp_i = (in1[9] > 0.0);
  }

  proc_control_B.in3_p[46] = in3[26] * proc_control_B.in3_tmp_i * in1[9];
  proc_control_B.in3_p[47] = -(in3[10] * in1[10]);
  proc_control_B.in3_p[48] = -(in3[5] * in1[11]);
  proc_control_B.in3_p[49] = -(in3[6] * in1[12]);
  proc_control_B.in3_p[50] = -(in1[10] * in3[33]);
  proc_control_B.in3_p[51] = -(in1[11] * in3[34]);
  proc_control_B.in3_p[52] = -(in1[12] * in3[35]);
  proc_control_B.in3_p[53] = -proc_control_B.t34_p;
  proc_control_B.in3_p[54] = -proc_control_B.t35;
  proc_control_B.in3_p[55] = -proc_control_B.t39_h;
  _mm_storeu_pd(&proc_control_B.in3_p[56], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp_17),
    tmp_0));
  proc_control_B.in3_p[58] = in1[6] * in1[6] * 2.0;
  proc_control_B.in3_p[59] = -proc_control_B.t41_m;
  proc_control_B.in3_p[60] = -proc_control_B.t42_f;
  proc_control_B.in3_p[61] = -proc_control_B.t43_b;
  proc_control_B.in3_p[62] = -proc_control_B.t44_e;
  proc_control_B.in3_p[63] = proc_control_B.t129;
  proc_control_B.in3_p[64] = proc_control_B.t130;
  proc_control_B.in3_p[65] = proc_control_B.t131;
  proc_control_B.in3_p[66] = in1[3] / 2.0;
  proc_control_B.in3_p[67] = proc_control_B.t133;
  proc_control_B.in3_p[68] = proc_control_B.dv47[0];
  proc_control_B.in3_p[69] = proc_control_B.dv47[1];
  if (rtIsNaN(in1[10])) {
    proc_control_B.in3_tmp_i = (rtNaN);
  } else if (in1[10] < 0.0) {
    proc_control_B.in3_tmp_i = -1.0;
  } else {
    proc_control_B.in3_tmp_i = (in1[10] > 0.0);
  }

  proc_control_B.in3_p[70] = in1[10] * in3[27] * proc_control_B.in3_tmp_i;
  proc_control_B.in3_p[71] = proc_control_B.t37_a + in1[7];
  if (rtIsNaN(in1[11])) {
    proc_control_B.in3_tmp_i = (rtNaN);
  } else if (in1[11] < 0.0) {
    proc_control_B.in3_tmp_i = -1.0;
  } else {
    proc_control_B.in3_tmp_i = (in1[11] > 0.0);
  }

  proc_control_B.in3_p[72] = in1[11] * in3[28] * proc_control_B.in3_tmp_i;
  proc_control_B.in3_p[73] = proc_control_B.t33_c + in1[9];
  proc_control_B.in3_p[74] = in3[3] * in1[10];
  proc_control_B.in3_p[75] = proc_control_B.t38_n + in1[8];
  if (rtIsNaN(in1[12])) {
    proc_control_B.in3_tmp_i = (rtNaN);
  } else if (in1[12] < 0.0) {
    proc_control_B.in3_tmp_i = -1.0;
  } else {
    proc_control_B.in3_tmp_i = (in1[12] > 0.0);
  }

  proc_control_B.in3_p[76] = in1[12] * in3[29] * proc_control_B.in3_tmp_i;
  tmp_2 = _mm_set1_pd(in3[31]);
  tmp_3 = _mm_set1_pd(in3[3]);
  tmp_4 = _mm_set_pd(in3[10], in3[11]);
  tmp_1a = _mm_loadu_pd(&in3[7]);
  tmp_3 = _mm_mul_pd(tmp_3, tmp_1a);
  tmp_18 = _mm_mul_pd(tmp_3, tmp_4);
  tmp_1j = _mm_mul_pd(tmp_18, tmp_2);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[77], _mm_mul_pd(tmp_1j, tmp_1));
  tmp_c = _mm_set_pd(in3[9], in3[11]);
  tmp_i = _mm_set_pd(in3[8], in3[6]);
  tmp_5 = _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(in3[4]), tmp_i), tmp_c);
  tmp_z = _mm_mul_pd(tmp_5, tmp_2);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[79], _mm_mul_pd(tmp_z, tmp_1));
  tmp_7 = _mm_set1_pd(in3[5]);
  tmp_8 = _mm_set_pd(in3[9], in3[10]);
  tmp_19 = _mm_loadu_pd(&in3[6]);
  tmp_7 = _mm_mul_pd(_mm_mul_pd(tmp_7, tmp_19), tmp_8);
  tmp_1k = _mm_mul_pd(tmp_7, tmp_2);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[81], _mm_mul_pd(tmp_1k, tmp_1));
  tmp_6 = _mm_set1_pd(in3[32]);
  _mm_storeu_pd(&proc_control_B.in3_p[83], _mm_mul_pd(_mm_mul_pd(tmp_18, tmp_6),
    tmp_1));
  proc_control_B.in3_p[85] = proc_control_B.t15_cx;
  _mm_storeu_pd(&proc_control_B.in3_p[86], _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_6),
    tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[88], _mm_mul_pd(_mm_mul_pd(tmp_7, tmp_6),
    tmp_1));
  tmp_9 = _mm_set1_pd(in3[30]);
  tmp_b = _mm_set_pd(in3[5], in3[3]);
  tmp_d = _mm_set1_pd(in3[34]);
  _mm_storeu_pd(&proc_control_B.in3_p[90], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_b, tmp_d), tmp_9), tmp_2), tmp_6));
  tmp_e = _mm_set_pd(in3[30], in3[31]);
  tmp_f = _mm_set_pd(in3[0], in3[32]);
  tmp_u = _mm_set_pd(in3[7], in3[11]);
  _mm_storeu_pd(&proc_control_B.in3_p[92], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, _mm_set_pd(in3[11], in3[34])), _mm_set_pd(in3[33], in3[30])),
    tmp_e), tmp_f));
  proc_control_B.in3_tmp_i = in3[8] * in3[10] * in3[33];
  proc_control_B.in3_p[94] = proc_control_B.in3_tmp_i * in3[30] * in3[0];
  proc_control_B.in3_p[95] = in3[8] * in1[10];
  tmp_a = _mm_set1_pd(in3[35]);
  tmp_1i = _mm_loadu_pd(&in3[3]);
  tmp_1f = _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_1i, tmp_a), tmp_9), tmp_2);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[96], _mm_mul_pd(tmp_1f, tmp_6));
  tmp_1h = _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_a), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[98], _mm_mul_pd(_mm_mul_pd(tmp_1h, tmp_2),
    tmp_6));
  tmp_h = _mm_set1_pd(in3[33]);
  tmp_1a = _mm_mul_pd(tmp_1a, tmp_4);
  tmp_1l = _mm_mul_pd(tmp_1a, tmp_h);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[100], _mm_mul_pd(_mm_mul_pd(tmp_1l, tmp_2),
    tmp_1));
  tmp_y = _mm_mul_pd(tmp_b, tmp_c);
  tmp_12 = _mm_mul_pd(tmp_y, tmp_d);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[102], _mm_mul_pd(_mm_mul_pd(tmp_12, tmp_9),
    tmp_1));
  proc_control_B.in3_tmp = in3[7] * in3[11];
  proc_control_B.in3_p[104] = proc_control_B.in3_tmp * in3[33] * in3[32] * in3[0];
  proc_control_B.in3_p[105] = proc_control_B.t17_d;
  tmp_v = _mm_set_pd(in3[3], in3[33]);
  _mm_storeu_pd(&proc_control_B.in3_p[106], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_v, _mm_set_pd(in3[7], in3[34])), _mm_set_pd(in3[35], in3[30])),
    tmp_e), tmp_f));
  tmp_f = _mm_set_pd(in3[34], in3[35]);
  tmp_k = _mm_set_pd(in3[3], in3[4]);
  tmp_g = _mm_mul_pd(_mm_mul_pd(tmp_k, _mm_set_pd(in3[11], in3[6])), tmp_f);
  _mm_storeu_pd(&proc_control_B.in3_p[108], _mm_mul_pd(_mm_mul_pd(tmp_g, tmp_1b),
    tmp_1));
  tmp_j = _mm_set_pd(in3[3], in3[5]);
  tmp_1c = _mm_loadu_pd(&in3[34]);
  _mm_storeu_pd(&proc_control_B.in3_p[110], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_j, _mm_set_pd(in3[7], in3[9])), tmp_1c), tmp_2), tmp_1));
  tmp_1d = _mm_loadu_pd(&in3[31]);
  _mm_storeu_pd(&proc_control_B.in3_p[112], _mm_mul_pd(_mm_mul_pd(tmp_g, tmp_1d),
    tmp_1));
  tmp_g = _mm_set_pd(in3[3], in3[11]);
  _mm_storeu_pd(&proc_control_B.in3_p[114], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, _mm_set_pd(in3[7], in3[33])), tmp_1c), _mm_set_pd(in3[32],
    in3[30])), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[116], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[11], in3[7]), tmp_h), tmp_f), tmp_1b), tmp_1));
  tmp_11 = _mm_set_pd(in3[3], in3[7]);
  tmp_1e = _mm_loadu_pd(&in3[33]);
  tmp_11 = _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_11, tmp_1e), tmp_a), tmp_e);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[118], _mm_mul_pd(tmp_11, tmp_1));
  proc_control_B.in3_p[120] = proc_control_B.t19_a2;
  _mm_storeu_pd(&proc_control_B.in3_p[121], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[33], in3[3]), tmp_d), tmp_a), tmp_e), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[123], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_h, tmp_d), tmp_a), tmp_1d), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[125], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_9), tmp_2), tmp_1));
  tmp_3 = _mm_set_pd(in3[4], in3[5]);
  tmp_q = _mm_mul_pd(tmp_3, tmp_i);
  tmp_m = _mm_mul_pd(tmp_q, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[127], _mm_mul_pd(_mm_mul_pd(tmp_m, tmp_2),
    tmp_1));
  tmp_j = _mm_mul_pd(tmp_j, _mm_set_pd(in3[10], in3[7]));
  tmp_n = _mm_mul_pd(tmp_j, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[129], _mm_mul_pd(_mm_mul_pd(tmp_n, tmp_2),
    tmp_1));
  tmp_l = _mm_set_pd(in3[11], in3[9]);
  tmp_r = _mm_mul_pd(tmp_k, tmp_l);
  tmp_o = _mm_mul_pd(tmp_r, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[131], _mm_mul_pd(_mm_mul_pd(tmp_o, tmp_2),
    tmp_1));
  tmp_3 = _mm_mul_pd(tmp_3, tmp_l);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[133], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_9), tmp_2), tmp_1));
  tmp_s = _mm_set1_pd(in3[10]);
  tmp_1g = _mm_loadu_pd(&in3[5]);
  tmp_s = _mm_mul_pd(tmp_1g, tmp_s);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[135], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_s, tmp_9), tmp_2), tmp_1));
  tmp_w = _mm_set_pd(in3[6], in3[7]);
  tmp_t = _mm_mul_pd(tmp_w, tmp_l);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[137], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_t, tmp_9), tmp_2), tmp_1));
  proc_control_B.in3_p[139] = in3[7] * in1[11];
  tmp_x = _mm_set_pd(in3[7], in3[8]);
  tmp_l = _mm_mul_pd(tmp_x, tmp_l);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[140], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_l, tmp_9), tmp_2), tmp_1));
  tmp_p = _mm_mul_pd(_mm_set_pd(in3[3], in3[8]), _mm_set_pd(in3[7], in3[10]));
  _mm_storeu_pd(&proc_control_B.in3_p[142], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_p, tmp_9), tmp_1d), tmp_1));
  tmp_k = _mm_mul_pd(tmp_k, tmp_i);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[144], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_9), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[146], _mm_mul_pd(_mm_mul_pd(tmp_m, tmp_6),
    tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[148], _mm_mul_pd(_mm_mul_pd(tmp_n, tmp_6),
    tmp_1));
  proc_control_B.in3_p[150] = in3[9] * in1[11];
  _mm_storeu_pd(&proc_control_B.in3_p[151], _mm_mul_pd(_mm_mul_pd(tmp_o, tmp_6),
    tmp_1));
  tmp_n = _mm_loadu_pd(&in3[4]);
  tmp_4 = _mm_mul_pd(_mm_mul_pd(tmp_n, tmp_4), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[153], _mm_mul_pd(_mm_mul_pd(tmp_4, tmp_6),
    tmp_1));
  tmp_19 = _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_8), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[155], _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_6),
    tmp_1));
  tmp_c = _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_c), tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[157], _mm_mul_pd(_mm_mul_pd(tmp_c, tmp_6),
    tmp_1));
  proc_control_B.in3_p[159] = proc_control_B.in3_tmp * in3[30] * in3[32] * in3[0];
  proc_control_B.in3_p[160] = proc_control_B.t23_b;
  _mm_storeu_pd(&proc_control_B.in3_p[161], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_p, tmp_1b), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[163], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_2), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[165], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_q, tmp_2), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[167], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_2), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[169], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_r, tmp_2), tmp_6), tmp_1));
  proc_control_B.in3_p[171] = in3[4] * in1[12];
  _mm_storeu_pd(&proc_control_B.in3_p[172], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_2), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[174], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_s, tmp_2), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[176], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_t, tmp_2), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[178], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_l, tmp_2), tmp_6), tmp_1));
  proc_control_B.in3_p[180] = proc_control_B.t25_g;
  tmp_i = _mm_mul_pd(_mm_set_pd(in3[10], in3[8]), tmp_h);
  tmp_k = _mm_mul_pd(tmp_i, tmp_9);
  tmp_j = _mm_mul_pd(tmp_k, tmp_2);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[181], _mm_mul_pd(tmp_j, tmp_1));
  tmp_3 = _mm_mul_pd(tmp_u, tmp_h);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[183], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_3, tmp_9), tmp_1d), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[185], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_6),
    tmp_1));
  tmp_k = _mm_mul_pd(_mm_set_pd(in3[9], in3[5]), tmp_d);
  _mm_storeu_pd(&proc_control_B.in3_p[187], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_9), tmp_2), tmp_1));
  tmp_q = _mm_set_pd(in3[33], in3[34]);
  _mm_storeu_pd(&proc_control_B.in3_p[189], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_q), tmp_1b), tmp_1d), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[191], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_2), tmp_6), tmp_1));
  tmp_r = _mm_mul_pd(tmp_g, tmp_1e);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[193], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_r, tmp_e), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[195], _mm_mul_pd(tmp_1f, tmp_1));
  tmp_u = _mm_set_pd(in3[31], in3[32]);
  _mm_storeu_pd(&proc_control_B.in3_p[197], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1g, tmp_1c), tmp_9), tmp_u), tmp_1));
  proc_control_B.in3_p[199] = proc_control_B.t27_f;
  _mm_storeu_pd(&proc_control_B.in3_p[200], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[9], in3[7]), tmp_f), tmp_9), tmp_1d), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[202], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, tmp_d), tmp_1b), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[204], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_n, tmp_f), tmp_1b), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[206], _mm_mul_pd(_mm_mul_pd(tmp_1h, tmp_6),
    tmp_1));
  proc_control_B.in3_p[208] = in3[9] * in3[34] * in3[31] * in3[32] * in3[0];
  proc_control_B.in3_p[209] = in3[11] * in1[12];
  _mm_storeu_pd(&proc_control_B.in3_p[210], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_v, tmp_1c), tmp_1b), tmp_1d), tmp_1));
  tmp_v = _mm_mul_pd(_mm_set_pd(in3[6], in3[4]), tmp_a);
  _mm_storeu_pd(&proc_control_B.in3_p[212], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_v, tmp_2), tmp_6), tmp_1));
  tmp_1f = _mm_mul_pd(tmp_h, tmp_1c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[214], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1f, tmp_9), tmp_u), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[216], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1f, tmp_e), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[218], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_q, tmp_a), tmp_1b), tmp_1d), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[220], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_d, tmp_a), tmp_1b), tmp_6), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[222], _mm_sub_pd(_mm_set_pd(in3[7], in3[3]),
    tmp_1e));
  _mm_storeu_pd(&proc_control_B.in3_p[224], _mm_sub_pd(_mm_set_pd(in3[30], in3
    [11]), _mm_set_pd(in3[0], in3[35])));
  _mm_storeu_pd(&proc_control_B.in3_p[226], _mm_sub_pd(tmp_1d, tmp_1));
  proc_control_B.in3_p[228] = -(in3[0] * in3[13] * in1[7]);
  proc_control_B.in3_p[229] = -(in3[0] * in3[14] * in1[8]);
  proc_control_B.in3_p[230] = -(in3[0] * in3[12] * in1[9]);
  tmp_d = _mm_set1_pd(proc_control_B.t58);
  tmp_1f = _mm_mul_pd(tmp_1i, tmp_w);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[231], _mm_mul_pd(tmp_1f, tmp_d));
  tmp_q = _mm_set_pd(in3[6], in3[8]);
  tmp_b = _mm_mul_pd(tmp_b, tmp_q);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[233], _mm_mul_pd(tmp_b, tmp_d));
  tmp_1h = _mm_mul_pd(tmp_n, tmp_x);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[235], _mm_mul_pd(tmp_1h, tmp_d));
  tmp_h = _mm_mul_pd(tmp_1i, tmp_8);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[237], _mm_mul_pd(tmp_h, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[239], _mm_mul_pd(tmp_y, tmp_d));
  proc_control_B.in3_p[241] = in3[4] * in3[11] * proc_control_B.t58;
  proc_control_B.in3_p[242] = in1[10] * in3[12];
  _mm_storeu_pd(&proc_control_B.in3_p[243], _mm_mul_pd(tmp_s, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[245], _mm_mul_pd(tmp_t, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[247], _mm_mul_pd(tmp_l, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[249], _mm_mul_pd(_mm_mul_pd(tmp_x,
    _mm_set_pd(in3[33], in3[10])), tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[251], _mm_mul_pd(tmp_i, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[253], _mm_mul_pd(tmp_r, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[255], _mm_mul_pd(tmp_k, tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[257], _mm_mul_pd(_mm_mul_pd(tmp_g, tmp_1c),
    tmp_d));
  _mm_storeu_pd(&proc_control_B.in3_p[259], _mm_mul_pd(tmp_v, tmp_d));
  tmp_i = _mm_set_pd(in3[33], in3[7]);
  _mm_storeu_pd(&proc_control_B.in3_p[261], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_f),
    tmp_d));
  proc_control_B.in3_p[263] = proc_control_B.t34_p;
  proc_control_B.in3_p[264] = -proc_control_B.t129;
  proc_control_B.in3_p[265] = -proc_control_B.t130;
  proc_control_B.in3_p[266] = -proc_control_B.t131;
  _mm_storeu_pd(&proc_control_B.in3_p[267], _mm_mul_pd(_mm_mul_pd(tmp_1e, tmp_a),
    tmp_d));
  proc_control_B.in3_p[269] = -proc_control_B.t133;
  proc_control_B.in3_p[270] = -proc_control_B.dv47[0];
  proc_control_B.in3_p[271] = -proc_control_B.dv47[1];
  tmp_d = _mm_set1_pd(in3[37]);
  _mm_storeu_pd(&proc_control_B.in3_p[272], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_17, _mm_set1_pd(in3[12])), tmp_d), tmp_1), tmp_0));
  proc_control_B.in3_p[274] = proc_control_B.t35;
  tmp_v = _mm_set_pd(4.0, 2.0);
  tmp_k = _mm_set1_pd(in1[4]);
  _mm_storeu_pd(&proc_control_B.in3_p[275], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, _mm_set_pd(in3[12], in3[13])), tmp_d), tmp_1), tmp_v));
  _mm_storeu_pd(&proc_control_B.in3_p[277], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in1[5], in1[6]), tmp_15), tmp_d), tmp_1), tmp_0));
  tmp_m = _mm_set_pd(in3[12], in3[14]);
  _mm_storeu_pd(&proc_control_B.in3_p[279], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_17, tmp_m), tmp_d), tmp_1), tmp_v));
  _mm_storeu_pd(&proc_control_B.in3_p[281], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in1[6], in1[4]), _mm_set1_pd(in3[13])), tmp_d), tmp_1),
    _mm_set_pd(2.0, 4.0)));
  _mm_storeu_pd(&proc_control_B.in3_p[283], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(in1[5]), _mm_set_pd(in3[13], in3[14])), tmp_d),
    tmp_1), tmp_v));
  proc_control_B.in3_p[285] = in1[11] * in3[13];
  tmp_v = _mm_set_pd(in1[3], in1[6]);
  _mm_storeu_pd(&proc_control_B.in3_p[286], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_v, tmp_m), tmp_d), tmp_1), tmp_0));
  tmp_m = _mm_set1_pd(in1[3]);
  _mm_storeu_pd(&proc_control_B.in3_p[288], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_m, tmp_16), tmp_d), tmp_1), tmp_0));
  tmp_16 = _mm_mul_pd(tmp_18, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[290], _mm_mul_pd(tmp_16, tmp_2));
  tmp_d = _mm_mul_pd(tmp_5, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[292], _mm_mul_pd(tmp_d, tmp_2));
  tmp_15 = _mm_mul_pd(tmp_7, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[294], _mm_mul_pd(tmp_15, tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[296], _mm_mul_pd(tmp_16, tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[298], _mm_mul_pd(tmp_d, tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[300], _mm_mul_pd(tmp_15, tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[302], _mm_mul_pd(tmp_1j, tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[304], _mm_mul_pd(tmp_z, tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[306], _mm_mul_pd(tmp_1k, tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[308], _mm_mul_pd(_mm_mul_pd(tmp_1l, tmp_9),
    tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[310], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[5], in3[8]), tmp_8), tmp_1e), tmp_9), tmp_u));
  proc_control_B.in3_p[312] = proc_control_B.in3_tmp_i * in3[31] * in3[32];
  proc_control_B.in3_p[313] = proc_control_B.t39_h;
  tmp_10 = _mm_mul_pd(_mm_mul_pd(tmp_n, tmp_10), tmp_f);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[314], _mm_mul_pd(_mm_mul_pd(tmp_10, tmp_9),
    tmp_1d));
  _mm_storeu_pd(&proc_control_B.in3_p[316], _mm_mul_pd(_mm_mul_pd(tmp_10, tmp_1b),
    tmp_6));
  proc_control_B.in3_tmp_i = in3[11] * in3[33];
  proc_control_B.in3_p[318] = proc_control_B.in3_tmp_i * in3[34] * in3[30] *
    in3[31];
  proc_control_B.in3_p[319] = in1[12] * in3[14];
  _mm_storeu_pd(&proc_control_B.in3_p[320], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[7], in3[4]), _mm_set_pd(in3[33], in3[6])), tmp_a),
    tmp_e), tmp_u));
  tmp_16 = _mm_mul_pd(tmp_3, tmp_1c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[322], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp_9),
    tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[324], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_r, tmp_1c), tmp_e), tmp_u));
  _mm_storeu_pd(&proc_control_B.in3_p[326], _mm_mul_pd(tmp_11, tmp_6));
  proc_control_B.in3_tmp = in3[3] * in3[34] * in3[35];
  proc_control_B.in3_p[328] = proc_control_B.in3_tmp * in3[31] * in3[32];
  proc_control_B.in3_p[329] = proc_control_B.t41_m;
  tmp_15 = _mm_mul_pd(tmp_1f, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[330], _mm_mul_pd(_mm_mul_pd(tmp_15, tmp_2),
    tmp_6));
  tmp_10 = _mm_mul_pd(tmp_b, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3_p[332], _mm_mul_pd(_mm_mul_pd(tmp_10, tmp_2),
    tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[334], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1h, tmp_9), tmp_2), tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[336], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_h, tmp_9), tmp_2), tmp_6));
  proc_control_B.in3_p[338] = proc_control_B.t42_f;
  _mm_storeu_pd(&proc_control_B.in3_p[339], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_y, tmp_9), tmp_2), tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[341], _mm_mul_pd(_mm_mul_pd(tmp_4, tmp_2),
    tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[343], _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_2),
    tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[345], _mm_mul_pd(_mm_mul_pd(tmp_c, tmp_2),
    tmp_6));
  _mm_storeu_pd(&proc_control_B.in3_p[347], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1a, tmp_9), tmp_2), tmp_6));
  proc_control_B.in3_p[349] = proc_control_B.t43_b;
  _mm_storeu_pd(&proc_control_B.in3_p[350], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_q), _mm_loadu_pd(&in3[10])), tmp_9), tmp_1));
  _mm_storeu_pd(&proc_control_B.in3_p[352], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[7], in3[5]), tmp_i), _mm_set_pd(in3[30], in3[9])),
    tmp_1b), _mm_set_pd(in3[32], in3[0])));
  _mm_storeu_pd(&proc_control_B.in3_p[354], _mm_mul_pd(tmp_j, tmp_6));
  proc_control_B.in3_p[356] = proc_control_B.in3_tmp_i * in3[30] * in3[31] *
    in3[32];
  proc_control_B.in3_p[357] = proc_control_B.t44_e;
  tmp_2 = _mm_set1_pd(proc_control_B.t57_p);
  _mm_storeu_pd(&proc_control_B.in3_p[358], _mm_mul_pd(tmp_18, tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[360], _mm_mul_pd(tmp_5, tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[362], _mm_mul_pd(tmp_7, tmp_2));
  proc_control_B.in3_p[364] = proc_control_B.t45_n;
  _mm_storeu_pd(&proc_control_B.in3_p[365], _mm_mul_pd(tmp_1l, tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[367], _mm_mul_pd(tmp_12, tmp_2));
  proc_control_B.in3_p[369] = rt_powd_snf(in3[12], 3.0);
  _mm_storeu_pd(&proc_control_B.in3_p[370], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp_a),
    tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[372], _mm_mul_pd(tmp_16, tmp_2));
  proc_control_B.in3_p[374] = proc_control_B.t47;
  proc_control_B.in3_p[375] = proc_control_B.t45_n * proc_control_B.t45_n;
  proc_control_B.in3_p[376] = rt_powd_snf(in3[13], 3.0);
  proc_control_B.in3_p[377] = proc_control_B.t50;
  proc_control_B.in3_p[378] = proc_control_B.t47 * proc_control_B.t47;
  proc_control_B.in3_p[379] = proc_control_B.in3_tmp * proc_control_B.t57_p;
  proc_control_B.in3_p[380] = rt_powd_snf(in3[14], 3.0);
  proc_control_B.in3_p[381] = in3[33] * in3[34] * in3[35] * proc_control_B.t57_p;
  proc_control_B.in3_p[382] = proc_control_B.t50 * proc_control_B.t50;
  _mm_storeu_pd(&proc_control_B.in3_p[383], _mm_mul_pd(tmp_15, tmp_2));
  _mm_storeu_pd(&proc_control_B.in3_p[385], _mm_mul_pd(tmp_10, tmp_2));
  proc_control_B.in3_p[387] = in3[4] * in3[8] * in3[30] * proc_control_B.t57_p;
  proc_control_B.in3_p[388] = proc_control_B.t57_p;
  proc_control_B.in3_p[389] = proc_control_B.t58;
  proc_control_B.in3_p[390] = proc_control_B.t57_p * proc_control_B.t57_p;
  proc_control_B.in3_p[391] = rt_powd_snf(in3[0], 5.0);
  proc_control_B.in3_p[392] = proc_control_B.t15_cx * 2.0;
  proc_control_B.in3_p[393] = proc_control_B.t17_d * 2.0;
  proc_control_B.in3_p[394] = proc_control_B.t19_a2 * 2.0;
  proc_control_B.in3_p[395] = proc_control_B.t23_b * 2.0;
  proc_control_B.in3_p[396] = proc_control_B.t25_g * 2.0;
  proc_control_B.in3_p[397] = proc_control_B.t27_f * 2.0;
  tmp_10 = _mm_loadu_pd(&in1[5]);
  _mm_storeu_pd(&proc_control_B.in3_p[398], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_10),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[400], _mm_mul_pd(_mm_mul_pd(_mm_set_pd
    (in1[3], in1[5]), _mm_set_pd(in1[4], in1[6])), tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[402], _mm_mul_pd(_mm_mul_pd(tmp_m, tmp_10),
    tmp_0));
  tmp_10 = _mm_set1_pd(in1[7]);
  _mm_storeu_pd(&proc_control_B.in3_p[404], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp_10),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[406], _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_10),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[408], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp_13),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[410], _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_13),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[412], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp_14),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[414], _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_14),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3_p[416], _mm_mul_pd(_mm_loadu_pd(&in3[27]),
    _mm_set_pd(fabs(in1[11]), fabs(in1[10]))));
  _mm_storeu_pd(&proc_control_B.in3_p[418], _mm_mul_pd(_mm_set_pd(in3[24], in3
    [29]), _mm_set_pd(fabs(in1[7]), fabs(in1[12]))));
  _mm_storeu_pd(&proc_control_B.in3_p[420], _mm_mul_pd(_mm_loadu_pd(&in3[25]),
    _mm_set_pd(fabs(in1[9]), fabs(in1[8]))));
  _mm_storeu_pd(&proc_control_B.in3_p[422], _mm_mul_pd(tmp_1, _mm_set_pd
    (proc_control_B.t34_p, proc_control_B.t33_c)));
  _mm_storeu_pd(&proc_control_B.in3_p[424], _mm_mul_pd(tmp_1, _mm_set_pd
    (proc_control_B.t37_a, proc_control_B.t35)));
  _mm_storeu_pd(&proc_control_B.in3_p[426], _mm_mul_pd(tmp_1, _mm_set_pd
    (proc_control_B.t39_h, proc_control_B.t38_n)));
  _mm_storeu_pd(&proc_control_B.in3_p[428], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp),
    tmp_10));
  proc_control_B.in3_p[430] = in1[7];
  proc_control_B.in3_p[431] = in1[8];
  proc_control_B.in3_p[432] = in1[9];
  proc_control_ft_1(proc_control_B.in3_p, Anq);
}

real_T proc_control::proc_control_norm_p(const real_T x[169])
{
  real_T y;
  int32_T b_j;
  boolean_T exitg1;
  y = 0.0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j < 13)) {
    real_T s;
    s = 0.0;
    for (int32_T b_i = 0; b_i < 13; b_i++) {
      s += fabs(x[13 * b_j + b_i]);
    }

    if (rtIsNaN(s)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (s > y) {
        y = s;
      }

      b_j++;
    }
  }

  return y;
}

void proc_control::proc_control_mpower(const real_T a[169], real_T b, real_T c
  [169])
{
  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.e = fabs(b);
  if (proc_control_B.e <= 2.147483647E+9) {
    memcpy(&proc_control_B.a_c[0], &a[0], 169U * sizeof(real_T));
    proc_control_B.n_h = static_cast<int32_T>(proc_control_B.e);
    proc_control_B.n_e = static_cast<int32_T>(proc_control_B.e);
    proc_control_B.nbitson = 0;
    proc_control_B.nb = -1;
    while (proc_control_B.n_e > 0) {
      proc_control_B.nb++;
      if ((static_cast<uint32_T>(proc_control_B.n_e) & 1U) != 0U) {
        proc_control_B.nbitson++;
      }

      proc_control_B.n_e >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e) <= 2) {
      if (b == 2.0) {
        proc_control_B.nb = 0;
        for (proc_control_B.i10 = 0; proc_control_B.i10 < 13; proc_control_B.i10
             ++) {
          for (proc_control_B.i8 = 0; proc_control_B.i8 < 13; proc_control_B.i8
               ++) {
            proc_control_B.e = 0.0;
            proc_control_B.cBuffer_tmp = 0;
            for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                 proc_control_B.i9++) {
              proc_control_B.e += a[proc_control_B.cBuffer_tmp +
                proc_control_B.i8] * a[proc_control_B.i9 + proc_control_B.nb];
              proc_control_B.cBuffer_tmp += 13;
            }

            c[proc_control_B.i8 + proc_control_B.nb] = proc_control_B.e;
          }

          proc_control_B.nb += 13;
        }
      } else {
        proc_control_B.firstmult = false;
        for (proc_control_B.n_h = 0; proc_control_B.n_h < 169;
             proc_control_B.n_h++) {
          if (proc_control_B.firstmult || rtIsNaN(a[proc_control_B.n_h])) {
            proc_control_B.firstmult = true;
          }
        }

        if (proc_control_B.firstmult) {
          for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb
               ++) {
            c[proc_control_B.nb] = (rtNaN);
          }
        } else {
          memset(&c[0], 0, 169U * sizeof(real_T));
          proc_control_B.n_e = 0;
          for (proc_control_B.n_h = 0; proc_control_B.n_h < 13;
               proc_control_B.n_h++) {
            c[proc_control_B.n_e] = 1.0;
            proc_control_B.n_e += 14;
          }
        }
      }
    } else {
      proc_control_B.firstmult = true;
      proc_control_B.aBufferInUse = false;
      proc_control_B.cBufferInUse = ((static_cast<uint32_T>
        (proc_control_B.nbitson) & 1U) == 0U);
      proc_control_B.n_e = proc_control_B.nb - 1;
      for (proc_control_B.nbitson = 0; proc_control_B.nbitson <=
           proc_control_B.n_e; proc_control_B.nbitson++) {
        if ((static_cast<uint32_T>(proc_control_B.n_h) & 1U) != 0U) {
          if (proc_control_B.firstmult) {
            proc_control_B.firstmult = false;
            if (proc_control_B.cBufferInUse) {
              if (proc_control_B.aBufferInUse) {
                memcpy(&proc_control_B.cBuffer[0], &proc_control_B.aBuffer[0],
                       169U * sizeof(real_T));
              } else {
                memcpy(&proc_control_B.cBuffer[0], &proc_control_B.a_c[0], 169U *
                       sizeof(real_T));
              }
            } else if (proc_control_B.aBufferInUse) {
              memcpy(&c[0], &proc_control_B.aBuffer[0], 169U * sizeof(real_T));
            } else {
              memcpy(&c[0], &proc_control_B.a_c[0], 169U * sizeof(real_T));
            }
          } else {
            if (proc_control_B.aBufferInUse) {
              if (proc_control_B.cBufferInUse) {
                for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                     proc_control_B.nb++) {
                  proc_control_B.i10 = 0;
                  for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                       proc_control_B.i8++) {
                    proc_control_B.e = 0.0;
                    proc_control_B.cBuffer_tmp = 0;
                    for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                         proc_control_B.i9++) {
                      proc_control_B.e +=
                        proc_control_B.cBuffer[proc_control_B.cBuffer_tmp +
                        proc_control_B.nb] *
                        proc_control_B.aBuffer[proc_control_B.i9 +
                        proc_control_B.i10];
                      proc_control_B.cBuffer_tmp += 13;
                    }

                    c[proc_control_B.i10 + proc_control_B.nb] = proc_control_B.e;
                    proc_control_B.i10 += 13;
                  }
                }
              } else {
                for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                     proc_control_B.nb++) {
                  proc_control_B.i10 = 0;
                  for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                       proc_control_B.i8++) {
                    proc_control_B.e = 0.0;
                    proc_control_B.cBuffer_tmp = 0;
                    for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                         proc_control_B.i9++) {
                      proc_control_B.e += c[proc_control_B.cBuffer_tmp +
                        proc_control_B.nb] *
                        proc_control_B.aBuffer[proc_control_B.i9 +
                        proc_control_B.i10];
                      proc_control_B.cBuffer_tmp += 13;
                    }

                    proc_control_B.cBuffer[proc_control_B.i10 +
                      proc_control_B.nb] = proc_control_B.e;
                    proc_control_B.i10 += 13;
                  }
                }
              }
            } else if (proc_control_B.cBufferInUse) {
              for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                   proc_control_B.nb++) {
                proc_control_B.i10 = 0;
                for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                     proc_control_B.i8++) {
                  proc_control_B.e = 0.0;
                  proc_control_B.cBuffer_tmp = 0;
                  for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                       proc_control_B.i9++) {
                    proc_control_B.e +=
                      proc_control_B.cBuffer[proc_control_B.cBuffer_tmp +
                      proc_control_B.nb] * proc_control_B.a_c[proc_control_B.i9
                      + proc_control_B.i10];
                    proc_control_B.cBuffer_tmp += 13;
                  }

                  c[proc_control_B.i10 + proc_control_B.nb] = proc_control_B.e;
                  proc_control_B.i10 += 13;
                }
              }
            } else {
              for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                   proc_control_B.nb++) {
                proc_control_B.i10 = 0;
                for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                     proc_control_B.i8++) {
                  proc_control_B.e = 0.0;
                  proc_control_B.cBuffer_tmp = 0;
                  for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                       proc_control_B.i9++) {
                    proc_control_B.e += c[proc_control_B.cBuffer_tmp +
                      proc_control_B.nb] * proc_control_B.a_c[proc_control_B.i9
                      + proc_control_B.i10];
                    proc_control_B.cBuffer_tmp += 13;
                  }

                  proc_control_B.cBuffer[proc_control_B.i10 + proc_control_B.nb]
                    = proc_control_B.e;
                  proc_control_B.i10 += 13;
                }
              }
            }

            proc_control_B.cBufferInUse = !proc_control_B.cBufferInUse;
          }
        }

        proc_control_B.n_h >>= 1;
        if (proc_control_B.aBufferInUse) {
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i10 = 0;
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.ed2 = 0.0;
              proc_control_B.cBuffer_tmp = 0;
              for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                   proc_control_B.i9++) {
                proc_control_B.ed2 +=
                  proc_control_B.aBuffer[proc_control_B.cBuffer_tmp +
                  proc_control_B.nb] * proc_control_B.aBuffer[proc_control_B.i9
                  + proc_control_B.i10];
                proc_control_B.cBuffer_tmp += 13;
              }

              proc_control_B.a_c[proc_control_B.i10 + proc_control_B.nb] =
                proc_control_B.ed2;
              proc_control_B.i10 += 13;
            }
          }
        } else {
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i10 = 0;
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.e = 0.0;
              proc_control_B.cBuffer_tmp = 0;
              for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                   proc_control_B.i9++) {
                proc_control_B.e +=
                  proc_control_B.a_c[proc_control_B.cBuffer_tmp +
                  proc_control_B.nb] * proc_control_B.a_c[proc_control_B.i9 +
                  proc_control_B.i10];
                proc_control_B.cBuffer_tmp += 13;
              }

              proc_control_B.aBuffer[proc_control_B.i10 + proc_control_B.nb] =
                proc_control_B.e;
              proc_control_B.i10 += 13;
            }
          }
        }

        proc_control_B.aBufferInUse = !proc_control_B.aBufferInUse;
      }

      proc_control_B.nb = 0;
      for (proc_control_B.i10 = 0; proc_control_B.i10 < 13; proc_control_B.i10++)
      {
        for (proc_control_B.i8 = 0; proc_control_B.i8 < 13; proc_control_B.i8++)
        {
          proc_control_B.e = 0.0;
          proc_control_B.ed2 = 0.0;
          proc_control_B.cBuffer_tmp = 0;
          for (proc_control_B.i9 = 0; proc_control_B.i9 < 13; proc_control_B.i9
               ++) {
            proc_control_B.n_h = proc_control_B.i9 + proc_control_B.nb;
            _mm_storeu_pd(&proc_control_B.dv33[0], _mm_add_pd(_mm_mul_pd
              (_mm_set_pd(proc_control_B.a_c[proc_control_B.n_h],
                          proc_control_B.aBuffer[proc_control_B.n_h]),
               _mm_set1_pd(proc_control_B.cBuffer[proc_control_B.cBuffer_tmp +
                           proc_control_B.i8])), _mm_set_pd(proc_control_B.ed2,
              proc_control_B.e)));
            proc_control_B.e = proc_control_B.dv33[0];
            proc_control_B.ed2 = proc_control_B.dv33[1];
            proc_control_B.cBuffer_tmp += 13;
          }

          proc_control_B.cBuffer_tmp = proc_control_B.i8 + proc_control_B.nb;
          proc_control_B.cBuffer_p[proc_control_B.cBuffer_tmp] =
            proc_control_B.ed2;
          proc_control_B.cBuffer_k[proc_control_B.cBuffer_tmp] =
            proc_control_B.e;
        }

        proc_control_B.nb += 13;
      }

      for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb++)
      {
        if (proc_control_B.firstmult) {
          if (proc_control_B.aBufferInUse) {
            c[proc_control_B.nb] = proc_control_B.aBuffer[proc_control_B.nb];
          } else {
            c[proc_control_B.nb] = proc_control_B.a_c[proc_control_B.nb];
          }
        } else if (proc_control_B.aBufferInUse) {
          c[proc_control_B.nb] = proc_control_B.cBuffer_k[proc_control_B.nb];
        } else {
          c[proc_control_B.nb] = proc_control_B.cBuffer_p[proc_control_B.nb];
        }
      }
    }
  } else {
    memcpy(&proc_control_B.a_c[0], &a[0], 169U * sizeof(real_T));
    if ((!rtIsInf(b)) && (!rtIsNaN(b))) {
      proc_control_B.firstmult = true;
      int32_T exitg1;
      do {
        exitg1 = 0;
        proc_control_B.ed2 = floor(proc_control_B.e / 2.0);
        if (2.0 * proc_control_B.ed2 != proc_control_B.e) {
          if (proc_control_B.firstmult) {
            memcpy(&c[0], &proc_control_B.a_c[0], 169U * sizeof(real_T));
            proc_control_B.firstmult = false;
          } else {
            for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                 proc_control_B.nb++) {
              proc_control_B.i10 = 0;
              for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                   proc_control_B.i8++) {
                proc_control_B.e = 0.0;
                proc_control_B.cBuffer_tmp = 0;
                for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                     proc_control_B.i9++) {
                  proc_control_B.e += c[proc_control_B.cBuffer_tmp +
                    proc_control_B.nb] * proc_control_B.a_c[proc_control_B.i9 +
                    proc_control_B.i10];
                  proc_control_B.cBuffer_tmp += 13;
                }

                proc_control_B.cBuffer[proc_control_B.i10 + proc_control_B.nb] =
                  proc_control_B.e;
                proc_control_B.i10 += 13;
              }
            }

            memcpy(&c[0], &proc_control_B.cBuffer[0], 169U * sizeof(real_T));
          }
        }

        if (proc_control_B.ed2 == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e = proc_control_B.ed2;
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i10 = 0;
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.ed2 = 0.0;
              proc_control_B.cBuffer_tmp = 0;
              for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                   proc_control_B.i9++) {
                proc_control_B.ed2 +=
                  proc_control_B.a_c[proc_control_B.cBuffer_tmp +
                  proc_control_B.nb] * proc_control_B.a_c[proc_control_B.i9 +
                  proc_control_B.i10];
                proc_control_B.cBuffer_tmp += 13;
              }

              proc_control_B.cBuffer[proc_control_B.i10 + proc_control_B.nb] =
                proc_control_B.ed2;
              proc_control_B.i10 += 13;
            }
          }

          memcpy(&proc_control_B.a_c[0], &proc_control_B.cBuffer[0], 169U *
                 sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb++)
      {
        c[proc_control_B.nb] = (rtNaN);
      }
    }
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

real_T proc_control::proc_control_log2(real_T x)
{
  real_T f;
  int32_T eint;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!rtIsInf(x)) && (!rtIsNaN(x))) {
    real_T t;
    t = frexp(x, &eint);
    if (t == 0.5) {
      f = static_cast<real_T>(eint) - 1.0;
    } else if ((eint == 1) && (t < 0.75)) {
      f = log(2.0 * t) / 0.69314718055994529;
    } else {
      f = log(t) / 0.69314718055994529 + static_cast<real_T>(eint);
    }
  } else {
    f = x;
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
  return f;
}

void proc_control::proc_control_padeApproximation(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  __m128d tmp_0;
  real_T A6_0[169];
  real_T V[169];
  real_T d;
  int32_T g_k;
  int32_T g_k_0;
  int32_T iy;
  int32_T jA;
  int32_T jBcol;
  int32_T jj;
  int32_T jp1j;
  int32_T kAcol;
  int8_T b_ipiv[13];
  if (m == 3) {
    memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 60.0;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        A6_0[g_k_0 + jj] = d;
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj <= 166; jj += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[jj]);
      _mm_storeu_pd(&F[jj], tmp_0);

      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&V[jj], _mm_mul_pd(_mm_set1_pd(12.0), _mm_loadu_pd(&A2[jj])));
    }

    for (jj = 168; jj < 169; jj++) {
      F[jj] = A6_0[jj];

      // Start for MATLABSystem: '<S71>/MATLAB System'
      V[jj] = 12.0 * A2[jj];
    }

    d = 120.0;
  } else if (m == 5) {
    for (jj = 0; jj <= 166; jj += 2) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&F[jj], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(420.0),
        _mm_loadu_pd(&A2[jj])), _mm_loadu_pd(&A4[jj])));
    }

    for (jj = 168; jj < 169; jj++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      F[jj] = 420.0 * A2[jj] + A4[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 15120.0;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        A6_0[g_k_0 + jj] = d;
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj <= 166; jj += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[jj]);
      _mm_storeu_pd(&F[jj], tmp_0);

      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&V[jj], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(30.0),
        _mm_loadu_pd(&A4[jj])), _mm_mul_pd(_mm_set1_pd(3360.0), _mm_loadu_pd
        (&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      F[jj] = A6_0[jj];

      // Start for MATLABSystem: '<S71>/MATLAB System'
      V[jj] = 30.0 * A4[jj] + 3360.0 * A2[jj];
    }

    d = 30240.0;
  } else if (m == 7) {
    for (jj = 0; jj <= 166; jj += 2) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&F[jj], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(1512.0),
        _mm_loadu_pd(&A4[jj])), _mm_loadu_pd(&A6[jj])), _mm_mul_pd(_mm_set1_pd
        (277200.0), _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      F[jj] = (1512.0 * A4[jj] + A6[jj]) + 277200.0 * A2[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 8.64864E+6;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        A6_0[g_k_0 + jj] = d;
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj <= 166; jj += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[jj]);
      _mm_storeu_pd(&F[jj], tmp_0);

      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&V[jj], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(56.0),
        _mm_loadu_pd(&A6[jj])), _mm_mul_pd(_mm_set1_pd(25200.0), _mm_loadu_pd
        (&A4[jj]))), _mm_mul_pd(_mm_set1_pd(1.99584E+6), _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      F[jj] = A6_0[jj];

      // Start for MATLABSystem: '<S71>/MATLAB System'
      V[jj] = (56.0 * A6[jj] + 25200.0 * A4[jj]) + 1.99584E+6 * A2[jj];
    }

    d = 1.729728E+7;
  } else if (m == 9) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A6[jA + g_k_0] * A2[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        V[g_k_0 + jj] = d;
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj <= 166; jj += 2) {
      tmp_0 = _mm_loadu_pd(&V[jj]);

      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&F[jj], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd
        (_mm_set1_pd(3960.0), _mm_loadu_pd(&A6[jj])), tmp_0), _mm_mul_pd
        (_mm_set1_pd(2.16216E+6), _mm_loadu_pd(&A4[jj]))), _mm_mul_pd
        (_mm_set1_pd(3.027024E+8), _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      F[jj] = ((3960.0 * A6[jj] + V[jj]) + 2.16216E+6 * A4[jj]) + 3.027024E+8 *
        A2[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 8.8216128E+9;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        A6_0[g_k_0 + jj] = d;
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj <= 166; jj += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[jj]);
      _mm_storeu_pd(&F[jj], tmp_0);

      // Start for MATLABSystem: '<S71>/MATLAB System'
      tmp_0 = _mm_loadu_pd(&V[jj]);
      _mm_storeu_pd(&V[jj], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd
        (_mm_set1_pd(90.0), tmp_0), _mm_mul_pd(_mm_set1_pd(110880.0),
        _mm_loadu_pd(&A6[jj]))), _mm_mul_pd(_mm_set1_pd(3.027024E+7),
        _mm_loadu_pd(&A4[jj]))), _mm_mul_pd(_mm_set1_pd(2.0756736E+9),
        _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      F[jj] = A6_0[jj];

      // Start for MATLABSystem: '<S71>/MATLAB System'
      V[jj] = ((90.0 * V[jj] + 110880.0 * A6[jj]) + 3.027024E+7 * A4[jj]) +
        2.0756736E+9 * A2[jj];
    }

    d = 1.76432256E+10;
  } else {
    for (jj = 0; jj <= 166; jj += 2) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      _mm_storeu_pd(&F[jj], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (3.352212864E+10), _mm_loadu_pd(&A6[jj])), _mm_mul_pd(_mm_set1_pd
        (1.05594705216E+13), _mm_loadu_pd(&A4[jj]))), _mm_mul_pd(_mm_set1_pd
        (1.1873537964288E+15), _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      F[jj] = (3.352212864E+10 * A6[jj] + 1.05594705216E+13 * A4[jj]) +
        1.1873537964288E+15 * A2[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 3.238237626624E+16;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    for (jj = 0; jj <= 166; jj += 2) {
      _mm_storeu_pd(&V[jj], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(16380.0),
        _mm_loadu_pd(&A4[jj])), _mm_loadu_pd(&A6[jj])), _mm_mul_pd(_mm_set1_pd
        (4.08408E+7), _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      V[jj] = (16380.0 * A4[jj] + A6[jj]) + 4.08408E+7 * A2[jj];
    }

    for (jj = 0; jj < 13; jj++) {
      g_k = 0;
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          d += A6[jA + jj] * V[iy + g_k];
          jA += 13;
        }

        jA = g_k + jj;
        A6_0[jA] = F[jA] + d;
        g_k += 13;
      }
    }

    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        d = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A[jA + g_k_0] * A6_0[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        F[g_k_0 + jj] = d;
      }

      jj += 13;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    for (jj = 0; jj <= 166; jj += 2) {
      _mm_storeu_pd(&A6_0[jj], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (182.0), _mm_loadu_pd(&A6[jj])), _mm_mul_pd(_mm_set1_pd(960960.0),
        _mm_loadu_pd(&A4[jj]))), _mm_mul_pd(_mm_set1_pd(1.32324192E+9),
        _mm_loadu_pd(&A2[jj]))));
    }

    for (jj = 168; jj < 169; jj++) {
      A6_0[jj] = (182.0 * A6[jj] + 960960.0 * A4[jj]) + 1.32324192E+9 * A2[jj];
    }

    for (jj = 0; jj < 13; jj++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      g_k = 0;
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        d = 0.0;

        // Start for MATLABSystem: '<S71>/MATLAB System'
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          d += A6[jA + jj] * A6_0[iy + g_k];
          jA += 13;
        }

        // Start for MATLABSystem: '<S71>/MATLAB System'
        iy = g_k + jj;
        V[iy] = ((A6[iy] * 6.704425728E+11 + d) + A4[iy] * 1.29060195264E+14) +
          A2[iy] * 7.7717703038976E+15;
        g_k += 13;
      }
    }

    d = 6.476475253248E+16;
  }

  g_k_0 = 0;
  for (g_k = 0; g_k < 13; g_k++) {
    V[g_k_0] += d;
    g_k_0 += 14;
  }

  for (jA = 0; jA <= 166; jA += 2) {
    __m128d tmp;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    tmp_0 = _mm_loadu_pd(&V[jA]);
    tmp = _mm_loadu_pd(&F[jA]);
    _mm_storeu_pd(&V[jA], _mm_sub_pd(tmp_0, tmp));
    _mm_storeu_pd(&F[jA], _mm_mul_pd(_mm_set1_pd(2.0), tmp));
  }

  for (jA = 168; jA < 169; jA++) {
    d = F[jA];
    V[jA] -= d;
    F[jA] = 2.0 * d;
  }

  for (jj = 0; jj < 13; jj++) {
    b_ipiv[jj] = static_cast<int8_T>(jj + 1);
  }

  for (g_k = 0; g_k < 12; g_k++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    g_k_0 = g_k * 14 + 2;
    jj = g_k * 14;
    kAcol = 13 - g_k;
    iy = 1;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    d = fabs(V[jj]);
    for (jA = 2; jA <= kAcol; jA++) {
      real_T s;
      s = fabs(V[(g_k_0 + jA) - 3]);
      if (s > d) {
        iy = jA;
        d = s;
      }
    }

    if (V[(g_k_0 + iy) - 3] != 0.0) {
      if (iy - 1 != 0) {
        jp1j = g_k + iy;
        b_ipiv[g_k] = static_cast<int8_T>(jp1j);
        for (jA = 0; jA < 13; jA++) {
          kAcol = jA * 13 + g_k;
          d = V[kAcol];
          iy = (jA * 13 + jp1j) - 1;
          V[kAcol] = V[iy];
          V[iy] = d;
        }
      }

      iy = g_k_0 - g_k;
      for (jA = g_k_0; jA <= iy + 11; jA++) {
        V[jA - 1] /= V[jj];
      }
    }

    jA = jj;
    jj += 13;
    iy = 12 - g_k;
    for (jp1j = 0; jp1j < iy; jp1j++) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      d = V[jp1j * 13 + jj];
      if (d != 0.0) {
        // Start for MATLABSystem: '<S71>/MATLAB System'
        kAcol = jA + 15;
        jBcol = (jA - g_k) + 26;
        for (int32_T ijA = kAcol; ijA <= jBcol; ijA++) {
          // Start for MATLABSystem: '<S71>/MATLAB System'
          V[ijA - 1] += V[((g_k_0 + ijA) - jA) - 16] * -d;
        }
      }

      // Start for MATLABSystem: '<S71>/MATLAB System'
      jA += 13;
    }
  }

  for (iy = 0; iy < 12; iy++) {
    int8_T b_ipiv_0;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    b_ipiv_0 = b_ipiv[iy];
    if (iy + 1 != b_ipiv_0) {
      for (g_k = 0; g_k < 13; g_k++) {
        kAcol = 13 * g_k + iy;
        d = F[kAcol];
        jp1j = (13 * g_k + b_ipiv_0) - 1;
        F[kAcol] = F[jp1j];
        F[jp1j] = d;
      }
    }
  }

  for (g_k = 0; g_k < 13; g_k++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    jBcol = 13 * g_k - 1;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 13 * g_k_0 - 1;
      jj = (g_k_0 + jBcol) + 1;
      if (F[jj] != 0.0) {
        for (jA = g_k_0 + 2; jA < 14; jA++) {
          jp1j = jA + jBcol;

          // Start for MATLABSystem: '<S71>/MATLAB System'
          F[jp1j] -= V[jA + kAcol] * F[jj];
        }
      }
    }
  }

  for (g_k = 0; g_k < 13; g_k++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    jBcol = 13 * g_k;
    for (jA = 12; jA >= 0; jA--) {
      kAcol = 13 * jA;
      jj = jA + jBcol;
      d = F[jj];
      if (d != 0.0) {
        F[jj] = d / V[jA + kAcol];
        g_k_0 = jA - 1;
        for (iy = 0; iy <= g_k_0; iy++) {
          jp1j = iy + jBcol;
          F[jp1j] -= V[iy + kAcol] * F[jj];
        }
      }
    }
  }

  g_k_0 = 0;
  for (g_k = 0; g_k < 13; g_k++) {
    F[g_k_0]++;
    g_k_0 += 14;
  }
}

void proc_control::proc_control_recomputeBlockDiag(const real_T A[169], real_T
  F[169], const int32_T blockFormat[12])
{
  // Start for MATLABSystem: '<S71>/MATLAB System'
  for (int32_T b_j = 0; b_j < 12; b_j++) {
    int32_T blockFormat_0;
    blockFormat_0 = blockFormat[b_j];
    if (blockFormat_0 != 0) {
      if (blockFormat_0 == 1) {
        real_T A_0;
        real_T A_1;
        real_T delta;
        real_T expa;
        real_T sinchdelta;
        real_T u1;
        int32_T A_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        A_0 = A[blockFormat_0];
        delta = exp(A_0);
        A_tmp = (b_j + 1) * 13 + b_j;
        A_1 = A[A_tmp + 1];
        expa = exp(A_1);
        sinchdelta = (A_1 + A_0) / 2.0;
        u1 = fabs(A_0 - A_1) / 2.0;
        if ((sinchdelta >= u1) || rtIsNaN(u1)) {
          u1 = sinchdelta;
        }

        if (u1 < 709.782712893384) {
          A_0 = (A_1 - A_0) / 2.0;
          if (A_0 == 0.0) {
            A_0 = 1.0;
          } else {
            A_0 = sinh(A_0) / A_0;
          }

          sinchdelta = A[A_tmp] * exp(sinchdelta) * A_0;
        } else {
          sinchdelta = (expa - delta) * A[A_tmp] / (A_1 - A_0);
        }

        F[blockFormat_0] = delta;
        F[A_tmp] = sinchdelta;
        F[A_tmp + 1] = expa;
      } else {
        real_T A_0;
        real_T A_1;
        real_T delta;
        real_T expa;
        real_T sinchdelta;
        int32_T A_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        A_0 = A[blockFormat_0 + 1];
        A_tmp = (b_j + 1) * 13 + b_j;
        A_1 = A[A_tmp];
        delta = sqrt(fabs(A_1 * A_0));
        expa = exp(A[blockFormat_0]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = sin(delta) / delta;
        }

        delta = expa * cos(delta);
        F[blockFormat_0] = delta;
        F[blockFormat_0 + 1] = A_0 * expa * sinchdelta;
        F[A_tmp] = A_1 * expa * sinchdelta;
        F[A_tmp + 1] = delta;
      }
    }
  }

  if (blockFormat[11] == 0) {
    F[168] = exp(A[168]);
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_p(int32_T n, const real_T x[169],
  int32_T ix0)
{
  real_T y;
  y = 0.0;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k = ix0; k < kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
  return y;
}

void proc_control::proc_control_xzsyhetrd(real_T A[169], real_T D[13], real_T E
  [12], real_T tau[12])
{
  __m128d tmp;
  real_T tmp_0[2];
  real_T taui;
  real_T temp1;
  real_T tmp_1;
  real_T xnorm;
  int32_T b_i;
  int32_T ia0;
  int32_T k;
  int32_T knt;
  int32_T scalarLB;
  int32_T tau_tmp;
  int32_T temp1_tmp;
  int32_T temp1_tmp_tmp_tmp;
  int32_T vectorUB;
  int32_T vectorUB_tmp;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  for (b_i = 0; b_i < 12; b_i++) {
    if (b_i + 3 <= 13) {
      scalarLB = b_i + 3;
    } else {
      scalarLB = 13;
    }

    ia0 = b_i * 13 + scalarLB;
    temp1_tmp_tmp_tmp = 13 * b_i + b_i;
    temp1 = A[temp1_tmp_tmp_tmp + 1];
    taui = 0.0;
    xnorm = proc_control_xnrm2_p(11 - b_i, A, ia0);
    if (xnorm != 0.0) {
      xnorm = rt_hypotd_snf(temp1, xnorm);
      if (temp1 >= 0.0) {
        xnorm = -xnorm;
      }

      if (fabs(xnorm) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          scalarLB = ia0 - b_i;
          vectorUB = ((((scalarLB - ia0) + 11) / 2) << 1) + ia0;
          vectorUB_tmp = vectorUB - 2;
          for (k = ia0; k <= vectorUB_tmp; k += 2) {
            tmp = _mm_loadu_pd(&A[k - 1]);
            _mm_storeu_pd(&A[k - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (k = vectorUB; k <= scalarLB + 10; k++) {
            A[k - 1] *= 9.9792015476736E+291;
          }

          xnorm *= 9.9792015476736E+291;
          temp1 *= 9.9792015476736E+291;
        } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt + 1 < 20));

        xnorm = rt_hypotd_snf(temp1, proc_control_xnrm2_p(11 - b_i, A, ia0));
        if (temp1 >= 0.0) {
          xnorm = -xnorm;
        }

        taui = (xnorm - temp1) / xnorm;
        temp1 = 1.0 / (temp1 - xnorm);
        for (k = ia0; k <= vectorUB_tmp; k += 2) {
          tmp = _mm_loadu_pd(&A[k - 1]);
          _mm_storeu_pd(&A[k - 1], _mm_mul_pd(tmp, _mm_set1_pd(temp1)));
        }

        for (k = vectorUB; k <= scalarLB + 10; k++) {
          A[k - 1] *= temp1;
        }

        for (k = 0; k <= knt; k++) {
          xnorm *= 1.0020841800044864E-292;
        }

        temp1 = xnorm;
      } else {
        taui = (xnorm - temp1) / xnorm;
        temp1 = 1.0 / (temp1 - xnorm);
        knt = ia0 - b_i;
        scalarLB = ((((knt - ia0) + 11) / 2) << 1) + ia0;
        vectorUB = scalarLB - 2;
        for (k = ia0; k <= vectorUB; k += 2) {
          tmp = _mm_loadu_pd(&A[k - 1]);
          _mm_storeu_pd(&A[k - 1], _mm_mul_pd(tmp, _mm_set1_pd(temp1)));
        }

        for (k = scalarLB; k <= knt + 10; k++) {
          A[k - 1] *= temp1;
        }

        temp1 = xnorm;
      }
    }

    E[b_i] = temp1;
    if (taui != 0.0) {
      A[temp1_tmp_tmp_tmp + 1] = 1.0;
      for (k = b_i + 1; k < 13; k++) {
        tau[k - 1] = 0.0;
      }

      vectorUB = 11 - b_i;
      vectorUB_tmp = 12 - b_i;
      for (knt = 0; knt <= vectorUB; knt++) {
        temp1_tmp = b_i + knt;
        temp1 = A[(13 * b_i + temp1_tmp) + 1] * taui;
        xnorm = 0.0;
        tau_tmp = (temp1_tmp + 1) * 13 + b_i;
        tau[temp1_tmp] += A[(tau_tmp + knt) + 1] * temp1;
        for (ia0 = knt + 2; ia0 <= vectorUB_tmp; ia0++) {
          scalarLB = b_i + ia0;
          _mm_storeu_pd(&tmp_0[0], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(A[tau_tmp +
            ia0]), _mm_set_pd(A[scalarLB + 13 * b_i], temp1)), _mm_set_pd(xnorm,
            tau[scalarLB - 1])));
          tau[scalarLB - 1] = tmp_0[0];
          xnorm = tmp_0[1];
        }

        tau[temp1_tmp] += taui * xnorm;
      }

      temp1 = 0.0;
      for (k = 0; k < vectorUB_tmp; k++) {
        temp1 += A[(temp1_tmp_tmp_tmp + k) + 1] * tau[b_i + k];
      }

      temp1 *= -0.5 * taui;
      if (!(temp1 == 0.0)) {
        for (k = 0; k < vectorUB_tmp; k++) {
          tau_tmp = b_i + k;
          tau[tau_tmp] += A[(temp1_tmp_tmp_tmp + k) + 1] * temp1;
        }
      }

      for (knt = 0; knt <= vectorUB; knt++) {
        k = knt + 1;
        temp1_tmp = knt + b_i;
        temp1 = A[(13 * b_i + temp1_tmp) + 1];
        xnorm = tau[temp1_tmp];
        tmp_1 = xnorm * temp1;
        scalarLB = (temp1_tmp + 1) * 13;
        A[(temp1_tmp + scalarLB) + 1] = (A[((scalarLB + knt) + b_i) + 1] - tmp_1)
          - tmp_1;
        for (ia0 = k + 1; ia0 <= vectorUB_tmp; ia0++) {
          temp1_tmp = b_i + ia0;
          A[temp1_tmp + scalarLB] = (A[(scalarLB + b_i) + ia0] - tau[temp1_tmp -
            1] * temp1) - A[13 * b_i + temp1_tmp] * xnorm;
        }
      }
    }

    A[temp1_tmp_tmp_tmp + 1] = E[b_i];
    D[b_i] = A[temp1_tmp_tmp_tmp];
    tau[b_i] = taui;
  }

  D[12] = A[168];

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

void proc_control::proc_control_xzlascl(real_T cfrom, real_T cto, int32_T m,
  real_T A[13], int32_T iA0)
{
  real_T cfromc;
  real_T ctoc;
  boolean_T notdone;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  cfromc = cfrom;
  ctoc = cto;
  notdone = true;
  while (notdone) {
    real_T cfrom1;
    real_T cto1;
    real_T mul;
    int32_T scalarLB;
    int32_T tmp_0;
    int32_T vectorUB;
    cfrom1 = cfromc * 2.0041683600089728E-292;
    cto1 = ctoc / 4.9896007738368E+291;
    if ((fabs(cfrom1) > fabs(ctoc)) && (ctoc != 0.0)) {
      mul = 2.0041683600089728E-292;
      cfromc = cfrom1;
    } else if (fabs(cto1) > fabs(cfromc)) {
      mul = 4.9896007738368E+291;
      ctoc = cto1;
    } else {
      mul = ctoc / cfromc;
      notdone = false;
    }

    scalarLB = (m / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp_0 = (b_i + iA0) - 1;
      tmp = _mm_loadu_pd(&A[tmp_0]);
      _mm_storeu_pd(&A[tmp_0], _mm_mul_pd(tmp, _mm_set1_pd(mul)));
    }

    for (int32_T b_i = scalarLB; b_i < m; b_i++) {
      tmp_0 = (b_i + iA0) - 1;
      A[tmp_0] *= mul;
    }
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

void proc_control::proc_control_xzlascl_p(real_T cfrom, real_T cto, int32_T m,
  real_T A[12], int32_T iA0)
{
  real_T cfromc;
  real_T ctoc;
  boolean_T notdone;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  cfromc = cfrom;
  ctoc = cto;
  notdone = true;
  while (notdone) {
    real_T cfrom1;
    real_T cto1;
    real_T mul;
    int32_T scalarLB;
    int32_T tmp_0;
    int32_T vectorUB;
    cfrom1 = cfromc * 2.0041683600089728E-292;
    cto1 = ctoc / 4.9896007738368E+291;
    if ((fabs(cfrom1) > fabs(ctoc)) && (ctoc != 0.0)) {
      mul = 2.0041683600089728E-292;
      cfromc = cfrom1;
    } else if (fabs(cto1) > fabs(cfromc)) {
      mul = 4.9896007738368E+291;
      ctoc = cto1;
    } else {
      mul = ctoc / cfromc;
      notdone = false;
    }

    scalarLB = (m / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp_0 = (b_i + iA0) - 1;
      tmp = _mm_loadu_pd(&A[tmp_0]);
      _mm_storeu_pd(&A[tmp_0], _mm_mul_pd(tmp, _mm_set1_pd(mul)));
    }

    for (int32_T b_i = scalarLB; b_i < m; b_i++) {
      tmp_0 = (b_i + iA0) - 1;
      A[tmp_0] *= mul;
    }
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

void proc_control::proc_control_xzlartg(real_T f, real_T g, real_T *cs, real_T
  *sn, real_T *r)
{
  real_T f1;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  // Start for MATLABSystem: '<S71>/MATLAB System'
  f1 = fabs(f);
  *r = fabs(g);
  if (g == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
    *r = f;
  } else if (f == 0.0) {
    *cs = 0.0;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    if (g >= 0.0) {
      *sn = 1.0;
    } else {
      *sn = -1.0;
    }
  } else if ((f1 > 1.4916681462400413E-154) && (f1 < 4.7403759540545887E+153) &&
             (*r > 1.4916681462400413E-154) && (*r < 4.7403759540545887E+153)) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    *r = sqrt(f * f + g * g);
    *cs = f1 / *r;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = g / *r;
  } else {
    real_T fs;
    real_T gs;
    if ((f1 >= *r) || rtIsNaN(*r)) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      *r = f1;
    }

    // Start for MATLABSystem: '<S71>/MATLAB System'
    if ((*r <= 2.2250738585072014E-308) || rtIsNaN(*r)) {
      *r = 2.2250738585072014E-308;
    }

    if (*r >= 4.49423283715579E+307) {
      f1 = 4.49423283715579E+307;
    } else {
      f1 = *r;
    }

    fs = f / f1;
    gs = g / f1;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    *r = sqrt(fs * fs + gs * gs);
    *cs = fabs(fs) / *r;
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = gs / *r;
    *r *= f1;
  }
}

void proc_control::proc_control_rotateRight_p(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  int32_T b;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  b = n - 2;
  for (int32_T b_j = 0; b_j <= b; b_j++) {
    real_T ctemp;
    real_T stemp;
    int32_T offsetj;
    int32_T offsetjp1;
    ctemp = cs[(b_j + ic0) - 1];
    stemp = cs[(b_j + is0) - 1];
    offsetj = (b_j * 13 + iz0) - 2;
    offsetjp1 = ((b_j + 1) * 13 + iz0) - 2;
    if ((ctemp != 1.0) || (stemp != 0.0)) {
      for (int32_T j = 0; j < 13; j++) {
        real_T temp;
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = (j + offsetjp1) + 1;
        temp = z[temp_tmp];
        tmp = (j + offsetj) + 1;
        z[temp_tmp] = ctemp * temp - z[tmp] * stemp;
        z[tmp] = z[tmp] * ctemp + stemp * temp;
      }
    }
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

void proc_control::proc_control_xdlaev2(real_T a, real_T b, real_T c, real_T
  *rt1, real_T *rt2, real_T *cs1, real_T *sn1)
{
  real_T ab;
  real_T acmn;
  real_T acmx;
  real_T adf;
  real_T df;
  real_T sm;
  real_T tb;
  int32_T sgn1;
  int32_T sgn2;
  sm = a + c;
  df = a - c;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  adf = fabs(df);
  tb = b + b;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  ab = fabs(tb);
  if (fabs(a) > fabs(c)) {
    acmx = a;
    acmn = c;
  } else {
    acmx = c;
    acmn = a;
  }

  if (adf > ab) {
    real_T a_0;
    a_0 = ab / adf;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    adf *= sqrt(a_0 * a_0 + 1.0);
  } else if (adf < ab) {
    real_T a_0;
    a_0 = adf / ab;

    // Start for MATLABSystem: '<S71>/MATLAB System'
    adf = sqrt(a_0 * a_0 + 1.0) * ab;
  } else {
    adf = ab * 1.4142135623730951;
  }

  if (sm < 0.0) {
    *rt1 = (sm - adf) * 0.5;
    sgn1 = -1;
    *rt2 = acmx / *rt1 * acmn - b / *rt1 * b;
  } else if (sm > 0.0) {
    *rt1 = (sm + adf) * 0.5;
    sgn1 = 1;
    *rt2 = acmx / *rt1 * acmn - b / *rt1 * b;
  } else {
    *rt1 = 0.5 * adf;
    *rt2 = -0.5 * adf;
    sgn1 = 1;
  }

  if (df >= 0.0) {
    df += adf;
    sgn2 = 1;
  } else {
    df -= adf;
    sgn2 = -1;
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  if (fabs(df) > ab) {
    tb = -tb / df;
    *sn1 = 1.0 / sqrt(tb * tb + 1.0);
    *cs1 = tb * *sn1;
  } else if (ab == 0.0) {
    *cs1 = 1.0;
    *sn1 = 0.0;
  } else {
    tb = -df / tb;
    *cs1 = 1.0 / sqrt(tb * tb + 1.0);
    *sn1 = tb * *cs1;
  }

  if (sgn1 == sgn2) {
    tb = *cs1;
    *cs1 = -*sn1;
    *sn1 = tb;
  }
}

void proc_control::proc_control_rotateRight(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  // Start for MATLABSystem: '<S71>/MATLAB System'
  for (int32_T j = n - 1; j >= 1; j--) {
    real_T ctemp;
    real_T stemp;
    int32_T offsetj;
    int32_T offsetjp1;
    ctemp = cs[(ic0 + j) - 2];
    stemp = cs[(is0 + j) - 2];
    offsetj = ((j - 1) * 13 + iz0) - 2;
    offsetjp1 = (j * 13 + iz0) - 2;
    if ((ctemp != 1.0) || (stemp != 0.0)) {
      for (int32_T b_i = 0; b_i < 13; b_i++) {
        real_T temp;
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = (b_i + offsetjp1) + 1;
        temp = z[temp_tmp];
        tmp = (b_i + offsetj) + 1;
        z[temp_tmp] = ctemp * temp - z[tmp] * stemp;
        z[tmp] = z[tmp] * ctemp + stemp * temp;
      }
    }
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

int32_T proc_control::proc_control_xzsteqr(real_T d[13], real_T e[12], real_T z
  [169])
{
  real_T work[24];
  real_T anorm;
  real_T b;
  real_T c;
  real_T c_s;
  real_T e_0;
  real_T p;
  real_T r;
  real_T s;
  real_T tst;
  int32_T exitg1;
  int32_T exitg3;
  int32_T exitg4;
  int32_T i;
  int32_T info;
  int32_T iscale;
  int32_T iscale_tmp;
  int32_T jtot;
  int32_T l;
  int32_T l1;
  int32_T lend;
  int32_T lendsv;
  int32_T lsv;
  int32_T m;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  info = 0;
  memset(&work[0], 0, 24U * sizeof(real_T));
  jtot = 0;
  l1 = 1;
  do {
    exitg1 = 0;
    if (l1 > 13) {
      for (jtot = 0; jtot < 12; jtot++) {
        l1 = jtot;
        p = d[jtot];
        for (m = jtot + 2; m < 14; m++) {
          tst = d[m - 1];
          if (tst < p) {
            l1 = m - 1;
            p = tst;
          }
        }

        if (l1 != jtot) {
          d[l1] = d[jtot];
          d[jtot] = p;
          m = jtot * 13;
          l = l1 * 13;
          for (l1 = 0; l1 < 13; l1++) {
            lsv = m + l1;
            tst = z[lsv];
            i = l + l1;
            z[lsv] = z[i];
            z[i] = tst;
          }
        }
      }

      exitg1 = 1;
    } else {
      if (l1 > 1) {
        e[l1 - 2] = 0.0;
      }

      m = l1;
      exitg2 = false;
      while ((!exitg2) && (m < 13)) {
        tst = fabs(e[m - 1]);
        if (tst == 0.0) {
          exitg2 = true;
        } else if (tst <= sqrt(fabs(d[m - 1])) * sqrt(fabs(d[m])) *
                   2.2204460492503131E-16) {
          e[m - 1] = 0.0;
          exitg2 = true;
        } else {
          m++;
        }
      }

      l = l1 - 1;
      lsv = l1;
      lend = m;
      lendsv = m;
      l1 = m + 1;
      if (l + 1 == m) {
      } else {
        iscale_tmp = m - l;
        if (iscale_tmp <= 0) {
          tst = 0.0;
        } else {
          tst = fabs(d[(l + iscale_tmp) - 1]);
          i = 0;
          exitg2 = false;
          while ((!exitg2) && (i <= iscale_tmp - 2)) {
            iscale = l + i;
            anorm = fabs(d[iscale]);
            if (rtIsNaN(anorm)) {
              tst = (rtNaN);
              exitg2 = true;
            } else {
              if (anorm > tst) {
                tst = anorm;
              }

              anorm = fabs(e[iscale]);
              if (rtIsNaN(anorm)) {
                tst = (rtNaN);
                exitg2 = true;
              } else {
                if (anorm > tst) {
                  tst = anorm;
                }

                i++;
              }
            }
          }
        }

        iscale = 0;
        if (tst == 0.0) {
        } else if (rtIsInf(tst) || rtIsNaN(tst)) {
          for (i = 0; i < 13; i++) {
            d[i] = (rtNaN);
          }

          for (i = 0; i < 169; i++) {
            z[i] = (rtNaN);
          }

          exitg1 = 1;
        } else {
          if (tst > 2.2346346549904327E+153) {
            iscale = 1;
            proc_control_xzlascl(tst, 2.2346346549904327E+153, iscale_tmp, d, l
                                 + 1);
            proc_control_xzlascl_p(tst, 2.2346346549904327E+153, iscale_tmp - 1,
              e, l + 1);
          } else if (tst < 3.02546243347603E-123) {
            iscale = 2;
            proc_control_xzlascl(tst, 3.02546243347603E-123, iscale_tmp, d, l +
                                 1);
            proc_control_xzlascl_p(tst, 3.02546243347603E-123, iscale_tmp - 1, e,
              l + 1);
          }

          if (fabs(d[m - 1]) < fabs(d[l])) {
            lend = lsv;
            l = m - 1;
          }

          if (lend > l + 1) {
            do {
              exitg4 = 0;
              if (l + 1 != lend) {
                m = l + 1;
                exitg2 = false;
                while ((!exitg2) && (m < lend)) {
                  anorm = fabs(e[m - 1]);
                  if (anorm * anorm <= fabs(d[m - 1]) * 4.9303806576313238E-32 *
                      fabs(d[m]) + 2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    m++;
                  }
                }
              } else {
                m = lend;
              }

              if (m < lend) {
                e[m - 1] = 0.0;
              }

              if (l + 1 == m) {
                l++;
                if (l + 1 > lend) {
                  exitg4 = 1;
                }
              } else if (l + 2 == m) {
                proc_control_xdlaev2(d[l], e[l], d[l + 1], &d[l], &anorm,
                                     &work[l], &s);
                d[l + 1] = anorm;
                work[l + 12] = s;
                proc_control_rotateRight(2, z, l * 13 + 1, work, l + 1, l + 13);
                e[l] = 0.0;
                l += 2;
                if (l + 1 > lend) {
                  exitg4 = 1;
                }
              } else if (jtot == 390) {
                exitg4 = 1;
              } else {
                jtot++;
                anorm = (d[l + 1] - d[l]) / (2.0 * e[l]);
                if (anorm >= 0.0) {
                  s = rt_hypotd_snf(anorm, 1.0);
                } else {
                  s = -rt_hypotd_snf(anorm, 1.0);
                }

                anorm = (d[m - 1] - d[l]) + e[l] / (anorm + s);
                s = 1.0;
                c = 1.0;
                p = 0.0;
                for (i = m - 1; i >= l + 1; i--) {
                  e_0 = e[i - 1];
                  b = c * e_0;
                  proc_control_xzlartg(anorm, s * e_0, &c, &c_s, &r);
                  s = c_s;
                  if (m - 1 != i) {
                    e[i] = r;
                  }

                  anorm = d[i] - p;
                  r = (d[i - 1] - anorm) * c_s + 2.0 * c * b;
                  p = c_s * r;
                  d[i] = anorm + p;
                  anorm = c * r - b;
                  work[i - 1] = c;
                  work[i + 11] = -c_s;
                }

                proc_control_rotateRight(m - l, z, l * 13 + 1, work, l + 1, l +
                  13);
                d[l] -= p;
                e[l] = anorm;
              }
            } while (exitg4 == 0);
          } else {
            do {
              exitg3 = 0;
              if (l + 1 != lend) {
                m = l + 1;
                exitg2 = false;
                while ((!exitg2) && (m > lend)) {
                  anorm = fabs(e[m - 2]);
                  if (anorm * anorm <= fabs(d[m - 1]) * 4.9303806576313238E-32 *
                      fabs(d[m - 2]) + 2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    m--;
                  }
                }
              } else {
                m = lend;
              }

              if (m > lend) {
                e[m - 2] = 0.0;
              }

              if (l + 1 == m) {
                l--;
                if (l + 1 < lend) {
                  exitg3 = 1;
                }
              } else if (m == l) {
                proc_control_xdlaev2(d[l - 1], e[l - 1], d[l], &d[l - 1], &anorm,
                                     &work[m - 1], &s);
                d[l] = anorm;
                work[m + 11] = s;
                proc_control_rotateRight_p(2, z, (l - 1) * 13 + 1, work, m, m +
                  12);
                e[l - 1] = 0.0;
                l -= 2;
                if (l + 1 < lend) {
                  exitg3 = 1;
                }
              } else if (jtot == 390) {
                exitg3 = 1;
              } else {
                jtot++;
                p = e[l - 1];
                anorm = (d[l - 1] - d[l]) / (p * 2.0);
                if (anorm >= 0.0) {
                  s = rt_hypotd_snf(anorm, 1.0);
                } else {
                  s = -rt_hypotd_snf(anorm, 1.0);
                }

                anorm = (d[m - 1] - d[l]) + p / (anorm + s);
                s = 1.0;
                c = 1.0;
                p = 0.0;
                for (i = m; i <= l; i++) {
                  e_0 = e[i - 1];
                  b = c * e_0;
                  proc_control_xzlartg(anorm, s * e_0, &c, &c_s, &r);
                  s = c_s;
                  if (i != m) {
                    e[i - 2] = r;
                  }

                  anorm = d[i - 1] - p;
                  r = (d[i] - anorm) * c_s + 2.0 * c * b;
                  p = c_s * r;
                  d[i - 1] = anorm + p;
                  anorm = c * r - b;
                  work[i - 1] = c;
                  work[i + 11] = c_s;
                }

                proc_control_rotateRight_p((l - m) + 2, z, (m - 1) * 13 + 1,
                  work, m, m + 12);
                d[l] -= p;
                e[l - 1] = anorm;
              }
            } while (exitg3 == 0);
          }

          if (iscale == 1) {
            i = lendsv - lsv;
            proc_control_xzlascl(2.2346346549904327E+153, tst, i + 1, d, lsv);
            proc_control_xzlascl_p(2.2346346549904327E+153, tst, i, e, lsv);
          } else if (iscale == 2) {
            i = lendsv - lsv;
            proc_control_xzlascl(3.02546243347603E-123, tst, i + 1, d, lsv);
            proc_control_xzlascl_p(3.02546243347603E-123, tst, i, e, lsv);
          }

          if (jtot >= 390) {
            for (jtot = 0; jtot < 12; jtot++) {
              if ((e[jtot] != 0.0) && (info <= 2147483646)) {
                info++;
              }
            }

            exitg1 = 1;
          }
        }
      }
    }
  } while (exitg1 == 0);

  return info;
}

void proc_control::proc_control_xsyheev(const real_T A[169], int32_T *info,
  real_T W[13], real_T b_A[169])
{
  __m128d tmp;
  real_T work[13];
  real_T e[12];
  real_T tau[12];
  real_T absx;
  real_T anrm;
  real_T cfrom1;
  real_T cto1;
  real_T ctoc;
  real_T mul;
  int32_T b;
  int32_T coltop;
  int32_T e_0;
  int32_T exitg1;
  int32_T iaii;
  int32_T itau;
  int32_T jy;
  int32_T lastc;
  int32_T lastv;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T iscale;
  boolean_T notdone;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memcpy(&b_A[0], &A[0], 169U * sizeof(real_T));
  *info = 0;
  anrm = 0.0;
  lastv = 1;
  exitg2 = false;
  while ((!exitg2) && (lastv - 1 < 13)) {
    itau = 0;
    do {
      exitg1 = 0;
      if (itau <= static_cast<uint8_T>(lastv) - 1) {
        absx = fabs(A[(lastv - 1) * 13 + itau]);
        if (rtIsNaN(absx)) {
          anrm = (rtNaN);
          exitg1 = 1;
        } else {
          if (absx > anrm) {
            anrm = absx;
          }

          itau++;
        }
      } else {
        lastv++;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  if (rtIsInf(anrm) || rtIsNaN(anrm)) {
    for (itau = 0; itau < 13; itau++) {
      W[itau] = (rtNaN);
    }

    for (itau = 0; itau < 169; itau++) {
      b_A[itau] = (rtNaN);
    }
  } else {
    iscale = false;
    guard1 = false;
    if ((anrm > 0.0) && (anrm < 1.0010415475915505E-146)) {
      iscale = true;
      anrm = 1.0010415475915505E-146 / anrm;
      guard1 = true;
    } else if (anrm > 9.9895953610111751E+145) {
      iscale = true;
      anrm = 9.9895953610111751E+145 / anrm;
      guard1 = true;
    }

    if (guard1) {
      absx = 1.0;
      ctoc = anrm;
      notdone = true;
      while (notdone) {
        cfrom1 = absx * 2.0041683600089728E-292;
        cto1 = ctoc / 4.9896007738368E+291;
        if ((fabs(cfrom1) > ctoc) && (ctoc != 0.0)) {
          mul = 2.0041683600089728E-292;
          absx = cfrom1;
        } else if (cto1 > fabs(absx)) {
          mul = 4.9896007738368E+291;
          ctoc = cto1;
        } else {
          mul = ctoc / absx;
          notdone = false;
        }

        for (itau = 0; itau <= 166; itau += 2) {
          tmp = _mm_loadu_pd(&b_A[itau]);
          _mm_storeu_pd(&b_A[itau], _mm_mul_pd(tmp, _mm_set1_pd(mul)));
        }

        for (itau = 168; itau < 169; itau++) {
          b_A[itau] *= mul;
        }
      }
    }

    proc_control_xzsyhetrd(b_A, W, e, tau);
    lastv = 143;
    for (lastc = 11; lastc >= 0; lastc--) {
      b_A[lastv + 13] = 0.0;
      for (itau = lastc + 3; itau < 14; itau++) {
        iaii = itau + lastv;
        b_A[iaii + 12] = b_A[iaii - 1];
      }

      lastv += -13;
    }

    b_A[0] = 1.0;
    memset(&b_A[1], 0, 12U * sizeof(real_T));
    memset(&work[0], 0, 13U * sizeof(real_T));
    for (itau = 11; itau >= 0; itau--) {
      iaii = (itau * 13 + itau) + 28;
      if (itau + 1 < 12) {
        b_A[iaii - 14] = 1.0;
        if (tau[itau] != 0.0) {
          lastv = 12 - itau;
          lastc = (iaii - itau) - 3;
          while ((lastv > 0) && (b_A[lastc] == 0.0)) {
            lastv--;
            lastc--;
          }

          lastc = 11 - itau;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            coltop = (lastc - 1) * 13 + iaii;
            b = coltop;
            do {
              exitg1 = 0;
              if (b <= (coltop + lastv) - 1) {
                if (b_A[b - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  b++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = 0;
          lastc = 0;
        }

        if (lastv > 0) {
          if (lastc != 0) {
            memset(&work[0], 0, static_cast<uint32_T>((lastc - 1) + 1) * sizeof
                   (real_T));
            coltop = (lastc - 1) * 13 + iaii;
            for (jy = iaii; jy <= coltop; jy += 13) {
              absx = 0.0;
              e_0 = jy + lastv;
              for (b = jy; b < e_0; b++) {
                absx += b_A[((iaii + b) - jy) - 14] * b_A[b - 1];
              }

              b = div_nde_s32_floor(jy - iaii, 13);
              work[b] += absx;
            }
          }

          if (!(-tau[itau] == 0.0)) {
            jy = iaii;
            b = lastc - 1;
            for (lastc = 0; lastc <= b; lastc++) {
              absx = work[lastc];
              if (absx != 0.0) {
                absx *= -tau[itau];
                coltop = (lastv + jy) - 1;
                for (e_0 = jy; e_0 <= coltop; e_0++) {
                  b_A[e_0 - 1] += b_A[((iaii + e_0) - jy) - 14] * absx;
                }
              }

              jy += 13;
            }
          }
        }

        b = iaii - itau;
        lastc = (((((b - iaii) + 11) / 2) << 1) + iaii) - 12;
        coltop = lastc - 2;
        for (lastv = iaii - 12; lastv <= coltop; lastv += 2) {
          tmp = _mm_loadu_pd(&b_A[lastv - 1]);
          _mm_storeu_pd(&b_A[lastv - 1], _mm_mul_pd(tmp, _mm_set1_pd(-tau[itau])));
        }

        for (lastv = lastc; lastv <= b - 2; lastv++) {
          b_A[lastv - 1] *= -tau[itau];
        }
      }

      b_A[iaii - 14] = 1.0 - tau[itau];
      lastc = itau - 1;
      for (lastv = 0; lastv <= lastc; lastv++) {
        b_A[(iaii - lastv) - 15] = 0.0;
      }
    }

    *info = proc_control_xzsteqr(W, e, b_A);
    if (*info != 0) {
      for (itau = 0; itau < 13; itau++) {
        W[itau] = (rtNaN);
      }

      for (itau = 0; itau < 169; itau++) {
        b_A[itau] = (rtNaN);
      }
    } else if (iscale) {
      anrm = 1.0 / anrm;
      for (itau = 0; itau <= 10; itau += 2) {
        tmp = _mm_loadu_pd(&W[itau]);
        _mm_storeu_pd(&W[itau], _mm_mul_pd(_mm_set1_pd(anrm), tmp));
      }

      for (itau = 12; itau < 13; itau++) {
        W[itau] *= anrm;
      }
    }
  }
}

void proc_control::proc_control_expm(real_T A[169], real_T F[169])
{
  __m128d tmp;
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  boolean_T guard3;
  boolean_T guard4;
  proc_control_B.recomputeDiags = true;
  for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 169;
       proc_control_B.b_k_e++) {
    if (proc_control_B.recomputeDiags) {
      // Start for MATLABSystem: '<S71>/MATLAB System'
      proc_control_B.d6_j = A[proc_control_B.b_k_e];
      if ((!rtIsInf(proc_control_B.d6_j)) && (!rtIsNaN(proc_control_B.d6_j))) {
      } else {
        proc_control_B.recomputeDiags = false;
      }
    } else {
      proc_control_B.recomputeDiags = false;
    }
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  if (!proc_control_B.recomputeDiags) {
    for (proc_control_B.i_ce = 0; proc_control_B.i_ce < 169; proc_control_B.i_ce
         ++) {
      F[proc_control_B.i_ce] = (rtNaN);
    }
  } else {
    proc_control_B.b_k_e = 1;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_k_e - 1 < 13)) {
      proc_control_B.i_ce = 1;
      do {
        exitg1 = 0;
        if (proc_control_B.i_ce - 1 < 13) {
          if ((proc_control_B.i_ce != proc_control_B.b_k_e) && (!(A
                [((proc_control_B.b_k_e - 1) * 13 + proc_control_B.i_ce) - 1] ==
                0.0))) {
            proc_control_B.recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.i_ce++;
          }
        } else {
          proc_control_B.b_k_e++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (proc_control_B.recomputeDiags) {
      memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.eint = 0;
      for (proc_control_B.i_ce = 0; proc_control_B.i_ce < 13;
           proc_control_B.i_ce++) {
        F[proc_control_B.eint] = exp(A[proc_control_B.eint]);
        proc_control_B.eint += 14;
      }
    } else {
      proc_control_B.recomputeDiags = true;
      proc_control_B.b_k_e = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.b_k_e < 13)) {
        proc_control_B.i_ce = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.i_ce <= proc_control_B.b_k_e) {
            if (!(A[13 * proc_control_B.b_k_e + proc_control_B.i_ce] == A[13 *
                  proc_control_B.i_ce + proc_control_B.b_k_e])) {
              proc_control_B.recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.i_ce++;
            }
          } else {
            proc_control_B.b_k_e++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (proc_control_B.recomputeDiags) {
        proc_control_xsyheev(A, &proc_control_B.j_d, proc_control_B.w,
                             proc_control_B.A2);
        proc_control_B.b_k_a = 0;
        for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
             proc_control_B.b_k_e++) {
          proc_control_B.exptj = exp(proc_control_B.w[proc_control_B.b_k_e]);
          for (proc_control_B.eint = 0; proc_control_B.eint <= 10;
               proc_control_B.eint += 2) {
            proc_control_B.i_ce = proc_control_B.eint + proc_control_B.b_k_a;
            tmp = _mm_loadu_pd(&proc_control_B.A2[proc_control_B.i_ce]);
            _mm_storeu_pd(&F[proc_control_B.i_ce], _mm_mul_pd(tmp, _mm_set1_pd
              (proc_control_B.exptj)));
          }

          for (proc_control_B.eint = 12; proc_control_B.eint < 13;
               proc_control_B.eint++) {
            proc_control_B.j_d = proc_control_B.eint + proc_control_B.b_k_a;
            F[proc_control_B.j_d] = proc_control_B.A2[proc_control_B.j_d] *
              proc_control_B.exptj;
          }

          proc_control_B.b_k_a += 13;
        }

        for (proc_control_B.i_ce = 0; proc_control_B.i_ce < 13;
             proc_control_B.i_ce++) {
          proc_control_B.b_k_a = 0;
          for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
               proc_control_B.b_k_e++) {
            proc_control_B.exptj = 0.0;
            proc_control_B.i7 = 0;
            for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                 proc_control_B.i6++) {
              proc_control_B.exptj += F[proc_control_B.i7 + proc_control_B.i_ce]
                * proc_control_B.A2[proc_control_B.i7 + proc_control_B.b_k_e];
              proc_control_B.i7 += 13;
            }

            proc_control_B.A4[proc_control_B.b_k_a + proc_control_B.i_ce] =
              proc_control_B.exptj;
            proc_control_B.b_k_a += 13;
          }
        }

        memcpy(&F[0], &proc_control_B.A4[0], 169U * sizeof(real_T));
        proc_control_B.i_ce = 0;
        for (proc_control_B.b_k_a = 0; proc_control_B.b_k_a < 13;
             proc_control_B.b_k_a++) {
          proc_control_B.b_k_e = 0;
          for (proc_control_B.i7 = 0; proc_control_B.i7 < 13; proc_control_B.i7
               ++) {
            proc_control_B.j_d = proc_control_B.i7 + proc_control_B.i_ce;
            proc_control_B.A4[proc_control_B.j_d] = (F[proc_control_B.b_k_e +
              proc_control_B.b_k_a] + F[proc_control_B.j_d]) / 2.0;
            proc_control_B.b_k_e += 13;
          }

          proc_control_B.i_ce += 13;
        }

        memcpy(&F[0], &proc_control_B.A4[0], 169U * sizeof(real_T));
      } else {
        proc_control_B.recomputeDiags = true;
        proc_control_B.j_d = 3;
        while (proc_control_B.recomputeDiags && (proc_control_B.j_d <= 13)) {
          proc_control_B.i_ce = proc_control_B.j_d;
          while (proc_control_B.recomputeDiags && (proc_control_B.i_ce <= 13)) {
            proc_control_B.recomputeDiags = (A[((proc_control_B.j_d - 3) * 13 +
              proc_control_B.i_ce) - 1] == 0.0);
            proc_control_B.i_ce++;
          }

          proc_control_B.j_d++;
        }

        if (proc_control_B.recomputeDiags) {
          proc_control_B.b_k_e = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.b_k_e - 1 < 12)) {
            proc_control_B.i_ce = (proc_control_B.b_k_e - 1) * 13 +
              proc_control_B.b_k_e;
            proc_control_B.d6_j = A[proc_control_B.i_ce];
            if (proc_control_B.d6_j != 0.0) {
              if ((proc_control_B.b_k_e != 12) && (A[(13 * proc_control_B.b_k_e
                    + proc_control_B.b_k_e) + 1] != 0.0)) {
                proc_control_B.recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.b_k_a = 13 * proc_control_B.b_k_e +
                  proc_control_B.b_k_e;
                if (A[proc_control_B.i_ce - 1] != A[proc_control_B.b_k_a]) {
                  proc_control_B.recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.exptj = A[proc_control_B.b_k_a - 1];
                  if (rtIsNaN(proc_control_B.d6_j)) {
                    proc_control_B.d6_j = (rtNaN);
                  } else if (proc_control_B.d6_j < 0.0) {
                    proc_control_B.d6_j = -1.0;
                  } else {
                    proc_control_B.d6_j = (proc_control_B.d6_j > 0.0);
                  }

                  if (rtIsNaN(proc_control_B.exptj)) {
                    proc_control_B.exptj = (rtNaN);
                  } else if (proc_control_B.exptj < 0.0) {
                    proc_control_B.exptj = -1.0;
                  } else {
                    proc_control_B.exptj = (proc_control_B.exptj > 0.0);
                  }

                  if (proc_control_B.d6_j * proc_control_B.exptj != -1.0) {
                    proc_control_B.recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.b_k_e++;
                  }
                }
              }
            } else {
              proc_control_B.b_k_e++;
            }
          }
        }

        proc_control_B.exptj = 0.0;
        proc_control_B.i_ce = 0;
        for (proc_control_B.b_k_a = 0; proc_control_B.b_k_a < 13;
             proc_control_B.b_k_a++) {
          for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
               proc_control_B.b_k_e++) {
            proc_control_B.d6_j = 0.0;
            proc_control_B.i7 = 0;
            for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                 proc_control_B.i6++) {
              proc_control_B.d6_j += A[proc_control_B.i7 + proc_control_B.b_k_e]
                * A[proc_control_B.i6 + proc_control_B.i_ce];
              proc_control_B.i7 += 13;
            }

            proc_control_B.A2[proc_control_B.b_k_e + proc_control_B.i_ce] =
              proc_control_B.d6_j;
          }

          proc_control_B.i_ce += 13;
        }

        for (proc_control_B.i_ce = 0; proc_control_B.i_ce < 13;
             proc_control_B.i_ce++) {
          for (proc_control_B.b_k_a = 0; proc_control_B.b_k_a < 13;
               proc_control_B.b_k_a++) {
            proc_control_B.A4_pi = 0.0;
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
                 proc_control_B.b_k_e++) {
              proc_control_B.A4_pi += proc_control_B.A2[13 *
                proc_control_B.b_k_e + proc_control_B.i_ce] * proc_control_B.A2
                [13 * proc_control_B.b_k_a + proc_control_B.b_k_e];
            }

            proc_control_B.A4[proc_control_B.i_ce + 13 * proc_control_B.b_k_a] =
              proc_control_B.A4_pi;
          }

          for (proc_control_B.b_k_a = 0; proc_control_B.b_k_a < 13;
               proc_control_B.b_k_a++) {
            proc_control_B.d6_j = 0.0;
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
                 proc_control_B.b_k_e++) {
              proc_control_B.d6_j += proc_control_B.A4[13 * proc_control_B.b_k_e
                + proc_control_B.i_ce] * proc_control_B.A2[13 *
                proc_control_B.b_k_a + proc_control_B.b_k_e];
            }

            proc_control_B.A6[proc_control_B.i_ce + 13 * proc_control_B.b_k_a] =
              proc_control_B.d6_j;
          }
        }

        proc_control_B.d6_j = rt_powd_snf(proc_control_norm_p(proc_control_B.A6),
          0.16666666666666666);
        proc_control_B.eta1 = rt_powd_snf(proc_control_norm_p(proc_control_B.A4),
          0.25);
        if ((!(proc_control_B.eta1 >= proc_control_B.d6_j)) && (!rtIsNaN
             (proc_control_B.d6_j))) {
          proc_control_B.eta1 = proc_control_B.d6_j;
        }

        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1 <= 0.01495585217958292) {
          for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e <= 166;
               proc_control_B.b_k_e += 2) {
            proc_control_B.dv27[0] = fabs(A[proc_control_B.b_k_e]);
            proc_control_B.dv27[1] = fabs(A[proc_control_B.b_k_e + 1]);
            tmp = _mm_loadu_pd(&proc_control_B.dv27[0]);
            _mm_storeu_pd(&proc_control_B.A4_h[proc_control_B.b_k_e], _mm_mul_pd
                          (_mm_set1_pd(0.19285012468241128), tmp));
          }

          for (proc_control_B.b_k_e = 168; proc_control_B.b_k_e < 169;
               proc_control_B.b_k_e++) {
            proc_control_B.A4_h[proc_control_B.b_k_e] = 0.19285012468241128 *
              fabs(A[proc_control_B.b_k_e]);
          }

          proc_control_mpower(proc_control_B.A4_h, 7.0, proc_control_B.dv2);
          proc_control_B.A4_pi = ceil(proc_control_log2(proc_control_norm_p
            (proc_control_B.dv2) / proc_control_norm_p(A) * 2.0 /
            2.2204460492503131E-16) / 6.0);
          if (!(proc_control_B.A4_pi >= 0.0)) {
            proc_control_B.A4_pi = 0.0;
          }

          if (proc_control_B.A4_pi == 0.0) {
            proc_control_B.eint = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1 <= 0.253939833006323) {
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e <= 166;
                 proc_control_B.b_k_e += 2) {
              proc_control_B.dv28[0] = fabs(A[proc_control_B.b_k_e]);
              proc_control_B.dv28[1] = fabs(A[proc_control_B.b_k_e + 1]);
              tmp = _mm_loadu_pd(&proc_control_B.dv28[0]);
              _mm_storeu_pd(&proc_control_B.A4_h[proc_control_B.b_k_e],
                            _mm_mul_pd(_mm_set1_pd(0.12321872304378752), tmp));
            }

            for (proc_control_B.b_k_e = 168; proc_control_B.b_k_e < 169;
                 proc_control_B.b_k_e++) {
              proc_control_B.A4_h[proc_control_B.b_k_e] = 0.12321872304378752 *
                fabs(A[proc_control_B.b_k_e]);
            }

            proc_control_mpower(proc_control_B.A4_h, 11.0, proc_control_B.dv2);
            proc_control_B.A4_pi = ceil(proc_control_log2(proc_control_norm_p
              (proc_control_B.dv2) / proc_control_norm_p(A) * 2.0 /
              2.2204460492503131E-16) / 10.0);
            if (!(proc_control_B.A4_pi >= 0.0)) {
              proc_control_B.A4_pi = 0.0;
            }

            if (proc_control_B.A4_pi == 0.0) {
              proc_control_B.eint = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower(proc_control_B.A4, 2.0, proc_control_B.dv2);
          proc_control_B.eta1 = rt_powd_snf(proc_control_norm_p
            (proc_control_B.dv2), 0.125);
          if ((!(proc_control_B.d6_j >= proc_control_B.eta1)) && (!rtIsNaN
               (proc_control_B.eta1))) {
            proc_control_B.d6_j = proc_control_B.eta1;
          }

          if (proc_control_B.d6_j <= 0.95041789961629319) {
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e <= 166;
                 proc_control_B.b_k_e += 2) {
              proc_control_B.dv29[0] = fabs(A[proc_control_B.b_k_e]);
              proc_control_B.dv29[1] = fabs(A[proc_control_B.b_k_e + 1]);
              tmp = _mm_loadu_pd(&proc_control_B.dv29[0]);
              _mm_storeu_pd(&proc_control_B.A4_h[proc_control_B.b_k_e],
                            _mm_mul_pd(_mm_set1_pd(0.090475336558796943), tmp));
            }

            for (proc_control_B.b_k_e = 168; proc_control_B.b_k_e < 169;
                 proc_control_B.b_k_e++) {
              proc_control_B.A4_h[proc_control_B.b_k_e] = 0.090475336558796943 *
                fabs(A[proc_control_B.b_k_e]);
            }

            proc_control_mpower(proc_control_B.A4_h, 15.0, proc_control_B.dv2);
            proc_control_B.A4_pi = ceil(proc_control_log2(proc_control_norm_p
              (proc_control_B.dv2) / proc_control_norm_p(A) * 2.0 /
              2.2204460492503131E-16) / 14.0);
            if (!(proc_control_B.A4_pi >= 0.0)) {
              proc_control_B.A4_pi = 0.0;
            }

            if (proc_control_B.A4_pi == 0.0) {
              proc_control_B.eint = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_j <= 2.097847961257068) {
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e <= 166;
                 proc_control_B.b_k_e += 2) {
              proc_control_B.dv30[0] = fabs(A[proc_control_B.b_k_e]);
              proc_control_B.dv30[1] = fabs(A[proc_control_B.b_k_e + 1]);
              tmp = _mm_loadu_pd(&proc_control_B.dv30[0]);
              _mm_storeu_pd(&proc_control_B.A4_h[proc_control_B.b_k_e],
                            _mm_mul_pd(_mm_set1_pd(0.071467735648795785), tmp));
            }

            for (proc_control_B.b_k_e = 168; proc_control_B.b_k_e < 169;
                 proc_control_B.b_k_e++) {
              proc_control_B.A4_h[proc_control_B.b_k_e] = 0.071467735648795785 *
                fabs(A[proc_control_B.b_k_e]);
            }

            proc_control_mpower(proc_control_B.A4_h, 19.0, proc_control_B.dv2);
            proc_control_B.A4_pi = ceil(proc_control_log2(proc_control_norm_p
              (proc_control_B.dv2) / proc_control_norm_p(A) * 2.0 /
              2.2204460492503131E-16) / 18.0);
            if (!(proc_control_B.A4_pi >= 0.0)) {
              proc_control_B.A4_pi = 0.0;
            }

            if (proc_control_B.A4_pi == 0.0) {
              proc_control_B.eint = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          proc_control_B.i_ce = 0;
          for (proc_control_B.b_k_a = 0; proc_control_B.b_k_a < 13;
               proc_control_B.b_k_a++) {
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
                 proc_control_B.b_k_e++) {
              proc_control_B.A4_pi = 0.0;
              proc_control_B.i7 = 0;
              for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                   proc_control_B.i6++) {
                proc_control_B.A4_pi += proc_control_B.A4[proc_control_B.i7 +
                  proc_control_B.b_k_e] * proc_control_B.A6[proc_control_B.i6 +
                  proc_control_B.i_ce];
                proc_control_B.i7 += 13;
              }

              proc_control_B.A4_h[proc_control_B.b_k_e + proc_control_B.i_ce] =
                proc_control_B.A4_pi;
            }

            proc_control_B.i_ce += 13;
          }

          proc_control_B.A4_pi = rt_powd_snf(proc_control_norm_p
            (proc_control_B.A4_h), 0.1);
          if ((proc_control_B.eta1 >= proc_control_B.A4_pi) || rtIsNaN
              (proc_control_B.A4_pi)) {
            proc_control_B.A4_pi = proc_control_B.eta1;
          }

          if ((proc_control_B.d6_j <= proc_control_B.A4_pi) || rtIsNaN
              (proc_control_B.A4_pi)) {
            proc_control_B.A4_pi = proc_control_B.d6_j;
          }

          proc_control_B.A4_pi = ceil(proc_control_log2(proc_control_B.A4_pi /
            5.3719203511481517));
          if (proc_control_B.A4_pi >= 0.0) {
            proc_control_B.exptj = proc_control_B.A4_pi;
          }

          proc_control_B.d6_j = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e <= 166;
               proc_control_B.b_k_e += 2) {
            tmp = _mm_loadu_pd(&A[proc_control_B.b_k_e]);
            tmp = _mm_div_pd(tmp, _mm_set1_pd(proc_control_B.d6_j));
            _mm_storeu_pd(&proc_control_B.T[proc_control_B.b_k_e], tmp);
            _mm_storeu_pd(&proc_control_B.dv32[0], tmp);
            proc_control_B.dv31[0] = fabs(proc_control_B.dv32[0]);
            proc_control_B.dv31[1] = fabs(proc_control_B.dv32[1]);
            tmp = _mm_loadu_pd(&proc_control_B.dv31[0]);
            _mm_storeu_pd(&proc_control_B.A4_h[proc_control_B.b_k_e], _mm_mul_pd
                          (_mm_set1_pd(0.05031554467093536), tmp));
          }

          for (proc_control_B.b_k_e = 168; proc_control_B.b_k_e < 169;
               proc_control_B.b_k_e++) {
            proc_control_B.eta1 = A[proc_control_B.b_k_e] / proc_control_B.d6_j;
            proc_control_B.T[proc_control_B.b_k_e] = proc_control_B.eta1;
            proc_control_B.A4_h[proc_control_B.b_k_e] = 0.05031554467093536 *
              fabs(proc_control_B.eta1);
          }

          proc_control_mpower(proc_control_B.A4_h, 27.0, proc_control_B.dv2);
          proc_control_B.A4_pi = ceil(proc_control_log2(proc_control_norm_p
            (proc_control_B.dv2) / proc_control_norm_p(proc_control_B.T) * 2.0 /
            2.2204460492503131E-16) / 26.0);
          if (!(proc_control_B.A4_pi >= 0.0)) {
            proc_control_B.A4_pi = 0.0;
          }

          proc_control_B.exptj += proc_control_B.A4_pi;
          if (rtIsInf(proc_control_B.exptj)) {
            proc_control_B.d6_j = proc_control_norm_p(A) / 5.3719203511481517;
            if ((!rtIsInf(proc_control_B.d6_j)) && (!rtIsNaN(proc_control_B.d6_j)))
            {
              proc_control_B.d6_j = frexp(proc_control_B.d6_j,
                &proc_control_B.eint);
              proc_control_B.exptj = proc_control_B.eint;
            } else {
              proc_control_B.exptj = 0.0;
            }

            if (proc_control_B.d6_j == 0.5) {
              proc_control_B.exptj--;
            }
          }

          proc_control_B.eint = 13;
        }

        if (proc_control_B.exptj != 0.0) {
          proc_control_B.d6_j = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.i_ce = 0; proc_control_B.i_ce <= 166;
               proc_control_B.i_ce += 2) {
            tmp = _mm_loadu_pd(&A[proc_control_B.i_ce]);
            _mm_storeu_pd(&A[proc_control_B.i_ce], _mm_div_pd(tmp, _mm_set1_pd
              (proc_control_B.d6_j)));
          }

          for (proc_control_B.i_ce = 168; proc_control_B.i_ce < 169;
               proc_control_B.i_ce++) {
            A[proc_control_B.i_ce] /= proc_control_B.d6_j;
          }

          proc_control_B.d6_j = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj);
          for (proc_control_B.i_ce = 0; proc_control_B.i_ce <= 166;
               proc_control_B.i_ce += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.A2[proc_control_B.i_ce]);
            _mm_storeu_pd(&proc_control_B.A2[proc_control_B.i_ce], _mm_div_pd
                          (tmp, _mm_set1_pd(proc_control_B.d6_j)));
          }

          for (proc_control_B.i_ce = 168; proc_control_B.i_ce < 169;
               proc_control_B.i_ce++) {
            proc_control_B.A2[proc_control_B.i_ce] /= proc_control_B.d6_j;
          }

          proc_control_B.d6_j = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj);
          for (proc_control_B.i_ce = 0; proc_control_B.i_ce <= 166;
               proc_control_B.i_ce += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.A4[proc_control_B.i_ce]);
            _mm_storeu_pd(&proc_control_B.A4[proc_control_B.i_ce], _mm_div_pd
                          (tmp, _mm_set1_pd(proc_control_B.d6_j)));
          }

          for (proc_control_B.i_ce = 168; proc_control_B.i_ce < 169;
               proc_control_B.i_ce++) {
            proc_control_B.A4[proc_control_B.i_ce] /= proc_control_B.d6_j;
          }

          proc_control_B.d6_j = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj);
          for (proc_control_B.i_ce = 0; proc_control_B.i_ce <= 166;
               proc_control_B.i_ce += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.A6[proc_control_B.i_ce]);
            _mm_storeu_pd(&proc_control_B.A6[proc_control_B.i_ce], _mm_div_pd
                          (tmp, _mm_set1_pd(proc_control_B.d6_j)));
          }

          for (proc_control_B.i_ce = 168; proc_control_B.i_ce < 169;
               proc_control_B.i_ce++) {
            proc_control_B.A6[proc_control_B.i_ce] /= proc_control_B.d6_j;
          }
        }

        if (proc_control_B.recomputeDiags) {
          for (proc_control_B.i_ce = 0; proc_control_B.i_ce < 12;
               proc_control_B.i_ce++) {
            proc_control_B.blockFormat[proc_control_B.i_ce] = 0;
          }

          proc_control_B.j_d = 0;
          while (proc_control_B.j_d + 1 < 12) {
            proc_control_B.d6_j = A[(13 * proc_control_B.j_d +
              proc_control_B.j_d) + 1];
            if (proc_control_B.d6_j != 0.0) {
              proc_control_B.blockFormat[proc_control_B.j_d] = 2;
              proc_control_B.blockFormat[proc_control_B.j_d + 1] = 0;
              proc_control_B.j_d += 2;
            } else if ((proc_control_B.d6_j == 0.0) && (A[((proc_control_B.j_d +
              1) * 13 + proc_control_B.j_d) + 2] == 0.0)) {
              proc_control_B.blockFormat[proc_control_B.j_d] = 1;
              proc_control_B.j_d++;
            } else {
              proc_control_B.blockFormat[proc_control_B.j_d] = 0;
              proc_control_B.j_d++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat[11] = 2;
          } else if ((proc_control_B.blockFormat[10] == 0) ||
                     (proc_control_B.blockFormat[10] == 1)) {
            proc_control_B.blockFormat[11] = 1;
          }
        }

        proc_control_padeApproximation(A, proc_control_B.A2, proc_control_B.A4,
          proc_control_B.A6, proc_control_B.eint, F);
        if (proc_control_B.recomputeDiags) {
          proc_control_recomputeBlockDiag(A, F, proc_control_B.blockFormat);
        }

        proc_control_B.eint = static_cast<int32_T>(proc_control_B.exptj) - 1;
        for (proc_control_B.j_d = 0; proc_control_B.j_d <= proc_control_B.eint;
             proc_control_B.j_d++) {
          for (proc_control_B.i_ce = 0; proc_control_B.i_ce < 13;
               proc_control_B.i_ce++) {
            proc_control_B.b_k_a = 0;
            for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 13;
                 proc_control_B.b_k_e++) {
              proc_control_B.exptj = 0.0;
              proc_control_B.i7 = 0;
              for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                   proc_control_B.i6++) {
                proc_control_B.exptj += F[proc_control_B.i7 +
                  proc_control_B.i_ce] * F[proc_control_B.i6 +
                  proc_control_B.b_k_a];
                proc_control_B.i7 += 13;
              }

              proc_control_B.A4[proc_control_B.b_k_a + proc_control_B.i_ce] =
                proc_control_B.exptj;
              proc_control_B.b_k_a += 13;
            }
          }

          memcpy(&F[0], &proc_control_B.A4[0], 169U * sizeof(real_T));
          if (proc_control_B.recomputeDiags) {
            for (proc_control_B.i_ce = 0; proc_control_B.i_ce <= 166;
                 proc_control_B.i_ce += 2) {
              tmp = _mm_loadu_pd(&A[proc_control_B.i_ce]);
              _mm_storeu_pd(&A[proc_control_B.i_ce], _mm_mul_pd(_mm_set1_pd(2.0),
                tmp));
            }

            for (proc_control_B.i_ce = 168; proc_control_B.i_ce < 169;
                 proc_control_B.i_ce++) {
              A[proc_control_B.i_ce] *= 2.0;
            }

            proc_control_recomputeBlockDiag(A, F, proc_control_B.blockFormat);
          }
        }
      }
    }
  }
}

void proc_control::proc_control_mldivide_pr35(const real_T A[36], real_T B[36])
{
  real_T c_A[36];
  real_T temp;
  int32_T ipiv[6];
  int32_T b;
  int32_T b_i;
  int32_T b_info;
  int32_T b_j;
  int32_T ip;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  memcpy(&c_A[0], &A[0], 36U * sizeof(real_T));
  proc_control_xgetrf_p(c_A, ipiv, &b_info);
  for (b_i = 0; b_i < 5; b_i++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    ip = ipiv[b_i];
    if (b_i + 1 != ip) {
      for (b_j = 0; b_j < 6; b_j++) {
        kAcol = 6 * b_j + b_i;
        temp = B[kAcol];
        tmp = (6 * b_j + ip) - 1;
        B[kAcol] = B[tmp];
        B[tmp] = temp;
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    ip = 6 * b_j - 1;
    for (b_i = 0; b_i < 6; b_i++) {
      kAcol = 6 * b_i - 1;
      tmp = (b_i + ip) + 1;
      if (B[tmp] != 0.0) {
        for (b_info = b_i + 2; b_info < 7; b_info++) {
          tmp_0 = b_info + ip;

          // Start for MATLABSystem: '<S71>/MATLAB System'
          B[tmp_0] -= c_A[b_info + kAcol] * B[tmp];
        }
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
    // Start for MATLABSystem: '<S71>/MATLAB System'
    ip = 6 * b_j;
    for (b_info = 5; b_info >= 0; b_info--) {
      kAcol = 6 * b_info;
      tmp = b_info + ip;
      temp = B[tmp];
      if (temp != 0.0) {
        B[tmp] = temp / c_A[b_info + kAcol];
        b = b_info - 1;
        for (b_i = 0; b_i <= b; b_i++) {
          tmp_0 = b_i + ip;
          B[tmp_0] -= c_A[b_i + kAcol] * B[tmp];
        }
      }
    }
  }
}

void proc_control::proc_control_ft_3_p(const real_T ct[1016], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv52[0], _mm_add_pd(_mm_set_pd(ct[498], ct[487]),
    _mm_set_pd(ct[926], ct[916])));
  proc_control_B.t1456 = proc_control_B.dv52[0];
  proc_control_B.t1457 = proc_control_B.dv52[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t1458 = ct[509] + ct[922];
  _mm_storeu_pd(&proc_control_B.dv52[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[13], ct[16]), _mm_set1_pd(ct[24])), _mm_set_pd(ct[520], ct[25])),
    _mm_set1_pd(ct[38])));
  proc_control_B.t1473 = proc_control_B.dv52[0];
  proc_control_B.t1487 = proc_control_B.dv52[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t1479 = proc_control_B.t1456 * ct[1015];
  proc_control_B.t1499 = -(proc_control_B.t1458 * ct[1014]);
  _mm_storeu_pd(&proc_control_B.dv52[0], _mm_sub_pd(_mm_sub_pd(_mm_add_pd
    (_mm_add_pd(_mm_loadu_pd(&ct[142]), _mm_set_pd(ct[700], ct[701])),
     _mm_mul_pd(_mm_set_pd(ct[28], ct[26]), _mm_set_pd(proc_control_B.t1457,
    proc_control_B.t1458))), _mm_set_pd(ct[338], ct[343])), _mm_set_pd(ct[353],
    ct[336])));
  proc_control_B.t1458 = proc_control_B.dv52[0];
  proc_control_B.t1527 = proc_control_B.dv52[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t1456 = (((ct[141] + ct[702]) + ct[27] * proc_control_B.t1456)
    - ct[335]) + ct[356];
  tmp = _mm_set_pd(-1.0, 1.0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv52[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_set_pd(ct[994],
    ct[304]), _mm_set_pd(ct[995], ct[305])), _mm_set_pd(ct[996], ct[312])),
    _mm_set_pd(ct[997], ct[333])), _mm_set_pd(ct[998], ct[357])), _mm_set_pd(ct
    [1001], ct[359])), _mm_set_pd(ct[1002], ct[361])), _mm_set_pd(ct[1007], ct
    [363])), _mm_set_pd(ct[1009], ct[387])), _mm_set_pd(ct[39], ct[418])),
    _mm_set_pd(ct[40], ct[419])), _mm_set_pd(ct[41], ct[420])), _mm_set_pd(ct[42],
    ct[421])), _mm_set_pd(ct[43], ct[422])), _mm_set_pd(ct[45], ct[423])),
    _mm_set_pd(ct[46], ct[424])), _mm_set_pd(ct[47], ct[425])), _mm_set_pd(ct[48],
    ct[426])), _mm_set_pd(ct[49], ct[427])), _mm_set_pd(ct[50], ct[428])),
    _mm_set_pd(ct[51], ct[429])), _mm_set_pd(ct[55], ct[430])), _mm_set_pd(ct[59],
    ct[431])), _mm_set_pd(ct[62], ct[432])), _mm_set_pd(ct[66], ct[433])),
    _mm_set_pd(ct[69], ct[434])), _mm_set_pd(ct[72], ct[435])), _mm_set_pd(ct[76],
    ct[436])), _mm_set_pd(ct[78], ct[437])), _mm_set_pd(ct[79], ct[438])),
    _mm_set_pd(ct[81], ct[439])), _mm_set_pd(ct[82], ct[440])), _mm_set_pd(ct[83],
    ct[441])), _mm_set_pd(ct[84], ct[442])), _mm_set_pd(ct[97], ct[443])),
    _mm_set_pd(ct[98], ct[444])), _mm_set_pd(ct[99], ct[445])), _mm_set_pd(ct
    [112], ct[446])), _mm_set_pd(ct[125], ct[447])), _mm_set_pd(ct[146], ct[452])),
    _mm_set_pd(ct[147], ct[453])), _mm_set_pd(ct[148], ct[458])), _mm_set_pd(ct
    [149], ct[464])), _mm_set_pd(ct[150], ct[511])), _mm_set_pd(ct[151], ct[514])),
    _mm_set_pd(ct[154], ct[517])), _mm_set_pd(ct[157], ct[532])), _mm_set_pd(ct
    [161], ct[533])), _mm_set_pd(ct[162], ct[534])), _mm_set_pd(ct[163], ct[536])),
    _mm_set_pd(ct[164], ct[537])), _mm_set_pd(ct[165], ct[538])), _mm_set_pd(ct
    [166], ct[539])), _mm_set_pd(ct[167], ct[540])), _mm_set_pd(ct[168], ct[542])),
    _mm_set_pd(ct[170], ct[543])), _mm_set_pd(ct[171], ct[548])), _mm_set_pd(ct
    [173], ct[549])), _mm_set_pd(ct[176], ct[554])), _mm_set_pd(ct[178], ct[555])),
    _mm_set_pd(ct[180], ct[558])), _mm_set_pd(ct[182], ct[560])), _mm_set_pd(ct
    [184], ct[562])), _mm_set_pd(ct[186], ct[563])), _mm_mul_pd(_mm_set_pd(ct
    [794], ct[564]), tmp)), _mm_mul_pd(_mm_set_pd(ct[795], ct[565]), tmp)),
    _mm_mul_pd(_mm_set_pd(ct[796], ct[567]), tmp)), _mm_mul_pd(_mm_set_pd(ct[850],
    ct[570]), tmp)), _mm_mul_pd(_mm_set_pd(ct[851], ct[573]), tmp)), _mm_set_pd
    (ct[196], ct[574])), _mm_set_pd(ct[197], ct[576])), _mm_set_pd(ct[198], ct
    [577])), _mm_set_pd(ct[199], ct[580])), _mm_set_pd(ct[200], ct[583])),
    _mm_set_pd(ct[201], ct[587])), _mm_set_pd(ct[202], ct[589])), _mm_set_pd(ct
    [204], ct[629])), _mm_set_pd(ct[206], ct[643])), _mm_set_pd(ct[207], ct[650])),
    _mm_set_pd(ct[208], ct[710])), _mm_set_pd(ct[210], ct[711])), _mm_set_pd(ct
    [211], ct[712])), _mm_set_pd(ct[212], ct[714])), _mm_set_pd(ct[213], ct[716])),
    _mm_set_pd(ct[214], ct[718])), _mm_set_pd(ct[216], ct[726])), _mm_set_pd(ct
    [217], ct[727])), _mm_set_pd(ct[218], ct[728])), _mm_set_pd(ct[222], ct[729])),
    _mm_set_pd(ct[223], ct[730])), _mm_set_pd(ct[224], ct[731])), _mm_set_pd(ct
    [225], ct[732])), _mm_set_pd(ct[229], ct[733])), _mm_set_pd(ct[230], ct[734])),
    _mm_set_pd(ct[232], ct[735])), _mm_set_pd(ct[233], ct[736])), _mm_set_pd(ct
    [240], ct[737])), _mm_set_pd(ct[242], ct[738])), _mm_set_pd(ct[245], ct[739])),
    _mm_set_pd(ct[246], ct[740])), _mm_set_pd(ct[251], ct[741])), _mm_set_pd(ct
    [252], ct[742])), _mm_set_pd(ct[253], ct[743])), _mm_set_pd(ct[254], ct[744])),
    _mm_set_pd(ct[256], ct[745])), _mm_set_pd(ct[257], ct[746])), _mm_set_pd(ct
    [258], ct[747])), _mm_set_pd(ct[259], ct[748])), _mm_set_pd(ct[260], ct[749])),
    _mm_set_pd(ct[261], ct[750])), _mm_set_pd(ct[262], ct[751])), _mm_set_pd(ct
    [263], ct[752])), _mm_set_pd(ct[264], ct[753])), _mm_set_pd(ct[265], ct[754])),
     _mm_set_pd(ct[266], ct[755])), _mm_set_pd(ct[267], ct[756])), _mm_set_pd
    (ct[268], ct[758])), _mm_set_pd(ct[269], ct[760])), _mm_set_pd(ct[270], ct
    [762])), _mm_set_pd(ct[271], ct[764])), _mm_set_pd(ct[272], ct[766])),
    _mm_set_pd(ct[273], ct[768])), _mm_set_pd(ct[274], ct[770])), _mm_set_pd(ct
    [275], ct[772])), _mm_set_pd(ct[276], ct[774])), _mm_set_pd(ct[277], ct[776])),
     _mm_set_pd(ct[278], ct[778])), _mm_set_pd(ct[279], ct[780])), _mm_set_pd
    (ct[281], ct[782])));
  proc_control_B.t1533_tmp = ct[17] * ct[528];
  proc_control_B.t1533_tmp_k = ct[18] * ct[541];
  proc_control_B.t1533_tmp_n = ct[19] * ct[559];
  proc_control_B.t1533 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.dv52
    [0] + ct[784]) + ct[786]) + ct[788]) + ct[790]) + ct[792]) + ct[807]) + ct
    [808]) + ct[814]) + ct[815]) + ct[820]) + ct[821]) + ct[830]) + ct[831]) +
    ct[837]) + ct[838]) + ct[847]) + ct[848]) + ct[878]) + ct[884]) + ct[888]) +
    ct[897]) + ct[898]) + ct[899]) + ct[900]) + ct[902]) + ct[904]) + ct[905]) +
    ct[906]) + ct[908]) + ct[909]) + ct[910]) + ct[912]) + ct[939]) + ct[940]) +
    ct[941]) + ct[942]) + ct[944]) + ct[945]) + ct[946]) + ct[947]) + ct[948]) +
    ct[949]) + ct[950]) + ct[951]) + ct[956]) + ct[957]) + ct[958]) + ct[959]) +
    ct[960]) + ct[961]) + ct[962]) + ct[963]) + ct[964]) + ct[965]) + ct[966]) +
                     ct[967]) + ct[968]) + ct[973]) + ct[974]) + ct[978]) + ct
                [979]) + ct[982]) + ct[983]) + ct[985]) + ct[986]) + ct[987]) +
          ct[988]) + ct[989]) + ct[990]) + ct[992]) + ct[993]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.dv52
    [1] + ct[282]) + ct[283]) + ct[284]) + ct[285]) + ct[286]) + ct[287]) + ct
    [288]) + ct[289]) + ct[290]) + ct[292]) + ct[293]) + ct[294]) + ct[295]) +
    ct[296]) + ct[297]) + ct[298]) + ct[299]) + ct[300]) + ct[301]) + ct[302]) +
    ct[303]) - ct[86]) - ct[88]) - ct[92]) - ct[94]) - ct[103]) - ct[105]) - ct
    [107]) - ct[111]) - ct[116]) - ct[120]) - ct[122]) - ct[124]) + ct[308]) +
    ct[309]) + ct[310]) + ct[311]) + ct[313]) + ct[314]) - ct[152]) - ct[153]) -
    ct[155]) - ct[156]) - ct[159]) - ct[160]) + ct[315]) + ct[316]) + ct[317]) +
                    ct[318]) + ct[319]) + ct[320]) + ct[324]) + ct[325]) + ct
               [326]) + ct[327]) + ct[328]) + ct[329]) +
           proc_control_B.t1533_tmp * ct[954]) + proc_control_B.t1533_tmp * ct
          [955]) + proc_control_B.t1533_tmp_k * ct[953]) +
        proc_control_B.t1533_tmp_k * ct[955]) + proc_control_B.t1533_tmp_n * ct
       [953]) + proc_control_B.t1533_tmp_n * ct[954]));
  out1[0] = (((ct[801] + ct[811]) - 1.0) * -ct[1013] + (ct[659] + ct[692]) * ct
             [1015]) + (ct[651] - ct[703]) * ct[1014];
  out1[1] = ((ct[651] + ct[703]) * ct[1013] - ((ct[793] + ct[811]) - 1.0) * ct
             [1014]) + (ct[670] - ct[681]) * ct[1015];
  out1[2] = (ct[38] * ct[1013] + ct[896] * ct[1014]) - ct[323] * ct[1015];
  out1[3] = (ct[20] * ct[26] * -0.5 - ct[21] * ct[27] / 2.0) - ct[22] * ct[28] /
    2.0;
  tmp_0 = _mm_set1_pd(2.0);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&out1[4], _mm_add_pd(_mm_add_pd(_mm_div_pd(_mm_mul_pd(_mm_set_pd
    (ct[22], ct[23]), _mm_set1_pd(ct[26])), tmp_0), _mm_mul_pd(_mm_div_pd
    (_mm_mul_pd(_mm_loadu_pd(&ct[22]), _mm_set1_pd(ct[27])), tmp_0), _mm_set_pd
    (1.0, -1.0))), _mm_mul_pd(_mm_div_pd(_mm_mul_pd(_mm_set_pd(ct[20], ct[21]),
    _mm_set1_pd(ct[28])), tmp_0), tmp)));
  out1[6] = (ct[21] * ct[26] * -0.5 + ct[20] * ct[27] / 2.0) + ct[23] * ct[28] /
    2.0;
  proc_control_B.t1533_tmp_n = ct[3] * ct[8];
  proc_control_B.out1_tmp_it = ct[5] * ct[6];
  proc_control_B.out1_tmp_im = ct[3] * ct[11];
  proc_control_B.out1_tmp_o2s = ct[4] * ct[8];
  proc_control_B.out1_tmp_dn5 = ct[5] * ct[7];
  proc_control_B.out1_tmp_iu = ct[8] * ct[10];
  proc_control_B.out1_tmp_gy = ct[4] * ct[11];
  proc_control_B.out1_tmp_cv = ct[10] * ct[11];
  proc_control_B.out1_tmp_een = ct[0] * ct[4];
  proc_control_B.out1_tmp_a5 = ct[0] * ct[5];
  proc_control_B.out1_tmp_hq = ct[1] * ct[3];
  proc_control_B.out1_tmp_ef = ct[2] * ct[3];
  proc_control_B.out1_tmp_dw = ct[0] * ct[8];
  proc_control_B.out1_tmp_g5h = ct[2] * ct[6];
  proc_control_B.out1_tmp_ev = ct[4] * ct[9];
  proc_control_B.out1_tmp_eq = ct[0] * ct[10];
  proc_control_B.out1_tmp_gm = ct[9] * ct[10];
  proc_control_B.out1_tmp_gk = ct[1] * ct[5];
  proc_control_B.out1_tmp_dz = ct[2] * ct[4];
  proc_control_B.out1_tmp_n1 = ct[3] * ct[7];
  proc_control_B.out1_tmp_p2 = ct[4] * ct[6];
  proc_control_B.out1_tmp_bs = ct[6] * ct[10];
  proc_control_B.out1_tmp_iw = ct[5] * ct[9];
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_a5 * ct[16];
  proc_control_B.out1_tmp_jv = proc_control_B.out1_tmp_ef * ct[16];
  proc_control_B.out1_tmp_gzp = proc_control_B.out1_tmp_iw * ct[16];
  proc_control_B.out1_tmp_nly = ct[3] * ct[14];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_bi * ct[18];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_jv * ct[18];
  proc_control_B.out1_tmp_fs = proc_control_B.out1_tmp_n1 * ct[15];
  proc_control_B.out1_tmp_aa = proc_control_B.out1_tmp_p2 * ct[15];
  proc_control_B.out1_tmp_g3y = proc_control_B.out1_tmp_bs * ct[15];
  proc_control_B.out1_tmp_tmp_iz = proc_control_B.t1533_tmp_n * ct[16];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_tmp_iz * ct[18];
  proc_control_B.out1_tmp_tmp_kv = proc_control_B.out1_tmp_it * ct[16];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_tmp_kv * ct[18];
  proc_control_B.out1_tmp_tmp_go = proc_control_B.out1_tmp_im * ct[16];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_tmp_go * ct[18];
  proc_control_B.out1_tmp_ey = ct[0] * ct[7];
  proc_control_B.out1_tmp_dlv = ct[1] * ct[6];
  proc_control_B.out1_tmp_jbr = ct[7] * ct[9];
  proc_control_B.out1_tmp_nx = proc_control_B.out1_tmp_ey * ct[15];
  proc_control_B.out1_tmp_ju = proc_control_B.out1_tmp_dlv * ct[15];
  proc_control_B.out1_tmp_pm = proc_control_B.out1_tmp_jbr * ct[15];
  proc_control_B.out1_tmp_aw = ct[6] * ct[14];
  proc_control_B.out1_tmp_df = proc_control_B.out1_tmp_nx * ct[18];
  proc_control_B.out1_tmp_pz = proc_control_B.out1_tmp_ju * ct[18];
  proc_control_B.out1_tmp_d2 = ((((((((((((((((((((ct[544] + ct[568]) + ct[578])
    + ct[802]) + ct[823]) + ct[907]) + ct[913]) + ct[969]) + ct[1003]) + ct[58])
    + ct[65]) + ct[68]) + ct[71]) + ct[73]) - ct[856]) - ct[860]) + ct[209]) +
    ct[221]) + ct[227]) + ct[241]) + ct[244]) - ct[80];
  proc_control_B.out1_tmp_pq = ct[1] * ct[8];
  proc_control_B.out1_tmp_fp = ct[2] * ct[7];
  proc_control_B.out1_tmp_gen = ct[1] * ct[11];
  proc_control_B.out1_tmp_dp = proc_control_B.out1_tmp_ey * ct[14];
  proc_control_B.out1_tmp_hg = proc_control_B.out1_tmp_dlv * ct[14];
  proc_control_B.out1_tmp_iei = proc_control_B.out1_tmp_jbr * ct[14];
  proc_control_B.out1_tmp_mzx = ct[2] * ct[10];
  proc_control_B.out1_tmp_cy2 = proc_control_B.out1_tmp_een * ct[19];
  proc_control_B.out1_tmp_lv = proc_control_B.out1_tmp_hq * ct[19];
  proc_control_B.out1_tmp_pb = ct[8] * ct[9];
  proc_control_B.out1_tmp_i1 = proc_control_B.out1_tmp_ev * ct[19];
  proc_control_B.out1_tmp_b3 = ct[0] * ct[11];
  proc_control_B.out1_tmp_gni = proc_control_B.out1_tmp_eq * ct[19];
  proc_control_B.out1_tmp_oqd = ct[9] * ct[11];
  proc_control_B.out1_tmp_b1 = proc_control_B.out1_tmp_gm * ct[19];
  proc_control_B.out1_tmp_ewq = proc_control_B.out1_tmp_een * ct[8];
  proc_control_B.out1_tmp_e1 = proc_control_B.out1_tmp_a5 * ct[7];
  proc_control_B.out1_tmp_lgy = proc_control_B.out1_tmp_hq * ct[8];
  proc_control_B.out1_tmp_cf = proc_control_B.out1_tmp_gk * ct[6];
  proc_control_B.out1_tmp_e5 = proc_control_B.out1_tmp_ef * ct[7];
  proc_control_B.out1_tmp_dwl = proc_control_B.out1_tmp_dz * ct[6];
  proc_control_B.out1_tmp_oe = proc_control_B.out1_tmp_o2s * ct[9];
  proc_control_B.out1_tmp_lw = proc_control_B.out1_tmp_dn5 * ct[9];
  proc_control_B.out1_tmp_hga = proc_control_B.out1_tmp_dw * ct[10];
  proc_control_B.out1_tmp_ln = proc_control_B.out1_tmp_g5h * ct[10];
  proc_control_B.out1_tmp_c5 = proc_control_B.out1_tmp_een * ct[11];
  proc_control_B.out1_tmp_cx = proc_control_B.out1_tmp_hq * ct[11];
  proc_control_B.out1_tmp_ag = proc_control_B.out1_tmp_pb * ct[10];
  proc_control_B.out1_tmp_i2x = proc_control_B.out1_tmp_ev * ct[11];
  proc_control_B.out1_tmp_lt = proc_control_B.out1_tmp_eq * ct[11];
  proc_control_B.out1_tmp_iyp = proc_control_B.out1_tmp_gm * ct[11];
  proc_control_B.out1_tmp_tmp_k = proc_control_B.out1_tmp_pq * ct[14];
  proc_control_B.out1_tmp_az = proc_control_B.out1_tmp_tmp_k * ct[15];
  proc_control_B.out1_tmp_tmp_i3 = proc_control_B.out1_tmp_fp * ct[14];
  proc_control_B.out1_tmp_ix = proc_control_B.out1_tmp_tmp_i3 * ct[15];
  proc_control_B.out1_tmp_tmp_c = proc_control_B.t1533_tmp_n * ct[14];
  proc_control_B.out1_tmp_c3 = proc_control_B.out1_tmp_tmp_c * ct[15];
  proc_control_B.out1_tmp_tmp_bv = proc_control_B.out1_tmp_it * ct[14];
  proc_control_B.out1_tmp_mb = proc_control_B.out1_tmp_tmp_bv * ct[15];
  proc_control_B.out1_tmp_tmp_nl = proc_control_B.out1_tmp_gen * ct[14];
  proc_control_B.out1_tmp_nnt = proc_control_B.out1_tmp_tmp_nl * ct[15];
  proc_control_B.out1_tmp_tmp_df = proc_control_B.out1_tmp_im * ct[14];
  proc_control_B.out1_tmp_chb = proc_control_B.out1_tmp_tmp_df * ct[15];
  proc_control_B.out1_tmp_na = ct[1] * ct[15];
  proc_control_B.t1457 = ((((((((ct[15] * ct[24] * ct[25] * ct[38] + (ct[306] +
    ct[699])) + ct[331]) - ct[321]) + ct[337]) - proc_control_B.t1457 * ct[1013])
    + ct[346]) + ct[12] * ct[24] * ct[839] * ct[38]) - ct[344]) *
    proc_control_B.t1533;
  proc_control_B.out1_tmp_hk = ct[6] * ct[15];
  proc_control_B.out1_tmp_iut = ct[7] * ct[14];
  proc_control_B.t1473 = ((((((((ct[698] - ct[144]) - proc_control_B.t1473) -
    proc_control_B.t1479) + proc_control_B.t1487) + ct[340]) - ct[341]) + ct[345])
    - ct[348]) + ct[351];
  proc_control_B.t1487 = proc_control_B.out1_tmp_n1 * ct[14];
  proc_control_B.t1479 = proc_control_B.out1_tmp_p2 * ct[14];
  proc_control_B.out1_tmp_ef2 = proc_control_B.out1_tmp_bs * ct[14];
  proc_control_B.out1_tmp_pc = ct[7] * ct[15];
  proc_control_B.t1499 = ((((((((ct[307] + ct[697]) + ct[322]) - ct[332]) + ct
    [339]) + proc_control_B.t1499) + ct[342]) + ct[349]) - ct[352]) - ct[347];
  proc_control_B.out1_tmp_ob = ct[2] * ct[16];
  proc_control_B.out1_tmp_lch = (ct[885] + ct[895]) + ct[911];
  proc_control_B.out1_tmp_br = ct[5] * ct[15];
  proc_control_B.out1_tmp_ciq = proc_control_B.out1_tmp_dw * ct[18];
  proc_control_B.out1_tmp_gl = proc_control_B.out1_tmp_g5h * ct[18];
  proc_control_B.out1_tmp_pn4 = proc_control_B.out1_tmp_b3 * ct[18];
  proc_control_B.out1_tmp_oo = proc_control_B.out1_tmp_oqd * ct[18];
  proc_control_B.out1_tmp_tmp_ihc = proc_control_B.out1_tmp_dz * ct[14];
  proc_control_B.out1_tmp_o1 = proc_control_B.out1_tmp_tmp_ihc * ct[16];
  proc_control_B.out1_tmp_cm3 = proc_control_B.t1487 * ct[16];
  proc_control_B.out1_tmp_jcw = proc_control_B.t1479 * ct[16];
  proc_control_B.out1_tmp_tmp_g = proc_control_B.out1_tmp_mzx * ct[14];
  proc_control_B.out1_tmp_oec = proc_control_B.out1_tmp_tmp_g * ct[16];
  proc_control_B.out1_tmp_d5 = proc_control_B.out1_tmp_ef2 * ct[16];
  proc_control_B.out1_tmp_il = proc_control_B.out1_tmp_gk * ct[14];
  proc_control_B.out1_tmp_pc2 = proc_control_B.out1_tmp_a5 * ct[14];
  proc_control_B.out1_tmp_dd = proc_control_B.out1_tmp_ef * ct[14];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_iw * ct[14];
  proc_control_B.out1_tmp_o5b = ct[3] * ct[16];
  proc_control_B.out1_tmp_du = ct[5] * ct[14];
  proc_control_B.out1_tmp_jf = ((((((((((((((((((((ct[551] + ct[572]) + ct[585])
    + ct[805]) + ct[844]) + ct[903]) + ct[915]) + ct[976]) + ct[1008]) + ct[54])
    + ct[61]) + ct[63]) + ct[64]) + ct[70]) - ct[857]) - ct[866]) + ct[205]) +
    ct[215]) + ct[228]) + ct[243]) + ct[248]) - ct[77];
  proc_control_B.out1_tmp_lb = proc_control_B.t1527 * proc_control_B.t1533;
  proc_control_B.out1_tmp_gyk = proc_control_B.t1473 * proc_control_B.t1533;
  proc_control_B.out1_tmp_le = proc_control_B.out1_tmp_o2s * ct[18];
  proc_control_B.out1_tmp_jo = proc_control_B.out1_tmp_dn5 * ct[18];
  proc_control_B.out1_tmp_pk = proc_control_B.out1_tmp_o2s * ct[19];
  proc_control_B.out1_tmp_d0 = proc_control_B.out1_tmp_dn5 * ct[19];
  proc_control_B.out1_tmp_kh = proc_control_B.out1_tmp_br * ct[16];
  proc_control_B.out1_tmp_m0 = proc_control_B.out1_tmp_pc * ct[16];
  proc_control_B.out1_tmp_fv = proc_control_B.out1_tmp_iu * ct[18];
  proc_control_B.out1_tmp_m4a = proc_control_B.out1_tmp_gy * ct[18];
  proc_control_B.out1_tmp_nf = proc_control_B.out1_tmp_iu * ct[19];
  proc_control_B.out1_tmp_mie = proc_control_B.out1_tmp_gy * ct[19];
  proc_control_B.out1_tmp_b0 = proc_control_B.out1_tmp_cv * ct[18];
  proc_control_B.out1_tmp_cc = proc_control_B.out1_tmp_cv * ct[19];
  proc_control_B.out1_tmp_gw = ct[5] * ct[19];
  proc_control_B.out1_tmp_ck = -ct[5] * ct[9];
  proc_control_B.out1_tmp_fdb = proc_control_B.out1_tmp_o5b * ct[19];
  proc_control_B.out1_tmp_jon = -proc_control_B.t1458 * proc_control_B.t1533;
  proc_control_B.out1_tmp_m5i = proc_control_B.t1533_tmp_n * ct[19];
  proc_control_B.out1_tmp_j4j = proc_control_B.out1_tmp_it * ct[19];
  proc_control_B.out1_tmp_ii = proc_control_B.out1_tmp_im * ct[19];
  proc_control_B.out1_tmp_i2p = proc_control_B.t1533_tmp_n * ct[15];
  proc_control_B.out1_tmp_hr = proc_control_B.out1_tmp_it * ct[15];
  proc_control_B.out1_tmp_djq = proc_control_B.out1_tmp_im * ct[15];
  proc_control_B.out1_tmp_lb5 = ct[6] * ct[16];
  proc_control_B.out1_tmp_f3 = ((((((((((((((ct[375] - ct[376]) - ct[393]) - ct
    [401]) + ct[409]) + ct[461]) - ct[462]) - ct[468]) - ct[475]) + ct[480]) -
    ct[516]) + ct[524]) - ct[606]) + ct[607]) - ct[616]) + ct[617];
  proc_control_B.out1_tmp_kgq = ct[7] * ct[18];
  proc_control_B.out1_tmp_lr = -ct[7] * ct[9];
  proc_control_B.out1_tmp_nz = ((((((((((((((ct[366] - ct[368]) - ct[389]) - ct
    [395]) + ct[407]) + ct[459]) - ct[460]) - ct[467]) - ct[473]) + ct[478]) -
    ct[513]) + ct[522]) - ct[601]) + ct[602]) - ct[614]) + ct[615];
  proc_control_B.out1_tmp_f0 = ct[3] * ct[15];
  proc_control_B.out1_tmp_ni = proc_control_B.out1_tmp_hk * ct[18];
  proc_control_B.out1_tmp_go = proc_control_B.out1_tmp_n1 * ct[18];
  proc_control_B.out1_tmp_cy0 = proc_control_B.out1_tmp_p2 * ct[18];
  proc_control_B.out1_tmp_gn3 = proc_control_B.out1_tmp_bs * ct[18];
  out1[7] = ((((((((((((((((((((((proc_control_B.out1_tmp_d2 - ct[16] * ct[367])
    + ct[16] * ct[369]) + ct[16] * ct[379]) + ct[16] * ct[390]) + ct[16] * ct
    [397]) + ct[16] * ct[722]) + proc_control_B.t1533_tmp_n * ct[559] * ct[621])
    - proc_control_B.out1_tmp_it * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_im * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_m5i * ct[559] * ct[611]) +
                        proc_control_B.out1_tmp_j4j * ct[559] * ct[611]) +
                       proc_control_B.out1_tmp_ii * ct[559] * ct[611]) +
                      proc_control_B.out1_tmp_pc2 * ct[16] * ct[19] * ct[611]) -
                     proc_control_B.out1_tmp_dd * ct[16] * ct[19] * ct[611]) -
                    proc_control_B.out1_tmp_fs * ct[16] * ct[19] * ct[611]) +
                   proc_control_B.out1_tmp_aa * ct[16] * ct[19] * ct[611]) -
                  proc_control_B.out1_tmp_fm * ct[16] * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_g3y * ct[16] * ct[19] * ct[611]) *
                proc_control_B.out1_tmp_jon -
                (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_lch + ct[914]) +
    ct[923]) + ct[943]) + ct[970]) + ct[1005]) + ct[34]) + ct[44]) + ct[56]) +
    ct[74]) + ct[169]) + ct[174]) + ct[255]) + ct[280]) + ct[291]) + ct[330]) +
    ct[350]) + ct[358]) + ct[360]) + ct[362]) + ct[386]) + ct[482]) + ct[483]) +
    ct[484]) + ct[485]) + ct[486]) + ct[488]) + ct[490]) + ct[492]) + ct[494]) +
    ct[495]) + ct[496]) + ct[499]) + ct[501]) + ct[502]) + ct[503]) + ct[505]) +
    ct[506]) + ct[507]) + ct[545]) + ct[552]) + ct[556]) + ct[557]) + ct[579]) +
    ct[581]) + ct[586]) + ct[588]) + ct[707]) + ct[708]) + ct[709]) + ct[713]) +
    ct[715]) + ct[717]) + ct[725]) + ct[757]) + ct[761]) + ct[765]) + ct[767]) +
    ct[769]) + ct[773]) + ct[777]) + ct[781]) + ct[783]) + ct[785]) + ct[789]) +
    ct[791]) + ct[972]) + ct[977]) + ct[980]) + ct[981]) + ct[172]) + ct[177]) +
    ct[181]) + ct[183]) + ct[185]) + ct[188]) + ct[194]) + ct[195]) + ct[512] *
    ct[528]) + ct[515] * ct[528]) - ct[521] * ct[528]) - ct[523] * ct[528]) +
    ct[0] * ct[547] * ct[631]) - ct[9] * ct[547] * ct[631]) +
    proc_control_B.out1_tmp_na * ct[535] * ct[631]) + proc_control_B.out1_tmp_ob
    * ct[535] * ct[631]) + proc_control_B.out1_tmp_f0 * ct[535] * ct[631]) +
    proc_control_B.out1_tmp_lb5 * ct[535] * ct[631]) +
    proc_control_B.out1_tmp_ciq * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_gl * ct[528] * ct[611]) + proc_control_B.out1_tmp_le
    * ct[541] * ct[611]) - proc_control_B.out1_tmp_jo * ct[541] * ct[611]) +
                        proc_control_B.out1_tmp_cy2 * ct[528] * ct[611]) -
                       proc_control_B.out1_tmp_lv * ct[528] * ct[611]) +
                      proc_control_B.out1_tmp_pk * ct[559] * ct[611]) -
                     proc_control_B.out1_tmp_d0 * ct[559] * ct[611]) +
                    proc_control_B.out1_tmp_kh * ct[528] * ct[631]) +
                   proc_control_B.out1_tmp_m0 * ct[528] * ct[631]) +
                  (((((((((((((((((((((((((((-ct[8] * ct[9] * ct[18] * ct[528] *
    ct[611] - proc_control_B.out1_tmp_i1 * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_fv * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_gni * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_pn4 * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_m4a * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_nf * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_mie * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_b1 * ct[528] * ct[611]) + proc_control_B.out1_tmp_oo
    * ct[528] * ct[611]) + proc_control_B.out1_tmp_b0 * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_cc * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_ewq * ct[18] * ct[19]) - proc_control_B.out1_tmp_e1 *
    ct[18] * ct[19]) - proc_control_B.out1_tmp_lgy * ct[18] * ct[19]) +
    proc_control_B.out1_tmp_cf * ct[18] * ct[19]) + proc_control_B.out1_tmp_e5 *
    ct[18] * ct[19]) - proc_control_B.out1_tmp_dwl * ct[18] * ct[19]) -
    proc_control_B.out1_tmp_oe * ct[18] * ct[19]) + proc_control_B.out1_tmp_lw *
    ct[18] * ct[19]) - proc_control_B.out1_tmp_hga * ct[18] * ct[19]) +
    proc_control_B.out1_tmp_ln * ct[18] * ct[19]) - proc_control_B.out1_tmp_c5 *
                        ct[18] * ct[19]) + proc_control_B.out1_tmp_cx * ct[18] *
                       ct[19]) + proc_control_B.out1_tmp_ag * ct[18] * ct[19]) +
                     proc_control_B.out1_tmp_i2x * ct[18] * ct[19]) +
                    proc_control_B.out1_tmp_lt * ct[18] * ct[19]) -
                   proc_control_B.out1_tmp_iyp * ct[18] * ct[19])) +
                 (((((((((((proc_control_B.out1_tmp_az * ct[18] * ct[611] -
    proc_control_B.out1_tmp_ix * ct[18] * ct[611]) + proc_control_B.out1_tmp_c3 *
    ct[18] * ct[611]) - proc_control_B.out1_tmp_mb * ct[18] * ct[611]) -
    proc_control_B.out1_tmp_il * ct[16] * ct[19] * ct[611]) +
                        proc_control_B.out1_tmp_o1 * ct[19] * ct[611]) -
                       proc_control_B.out1_tmp_cm3 * ct[19] * ct[611]) +
                      proc_control_B.out1_tmp_jcw * ct[19] * ct[611]) -
                     proc_control_B.out1_tmp_nnt * ct[18] * ct[611]) -
                    proc_control_B.out1_tmp_oec * ct[19] * ct[611]) -
                   proc_control_B.out1_tmp_chb * ct[18] * ct[611]) -
                  proc_control_B.out1_tmp_d5 * ct[19] * ct[611])) *
                proc_control_B.out1_tmp_lb) -
               ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_nz
    - ct[633]) + ct[639]) + ct[648]) + ct[653]) + ct[660]) - ct[672]) - ct[676])
    - ct[798]) - ct[803]) - ct[816]) - ct[825]) - ct[829]) + ct[853]) + ct[861])
    + ct[873]) - ct[883]) + ct[924]) + ct[101]) + ct[102]) + ct[104]) + ct[106])
    + ct[117]) - ct[127]) - ct[134]) - ct[5] * ct[575] * ct[631]) +
    proc_control_B.out1_tmp_bi * ct[621]) - proc_control_B.out1_tmp_jv * ct[621])
    - proc_control_B.out1_tmp_gzp * ct[621]) - proc_control_B.out1_tmp_nly * ct
    [559] * ct[631]) + proc_control_B.out1_tmp_gw * ct[575] * ct[621]) -
    proc_control_B.out1_tmp_p4 * ct[611]) + proc_control_B.out1_tmp_fb * ct[611])
                       - proc_control_B.out1_tmp_bi * ct[19] * ct[611]) +
                      proc_control_B.out1_tmp_jv * ct[19] * ct[611]) +
                     proc_control_B.out1_tmp_gzp * ct[18] * ct[611]) +
                    proc_control_B.out1_tmp_gzp * ct[19] * ct[611]) +
                   proc_control_B.out1_tmp_nly * ct[19] * ct[559] * ct[621]) +
                  proc_control_B.out1_tmp_p4 * ct[19] * ct[25]) -
                 proc_control_B.out1_tmp_fb * ct[19] * ct[25]) +
                proc_control_B.out1_tmp_ck * ct[16] * ct[18] * ct[19] * ct[25]) *
               proc_control_B.t1457) +
              ((((((((((((((((((proc_control_B.out1_tmp_jf - ct[15] * ct[371]) +
    ct[15] * ct[372]) - ct[15] * ct[380]) + ct[15] * ct[382]) + ct[15] * ct[391])
    + ct[15] * ct[403]) - proc_control_B.out1_tmp_n1 * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_p2 * ct[541] * ct[621]) - proc_control_B.out1_tmp_bs
                        * ct[541] * ct[621]) + proc_control_B.out1_tmp_go * ct
                       [541] * ct[611]) - proc_control_B.out1_tmp_cy0 * ct[541] *
                      ct[611]) + proc_control_B.out1_tmp_gn3 * ct[541] * ct[611])
                    + proc_control_B.out1_tmp_dp * ct[15] * ct[18] * ct[611]) -
                   proc_control_B.out1_tmp_hg * ct[15] * ct[18] * ct[611]) +
                  proc_control_B.out1_tmp_i2p * ct[16] * ct[18] * ct[611]) -
                 proc_control_B.out1_tmp_hr * ct[16] * ct[18] * ct[611]) -
                proc_control_B.out1_tmp_iei * ct[15] * ct[18] * ct[611]) -
               proc_control_B.out1_tmp_djq * ct[16] * ct[18] * ct[611]) *
              (-proc_control_B.t1456 * proc_control_B.t1533)) +
             (((((((((((((((((((((((((((((((((((((((ct[379] + ct[380]) - ct[382])
    + ct[397]) - ct[403]) + ct[608]) - ct[620]) + ct[622]) + ct[638]) + ct[667])
    + ct[669]) + ct[722]) + ct[832]) + ct[835]) + ct[929]) + ct[932]) + ct[1006])
    + ct[1010]) + ct[31]) + ct[33]) + ct[191]) + ct[192]) + ct[235]) + ct[239])
    - proc_control_B.out1_tmp_ma * ct[611]) + proc_control_B.out1_tmp_dv * ct
    [611]) - proc_control_B.out1_tmp_fs * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_aa * ct[19] * ct[611]) + proc_control_B.out1_tmp_efd
    * ct[611]) - proc_control_B.out1_tmp_g3y * ct[19] * ct[611]) -
                       proc_control_B.out1_tmp_ni * ct[528] * ct[621]) -
                      proc_control_B.out1_tmp_iut * ct[18] * ct[541] * ct[621])
                     + proc_control_B.out1_tmp_fdb * ct[528] * ct[621]) +
                    proc_control_B.out1_tmp_du * ct[19] * ct[559] * ct[621]) +
                   proc_control_B.out1_tmp_fs * ct[18] * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_aa * ct[18] * ct[19] * ct[25]) +
                 proc_control_B.out1_tmp_ma * ct[19] * ct[25]) -
                proc_control_B.out1_tmp_dv * ct[19] * ct[25]) +
               proc_control_B.out1_tmp_g3y * ct[18] * ct[19] * ct[25]) -
              proc_control_B.out1_tmp_efd * ct[19] * ct[25]) *
             (proc_control_B.t1499 * -proc_control_B.t1533)) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_f3 - ct[632])
    + ct[642]) + ct[649]) + ct[661]) + ct[665]) - ct[677]) - ct[683]) - ct[800])
    - ct[810]) - ct[833]) - ct[840]) - ct[846]) + ct[855]) + ct[868]) + ct[875])
    - ct[887]) + ct[927]) + ct[110]) + ct[114]) + ct[115]) + ct[121]) + ct[123])
                      - ct[131]) - ct[137]) - ct[7] * ct[553] * ct[631]) +
                   proc_control_B.out1_tmp_nx * ct[621]) -
                  proc_control_B.out1_tmp_ju * ct[621]) -
                 proc_control_B.out1_tmp_pm * ct[621]) -
                proc_control_B.out1_tmp_aw * ct[541] * ct[631]) +
               proc_control_B.out1_tmp_kgq * ct[553] * ct[621]) -
              proc_control_B.out1_tmp_df * ct[611]) + proc_control_B.out1_tmp_pz
             * ct[611]) - proc_control_B.out1_tmp_nx * ct[19] * ct[611]) +
           proc_control_B.out1_tmp_ju * ct[19] * ct[611]) +
          proc_control_B.out1_tmp_pm * ct[18] * ct[611]) +
         proc_control_B.out1_tmp_pm * ct[19] * ct[611]) +
        proc_control_B.out1_tmp_aw * ct[18] * ct[541] * ct[621]) +
       proc_control_B.out1_tmp_df * ct[19] * ct[25]) -
      proc_control_B.out1_tmp_pz * ct[19] * ct[25]) + proc_control_B.out1_tmp_lr
     * ct[15] * ct[18] * ct[19] * ct[25]) * proc_control_B.out1_tmp_gyk;
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_gk * ct[16];
  proc_control_B.out1_tmp_jv = proc_control_B.out1_tmp_dz * ct[16];
  proc_control_B.out1_tmp_gzp = proc_control_B.out1_tmp_mzx * ct[16];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_bi * ct[17];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_jv * ct[17];
  proc_control_B.out1_tmp_tmp_p = proc_control_B.out1_tmp_pq * ct[16];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_tmp_p * ct[17];
  proc_control_B.out1_tmp_tmp_bu = proc_control_B.out1_tmp_fp * ct[16];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_tmp_bu * ct[17];
  proc_control_B.out1_tmp_tmp_i3s = proc_control_B.out1_tmp_gen * ct[16];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_tmp_i3s * ct[17];
  proc_control_B.out1_tmp_df = proc_control_B.t1487 * ct[17];
  proc_control_B.out1_tmp_pz = proc_control_B.t1479 * ct[17];
  proc_control_B.out1_tmp_pr = ct[2] * ct[14];
  proc_control_B.out1_tmp_fy = proc_control_B.out1_tmp_o2s * ct[17];
  proc_control_B.out1_tmp_isj = proc_control_B.out1_tmp_dn5 * ct[17];
  proc_control_B.out1_tmp_iuw = ct[1] * ct[14];
  proc_control_B.out1_tmp_b11 = proc_control_B.out1_tmp_iu * ct[17];
  proc_control_B.out1_tmp_nad = proc_control_B.out1_tmp_gy * ct[17];
  proc_control_B.out1_tmp_by2 = proc_control_B.out1_tmp_cv * ct[17];
  proc_control_B.out1_tmp_ewq *= ct[17];
  proc_control_B.out1_tmp_e1 *= ct[17];
  proc_control_B.out1_tmp_lgy *= ct[17];
  proc_control_B.out1_tmp_cf *= ct[17];
  proc_control_B.out1_tmp_e5 *= ct[17];
  proc_control_B.out1_tmp_dwl *= ct[17];
  proc_control_B.out1_tmp_oe *= ct[17];
  proc_control_B.out1_tmp_lw *= ct[17];
  proc_control_B.out1_tmp_hga *= ct[17];
  proc_control_B.out1_tmp_ln *= ct[17];
  proc_control_B.out1_tmp_c5 *= ct[17];
  proc_control_B.out1_tmp_cx *= ct[17];
  proc_control_B.out1_tmp_ag *= ct[17];
  proc_control_B.out1_tmp_i2x *= ct[17];
  proc_control_B.out1_tmp_lt *= ct[17];
  proc_control_B.out1_tmp_iyp *= ct[17];
  proc_control_B.out1_tmp_tmp_lt = proc_control_B.out1_tmp_a5 * ct[15];
  proc_control_B.out1_tmp_ei = proc_control_B.out1_tmp_tmp_lt * ct[16];
  proc_control_B.out1_tmp_tmp_l3 = proc_control_B.out1_tmp_ef * ct[15];
  proc_control_B.out1_tmp_pw = proc_control_B.out1_tmp_tmp_l3 * ct[16];
  proc_control_B.out1_tmp_nx *= ct[16];
  proc_control_B.out1_tmp_ju *= ct[16];
  proc_control_B.out1_tmp_tmp_f4 = proc_control_B.out1_tmp_iw * ct[15];
  proc_control_B.out1_tmp_npj = proc_control_B.out1_tmp_tmp_f4 * ct[16];
  proc_control_B.out1_tmp_pm *= ct[16];
  proc_control_B.t1456 *= proc_control_B.t1533;
  proc_control_B.out1_tmp_gq = ((((((((((((((((((((ct[561] + ct[584]) + ct[590])
    + ct[827]) + ct[849]) + ct[901]) + ct[921]) + ct[984]) + ct[1012]) + ct[52])
    + ct[53]) + ct[57]) + ct[60]) + ct[67]) - ct[863]) - ct[869]) + ct[203]) +
    ct[219]) + ct[226]) + ct[247]) + ct[249]) - ct[75];
  proc_control_B.t1458 *= proc_control_B.t1533;
  proc_control_B.out1_tmp_fn1 = ct[5] * ct[16];
  proc_control_B.out1_tmp_j1t = proc_control_B.out1_tmp_gk * ct[15];
  proc_control_B.out1_tmp_eqx = proc_control_B.out1_tmp_dz * ct[15];
  proc_control_B.out1_tmp_n5 = proc_control_B.out1_tmp_mzx * ct[15];
  proc_control_B.out1_tmp_lm = ct[1] * ct[16];
  proc_control_B.out1_tmp_fu = ct[2] * ct[15];
  proc_control_B.t1527 = -proc_control_B.t1527 * proc_control_B.t1533;
  proc_control_B.out1_tmp_geq = ct[7] * ct[16];
  proc_control_B.out1_tmp_ltq = ct[2] * ct[19];
  proc_control_B.out1_tmp_kts = -ct[2] * ct[10];
  proc_control_B.out1_tmp_pme = proc_control_B.out1_tmp_lm * ct[19];
  proc_control_B.out1_tmp_ea = ((((((((((((((ct[384] - ct[385]) - ct[399]) - ct
    [405]) + ct[414]) + ct[456]) - ct[457]) - ct[472]) - ct[474]) + ct[481]) -
    ct[516]) + ct[524]) - ct[599]) + ct[600]) - ct[623]) + ct[624];
  proc_control_B.out1_tmp_es = proc_control_B.out1_tmp_pq * ct[19];
  proc_control_B.out1_tmp_pn5 = proc_control_B.out1_tmp_fp * ct[19];
  proc_control_B.out1_tmp_jg = proc_control_B.out1_tmp_gen * ct[19];
  proc_control_B.out1_tmp_gyc = proc_control_B.out1_tmp_dw * ct[17];
  proc_control_B.out1_tmp_gzg = proc_control_B.out1_tmp_g5h * ct[17];
  proc_control_B.out1_tmp_av2 = proc_control_B.out1_tmp_dw * ct[19];
  proc_control_B.out1_tmp_du1 = proc_control_B.out1_tmp_g5h * ct[19];
  proc_control_B.out1_tmp_bc = proc_control_B.out1_tmp_pb * ct[17];
  proc_control_B.out1_tmp_dg = proc_control_B.out1_tmp_pr * ct[16];
  proc_control_B.out1_tmp_fvc = proc_control_B.out1_tmp_aw * ct[16];
  proc_control_B.out1_tmp_mqv = proc_control_B.out1_tmp_pb * ct[19];
  proc_control_B.out1_tmp_ied = proc_control_B.out1_tmp_b3 * ct[17];
  proc_control_B.out1_tmp_ir = proc_control_B.out1_tmp_b3 * ct[19];
  proc_control_B.out1_tmp_kqj = proc_control_B.out1_tmp_oqd * ct[17];
  proc_control_B.out1_tmp_au = proc_control_B.out1_tmp_oqd * ct[19];
  proc_control_B.out1_tmp_m2 = proc_control_B.out1_tmp_ey * ct[17];
  proc_control_B.out1_tmp_cec = proc_control_B.out1_tmp_dlv * ct[17];
  proc_control_B.out1_tmp_bo = proc_control_B.out1_tmp_jbr * ct[17];
  proc_control_B.out1_tmp_pp = (((((((((((((((ct[364] - ct[365]) - ct[388]) -
    ct[394]) + ct[406]) + ct[454]) - ct[455]) - ct[465]) - ct[469]) + ct[476]) -
    ct[510]) + ct[519]) - ct[591]) + ct[592]) - ct[612]) + ct[613]) + ct[625];
  proc_control_B.out1_tmp_ko5 = -ct[6] * ct[10];
  proc_control_B.out1_tmp_ct = proc_control_B.out1_tmp_iut * ct[17];
  proc_control_B.out1_tmp_ilu = proc_control_B.out1_tmp_dp * ct[17];
  proc_control_B.out1_tmp_ocp = proc_control_B.out1_tmp_hg * ct[17];
  proc_control_B.out1_tmp_hy = proc_control_B.out1_tmp_iei * ct[17];
  proc_control_B.out1_tmp_bb = ct[6] * ct[17];
  out1[8] = ((((((((((((((((((((ct[16] * ct[370] + proc_control_B.out1_tmp_d2) -
    ct[16] * ct[371]) + ct[16] * ct[372]) + ct[16] * ct[391]) + ct[16] * ct[396])
    + ct[16] * ct[720]) + proc_control_B.out1_tmp_pq * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_fp * ct[559] * ct[621]) -
                        proc_control_B.out1_tmp_gen * ct[559] * ct[621]) -
                       proc_control_B.out1_tmp_es * ct[559] * ct[611]) +
                      proc_control_B.out1_tmp_pn5 * ct[559] * ct[611]) +
                     proc_control_B.out1_tmp_jg * ct[559] * ct[611]) -
                    proc_control_B.out1_tmp_j1t * ct[16] * ct[19] * ct[611]) +
                   proc_control_B.out1_tmp_eqx * ct[16] * ct[19] * ct[611]) +
                  proc_control_B.out1_tmp_dp * ct[16] * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_hg * ct[16] * ct[19] * ct[611]) -
                proc_control_B.out1_tmp_iei * ct[16] * ct[19] * ct[611]) -
               proc_control_B.out1_tmp_n5 * ct[16] * ct[19] * ct[611]) *
              proc_control_B.t1527 -
              (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((ct[914] + ct[923]) + ct[943]) + ct[952]) +
    ct[991]) + ct[1005]) + ct[29]) + ct[56]) + ct[74]) + ct[158]) + ct[174]) +
    ct[220]) + ct[231]) + ct[250]) + ct[255]) + ct[280]) + ct[291]) + ct[330]) +
    ct[350]) + ct[358]) + ct[360]) + ct[362]) + ct[386]) + ct[485]) + ct[486]) +
    ct[488]) + ct[489]) + ct[491]) + ct[492]) + ct[493]) + ct[496]) + ct[497]) +
    ct[499]) + ct[500]) + ct[503]) + ct[504]) + ct[505]) + ct[507]) + ct[546]) +
    ct[550]) + ct[552]) + ct[557]) + ct[569]) + ct[571]) + ct[586]) + ct[588]) +
    ct[704]) + ct[705]) + ct[706]) + ct[707]) + ct[708]) + ct[709]) + ct[713]) +
    ct[715]) + ct[717]) + ct[725]) + ct[759]) + ct[761]) + ct[763]) + ct[765]) +
    ct[771]) + ct[773]) + ct[775]) + ct[779]) + ct[781]) + ct[785]) + ct[787]) +
    ct[789]) + ct[971]) + ct[975]) + ct[977]) + ct[980]) + ct[175]) + ct[177]) +
    ct[179]) + ct[181]) + ct[187]) + ct[188]) + ct[189]) + ct[194]) + ct[508] *
    ct[541]) + ct[515] * ct[541]) - ct[518] * ct[541]) - ct[523] * ct[541]) +
    ct[4] * ct[566] * ct[631]) - ct[10] * ct[566] * ct[631]) +
    proc_control_B.out1_tmp_iuw * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_nly * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_fn1 * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_geq * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_gyc * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_gzg * ct[528] * ct[611]) +
                        proc_control_B.out1_tmp_fy * ct[541] * ct[611]) -
                       proc_control_B.out1_tmp_isj * ct[541] * ct[611]) +
                      proc_control_B.out1_tmp_cy2 * ct[541] * ct[611]) -
                     proc_control_B.out1_tmp_lv * ct[541] * ct[611]) +
                    proc_control_B.out1_tmp_av2 * ct[559] * ct[611]) -
                   proc_control_B.out1_tmp_du1 * ct[559] * ct[611]) -
                  proc_control_B.out1_tmp_bc * ct[528] * ct[611]) +
                 proc_control_B.out1_tmp_dg * ct[541] * ct[631]) +
                (((((((((((((((((((((((((((proc_control_B.out1_tmp_fvc * ct[541]
    * ct[631] - proc_control_B.out1_tmp_b11 * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_i1 * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_mqv * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_ied * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_nad * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_gni * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_ir * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_kqj * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_b1 * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_by2 * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_au * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_ewq * ct[19]) - proc_control_B.out1_tmp_e1 * ct[19])
    - proc_control_B.out1_tmp_lgy * ct[19]) + proc_control_B.out1_tmp_cf * ct[19])
    + proc_control_B.out1_tmp_e5 * ct[19]) - proc_control_B.out1_tmp_dwl * ct[19])
    - proc_control_B.out1_tmp_oe * ct[19]) + proc_control_B.out1_tmp_lw * ct[19])
                        - proc_control_B.out1_tmp_hga * ct[19]) +
                       proc_control_B.out1_tmp_ln * ct[19]) -
                      proc_control_B.out1_tmp_c5 * ct[19]) +
                     proc_control_B.out1_tmp_cx * ct[19]) +
                    proc_control_B.out1_tmp_ag * ct[19]) +
                   proc_control_B.out1_tmp_i2x * ct[19]) +
                  proc_control_B.out1_tmp_lt * ct[19]) -
                 proc_control_B.out1_tmp_iyp * ct[19])) +
               (((((((((((proc_control_B.out1_tmp_az * ct[17] * ct[611] -
    proc_control_B.out1_tmp_ix * ct[17] * ct[611]) + proc_control_B.out1_tmp_c3 *
    ct[17] * ct[611]) - proc_control_B.out1_tmp_mb * ct[17] * ct[611]) +
                       proc_control_B.out1_tmp_ei * ct[19] * ct[611]) -
                      proc_control_B.out1_tmp_pw * ct[19] * ct[611]) +
                     proc_control_B.out1_tmp_nx * ct[19] * ct[611]) -
                    proc_control_B.out1_tmp_ju * ct[19] * ct[611]) -
                   proc_control_B.out1_tmp_npj * ct[19] * ct[611]) -
                  proc_control_B.out1_tmp_pm * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_nnt * ct[17] * ct[611]) -
                proc_control_B.out1_tmp_chb * ct[17] * ct[611])) *
              proc_control_B.t1458) +
             ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_pp
    - ct[635]) + ct[644]) + ct[647]) + ct[657]) - ct[664]) - ct[674]) - ct[799])
    - ct[804]) - ct[812]) - ct[817]) - ct[818]) + ct[854]) + ct[858]) + ct[871])
    - ct[877]) + ct[918]) + ct[85]) + ct[87]) + ct[89]) + ct[90]) + ct[113]) -
    ct[128]) - ct[130]) - ct[2] * ct[575] * ct[631]) -
    proc_control_B.out1_tmp_bi * ct[621]) + proc_control_B.out1_tmp_jv * ct[621])
    - proc_control_B.out1_tmp_gzp * ct[621]) - proc_control_B.out1_tmp_na * ct
    [559] * ct[631]) + proc_control_B.out1_tmp_ltq * ct[575] * ct[621]) +
                        proc_control_B.out1_tmp_p4 * ct[611]) -
                       proc_control_B.out1_tmp_fb * ct[611]) +
                      proc_control_B.out1_tmp_bi * ct[19] * ct[611]) -
                     proc_control_B.out1_tmp_jv * ct[19] * ct[611]) +
                    proc_control_B.out1_tmp_gzp * ct[17] * ct[611]) +
                   proc_control_B.out1_tmp_gzp * ct[19] * ct[611]) +
                  proc_control_B.out1_tmp_na * ct[19] * ct[559] * ct[621]) -
                 proc_control_B.out1_tmp_p4 * ct[19] * ct[25]) +
                proc_control_B.out1_tmp_fb * ct[19] * ct[25]) +
               proc_control_B.out1_tmp_kts * ct[16] * ct[17] * ct[19] * ct[25]) *
              proc_control_B.t1457 + (((((((((((((((((((((((((((((((((((((((ct
    [371] - ct[377]) + ct[378]) + ct[402]) + ct[594]) + ct[618]) - ct[619]) +
    ct[627]) + ct[630]) - ct[666]) + ct[673]) + ct[721]) + ct[724]) + ct[809]) +
    ct[813]) - ct[832]) - ct[835]) + ct[920]) + ct[931]) + ct[1000]) + ct[1011])
    + ct[32]) + ct[236]) + ct[238]) + proc_control_B.out1_tmp_ma * ct[611]) -
    proc_control_B.out1_tmp_dv * ct[611]) - proc_control_B.out1_tmp_dp * ct[19] *
    ct[611]) + proc_control_B.out1_tmp_hg * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_iei * ct[19] * ct[611]) -
    proc_control_B.out1_tmp_efd * ct[611]) + proc_control_B.out1_tmp_hk * ct[17]
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_ct * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_pme * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_fu * ct[19] * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_ilu * ct[19] * ct[25]) - proc_control_B.out1_tmp_ocp
    * ct[19] * ct[25]) - proc_control_B.out1_tmp_ma * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_dv * ct[19] * ct[25]) - proc_control_B.out1_tmp_hy *
    ct[19] * ct[25]) + proc_control_B.out1_tmp_efd * ct[19] * ct[25]) *
              (proc_control_B.t1473 * -proc_control_B.t1533))) +
    (((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ea - ct[634])
    + ct[646]) + ct[655]) + ct[663]) + ct[668]) - ct[682]) - ct[689]) - ct[826])
    - ct[828]) - ct[833]) - ct[840]) - ct[843]) + ct[862]) + ct[865]) + ct[875])
    - ct[887]) + ct[928]) + ct[96]) + ct[118]) + ct[119]) + ct[121]) + ct[123])
                       - ct[133]) - ct[135]) - ct[6] * ct[535] * ct[631]) -
                    proc_control_B.t1487 * ct[621]) + proc_control_B.t1479 * ct
                   [621]) - proc_control_B.out1_tmp_ef2 * ct[621]) -
                 proc_control_B.out1_tmp_pc * ct[528] * ct[631]) +
                proc_control_B.out1_tmp_bb * ct[535] * ct[621]) +
               proc_control_B.out1_tmp_df * ct[611]) -
              proc_control_B.out1_tmp_pz * ct[611]) + proc_control_B.t1487 * ct
             [19] * ct[611]) - proc_control_B.t1479 * ct[19] * ct[611]) +
           proc_control_B.out1_tmp_ef2 * ct[17] * ct[611]) +
          proc_control_B.out1_tmp_ef2 * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_pc * ct[17] * ct[528] * ct[621]) -
        proc_control_B.out1_tmp_df * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_pz * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_ko5 * ct[14] * ct[17] * ct[19] * ct[25]) *
     -proc_control_B.t1533 * proc_control_B.t1499 -
     ((((((((((((((((((proc_control_B.out1_tmp_gq - ct[14] * ct[377]) + ct[14] *
                      ct[378]) + ct[14] * ct[379]) + ct[14] * ct[397]) + ct[14] *
                   ct[402]) + ct[14] * ct[722]) + proc_control_B.out1_tmp_ey *
                 ct[528] * ct[621]) - proc_control_B.out1_tmp_dlv * ct[528] *
                ct[621]) - proc_control_B.out1_tmp_jbr * ct[528] * ct[621]) -
              proc_control_B.out1_tmp_m2 * ct[528] * ct[611]) +
             proc_control_B.out1_tmp_cec * ct[528] * ct[611]) +
            proc_control_B.out1_tmp_bo * ct[528] * ct[611]) +
           proc_control_B.out1_tmp_tmp_k * ct[16] * ct[17] * ct[611]) -
          proc_control_B.out1_tmp_tmp_i3 * ct[16] * ct[17] * ct[611]) -
         proc_control_B.t1487 * ct[15] * ct[17] * ct[611]) +
        proc_control_B.t1479 * ct[15] * ct[17] * ct[611]) -
       proc_control_B.out1_tmp_ef2 * ct[15] * ct[17] * ct[611]) -
      proc_control_B.out1_tmp_tmp_nl * ct[16] * ct[17] * ct[611]) *
     proc_control_B.t1456);
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_pq * ct[15];
  proc_control_B.out1_tmp_jv = proc_control_B.out1_tmp_fp * ct[15];
  proc_control_B.out1_tmp_gzp = proc_control_B.out1_tmp_gen * ct[15];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_bi * ct[17];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_jv * ct[17];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_tmp_c * ct[17];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_tmp_bv * ct[17];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_j1t * ct[17];
  proc_control_B.out1_tmp_df = proc_control_B.out1_tmp_eqx * ct[17];
  proc_control_B.out1_tmp_pz = proc_control_B.out1_tmp_n5 * ct[17];
  proc_control_B.out1_tmp_d2 = ((((((((((((((ct[381] - ct[383]) - ct[398]) - ct
    [404]) + ct[413]) + ct[450]) - ct[451]) - ct[466]) - ct[471]) + ct[479]) -
    ct[513]) + ct[522]) - ct[597]) + ct[598]) - ct[609]) + ct[610];
  proc_control_B.out1_tmp_az = -ct[1] * ct[11];
  proc_control_B.out1_tmp_ix = proc_control_B.out1_tmp_gk * ct[18];
  proc_control_B.out1_tmp_c3 = proc_control_B.out1_tmp_dz * ct[18];
  proc_control_B.out1_tmp_mb = proc_control_B.out1_tmp_mzx * ct[18];
  proc_control_B.out1_tmp_nnt = proc_control_B.out1_tmp_fu * ct[18];
  proc_control_B.out1_tmp_chb = ct[1] * ct[18];
  proc_control_B.t1487 = proc_control_B.t1499 * proc_control_B.t1533;
  proc_control_B.t1479 = proc_control_B.out1_tmp_a5 * ct[17];
  proc_control_B.out1_tmp_ef2 = proc_control_B.out1_tmp_ef * ct[17];
  proc_control_B.t1499 = proc_control_B.out1_tmp_iw * ct[17];
  proc_control_B.out1_tmp_pdd = proc_control_B.out1_tmp_du * ct[17];
  proc_control_B.out1_tmp_mo = proc_control_B.out1_tmp_pc2 * ct[17];
  proc_control_B.out1_tmp_my = proc_control_B.out1_tmp_dd * ct[17];
  proc_control_B.out1_tmp_lbl = proc_control_B.out1_tmp_fm * ct[17];
  proc_control_B.out1_tmp_am = ct[3] * ct[17];
  proc_control_B.out1_tmp_hv = -ct[3] * ct[11];
  proc_control_B.out1_tmp_ddu = (((((((((((((((ct[373] - ct[374]) - ct[392]) -
    ct[400]) + ct[408]) + ct[448]) - ct[449]) - ct[463]) - ct[470]) + ct[477]) -
    ct[510]) + ct[519]) - ct[595]) + ct[596]) - ct[604]) + ct[605]) + ct[628];
  proc_control_B.out1_tmp_as = proc_control_B.out1_tmp_pb * ct[18];
  proc_control_B.out1_tmp_en = proc_control_B.out1_tmp_een * ct[17];
  proc_control_B.out1_tmp_nadk = proc_control_B.out1_tmp_hq * ct[17];
  proc_control_B.out1_tmp_olg = proc_control_B.out1_tmp_een * ct[18];
  proc_control_B.out1_tmp_ad = proc_control_B.out1_tmp_hq * ct[18];
  proc_control_B.out1_tmp_bic = proc_control_B.out1_tmp_ev * ct[17];
  proc_control_B.out1_tmp_ba = proc_control_B.out1_tmp_iuw * ct[15];
  proc_control_B.out1_tmp_mg4 = proc_control_B.out1_tmp_nly * ct[15];
  proc_control_B.out1_tmp_mc = proc_control_B.out1_tmp_ev * ct[18];
  proc_control_B.out1_tmp_kw = proc_control_B.out1_tmp_eq * ct[17];
  proc_control_B.out1_tmp_mcj = proc_control_B.out1_tmp_eq * ct[18];
  proc_control_B.out1_tmp_hkh = proc_control_B.out1_tmp_gm * ct[17];
  proc_control_B.out1_tmp_i15 = proc_control_B.out1_tmp_gm * ct[18];
  out1[9] = (((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ddu
    - ct[637]) + ct[640]) + ct[652]) + ct[658]) - ct[671]) - ct[675]) - ct[797])
    - ct[804]) - ct[812]) - ct[834]) - ct[842]) + ct[852]) + ct[864]) + ct[871])
    - ct[877]) + ct[919]) + ct[85]) + ct[87]) + ct[93]) + ct[95]) + ct[100]) -
    ct[126]) - ct[132]) - ct[1] * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_bi * ct[621]) - proc_control_B.out1_tmp_jv * ct[621])
    - proc_control_B.out1_tmp_gzp * ct[621]) - proc_control_B.out1_tmp_ob * ct
    [541] * ct[631]) + proc_control_B.out1_tmp_chb * ct[553] * ct[621]) -
                        proc_control_B.out1_tmp_p4 * ct[611]) +
                       proc_control_B.out1_tmp_fb * ct[611]) -
                      proc_control_B.out1_tmp_bi * ct[18] * ct[611]) +
                     proc_control_B.out1_tmp_jv * ct[18] * ct[611]) +
                    proc_control_B.out1_tmp_gzp * ct[17] * ct[611]) +
                   proc_control_B.out1_tmp_gzp * ct[18] * ct[611]) +
                  proc_control_B.out1_tmp_ob * ct[18] * ct[541] * ct[621]) +
                 proc_control_B.out1_tmp_p4 * ct[18] * ct[25]) -
                proc_control_B.out1_tmp_fb * ct[18] * ct[25]) +
               proc_control_B.out1_tmp_az * ct[15] * ct[17] * ct[18] * ct[25]) *
              -proc_control_B.t1533 * proc_control_B.t1473 -
              (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_lch + ct[952]) + ct
    [970]) + ct[991]) + ct[29]) + ct[34]) + ct[44]) + ct[158]) + ct[169]) + ct
    [220]) + ct[231]) + ct[250]) + ct[255]) + ct[280]) + ct[291]) + ct[330]) +
    ct[350]) + ct[358]) + ct[360]) + ct[362]) + ct[386]) + ct[482]) + ct[483]) +
    ct[484]) + ct[489]) + ct[490]) + ct[491]) + ct[493]) + ct[494]) + ct[495]) +
    ct[497]) + ct[500]) + ct[501]) + ct[502]) + ct[504]) + ct[506]) + ct[545]) +
    ct[546]) + ct[550]) + ct[556]) + ct[569]) + ct[571]) + ct[579]) + ct[581]) +
    ct[704]) + ct[705]) + ct[706]) + ct[707]) + ct[708]) + ct[709]) + ct[713]) +
    ct[715]) + ct[717]) + ct[725]) + ct[757]) + ct[759]) + ct[763]) + ct[767]) +
    ct[769]) + ct[771]) + ct[775]) + ct[777]) + ct[779]) + ct[783]) + ct[787]) +
    ct[791]) + ct[971]) + ct[972]) + ct[975]) + ct[981]) + ct[172]) + ct[175]) +
    ct[179]) + ct[183]) + ct[185]) + ct[187]) + ct[189]) + ct[195]) + ct[508] *
    ct[559]) + ct[512] * ct[559]) - ct[518] * ct[559]) - ct[521] * ct[559]) +
    ct[8] * ct[582] * ct[631]) - ct[11] * ct[582] * ct[631]) +
    proc_control_B.out1_tmp_pr * ct[575] * ct[631]) + proc_control_B.out1_tmp_br
    * ct[575] * ct[631]) + proc_control_B.out1_tmp_aw * ct[575] * ct[631]) +
    proc_control_B.out1_tmp_pc * ct[575] * ct[631]) + proc_control_B.out1_tmp_en
    * ct[528] * ct[611]) - proc_control_B.out1_tmp_nadk * ct[528] * ct[611]) +
                        proc_control_B.out1_tmp_fy * ct[559] * ct[611]) -
                       proc_control_B.out1_tmp_isj * ct[559] * ct[611]) +
                      proc_control_B.out1_tmp_olg * ct[541] * ct[611]) -
                     proc_control_B.out1_tmp_ad * ct[541] * ct[611]) +
                    proc_control_B.out1_tmp_ciq * ct[559] * ct[611]) -
                   proc_control_B.out1_tmp_gl * ct[559] * ct[611]) -
                  proc_control_B.out1_tmp_bic * ct[528] * ct[611]) +
                 proc_control_B.out1_tmp_ba * ct[559] * ct[631]) +
                (((((((((((((((((((((((((((proc_control_B.out1_tmp_mg4 * ct[559]
    * ct[631] - proc_control_B.out1_tmp_mc * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_as * ct[559] * ct[611]) - proc_control_B.out1_tmp_kw
    * ct[528] * ct[611]) - proc_control_B.out1_tmp_b11 * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_mcj * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_nad * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_pn4 * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_hkh * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_i15 * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_oo * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_by2 * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_ewq * ct[18]) - proc_control_B.out1_tmp_e1 * ct[18])
    - proc_control_B.out1_tmp_lgy * ct[18]) + proc_control_B.out1_tmp_cf * ct[18])
    + proc_control_B.out1_tmp_e5 * ct[18]) - proc_control_B.out1_tmp_dwl * ct[18])
    - proc_control_B.out1_tmp_oe * ct[18]) + proc_control_B.out1_tmp_lw * ct[18])
                        - proc_control_B.out1_tmp_hga * ct[18]) +
                       proc_control_B.out1_tmp_ln * ct[18]) -
                      proc_control_B.out1_tmp_c5 * ct[18]) +
                     proc_control_B.out1_tmp_cx * ct[18]) +
                    proc_control_B.out1_tmp_ag * ct[18]) +
                   proc_control_B.out1_tmp_i2x * ct[18]) +
                  proc_control_B.out1_tmp_lt * ct[18]) -
                 proc_control_B.out1_tmp_iyp * ct[18])) + (((((((((((-ct[1] *
    ct[5] * ct[14] * ct[16] * ct[17] * ct[611] + proc_control_B.out1_tmp_o1 *
    ct[17] * ct[611]) - proc_control_B.out1_tmp_cm3 * ct[17] * ct[611]) +
    proc_control_B.out1_tmp_jcw * ct[17] * ct[611]) + proc_control_B.out1_tmp_ei
    * ct[18] * ct[611]) - proc_control_B.out1_tmp_pw * ct[18] * ct[611]) +
    proc_control_B.out1_tmp_nx * ct[18] * ct[611]) - proc_control_B.out1_tmp_ju *
    ct[18] * ct[611]) - proc_control_B.out1_tmp_npj * ct[18] * ct[611]) -
    proc_control_B.out1_tmp_pm * ct[18] * ct[611]) - proc_control_B.out1_tmp_oec
    * ct[17] * ct[611]) - proc_control_B.out1_tmp_d5 * ct[17] * ct[611])) *
              proc_control_B.t1456) - ((((((((((((((((((ct[14] * ct[370] +
    proc_control_B.out1_tmp_gq) - ct[14] * ct[380]) + ct[14] * ct[382]) + ct[14]
    * ct[396]) + ct[14] * ct[403]) + ct[14] * ct[720]) +
    proc_control_B.out1_tmp_a5 * ct[528] * ct[621]) - proc_control_B.out1_tmp_ef
    * ct[528] * ct[621]) - proc_control_B.out1_tmp_iw * ct[528] * ct[621]) -
    proc_control_B.t1479 * ct[528] * ct[611]) + proc_control_B.out1_tmp_ef2 *
    ct[528] * ct[611]) + proc_control_B.t1499 * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_il * ct[15] * ct[17] * ct[611]) +
    proc_control_B.out1_tmp_tmp_ihc * ct[15] * ct[17] * ct[611]) +
    proc_control_B.out1_tmp_tmp_c * ct[16] * ct[17] * ct[611]) -
    proc_control_B.out1_tmp_tmp_bv * ct[16] * ct[17] * ct[611]) -
    proc_control_B.out1_tmp_tmp_g * ct[15] * ct[17] * ct[611]) -
              proc_control_B.out1_tmp_tmp_df * ct[16] * ct[17] * ct[611]) *
             proc_control_B.t1458) +
    ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_d2 - ct
    [636]) + ct[645]) + ct[654]) + ct[656]) + ct[662]) - ct[680]) - ct[686]) -
    ct[816]) - ct[819]) - ct[829]) - ct[841]) - ct[845]) + ct[859]) + ct[867]) +
    ct[873]) - ct[883]) + ct[925]) + ct[91]) + ct[104]) + ct[106]) + ct[108]) +
    ct[109]) - ct[129]) - ct[136]) - ct[3] * ct[535] * ct[631]) +
                     proc_control_B.out1_tmp_tmp_c * ct[621]) -
                    proc_control_B.out1_tmp_tmp_bv * ct[621]) -
                   proc_control_B.out1_tmp_tmp_df * ct[621]) -
                  proc_control_B.out1_tmp_fn1 * ct[528] * ct[631]) +
                 proc_control_B.out1_tmp_am * ct[535] * ct[621]) -
                proc_control_B.out1_tmp_ma * ct[611]) +
               proc_control_B.out1_tmp_dv * ct[611]) -
              proc_control_B.out1_tmp_tmp_c * ct[18] * ct[611]) +
             proc_control_B.out1_tmp_tmp_bv * ct[18] * ct[611]) +
            proc_control_B.out1_tmp_tmp_df * ct[17] * ct[611]) +
           proc_control_B.out1_tmp_tmp_df * ct[18] * ct[611]) +
          proc_control_B.out1_tmp_fn1 * ct[17] * ct[528] * ct[621]) +
         proc_control_B.out1_tmp_ma * ct[18] * ct[25]) -
        proc_control_B.out1_tmp_dv * ct[18] * ct[25]) +
       proc_control_B.out1_tmp_hv * ct[14] * ct[17] * ct[18] * ct[25]) *
      proc_control_B.t1487 + (((((((((((((((((((((((((((((((((((((((ct[367] +
    ct[370]) + ct[396]) + ct[593]) + ct[603]) + ct[626]) + ct[630]) + ct[669]) +
    ct[719]) + ct[720]) + ct[723]) + ct[809]) + ct[813]) + ct[917]) + ct[930]) +
    ct[999]) + ct[1004]) + ct[1010]) + ct[30]) + ct[32]) + ct[191]) + ct[192]) +
    ct[234]) + ct[237]) - proc_control_B.out1_tmp_efd * ct[611]) +
    proc_control_B.out1_tmp_df * ct[611]) - proc_control_B.out1_tmp_pc2 * ct[18]
    * ct[611]) + proc_control_B.out1_tmp_dd * ct[18] * ct[611]) +
    proc_control_B.out1_tmp_fm * ct[18] * ct[611]) - proc_control_B.out1_tmp_pz *
    ct[611]) + proc_control_B.out1_tmp_o5b * ct[17] * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_pdd * ct[559] * ct[621]) -
              proc_control_B.out1_tmp_lm * ct[18] * ct[541] * ct[621]) -
             proc_control_B.out1_tmp_nnt * ct[559] * ct[621]) +
            proc_control_B.out1_tmp_mo * ct[18] * ct[25]) -
           proc_control_B.out1_tmp_my * ct[18] * ct[25]) +
          proc_control_B.out1_tmp_efd * ct[18] * ct[25]) -
         proc_control_B.out1_tmp_df * ct[18] * ct[25]) -
        proc_control_B.out1_tmp_lbl * ct[18] * ct[25]) +
       proc_control_B.out1_tmp_pz * ct[18] * ct[25]) * proc_control_B.t1457) +
     ((((((((((((((((((proc_control_B.out1_tmp_jf - ct[15] * ct[367]) + ct[15] *
                      ct[369]) - ct[15] * ct[377]) + ct[15] * ct[378]) + ct[15] *
                   ct[390]) + ct[15] * ct[402]) - proc_control_B.out1_tmp_gk *
                 ct[541] * ct[621]) + proc_control_B.out1_tmp_dz * ct[541] * ct
                [621]) - proc_control_B.out1_tmp_mzx * ct[541] * ct[621]) +
              proc_control_B.out1_tmp_ix * ct[541] * ct[611]) -
             proc_control_B.out1_tmp_c3 * ct[541] * ct[611]) +
            proc_control_B.out1_tmp_mb * ct[541] * ct[611]) +
           proc_control_B.out1_tmp_pc2 * ct[15] * ct[18] * ct[611]) -
          proc_control_B.out1_tmp_dd * ct[15] * ct[18] * ct[611]) +
         proc_control_B.out1_tmp_bi * ct[16] * ct[18] * ct[611]) -
        proc_control_B.out1_tmp_jv * ct[16] * ct[18] * ct[611]) -
       proc_control_B.out1_tmp_fm * ct[15] * ct[18] * ct[611]) -
      proc_control_B.out1_tmp_gzp * ct[16] * ct[18] * ct[611]) *
     proc_control_B.t1527);
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_tmp_k * ct[17];
  proc_control_B.out1_tmp_jv = proc_control_B.out1_tmp_tmp_i3 * ct[17];
  proc_control_B.out1_tmp_gzp = ct[2] * ct[18];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_mzx * ct[17];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_gk * ct[17];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_dz * ct[17];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_du * ct[15];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_na * ct[16];
  proc_control_B.out1_tmp_nx = ct[2] * ct[17];
  proc_control_B.out1_tmp_ju = proc_control_B.out1_tmp_fb * ct[18];
  proc_control_B.out1_tmp_pm = proc_control_B.out1_tmp_ma * ct[18];
  proc_control_B.out1_tmp_df = proc_control_B.out1_tmp_dv * ct[17];
  proc_control_B.out1_tmp_pz = proc_control_B.out1_tmp_efd * ct[18];
  proc_control_B.out1_tmp_ewq = proc_control_B.out1_tmp_tmp_p * ct[18];
  proc_control_B.out1_tmp_e1 = proc_control_B.out1_tmp_tmp_bu * ct[18];
  proc_control_B.out1_tmp_lgy = proc_control_B.out1_tmp_tmp_i3s * ct[18];
  proc_control_B.out1_tmp_cf = proc_control_B.out1_tmp_il * ct[17];
  proc_control_B.out1_tmp_e5 = proc_control_B.out1_tmp_tmp_ihc * ct[17];
  proc_control_B.out1_tmp_dwl = ct[1] * ct[17];
  proc_control_B.out1_tmp_oe = ct[1] * ct[19];
  proc_control_B.out1_tmp_lw = proc_control_B.out1_tmp_gen * ct[17];
  proc_control_B.out1_tmp_hga = proc_control_B.out1_tmp_pq * ct[17];
  proc_control_B.out1_tmp_ln = proc_control_B.out1_tmp_fp * ct[17];
  proc_control_B.out1_tmp_c5 = proc_control_B.out1_tmp_pq * ct[18];
  proc_control_B.out1_tmp_cx = proc_control_B.out1_tmp_fp * ct[18];
  proc_control_B.out1_tmp_ag = proc_control_B.out1_tmp_gen * ct[18];
  proc_control_B.out1_tmp_i2x = proc_control_B.out1_tmp_iut * ct[16];
  proc_control_B.out1_tmp_lt = proc_control_B.out1_tmp_fu * ct[16];
  proc_control_B.out1_tmp_iyp = proc_control_B.out1_tmp_hga * ct[18];
  proc_control_B.out1_tmp_na = proc_control_B.out1_tmp_ln * ct[18];
  proc_control_B.t1473 = proc_control_B.out1_tmp_i2x * ct[17];
  proc_control_B.out1_tmp_pc = proc_control_B.out1_tmp_lt * ct[18];
  proc_control_B.out1_tmp_ob = ct[8] * ct[18];
  proc_control_B.out1_tmp_lch = ct[4] * ct[19];
  proc_control_B.out1_tmp_o1 = ct[10] * ct[19];
  proc_control_B.out1_tmp_cm3 = ct[11] * ct[18];
  proc_control_B.out1_tmp_jcw = proc_control_B.out1_tmp_b11 * ct[18];
  proc_control_B.out1_tmp_oec = proc_control_B.out1_tmp_nad * ct[18];
  proc_control_B.out1_tmp_d5 = proc_control_B.out1_tmp_by2 * ct[18];
  proc_control_B.out1_tmp_jf = ct[8] * ct[17];
  proc_control_B.out1_tmp_ei = ct[10] * ct[17];
  proc_control_B.out1_tmp_pw = ct[11] * ct[17];
  proc_control_B.out1_tmp_npj = proc_control_B.out1_tmp_fy * ct[18];
  proc_control_B.out1_tmp_gq = proc_control_B.out1_tmp_isj * ct[18];
  proc_control_B.out1_tmp_fn1 = proc_control_B.out1_tmp_kh * ct[18];
  proc_control_B.t1527 = proc_control_B.out1_tmp_m0 * ct[18];
  proc_control_B.t1533 = ((((((((((((ct[412] - ct[417]) - ct[525]) - ct[526]) -
    ct[679]) - ct[685]) + ct[694]) + ct[695]) - ct[879]) + ct[889]) + ct[891]) +
    ct[933]) - ct[937]) + ct[140];
  proc_control_B.out1_tmp_tmp_c = proc_control_B.out1_tmp_jf * ct[18];
  proc_control_B.out1_tmp_tmp_bv = proc_control_B.out1_tmp_pw * ct[18];
  proc_control_B.out1_tmp_tmp_df = -ct[4] * ct[17];
  proc_control_B.out1_tmp_tmp_p = ct[4] * ct[17];
  proc_control_B.out1_tmp_tmp_bu = proc_control_B.out1_tmp_tmp_p * ct[19];
  proc_control_B.out1_tmp_tmp_i3s = proc_control_B.out1_tmp_ei * ct[19];
  proc_control_B.out1_tmp_pj = ((((((((((((ct[411] - ct[416]) - ct[527]) - ct
    [529]) - ct[678]) - ct[688]) + ct[691]) + ct[696]) - ct[880]) + ct[890]) +
    ct[893]) + ct[934]) - ct[938]) + ct[139];
  out1[10] =
    ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_d2 - ct
    [633]) + ct[645]) + ct[654]) + ct[656]) + ct[662]) - ct[680]) - ct[686]) -
    ct[803]) - ct[819]) - ct[829]) - ct[841]) - ct[845]) + ct[859]) + ct[867]) +
    ct[873]) - ct[883]) + ct[924]) + ct[91]) + ct[102]) + ct[106]) + ct[108]) +
    ct[109]) - ct[129]) - ct[136]) - ct[1] * ct[535] * ct[631]) +
                     proc_control_B.out1_tmp_tmp_k * ct[621]) -
                    proc_control_B.out1_tmp_tmp_i3 * ct[621]) -
                   proc_control_B.out1_tmp_tmp_nl * ct[621]) -
                  proc_control_B.out1_tmp_geq * ct[528] * ct[631]) +
                 proc_control_B.out1_tmp_dwl * ct[535] * ct[621]) -
                proc_control_B.out1_tmp_bi * ct[611]) +
               proc_control_B.out1_tmp_jv * ct[611]) -
              proc_control_B.out1_tmp_tmp_k * ct[18] * ct[611]) +
             proc_control_B.out1_tmp_tmp_i3 * ct[18] * ct[611]) +
            proc_control_B.out1_tmp_tmp_nl * ct[17] * ct[611]) +
           proc_control_B.out1_tmp_tmp_nl * ct[18] * ct[611]) +
          proc_control_B.out1_tmp_geq * ct[17] * ct[528] * ct[621]) +
         proc_control_B.out1_tmp_bi * ct[18] * ct[25]) -
        proc_control_B.out1_tmp_jv * ct[18] * ct[25]) +
       proc_control_B.out1_tmp_az * ct[14] * ct[17] * ct[18] * ct[25]) *
      proc_control_B.t1456 +
      (((((((((((((((((((((((((((((proc_control_B.out1_tmp_pj -
    proc_control_B.out1_tmp_gk * ct[621]) + proc_control_B.out1_tmp_dz * ct[621])
    - proc_control_B.out1_tmp_mzx * ct[621]) - ct[2] * ct[528] * ct[631]) - ct[2]
    * ct[559] * ct[631]) + proc_control_B.out1_tmp_fb * ct[611]) -
    proc_control_B.out1_tmp_ma * ct[611]) + proc_control_B.out1_tmp_ix * ct[611])
    - proc_control_B.out1_tmp_c3 * ct[611]) + proc_control_B.out1_tmp_gk * ct[19]
    * ct[611]) - proc_control_B.out1_tmp_dz * ct[19] * ct[611]) -
    proc_control_B.out1_tmp_efd * ct[631]) - proc_control_B.out1_tmp_dv * ct[631])
                      + proc_control_B.out1_tmp_p4 * ct[611]) +
                     proc_control_B.out1_tmp_mb * ct[611]) +
                    proc_control_B.out1_tmp_mzx * ct[19] * ct[611]) +
                   proc_control_B.out1_tmp_nx * ct[528] * ct[621]) +
                  proc_control_B.out1_tmp_gzp * ct[528] * ct[621]) +
                 proc_control_B.out1_tmp_gzp * ct[559] * ct[621]) +
                proc_control_B.out1_tmp_ltq * ct[559] * ct[621]) +
               proc_control_B.out1_tmp_p4 * ct[18] * ct[19]) -
              proc_control_B.out1_tmp_ju * ct[25]) + proc_control_B.out1_tmp_pm *
             ct[25]) - proc_control_B.out1_tmp_fb * ct[19] * ct[25]) +
           proc_control_B.out1_tmp_ma * ct[19] * ct[25]) -
          proc_control_B.out1_tmp_ix * ct[19] * ct[25]) +
         proc_control_B.out1_tmp_c3 * ct[19] * ct[25]) +
        ((((((((((((proc_control_B.out1_tmp_kts * ct[17] * ct[18] * ct[25] -
                    proc_control_B.out1_tmp_p4 * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_mb * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_df * ct[621]) +
                 proc_control_B.out1_tmp_pz * ct[621]) +
                proc_control_B.out1_tmp_dv * ct[18] * ct[621]) +
               proc_control_B.out1_tmp_efd * ct[19] * ct[621]) -
              proc_control_B.out1_tmp_nx * ct[18] * ct[528] * ct[611]) -
             proc_control_B.out1_tmp_gzp * ct[19] * ct[559] * ct[611]) +
            proc_control_B.out1_tmp_ju * ct[19]) - proc_control_B.out1_tmp_pm *
           ct[19]) - proc_control_B.out1_tmp_df * ct[18] * ct[611]) -
         proc_control_B.out1_tmp_pz * ct[19] * ct[611])) * proc_control_B.t1457
       - (((((((((((((((((((((((((((((((((((((((ct[370] + ct[377]) - ct[378]) +
    ct[396]) - ct[402]) + ct[603]) - ct[618]) + ct[619]) + ct[638]) + ct[666]) +
    ct[669]) + ct[720]) + ct[806]) + ct[824]) + ct[929]) + ct[932]) + ct[1004])
    + ct[1010]) + ct[30]) + ct[33]) + ct[190]) + ct[193]) + ct[235]) + ct[239])
    - proc_control_B.out1_tmp_ewq * ct[611]) + proc_control_B.out1_tmp_e1 * ct
                        [611]) - proc_control_B.out1_tmp_j1t * ct[19] * ct[611])
                      + proc_control_B.out1_tmp_eqx * ct[19] * ct[611]) +
                     proc_control_B.out1_tmp_lgy * ct[611]) -
                    proc_control_B.out1_tmp_n5 * ct[19] * ct[611]) -
                   proc_control_B.out1_tmp_nnt * ct[528] * ct[621]) -
                  proc_control_B.out1_tmp_du * ct[18] * ct[541] * ct[621]) +
                 proc_control_B.out1_tmp_pme * ct[528] * ct[621]) +
                proc_control_B.out1_tmp_iut * ct[19] * ct[559] * ct[621]) +
               proc_control_B.out1_tmp_j1t * ct[18] * ct[19] * ct[25]) -
              proc_control_B.out1_tmp_eqx * ct[18] * ct[19] * ct[25]) +
             proc_control_B.out1_tmp_ewq * ct[19] * ct[25]) -
            proc_control_B.out1_tmp_e1 * ct[19] * ct[25]) +
           proc_control_B.out1_tmp_n5 * ct[18] * ct[19] * ct[25]) -
          proc_control_B.out1_tmp_lgy * ct[19] * ct[25]) *
       proc_control_B.out1_tmp_lb)) -
     ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ea - ct[632])
    + ct[646]) + ct[655]) + ct[663]) + ct[668]) - ct[682]) - ct[689]) - ct[810])
    - ct[826]) - ct[828]) - ct[840]) - ct[843]) + ct[862]) + ct[865]) + ct[875])
    - ct[887]) + ct[927]) + ct[96]) + ct[115]) + ct[118]) + ct[119]) + ct[123])
                       - ct[133]) - ct[135]) - ct[2] * ct[535] * ct[631]) -
                    proc_control_B.out1_tmp_il * ct[621]) +
                   proc_control_B.out1_tmp_tmp_ihc * ct[621]) -
                  proc_control_B.out1_tmp_tmp_g * ct[621]) -
                 proc_control_B.out1_tmp_br * ct[528] * ct[631]) +
                proc_control_B.out1_tmp_nx * ct[535] * ct[621]) +
               proc_control_B.out1_tmp_cf * ct[611]) -
              proc_control_B.out1_tmp_e5 * ct[611]) + proc_control_B.out1_tmp_il
             * ct[19] * ct[611]) - proc_control_B.out1_tmp_tmp_ihc * ct[19] *
            ct[611]) + proc_control_B.out1_tmp_tmp_g * ct[17] * ct[611]) +
          proc_control_B.out1_tmp_tmp_g * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_br * ct[17] * ct[528] * ct[621]) -
        proc_control_B.out1_tmp_cf * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_e5 * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_kts * ct[14] * ct[17] * ct[19] * ct[25]) *
     proc_control_B.t1458) + ((((((((((((((((((((((((((((((((((((((((((ct[512] +
    ct[515]) - ct[521]) - ct[523]) - ct[872]) - ct[874]) + ct[882]) + ct[886]) -
    ct[35]) - ct[36]) - ct[547] * ct[641]) - proc_control_B.out1_tmp_o2s * ct
    [621]) + proc_control_B.out1_tmp_dn5 * ct[621]) + proc_control_B.out1_tmp_iu
    * ct[621]) + proc_control_B.out1_tmp_gy * ct[621]) -
    proc_control_B.out1_tmp_cv * ct[621]) + ct[4] * ct[528] * ct[631]) + ct[8] *
    ct[528] * ct[631]) - ct[10] * ct[528] * ct[631]) - ct[11] * ct[528] * ct[631])
    + ct[17] * ct[547] * ct[631]) + ct[18] * ct[528] * ct[541] * ct[631]) + ct
    [19] * ct[528] * ct[559] * ct[631]) + proc_control_B.out1_tmp_fy * ct[611])
    - proc_control_B.out1_tmp_isj * ct[611]) + proc_control_B.out1_tmp_le * ct
    [611]) - proc_control_B.out1_tmp_jo * ct[611]) + proc_control_B.out1_tmp_pk *
    ct[611]) - proc_control_B.out1_tmp_d0 * ct[611]) +
    proc_control_B.out1_tmp_kh * ct[631]) + proc_control_B.out1_tmp_m0 * ct[631])
    - proc_control_B.out1_tmp_b11 * ct[611]) - proc_control_B.out1_tmp_nad * ct
    [611]) - proc_control_B.out1_tmp_fv * ct[611]) - proc_control_B.out1_tmp_m4a
    * ct[611]) - proc_control_B.out1_tmp_nf * ct[611]) -
    proc_control_B.out1_tmp_mie * ct[611]) + proc_control_B.out1_tmp_by2 * ct
    [611]) + proc_control_B.out1_tmp_b0 * ct[611]) + proc_control_B.out1_tmp_cc *
    ct[611]) + (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_df * ct
    [528] * ct[621] - proc_control_B.out1_tmp_jf * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_ob * ct[528] * ct[621]) - proc_control_B.out1_tmp_ob
    * ct[559] * ct[621]) - proc_control_B.out1_tmp_lch * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_lch * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_ei * ct[528] * ct[621]) + proc_control_B.out1_tmp_pw
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_o1 * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_cm3 * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_o1 * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_cm3 * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_jcw * ct[19]) - proc_control_B.out1_tmp_oec * ct[19])
    + proc_control_B.out1_tmp_d5 * ct[19]) - proc_control_B.out1_tmp_npj * ct[25])
    + proc_control_B.out1_tmp_gq * ct[25]) - proc_control_B.out1_tmp_fy * ct[19]
    * ct[25]) + proc_control_B.out1_tmp_isj * ct[19] * ct[25]) -
    proc_control_B.out1_tmp_le * ct[19] * ct[25]) + proc_control_B.out1_tmp_jo *
    ct[19] * ct[25]) + proc_control_B.out1_tmp_jcw * ct[25]) +
                       proc_control_B.out1_tmp_oec * ct[25]) +
                      proc_control_B.out1_tmp_b11 * ct[19] * ct[25]) +
                     proc_control_B.out1_tmp_nad * ct[19] * ct[25]) +
                    proc_control_B.out1_tmp_fv * ct[19] * ct[25]) +
                   proc_control_B.out1_tmp_m4a * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_d5 * ct[25]) -
                 proc_control_B.out1_tmp_fn1 * ct[621]) - proc_control_B.t1527 *
                ct[621])) + (((((((((((((((-ct[10] * ct[11] * ct[17] * ct[19] *
    ct[25] - proc_control_B.out1_tmp_kh * ct[19] * ct[621]) -
    proc_control_B.out1_tmp_m0 * ct[19] * ct[621]) - proc_control_B.out1_tmp_b0 *
    ct[19] * ct[25]) + proc_control_B.out1_tmp_tmp_c * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_tmp_bu * ct[528] * ct[611]) + ct[4] * ct[18] * ct[19]
    * ct[541] * ct[611]) + proc_control_B.out1_tmp_ob * ct[19] * ct[559] * ct
    [611]) - proc_control_B.out1_tmp_tmp_i3s * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_tmp_bv * ct[528] * ct[611]) - ct[10] * ct[18] * ct
    [19] * ct[541] * ct[611]) - proc_control_B.out1_tmp_cm3 * ct[19] * ct[559] *
    ct[611]) + proc_control_B.out1_tmp_npj * ct[19]) -
    proc_control_B.out1_tmp_gq * ct[19]) + proc_control_B.out1_tmp_fn1 * ct[19] *
    ct[611]) + proc_control_B.t1527 * ct[19] * ct[611])) * proc_control_B.t1487
    + ((((((((((((((((((((((((((((proc_control_B.out1_tmp_pq * ct[621] +
    proc_control_B.t1533) - proc_control_B.out1_tmp_fp * ct[621]) -
    proc_control_B.out1_tmp_gen * ct[621]) - ct[1] * ct[528] * ct[631]) - ct[1] *
    ct[541] * ct[631]) - proc_control_B.out1_tmp_hga * ct[611]) +
    proc_control_B.out1_tmp_ln * ct[611]) - proc_control_B.out1_tmp_c5 * ct[611])
    + proc_control_B.out1_tmp_cx * ct[611]) - proc_control_B.out1_tmp_es * ct
    [611]) + proc_control_B.out1_tmp_pn5 * ct[611]) - proc_control_B.out1_tmp_lt
                       * ct[631]) - proc_control_B.out1_tmp_i2x * ct[631]) +
                     proc_control_B.out1_tmp_lw * ct[611]) +
                    proc_control_B.out1_tmp_ag * ct[611]) +
                   proc_control_B.out1_tmp_jg * ct[611]) +
                  proc_control_B.out1_tmp_dwl * ct[528] * ct[621]) +
                 proc_control_B.out1_tmp_chb * ct[541] * ct[621]) +
                proc_control_B.out1_tmp_oe * ct[528] * ct[621]) +
               proc_control_B.out1_tmp_oe * ct[541] * ct[621]) +
              proc_control_B.out1_tmp_lw * ct[18] * ct[19]) +
             proc_control_B.out1_tmp_iyp * ct[25]) - proc_control_B.out1_tmp_na *
            ct[25]) + proc_control_B.out1_tmp_hga * ct[19] * ct[25]) -
          proc_control_B.out1_tmp_ln * ct[19] * ct[25]) +
         proc_control_B.out1_tmp_c5 * ct[19] * ct[25]) -
        proc_control_B.out1_tmp_cx * ct[19] * ct[25]) +
       ((((((((((((proc_control_B.out1_tmp_az * ct[17] * ct[18] * ct[25] -
                   proc_control_B.out1_tmp_lw * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_ag * ct[19] * ct[25]) +
                 proc_control_B.t1473 * ct[621]) + proc_control_B.out1_tmp_pc *
                ct[621]) + proc_control_B.out1_tmp_lt * ct[19] * ct[621]) +
              proc_control_B.out1_tmp_i2x * ct[19] * ct[621]) -
             proc_control_B.out1_tmp_dwl * ct[19] * ct[528] * ct[611]) -
            proc_control_B.out1_tmp_chb * ct[19] * ct[541] * ct[611]) -
           proc_control_B.out1_tmp_iyp * ct[19]) + proc_control_B.out1_tmp_na *
          ct[19]) - proc_control_B.t1473 * ct[19] * ct[611]) -
        proc_control_B.out1_tmp_pc * ct[19] * ct[611])) *
    proc_control_B.out1_tmp_gyk);
  proc_control_B.out1_tmp_o2s = ct[5] * ct[17];
  proc_control_B.out1_tmp_dn5 = proc_control_B.out1_tmp_a5 * ct[18];
  proc_control_B.out1_tmp_iu = proc_control_B.out1_tmp_ef * ct[18];
  proc_control_B.out1_tmp_gy = proc_control_B.out1_tmp_iw * ct[18];
  proc_control_B.out1_tmp_cv = proc_control_B.out1_tmp_pr * ct[15];
  proc_control_B.out1_tmp_gk = proc_control_B.out1_tmp_nly * ct[16];
  proc_control_B.out1_tmp_dz = proc_control_B.t1479 * ct[18];
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_ef2 * ct[18];
  proc_control_B.out1_tmp_jv = proc_control_B.t1499 * ct[18];
  proc_control_B.out1_tmp_gzp = proc_control_B.out1_tmp_cv * ct[17];
  proc_control_B.out1_tmp_nly = proc_control_B.out1_tmp_gk * ct[17];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_tmp_iz * ct[17];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_tmp_kv * ct[17];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_tmp_go * ct[17];
  proc_control_B.out1_tmp_dv = ct[3] * ct[19];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_im * ct[17];
  proc_control_B.out1_tmp_nx = proc_control_B.t1533_tmp_n * ct[17];
  proc_control_B.out1_tmp_ju = proc_control_B.out1_tmp_it * ct[17];
  proc_control_B.out1_tmp_pm = proc_control_B.t1533_tmp_n * ct[18];
  proc_control_B.out1_tmp_df = proc_control_B.out1_tmp_it * ct[18];
  proc_control_B.out1_tmp_pz = proc_control_B.out1_tmp_im * ct[18];
  proc_control_B.out1_tmp_d2 = proc_control_B.out1_tmp_du * ct[16];
  proc_control_B.out1_tmp_pq = proc_control_B.out1_tmp_hk * ct[16];
  proc_control_B.out1_tmp_fp = ct[3] * ct[18];
  proc_control_B.out1_tmp_gen = proc_control_B.out1_tmp_nx * ct[18];
  proc_control_B.out1_tmp_mzx = proc_control_B.out1_tmp_ju * ct[18];
  proc_control_B.out1_tmp_ewq = proc_control_B.out1_tmp_d2 * ct[17];
  proc_control_B.out1_tmp_e1 = proc_control_B.out1_tmp_pq * ct[18];
  proc_control_B.out1_tmp_lgy = proc_control_B.out1_tmp_i2p * ct[17];
  proc_control_B.out1_tmp_cf = proc_control_B.out1_tmp_hr * ct[17];
  proc_control_B.out1_tmp_e5 = ct[5] * ct[18];
  proc_control_B.out1_tmp_dwl = proc_control_B.out1_tmp_tmp_lt * ct[18];
  proc_control_B.out1_tmp_oe = proc_control_B.out1_tmp_tmp_l3 * ct[18];
  proc_control_B.out1_tmp_lw = ct[0] * ct[19];
  proc_control_B.out1_tmp_hga = ct[9] * ct[19];
  proc_control_B.out1_tmp_ln = proc_control_B.out1_tmp_ied * ct[18];
  proc_control_B.out1_tmp_c5 = proc_control_B.out1_tmp_kqj * ct[18];
  proc_control_B.out1_tmp_cx = ct[0] * ct[18];
  proc_control_B.out1_tmp_ag = ct[9] * ct[18];
  proc_control_B.out1_tmp_i2x = proc_control_B.out1_tmp_gyc * ct[18];
  proc_control_B.out1_tmp_lt = proc_control_B.out1_tmp_gzg * ct[18];
  proc_control_B.out1_tmp_iyp = proc_control_B.out1_tmp_bc * ct[18];
  proc_control_B.out1_tmp_az = proc_control_B.out1_tmp_dg * ct[17];
  proc_control_B.out1_tmp_ix = proc_control_B.out1_tmp_fvc * ct[17];
  proc_control_B.out1_tmp_c3 = ((((((((((((ct[410] - ct[415]) - ct[530]) - ct
    [531]) - ct[684]) - ct[687]) + ct[690]) + ct[693]) - ct[881]) + ct[892]) +
    ct[894]) + ct[935]) - ct[936]) + ct[138];
  proc_control_B.out1_tmp_mb = ct[0] * ct[17];
  proc_control_B.out1_tmp_nnt = proc_control_B.out1_tmp_cx * ct[19];
  proc_control_B.out1_tmp_chb = ct[9] * ct[17];
  proc_control_B.out1_tmp_na = proc_control_B.out1_tmp_ag * ct[19];
  out1[11] = ((((((((((((((((((((((((((((((((((((((((((ct[367] - ct[380]) + ct
    [382]) + ct[403]) + ct[593]) + ct[620]) - ct[622]) + ct[626]) + ct[630]) -
    ct[667]) + ct[673]) + ct[719]) + ct[723]) - ct[806]) + ct[822]) - ct[824]) +
    ct[836]) + ct[920]) + ct[931]) + ct[999]) + ct[1011]) + ct[32]) + ct[236]) +
    ct[238]) + proc_control_B.out1_tmp_p4 * ct[611]) -
    proc_control_B.out1_tmp_fb * ct[611]) - proc_control_B.out1_tmp_pc2 * ct[19]
    * ct[611]) + proc_control_B.out1_tmp_dd * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_fm * ct[19] * ct[611]) - proc_control_B.out1_tmp_ma *
    ct[611]) + proc_control_B.out1_tmp_fu * ct[17] * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_pdd * ct[541] * ct[621]) -
                        proc_control_B.out1_tmp_fdb * ct[541] * ct[621]) -
                       proc_control_B.out1_tmp_hk * ct[19] * ct[559] * ct[621])
                      + proc_control_B.out1_tmp_mo * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_my * ct[19] * ct[25]) -
                    proc_control_B.out1_tmp_p4 * ct[19] * ct[25]) +
                   proc_control_B.out1_tmp_fb * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_lbl * ct[19] * ct[25]) +
                 proc_control_B.out1_tmp_ma * ct[19] * ct[25]) *
                proc_control_B.out1_tmp_jon +
                ((((((((((((((((((((((((((((proc_control_B.out1_tmp_a5 * ct[621]
    + proc_control_B.out1_tmp_c3) - proc_control_B.out1_tmp_ef * ct[621]) -
    proc_control_B.out1_tmp_iw * ct[621]) - ct[5] * ct[541] * ct[631]) - ct[5] *
    ct[559] * ct[631]) - proc_control_B.t1479 * ct[611]) +
    proc_control_B.out1_tmp_ef2 * ct[611]) - proc_control_B.out1_tmp_dn5 * ct
    [611]) + proc_control_B.out1_tmp_iu * ct[611]) - proc_control_B.out1_tmp_a5 *
    ct[19] * ct[611]) + proc_control_B.out1_tmp_ef * ct[19] * ct[611]) +
    proc_control_B.t1499 * ct[611]) - proc_control_B.out1_tmp_cv * ct[631]) -
    proc_control_B.out1_tmp_gk * ct[631]) + proc_control_B.out1_tmp_gy * ct[611])
    + proc_control_B.out1_tmp_iw * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_o2s * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_o2s * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_e5 * ct[541] * ct[621]) + proc_control_B.out1_tmp_gw
    * ct[559] * ct[621]) + proc_control_B.out1_tmp_dz * ct[25]) -
                       proc_control_B.out1_tmp_bi * ct[25]) +
                      proc_control_B.t1479 * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_ef2 * ct[19] * ct[25]) +
                    proc_control_B.out1_tmp_dn5 * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_iu * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_jv * ct[25]) +
                 ((((((((((((proc_control_B.out1_tmp_ck * ct[17] * ct[19] * ct
    [25] - proc_control_B.out1_tmp_gy * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_gzp * ct[621]) + proc_control_B.out1_tmp_nly * ct
    [621]) + proc_control_B.out1_tmp_cv * ct[18] * ct[621]) +
    proc_control_B.out1_tmp_gk * ct[19] * ct[621]) - proc_control_B.out1_tmp_o2s
                        * ct[18] * ct[541] * ct[611]) -
                       proc_control_B.out1_tmp_o2s * ct[19] * ct[559] * ct[611])
                      - proc_control_B.out1_tmp_dz * ct[19]) +
                     proc_control_B.out1_tmp_bi * ct[19]) +
                    proc_control_B.out1_tmp_jv * ct[19]) -
                   proc_control_B.out1_tmp_gzp * ct[18] * ct[611]) -
                  proc_control_B.out1_tmp_nly * ct[19] * ct[611])) *
                proc_control_B.t1457) +
               ((((((((((((((((((((((((((((proc_control_B.t1533_tmp_n * ct[621]
    + proc_control_B.t1533) - proc_control_B.out1_tmp_it * ct[621]) -
    proc_control_B.out1_tmp_im * ct[621]) - ct[3] * ct[528] * ct[631]) - ct[3] *
    ct[541] * ct[631]) - proc_control_B.out1_tmp_nx * ct[611]) +
    proc_control_B.out1_tmp_ju * ct[611]) - proc_control_B.out1_tmp_pm * ct[611])
    + proc_control_B.out1_tmp_df * ct[611]) - proc_control_B.out1_tmp_m5i * ct
    [611]) + proc_control_B.out1_tmp_j4j * ct[611]) - proc_control_B.out1_tmp_d2
    * ct[631]) - proc_control_B.out1_tmp_pq * ct[631]) +
    proc_control_B.out1_tmp_efd * ct[611]) + proc_control_B.out1_tmp_pz * ct[611])
    + proc_control_B.out1_tmp_ii * ct[611]) + proc_control_B.out1_tmp_am * ct
    [528] * ct[621]) + proc_control_B.out1_tmp_fp * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_dv * ct[528] * ct[621]) + proc_control_B.out1_tmp_dv
                        * ct[541] * ct[621]) + proc_control_B.out1_tmp_efd * ct
                       [18] * ct[19]) + proc_control_B.out1_tmp_gen * ct[25]) -
                     proc_control_B.out1_tmp_mzx * ct[25]) +
                    proc_control_B.out1_tmp_nx * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_ju * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_pm * ct[19] * ct[25]) -
                 proc_control_B.out1_tmp_df * ct[19] * ct[25]) +
                ((((((((((((proc_control_B.out1_tmp_hv * ct[17] * ct[18] * ct[25]
    - proc_control_B.out1_tmp_efd * ct[19] * ct[25]) -
    proc_control_B.out1_tmp_pz * ct[19] * ct[25]) + proc_control_B.out1_tmp_ewq *
    ct[621]) + proc_control_B.out1_tmp_e1 * ct[621]) +
                        proc_control_B.out1_tmp_d2 * ct[19] * ct[621]) +
                       proc_control_B.out1_tmp_pq * ct[19] * ct[621]) -
                      proc_control_B.out1_tmp_am * ct[19] * ct[528] * ct[611]) -
                     proc_control_B.out1_tmp_fp * ct[19] * ct[541] * ct[611]) -
                    proc_control_B.out1_tmp_gen * ct[19]) +
                   proc_control_B.out1_tmp_mzx * ct[19]) -
                  proc_control_B.out1_tmp_ewq * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_e1 * ct[19] * ct[611])) *
               proc_control_B.t1487) -
              (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ddu
    - ct[635]) + ct[640]) + ct[652]) + ct[658]) - ct[671]) - ct[675]) - ct[797])
    - ct[812]) - ct[817]) - ct[834]) - ct[842]) + ct[852]) + ct[864]) + ct[871])
    - ct[877]) + ct[918]) + ct[87]) + ct[89]) + ct[93]) + ct[95]) + ct[100]) -
    ct[126]) - ct[132]) - ct[3] * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_i2p * ct[621]) - proc_control_B.out1_tmp_hr * ct[621])
    - proc_control_B.out1_tmp_djq * ct[621]) - proc_control_B.out1_tmp_lb5 * ct
    [541] * ct[631]) + proc_control_B.out1_tmp_fp * ct[553] * ct[621]) -
                        proc_control_B.out1_tmp_lgy * ct[611]) +
                       proc_control_B.out1_tmp_cf * ct[611]) -
                      proc_control_B.out1_tmp_i2p * ct[18] * ct[611]) +
                     proc_control_B.out1_tmp_hr * ct[18] * ct[611]) +
                    proc_control_B.out1_tmp_djq * ct[17] * ct[611]) +
                   proc_control_B.out1_tmp_djq * ct[18] * ct[611]) +
                  proc_control_B.out1_tmp_lb5 * ct[18] * ct[541] * ct[621]) +
                 proc_control_B.out1_tmp_lgy * ct[18] * ct[25]) -
                proc_control_B.out1_tmp_cf * ct[18] * ct[25]) +
               proc_control_B.out1_tmp_hv * ct[15] * ct[17] * ct[18] * ct[25]) *
              proc_control_B.t1456) +
    ((((((((((((((((((((((((((((((((((((((((((ct[508] + ct[515]) - ct[518]) -
    ct[523]) - ct[870]) - ct[874]) + ct[876]) + ct[886]) - ct[35]) - ct[37]) -
    ct[566] * ct[641]) - proc_control_B.out1_tmp_dw * ct[621]) +
    proc_control_B.out1_tmp_g5h * ct[621]) + proc_control_B.out1_tmp_pb * ct[621])
    + proc_control_B.out1_tmp_b3 * ct[621]) - proc_control_B.out1_tmp_oqd * ct
    [621]) + ct[0] * ct[541] * ct[631]) + ct[8] * ct[541] * ct[631]) - ct[9] *
    ct[541] * ct[631]) - ct[11] * ct[541] * ct[631]) + ct[18] * ct[566] * ct[631])
    + proc_control_B.t1533_tmp * ct[541] * ct[631]) + ct[19] * ct[541] * ct[559]
    * ct[631]) + proc_control_B.out1_tmp_gyc * ct[611]) -
                       proc_control_B.out1_tmp_gzg * ct[611]) +
                      proc_control_B.out1_tmp_ciq * ct[611]) -
                     proc_control_B.out1_tmp_gl * ct[611]) +
                    proc_control_B.out1_tmp_av2 * ct[611]) -
                   proc_control_B.out1_tmp_du1 * ct[611]) -
                  proc_control_B.out1_tmp_bc * ct[611]) +
                 proc_control_B.out1_tmp_dg * ct[631]) +
                proc_control_B.out1_tmp_fvc * ct[631]) -
               proc_control_B.out1_tmp_as * ct[611]) -
              proc_control_B.out1_tmp_mqv * ct[611]) -
             proc_control_B.out1_tmp_ied * ct[611]) -
            proc_control_B.out1_tmp_pn4 * ct[611]) - proc_control_B.out1_tmp_ir *
           ct[611]) + proc_control_B.out1_tmp_kqj * ct[611]) +
         proc_control_B.out1_tmp_oo * ct[611]) + proc_control_B.out1_tmp_au *
        ct[611]) + (((((((((((((((((((((((((((((-ct[8] * ct[17] * ct[541] * ct
    [621] - proc_control_B.out1_tmp_jf * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_cx * ct[541] * ct[621]) - proc_control_B.out1_tmp_ob
    * ct[541] * ct[621]) - proc_control_B.out1_tmp_lw * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_lw * ct[541] * ct[621]) + proc_control_B.out1_tmp_ag
    * ct[541] * ct[621]) + proc_control_B.out1_tmp_hga * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_hga * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_pw * ct[541] * ct[621]) + proc_control_B.out1_tmp_pw
    * ct[559] * ct[621]) + proc_control_B.out1_tmp_cm3 * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_ln * ct[19]) + proc_control_B.out1_tmp_c5 * ct[19])
    - proc_control_B.out1_tmp_i2x * ct[25]) + proc_control_B.out1_tmp_lt * ct[25])
    - proc_control_B.out1_tmp_gyc * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_gzg * ct[19] * ct[25]) - proc_control_B.out1_tmp_ciq
    * ct[19] * ct[25]) + proc_control_B.out1_tmp_gl * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_iyp * ct[25]) + proc_control_B.out1_tmp_bc * ct[19] *
    ct[25]) + proc_control_B.out1_tmp_as * ct[19] * ct[25]) +
              proc_control_B.out1_tmp_ln * ct[25]) + proc_control_B.out1_tmp_ied
             * ct[19] * ct[25]) + proc_control_B.out1_tmp_pn4 * ct[19] * ct[25])
                       - proc_control_B.out1_tmp_c5 * ct[25]) -
                      proc_control_B.out1_tmp_kqj * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_az * ct[621]) -
                    proc_control_B.out1_tmp_ix * ct[621])) + (((((((((((((((-ct
    [9] * ct[11] * ct[18] * ct[19] * ct[25] - proc_control_B.out1_tmp_dg * ct[19]
    * ct[621]) - proc_control_B.out1_tmp_fvc * ct[19] * ct[621]) +
    proc_control_B.out1_tmp_tmp_c * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_mb * ct[19] * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_jf * ct[19] * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_nnt * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_chb * ct[19] * ct[528] * ct[611]) -
              proc_control_B.out1_tmp_na * ct[541] * ct[611]) -
             proc_control_B.out1_tmp_tmp_bv * ct[541] * ct[611]) -
            proc_control_B.out1_tmp_pw * ct[19] * ct[559] * ct[611]) +
           proc_control_B.out1_tmp_i2x * ct[19]) - proc_control_B.out1_tmp_lt *
          ct[19]) - proc_control_B.out1_tmp_iyp * ct[19]) +
        proc_control_B.out1_tmp_az * ct[19] * ct[611]) +
       proc_control_B.out1_tmp_ix * ct[19] * ct[611])) *
     proc_control_B.out1_tmp_gyk +
     ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_f3 - ct[634])
    + ct[642]) + ct[649]) + ct[661]) + ct[665]) - ct[677]) - ct[683]) - ct[800])
    - ct[810]) - ct[828]) - ct[833]) - ct[846]) + ct[855]) + ct[868]) + ct[875])
    - ct[887]) + ct[928]) + ct[110]) + ct[114]) + ct[115]) + ct[119]) + ct[121])
                       - ct[131]) - ct[137]) - ct[5] * ct[553] * ct[631]) +
                    proc_control_B.out1_tmp_tmp_lt * ct[621]) -
                   proc_control_B.out1_tmp_tmp_l3 * ct[621]) -
                  proc_control_B.out1_tmp_tmp_f4 * ct[621]) -
                 proc_control_B.out1_tmp_pr * ct[541] * ct[631]) +
                proc_control_B.out1_tmp_e5 * ct[553] * ct[621]) -
               proc_control_B.out1_tmp_dwl * ct[611]) +
              proc_control_B.out1_tmp_oe * ct[611]) -
             proc_control_B.out1_tmp_tmp_lt * ct[19] * ct[611]) +
            proc_control_B.out1_tmp_tmp_l3 * ct[19] * ct[611]) +
           proc_control_B.out1_tmp_tmp_f4 * ct[18] * ct[611]) +
          proc_control_B.out1_tmp_tmp_f4 * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_pr * ct[18] * ct[541] * ct[621]) +
        proc_control_B.out1_tmp_dwl * ct[19] * ct[25]) -
       proc_control_B.out1_tmp_oe * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_ck * ct[15] * ct[18] * ct[19] * ct[25]) *
     proc_control_B.out1_tmp_lb);
  proc_control_B.t1533_tmp_n = ct[7] * ct[17];
  proc_control_B.out1_tmp_it = proc_control_B.out1_tmp_ey * ct[18];
  proc_control_B.out1_tmp_im = proc_control_B.out1_tmp_dlv * ct[18];
  proc_control_B.out1_tmp_o2s = proc_control_B.out1_tmp_jbr * ct[18];
  proc_control_B.out1_tmp_dn5 = proc_control_B.out1_tmp_iuw * ct[16];
  proc_control_B.out1_tmp_iu = proc_control_B.out1_tmp_aw * ct[15];
  proc_control_B.out1_tmp_gy = proc_control_B.out1_tmp_m2 * ct[18];
  proc_control_B.out1_tmp_cv = proc_control_B.out1_tmp_cec * ct[18];
  proc_control_B.out1_tmp_a5 = proc_control_B.out1_tmp_bo * ct[18];
  proc_control_B.out1_tmp_ef = proc_control_B.out1_tmp_iu * ct[17];
  proc_control_B.out1_tmp_dw = proc_control_B.out1_tmp_dn5 * ct[17];
  proc_control_B.out1_tmp_g5h = ct[7] * ct[19];
  proc_control_B.out1_tmp_gk = proc_control_B.out1_tmp_ey * ct[16];
  proc_control_B.out1_tmp_dz = proc_control_B.out1_tmp_dlv * ct[16];
  proc_control_B.out1_tmp_iw = proc_control_B.out1_tmp_jbr * ct[16];
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_gk * ct[18];
  proc_control_B.out1_tmp_jv = proc_control_B.out1_tmp_dz * ct[18];
  proc_control_B.out1_tmp_gzp = proc_control_B.out1_tmp_n1 * ct[16];
  proc_control_B.out1_tmp_nly = proc_control_B.out1_tmp_p2 * ct[16];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_bs * ct[16];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_gzp * ct[17];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_nly * ct[17];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_kw * ct[18];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_hkh * ct[18];
  proc_control_B.out1_tmp_nx = proc_control_B.out1_tmp_en * ct[18];
  proc_control_B.out1_tmp_ju = proc_control_B.out1_tmp_nadk * ct[18];
  proc_control_B.out1_tmp_pm = proc_control_B.out1_tmp_bic * ct[18];
  proc_control_B.out1_tmp_aw = proc_control_B.out1_tmp_ba * ct[17];
  proc_control_B.out1_tmp_fs *= ct[17];
  proc_control_B.out1_tmp_aa *= ct[17];
  proc_control_B.out1_tmp_g3y *= ct[17];
  proc_control_B.out1_tmp_df = ct[6] * ct[18];
  proc_control_B.out1_tmp_pz = ct[6] * ct[19];
  proc_control_B.out1_tmp_d2 = proc_control_B.out1_tmp_bs * ct[17];
  proc_control_B.out1_tmp_pq = proc_control_B.out1_tmp_n1 * ct[17];
  proc_control_B.out1_tmp_fp = proc_control_B.out1_tmp_p2 * ct[17];
  proc_control_B.out1_tmp_gen = proc_control_B.out1_tmp_iut * ct[15];
  proc_control_B.out1_tmp_mzx = proc_control_B.out1_tmp_f0 * ct[16];
  proc_control_B.out1_tmp_pb = proc_control_B.out1_tmp_pq * ct[18];
  proc_control_B.out1_tmp_b3 = proc_control_B.out1_tmp_fp * ct[18];
  proc_control_B.out1_tmp_oqd = proc_control_B.out1_tmp_gen * ct[17];
  proc_control_B.out1_tmp_ewq = proc_control_B.out1_tmp_mzx * ct[18];
  out1[12] = (((((((((((((((((((((((((((((((((((((((((((ct[508] + ct[512]) - ct
    [518]) - ct[521]) - ct[870]) - ct[872]) + ct[876]) + ct[882]) - ct[36]) -
    ct[37]) - ct[582] * ct[641]) - proc_control_B.out1_tmp_een * ct[621]) +
    proc_control_B.out1_tmp_hq * ct[621]) + proc_control_B.out1_tmp_ev * ct[621])
    + proc_control_B.out1_tmp_eq * ct[621]) - proc_control_B.out1_tmp_gm * ct
    [621]) + ct[0] * ct[559] * ct[631]) + ct[4] * ct[559] * ct[631]) - ct[9] *
    ct[559] * ct[631]) - ct[10] * ct[559] * ct[631]) + ct[19] * ct[582] * ct[631])
    + proc_control_B.t1533_tmp * ct[559] * ct[631]) + proc_control_B.t1533_tmp_k
    * ct[559] * ct[631]) + proc_control_B.out1_tmp_en * ct[611]) -
    proc_control_B.out1_tmp_nadk * ct[611]) + proc_control_B.out1_tmp_olg * ct
    [611]) - proc_control_B.out1_tmp_ad * ct[611]) + proc_control_B.out1_tmp_cy2
    * ct[611]) - proc_control_B.out1_tmp_lv * ct[611]) -
    proc_control_B.out1_tmp_bic * ct[611]) + proc_control_B.out1_tmp_ba * ct[631])
    + proc_control_B.out1_tmp_mg4 * ct[631]) - proc_control_B.out1_tmp_mc * ct
    [611]) - proc_control_B.out1_tmp_kw * ct[611]) - proc_control_B.out1_tmp_i1 *
                       ct[611]) - proc_control_B.out1_tmp_mcj * ct[611]) -
                     proc_control_B.out1_tmp_gni * ct[611]) +
                    proc_control_B.out1_tmp_hkh * ct[611]) +
                   proc_control_B.out1_tmp_i15 * ct[611]) +
                  proc_control_B.out1_tmp_b1 * ct[611]) +
                 (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_df *
    ct[541] * ct[621] - proc_control_B.out1_tmp_tmp_p * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_cx * ct[528] * ct[621]) - proc_control_B.out1_tmp_cx
    * ct[559] * ct[621]) - proc_control_B.out1_tmp_lw * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_lch * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_ag * ct[528] * ct[621]) + proc_control_B.out1_tmp_ag
    * ct[559] * ct[621]) + proc_control_B.out1_tmp_ei * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_ei * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_hga * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_o1 * ct[559] * ct[621]) - proc_control_B.out1_tmp_dv
    * ct[19]) + proc_control_B.out1_tmp_efd * ct[19]) -
    proc_control_B.out1_tmp_nx * ct[25]) + proc_control_B.out1_tmp_ju * ct[25])
    - proc_control_B.out1_tmp_en * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_nadk * ct[19] * ct[25]) -
    proc_control_B.out1_tmp_olg * ct[19] * ct[25]) + proc_control_B.out1_tmp_ad *
    ct[19] * ct[25]) + proc_control_B.out1_tmp_pm * ct[25]) +
    proc_control_B.out1_tmp_bic * ct[19] * ct[25]) + proc_control_B.out1_tmp_dv *
    ct[25]) + proc_control_B.out1_tmp_mc * ct[19] * ct[25]) +
                       proc_control_B.out1_tmp_kw * ct[19] * ct[25]) +
                      proc_control_B.out1_tmp_mcj * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_efd * ct[25]) -
                    proc_control_B.out1_tmp_hkh * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_i15 * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_aw * ct[621])) + (((((((((((((((-ct[3]
    * ct[14] * ct[15] * ct[17] * ct[621] - proc_control_B.out1_tmp_ba * ct[18] *
    ct[621]) - proc_control_B.out1_tmp_mg4 * ct[18] * ct[621]) +
    proc_control_B.out1_tmp_mb * ct[18] * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_tmp_p * ct[18] * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_tmp_bu * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_nnt * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_chb * ct[18] * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_ei * ct[18] * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_na * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_tmp_i3s * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_nx * ct[19]) - proc_control_B.out1_tmp_ju * ct[19])
    - proc_control_B.out1_tmp_pm * ct[19]) + proc_control_B.out1_tmp_aw * ct[18]
    * ct[611]) + proc_control_B.out1_tmp_mg4 * ct[17] * ct[18] * ct[611])) *
               proc_control_B.t1457 + (((((((((((((((((((((((((((((((((((((((ct
    [371] + ct[379]) + ct[397]) + ct[594]) + ct[608]) + ct[627]) + ct[630]) +
    ct[669]) + ct[721]) + ct[722]) + ct[724]) + ct[822]) + ct[836]) + ct[917]) +
    ct[930]) + ct[1000]) + ct[1006]) + ct[1010]) + ct[31]) + ct[32]) + ct[190])
    + ct[193]) + ct[234]) + ct[237]) - proc_control_B.out1_tmp_fs * ct[611]) +
    proc_control_B.out1_tmp_aa * ct[611]) - proc_control_B.out1_tmp_dp * ct[18] *
    ct[611]) + proc_control_B.out1_tmp_hg * ct[18] * ct[611]) +
    proc_control_B.out1_tmp_iei * ct[18] * ct[611]) -
    proc_control_B.out1_tmp_g3y * ct[611]) + proc_control_B.out1_tmp_lm * ct[17]
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_ct * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_o5b * ct[18] * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_ni * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_ilu * ct[18] * ct[25]) - proc_control_B.out1_tmp_ocp
    * ct[18] * ct[25]) + proc_control_B.out1_tmp_fs * ct[18] * ct[25]) -
    proc_control_B.out1_tmp_aa * ct[18] * ct[25]) - proc_control_B.out1_tmp_hy *
    ct[18] * ct[25]) + proc_control_B.out1_tmp_g3y * ct[18] * ct[25]) *
               proc_control_B.t1456) +
              ((((((((((((((((((((((((((((proc_control_B.out1_tmp_pj -
    proc_control_B.out1_tmp_n1 * ct[621]) + proc_control_B.out1_tmp_p2 * ct[621])
    - proc_control_B.out1_tmp_bs * ct[621]) - ct[6] * ct[528] * ct[631]) - ct[6]
    * ct[559] * ct[631]) + proc_control_B.out1_tmp_pq * ct[611]) -
    proc_control_B.out1_tmp_fp * ct[611]) + proc_control_B.out1_tmp_go * ct[611])
    - proc_control_B.out1_tmp_cy0 * ct[611]) + proc_control_B.out1_tmp_n1 * ct
    [19] * ct[611]) - proc_control_B.out1_tmp_p2 * ct[19] * ct[611]) -
    proc_control_B.out1_tmp_mzx * ct[631]) - proc_control_B.out1_tmp_gen * ct
    [631]) + proc_control_B.out1_tmp_d2 * ct[611]) + proc_control_B.out1_tmp_gn3
    * ct[611]) + proc_control_B.out1_tmp_bs * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_bb * ct[528] * ct[621]) + proc_control_B.out1_tmp_df
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_df * ct[559] * ct[621]) +
                       proc_control_B.out1_tmp_pz * ct[559] * ct[621]) +
                      proc_control_B.out1_tmp_d2 * ct[18] * ct[19]) -
                     proc_control_B.out1_tmp_pb * ct[25]) +
                    proc_control_B.out1_tmp_b3 * ct[25]) -
                   proc_control_B.out1_tmp_pq * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_fp * ct[19] * ct[25]) -
                 proc_control_B.out1_tmp_go * ct[19] * ct[25]) +
                proc_control_B.out1_tmp_cy0 * ct[19] * ct[25]) +
               ((((((((((((proc_control_B.out1_tmp_ko5 * ct[17] * ct[18] * ct[25]
    - proc_control_B.out1_tmp_d2 * ct[19] * ct[25]) -
    proc_control_B.out1_tmp_gn3 * ct[19] * ct[25]) + proc_control_B.out1_tmp_oqd
    * ct[621]) + proc_control_B.out1_tmp_ewq * ct[621]) +
                       proc_control_B.out1_tmp_gen * ct[18] * ct[621]) +
                      proc_control_B.out1_tmp_mzx * ct[19] * ct[621]) -
                     proc_control_B.out1_tmp_bb * ct[18] * ct[528] * ct[611]) -
                    proc_control_B.out1_tmp_df * ct[19] * ct[559] * ct[611]) +
                   proc_control_B.out1_tmp_pb * ct[19]) -
                  proc_control_B.out1_tmp_b3 * ct[19]) -
                 proc_control_B.out1_tmp_oqd * ct[18] * ct[611]) -
                proc_control_B.out1_tmp_ewq * ct[19] * ct[611])) *
              proc_control_B.t1487) +
    ((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ey * ct[621] +
    proc_control_B.out1_tmp_c3) - proc_control_B.out1_tmp_dlv * ct[621]) -
    proc_control_B.out1_tmp_jbr * ct[621]) - ct[7] * ct[541] * ct[631]) - ct[7] *
    ct[559] * ct[631]) - proc_control_B.out1_tmp_m2 * ct[611]) +
    proc_control_B.out1_tmp_cec * ct[611]) - proc_control_B.out1_tmp_it * ct[611])
    + proc_control_B.out1_tmp_im * ct[611]) - proc_control_B.out1_tmp_ey * ct[19]
    * ct[611]) + proc_control_B.out1_tmp_dlv * ct[19] * ct[611]) +
                       proc_control_B.out1_tmp_bo * ct[611]) -
                      proc_control_B.out1_tmp_dn5 * ct[631]) -
                     proc_control_B.out1_tmp_iu * ct[631]) +
                    proc_control_B.out1_tmp_o2s * ct[611]) +
                   proc_control_B.out1_tmp_jbr * ct[19] * ct[611]) +
                  proc_control_B.t1533_tmp_n * ct[541] * ct[621]) +
                 proc_control_B.t1533_tmp_n * ct[559] * ct[621]) +
                proc_control_B.out1_tmp_kgq * ct[541] * ct[621]) +
               proc_control_B.out1_tmp_g5h * ct[559] * ct[621]) +
              proc_control_B.out1_tmp_gy * ct[25]) - proc_control_B.out1_tmp_cv *
             ct[25]) + proc_control_B.out1_tmp_m2 * ct[19] * ct[25]) -
           proc_control_B.out1_tmp_cec * ct[19] * ct[25]) +
          proc_control_B.out1_tmp_it * ct[19] * ct[25]) -
         proc_control_B.out1_tmp_im * ct[19] * ct[25]) -
        proc_control_B.out1_tmp_a5 * ct[25]) +
       ((((((((((((proc_control_B.out1_tmp_lr * ct[17] * ct[19] * ct[25] -
                   proc_control_B.out1_tmp_o2s * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_dw * ct[621]) +
                 proc_control_B.out1_tmp_ef * ct[621]) +
                proc_control_B.out1_tmp_iu * ct[18] * ct[621]) +
               proc_control_B.out1_tmp_dn5 * ct[19] * ct[621]) -
              proc_control_B.t1533_tmp_n * ct[18] * ct[541] * ct[611]) -
             proc_control_B.t1533_tmp_n * ct[19] * ct[559] * ct[611]) -
            proc_control_B.out1_tmp_gy * ct[19]) + proc_control_B.out1_tmp_cv *
           ct[19]) + proc_control_B.out1_tmp_a5 * ct[19]) -
         proc_control_B.out1_tmp_ef * ct[18] * ct[611]) -
        proc_control_B.out1_tmp_dw * ct[19] * ct[611])) *
      proc_control_B.out1_tmp_gyk -
      ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_nz - ct
    [636]) + ct[639]) + ct[648]) + ct[653]) + ct[660]) - ct[672]) - ct[676]) -
    ct[798]) - ct[803]) - ct[816]) - ct[825]) - ct[841]) + ct[853]) + ct[861]) +
    ct[873]) - ct[883]) + ct[925]) + ct[101]) + ct[102]) + ct[104]) + ct[108]) +
    ct[117]) - ct[127]) - ct[134]) - ct[7] * ct[575] * ct[631]) +
                     proc_control_B.out1_tmp_gk * ct[621]) -
                    proc_control_B.out1_tmp_dz * ct[621]) -
                   proc_control_B.out1_tmp_iw * ct[621]) -
                  proc_control_B.out1_tmp_iuw * ct[559] * ct[631]) +
                 proc_control_B.out1_tmp_g5h * ct[575] * ct[621]) -
                proc_control_B.out1_tmp_bi * ct[611]) +
               proc_control_B.out1_tmp_jv * ct[611]) -
              proc_control_B.out1_tmp_gk * ct[19] * ct[611]) +
             proc_control_B.out1_tmp_dz * ct[19] * ct[611]) +
            proc_control_B.out1_tmp_iw * ct[18] * ct[611]) +
           proc_control_B.out1_tmp_iw * ct[19] * ct[611]) +
          proc_control_B.out1_tmp_iuw * ct[19] * ct[559] * ct[621]) +
         proc_control_B.out1_tmp_bi * ct[19] * ct[25]) -
        proc_control_B.out1_tmp_jv * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_lr * ct[16] * ct[18] * ct[19] * ct[25]) *
      proc_control_B.out1_tmp_lb) +
     (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_pp - ct[637])
    + ct[644]) + ct[647]) + ct[657]) - ct[664]) - ct[674]) - ct[799]) - ct[804])
    - ct[817]) - ct[818]) - ct[834]) + ct[854]) + ct[858]) + ct[871]) - ct[877])
    + ct[919]) + ct[85]) + ct[89]) + ct[90]) + ct[93]) + ct[113]) - ct[128]) -
                      ct[130]) - ct[6] * ct[575] * ct[631]) -
                    proc_control_B.out1_tmp_gzp * ct[621]) +
                   proc_control_B.out1_tmp_nly * ct[621]) -
                  proc_control_B.out1_tmp_p4 * ct[621]) -
                 proc_control_B.out1_tmp_f0 * ct[559] * ct[631]) +
                proc_control_B.out1_tmp_pz * ct[575] * ct[621]) +
               proc_control_B.out1_tmp_fb * ct[611]) -
              proc_control_B.out1_tmp_ma * ct[611]) +
             proc_control_B.out1_tmp_gzp * ct[19] * ct[611]) -
            proc_control_B.out1_tmp_nly * ct[19] * ct[611]) +
           proc_control_B.out1_tmp_p4 * ct[17] * ct[611]) +
          proc_control_B.out1_tmp_p4 * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_f0 * ct[19] * ct[559] * ct[621]) -
        proc_control_B.out1_tmp_fb * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_ma * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_ko5 * ct[16] * ct[17] * ct[19] * ct[25]) *
     proc_control_B.t1458);
}

void proc_control::proc_control_ft_2_p(const real_T ct[804], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp = _mm_set1_pd(ct[17]);
  tmp_1 = _mm_set1_pd(ct[447]);
  _mm_storeu_pd(&proc_control_B.dv51[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[15], ct[16]), tmp), _mm_loadu_pd(&ct[18])),
    _mm_set_pd(ct[341], ct[319])), tmp_1));
  proc_control_B.t1162 = proc_control_B.dv51[0];
  proc_control_B.t1163 = proc_control_B.dv51[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t1164_i = ct[15] * ct[16] * ct[20] * ct[362] * ct[447];
  proc_control_B.t1459 = (ct[599] + ct[605]) - 1.0;
  _mm_storeu_pd(&proc_control_B.dv51[0], _mm_add_pd(_mm_set_pd(ct[121], ct[122]),
    _mm_set_pd(ct[286], ct[275])));
  proc_control_B.t1483 = proc_control_B.dv51[0];
  proc_control_B.t1484 = proc_control_B.dv51[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t1485 = ct[123] + ct[297];
  _mm_storeu_pd(&proc_control_B.dv51[0], _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_set_pd(ct[101], ct[41]), _mm_set_pd(ct[765], ct[665])), _mm_set_pd(ct
    [134], ct[128])), _mm_set_pd(ct[566], ct[562])));
  proc_control_B.t1488_e = proc_control_B.dv51[0];
  proc_control_B.t1489_f = proc_control_B.dv51[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv51[0], _mm_mul_pd(tmp, _mm_set_pd(ct[198], ct
    [193])));
  proc_control_B.t575 = ct[28] * ct[113];
  memcpy(&proc_control_B.ct_i[0], &ct[0], 11U * sizeof(real_T));
  proc_control_B.ct_i[11] = ct[11];
  memcpy(&proc_control_B.ct_i[12], &ct[13], sizeof(real_T) << 4U);
  proc_control_B.ct_i[28] = ct[29];
  proc_control_B.ct_i[29] = ct[31];
  proc_control_B.ct_i[30] = ct[32];
  proc_control_B.ct_i[31] = ct[33];
  proc_control_B.ct_i[32] = -(ct[15] * ct[196]);
  proc_control_B.ct_i[33] = -proc_control_B.dv51[1];
  proc_control_B.ct_i[34] = ct[34];
  proc_control_B.ct_i[35] = ct[35];
  proc_control_B.ct_i[36] = ct[36];
  proc_control_B.ct_i[37] = ct[37];
  proc_control_B.ct_i[38] = ct[475] + ct[631];
  tmp_0 = _mm_set1_pd(ct[18]);
  _mm_storeu_pd(&proc_control_B.ct_i[39], _mm_mul_pd(tmp_0, _mm_set_pd(ct[573],
    ct[567])));
  _mm_storeu_pd(&proc_control_B.ct_i[41], _mm_mul_pd(tmp_0, _mm_set_pd(ct[582],
    ct[580])));
  proc_control_B.ct_i[43] = ct[19] * ct[569];
  proc_control_B.ct_i[44] = ct[38];
  _mm_storeu_pd(&proc_control_B.ct_i[45], _mm_mul_pd(_mm_set1_pd(ct[19]),
    _mm_set_pd(ct[577], ct[573])));
  _mm_storeu_pd(&proc_control_B.ct_i[47], _mm_mul_pd(_mm_loadu_pd(&ct[19]),
    _mm_set_pd(ct[567], ct[580])));
  _mm_storeu_pd(&proc_control_B.ct_i[49], _mm_mul_pd(_mm_set1_pd(ct[20]),
    _mm_set_pd(ct[577], ct[569])));
  _mm_storeu_pd(&proc_control_B.ct_i[51], _mm_mul_pd(_mm_set_pd(ct[191], ct[20]),
    _mm_set_pd(ct[319], ct[582])));
  _mm_storeu_pd(&proc_control_B.ct_i[53], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[606])));
  proc_control_B.ct_i[55] = ct[1] * ct[670];
  proc_control_B.ct_i[56] = ct[39];
  tmp_4 = _mm_loadu_pd(&ct[16]);
  _mm_storeu_pd(&proc_control_B.ct_i[57], _mm_mul_pd(tmp_4, _mm_set_pd(ct[609],
    ct[613])));
  _mm_storeu_pd(&proc_control_B.ct_i[59], _mm_mul_pd(_mm_set_pd(ct[17], ct[2]),
    _mm_set_pd(ct[619], ct[671])));
  _mm_storeu_pd(&proc_control_B.ct_i[61], _mm_mul_pd(_mm_set_pd(ct[3], ct[17]),
    _mm_set_pd(ct[670], ct[620])));
  _mm_storeu_pd(&proc_control_B.ct_i[63], _mm_mul_pd(_mm_set_pd(ct[16], ct[192]),
    _mm_set_pd(ct[628], ct[341])));
  _mm_storeu_pd(&proc_control_B.ct_i[65], _mm_mul_pd(_mm_set_pd(ct[5], ct[17]),
    _mm_set_pd(ct[672], ct[626])));
  _mm_storeu_pd(&proc_control_B.ct_i[67], _mm_mul_pd(tmp_4, _mm_set_pd(ct[634],
    ct[635])));
  _mm_storeu_pd(&proc_control_B.ct_i[69], _mm_mul_pd(_mm_set_pd(ct[16], ct[6]),
    _mm_set_pd(ct[639], ct[671])));
  _mm_storeu_pd(&proc_control_B.ct_i[71], _mm_mul_pd(_mm_set_pd(ct[7], ct[17]),
    _mm_set_pd(ct[672], ct[637])));
  proc_control_B.ct_i[73] = ct[193] * ct[362];
  proc_control_B.ct_i[74] = ct[40];
  _mm_storeu_pd(&proc_control_B.ct_i[75], _mm_mul_pd(_mm_set_pd(ct[18], ct[196]),
    _mm_set_pd(ct[598], ct[319])));
  _mm_storeu_pd(&proc_control_B.ct_i[77], _mm_mul_pd(_mm_set_pd(ct[18], ct[197]),
    _mm_set_pd(ct[601], ct[341])));
  _mm_storeu_pd(&proc_control_B.ct_i[79], _mm_mul_pd(_mm_set_pd(ct[198], ct[19]),
    _mm_set_pd(ct[362], ct[600])));
  tmp_4 = _mm_set_pd(ct[19], ct[20]);
  _mm_storeu_pd(&proc_control_B.ct_i[81], _mm_mul_pd(tmp_4, _mm_set_pd(ct[601],
    ct[598])));
  _mm_storeu_pd(&proc_control_B.ct_i[83], _mm_mul_pd(tmp_4, _mm_set_pd(ct[602],
    ct[600])));
  proc_control_B.ct_i[85] = ct[42];
  proc_control_B.ct_i[86] = ct[1] * ct[680];
  proc_control_B.ct_i[87] = ct[43];
  proc_control_B.ct_i[88] = ct[2] * ct[681];
  proc_control_B.ct_i[89] = ct[44];
  proc_control_B.ct_i[90] = ct[45];
  proc_control_B.ct_i[91] = ct[46];
  proc_control_B.ct_i[92] = ct[3] * ct[680];
  proc_control_B.ct_i[93] = ct[47];
  proc_control_B.ct_i[94] = ct[6] * ct[681];
  proc_control_B.ct_i[95] = ct[48];
  proc_control_B.ct_i[96] = ct[49];
  _mm_storeu_pd(&proc_control_B.ct_i[97], _mm_mul_pd(tmp_0, _mm_loadu_pd(&ct[649])));
  proc_control_B.ct_i[99] = ct[20] * ct[602];
  proc_control_B.ct_i[100] = ct[50];
  proc_control_B.ct_i[101] = ct[51];
  proc_control_B.ct_i[102] = ct[52];
  proc_control_B.ct_i[103] = ct[1] * ct[682];
  proc_control_B.ct_i[104] = ct[53];
  proc_control_B.ct_i[105] = ct[3] * ct[682];
  proc_control_B.ct_i[106] = ct[54];
  proc_control_B.ct_i[107] = ct[5] * ct[683];
  proc_control_B.ct_i[108] = ct[55];
  proc_control_B.ct_i[109] = ct[56];
  proc_control_B.ct_i[110] = ct[57];
  _mm_storeu_pd(&proc_control_B.ct_i[111], _mm_mul_pd(_mm_set_pd(ct[19], ct[7]),
    _mm_set_pd(ct[649], ct[683])));
  proc_control_B.ct_i[113] = ct[58];
  proc_control_B.ct_i[114] = ct[59];
  proc_control_B.ct_i[115] = ct[60];
  proc_control_B.ct_i[116] = ct[2] * ct[684];
  proc_control_B.ct_i[117] = ct[61];
  proc_control_B.ct_i[118] = ct[62];
  proc_control_B.ct_i[119] = ct[63];
  proc_control_B.ct_i[120] = ct[5] * ct[685];
  proc_control_B.ct_i[121] = ct[64];
  proc_control_B.ct_i[122] = ct[6] * ct[684];
  proc_control_B.ct_i[123] = ct[65];
  _mm_storeu_pd(&proc_control_B.ct_i[124], _mm_mul_pd(_mm_set_pd(ct[20], ct[7]),
    _mm_set_pd(ct[650], ct[685])));
  memcpy(&proc_control_B.ct_i[126], &ct[66], 12U * sizeof(real_T));
  proc_control_B.ct_i[138] = proc_control_B.t1162;
  proc_control_B.ct_i[139] = proc_control_B.t1163;
  proc_control_B.ct_i[140] = proc_control_B.t1164_i;
  tmp_0 = _mm_set1_pd(ct[26]);
  _mm_storeu_pd(&proc_control_B.ct_i[141], _mm_mul_pd(_mm_mul_pd(tmp_0,
    _mm_set_pd(ct[28], ct[29])), _mm_loadu_pd(&ct[263])));
  _mm_storeu_pd(&proc_control_B.ct_i[143], _mm_mul_pd(_mm_mul_pd(tmp_0,
    _mm_set_pd(ct[264], ct[27])), _mm_set_pd(ct[802], ct[265])));
  proc_control_B.ct_i[145] = -proc_control_B.t575;
  proc_control_B.ct_i[146] = ct[79];
  proc_control_B.ct_i[147] = ct[81];
  proc_control_B.ct_i[148] = ct[83];
  proc_control_B.ct_i[149] = ct[85];
  proc_control_B.ct_i[150] = ct[87];
  proc_control_B.ct_i[151] = ct[89];
  _mm_storeu_pd(&proc_control_B.ct_i[152], _mm_mul_pd(_mm_set_pd(ct[7], ct[5]),
    _mm_set1_pd(proc_control_B.t1162)));
  proc_control_B.ct_i[154] = ct[90];
  _mm_storeu_pd(&proc_control_B.ct_i[155], _mm_mul_pd(_mm_set_pd(ct[6], ct[2]),
    _mm_set1_pd(proc_control_B.t1163)));
  proc_control_B.ct_i[157] = ct[91];
  proc_control_B.ct_i[158] = ct[92];
  _mm_storeu_pd(&proc_control_B.ct_i[159], _mm_mul_pd(_mm_set_pd(ct[3], ct[1]),
    _mm_set1_pd(proc_control_B.t1164_i)));
  proc_control_B.ct_i[161] = ct[93];
  proc_control_B.ct_i[162] = ct[94];
  proc_control_B.ct_i[163] = ct[95];
  proc_control_B.ct_i[164] = ct[96];
  proc_control_B.ct_i[165] = ct[97];
  proc_control_B.ct_i[166] = ct[98];
  proc_control_B.ct_i[167] = ct[99];
  proc_control_B.ct_i[168] = ct[100];
  proc_control_B.ct_i[169] = ct[102];
  proc_control_B.ct_i[170] = ct[103];
  proc_control_B.ct_i[171] = ct[104];
  proc_control_B.ct_i[172] = -ct[567];
  proc_control_B.ct_i[173] = -(ct[4] * ct[296]);
  proc_control_B.ct_i[174] = ct[111];
  proc_control_B.ct_i[175] = -ct[569];
  proc_control_B.ct_i[176] = -(ct[0] * ct[300]);
  proc_control_B.ct_i[177] = -ct[573];
  proc_control_B.ct_i[178] = -(ct[8] * ct[296]);
  proc_control_B.ct_i[179] = -ct[577];
  proc_control_B.ct_i[180] = -(ct[0] * ct[303]);
  proc_control_B.ct_i[181] = -ct[580];
  proc_control_B.ct_i[182] = -(ct[8] * ct[300]);
  proc_control_B.ct_i[183] = -ct[582];
  proc_control_B.ct_i[184] = -(ct[4] * ct[303]);
  proc_control_B.ct_i[185] = -ct[598];
  proc_control_B.ct_i[186] = -(ct[10] * ct[306]);
  proc_control_B.ct_i[187] = -ct[600];
  proc_control_B.ct_i[188] = -ct[601];
  proc_control_B.ct_i[189] = -ct[602];
  proc_control_B.ct_i[190] = -ct[608];
  proc_control_B.ct_i[191] = -ct[621];
  proc_control_B.ct_i[192] = -ct[628];
  proc_control_B.ct_i[193] = -ct[639];
  proc_control_B.ct_i[194] = -ct[649];
  proc_control_B.ct_i[195] = -ct[650];
  proc_control_B.ct_i[196] = -ct[659];
  proc_control_B.ct_i[197] = -ct[662];
  proc_control_B.ct_i[198] = -ct[666];
  proc_control_B.ct_i[199] = -ct[689];
  proc_control_B.ct_i[200] = -ct[692];
  proc_control_B.ct_i[201] = -ct[693];
  proc_control_B.ct_i[202] = -ct[696];
  proc_control_B.ct_i[203] = -ct[698];
  proc_control_B.ct_i[204] = -ct[700];
  proc_control_B.ct_i[205] = -ct[702];
  proc_control_B.ct_i[206] = -ct[704];
  proc_control_B.ct_i[207] = -ct[706];
  proc_control_B.ct_i[208] = -ct[708];
  proc_control_B.ct_i[209] = -ct[710];
  proc_control_B.ct_i[210] = -ct[712];
  proc_control_B.ct_i[211] = -ct[713];
  proc_control_B.ct_i[212] = -ct[716];
  proc_control_B.ct_i[213] = -ct[717];
  proc_control_B.ct_i[214] = -ct[720];
  proc_control_B.ct_i[215] = -ct[721];
  proc_control_B.ct_i[216] = -ct[722];
  proc_control_B.ct_i[217] = -ct[723];
  proc_control_B.ct_i[218] = -ct[724];
  proc_control_B.ct_i[219] = -ct[725];
  proc_control_B.ct_i[220] = ct[118];
  proc_control_B.ct_i[221] = -ct[726];
  proc_control_B.ct_i[222] = -ct[727];
  proc_control_B.ct_i[223] = -ct[728];
  proc_control_B.ct_i[224] = -ct[729];
  proc_control_B.ct_i[225] = -ct[730];
  proc_control_B.ct_i[226] = -ct[731];
  proc_control_B.ct_i[227] = -ct[732];
  proc_control_B.ct_i[228] = -ct[733];
  proc_control_B.ct_i[229] = -ct[734];
  proc_control_B.ct_i[230] = -ct[735];
  proc_control_B.ct_i[231] = ct[120];
  proc_control_B.ct_i[232] = -ct[736];
  proc_control_B.ct_i[233] = -ct[737];
  proc_control_B.ct_i[234] = -ct[747];
  proc_control_B.ct_i[235] = -ct[750];
  proc_control_B.ct_i[236] = -ct[751];
  proc_control_B.ct_i[237] = -ct[756];
  proc_control_B.ct_i[238] = -ct[758];
  proc_control_B.ct_i[239] = -ct[759];
  proc_control_B.ct_i[240] = ct[0] * ct[35];
  proc_control_B.ct_i[241] = ct[1] * ct[319] * ct[341] * ct[447];
  proc_control_B.ct_i[242] = ct[0] * ct[36];
  tmp_3 = _mm_set_pd(ct[341], ct[362]);
  _mm_storeu_pd(&proc_control_B.ct_i[243], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[2]), _mm_set1_pd(ct[319])), tmp_3), tmp_1));
  _mm_storeu_pd(&proc_control_B.ct_i[245], _mm_mul_pd(_mm_set1_pd(ct[4]),
    _mm_set_pd(ct[37], ct[35])));
  tmp_2 = _mm_set_pd(ct[319], ct[341]);
  _mm_storeu_pd(&proc_control_B.ct_i[247], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[5]), tmp_2), _mm_set1_pd(ct[362])), tmp_1));
  proc_control_B.ct_i[249] = ct[7] * ct[341] * ct[362] * ct[447];
  proc_control_B.ct_i[250] = ct[124];
  _mm_storeu_pd(&proc_control_B.ct_i[251], _mm_mul_pd(_mm_set1_pd(ct[8]),
    _mm_loadu_pd(&ct[36])));
  proc_control_B.ct_i[253] = -ct[768];
  proc_control_B.ct_i[254] = -ct[770];
  proc_control_B.ct_i[255] = ct[125];
  proc_control_B.ct_i[256] = -ct[773];
  proc_control_B.ct_i[257] = -ct[775];
  proc_control_B.ct_i[258] = -ct[777];
  proc_control_B.ct_i[259] = -ct[779];
  _mm_storeu_pd(&proc_control_B.ct_i[260], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [18], ct[19]), tmp_2), _mm_set_pd(ct[310], ct[306])));
  _mm_storeu_pd(&proc_control_B.ct_i[262], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [18], ct[20]), _mm_set_pd(ct[319], ct[362])), _mm_set_pd(ct[313], ct[306])));
  _mm_storeu_pd(&proc_control_B.ct_i[264], _mm_mul_pd(_mm_mul_pd(tmp_4, tmp_3),
    _mm_set_pd(ct[313], ct[310])));
  proc_control_B.ct_i[266] = -(ct[18] * ct[568]);
  proc_control_B.ct_i[267] = -(ct[18] * ct[574]);
  proc_control_B.ct_i[268] = -(ct[18] * ct[581]);
  proc_control_B.ct_i[269] = -(ct[18] * ct[584]);
  proc_control_B.ct_i[270] = -(ct[19] * ct[571]);
  proc_control_B.ct_i[271] = -(ct[19] * ct[574]);
  proc_control_B.ct_i[272] = -(ct[19] * ct[578]);
  proc_control_B.ct_i[273] = -(ct[19] * ct[581]);
  proc_control_B.ct_i[274] = -(ct[20] * ct[568]);
  proc_control_B.ct_i[275] = -(ct[20] * ct[571]);
  proc_control_B.ct_i[276] = -(ct[20] * ct[578]);
  proc_control_B.ct_i[277] = -(ct[20] * ct[584]);
  proc_control_B.ct_i[278] = -(ct[18] * ct[586]);
  proc_control_B.ct_i[279] = -(ct[18] * ct[588]);
  proc_control_B.ct_i[280] = ct[126];
  proc_control_B.ct_i[281] = -(ct[19] * ct[587]);
  proc_control_B.ct_i[282] = -(ct[19] * ct[588]);
  proc_control_B.ct_i[283] = -(ct[19] * ct[589]);
  proc_control_B.ct_i[284] = -(ct[18] * ct[590]);
  proc_control_B.ct_i[285] = -(ct[18] * ct[592]);
  proc_control_B.ct_i[286] = -(ct[18] * ct[593]);
  proc_control_B.ct_i[287] = -(ct[20] * ct[586]);
  proc_control_B.ct_i[288] = -(ct[20] * ct[587]);
  proc_control_B.ct_i[289] = -(ct[20] * ct[589]);
  proc_control_B.ct_i[290] = -(ct[18] * ct[594]);
  proc_control_B.ct_i[291] = ct[127];
  proc_control_B.ct_i[292] = -(ct[19] * ct[591]);
  proc_control_B.ct_i[293] = -(ct[18] * ct[596]);
  proc_control_B.ct_i[294] = -(ct[18] * ct[597]);
  proc_control_B.ct_i[295] = -(ct[19] * ct[592]);
  proc_control_B.ct_i[296] = -(ct[20] * ct[590]);
  proc_control_B.ct_i[297] = -(ct[19] * ct[594]);
  proc_control_B.ct_i[298] = -(ct[20] * ct[591]);
  proc_control_B.ct_i[299] = -(ct[19] * ct[595]);
  proc_control_B.ct_i[300] = -(ct[19] * ct[596]);
  proc_control_B.ct_i[301] = -(ct[20] * ct[593]);
  proc_control_B.ct_i[302] = -(ct[20] * ct[595]);
  proc_control_B.ct_i[303] = -(ct[20] * ct[597]);
  proc_control_B.ct_i[304] = ct[129];
  proc_control_B.ct_i[305] = ct[130];
  proc_control_B.ct_i[306] = -(ct[26] * ct[263] * ct[803]);
  proc_control_B.ct_i[307] = -(ct[26] * ct[265] * ct[801]);
  proc_control_B.ct_i[308] = -ct[78];
  proc_control_B.ct_i[309] = -ct[80];
  proc_control_B.ct_i[310] = -ct[82];
  proc_control_B.ct_i[311] = -ct[84];
  proc_control_B.ct_i[312] = ct[131];
  proc_control_B.ct_i[313] = -ct[86];
  proc_control_B.ct_i[314] = -ct[88];
  proc_control_B.ct_i[315] = -ct[105];
  proc_control_B.ct_i[316] = -ct[106];
  proc_control_B.ct_i[317] = -ct[107];
  proc_control_B.ct_i[318] = -ct[108];
  proc_control_B.ct_i[319] = -ct[109];
  proc_control_B.ct_i[320] = -ct[110];
  tmp_1 = _mm_set1_pd(ct[25]);
  tmp_4 = _mm_set1_pd(ct[688]);
  _mm_storeu_pd(&proc_control_B.ct_i[321], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[17], ct[15]), tmp_1), tmp_0), tmp_4));
  proc_control_B.ct_i[323] = proc_control_B.t1459;
  proc_control_B.ct_i[324] = -(ct[9] * ct[35]);
  proc_control_B.ct_i[325] = -(ct[9] * ct[36]);
  proc_control_B.ct_i[326] = -(ct[10] * ct[35]);
  proc_control_B.ct_i[327] = -(ct[10] * ct[37]);
  proc_control_B.ct_i[328] = -(ct[11] * ct[36]);
  proc_control_B.ct_i[329] = -(ct[11] * ct[37]);
  proc_control_B.ct_i[330] = ct[132];
  tmp_3 = _mm_set1_pd(ct[308]);
  _mm_storeu_pd(&proc_control_B.ct_i[331], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[14], ct[12]), tmp_1), tmp_3), tmp_4));
  proc_control_B.ct_i[333] = ct[133];
  proc_control_B.ct_i[334] = ct[14] * ct[25] * ct[642] * ct[688];
  tmp_4 = _mm_set_pd(ct[29], ct[27]);
  _mm_storeu_pd(&proc_control_B.ct_i[335], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t1483, proc_control_B.t1484)));
  _mm_storeu_pd(&proc_control_B.ct_i[337], _mm_mul_pd(_mm_set_pd(ct[28],
    proc_control_B.t1483), _mm_set_pd(proc_control_B.t1485, ct[802])));
  _mm_storeu_pd(&proc_control_B.ct_i[339], _mm_mul_pd(_mm_set_pd
    (proc_control_B.t1485, proc_control_B.t1484), _mm_set_pd(ct[801], ct[803])));
  tmp_2 = _mm_set1_pd(proc_control_B.t1459);
  tmp_5 = _mm_loadu_pd(&ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_i[341], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_5, tmp_1), tmp_0), tmp_2));
  proc_control_B.t1162 = ct[25] * ct[180];
  proc_control_B.ct_i[343] = proc_control_B.t1162 * ct[266] * 2.0;
  _mm_storeu_pd(&proc_control_B.ct_i[344], _mm_mul_pd(_mm_loadu_pd(&ct[28]),
    _mm_set1_pd(proc_control_B.t1488_e)));
  _mm_storeu_pd(&proc_control_B.ct_i[346], _mm_mul_pd(tmp_4, _mm_set1_pd
    (proc_control_B.t1489_f)));
  _mm_storeu_pd(&proc_control_B.ct_i[348], _mm_mul_pd(_mm_loadu_pd(&ct[27]),
    _mm_set1_pd(((ct[30] + ct[119]) + ct[141]) + ct[575])));
  proc_control_B.ct_i[350] = ct[135];
  _mm_storeu_pd(&proc_control_B.ct_i[351], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[12]), tmp_1), tmp_3), tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_i[353], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[12], ct[25]), _mm_set_pd(ct[25], ct[180])), _mm_set_pd(ct[642],
    ct[686])), _mm_set_pd(proc_control_B.t1459, 2.0)));
  proc_control_B.ct_i[355] = ct[13] * ct[25] * ct[642] * proc_control_B.t1459;
  proc_control_B.ct_i[356] = proc_control_B.t1162 * proc_control_B.t1459;
  proc_control_B.ct_i[357] = ct[136];
  proc_control_B.ct_i[358] = ct[137];
  proc_control_B.ct_i[359] = ct[138];
  proc_control_B.ct_i[360] = ct[139];
  proc_control_B.ct_i[361] = ct[140];
  memcpy(&proc_control_B.ct_i[362], &ct[142], 37U * sizeof(real_T));
  proc_control_B.ct_i[399] = ct[179];
  memcpy(&proc_control_B.ct_i[400], &ct[181], 81U * sizeof(real_T));
  proc_control_B.ct_i[481] = ct[262];
  memcpy(&proc_control_B.ct_i[482], &ct[270], 38U * sizeof(real_T));
  proc_control_B.ct_i[520] = ct[308];
  proc_control_B.ct_i[521] = ct[310];
  proc_control_B.ct_i[522] = ct[311];
  proc_control_B.ct_i[523] = ct[313];
  proc_control_B.ct_i[524] = ct[314];
  proc_control_B.ct_i[525] = ct[316];
  proc_control_B.ct_i[526] = ct[317];
  proc_control_B.ct_i[527] = ct[318];
  proc_control_B.ct_i[528] = ct[319];
  proc_control_B.ct_i[529] = ct[320];
  proc_control_B.ct_i[530] = ct[321];
  proc_control_B.ct_i[531] = ct[322];
  proc_control_B.ct_i[532] = ct[324];
  proc_control_B.ct_i[533] = ct[325];
  proc_control_B.ct_i[534] = ct[328];
  proc_control_B.ct_i[535] = ct[330];
  proc_control_B.ct_i[536] = ct[331];
  proc_control_B.ct_i[537] = ct[332];
  proc_control_B.ct_i[538] = ct[335];
  proc_control_B.ct_i[539] = ct[337];
  proc_control_B.ct_i[540] = ct[338];
  proc_control_B.ct_i[541] = ct[341];
  proc_control_B.ct_i[542] = ct[342];
  proc_control_B.ct_i[543] = ct[343];
  proc_control_B.ct_i[544] = ct[346];
  proc_control_B.ct_i[545] = ct[347];
  proc_control_B.ct_i[546] = ct[348];
  proc_control_B.ct_i[547] = ct[349];
  proc_control_B.ct_i[548] = ct[350];
  proc_control_B.ct_i[549] = ct[351];
  memcpy(&proc_control_B.ct_i[550], &ct[353], 10U * sizeof(real_T));
  proc_control_B.ct_i[560] = ct[363];
  proc_control_B.ct_i[561] = ct[365];
  proc_control_B.ct_i[562] = ct[366];
  proc_control_B.ct_i[563] = ct[368];
  proc_control_B.ct_i[564] = ct[370];
  proc_control_B.ct_i[565] = ct[372];
  proc_control_B.ct_i[566] = ct[373];
  proc_control_B.ct_i[567] = ct[375];
  proc_control_B.ct_i[568] = ct[377];
  proc_control_B.ct_i[569] = ct[378];
  proc_control_B.ct_i[570] = ct[5] * ct[196];
  proc_control_B.ct_i[571] = ct[379];
  proc_control_B.ct_i[572] = ct[380];
  proc_control_B.ct_i[573] = ct[7] * ct[196];
  proc_control_B.ct_i[574] = ct[381];
  proc_control_B.ct_i[575] = ct[382];
  proc_control_B.ct_i[576] = ct[384];
  proc_control_B.ct_i[577] = ct[387];
  proc_control_B.ct_i[578] = ct[389];
  proc_control_B.ct_i[579] = ct[390];
  proc_control_B.ct_i[580] = ct[2] * ct[197];
  proc_control_B.ct_i[581] = ct[391];
  proc_control_B.ct_i[582] = ct[392];
  proc_control_B.ct_i[583] = ct[6] * ct[197];
  proc_control_B.ct_i[584] = ct[393];
  proc_control_B.ct_i[585] = ct[396];
  proc_control_B.ct_i[586] = ct[397];
  proc_control_B.ct_i[587] = ct[1] * ct[198];
  proc_control_B.ct_i[588] = ct[398];
  proc_control_B.ct_i[589] = ct[3] * ct[198];
  proc_control_B.ct_i[590] = ct[399];
  memcpy(&proc_control_B.ct_i[591], &ct[402], 9U * sizeof(real_T));
  proc_control_B.ct_i[600] = ct[411];
  memcpy(&proc_control_B.ct_i[601], &ct[415], 10U * sizeof(real_T));
  proc_control_B.ct_i[611] = ct[426];
  memcpy(&proc_control_B.ct_i[612], &ct[428], sizeof(real_T) << 4U);
  proc_control_B.ct_i[628] = ct[444];
  proc_control_B.ct_i[629] = ct[446];
  proc_control_B.ct_i[630] = ct[15] * ct[191];
  proc_control_B.ct_i[631] = ct[447];
  proc_control_B.ct_i[632] = ct[448];
  proc_control_B.ct_i[633] = ct[449];
  proc_control_B.ct_i[634] = ct[450];
  proc_control_B.ct_i[635] = ct[451];
  proc_control_B.ct_i[636] = ct[452];
  proc_control_B.ct_i[637] = ct[453];
  proc_control_B.ct_i[638] = proc_control_B.dv51[0];
  proc_control_B.ct_i[639] = ct[454];
  proc_control_B.ct_i[640] = ct[455];
  proc_control_B.ct_i[641] = ct[456];
  proc_control_B.ct_i[642] = ct[457];
  memcpy(&proc_control_B.ct_i[643], &ct[459], 26U * sizeof(real_T));
  proc_control_B.ct_i[669] = ct[16] * ct[197];
  proc_control_B.ct_i[670] = ct[485];
  proc_control_B.ct_i[671] = ct[486];
  proc_control_B.ct_i[672] = ct[487];
  proc_control_B.ct_i[673] = proc_control_B.dv51[1];
  memcpy(&proc_control_B.ct_i[674], &ct[488], 23U * sizeof(real_T));
  proc_control_B.ct_i[697] = ct[27] * ct[112];
  proc_control_B.ct_i[698] = proc_control_B.t575;
  _mm_storeu_pd(&proc_control_B.ct_i[699], _mm_mul_pd(_mm_set_pd(ct[115], ct[29]),
    _mm_set_pd(ct[801], ct[114])));
  _mm_storeu_pd(&proc_control_B.ct_i[701], _mm_mul_pd(_mm_loadu_pd(&ct[116]),
    _mm_loadu_pd(&ct[802])));
  memcpy(&proc_control_B.ct_i[703], &ct[511], 50U * sizeof(real_T));
  proc_control_B.ct_i[753] = ct[561];
  proc_control_B.ct_i[754] = ct[563];
  proc_control_B.ct_i[755] = ct[564];
  proc_control_B.ct_i[756] = ct[565];
  proc_control_B.ct_i[757] = ct[568];
  proc_control_B.ct_i[758] = ct[570];
  proc_control_B.ct_i[759] = ct[571];
  proc_control_B.ct_i[760] = ct[572];
  proc_control_B.ct_i[761] = ct[574];
  proc_control_B.ct_i[762] = ct[576];
  proc_control_B.ct_i[763] = ct[578];
  proc_control_B.ct_i[764] = ct[579];
  proc_control_B.ct_i[765] = ct[581];
  proc_control_B.ct_i[766] = ct[583];
  proc_control_B.ct_i[767] = ct[584];
  proc_control_B.ct_i[768] = ct[585];
  proc_control_B.ct_i[769] = ct[586];
  proc_control_B.ct_i[770] = ct[4] * ct[306];
  proc_control_B.ct_i[771] = ct[587];
  proc_control_B.ct_i[772] = ct[9] * ct[300];
  proc_control_B.ct_i[773] = ct[588];
  proc_control_B.ct_i[774] = ct[8] * ct[306];
  proc_control_B.ct_i[775] = ct[589];
  proc_control_B.ct_i[776] = ct[9] * ct[303];
  proc_control_B.ct_i[777] = ct[590];
  proc_control_B.ct_i[778] = ct[10] * ct[296];
  proc_control_B.ct_i[779] = ct[591];
  proc_control_B.ct_i[780] = ct[0] * ct[310];
  proc_control_B.ct_i[781] = ct[592];
  proc_control_B.ct_i[782] = ct[8] * ct[310];
  proc_control_B.ct_i[783] = ct[593];
  proc_control_B.ct_i[784] = ct[10] * ct[303];
  proc_control_B.ct_i[785] = ct[594];
  proc_control_B.ct_i[786] = ct[11] * ct[296];
  proc_control_B.ct_i[787] = ct[595];
  proc_control_B.ct_i[788] = ct[0] * ct[313];
  proc_control_B.ct_i[789] = ct[596];
  proc_control_B.ct_i[790] = ct[11] * ct[300];
  proc_control_B.ct_i[791] = ct[597];
  proc_control_B.ct_i[792] = ct[4] * ct[313];
  proc_control_B.ct_i[793] = ct[599];
  _mm_storeu_pd(&proc_control_B.ct_i[794], _mm_mul_pd(_mm_set_pd(ct[11], ct[9]),
    _mm_set_pd(ct[306], ct[310])));
  proc_control_B.ct_i[796] = ct[9] * ct[313];
  proc_control_B.ct_i[797] = ct[603];
  proc_control_B.ct_i[798] = ct[16] * ct[296];
  proc_control_B.ct_i[799] = ct[604];
  proc_control_B.ct_i[800] = ct[17] * ct[296];
  proc_control_B.ct_i[801] = ct[605];
  proc_control_B.ct_i[802] = ct[16] * ct[298];
  proc_control_B.ct_i[803] = ct[606];
  proc_control_B.ct_i[804] = ct[607];
  proc_control_B.ct_i[805] = ct[17] * ct[298];
  memcpy(&proc_control_B.ct_i[806], &ct[609], 12U * sizeof(real_T));
  proc_control_B.ct_i[818] = ct[15] * ct[300];
  proc_control_B.ct_i[819] = ct[622];
  proc_control_B.ct_i[820] = ct[623];
  proc_control_B.ct_i[821] = ct[624];
  proc_control_B.ct_i[822] = ct[625];
  proc_control_B.ct_i[823] = ct[15] * ct[301];
  proc_control_B.ct_i[824] = ct[626];
  proc_control_B.ct_i[825] = ct[627];
  _mm_storeu_pd(&proc_control_B.ct_i[826], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[300])));
  proc_control_B.ct_i[828] = ct[629];
  proc_control_B.ct_i[829] = ct[630];
  proc_control_B.ct_i[830] = ct[632];
  proc_control_B.ct_i[831] = ct[633];
  proc_control_B.ct_i[832] = ct[634];
  proc_control_B.ct_i[833] = ct[635];
  proc_control_B.ct_i[834] = ct[636];
  proc_control_B.ct_i[835] = ct[637];
  proc_control_B.ct_i[836] = ct[638];
  proc_control_B.ct_i[837] = ct[640];
  proc_control_B.ct_i[838] = ct[641];
  proc_control_B.ct_i[839] = ct[642];
  proc_control_B.ct_i[840] = ct[643];
  proc_control_B.ct_i[841] = ct[644];
  proc_control_B.ct_i[842] = ct[15] * ct[303];
  proc_control_B.ct_i[843] = ct[645];
  _mm_storeu_pd(&proc_control_B.ct_i[844], _mm_mul_pd(tmp_5, _mm_set_pd(ct[303],
    ct[304])));
  proc_control_B.ct_i[846] = ct[646];
  proc_control_B.ct_i[847] = ct[647];
  proc_control_B.ct_i[848] = ct[648];
  _mm_storeu_pd(&proc_control_B.ct_i[849], _mm_mul_pd(_mm_set_pd(ct[11], ct[16]),
    _mm_set_pd(ct[310], ct[304])));
  proc_control_B.ct_i[851] = ct[10] * ct[313];
  proc_control_B.ct_i[852] = ct[651];
  proc_control_B.ct_i[853] = ct[16] * ct[306];
  proc_control_B.ct_i[854] = ct[652];
  _mm_storeu_pd(&proc_control_B.ct_i[855], _mm_mul_pd(_mm_set_pd(ct[16], ct[17]),
    _mm_loadu_pd(&ct[306])));
  _mm_storeu_pd(&proc_control_B.ct_i[857], _mm_mul_pd(_mm_set_pd(ct[15], ct[17]),
    _mm_set_pd(ct[310], ct[307])));
  proc_control_B.ct_i[859] = ct[653];
  proc_control_B.ct_i[860] = ct[15] * ct[311];
  proc_control_B.ct_i[861] = ct[654];
  _mm_storeu_pd(&proc_control_B.ct_i[862], _mm_mul_pd(tmp, _mm_loadu_pd(&ct[310])));
  proc_control_B.ct_i[864] = ct[15] * ct[313];
  proc_control_B.ct_i[865] = ct[655];
  _mm_storeu_pd(&proc_control_B.ct_i[866], _mm_mul_pd(tmp_5, _mm_set_pd(ct[313],
    ct[314])));
  proc_control_B.ct_i[868] = ct[656];
  proc_control_B.ct_i[869] = ct[16] * ct[314];
  proc_control_B.ct_i[870] = ct[657];
  proc_control_B.ct_i[871] = ct[658];
  proc_control_B.ct_i[872] = ct[660];
  proc_control_B.ct_i[873] = ct[661];
  proc_control_B.ct_i[874] = ct[663];
  proc_control_B.ct_i[875] = ct[664];
  memcpy(&proc_control_B.ct_i[876], &ct[667], 18U * sizeof(real_T));
  proc_control_B.ct_i[894] = ct[685];
  proc_control_B.ct_i[895] = ct[687];
  proc_control_B.ct_i[896] = ct[688];
  proc_control_B.ct_i[897] = ct[690];
  proc_control_B.ct_i[898] = ct[691];
  proc_control_B.ct_i[899] = ct[694];
  proc_control_B.ct_i[900] = ct[695];
  proc_control_B.ct_i[901] = ct[697];
  proc_control_B.ct_i[902] = ct[699];
  proc_control_B.ct_i[903] = ct[701];
  proc_control_B.ct_i[904] = ct[703];
  proc_control_B.ct_i[905] = ct[705];
  proc_control_B.ct_i[906] = ct[707];
  proc_control_B.ct_i[907] = ct[709];
  proc_control_B.ct_i[908] = ct[711];
  proc_control_B.ct_i[909] = ct[714];
  proc_control_B.ct_i[910] = ct[715];
  proc_control_B.ct_i[911] = ct[718];
  proc_control_B.ct_i[912] = ct[719];
  proc_control_B.ct_i[913] = ct[738];
  proc_control_B.ct_i[914] = ct[739];
  proc_control_B.ct_i[915] = ct[740];
  proc_control_B.ct_i[916] = -ct[267];
  proc_control_B.ct_i[917] = ct[741];
  proc_control_B.ct_i[918] = ct[742];
  proc_control_B.ct_i[919] = ct[743];
  proc_control_B.ct_i[920] = ct[744];
  proc_control_B.ct_i[921] = ct[745];
  proc_control_B.ct_i[922] = -ct[268];
  proc_control_B.ct_i[923] = ct[746];
  proc_control_B.ct_i[924] = ct[748];
  proc_control_B.ct_i[925] = ct[749];
  proc_control_B.ct_i[926] = -ct[269];
  proc_control_B.ct_i[927] = ct[752];
  proc_control_B.ct_i[928] = ct[753];
  proc_control_B.ct_i[929] = ct[754];
  proc_control_B.ct_i[930] = ct[755];
  proc_control_B.ct_i[931] = ct[757];
  proc_control_B.ct_i[932] = ct[760];
  proc_control_B.ct_i[933] = ct[761];
  proc_control_B.ct_i[934] = ct[762];
  proc_control_B.ct_i[935] = ct[763];
  proc_control_B.ct_i[936] = ct[764];
  proc_control_B.ct_i[937] = ct[766];
  proc_control_B.ct_i[938] = ct[767];
  proc_control_B.ct_i[939] = ct[769];
  proc_control_B.ct_i[940] = ct[771];
  proc_control_B.ct_i[941] = ct[772];
  proc_control_B.ct_i[942] = ct[774];
  proc_control_B.ct_i[943] = ct[776];
  proc_control_B.ct_i[944] = ct[778];
  memcpy(&proc_control_B.ct_i[945], &ct[780], sizeof(real_T) << 3U);
  proc_control_B.ct_i[953] = -ct[296];
  proc_control_B.ct_i[954] = -ct[300];
  proc_control_B.ct_i[955] = -ct[303];
  proc_control_B.ct_i[956] = -ct[309];
  proc_control_B.ct_i[957] = -ct[312];
  proc_control_B.ct_i[958] = -ct[315];
  proc_control_B.ct_i[959] = -ct[323];
  proc_control_B.ct_i[960] = -ct[326];
  proc_control_B.ct_i[961] = -ct[327];
  proc_control_B.ct_i[962] = -ct[329];
  proc_control_B.ct_i[963] = -ct[333];
  proc_control_B.ct_i[964] = -ct[334];
  proc_control_B.ct_i[965] = -ct[336];
  proc_control_B.ct_i[966] = -ct[339];
  proc_control_B.ct_i[967] = -ct[340];
  proc_control_B.ct_i[968] = -ct[344];
  proc_control_B.ct_i[969] = -ct[345];
  proc_control_B.ct_i[970] = ct[788];
  proc_control_B.ct_i[971] = ct[789];
  proc_control_B.ct_i[972] = ct[790];
  proc_control_B.ct_i[973] = -(ct[5] * ct[191]);
  proc_control_B.ct_i[974] = -(ct[2] * ct[192]);
  proc_control_B.ct_i[975] = ct[791];
  proc_control_B.ct_i[976] = -ct[352];
  proc_control_B.ct_i[977] = ct[792];
  proc_control_B.ct_i[978] = -(ct[7] * ct[191]);
  proc_control_B.ct_i[979] = -(ct[1] * ct[193]);
  proc_control_B.ct_i[980] = ct[793];
  proc_control_B.ct_i[981] = ct[794];
  proc_control_B.ct_i[982] = -(ct[3] * ct[193]);
  proc_control_B.ct_i[983] = -(ct[6] * ct[192]);
  proc_control_B.ct_i[984] = -ct[364];
  proc_control_B.ct_i[985] = -ct[367];
  proc_control_B.ct_i[986] = -ct[369];
  proc_control_B.ct_i[987] = -ct[371];
  proc_control_B.ct_i[988] = -ct[374];
  proc_control_B.ct_i[989] = -ct[376];
  proc_control_B.ct_i[990] = -ct[383];
  proc_control_B.ct_i[991] = ct[795];
  proc_control_B.ct_i[992] = -ct[385];
  proc_control_B.ct_i[993] = -ct[386];
  proc_control_B.ct_i[994] = -ct[388];
  proc_control_B.ct_i[995] = -ct[394];
  proc_control_B.ct_i[996] = -ct[395];
  proc_control_B.ct_i[997] = -ct[400];
  proc_control_B.ct_i[998] = -ct[401];
  proc_control_B.ct_i[999] = ct[796];
  proc_control_B.ct_i[1000] = ct[797];
  proc_control_B.ct_i[1001] = -ct[412];
  proc_control_B.ct_i[1002] = -ct[413];
  proc_control_B.ct_i[1003] = -ct[414];
  proc_control_B.ct_i[1004] = ct[798];
  proc_control_B.ct_i[1005] = ct[799];
  proc_control_B.ct_i[1006] = ct[800];
  proc_control_B.ct_i[1007] = -ct[425];
  proc_control_B.ct_i[1008] = -ct[427];
  proc_control_B.ct_i[1009] = -ct[445];
  proc_control_B.ct_i[1010] = -(ct[16] * ct[192]);
  proc_control_B.ct_i[1011] = -proc_control_B.dv51[0];
  proc_control_B.ct_i[1012] = -ct[458];
  proc_control_B.ct_i[1013] = ct[801];
  proc_control_B.ct_i[1014] = ct[802];
  proc_control_B.ct_i[1015] = ct[803];
  proc_control_ft_3_p(proc_control_B.ct_i, out1);
}

void proc_control::proc_control_ft_1_p(const real_T ct[435], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_1g;
  __m128d tmp_1h;
  __m128d tmp_1i;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp = _mm_set1_pd(ct[312]);
  tmp_0 = _mm_set1_pd(ct[21]);
  tmp_1 = _mm_set1_pd(ct[24]);
  tmp_l = _mm_set_pd(ct[10], ct[14]);
  tmp_17 = _mm_loadu_pd(&ct[22]);
  tmp_18 = _mm_loadu_pd(&ct[25]);
  _mm_storeu_pd(&proc_control_B.dv50[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_0), tmp_17), tmp_1), tmp_18), tmp));
  proc_control_B.t896 = proc_control_B.dv50[0];
  proc_control_B.t897 = proc_control_B.dv50[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_4 = _mm_set1_pd(ct[25]);
  tmp_5 = _mm_set1_pd(ct[23]);
  tmp_a = _mm_set1_pd(ct[26]);
  tmp_s = _mm_set1_pd(ct[22]);
  _mm_storeu_pd(&proc_control_B.dv50[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[15], ct[6]), tmp_s), tmp_5), tmp_4),
    tmp_a), tmp));
  proc_control_B.t898_p = proc_control_B.dv50[0];
  proc_control_B.t899_k = proc_control_B.dv50[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv50[0], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[16], ct[17]), tmp_0), tmp_17), tmp_1),
    tmp_18), tmp));
  memcpy(&proc_control_B.ct_c[0], &ct[6], sizeof(real_T) << 5U);
  proc_control_B.ct_c[32] = -ct[344];
  proc_control_B.ct_c[33] = -ct[347];
  proc_control_B.ct_c[34] = ct[38];
  tmp_2 = _mm_set1_pd(ct[258]);
  tmp_c = _mm_set_pd(ct[278], ct[263]);
  tmp_14 = _mm_set1_pd(ct[333]);
  _mm_storeu_pd(&proc_control_B.ct_c[35], _mm_mul_pd(_mm_mul_pd(tmp_2, tmp_c),
    tmp_14));
  proc_control_B.ct_c[37] = ct[263] * ct[278] * ct[333];
  proc_control_B.ct_c[38] = ct[39];
  proc_control_B.ct_c[39] = ct[40];
  proc_control_B.ct_c[40] = ct[41];
  proc_control_B.ct_c[41] = ct[42];
  tmp_3 = _mm_set1_pd(ct[322]);
  tmp_1f = _mm_loadu_pd(&ct[7]);
  _mm_storeu_pd(&proc_control_B.ct_c[42], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1f, tmp_17), tmp_1), tmp_2), tmp_3));
  tmp_m = _mm_set_pd(ct[263], ct[258]);
  tmp_o = _mm_set_pd(ct[21], ct[22]);
  tmp_1i = _mm_loadu_pd(&ct[9]);
  _mm_storeu_pd(&proc_control_B.ct_c[44], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1i, tmp_o), tmp_1), tmp_m), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[46], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[12], ct[10]), tmp_17), tmp_1), tmp_2), tmp_3));
  tmp_7 = _mm_set1_pd(ct[14]);
  tmp_9 = _mm_set_pd(ct[23], ct[21]);
  tmp_b = _mm_set_pd(ct[258], ct[278]);
  _mm_storeu_pd(&proc_control_B.ct_c[48], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_7, tmp_9), tmp_1), tmp_b), tmp_3));
  tmp_8 = _mm_set1_pd(ct[6]);
  tmp_e = _mm_set_pd(ct[258], ct[263]);
  tmp_19 = _mm_loadu_pd(&ct[21]);
  _mm_storeu_pd(&proc_control_B.ct_c[50], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_8, tmp_19), tmp_4), tmp_e), tmp_3));
  tmp_6 = _mm_set1_pd(ct[263]);
  tmp_16 = _mm_mul_pd(_mm_set_pd(ct[9], ct[7]), tmp_0);
  _mm_storeu_pd(&proc_control_B.ct_c[52], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_16, tmp_4), tmp_6), tmp_3));
  tmp_15 = _mm_set_pd(ct[13], ct[11]);
  _mm_storeu_pd(&proc_control_B.ct_c[54], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_15, tmp_5), tmp_4), tmp_6), tmp_3));
  tmp_h = _mm_set_pd(ct[263], ct[278]);
  _mm_storeu_pd(&proc_control_B.ct_c[56], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_7, tmp_17), tmp_4), tmp_h), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[58], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_8, tmp_9), tmp_a), tmp_b), tmp_3));
  tmp_d = _mm_set1_pd(ct[278]);
  _mm_storeu_pd(&proc_control_B.ct_c[60], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(ct[10], ct[8]), tmp_19), tmp_a), tmp_d), tmp_3));
  tmp_q = _mm_set_pd(ct[22], ct[23]);
  tmp_1a = _mm_loadu_pd(&ct[10]);
  _mm_storeu_pd(&proc_control_B.ct_c[62], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1a, tmp_q), tmp_a), tmp_c), tmp_3));
  tmp_1g = _mm_loadu_pd(&ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_c[64], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1g, tmp_19), tmp_a), tmp_d), tmp_3));
  tmp_f = _mm_set1_pd(ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_c[66], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_f, tmp_19), tmp_4), tmp_e), tmp_3));
  tmp_g = _mm_set1_pd(ct[16]);
  _mm_storeu_pd(&proc_control_B.ct_c[68], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, tmp_19), tmp_1), tmp_e), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[70], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_f, tmp_9), tmp_a), tmp_b), tmp_3));
  tmp_i = _mm_set1_pd(ct[17]);
  _mm_storeu_pd(&proc_control_B.ct_c[72], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_i, tmp_9), tmp_1), tmp_b), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[74], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_g, tmp_17), tmp_a), tmp_h), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[76], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_i, tmp_17), tmp_4), tmp_h), tmp_3));
  tmp_9 = _mm_mul_pd(_mm_set_pd(ct[8], ct[6]), _mm_set_pd(ct[12], ct[14]));
  _mm_storeu_pd(&proc_control_B.ct_c[78], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_9, tmp_1), tmp_4), tmp_2), tmp));
  tmp_j = _mm_set_pd(ct[13], ct[14]);
  tmp_j = _mm_mul_pd(tmp_1a, tmp_j);
  tmp_1b = _mm_mul_pd(tmp_j, tmp_1);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_c[80], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1b, tmp_4), tmp_6), tmp));
  tmp_k = _mm_set_pd(ct[9], ct[10]);
  tmp_k = _mm_mul_pd(_mm_loadu_pd(&ct[6]), tmp_k);
  _mm_storeu_pd(&proc_control_B.ct_c[82], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, tmp_1), tmp_a), tmp_2), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[84], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1b, tmp_a), tmp_d), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[86], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_k, tmp_4), tmp_a), tmp_6), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[88], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_9, tmp_4), tmp_a), tmp_d), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[90], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_f), tmp_1), tmp_18), tmp_2), tmp));
  proc_control_B.ct_c[92] = ct[43];
  tmp_1b = _mm_loadu_pd(&ct[24]);
  _mm_storeu_pd(&proc_control_B.ct_c[93], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, _mm_set_pd(ct[15], ct[16])), tmp_1b), tmp_18),
    tmp_6), tmp));
  tmp_l = _mm_set_pd(ct[6], ct[14]);
  tmp_n = _mm_set_pd(ct[24], ct[25]);
  tmp_1c = _mm_loadu_pd(&ct[15]);
  _mm_storeu_pd(&proc_control_B.ct_c[95], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_1c), tmp_n), tmp_a), tmp_b), tmp));
  tmp_b = _mm_set_pd(ct[10], ct[6]);
  _mm_storeu_pd(&proc_control_B.ct_c[97], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_b, tmp_i), tmp_1), tmp_4), tmp_m), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[99], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_l, tmp_g), tmp_1b), tmp_a), tmp_h), tmp));
  proc_control_B.ct_c[101] = ct[44];
  proc_control_B.ct_c[102] = ct[45];
  _mm_storeu_pd(&proc_control_B.ct_c[103], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[6], ct[10]), tmp_i), tmp_1b), tmp_a),
    tmp_d), tmp));
  tmp_l = _mm_set_pd(ct[25], ct[26]);
  tmp_1d = _mm_loadu_pd(&ct[16]);
  tmp_1h = _mm_mul_pd(tmp_f, tmp_1d);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_c[105], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1h, tmp_1), tmp_l), tmp_2), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[107], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_1d), tmp_n), tmp_l), tmp_6), tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[109], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_i), tmp_n), tmp_a), tmp_d), tmp));
  proc_control_B.ct_c[111] = ct[46];
  _mm_storeu_pd(&proc_control_B.ct_c[112], _mm_add_pd(_mm_loadu_pd(&ct[3]),
    _mm_loadu_pd(&ct[391])));
  _mm_storeu_pd(&proc_control_B.ct_c[114], _mm_add_pd(_mm_set_pd(ct[0], ct[5]),
    _mm_set_pd(ct[396], ct[393])));
  _mm_storeu_pd(&proc_control_B.ct_c[116], _mm_add_pd(_mm_loadu_pd(&ct[1]),
    _mm_loadu_pd(&ct[404])));
  proc_control_B.ct_c[118] = ct[47];
  proc_control_B.ct_c[119] = ct[48];
  proc_control_B.ct_c[120] = ct[49];
  tmp_n = _mm_set1_pd(ct[32]);
  _mm_storeu_pd(&proc_control_B.ct_c[121], _mm_mul_pd(_mm_sub_pd(_mm_set_pd(ct
    [176], ct[134]), _mm_set_pd(ct[432], ct[433])), tmp_n));
  proc_control_B.ct_c[123] = (ct[140] - ct[434]) * ct[32];
  proc_control_B.ct_c[124] = ct[50];
  proc_control_B.ct_c[125] = ct[51];
  proc_control_B.ct_c[126] = ct[54];
  proc_control_B.ct_c[127] = ct[55];
  proc_control_B.ct_c[128] = ct[57];
  proc_control_B.ct_c[129] = ct[58];
  proc_control_B.ct_c[130] = ct[61];
  proc_control_B.ct_c[131] = ct[62];
  proc_control_B.ct_c[132] = ct[65];
  proc_control_B.ct_c[133] = ct[67];
  proc_control_B.ct_c[134] = ct[68];
  proc_control_B.ct_c[135] = ct[70];
  proc_control_B.ct_c[136] = ct[72];
  proc_control_B.ct_c[137] = ct[74];
  memcpy(&proc_control_B.ct_c[138], &ct[76], 12U * sizeof(real_T));
  proc_control_B.ct_c[150] = ct[88];
  memcpy(&proc_control_B.ct_c[151], &ct[90], sizeof(real_T) << 3U);
  proc_control_B.ct_c[159] = ct[98];
  memcpy(&proc_control_B.ct_c[160], &ct[100], 13U * sizeof(real_T));
  proc_control_B.ct_c[173] = ct[113];
  proc_control_B.ct_c[174] = ct[116];
  proc_control_B.ct_c[175] = ct[117];
  proc_control_B.ct_c[176] = ct[118];
  proc_control_B.ct_c[177] = ct[119];
  proc_control_B.ct_c[178] = ct[120];
  proc_control_B.ct_c[179] = ct[121];
  proc_control_B.ct_c[180] = ct[32] + ct[416];
  memcpy(&proc_control_B.ct_c[181], &ct[122], 10U * sizeof(real_T));
  tmp_1d = _mm_set1_pd(ct[330]);
  _mm_storeu_pd(&proc_control_B.ct_c[191], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp_o), tmp_5), tmp_1d));
  proc_control_B.ct_c[193] = ct[14] * ct[21] * ct[22] * ct[330];
  proc_control_B.ct_c[194] = ct[132];
  proc_control_B.ct_c[195] = ct[133];
  _mm_storeu_pd(&proc_control_B.ct_c[196], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1c, tmp_o), tmp_5), tmp_1d));
  proc_control_B.ct_c[198] = ct[17] * ct[21] * ct[22] * ct[330];
  proc_control_B.ct_c[199] = ct[135];
  proc_control_B.ct_c[200] = ct[136];
  proc_control_B.ct_c[201] = ct[137];
  proc_control_B.ct_c[202] = ct[138];
  proc_control_B.ct_c[203] = ct[139];
  proc_control_B.ct_c[204] = ct[141];
  proc_control_B.ct_c[205] = ct[142];
  proc_control_B.ct_c[206] = ct[143];
  proc_control_B.ct_c[207] = ct[146];
  proc_control_B.ct_c[208] = ct[147];
  proc_control_B.ct_c[209] = ct[149];
  proc_control_B.ct_c[210] = ct[152];
  proc_control_B.ct_c[211] = ct[153];
  proc_control_B.ct_c[212] = ct[155];
  proc_control_B.ct_c[213] = ct[158];
  proc_control_B.ct_c[214] = ct[159];
  proc_control_B.ct_c[215] = ct[162];
  proc_control_B.ct_c[216] = ct[164];
  proc_control_B.ct_c[217] = ct[166];
  proc_control_B.ct_c[218] = ct[168];
  proc_control_B.ct_c[219] = ct[170];
  proc_control_B.ct_c[220] = ct[172];
  proc_control_B.ct_c[221] = ct[174];
  proc_control_B.ct_c[222] = ct[177];
  proc_control_B.ct_c[223] = ct[178];
  memcpy(&proc_control_B.ct_c[224], &ct[180], sizeof(real_T) << 4U);
  proc_control_B.ct_c[240] = ct[196];
  proc_control_B.ct_c[241] = ct[198];
  proc_control_B.ct_c[242] = ct[199];
  proc_control_B.ct_c[243] = ct[200];
  proc_control_B.ct_c[244] = ct[201];
  proc_control_B.ct_c[245] = ct[202];
  proc_control_B.ct_c[246] = ct[204];
  proc_control_B.ct_c[247] = ct[206];
  proc_control_B.ct_c[248] = ct[207];
  proc_control_B.ct_c[249] = ct[208];
  memcpy(&proc_control_B.ct_c[250], &ct[210], 17U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_c[267], _mm_mul_pd(tmp_n, _mm_loadu_pd(&ct
    [417])));
  proc_control_B.ct_c[269] = ct[32] * ct[419];
  memcpy(&proc_control_B.ct_c[270], &ct[227], 26U * sizeof(real_T));
  proc_control_B.ct_c[296] = ct[6] * ct[258] * ct[330];
  proc_control_B.ct_c[297] = ct[253];
  tmp_n = _mm_set_pd(ct[333], ct[330]);
  tmp_13 = _mm_set_pd(ct[268], ct[262]);
  _mm_storeu_pd(&proc_control_B.ct_c[298], _mm_mul_pd(_mm_mul_pd(tmp_8, tmp_13),
    tmp_n));
  tmp_u = _mm_set1_pd(ct[10]);
  _mm_storeu_pd(&proc_control_B.ct_c[300], _mm_mul_pd(_mm_mul_pd(tmp_u,
    _mm_set_pd(ct[273], ct[263])), tmp_1d));
  tmp_p = _mm_set_pd(ct[330], ct[333]);
  _mm_storeu_pd(&proc_control_B.ct_c[302], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct
    [14], ct[10]), _mm_set_pd(ct[278], ct[279])), tmp_p));
  _mm_storeu_pd(&proc_control_B.ct_c[304], _mm_mul_pd(_mm_mul_pd(tmp_7,
    _mm_set_pd(ct[285], ct[282])), tmp_n));
  tmp_10 = _mm_set_pd(ct[262], ct[258]);
  _mm_storeu_pd(&proc_control_B.ct_c[306], _mm_mul_pd(_mm_mul_pd(tmp_f, tmp_10),
    tmp_1d));
  proc_control_B.ct_c[308] = ct[254];
  tmp_11 = _mm_set_pd(ct[263], ct[268]);
  _mm_storeu_pd(&proc_control_B.ct_c[309], _mm_mul_pd(_mm_mul_pd(tmp_1c, tmp_11),
    tmp_p));
  tmp_p = _mm_set_pd(ct[279], ct[273]);
  _mm_storeu_pd(&proc_control_B.ct_c[311], _mm_mul_pd(_mm_mul_pd(tmp_g, tmp_p),
    tmp_n));
  tmp_n = _mm_set_pd(ct[282], ct[278]);
  _mm_storeu_pd(&proc_control_B.ct_c[313], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_n),
    tmp_1d));
  proc_control_B.ct_c[315] = ct[17] * ct[285] * ct[333];
  proc_control_B.ct_c[316] = ct[255];
  proc_control_B.ct_c[317] = ct[256];
  proc_control_B.ct_c[318] = ct[257];
  proc_control_B.ct_c[319] = ct[258];
  proc_control_B.ct_c[320] = ct[259];
  proc_control_B.ct_c[321] = ct[260];
  proc_control_B.ct_c[322] = ct[261];
  _mm_storeu_pd(&proc_control_B.ct_c[323], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct[51])));
  _mm_storeu_pd(&proc_control_B.ct_c[325], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct[53])));
  _mm_storeu_pd(&proc_control_B.ct_c[327], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct[55])));
  proc_control_B.ct_c[329] = ct[25] * ct[51];
  proc_control_B.ct_c[330] = ct[262];
  tmp_1c = _mm_loadu_pd(&ct[52]);
  _mm_storeu_pd(&proc_control_B.ct_c[331], _mm_mul_pd(tmp_4, tmp_1c));
  tmp_1e = _mm_loadu_pd(&ct[54]);
  _mm_storeu_pd(&proc_control_B.ct_c[333], _mm_mul_pd(tmp_4, tmp_1e));
  _mm_storeu_pd(&proc_control_B.ct_c[335], _mm_mul_pd(tmp_18, _mm_set_pd(ct[51],
    ct[56])));
  _mm_storeu_pd(&proc_control_B.ct_c[337], _mm_mul_pd(tmp_a, tmp_1c));
  _mm_storeu_pd(&proc_control_B.ct_c[339], _mm_mul_pd(tmp_a, tmp_1e));
  proc_control_B.ct_c[341] = ct[263];
  tmp_1c = _mm_set_pd(ct[24], ct[26]);
  _mm_storeu_pd(&proc_control_B.ct_c[342], _mm_mul_pd(tmp_1c, _mm_set_pd(ct[64],
    ct[56])));
  _mm_storeu_pd(&proc_control_B.ct_c[344], _mm_mul_pd(_mm_set_pd(ct[22], ct[24]),
    _mm_set_pd(ct[82], ct[65])));
  proc_control_B.ct_c[346] = ct[22] * ct[83];
  proc_control_B.ct_c[347] = ct[265];
  proc_control_B.ct_c[348] = ct[266];
  proc_control_B.ct_c[349] = ct[268];
  _mm_storeu_pd(&proc_control_B.ct_c[350], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1f, _mm_set_pd(ct[9], ct[11])), tmp_19), tmp_5), tmp_1d));
  proc_control_B.ct_c[352] = ct[23] * ct[92];
  proc_control_B.ct_c[353] = ct[270];
  proc_control_B.ct_c[354] = ct[23] * ct[93];
  proc_control_B.ct_c[355] = ct[272];
  proc_control_B.ct_c[356] = ct[273];
  _mm_storeu_pd(&proc_control_B.ct_c[357], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1f, tmp_1g), tmp_o), tmp_q), tmp_1d));
  proc_control_B.ct_c[359] = ct[274];
  proc_control_B.ct_c[360] = ct[277];
  proc_control_B.ct_tmp_k = ct[9] * ct[13] * ct[21] * ct[23];
  proc_control_B.ct_c[361] = proc_control_B.ct_tmp_k * ct[330];
  proc_control_B.ct_c[362] = ct[278];
  proc_control_B.ct_c[363] = ct[11] * ct[12] * ct[21] * ct[22] * ct[330];
  _mm_storeu_pd(&proc_control_B.ct_c[364], _mm_mul_pd(tmp_5, _mm_set_pd(ct[103],
    ct[101])));
  tmp_1e = _mm_loadu_pd(&ct[64]);
  _mm_storeu_pd(&proc_control_B.ct_c[366], _mm_mul_pd(tmp_4, tmp_1e));
  _mm_storeu_pd(&proc_control_B.ct_c[368], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct[69])));
  _mm_storeu_pd(&proc_control_B.ct_c[370], _mm_mul_pd(tmp_a, tmp_1e));
  proc_control_B.ct_c[372] = ct[24] * ct[73];
  proc_control_B.ct_c[373] = ct[279];
  tmp_1e = _mm_set_pd(ct[69], ct[74]);
  _mm_storeu_pd(&proc_control_B.ct_c[374], _mm_mul_pd(tmp_1b, tmp_1e));
  _mm_storeu_pd(&proc_control_B.ct_c[376], _mm_mul_pd(_mm_set_pd(ct[22], ct[25]),
    _mm_set_pd(ct[108], ct[70])));
  proc_control_B.ct_c[378] = ct[280];
  proc_control_B.ct_c[379] = ct[281];
  tmp_r = _mm_set_pd(ct[25], ct[23]);
  _mm_storeu_pd(&proc_control_B.ct_c[380], _mm_mul_pd(tmp_r, _mm_set_pd(ct[73],
    ct[112])));
  proc_control_B.ct_c[382] = ct[282];
  _mm_storeu_pd(&proc_control_B.ct_c[383], _mm_mul_pd(tmp_18, tmp_1e));
  _mm_storeu_pd(&proc_control_B.ct_c[385], _mm_mul_pd(tmp_1c, _mm_set_pd(ct[77],
    ct[70])));
  _mm_storeu_pd(&proc_control_B.ct_c[387], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct[73])));
  proc_control_B.ct_c[389] = ct[22] * ct[116];
  proc_control_B.ct_c[390] = ct[283];
  proc_control_B.ct_c[391] = ct[284];
  proc_control_B.ct_c[392] = ct[285];
  _mm_storeu_pd(&proc_control_B.ct_c[393], _mm_mul_pd(_mm_loadu_pd(&ct[23]),
    _mm_set_pd(ct[80], ct[120])));
  _mm_storeu_pd(&proc_control_B.ct_c[395], _mm_mul_pd(_mm_set_pd(ct[23], ct[25]),
    _mm_set_pd(ct[122], ct[77])));
  proc_control_B.ct_c[397] = ct[286];
  proc_control_B.ct_c[398] = ct[287];
  _mm_storeu_pd(&proc_control_B.ct_c[399], _mm_mul_pd(tmp_r, _mm_set_pd(ct[80],
    ct[126])));
  proc_control_B.ct_c[401] = ct[26] * ct[77];
  proc_control_B.ct_c[402] = ct[288];
  proc_control_B.ct_c[403] = ct[289];
  proc_control_B.ct_c[404] = ct[291];
  proc_control_B.ct_c[405] = ct[293];
  proc_control_B.ct_c[406] = ct[294];
  proc_control_B.ct_c[407] = ct[295];
  proc_control_B.ct_c[408] = ct[296];
  proc_control_B.ct_c[409] = ct[297];
  proc_control_B.ct_c[410] = ct[298];
  proc_control_B.ct_c[411] = ct[299];
  _mm_storeu_pd(&proc_control_B.ct_c[412], _mm_mul_pd(_mm_set_pd(ct[26], ct[24]),
    _mm_set_pd(ct[80], ct[106])));
  proc_control_B.ct_c[414] = ct[22] * ct[128];
  proc_control_B.ct_c[415] = ct[300];
  proc_control_B.ct_c[416] = ct[301];
  proc_control_B.ct_c[417] = ct[303];
  proc_control_B.ct_c[418] = ct[304];
  proc_control_B.ct_c[419] = ct[305];
  proc_control_B.ct_c[420] = ct[306];
  proc_control_B.ct_c[421] = ct[307];
  proc_control_B.ct_c[422] = ct[309];
  proc_control_B.ct_c[423] = ct[310];
  proc_control_B.ct_c[424] = ct[311];
  proc_control_B.ct_c[425] = ct[25] * ct[106];
  proc_control_B.ct_c[426] = ct[312];
  proc_control_B.ct_c[427] = ct[23] * ct[130];
  memcpy(&proc_control_B.ct_c[428], &ct[313], 17U * sizeof(real_T));
  _mm_storeu_pd(&proc_control_B.ct_c[445], _mm_mul_pd(tmp_1c, _mm_set_pd(ct[114],
    ct[106])));
  proc_control_B.ct_c[447] = ct[330];
  _mm_storeu_pd(&proc_control_B.ct_c[448], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1f, tmp_0), tmp_s), tmp_5), tmp_1d));
  tmp_1e = _mm_set_pd(ct[11], ct[9]);
  _mm_storeu_pd(&proc_control_B.ct_c[450], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1e, tmp_0), tmp_s), tmp_5), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[452], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1g, tmp_0), tmp_s), tmp_5), tmp_1d));
  proc_control_B.ct_c[454] = ct[331];
  proc_control_B.ct_c[455] = ct[332];
  proc_control_B.ct_c[456] = ct[333];
  proc_control_B.ct_c[457] = ct[334];
  _mm_storeu_pd(&proc_control_B.ct_c[458], _mm_mul_pd(tmp_r, _mm_set_pd(ct[114],
    ct[132])));
  proc_control_B.ct_c[460] = ct[335];
  proc_control_B.ct_c[461] = ct[336];
  proc_control_B.ct_c[462] = ct[337];
  proc_control_B.ct_c[463] = ct[338];
  proc_control_B.ct_c[464] = ct[339];
  proc_control_B.ct_c[465] = ct[340];
  proc_control_B.ct_c[466] = ct[26] * ct[114];
  proc_control_B.ct_c[467] = ct[341];
  proc_control_B.ct_c[468] = ct[342];
  proc_control_B.ct_c[469] = ct[343];
  proc_control_B.ct_c[470] = ct[345];
  proc_control_B.ct_c[471] = ct[346];
  memcpy(&proc_control_B.ct_c[472], &ct[348], 43U * sizeof(real_T));
  proc_control_B.ct_c[515] = -ct[52];
  proc_control_B.ct_c[516] = -ct[53];
  proc_control_B.ct_c[517] = -ct[56];
  proc_control_B.ct_c[518] = -ct[59];
  proc_control_B.ct_c[519] = -ct[60];
  proc_control_B.ct_c[520] = -ct[63];
  proc_control_B.ct_c[521] = -ct[64];
  proc_control_B.ct_c[522] = -ct[66];
  proc_control_B.ct_c[523] = -ct[69];
  proc_control_B.ct_c[524] = -ct[71];
  proc_control_B.ct_c[525] = -ct[73];
  proc_control_B.ct_c[526] = -ct[75];
  proc_control_B.ct_c[527] = -ct[87];
  proc_control_B.ct_c[528] = -ct[89];
  proc_control_B.ct_c[529] = -ct[91];
  proc_control_B.ct_c[530] = -ct[99];
  proc_control_B.ct_c[531] = -ct[110];
  proc_control_B.ct_c[532] = -ct[111];
  proc_control_B.ct_c[533] = -ct[114];
  proc_control_B.ct_c[534] = -ct[115];
  proc_control_B.ct_c[535] = ct[394];
  proc_control_B.ct_c[536] = ct[395];
  proc_control_B.ct_c[537] = ct[397];
  proc_control_B.ct_c[538] = ct[398];
  proc_control_B.ct_c[539] = ct[399];
  proc_control_B.ct_c[540] = ct[400];
  proc_control_B.ct_c[541] = ct[401];
  proc_control_B.ct_c[542] = ct[402];
  proc_control_B.ct_c[543] = ct[403];
  proc_control_B.ct_c[544] = -ct[144];
  proc_control_B.ct_c[545] = -ct[145];
  proc_control_B.ct_c[546] = -ct[148];
  proc_control_B.ct_c[547] = -ct[150];
  proc_control_B.ct_c[548] = -ct[151];
  proc_control_B.ct_c[549] = -ct[154];
  proc_control_B.ct_c[550] = -ct[156];
  proc_control_B.ct_c[551] = -ct[157];
  proc_control_B.ct_c[552] = -ct[160];
  proc_control_B.ct_c[553] = -ct[161];
  proc_control_B.ct_c[554] = -ct[163];
  proc_control_B.ct_c[555] = -ct[165];
  proc_control_B.ct_c[556] = -ct[167];
  proc_control_B.ct_c[557] = -ct[169];
  proc_control_B.ct_c[558] = -ct[171];
  proc_control_B.ct_c[559] = -ct[173];
  proc_control_B.ct_c[560] = -ct[175];
  proc_control_B.ct_c[561] = -ct[179];
  proc_control_B.ct_c[562] = ct[406];
  proc_control_B.ct_c[563] = -ct[203];
  proc_control_B.ct_c[564] = -ct[205];
  proc_control_B.ct_c[565] = -ct[209];
  proc_control_B.ct_c[566] = ct[407];
  _mm_storeu_pd(&proc_control_B.ct_c[567], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_2),
    tmp_3));
  tmp_t = _mm_set_pd(ct[330], ct[322]);
  _mm_storeu_pd(&proc_control_B.ct_c[569], _mm_mul_pd(_mm_mul_pd(tmp_k, tmp_e),
    tmp_t));
  tmp_k = _mm_set1_pd(ct[7]);
  tmp_w = _mm_set1_pd(ct[9]);
  _mm_storeu_pd(&proc_control_B.ct_c[571], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_w), tmp_6), tmp_t));
  _mm_storeu_pd(&proc_control_B.ct_c[573], _mm_mul_pd(_mm_mul_pd(tmp_9, tmp_2),
    tmp_3));
  proc_control_B.ct_c[575] = ct[408];
  tmp_9 = _mm_set_pd(ct[278], ct[258]);
  tmp_12 = _mm_set_pd(ct[322], ct[330]);
  _mm_storeu_pd(&proc_control_B.ct_c[576], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[6], ct[8]), _mm_set_pd(ct[14], ct[12])), tmp_9), tmp_12));
  tmp_v = _mm_set1_pd(ct[8]);
  tmp_x = _mm_set1_pd(ct[12]);
  _mm_storeu_pd(&proc_control_B.ct_c[578], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_v, tmp_x), tmp_d), tmp_t));
  _mm_storeu_pd(&proc_control_B.ct_c[580], _mm_mul_pd(_mm_mul_pd(tmp_j, tmp_6),
    tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[582], _mm_mul_pd(_mm_mul_pd(tmp_j, tmp_h),
    tmp_t));
  tmp_j = _mm_set1_pd(ct[11]);
  tmp_z = _mm_set1_pd(ct[13]);
  _mm_storeu_pd(&proc_control_B.ct_c[584], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_z), tmp_d), tmp_t));
  _mm_storeu_pd(&proc_control_B.ct_c[586], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_u, tmp_f), tmp_m), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[588], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_f), tmp_9), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[590], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_g), tmp_m), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[592], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_g), tmp_c), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[594], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_i), tmp_9), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[596], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_u, tmp_i), tmp_c), tmp_3));
  proc_control_B.ct_c[598] = ct[15] * ct[16] * ct[258] * ct[322];
  proc_control_B.ct_c[599] = ct[412];
  _mm_storeu_pd(&proc_control_B.ct_c[600], _mm_mul_pd(_mm_mul_pd(tmp_1h, tmp_e),
    tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[602], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[6], ct[15]), _mm_set_pd(ct[21], ct[17])), tmp_h), tmp_t));
  proc_control_B.ct_c[604] = ct[6] * ct[21] * ct[278] * ct[330];
  proc_control_B.ct_c[605] = ct[413];
  _mm_storeu_pd(&proc_control_B.ct_c[606], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_19), tmp_e), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[608], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1f, tmp_q), tmp_2), tmp_1d));
  tmp_1h = _mm_loadu_pd(&ct[255]);
  _mm_storeu_pd(&proc_control_B.ct_c[610], _mm_mul_pd(tmp_k, tmp_1h));
  tmp_k = _mm_set_pd(ct[21], ct[23]);
  _mm_storeu_pd(&proc_control_B.ct_c[612], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1f, tmp_k), tmp_c), tmp_1d));
  proc_control_B.ct_c[614] = ct[414];
  _mm_storeu_pd(&proc_control_B.ct_c[615], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_v, tmp_q), tmp_9), tmp_1d));
  tmp_y = _mm_set_pd(ct[259], ct[257]);
  _mm_storeu_pd(&proc_control_B.ct_c[617], _mm_mul_pd(tmp_v, tmp_y));
  _mm_storeu_pd(&proc_control_B.ct_c[619], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_w, tmp_19), tmp_e), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[621], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1i, tmp_q), tmp_2), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[623], _mm_mul_pd(tmp_w, tmp_1h));
  _mm_storeu_pd(&proc_control_B.ct_c[625], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1e, tmp_k), tmp_6), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[627], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1a, tmp_o), tmp_d), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[629], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_j, tmp_17), tmp_h), tmp_1d));
  proc_control_B.ct_c[631] = -ct[382];
  tmp_2 = _mm_loadu_pd(&ct[260]);
  _mm_storeu_pd(&proc_control_B.ct_c[632], _mm_mul_pd(tmp_j, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_c[634], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_x, tmp_o), tmp_9), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[636], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1g, tmp_k), tmp_m), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[638], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1g, tmp_o), tmp_d), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[640], _mm_mul_pd(tmp_x, tmp_y));
  proc_control_B.ct_c[642] = ct[416];
  _mm_storeu_pd(&proc_control_B.ct_c[643], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_z, tmp_17), tmp_h), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[645], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_5), tmp_m), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[647], _mm_mul_pd(tmp_z, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_c[649], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_i), tmp_c), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[651], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_f, tmp_0), tmp_c), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[653], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_s), tmp_9), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[655], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_5), tmp_m), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[657], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_8, tmp_1), tmp_10), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[659], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_b, tmp_1b), tmp_11), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_c[661], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_u, tmp_4), tmp_p), tmp_t));
  _mm_storeu_pd(&proc_control_B.ct_c[663], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_7, tmp_a), tmp_n), tmp_3));
  proc_control_B.ct_c[665] = ct[420];
  _mm_storeu_pd(&proc_control_B.ct_c[666], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_loadu_pd(&ct[14]), tmp_1c), _mm_set_pd(ct[258], ct[285])), tmp_12));
  _mm_storeu_pd(&proc_control_B.ct_c[668], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_f, tmp_1), tmp_13), tmp_t));
  _mm_storeu_pd(&proc_control_B.ct_c[670], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_0, tmp_17), tmp_h), tmp_14));
  _mm_storeu_pd(&proc_control_B.ct_c[672], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[16], ct[22]), tmp_r), tmp_m), _mm_set_pd(ct[322], ct[333])));
  _mm_storeu_pd(&proc_control_B.ct_c[674], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_g, tmp_4), tmp_p), tmp_t));
  proc_control_B.ct_c[676] = ct[421];
  _mm_storeu_pd(&proc_control_B.ct_c[677], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_i, tmp_a), tmp_n), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[679], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set_pd(ct[22], ct[17]), tmp_1c), _mm_set_pd(ct[262], ct[285])), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[681], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_1b), _mm_set_pd(ct[273], ct[262])), tmp_1d));
  _mm_storeu_pd(&proc_control_B.ct_c[683], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_k, tmp_18), _mm_set_pd(ct[282], ct[273])), tmp_1d));
  proc_control_B.ct_c[685] = ct[22] * ct[26] * ct[282] * ct[330];
  proc_control_B.ct_c[686] = ct[197] + ct[415];
  proc_control_B.ct_c[687] = ct[422];
  proc_control_B.ct_c[688] = ct[361] + ct[371];
  _mm_storeu_pd(&proc_control_B.ct_c[689], _mm_mul_pd(tmp_1, _mm_set_pd(ct[267],
    ct[265])));
  tmp_2 = _mm_loadu_pd(&ct[271]);
  _mm_storeu_pd(&proc_control_B.ct_c[691], _mm_mul_pd(tmp_1, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_c[693], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [274])));
  _mm_storeu_pd(&proc_control_B.ct_c[695], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [276])));
  _mm_storeu_pd(&proc_control_B.ct_c[697], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [296])));
  _mm_storeu_pd(&proc_control_B.ct_c[699], _mm_mul_pd(tmp_4, _mm_set_pd(ct[266],
    ct[264])));
  _mm_storeu_pd(&proc_control_B.ct_c[701], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [304])));
  tmp_c = _mm_loadu_pd(&ct[269]);
  _mm_storeu_pd(&proc_control_B.ct_c[703], _mm_mul_pd(tmp_4, tmp_c));
  _mm_storeu_pd(&proc_control_B.ct_c[705], _mm_mul_pd(tmp_4, tmp_2));
  _mm_storeu_pd(&proc_control_B.ct_c[707], _mm_mul_pd(tmp_4, _mm_set_pd(ct[277],
    ct[275])));
  _mm_storeu_pd(&proc_control_B.ct_c[709], _mm_mul_pd(tmp_s, _mm_loadu_pd(&ct
    [313])));
  _mm_storeu_pd(&proc_control_B.ct_c[711], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [264])));
  _mm_storeu_pd(&proc_control_B.ct_c[713], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [266])));
  _mm_storeu_pd(&proc_control_B.ct_c[715], _mm_mul_pd(tmp_a, tmp_c));
  proc_control_B.ct_c[717] = ct[26] * ct[274];
  proc_control_B.ct_c[718] = ct[423];
  _mm_storeu_pd(&proc_control_B.ct_c[719], _mm_mul_pd(tmp_l, _mm_set_pd(ct[280],
    ct[276])));
  _mm_storeu_pd(&proc_control_B.ct_c[721], _mm_mul_pd(tmp_r, _mm_set_pd(ct[281],
    ct[332])));
  _mm_storeu_pd(&proc_control_B.ct_c[723], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [283])));
  _mm_storeu_pd(&proc_control_B.ct_c[725], _mm_mul_pd(tmp_q, _mm_set_pd(ct[338],
    ct[336])));
  _mm_storeu_pd(&proc_control_B.ct_c[727], _mm_mul_pd(tmp_a, _mm_loadu_pd(&ct
    [280])));
  _mm_storeu_pd(&proc_control_B.ct_c[729], _mm_mul_pd(tmp_1, _mm_loadu_pd(&ct
    [286])));
  _mm_storeu_pd(&proc_control_B.ct_c[731], _mm_mul_pd(tmp_q, _mm_set_pd(ct[349],
    ct[345])));
  _mm_storeu_pd(&proc_control_B.ct_c[733], _mm_mul_pd(tmp_r, _mm_set_pd(ct[286],
    ct[350])));
  _mm_storeu_pd(&proc_control_B.ct_c[735], _mm_mul_pd(tmp_l, _mm_set_pd(ct[287],
    ct[283])));
  _mm_storeu_pd(&proc_control_B.ct_c[737], _mm_mul_pd(_mm_set_pd(ct[22], ct[26]),
    _mm_set_pd(ct[364], ct[284])));
  proc_control_B.ct_c[739] = ct[424];
  _mm_storeu_pd(&proc_control_B.ct_c[740], _mm_mul_pd(tmp_q, _mm_set_pd(ct[368],
    ct[365])));
  _mm_storeu_pd(&proc_control_B.ct_c[742], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_15, tmp_0), tmp_s), tmp_5), tmp_1), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[744], _mm_mul_pd(tmp_5, _mm_loadu_pd(&ct
    [369])));
  proc_control_B.ct_c[746] = ct[425];
  proc_control_B.ct_c[747] = ct[21] * ct[374];
  _mm_storeu_pd(&proc_control_B.ct_c[748], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[12], ct[8]), tmp_0), tmp_s), tmp_5),
    tmp_4), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[750], _mm_mul_pd(tmp_k, _mm_set_pd(ct[377],
    ct[375])));
  _mm_storeu_pd(&proc_control_B.ct_c[752], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_16, tmp_s), tmp_5), tmp_a), tmp_3));
  _mm_storeu_pd(&proc_control_B.ct_c[754], _mm_mul_pd(tmp_o, _mm_set_pd(ct[380],
    ct[378])));
  _mm_storeu_pd(&proc_control_B.ct_c[756], _mm_mul_pd(tmp_o, _mm_set_pd(ct[383],
    ct[381])));
  _mm_storeu_pd(&proc_control_B.ct_c[758], _mm_mul_pd(tmp_q, _mm_set_pd(ct[386],
    ct[384])));
  proc_control_B.ct_c[760] = ct[23] * ct[385];
  proc_control_B.ct_c[761] = proc_control_B.t896;
  proc_control_B.ct_c[762] = proc_control_B.t897;
  proc_control_B.ct_c[763] = proc_control_B.t898_p;
  proc_control_B.ct_c[764] = proc_control_B.t899_k;
  proc_control_B.ct_c[765] = ct[426];
  proc_control_B.ct_c[766] = proc_control_B.dv50[0];
  proc_control_B.ct_c[767] = proc_control_B.dv50[1];
  proc_control_B.ct_c[768] = ct[7] * proc_control_B.t896;
  proc_control_B.ct_c[769] = ct[8] * ct[13] * ct[21] * ct[22] * ct[24] * ct[25] *
    ct[312];
  proc_control_B.ct_c[770] = ct[9] * proc_control_B.t896;
  _mm_storeu_pd(&proc_control_B.ct_c[771], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set_pd(ct[7], ct[11]), _mm_set_pd(ct
    [11], ct[12])), tmp_0), tmp_17), tmp_1), tmp_18), tmp));
  proc_control_B.ct_c[773] = ct[8] * proc_control_B.t897;
  proc_control_B.ct_c[774] = proc_control_B.ct_tmp_k * ct[24] * ct[26] * ct[312];
  proc_control_B.ct_c[775] = ct[12] * proc_control_B.t897;
  proc_control_B.ct_c[776] = ct[427];
  proc_control_B.ct_c[777] = ct[11] * proc_control_B.t898_p;
  proc_control_B.ct_c[778] = ct[8] * ct[9] * ct[22] * ct[23] * ct[25] * ct[26] *
    ct[312];
  proc_control_B.ct_c[779] = ct[13] * proc_control_B.t898_p;
  proc_control_B.ct_c[780] = ct[7] * ct[12] * ct[22] * ct[23] * ct[25] * ct[26] *
    ct[312];
  _mm_storeu_pd(&proc_control_B.ct_c[781], _mm_mul_pd(tmp_15, _mm_set1_pd
    (proc_control_B.t899_k)));
  tmp = _mm_set_pd(proc_control_B.dv50[1], proc_control_B.dv50[0]);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.ct_c[783], _mm_mul_pd(tmp_1f, tmp));
  _mm_storeu_pd(&proc_control_B.ct_c[785], _mm_mul_pd(_mm_set_pd(ct[12], ct[9]),
    tmp));
  proc_control_B.ct_c[787] = ct[428];
  proc_control_B.ct_c[788] = ct[429];
  proc_control_B.ct_c[789] = -ct[264];
  proc_control_B.ct_c[790] = -ct[267];
  proc_control_B.ct_c[791] = -ct[269];
  proc_control_B.ct_c[792] = -ct[271];
  proc_control_B.ct_c[793] = -ct[275];
  proc_control_B.ct_c[794] = -ct[276];
  proc_control_B.ct_c[795] = ct[430];
  proc_control_B.ct_c[796] = -ct[290];
  proc_control_B.ct_c[797] = -ct[292];
  proc_control_B.ct_c[798] = -ct[302];
  proc_control_B.ct_c[799] = ct[431];
  proc_control_B.ct_c[800] = -ct[308];
  proc_control_B.ct_c[801] = ct[432];
  proc_control_B.ct_c[802] = ct[433];
  proc_control_B.ct_c[803] = ct[434];
  proc_control_ft_2_p(proc_control_B.ct_c, out1);
}

void proc_control::proc_control_AUVQuatSimFcn(const real_T in1[13], const real_T
  in3[38], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_11;
  __m128d tmp_12;
  __m128d tmp_13;
  __m128d tmp_14;
  __m128d tmp_15;
  __m128d tmp_16;
  __m128d tmp_17;
  __m128d tmp_18;
  __m128d tmp_19;
  __m128d tmp_1a;
  __m128d tmp_1b;
  __m128d tmp_1c;
  __m128d tmp_1d;
  __m128d tmp_1e;
  __m128d tmp_1f;
  __m128d tmp_1g;
  __m128d tmp_1h;
  __m128d tmp_1i;
  __m128d tmp_1j;
  __m128d tmp_1k;
  __m128d tmp_1l;
  __m128d tmp_1m;
  __m128d tmp_1n;
  __m128d tmp_1o;
  __m128d tmp_1p;
  __m128d tmp_1q;
  __m128d tmp_1r;
  __m128d tmp_1s;
  __m128d tmp_1t;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  // AUV7QuatSimFcn
  //     OUT1 = AUV7QuatSimFcn(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     17-Jul-2022 14:59:18
  tmp_n = _mm_set_pd(in3[14], in3[12]);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_set1_pd(in1[10]), tmp_n));
  proc_control_B.t20_b = proc_control_B.dv49[0];
  proc_control_B.t22_k = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_1i = _mm_loadu_pd(&in3[12]);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_set1_pd(in1[11]), tmp_1i));
  proc_control_B.t23_k = proc_control_B.dv49[0];
  proc_control_B.t24_b = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_1j = _mm_loadu_pd(&in3[13]);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_set1_pd(in1[12]), tmp_1j));
  proc_control_B.t27_i = proc_control_B.dv49[0];
  proc_control_B.t28_n = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_15 = _mm_loadu_pd(&in1[4]);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(tmp_15, _mm_set1_pd(in1[6])));
  proc_control_B.t29_h = proc_control_B.dv49[0];
  proc_control_B.t30_n = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_set1_pd(in1[3]), tmp_15));
  proc_control_B.t31_m = proc_control_B.dv49[0];
  proc_control_B.t32_g = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_set_pd(in3[12], in3[1]),
    _mm_set_pd(in3[12], in3[36])));
  proc_control_B.t36_j = proc_control_B.dv49[0];
  proc_control_B.t37_f = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.t38_ng = rt_powd_snf(in3[12], 3.0);
  proc_control_B.t39_g = in3[13] * in3[13];
  proc_control_B.t41_d = rt_powd_snf(in3[13], 3.0);
  proc_control_B.t42_c = in3[14] * in3[14];
  proc_control_B.t44_m = rt_powd_snf(in3[14], 3.0);
  proc_control_B.t49_d = in3[0] * in3[0];
  proc_control_B.t50_n = rt_powd_snf(in3[0], 3.0);
  proc_control_B.t52_b = rt_powd_snf(in3[0], 5.0);
  tmp = _mm_set1_pd(in3[31]);
  tmp_0 = _mm_set1_pd(in3[0]);
  tmp_1 = _mm_set1_pd(in3[3]);
  tmp_2 = _mm_set_pd(in3[10], in3[11]);
  tmp_18 = _mm_loadu_pd(&in3[7]);
  tmp_1e = _mm_mul_pd(tmp_1, tmp_18);
  tmp_16 = _mm_mul_pd(tmp_1e, tmp_2);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp),
    tmp_0));
  proc_control_B.t80 = proc_control_B.dv49[0];
  proc_control_B.t81 = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_8 = _mm_set_pd(in3[9], in3[11]);
  tmp_3 = _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(in3[4]), _mm_set_pd(in3[8], in3[6])),
                     tmp_8);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_3, tmp),
    tmp_0));
  proc_control_B.t82 = proc_control_B.dv49[0];
  proc_control_B.t83_p = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_5 = _mm_set1_pd(in3[5]);
  tmp_6 = _mm_set_pd(in3[9], in3[10]);
  tmp_1d = _mm_loadu_pd(&in3[6]);
  tmp_5 = _mm_mul_pd(tmp_5, tmp_1d);
  tmp_17 = _mm_mul_pd(tmp_5, tmp_6);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp),
    tmp_0));
  proc_control_B.t84_k = proc_control_B.dv49[0];
  proc_control_B.t85_c = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_4 = _mm_set1_pd(in3[32]);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp_4),
    tmp_0));
  proc_control_B.t86_n = proc_control_B.dv49[0];
  proc_control_B.t87_n = proc_control_B.dv49[1];
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_3, tmp_4),
    tmp_0));
  proc_control_B.t88_c = proc_control_B.dv49[0];
  proc_control_B.t89_d = proc_control_B.dv49[1];
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_17, tmp_4),
    tmp_0));
  proc_control_B.t90_n = proc_control_B.dv49[0];
  proc_control_B.t91_g = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_7 = _mm_set1_pd(in3[33]);
  tmp_9 = _mm_set1_pd(in3[30]);
  tmp_1h = _mm_mul_pd(tmp_18, tmp_2);
  tmp_19 = _mm_mul_pd(tmp_1h, tmp_7);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_9),
    tmp_0));
  proc_control_B.t92_l = proc_control_B.dv49[0];
  proc_control_B.t93_g = proc_control_B.dv49[1];
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_19, tmp),
    tmp_0));
  proc_control_B.t94_p = proc_control_B.dv49[0];
  proc_control_B.t95_k = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_e = _mm_set1_pd(in3[34]);
  tmp_x = _mm_set_pd(in3[5], in3[3]);
  tmp_i = _mm_mul_pd(tmp_x, tmp_8);
  tmp_a = _mm_mul_pd(tmp_i, tmp_e);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_a, tmp_9),
    tmp_0));
  proc_control_B.t96_l = proc_control_B.dv49[0];
  proc_control_B.t97_b = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_b = _mm_set_pd(in3[6], in3[7]);
  tmp_c = _mm_set1_pd(in3[35]);
  tmp_1g = _mm_loadu_pd(&in3[3]);
  tmp_b = _mm_mul_pd(tmp_1g, tmp_b);
  tmp_1a = _mm_mul_pd(tmp_b, tmp_c);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_1a, tmp_9),
    tmp_0));
  proc_control_B.t100_c = proc_control_B.dv49[0];
  proc_control_B.t101 = proc_control_B.dv49[1];
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_a, tmp),
    tmp_0));
  proc_control_B.t102 = proc_control_B.dv49[0];
  proc_control_B.t103_f = proc_control_B.dv49[1];
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_1a, tmp),
    tmp_0));
  proc_control_B.t104_o = proc_control_B.dv49[0];
  proc_control_B.t105_d = proc_control_B.dv49[1];

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_f = _mm_set_pd(in3[7], in3[11]);
  tmp_d = _mm_mul_pd(tmp_f, tmp_7);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_1c = _mm_loadu_pd(&in3[34]);
  tmp_d = _mm_mul_pd(tmp_d, tmp_1c);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_d, tmp_9),
    tmp_0));
  proc_control_B.t108_l = proc_control_B.dv49[0];
  proc_control_B.t111_l = proc_control_B.dv49[1];
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_d, tmp),
    tmp_0));
  proc_control_B.t112 = proc_control_B.dv49[0];
  proc_control_B.t113 = proc_control_B.dv49[1];
  tmp_d = _mm_mul_pd(tmp_1, tmp_e);
  tmp_m = _mm_mul_pd(tmp_d, tmp_c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  tmp_1b = _mm_loadu_pd(&in3[30]);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_m, tmp_1b),
    tmp_0));
  proc_control_B.t115_d = proc_control_B.dv49[0];
  proc_control_B.t117 = proc_control_B.dv49[1];
  tmp_p = _mm_mul_pd(tmp_7, tmp_e);
  tmp_o = _mm_mul_pd(tmp_p, tmp_c);
  _mm_storeu_pd(&proc_control_B.dv49[0], _mm_mul_pd(_mm_mul_pd(tmp_o, tmp_1b),
    tmp_0));

  // Start for MATLABSystem: '<S71>/MATLAB System'
  proc_control_B.in3[0] = in3[18];
  proc_control_B.in3[1] = in3[19];
  proc_control_B.in3[2] = in3[20];
  proc_control_B.in3[3] = in3[21];
  proc_control_B.in3[4] = in3[22];
  proc_control_B.in3[5] = in3[23];
  memcpy(&proc_control_B.in3[6], &in3[3], sizeof(real_T) << 3U);
  proc_control_B.in3[14] = in3[11];
  proc_control_B.in3[15] = in3[33];
  proc_control_B.in3[16] = in3[34];
  proc_control_B.in3[17] = in3[35];
  proc_control_B.in3[18] = in3[15];
  proc_control_B.in3[19] = in3[16];
  proc_control_B.in3[20] = in3[17];
  proc_control_B.in3[21] = in3[12];
  proc_control_B.in3[22] = in3[13];
  proc_control_B.in3[23] = in3[14];
  proc_control_B.in3[24] = in3[30];
  proc_control_B.in3[25] = in3[31];
  proc_control_B.in3[26] = in3[32];
  proc_control_B.in3[27] = in1[4];
  proc_control_B.in3[28] = in1[5];
  proc_control_B.in3[29] = in1[6];
  proc_control_B.in3[30] = in1[3];
  proc_control_B.in3[31] = in3[37];
  proc_control_B.in3[32] = in3[0];
  proc_control_B.in3[33] = in1[10];
  proc_control_B.in3[34] = in1[11];
  proc_control_B.in3[35] = in1[12];
  proc_control_B.in3[36] = in3[9] * in1[10];
  proc_control_B.in3[37] = proc_control_B.t100_c;
  proc_control_B.in3[38] = proc_control_B.t102;
  proc_control_B.in3[39] = proc_control_B.t104_o;
  _mm_storeu_pd(&proc_control_B.in3[40], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_f), tmp_1c), tmp_4), tmp_0));
  proc_control_B.in3[42] = in3[4] * in1[11];
  proc_control_B.in3[43] = proc_control_B.dv49[0];
  proc_control_B.in3[44] = in3[7] * in1[11];
  proc_control_B.in3[45] = proc_control_B.dv49[1];
  tmp_z = _mm_set_pd(in3[30], in3[32]);
  tmp_13 = _mm_set_pd(in3[3], in3[33]);
  _mm_storeu_pd(&proc_control_B.in3[46], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_13, _mm_set_pd(in3[8], in3[34])), _mm_set_pd(in3[10], in3[35])),
    tmp_z), tmp_0));
  proc_control_B.in3[48] = in3[10] * in1[11];
  tmp_1f = _mm_loadu_pd(&in3[4]);
  _mm_storeu_pd(&proc_control_B.in3[49], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1f, tmp_1d), tmp_8), tmp_9), tmp_0));
  tmp_8 = _mm_set1_pd(proc_control_B.t49_d);
  _mm_storeu_pd(&proc_control_B.in3[51], _mm_mul_pd(tmp_16, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[53], _mm_mul_pd(tmp_3, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[55], _mm_mul_pd(tmp_17, tmp_8));
  proc_control_B.in3[57] = in3[5] * in1[12];
  tmp_g = _mm_set1_pd(proc_control_B.t50_n);
  _mm_storeu_pd(&proc_control_B.in3[58], _mm_mul_pd(tmp_16, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[60], _mm_mul_pd(tmp_3, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[62], _mm_mul_pd(tmp_17, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[64], _mm_mul_pd(tmp_19, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[66], _mm_mul_pd(tmp_19, tmp_g));
  proc_control_B.in3[68] = in3[8] * in1[12];
  _mm_storeu_pd(&proc_control_B.in3[69], _mm_mul_pd(tmp_a, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[71], _mm_mul_pd(tmp_a, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[73], _mm_mul_pd(tmp_1a, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[75], _mm_mul_pd(tmp_1a, tmp_g));
  tmp_3 = _mm_set_pd(proc_control_B.t50_n, proc_control_B.t49_d);
  tmp_a = _mm_set1_pd(in3[11]);
  tmp_16 = _mm_mul_pd(tmp_a, tmp_7);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[77], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp_e),
    tmp_3));
  proc_control_B.in3[79] = in3[11] * in1[12];
  tmp_17 = _mm_set1_pd(in3[7]);
  tmp_19 = _mm_mul_pd(tmp_17, tmp_7);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[80], _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_c),
    tmp_3));
  tmp_1a = _mm_set1_pd(in3[12]);
  tmp_1l = _mm_mul_pd(tmp_b, tmp_1a);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[82], _mm_mul_pd(tmp_1l, tmp_g));
  tmp_h = _mm_set_pd(in3[12], in3[13]);
  _mm_storeu_pd(&proc_control_B.in3[84], _mm_mul_pd(_mm_mul_pd(tmp_1e, tmp_h),
    tmp_g));
  tmp_1e = _mm_set1_pd(in3[6]);
  _mm_storeu_pd(&proc_control_B.in3[86], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_1f,
    tmp_1e), tmp_h), tmp_g));
  tmp_k = _mm_set1_pd(in3[13]);
  tmp_y = _mm_set_pd(in3[7], in3[8]);
  tmp_1s = _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp_y), tmp_k);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[88], _mm_mul_pd(tmp_1s, tmp_g));
  tmp_1n = _mm_mul_pd(tmp_1g, tmp_6);
  tmp_1q = _mm_mul_pd(tmp_1n, tmp_1a);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[90], _mm_mul_pd(tmp_1q, tmp_g));
  tmp_t = _mm_mul_pd(tmp_i, tmp_1a);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[92], _mm_mul_pd(tmp_t, tmp_g));
  tmp_j = _mm_set1_pd(in3[14]);
  tmp_i = _mm_mul_pd(tmp_i, tmp_j);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[94], _mm_mul_pd(tmp_i, tmp_g));
  tmp_2 = _mm_mul_pd(tmp_1f, tmp_2);
  tmp_1f = _mm_mul_pd(tmp_2, tmp_j);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[96], _mm_mul_pd(tmp_1f, tmp_g));
  tmp_6 = _mm_mul_pd(_mm_mul_pd(tmp_1d, tmp_6), tmp_k);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[98], _mm_mul_pd(tmp_6, tmp_g));
  tmp_l = _mm_set_pd(in3[13], in3[14]);
  _mm_storeu_pd(&proc_control_B.in3[100], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, tmp_a), tmp_l), tmp_g));
  tmp_1d = _mm_set1_pd(in3[8]);
  _mm_storeu_pd(&proc_control_B.in3[102], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1d, _mm_loadu_pd(&in3[9])), tmp_l), tmp_g));
  tmp_1m = _mm_mul_pd(tmp_1h, tmp_j);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[104], _mm_mul_pd(tmp_1m, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[106], _mm_mul_pd(tmp_m, tmp_3));
  tmp_19 = _mm_mul_pd(tmp_19, tmp_1i);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[108], _mm_mul_pd(tmp_19, tmp_g));
  tmp_m = _mm_mul_pd(_mm_set_pd(in3[10], in3[8]), tmp_7);
  tmp_10 = _mm_mul_pd(tmp_m, tmp_1a);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[110], _mm_mul_pd(tmp_10, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[112], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp_n),
    tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[114], _mm_mul_pd(tmp_o, tmp_3));
  _mm_storeu_pd(&proc_control_B.in3[116], _mm_mul_pd(_mm_mul_pd(tmp_d, tmp_1i),
    tmp_g));
  tmp_d = _mm_mul_pd(_mm_set_pd(in3[9], in3[5]), tmp_e);
  _mm_storeu_pd(&proc_control_B.in3[118], _mm_mul_pd(_mm_mul_pd(tmp_d, tmp_k),
    tmp_g));
  tmp_16 = _mm_mul_pd(tmp_a, tmp_e);
  tmp_a = _mm_mul_pd(tmp_16, tmp_1j);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[120], _mm_mul_pd(tmp_a, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[122], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_1,
    tmp_c), tmp_n), tmp_g));
  tmp_o = _mm_mul_pd(_mm_set_pd(in3[6], in3[4]), tmp_c);
  tmp_16 = _mm_mul_pd(tmp_o, tmp_j);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[124], _mm_mul_pd(tmp_16, tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[126], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_17, tmp_c), tmp_1j), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[128], _mm_mul_pd(_mm_mul_pd(tmp_p, tmp_1i),
    tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[130], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_7,
    tmp_c), tmp_n), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[132], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_e,
    tmp_c), tmp_1j), tmp_g));
  proc_control_B.in3[134] = proc_control_B.t22_k;
  tmp_p = _mm_set_pd(in3[6], in3[8]);
  tmp_1o = _mm_loadu_pd(&in3[10]);
  _mm_storeu_pd(&proc_control_B.in3[135], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1g, tmp_p), tmp_1o), tmp_9), tmp), tmp_4));
  tmp_17 = _mm_set_pd(in3[33], in3[9]);
  tmp_u = _mm_set_pd(in3[11], in3[7]);
  tmp_11 = _mm_set_pd(in3[7], in3[5]);
  _mm_storeu_pd(&proc_control_B.in3[137], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_11, tmp_u), tmp_17), tmp_9), tmp), tmp_4));
  proc_control_B.in3[139] = in3[3] * in3[11] * in3[34] * in3[30] * in3[31] *
    in3[32];
  proc_control_B.in3[140] = proc_control_B.t23_k;
  tmp_v = _mm_set_pd(in3[33], in3[3]);
  tmp_14 = _mm_set_pd(in3[34], in3[7]);
  _mm_storeu_pd(&proc_control_B.in3[141], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_v, tmp_14), tmp_c), tmp_9), tmp), tmp_4));
  tmp_q = _mm_set_pd(proc_control_B.t81, proc_control_B.t80);
  _mm_storeu_pd(&proc_control_B.in3[143], _mm_mul_pd(tmp_9, tmp_q));
  tmp_r = _mm_set_pd(proc_control_B.t83_p, proc_control_B.t82);
  _mm_storeu_pd(&proc_control_B.in3[145], _mm_mul_pd(tmp_9, tmp_r));
  tmp_s = _mm_set_pd(proc_control_B.t85_c, proc_control_B.t84_k);
  _mm_storeu_pd(&proc_control_B.in3[147], _mm_mul_pd(tmp_9, tmp_s));
  _mm_storeu_pd(&proc_control_B.in3[149], _mm_mul_pd(tmp_9, _mm_set_pd
    (proc_control_B.t87_n, proc_control_B.t86_n)));
  _mm_storeu_pd(&proc_control_B.in3[151], _mm_mul_pd(tmp_9, _mm_set_pd
    (proc_control_B.t89_d, proc_control_B.t88_c)));
  _mm_storeu_pd(&proc_control_B.in3[153], _mm_mul_pd(tmp_9, _mm_set_pd
    (proc_control_B.t91_g, proc_control_B.t90_n)));
  _mm_storeu_pd(&proc_control_B.in3[155], _mm_mul_pd(tmp_4, tmp_q));
  _mm_storeu_pd(&proc_control_B.in3[157], _mm_mul_pd(tmp_4, tmp_r));
  _mm_storeu_pd(&proc_control_B.in3[159], _mm_mul_pd(tmp_4, tmp_s));
  tmp_q = _mm_set_pd(proc_control_B.t93_g, proc_control_B.t92_l);
  _mm_storeu_pd(&proc_control_B.in3[161], _mm_mul_pd(tmp, tmp_q));
  _mm_storeu_pd(&proc_control_B.in3[163], _mm_mul_pd(tmp_4, tmp_q));
  tmp_q = _mm_set_pd(proc_control_B.t97_b, proc_control_B.t96_l);
  _mm_storeu_pd(&proc_control_B.in3[165], _mm_mul_pd(tmp, tmp_q));
  _mm_storeu_pd(&proc_control_B.in3[167], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t95_k, proc_control_B.t94_p)));
  tmp_r = _mm_set_pd(proc_control_B.t101, proc_control_B.t100_c);
  _mm_storeu_pd(&proc_control_B.in3[169], _mm_mul_pd(tmp, tmp_r));
  _mm_storeu_pd(&proc_control_B.in3[171], _mm_mul_pd(tmp_4, tmp_q));
  _mm_storeu_pd(&proc_control_B.in3[173], _mm_mul_pd(tmp_4, tmp_r));
  proc_control_B.in3[175] = in3[32] * proc_control_B.t102;
  proc_control_B.in3[176] = proc_control_B.t27_i;
  tmp_q = _mm_set_pd(in3[31], in3[32]);
  _mm_storeu_pd(&proc_control_B.in3[177], _mm_mul_pd(tmp_q, _mm_set_pd
    (proc_control_B.t108_l, proc_control_B.t103_f)));
  _mm_storeu_pd(&proc_control_B.in3[179], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t105_d, proc_control_B.t104_o)));
  tmp_1k = _mm_loadu_pd(&in3[31]);
  _mm_storeu_pd(&proc_control_B.in3[181], _mm_mul_pd(tmp_1k, _mm_set_pd
    (proc_control_B.t108_l, proc_control_B.t111_l)));
  _mm_storeu_pd(&proc_control_B.in3[183], _mm_mul_pd(tmp_4, _mm_set_pd
    (proc_control_B.t112, proc_control_B.t111_l)));
  tmp_r = _mm_mul_pd(tmp_t, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[185], _mm_mul_pd(_mm_mul_pd(tmp_r, tmp),
    tmp_0));
  tmp_1h = _mm_mul_pd(tmp_1h, tmp_k);
  tmp_1r = _mm_mul_pd(tmp_1h, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[187], _mm_mul_pd(_mm_mul_pd(tmp_1r, tmp),
    tmp_0));
  _mm_storeu_pd(&proc_control_B.in3[189], _mm_mul_pd(tmp_1k, _mm_set_pd
    (proc_control_B.t113, proc_control_B.t115_d)));
  tmp_1p = _mm_mul_pd(tmp_1l, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[191], _mm_mul_pd(_mm_mul_pd(tmp_1p, tmp_4),
    tmp_0));
  tmp_1m = _mm_mul_pd(tmp_1m, tmp_9);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[193], _mm_mul_pd(_mm_mul_pd(tmp_1m, tmp_4),
    tmp_0));
  proc_control_B.in3[195] = in3[32] * proc_control_B.t115_d;
  proc_control_B.t100_c = in3[3] * in3[7];
  proc_control_B.in3[196] = proc_control_B.t100_c * in3[13] * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[197] = proc_control_B.t29_h;
  _mm_storeu_pd(&proc_control_B.in3[198], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(in3[3], in3[4]), _mm_set_pd(in3[11], in3[6])),
                tmp_1j), tmp), tmp_4), tmp_0));
  tmp_s = _mm_set_pd(in3[30], in3[31]);
  tmp_w = _mm_set_pd(in3[12], in3[14]);
  _mm_storeu_pd(&proc_control_B.in3[200], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(in3[11], in3[5]), tmp_17), tmp_w), tmp_s),
    tmp_q), tmp_0));
  _mm_storeu_pd(&proc_control_B.in3[202], _mm_mul_pd(tmp_q, _mm_set_pd
    (proc_control_B.dv49[0], proc_control_B.t117)));
  proc_control_B.t102 = in3[7] * in3[33];
  proc_control_B.in3[204] = proc_control_B.t102 * in3[12] * in3[30] * in3[32] *
    in3[0];
  proc_control_B.in3[205] = proc_control_B.dv49[0] * in3[32];
  tmp_17 = _mm_set_pd(in3[33], in3[34]);
  _mm_storeu_pd(&proc_control_B.in3[206], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_f, tmp_17), tmp_k), tmp_1b), tmp_1k), tmp_0));
  proc_control_B.t104_o = in3[11] * in3[33];
  proc_control_B.in3_tmp_k = proc_control_B.t104_o * in3[14];
  proc_control_B.in3[208] = proc_control_B.in3_tmp_k * in3[31] * in3[32] * in3[0];
  proc_control_B.in3[209] = proc_control_B.dv49[1] * in3[32];
  tmp_1t = _mm_mul_pd(tmp_1, tmp_1c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[210], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1t, tmp_1a), tmp_9), tmp_q), tmp_0));
  tmp_f = _mm_set_pd(in3[34], in3[35]);
  tmp_12 = _mm_mul_pd(tmp_u, tmp_f);
  tmp_12 = _mm_mul_pd(tmp_12, tmp_1j);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[212], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_12, tmp_9), tmp_1k), tmp_0));
  _mm_storeu_pd(&proc_control_B.in3[214], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd(in3[7], in3[3]), tmp_1c), tmp_1j), tmp_s),
    tmp_4), tmp_0));
  _mm_storeu_pd(&proc_control_B.in3[216], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_v, tmp_f), tmp_w), tmp_s), tmp_4), tmp_0));
  tmp_v = _mm_mul_pd(tmp_7, tmp_f);
  tmp_v = _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_1i), tmp_1b);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[218], _mm_mul_pd(_mm_mul_pd(tmp_v, tmp_1k),
    tmp_0));
  tmp_c = _mm_mul_pd(tmp_17, tmp_c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[220], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_c, tmp_1j), tmp_1b), tmp_1k), tmp_0));
  proc_control_B.in3_tmp_f = in3[34] * in3[35];
  proc_control_B.in3[222] = proc_control_B.in3_tmp_f * in3[14] * in3[30] * in3
    [32] * in3[0];
  proc_control_B.in3[223] = proc_control_B.t20_b + proc_control_B.t24_b;
  proc_control_B.in3[224] = proc_control_B.t20_b + proc_control_B.t28_n;
  proc_control_B.in3[225] = proc_control_B.t24_b + proc_control_B.t28_n;
  proc_control_B.in3[226] = proc_control_B.t30_n + proc_control_B.t31_m;
  proc_control_B.in3[227] = -proc_control_B.t80;
  proc_control_B.in3[228] = -proc_control_B.t83_p;
  proc_control_B.in3[229] = -proc_control_B.t84_k;
  proc_control_B.in3[230] = -proc_control_B.t86_n;
  proc_control_B.in3[231] = -proc_control_B.t89_d;
  proc_control_B.in3[232] = in1[7] * in3[30];
  proc_control_B.in3[233] = -proc_control_B.t90_n;
  proc_control_B.in3[234] = -proc_control_B.t93_g;
  proc_control_B.in3[235] = -proc_control_B.t95_k;
  proc_control_B.in3[236] = -proc_control_B.t97_b;
  proc_control_B.t20_b = in3[8] * in3[10] * in3[33];
  proc_control_B.in3[237] = -(proc_control_B.t20_b * in3[32] * in3[0]);
  proc_control_B.in3[238] = -proc_control_B.t101;
  proc_control_B.in3[239] = -proc_control_B.t103_f;
  proc_control_B.in3[240] = -proc_control_B.t105_d;
  proc_control_B.t101 = in3[5] * in3[9] * in3[34];
  proc_control_B.in3[241] = -(proc_control_B.t101 * in3[32] * in3[0]);
  proc_control_B.in3[242] = -proc_control_B.t108_l;
  proc_control_B.in3[243] = in1[8] * in3[31];
  proc_control_B.t108_l = in3[4] * in3[6] * in3[35];
  proc_control_B.in3[244] = -(proc_control_B.t108_l * in3[32] * in3[0]);
  proc_control_B.in3[245] = -proc_control_B.t111_l;
  proc_control_B.in3[246] = -proc_control_B.t112;
  proc_control_B.in3[247] = -proc_control_B.t113;
  proc_control_B.t111_l = proc_control_B.t104_o * in3[34];
  proc_control_B.in3[248] = -(proc_control_B.t111_l * in3[32] * in3[0]);
  proc_control_B.in3[249] = -proc_control_B.t115_d;
  proc_control_B.t102 *= in3[35];
  proc_control_B.in3[250] = -(proc_control_B.t102 * in3[32] * in3[0]);
  proc_control_B.in3[251] = -proc_control_B.t117;
  proc_control_B.t115_d = in3[3] * in3[34] * in3[35];
  proc_control_B.in3[252] = -(proc_control_B.t115_d * in3[32] * in3[0]);
  proc_control_B.in3[253] = in1[9] * in3[32];
  proc_control_B.in3[254] = proc_control_B.t36_j;
  tmp_0 = _mm_set1_pd(proc_control_B.t52_b);
  _mm_storeu_pd(&proc_control_B.in3[255], _mm_mul_pd(_mm_mul_pd(tmp_1i,
    _mm_set_pd(proc_control_B.t38_ng, proc_control_B.t41_d)), tmp_0));
  proc_control_B.in3[257] = in3[12] * proc_control_B.t44_m *
    proc_control_B.t52_b;
  proc_control_B.in3[258] = proc_control_B.t37_f;
  _mm_storeu_pd(&proc_control_B.in3[259], _mm_mul_pd(_mm_mul_pd(tmp_l,
    _mm_set_pd(proc_control_B.t44_m, proc_control_B.t38_ng)), tmp_0));
  proc_control_B.in3[261] = in3[14] * proc_control_B.t41_d *
    proc_control_B.t52_b;
  proc_control_B.in3[262] = proc_control_B.t38_ng;
  proc_control_B.in3[263] = proc_control_B.t39_g;
  _mm_storeu_pd(&proc_control_B.in3[264], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1g, tmp_1d), tmp_h), tmp_j), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[266], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_5,
    tmp_h), tmp_j), tmp_g));
  proc_control_B.in3[268] = proc_control_B.t37_f * proc_control_B.t37_f;
  _mm_storeu_pd(&proc_control_B.in3[269], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1n, tmp_k), tmp_j), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[271], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_2,
    tmp_1a), tmp_k), tmp_g));
  proc_control_B.in3[273] = proc_control_B.t41_d;
  _mm_storeu_pd(&proc_control_B.in3[274], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1e, tmp_1o), tmp_1a), tmp_l), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[276], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_18, _mm_set1_pd(in3[9])), tmp_1a), tmp_l), tmp_g));
  proc_control_B.in3[278] = proc_control_B.t42_c;
  proc_control_B.in3[279] = proc_control_B.t39_g * proc_control_B.t39_g;
  _mm_storeu_pd(&proc_control_B.in3[280], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_m,
    tmp_k), tmp_j), tmp_g));
  proc_control_B.in3[282] = proc_control_B.t44_m;
  _mm_storeu_pd(&proc_control_B.in3[283], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_d,
    tmp_1a), tmp_j), tmp_g));
  proc_control_B.in3[285] = proc_control_B.t42_c * proc_control_B.t42_c;
  _mm_storeu_pd(&proc_control_B.in3[286], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_o,
    tmp_1a), tmp_k), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[288], _mm_mul_pd(tmp_1p, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[290], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_x, tmp_p), tmp_1a), tmp_9), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[292], _mm_mul_pd(_mm_mul_pd(tmp_1q, tmp_9),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[294], _mm_mul_pd(tmp_r, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[296], _mm_mul_pd(tmp_1r, tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[298], _mm_mul_pd(tmp_1m, tmp_8));
  tmp_0 = _mm_mul_pd(tmp_b, tmp_k);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[300], _mm_mul_pd(_mm_mul_pd(tmp_0, tmp),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[302], _mm_mul_pd(_mm_mul_pd(tmp_1s, tmp),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[304], _mm_mul_pd(_mm_mul_pd(tmp_t, tmp),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[306], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[308], _mm_mul_pd(_mm_mul_pd(tmp_6, tmp),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[310], _mm_mul_pd(_mm_mul_pd(tmp_1h, tmp),
    tmp_8));
  proc_control_B.in3[312] = proc_control_B.t49_d;
  _mm_storeu_pd(&proc_control_B.in3[313], _mm_mul_pd(_mm_mul_pd(tmp_1l, tmp_4),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[315], _mm_mul_pd(_mm_mul_pd(tmp_0, tmp_4),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[317], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_4),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[319], _mm_mul_pd(_mm_mul_pd(tmp_1f, tmp_4),
    tmp_8));
  proc_control_B.in3[321] = in3[6] * in3[11] * in3[14] * in3[32] *
    proc_control_B.t49_d;
  proc_control_B.in3[322] = proc_control_B.t50_n;
  _mm_storeu_pd(&proc_control_B.in3[323], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_y, _mm_set_pd(in3[11], in3[9])), tmp_j), tmp_4), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[325], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_y, _mm_set_pd(in3[33], in3[10])), tmp_w), tmp_z), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[327], _mm_mul_pd(_mm_mul_pd(tmp_10, tmp_9),
    tmp_8));
  proc_control_B.in3[329] = proc_control_B.t104_o * in3[12] * in3[30] *
    proc_control_B.t49_d;
  proc_control_B.in3[330] = proc_control_B.t49_d * proc_control_B.t49_d;
  _mm_storeu_pd(&proc_control_B.in3[331], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_7), tmp_h), tmp), tmp_8));
  proc_control_B.in3[333] = proc_control_B.t52_b;
  tmp_0 = _mm_set_pd(in3[3], in3[11]);
  tmp_2 = _mm_loadu_pd(&in3[33]);
  _mm_storeu_pd(&proc_control_B.in3[334], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_0, tmp_2), tmp_w), tmp_s), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[336], _mm_mul_pd(_mm_mul_pd(tmp_a, tmp_9),
    tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[338], _mm_mul_pd(_mm_mul_pd(tmp_19, tmp_4),
    tmp_8));
  proc_control_B.in3[340] = proc_control_B.in3_tmp_k * in3[32] *
    proc_control_B.t49_d;
  proc_control_B.in3[341] = in1[4] * in1[5] * 2.0;
  _mm_storeu_pd(&proc_control_B.in3[342], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1, tmp_f), tmp_1i), tmp_1b), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[344], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_11, tmp_1c), tmp_k), tmp_s), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[346], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[9], in3[7]), tmp_f), tmp_l), tmp_1b), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[348], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_0, tmp_e), tmp_h), tmp_1k), tmp_8));
  proc_control_B.in3[350] = in3[3] * in3[35] * in3[12] * in3[31] *
    proc_control_B.t49_d;
  proc_control_B.in3[351] = proc_control_B.t29_h * 2.0;
  _mm_storeu_pd(&proc_control_B.in3[352], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp_1t, tmp_1j), tmp_q), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[354], _mm_mul_pd(_mm_mul_pd(tmp_12, tmp_1k),
    tmp_8));
  tmp_0 = _mm_set_pd(in3[32], in3[30]);
  _mm_storeu_pd(&proc_control_B.in3[356], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_13, tmp_1c), tmp_n), tmp_0), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[358], _mm_mul_pd(_mm_mul_pd(tmp_16, tmp_4),
    tmp_8));
  proc_control_B.in3[360] = in3[7] * in3[35] * in3[14] * in3[32] *
    proc_control_B.t49_d;
  proc_control_B.in3[361] = proc_control_B.t30_n * 2.0;
  _mm_storeu_pd(&proc_control_B.in3[362], _mm_mul_pd(tmp_v, tmp_8));
  tmp_n = _mm_mul_pd(tmp_7, tmp_1c);

  // Start for MATLABSystem: '<S71>/MATLAB System'
  _mm_storeu_pd(&proc_control_B.in3[364], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_n,
    tmp_1a), tmp_q), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[366], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_n,
    tmp_1j), tmp_q), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[368], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_u, tmp_1a), tmp_l), tmp_9), tmp_g));
  proc_control_B.in3[370] = proc_control_B.in3_tmp_f * in3[13] * in3[30] *
    proc_control_B.t49_d;
  proc_control_B.in3[371] = proc_control_B.t31_m * 2.0;
  _mm_storeu_pd(&proc_control_B.in3[372], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_c,
    tmp_j), tmp_0), tmp_8));
  _mm_storeu_pd(&proc_control_B.in3[374], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[11], in3[3]), tmp_h), tmp_l), tmp), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[376], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(_mm_set_pd(in3[3], in3[34]), _mm_set_pd(in3[13], in3[35])),
     tmp_1j), tmp_1k), tmp_3));
  _mm_storeu_pd(&proc_control_B.in3[378], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_14, _mm_set_pd(in3[35], in3[12])), tmp_j), tmp_4),
    _mm_set_pd(proc_control_B.t49_d, proc_control_B.t50_n)));
  _mm_storeu_pd(&proc_control_B.in3[380], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_h, tmp_2), tmp_j), tmp_s), tmp_g));
  proc_control_B.in3[382] = proc_control_B.t32_g * 2.0;
  _mm_storeu_pd(&proc_control_B.in3[383], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_h, _mm_set_pd(in3[35], in3[33])), tmp_l), tmp_z), tmp_g));
  _mm_storeu_pd(&proc_control_B.in3[385], _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_1a, tmp_f), tmp_1j), tmp_1k), tmp_g));
  proc_control_B.in3[387] = in1[3] * in1[6] * 2.0;
  proc_control_B.t100_c = proc_control_B.t100_c * in3[11] * in3[30];
  proc_control_B.in3[388] = -(proc_control_B.t100_c * in3[0]);
  proc_control_B.t104_o = in3[4] * in3[8] * in3[9] * in3[30];
  proc_control_B.in3[389] = -(proc_control_B.t104_o * in3[0]);
  proc_control_B.in3_tmp_k = in3[5] * in3[6] * in3[10] * in3[30];
  proc_control_B.in3[390] = -(proc_control_B.in3_tmp_k * in3[0]);
  _mm_storeu_pd(&proc_control_B.in3[391], _mm_mul_pd(_mm_loadu_pd(&in3[27]),
    _mm_set_pd(fabs(in1[11]), fabs(in1[10]))));
  proc_control_B.in3[393] = in3[29] * fabs(in1[12]);
  proc_control_B.in3[394] = -(proc_control_B.t100_c * in3[31] * in3[32]);
  proc_control_B.in3[395] = -(proc_control_B.t104_o * in3[31] * in3[32]);
  proc_control_B.in3[396] = in3[24] * fabs(in1[7]);
  proc_control_B.in3[397] = -(proc_control_B.in3_tmp_k * in3[31] * in3[32]);
  proc_control_B.in3[398] = -(proc_control_B.t20_b * in3[30] * in3[31] * in3[32]);
  proc_control_B.in3[399] = -(proc_control_B.t101 * in3[30] * in3[31] * in3[32]);
  proc_control_B.in3[400] = -(proc_control_B.t108_l * in3[30] * in3[31] * in3[32]);
  proc_control_B.in3[401] = -(proc_control_B.t111_l * in3[30] * in3[31] * in3[32]);
  proc_control_B.in3[402] = -(proc_control_B.t102 * in3[30] * in3[31] * in3[32]);
  proc_control_B.in3[403] = -(proc_control_B.t115_d * in3[30] * in3[31] * in3[32]);
  _mm_storeu_pd(&proc_control_B.in3[404], _mm_mul_pd(_mm_loadu_pd(&in3[25]),
    _mm_set_pd(fabs(in1[9]), fabs(in1[8]))));
  proc_control_B.in3[406] = -(in1[10] * in3[33]);
  proc_control_B.in3[407] = -(in1[11] * in3[34]);
  proc_control_B.in3[408] = -(in1[12] * in3[35]);
  proc_control_B.in3[409] = -proc_control_B.t22_k;
  proc_control_B.in3[410] = -proc_control_B.t23_k;
  proc_control_B.in3[411] = -proc_control_B.t27_i;
  _mm_storeu_pd(&proc_control_B.in3[412], _mm_mul_pd(_mm_mul_pd(tmp_15, tmp_15),
    _mm_set1_pd(2.0)));
  proc_control_B.in3[414] = in1[6] * in1[6] * 2.0;
  proc_control_B.in3[415] = -proc_control_B.t32_g;
  proc_control_B.in3[416] = -proc_control_B.t36_j;
  _mm_storeu_pd(&proc_control_B.in3[417], _mm_add_pd(_mm_mul_pd(_mm_set_pd(in1
    [10], in1[11]), tmp_l), _mm_set_pd(in1[9], in1[7])));
  proc_control_B.in3[419] = in3[12] * in1[12] + in1[8];
  proc_control_B.in3[420] = in3[3] * in1[10];
  proc_control_B.in3[421] = proc_control_B.t81;
  proc_control_B.in3[422] = proc_control_B.t82;
  proc_control_B.in3[423] = proc_control_B.t85_c;
  proc_control_B.in3[424] = proc_control_B.t87_n;
  proc_control_B.in3[425] = proc_control_B.t88_c;
  proc_control_B.in3[426] = in3[6] * in1[10];
  proc_control_B.in3[427] = proc_control_B.t91_g;
  proc_control_B.in3[428] = proc_control_B.t92_l;
  proc_control_B.in3[429] = proc_control_B.t94_p;
  proc_control_B.in3[430] = proc_control_B.t96_l;
  proc_control_B.in3[431] = in3[7] * in3[11] * in3[33] * in3[32] * in3[0];
  proc_control_B.in3[432] = in1[7];
  proc_control_B.in3[433] = in1[8];
  proc_control_B.in3[434] = in1[9];
  proc_control_ft_1_p(proc_control_B.in3, out1);
}

real_T proc_control::proc_control_norm_pr(const real_T x[4])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  absxk = fabs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  absxk = fabs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  absxk = fabs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  // Start for MATLABSystem: '<S71>/MATLAB System'
  absxk = fabs(x[3]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * sqrt(y);
}

void proc_control::proc_control_TrimPlant_stepImpl(TrimPlant_proc_control_T
  *b_this, const real_T u[8], real_T y[13], real_T ref[130], real_T constMec_rho,
  real_T constMec_g, real_T constMec_mass, real_T constMec_volume, real_T
  constMec_sub_height, const real_T constMec_rg[3], const real_T constMec_rb[3],
  const real_T constMec_cdl[6], const real_T constMec_cdq[6], const real_T
  constMec_added_mass[6], const real_T constMec_I[9], const real_T
  constMec_thrusters[48], real_T A[169], real_T B[104], real_T C[169], real_T D
  [104], real_T U[8], real_T Y[13], real_T X[13], real_T DX[13], real_T Z[13])
{
  __m128d tmp;
  __m128d tmp_0;

  // Start for MATLABSystem: '<S71>/MATLAB System'
  //  Step fonction
  // ------------------------------------------------------------------------------ 
  //  check if block need to be init
  //  fonction qui initialise les constante mec
  // ------------------------------------------------------------------------------ 
  if (!b_this->init) {
    b_this->constValues[0] = constMec_mass;
    b_this->constValues[1] = constMec_volume;
    b_this->constValues[2] = constMec_sub_height;
    memcpy(&b_this->constValues[3], &constMec_I[0], 9U * sizeof(real_T));
    b_this->constValues[12] = constMec_rg[0];
    b_this->constValues[15] = constMec_rb[0];
    b_this->constValues[13] = constMec_rg[1];
    b_this->constValues[16] = constMec_rb[1];
    b_this->constValues[14] = constMec_rg[2];
    b_this->constValues[17] = constMec_rb[2];
    for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 6;
         proc_control_B.b_i_g++) {
      b_this->constValues[proc_control_B.b_i_g + 18] =
        constMec_cdl[proc_control_B.b_i_g];
      b_this->constValues[proc_control_B.b_i_g + 24] =
        constMec_cdq[proc_control_B.b_i_g];
      b_this->constValues[proc_control_B.b_i_g + 30] =
        constMec_added_mass[proc_control_B.b_i_g];
    }

    b_this->constValues[36] = constMec_rho;
    b_this->constValues[37] = constMec_g;

    //  Fonction qui genere la matrice B
    // ------------------------------------------------------------------------------ 
    //  Crée la matrice thrusters
    proc_control_B.t15_c = constMec_rg[0];
    proc_control_B.constMec_rg = constMec_rg[1];
    proc_control_B.constMec_rg_o = constMec_rg[2];
    proc_control_B.b_i_g = 0;
    for (proc_control_B.b_i_n = 0; proc_control_B.b_i_n < 8;
         proc_control_B.b_i_n++) {
      _mm_storeu_pd(&proc_control_B.dv22[0], _mm_mul_pd(_mm_set_pd
        (constMec_thrusters[proc_control_B.b_i_n + 32],
         constMec_thrusters[proc_control_B.b_i_n + 24]), _mm_set1_pd
        (0.017453292519943295)));
      proc_control_B.dv22[2] = constMec_thrusters[proc_control_B.b_i_n + 40] *
        0.017453292519943295;
      proc_control_eul2quat(proc_control_B.dv22, proc_control_B.qt);

      //  convertir les angle d'euler en uaternion
      // ThrusterVector
      //     Tt = ThrusterVector(IN1,IN2,IN3)
      //     This function was generated by the Symbolic Math Toolbox version 9.1. 
      //     12-Jul-2022 16:58:54
      _mm_storeu_pd(&proc_control_B.dv26[0], _mm_mul_pd(_mm_mul_pd(_mm_set_pd
        (proc_control_B.qt[0], proc_control_B.qt[2]), _mm_set_pd
        (proc_control_B.qt[1], proc_control_B.qt[3])), _mm_set1_pd(2.0)));
      proc_control_B.t5 = proc_control_B.dv26[0];
      proc_control_B.t6 = proc_control_B.dv26[1];
      _mm_storeu_pd(&proc_control_B.dv26[0], _mm_sub_pd(_mm_set_pd
        (proc_control_B.constMec_rg, proc_control_B.t15_c), _mm_set_pd
        (constMec_thrusters[proc_control_B.b_i_n + 8],
         constMec_thrusters[proc_control_B.b_i_n])));
      proc_control_B.t16_p = proc_control_B.constMec_rg_o -
        constMec_thrusters[proc_control_B.b_i_n + 16];
      proc_control_B.t17_p = proc_control_B.qt[1] * proc_control_B.qt[3] * 2.0 +
        proc_control_B.qt[0] * proc_control_B.qt[2] * 2.0;
      proc_control_B.t18 = proc_control_B.t5 - proc_control_B.t6;
      proc_control_B.t19_a = (proc_control_B.qt[1] * proc_control_B.qt[1] * 2.0
        + proc_control_B.qt[2] * proc_control_B.qt[2] * 2.0) - 1.0;
      proc_control_B.Tm[proc_control_B.b_i_g] = -proc_control_B.t17_p;
      proc_control_B.Tm[proc_control_B.b_i_g + 1] = -proc_control_B.t5 +
        proc_control_B.t6;
      proc_control_B.Tm[proc_control_B.b_i_g + 2] = proc_control_B.t19_a;
      proc_control_B.Tm[proc_control_B.b_i_g + 3] = -proc_control_B.dv26[1] *
        proc_control_B.t19_a - proc_control_B.t16_p * proc_control_B.t18;
      proc_control_B.Tm[proc_control_B.b_i_g + 4] = proc_control_B.dv26[0] *
        proc_control_B.t19_a + proc_control_B.t16_p * proc_control_B.t17_p;
      proc_control_B.Tm[proc_control_B.b_i_g + 5] = proc_control_B.dv26[0] *
        proc_control_B.t18 - proc_control_B.dv26[1] * proc_control_B.t17_p;

      //  Calculer le vecteur thrusters
      proc_control_B.b_i_g += 6;
    }

    //  prendre la matrice M
    // AUVModelMatrices
    //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
    //     This function was generated by the Symbolic Math Toolbox version 9.1. 
    //     12-Jul-2022 16:58:53
    tmp_0 = _mm_mul_pd(_mm_set1_pd(b_this->constValues[0]), _mm_loadu_pd
                       (&b_this->constValues[12]));
    _mm_storeu_pd(&proc_control_B.dv26[0], tmp_0);
    proc_control_B.t15_c = b_this->constValues[0] * b_this->constValues[14];

    //  M inverse * Tm
    proc_control_B.b_this_p[0] = -b_this->constValues[30] + b_this->constValues
      [0];
    proc_control_B.b_this_p[1] = 0.0;
    proc_control_B.b_this_p[2] = 0.0;
    proc_control_B.b_this_p[3] = 0.0;
    proc_control_B.b_this_p[4] = proc_control_B.t15_c;
    proc_control_B.b_this_p[5] = -proc_control_B.dv26[1];
    proc_control_B.b_this_p[6] = 0.0;
    proc_control_B.b_this_p[7] = -b_this->constValues[31] + b_this->constValues
      [0];
    proc_control_B.b_this_p[8] = 0.0;
    proc_control_B.b_this_p[9] = -proc_control_B.t15_c;
    proc_control_B.b_this_p[10] = 0.0;
    proc_control_B.b_this_p[11] = proc_control_B.dv26[0];
    proc_control_B.b_this_p[12] = 0.0;
    proc_control_B.b_this_p[13] = 0.0;
    proc_control_B.b_this_p[14] = -b_this->constValues[32] + b_this->
      constValues[0];
    proc_control_B.b_this_p[15] = proc_control_B.dv26[1];
    proc_control_B.b_this_p[16] = -proc_control_B.dv26[0];
    proc_control_B.b_this_p[17] = 0.0;
    proc_control_B.b_this_p[18] = 0.0;
    proc_control_B.b_this_p[19] = -proc_control_B.t15_c;
    proc_control_B.b_this_p[20] = proc_control_B.dv26[1];
    proc_control_B.b_this_p[21] = b_this->constValues[3] - b_this->constValues
      [33];
    proc_control_B.b_this_p[22] = b_this->constValues[6];
    proc_control_B.b_this_p[23] = b_this->constValues[9];
    proc_control_B.b_this_p[24] = proc_control_B.t15_c;
    proc_control_B.b_this_p[25] = 0.0;
    proc_control_B.b_this_p[26] = -proc_control_B.dv26[0];
    proc_control_B.b_this_p[27] = b_this->constValues[4];
    proc_control_B.b_this_p[28] = b_this->constValues[7] - b_this->constValues
      [34];
    proc_control_B.b_this_p[29] = b_this->constValues[10];
    proc_control_B.b_this_p[30] = -proc_control_B.dv26[1];
    proc_control_B.b_this_p[31] = proc_control_B.dv26[0];
    proc_control_B.b_this_p[32] = 0.0;
    proc_control_B.b_this_p[33] = b_this->constValues[5];
    proc_control_B.b_this_p[34] = b_this->constValues[8];
    proc_control_B.b_this_p[35] = b_this->constValues[11] - b_this->constValues
      [35];
    proc_control_mldivide_pr3(proc_control_B.b_this_p, proc_control_B.Tm);
    for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 8;
         proc_control_B.b_i_g++) {
      for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 7;
           proc_control_B.b_k_d++) {
        b_this->Bc[proc_control_B.b_k_d + 13 * proc_control_B.b_i_g] = 0.0;
      }

      for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 6;
           proc_control_B.b_k_d++) {
        b_this->Bc[(proc_control_B.b_k_d + 13 * proc_control_B.b_i_g) + 7] =
          proc_control_B.Tm[6 * proc_control_B.b_i_g + proc_control_B.b_k_d];
      }
    }

    b_this->init = true;
  }

  //  Regarder la discontinuité entre le qk et qk-1 pour la mesure
  // =================================================================
  //  Fonction qui assure la continuité entre 2 quaternions
  //  Regarder la discontinuité entre le qk et qk-1
  proc_control_B.qt[0] = y[3];
  proc_control_B.qt[1] = y[4];
  proc_control_B.qt[2] = y[5];
  proc_control_B.qt[3] = y[6];
  if (((b_this->qkm[0] * y[3] + b_this->qkm[1] * y[4]) + b_this->qkm[2] * y[5])
      + b_this->qkm[3] * y[6] < 0.0) {
    proc_control_B.qt[0] = -y[3];
    proc_control_B.qt[1] = -y[4];
    proc_control_B.qt[2] = -y[5];
    proc_control_B.qt[3] = -y[6];
  }

  //  Regarder la discontinuité entre le qk et qk + p pour la trajectoire
  //  Fonction qui regarde la discontinuiter entre 2 generations du planner
  // ------------------------------------------------------------------------------ 
  //  check fist ref
  // =================================================================
  //  Fonction qui assure la continuité entre 2 quaternions
  //  Regarder la discontinuité entre le qk et qk-1
  y[3] = proc_control_B.qt[0];
  b_this->qkm[0] = proc_control_B.qt[0];
  proc_control_B.qt[0] = ref[30];
  y[4] = proc_control_B.qt[1];
  b_this->qkm[1] = proc_control_B.qt[1];
  proc_control_B.qt[1] = ref[40];
  y[5] = proc_control_B.qt[2];
  b_this->qkm[2] = proc_control_B.qt[2];
  proc_control_B.qt[2] = ref[50];
  y[6] = proc_control_B.qt[3];
  b_this->qkm[3] = proc_control_B.qt[3];
  proc_control_B.qt[3] = ref[60];
  if (((b_this->qkt[0] * ref[30] + b_this->qkt[1] * ref[40]) + b_this->qkt[2] *
       ref[50]) + b_this->qkt[3] * ref[60] < 0.0) {
    proc_control_B.qt[0] = -ref[30];
    proc_control_B.qt[1] = -ref[40];
    proc_control_B.qt[2] = -ref[50];
    proc_control_B.qt[3] = -ref[60];
  }

  ref[30] = proc_control_B.qt[0];
  ref[40] = proc_control_B.qt[1];
  ref[50] = proc_control_B.qt[2];
  ref[60] = proc_control_B.qt[3];
  for (proc_control_B.b_i_n = 0; proc_control_B.b_i_n < 9; proc_control_B.b_i_n
       ++) {
    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    proc_control_B.t15_c = ref[proc_control_B.b_i_n + 31];
    proc_control_B.qt[0] = proc_control_B.t15_c;
    proc_control_B.constMec_rg = ref[proc_control_B.b_i_n + 41];
    proc_control_B.qt[1] = proc_control_B.constMec_rg;
    proc_control_B.constMec_rg_o = ref[proc_control_B.b_i_n + 51];
    proc_control_B.qt[2] = proc_control_B.constMec_rg_o;
    proc_control_B.t5 = ref[proc_control_B.b_i_n + 61];
    proc_control_B.qt[3] = proc_control_B.t5;
    if (((ref[proc_control_B.b_i_n + 30] * proc_control_B.t15_c +
          ref[proc_control_B.b_i_n + 40] * proc_control_B.constMec_rg) +
         ref[proc_control_B.b_i_n + 50] * proc_control_B.constMec_rg_o) +
        ref[proc_control_B.b_i_n + 60] * proc_control_B.t5 < 0.0) {
      proc_control_B.qt[0] = -proc_control_B.t15_c;
      proc_control_B.qt[1] = -proc_control_B.constMec_rg;
      proc_control_B.qt[2] = -proc_control_B.constMec_rg_o;
      proc_control_B.qt[3] = -proc_control_B.t5;
    }

    ref[proc_control_B.b_i_n + 31] = proc_control_B.qt[0];
    ref[proc_control_B.b_i_n + 41] = proc_control_B.qt[1];
    ref[proc_control_B.b_i_n + 51] = proc_control_B.qt[2];
    ref[proc_control_B.b_i_n + 61] = proc_control_B.qt[3];
  }

  //  save quat for next step
  b_this->qkt[0] = ref[30];
  b_this->qkt[1] = ref[40];
  b_this->qkt[2] = ref[50];
  b_this->qkt[3] = ref[60];

  //  Calculer le residue de mesure
  //  Fonction qui calcule le residue de mesure
  // ------------------------------------------------------------------------------ 
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g <= 10;
       proc_control_B.b_i_g += 2) {
    tmp_0 = _mm_loadu_pd(&y[proc_control_B.b_i_g]);
    tmp = _mm_loadu_pd(&b_this->xl[proc_control_B.b_i_g]);
    _mm_storeu_pd(&Z[proc_control_B.b_i_g], _mm_sub_pd(tmp_0, tmp));
  }

  for (proc_control_B.b_i_g = 12; proc_control_B.b_i_g < 13;
       proc_control_B.b_i_g++) {
    Z[proc_control_B.b_i_g] = y[proc_control_B.b_i_g] - b_this->
      xl[proc_control_B.b_i_g];
  }

  //  compute the quaternion error
  //  https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6864719/
  tmp_0 = _mm_set1_pd(((b_this->xl[3] * b_this->xl[3] + b_this->xl[4] *
                        b_this->xl[4]) + b_this->xl[5] * b_this->xl[5]) +
                      b_this->xl[6] * b_this->xl[6]);
  _mm_storeu_pd(&proc_control_B.qt[0], _mm_div_pd(_mm_set_pd(-b_this->xl[4],
    b_this->xl[3]), tmp_0));
  _mm_storeu_pd(&proc_control_B.qt[2], _mm_div_pd(_mm_set_pd(-b_this->xl[6],
    -b_this->xl[5]), tmp_0));
  proc_control_quatmultiply(&y[3], proc_control_B.qt, &Z[3]);

  //  Linéariser le systeme.
  //  Fonction qui linéarise le systeme
  // ------------------------------------------------------------------------------ 
  //  Lineariser le système
  proc_cont_AUVQuatJacobianMatrix(y, b_this->constValues, proc_control_B.Ac);
  memcpy(&C[0], &b_this->C[0], 169U * sizeof(real_T));
  memcpy(&D[0], &b_this->D[0], 104U * sizeof(real_T));

  //  Discrétiser le système.
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g <= 166;
       proc_control_B.b_i_g += 2) {
    tmp_0 = _mm_loadu_pd(&proc_control_B.Ac[proc_control_B.b_i_g]);
    _mm_storeu_pd(&proc_control_B.Ac_m[proc_control_B.b_i_g], _mm_mul_pd(tmp_0,
      _mm_set1_pd(0.1)));
  }

  for (proc_control_B.b_i_g = 168; proc_control_B.b_i_g < 169;
       proc_control_B.b_i_g++) {
    proc_control_B.Ac_m[proc_control_B.b_i_g] =
      proc_control_B.Ac[proc_control_B.b_i_g] * 0.1;
  }

  proc_control_expm(proc_control_B.Ac_m, A);

  //  Fossen 2021 Eq B.10/B.9 page 662
  memset(&proc_control_B.b_this_p[0], 0, 36U * sizeof(real_T));
  proc_control_B.b_k_d = 0;
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 6; proc_control_B.b_i_g
       ++) {
    proc_control_B.b_this_p[proc_control_B.b_k_d] = 1.0;
    proc_control_B.b_k_d += 7;
  }

  proc_control_B.b_i_g = 0;
  proc_control_B.b_k_d = 0;
  for (proc_control_B.b_i_n = 0; proc_control_B.b_i_n < 6; proc_control_B.b_i_n
       ++) {
    for (proc_control_B.i_fi = 0; proc_control_B.i_fi <= 4; proc_control_B.i_fi +=
         2) {
      proc_control_B.i5 = (proc_control_B.i_fi + proc_control_B.b_k_d) + 98;
      tmp_0 = _mm_loadu_pd(&A[proc_control_B.i5]);
      proc_control_B.i4 = proc_control_B.i_fi + proc_control_B.b_i_g;
      tmp = _mm_loadu_pd(&proc_control_B.b_this_p[proc_control_B.i4]);
      _mm_storeu_pd(&proc_control_B.b_this_p[proc_control_B.i4], _mm_sub_pd
                    (tmp_0, tmp));
      tmp_0 = _mm_loadu_pd(&proc_control_B.Ac[proc_control_B.i5]);
      _mm_storeu_pd(&proc_control_B.Ac_p[proc_control_B.i4], tmp_0);
    }

    proc_control_B.b_i_g += 6;
    proc_control_B.b_k_d += 13;
  }

  proc_control_mldivide_pr35(proc_control_B.Ac_p, proc_control_B.b_this_p);

  //  Fossen 2021 Eq B.11 p 662
  //  Calculer F(x(k),u(k))
  for (proc_control_B.i_fi = 0; proc_control_B.i_fi < 13; proc_control_B.i_fi++)
  {
    DX[proc_control_B.i_fi] = y[proc_control_B.i_fi];
    proc_control_B.x_dot_kk[proc_control_B.i_fi] = 0.0;
  }

  for (proc_control_B.b_i_n = 0; proc_control_B.b_i_n < 10; proc_control_B.b_i_n
       ++) {
    //  X(k+1) = A(xk)*xk + B*xk
    proc_control_AUVQuatSimFcn(DX, b_this->constValues, proc_control_B.dv13);

    //  Intégration trapezoidale
    for (proc_control_B.i_fi = 0; proc_control_B.i_fi < 13; proc_control_B.i_fi
         ++) {
      proc_control_B.t15_c = 0.0;
      proc_control_B.b_i_g = 0;
      for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 8;
           proc_control_B.b_k_d++) {
        proc_control_B.t15_c += b_this->Bc[proc_control_B.b_i_g +
          proc_control_B.i_fi] * u[proc_control_B.b_k_d];
        proc_control_B.b_i_g += 13;
      }

      proc_control_B.t15_c += proc_control_B.dv13[proc_control_B.i_fi];
      DX[proc_control_B.i_fi] += (proc_control_B.t15_c +
        proc_control_B.x_dot_kk[proc_control_B.i_fi]) * 0.01 / 2.0;
      proc_control_B.x_dot_kk[proc_control_B.i_fi] = proc_control_B.t15_c;
    }

    //  correct Quaternion
    // =================================================================
    //  Fonction qui normalise un quaternion.
    //  quatnormalize de matlab demande areospace block set pour etre compilable. 
    //  Fossen(2021) eq 2.86 p.37
    proc_control_B.t15_c = proc_control_norm_pr(&DX[3]);
    tmp_0 = _mm_set1_pd(proc_control_B.t15_c);
    tmp = _mm_div_pd(_mm_loadu_pd(&DX[3]), tmp_0);
    _mm_storeu_pd(&DX[3], tmp);
    tmp_0 = _mm_div_pd(_mm_loadu_pd(&DX[5]), tmp_0);
    _mm_storeu_pd(&DX[5], tmp_0);
  }

  //  Nominal conditions for discrete-time plant
  // (Cc*x + Dc*u).';
  //  save prediction for next step
  memcpy(&b_this->xl[0], &DX[0], 13U * sizeof(real_T));
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 6; proc_control_B.b_i_g
       ++) {
    proc_control_B.b_k_d = 0;
    proc_control_B.b_i_n = 0;
    for (proc_control_B.i_fi = 0; proc_control_B.i_fi < 8; proc_control_B.i_fi++)
    {
      proc_control_B.t15_c = 0.0;
      proc_control_B.i5 = 0;
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 6; proc_control_B.i4++) {
        proc_control_B.t15_c += b_this->Bc[(proc_control_B.i4 +
          proc_control_B.b_i_n) + 7] * proc_control_B.b_this_p[proc_control_B.i5
          + proc_control_B.b_i_g];
        proc_control_B.i5 += 6;
      }

      proc_control_B.Tm[proc_control_B.b_k_d + proc_control_B.b_i_g] =
        proc_control_B.t15_c;
      proc_control_B.b_k_d += 6;
      proc_control_B.b_i_n += 13;
    }
  }

  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 8; proc_control_B.b_i_g
       ++) {
    for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 7;
         proc_control_B.b_k_d++) {
      B[proc_control_B.b_k_d + 13 * proc_control_B.b_i_g] = 0.0;
    }

    for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 6;
         proc_control_B.b_k_d++) {
      B[(proc_control_B.b_k_d + 13 * proc_control_B.b_i_g) + 7] =
        proc_control_B.Tm[6 * proc_control_B.b_i_g + proc_control_B.b_k_d];
    }

    U[proc_control_B.b_i_g] = u[proc_control_B.b_i_g];
  }

  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g <= 10;
       proc_control_B.b_i_g += 2) {
    tmp_0 = _mm_loadu_pd(&y[proc_control_B.b_i_g]);
    _mm_storeu_pd(&Y[proc_control_B.b_i_g], tmp_0);
    _mm_storeu_pd(&X[proc_control_B.b_i_g], tmp_0);
    tmp = _mm_loadu_pd(&DX[proc_control_B.b_i_g]);
    _mm_storeu_pd(&DX[proc_control_B.b_i_g], _mm_sub_pd(tmp, tmp_0));
  }

  for (proc_control_B.b_i_g = 12; proc_control_B.b_i_g < 13;
       proc_control_B.b_i_g++) {
    proc_control_B.t15_c = y[proc_control_B.b_i_g];
    Y[proc_control_B.b_i_g] = proc_control_B.t15_c;
    X[proc_control_B.b_i_g] = proc_control_B.t15_c;
    DX[proc_control_B.b_i_g] -= proc_control_B.t15_c;
  }

  // End of Start for MATLABSystem: '<S71>/MATLAB System'
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_kron(const int32_T b_A_size[1], real_T K_data[],
  int32_T K_size[2])
{
  int32_T b;
  int32_T kidx;
  static const int8_T b_B[64] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  K_size[0] = b_A_size[0] << 3;
  K_size[1] = 8;
  kidx = -1;
  b = b_A_size[0];
  for (int32_T j2 = 0; j2 < 8; j2++) {
    for (int32_T i1 = 0; i1 < b; i1++) {
      for (int32_T i2 = 0; i2 < 8; i2++) {
        K_data[(kidx + i2) + 1] = b_B[(j2 << 3) + i2];
      }

      kidx += 8;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  proc_control_B.mc = b_A_size[0] - 1;
  b_C_size[0] = b_A_size[0];
  proc_control_B.b_o = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (proc_control_B.j_n = 0; proc_control_B.j_n < proc_control_B.b_o;
       proc_control_B.j_n++) {
    proc_control_B.coffset = (proc_control_B.mc + 1) * proc_control_B.j_n;
    proc_control_B.boffset = proc_control_B.j_n * b_B_size[0];
    if (proc_control_B.mc >= 0) {
      memset(&b_C_data[proc_control_B.coffset], 0, static_cast<uint32_T>
             (((proc_control_B.mc + proc_control_B.coffset) -
               proc_control_B.coffset) + 1) * sizeof(real_T));
    }

    proc_control_B.c_k = b_A_size[1];
    for (proc_control_B.i_b = 0; proc_control_B.i_b < proc_control_B.c_k;
         proc_control_B.i_b++) {
      proc_control_B.aoffset = proc_control_B.i_b * b_A_size[0];
      proc_control_B.bkj = b_B_data[proc_control_B.boffset + proc_control_B.i_b];
      proc_control_B.scalarLB = ((proc_control_B.mc + 1) / 2) << 1;
      proc_control_B.vectorUB = proc_control_B.scalarLB - 2;
      for (proc_control_B.b_i = 0; proc_control_B.b_i <= proc_control_B.vectorUB;
           proc_control_B.b_i += 2) {
        __m128d tmp;
        proc_control_B.i3 = proc_control_B.coffset + proc_control_B.b_i;
        tmp = _mm_loadu_pd(&b_C_data[proc_control_B.i3]);
        _mm_storeu_pd(&b_C_data[proc_control_B.i3], _mm_add_pd(_mm_mul_pd
          (_mm_loadu_pd(&b_A_data[proc_control_B.aoffset + proc_control_B.b_i]),
           _mm_set1_pd(proc_control_B.bkj)), tmp));
      }

      for (proc_control_B.b_i = proc_control_B.scalarLB; proc_control_B.b_i <=
           proc_control_B.mc; proc_control_B.b_i++) {
        proc_control_B.i3 = proc_control_B.coffset + proc_control_B.b_i;
        b_C_data[proc_control_B.i3] += b_A_data[proc_control_B.aoffset +
          proc_control_B.b_i] * proc_control_B.bkj;
      }
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_constraintcoef(const real_T b_A[441], const
  real_T Bu[168], const real_T Bv[21], const real_T b_C[273], const real_T Dv[13],
  const real_T Jm_data[], const int32_T Jm_size[2], real_T SuJm_data[], int32_T
  SuJm_size[2], real_T Sx_data[], int32_T Sx_size[2], real_T Su1_data[], int32_T
  Su1_size[2], real_T Hv_data[], int32_T Hv_size[2])
{
  proc_control_B.b_p = static_cast<real_T>(Jm_size[0]) / 8.0;
  proc_control_B.pny1 = (proc_control_B.b_p - 1.0) * 13.0;
  proc_control_B.loop_ub_tmp_h = static_cast<int32_T>(proc_control_B.b_p - 1.0)
    + 2;
  for (proc_control_B.i1 = 0; proc_control_B.i1 < 13; proc_control_B.i1++) {
    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 21;
         proc_control_B.loop_ub_h++) {
      proc_control_B.CA_d = 0.0;
      for (proc_control_B.input_sizes_idx_0 = 0;
           proc_control_B.input_sizes_idx_0 < 21;
           proc_control_B.input_sizes_idx_0++) {
        proc_control_B.CA_d += b_C[13 * proc_control_B.input_sizes_idx_0 +
          proc_control_B.i1] * b_A[21 * proc_control_B.loop_ub_h +
          proc_control_B.input_sizes_idx_0];
      }

      proc_control_B.CA[proc_control_B.i1 + 13 * proc_control_B.loop_ub_h] =
        proc_control_B.CA_d;
    }

    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 8;
         proc_control_B.loop_ub_h++) {
      proc_control_B.CA_d = 0.0;
      for (proc_control_B.input_sizes_idx_0 = 0;
           proc_control_B.input_sizes_idx_0 < 21;
           proc_control_B.input_sizes_idx_0++) {
        proc_control_B.CA_d += b_C[13 * proc_control_B.input_sizes_idx_0 +
          proc_control_B.i1] * Bu[21 * proc_control_B.loop_ub_h +
          proc_control_B.input_sizes_idx_0];
      }

      proc_control_B.Sum_f[proc_control_B.i1 + 13 * proc_control_B.loop_ub_h] =
        proc_control_B.CA_d;
    }

    proc_control_B.CA_d = 0.0;
    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 21;
         proc_control_B.loop_ub_h++) {
      proc_control_B.CA_d += b_C[13 * proc_control_B.loop_ub_h +
        proc_control_B.i1] * Bv[proc_control_B.loop_ub_h];
    }

    proc_control_B.varargin_1_data_j[proc_control_B.i1] = proc_control_B.CA_d;
    proc_control_B.varargin_1_data_j[proc_control_B.i1 + 13] =
      Dv[proc_control_B.i1];
  }

  proc_control_B.loop_ub_h = static_cast<int32_T>(proc_control_B.b_p - 1.0) * 13;
  if (proc_control_B.loop_ub_h - 1 >= 0) {
    memset(&proc_control_B.varargin_1_data_j[26], 0, static_cast<uint32_T>
           (proc_control_B.loop_ub_h) * sizeof(real_T));
  }

  if (static_cast<int32_T>(proc_control_B.pny1) != 0) {
    proc_control_B.input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.pny1);
    proc_control_B.i31 = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_B.pny1));
  } else {
    proc_control_B.input_sizes_idx_0 = 0;
    proc_control_B.i31 = 0;
  }

  Hv_size[0] = proc_control_B.i31 + 13;
  Hv_size[1] = static_cast<int32_T>(proc_control_B.b_p - 1.0) + 2;
  for (proc_control_B.i1 = 0; proc_control_B.i1 < proc_control_B.loop_ub_tmp_h;
       proc_control_B.i1++) {
    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
         proc_control_B.loop_ub_h++) {
      Hv_data[proc_control_B.loop_ub_h + (proc_control_B.i31 + 13) *
        proc_control_B.i1] = proc_control_B.varargin_1_data_j[13 *
        proc_control_B.i1 + proc_control_B.loop_ub_h];
    }

    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h <
         proc_control_B.input_sizes_idx_0; proc_control_B.loop_ub_h++) {
      Hv_data[(proc_control_B.loop_ub_h + (proc_control_B.i31 + 13) *
               proc_control_B.i1) + 13] = 0.0;
    }
  }

  proc_control_B.input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.pny1);
  Sx_size[0] = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Sx_size[1] = 21;
  for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
         proc_control_B.loop_ub_h++) {
      Sx_data[proc_control_B.loop_ub_h + (static_cast<int32_T>
        (proc_control_B.pny1) + 13) * proc_control_B.i1] = proc_control_B.CA[13 *
        proc_control_B.i1 + proc_control_B.loop_ub_h];
    }

    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h <
         proc_control_B.input_sizes_idx_0; proc_control_B.loop_ub_h++) {
      Sx_data[(proc_control_B.loop_ub_h + (static_cast<int32_T>
                (proc_control_B.pny1) + 13) * proc_control_B.i1) + 13] = 0.0;
    }
  }

  Su1_size[0] = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Su1_size[1] = 8;
  for (proc_control_B.i1 = 0; proc_control_B.i1 < 8; proc_control_B.i1++) {
    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
         proc_control_B.loop_ub_h++) {
      Su1_data[proc_control_B.loop_ub_h + (static_cast<int32_T>
        (proc_control_B.pny1) + 13) * proc_control_B.i1] = proc_control_B.Sum_f
        [13 * proc_control_B.i1 + proc_control_B.loop_ub_h];
    }

    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h <
         proc_control_B.input_sizes_idx_0; proc_control_B.loop_ub_h++) {
      Su1_data[(proc_control_B.loop_ub_h + (static_cast<int32_T>
                 (proc_control_B.pny1) + 13) * proc_control_B.i1) + 13] = 0.0;
    }
  }

  proc_control_B.CA_d = (proc_control_B.b_p - 1.0) * 8.0;
  proc_control_B.input_sizes_idx_0_tmp = static_cast<int32_T>
    (proc_control_B.CA_d) + 8;
  memcpy(&proc_control_B.varargin_1_data_j[0], &proc_control_B.Sum_f[0], 104U *
         sizeof(real_T));
  proc_control_B.loop_ub_tmp_h = static_cast<int32_T>(proc_control_B.CA_d) * 13;
  if (proc_control_B.loop_ub_tmp_h - 1 >= 0) {
    memset(&proc_control_B.varargin_1_data_j[104], 0, static_cast<uint32_T>
           (proc_control_B.loop_ub_tmp_h) * sizeof(real_T));
  }

  if ((static_cast<int32_T>(proc_control_B.pny1) != 0) && (static_cast<int32_T>
       (proc_control_B.b_p * 8.0) != 0)) {
    proc_control_B.b_input_sizes_idx_0 = static_cast<int32_T>
      (proc_control_B.pny1);
    proc_control_B.i31 = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_B.pny1));
  } else {
    proc_control_B.b_input_sizes_idx_0 = 0;
    proc_control_B.i31 = 0;
  }

  proc_control_B.Su_size[0] = proc_control_B.i31 + 13;
  proc_control_B.Su_size[1] = static_cast<int32_T>(proc_control_B.CA_d) + 8;
  for (proc_control_B.i1 = 0; proc_control_B.i1 <
       proc_control_B.input_sizes_idx_0_tmp; proc_control_B.i1++) {
    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
         proc_control_B.loop_ub_h++) {
      proc_control_B.Su_data[proc_control_B.loop_ub_h + (proc_control_B.i31 + 13)
        * proc_control_B.i1] = proc_control_B.varargin_1_data_j[13 *
        proc_control_B.i1 + proc_control_B.loop_ub_h];
    }

    for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h <
         proc_control_B.b_input_sizes_idx_0; proc_control_B.loop_ub_h++) {
      proc_control_B.Su_data[(proc_control_B.loop_ub_h + (proc_control_B.i31 +
        13) * proc_control_B.i1) + 13] = 0.0;
    }
  }

  proc_control_B.b_input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.b_p -
    1.0);
  if (static_cast<int32_T>(proc_control_B.b_p - 1.0) - 1 >= 0) {
    if (proc_control_B.CA_d < 1.0) {
      proc_control_B.loop_ub_e = -1;
    } else {
      proc_control_B.loop_ub_e = static_cast<int32_T>(proc_control_B.CA_d) - 1;
    }

    proc_control_B.loop_ub_l = static_cast<int32_T>(proc_control_B.b_p);
  }

  for (proc_control_B.input_sizes_idx_0_tmp = 0;
       proc_control_B.input_sizes_idx_0_tmp < proc_control_B.b_input_sizes_idx_0;
       proc_control_B.input_sizes_idx_0_tmp++) {
    proc_control_B.i_pz = static_cast<uint8_T>(static_cast<uint32_T>
      (proc_control_B.input_sizes_idx_0_tmp + 1) * 13U + 1U);
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 13; proc_control_B.i1++) {
      proc_control_B.rows[proc_control_B.i1] = static_cast<uint8_T>(static_cast<
        uint32_T>(proc_control_B.i1) + proc_control_B.i_pz);
      proc_control_B.loop_ub_h = 0;
      proc_control_B.input_sizes_idx_0 = 0;
      for (proc_control_B.loop_ub_tmp_h = 0; proc_control_B.loop_ub_tmp_h < 8;
           proc_control_B.loop_ub_tmp_h++) {
        proc_control_B.CA_d = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.i2 = 0; proc_control_B.i2 < 21; proc_control_B.i2++)
        {
          proc_control_B.CA_d += proc_control_B.CA[proc_control_B.Sum_tmp +
            proc_control_B.i1] * Bu[proc_control_B.i2 +
            proc_control_B.input_sizes_idx_0];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.Sum_tmp = proc_control_B.loop_ub_h + proc_control_B.i1;
        proc_control_B.Sum_f[proc_control_B.Sum_tmp] += proc_control_B.CA_d;
        proc_control_B.loop_ub_h += 13;
        proc_control_B.input_sizes_idx_0 += 21;
      }
    }

    proc_control_B.input_sizes_idx_0 = proc_control_B.loop_ub_e + 9;
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 8; proc_control_B.i1++) {
      for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
           proc_control_B.loop_ub_h++) {
        proc_control_B.loop_ub_tmp_h = 13 * proc_control_B.i1 +
          proc_control_B.loop_ub_h;
        proc_control_B.CA_d = proc_control_B.Sum_f[proc_control_B.loop_ub_tmp_h];
        Su1_data[(proc_control_B.rows[proc_control_B.loop_ub_h] +
                  (static_cast<int32_T>(proc_control_B.pny1) + 13) *
                  proc_control_B.i1) - 1] = proc_control_B.CA_d;
        proc_control_B.varargin_1_data_j[proc_control_B.loop_ub_tmp_h] =
          proc_control_B.CA_d;
      }
    }

    for (proc_control_B.i1 = 0; proc_control_B.i1 <= proc_control_B.loop_ub_e;
         proc_control_B.i1++) {
      for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
           proc_control_B.loop_ub_h++) {
        proc_control_B.varargin_1_data_j[proc_control_B.loop_ub_h + 13 *
          (proc_control_B.i1 + 8)] = proc_control_B.Su_data[((proc_control_B.i31
          + 13) * proc_control_B.i1 +
          proc_control_B.rows[proc_control_B.loop_ub_h]) - 14];
      }
    }

    for (proc_control_B.i1 = 0; proc_control_B.i1 <
         proc_control_B.input_sizes_idx_0; proc_control_B.i1++) {
      for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
           proc_control_B.loop_ub_h++) {
        proc_control_B.Su_data[(proc_control_B.rows[proc_control_B.loop_ub_h] +
          (proc_control_B.i31 + 13) * proc_control_B.i1) - 1] =
          proc_control_B.varargin_1_data_j[13 * proc_control_B.i1 +
          proc_control_B.loop_ub_h];
      }
    }

    for (proc_control_B.i1 = 0; proc_control_B.i1 < 13; proc_control_B.i1++) {
      proc_control_B.CA_d = 0.0;
      proc_control_B.loop_ub_h = 0;
      for (proc_control_B.input_sizes_idx_0 = 0;
           proc_control_B.input_sizes_idx_0 < 21;
           proc_control_B.input_sizes_idx_0++) {
        proc_control_B.CA_d += proc_control_B.CA[proc_control_B.loop_ub_h +
          proc_control_B.i1] * Bv[proc_control_B.input_sizes_idx_0];
        proc_control_B.loop_ub_h += 13;
      }

      proc_control_B.CA_j[proc_control_B.i1] = proc_control_B.CA_d;
    }

    proc_control_B.loop_ub_tmp_h = static_cast<int32_T>(proc_control_B.b_p) + 1;
    memcpy(&proc_control_B.CA_data[0], &proc_control_B.CA_j[0], 13U * sizeof
           (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < proc_control_B.loop_ub_l;
         proc_control_B.i1++) {
      for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
           proc_control_B.loop_ub_h++) {
        proc_control_B.CA_data[proc_control_B.loop_ub_h + 13 *
          (proc_control_B.i1 + 1)] = Hv_data[(Hv_size[0] * proc_control_B.i1 +
          proc_control_B.rows[proc_control_B.loop_ub_h]) - 14];
      }
    }

    for (proc_control_B.i1 = 0; proc_control_B.i1 < proc_control_B.loop_ub_tmp_h;
         proc_control_B.i1++) {
      for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
           proc_control_B.loop_ub_h++) {
        Hv_data[(proc_control_B.rows[proc_control_B.loop_ub_h] + Hv_size[0] *
                 proc_control_B.i1) - 1] = proc_control_B.CA_data[13 *
          proc_control_B.i1 + proc_control_B.loop_ub_h];
      }
    }

    for (proc_control_B.i1 = 0; proc_control_B.i1 < 13; proc_control_B.i1++) {
      proc_control_B.loop_ub_h = 0;
      proc_control_B.input_sizes_idx_0 = 0;
      for (proc_control_B.loop_ub_tmp_h = 0; proc_control_B.loop_ub_tmp_h < 21;
           proc_control_B.loop_ub_tmp_h++) {
        proc_control_B.CA_d = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.i2 = 0; proc_control_B.i2 < 21; proc_control_B.i2++)
        {
          proc_control_B.CA_d += proc_control_B.CA[proc_control_B.Sum_tmp +
            proc_control_B.i1] * b_A[proc_control_B.i2 +
            proc_control_B.input_sizes_idx_0];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.CA_o[proc_control_B.loop_ub_h + proc_control_B.i1] =
          proc_control_B.CA_d;
        proc_control_B.loop_ub_h += 13;
        proc_control_B.input_sizes_idx_0 += 21;
      }
    }

    memcpy(&proc_control_B.CA[0], &proc_control_B.CA_o[0], 273U * sizeof(real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
      for (proc_control_B.loop_ub_h = 0; proc_control_B.loop_ub_h < 13;
           proc_control_B.loop_ub_h++) {
        Sx_data[(proc_control_B.rows[proc_control_B.loop_ub_h] +
                 (static_cast<int32_T>(proc_control_B.pny1) + 13) *
                 proc_control_B.i1) - 1] = proc_control_B.CA[13 *
          proc_control_B.i1 + proc_control_B.loop_ub_h];
      }
    }
  }

  proc_control_mtimes(proc_control_B.Su_data, proc_control_B.Su_size, Jm_data,
                      Jm_size, SuJm_data, SuJm_size);
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape(boolean_T isMrows_data[], real_T
  Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436], const
  real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p)
{
  int32_T loop_ub_tmp;
  loop_ub_tmp = b_p * 13;
  if (loop_ub_tmp - 1 >= 0) {
    memcpy(&isMrows_data[0], &isMrows0[0], static_cast<uint32_T>(loop_ub_tmp) *
           sizeof(boolean_T));
  }

  if (loop_ub_tmp - 1 >= 0) {
    memcpy(&Mlimfull_data[0], &Mlimfull0[0], static_cast<uint32_T>(loop_ub_tmp) *
           sizeof(real_T));
  }

  if (loop_ub_tmp - 1 >= 0) {
    memcpy(&Vfull_data[0], &Vfull0[0], static_cast<uint32_T>(loop_ub_tmp) *
           sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_h(boolean_T isMrows_data[], real_T
  Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436], const
  real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T ioff)
{
  int32_T i_0;
  int32_T j;
  int32_T loop_ub_tmp;
  i_0 = b_p * 13 + ioff;
  if (ioff + 1 > i_0) {
    j = 0;
  } else {
    j = ioff;
  }

  loop_ub_tmp = b_p * 13 - 1;
  for (int32_T i = 0; i <= loop_ub_tmp; i++) {
    isMrows_data[j + i] = isMrows0[i + 130];
  }

  if (ioff + 1 > i_0) {
    j = 0;
  } else {
    j = ioff;
  }

  for (int32_T i = 0; i <= loop_ub_tmp; i++) {
    Mlimfull_data[j + i] = Mlimfull0[i + 130];
  }

  if (ioff + 1 > i_0) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i_0 = 0; i_0 <= loop_ub_tmp; i_0++) {
    Vfull_data[j + i_0] = Vfull0[i_0 + 130];
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_hn(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  int32_T i;
  int32_T j;
  int32_T loop_ub_tmp;
  int32_T tmp;
  i = b_p << 3;
  tmp = i + ioff;
  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  loop_ub_tmp = i - 1;
  for (i = 0; i <= loop_ub_tmp; i++) {
    isMrows_data[j + i] = isMrows0[i + 260];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Mlimfull_data[j + i] = Mlimfull0[i + 260];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Vfull_data[j + i] = Vfull0[i + 260];
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_hny(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  int32_T i;
  int32_T j;
  int32_T loop_ub_tmp;
  int32_T tmp;
  i = b_p << 3;
  tmp = i + ioff;
  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  loop_ub_tmp = i - 1;
  for (i = 0; i <= loop_ub_tmp; i++) {
    isMrows_data[j + i] = isMrows0[i + 340];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Mlimfull_data[j + i] = Mlimfull0[i + 340];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Vfull_data[j + i] = Vfull0[i + 340];
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_hnyc(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  real_T y_data[80];
  boolean_T gb_data[80];
  if (b_p <= 1) {
    int32_T b_k;
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    db_tmp = b_p << 3;
    b_k = db_tmp;
    if (db_tmp + 420 < 421) {
      isMrows_tmp = 0;
      b_k = -420;
    } else {
      isMrows_tmp = 420;
    }

    hb_tmp = db_tmp + ioff;
    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 419; b_k++) {
      isMrows_data[db + b_k] = isMrows0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 420 < 421) {
      isMrows_tmp = 0;
      b_k = -420;
    } else {
      isMrows_tmp = 420;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 419; b_k++) {
      Mlimfull_data[db + b_k] = Mlimfull0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 420 < 421) {
      isMrows_tmp = 0;
      b_k = -420;
    } else {
      isMrows_tmp = 420;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (hb_tmp = 0; hb_tmp <= fb + 419; hb_tmp++) {
      Vfull_data[db + hb_tmp] = Vfull0[isMrows_tmp + hb_tmp];
    }
  } else {
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    memcpy(&Mlimfull_data[ioff], &Mlimfull0[420], sizeof(real_T) << 3U);
    memcpy(&Vfull_data[ioff], &Vfull0[420], sizeof(real_T) << 3U);
    for (hb_tmp = 0; hb_tmp < 8; hb_tmp++) {
      isMrows_data[((hb_tmp + ioff) + 1) - 1] = isMrows0[hb_tmp + 420];
    }

    db_tmp = (b_p << 3) + ioff;
    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    hb_tmp = static_cast<uint8_T>(b_p - 1);
    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      int32_T ibcol;
      ibcol = isMrows_tmp << 3;
      for (int32_T b_k = 0; b_k < 8; b_k++) {
        gb_data[ibcol + b_k] = isMrows0[b_k + 420];
      }
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k = 0; b_k < isMrows_tmp; b_k++) {
      isMrows_data[fb + b_k] = gb_data[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      memcpy(&y_data[isMrows_tmp << 3], &Mlimfull0[420], sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k = 0; b_k < isMrows_tmp; b_k++) {
      Mlimfull_data[fb + b_k] = y_data[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      memcpy(&y_data[isMrows_tmp << 3], &Vfull0[420], sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (hb_tmp = 0; hb_tmp < isMrows_tmp; hb_tmp++) {
      Vfull_data[fb + hb_tmp] = y_data[hb_tmp];
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_contro_Mrows_reshape_hnycd(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  real_T y_data[80];
  boolean_T gb_data[80];
  if (b_p <= 1) {
    int32_T b_k;
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    db_tmp = b_p << 3;
    b_k = db_tmp;
    if (db_tmp + 428 < 429) {
      isMrows_tmp = 0;
      b_k = -428;
    } else {
      isMrows_tmp = 428;
    }

    hb_tmp = db_tmp + ioff;
    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 427; b_k++) {
      isMrows_data[db + b_k] = isMrows0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 428 < 429) {
      isMrows_tmp = 0;
      b_k = -428;
    } else {
      isMrows_tmp = 428;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 427; b_k++) {
      Mlimfull_data[db + b_k] = Mlimfull0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 428 < 429) {
      isMrows_tmp = 0;
      b_k = -428;
    } else {
      isMrows_tmp = 428;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (hb_tmp = 0; hb_tmp <= fb + 427; hb_tmp++) {
      Vfull_data[db + hb_tmp] = Vfull0[isMrows_tmp + hb_tmp];
    }
  } else {
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    memcpy(&Mlimfull_data[ioff], &Mlimfull0[428], sizeof(real_T) << 3U);
    memcpy(&Vfull_data[ioff], &Vfull0[428], sizeof(real_T) << 3U);
    for (hb_tmp = 0; hb_tmp < 8; hb_tmp++) {
      isMrows_data[((hb_tmp + ioff) + 1) - 1] = isMrows0[hb_tmp + 428];
    }

    db_tmp = (b_p << 3) + ioff;
    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    hb_tmp = static_cast<uint8_T>(b_p - 1);
    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      int32_T ibcol;
      ibcol = isMrows_tmp << 3;
      for (int32_T b_k = 0; b_k < 8; b_k++) {
        gb_data[ibcol + b_k] = isMrows0[b_k + 428];
      }
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k = 0; b_k < isMrows_tmp; b_k++) {
      isMrows_data[fb + b_k] = gb_data[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      memcpy(&y_data[isMrows_tmp << 3], &Mlimfull0[428], sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k = 0; b_k < isMrows_tmp; b_k++) {
      Mlimfull_data[fb + b_k] = y_data[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      memcpy(&y_data[isMrows_tmp << 3], &Vfull0[428], sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (hb_tmp = 0; hb_tmp < isMrows_tmp; hb_tmp++) {
      Vfull_data[fb + hb_tmp] = y_data[hb_tmp];
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
int32_T proc_control::proc_cont_combineVectorElements(const boolean_T x_data[],
  const int32_T x_size[1])
{
  int32_T vlen;
  int32_T y;
  vlen = x_size[0];
  y = x_data[0];
  for (int32_T k = 2; k <= vlen; k++) {
    y += x_data[k - 1];
  }

  return y;
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_tril(real_T x_data[], const int32_T x_size[2])
{
  int32_T n;
  n = x_size[1];
  if (x_size[1] > 1) {
    int32_T iend;
    iend = 0;
    for (int32_T j = 2; j <= n; j++) {
      for (int32_T i = 0; i <= iend; i++) {
        x_data[i + x_size[0] * (j - 1)] = 0.0;
      }

      if (iend + 1 < x_size[0]) {
        iend++;
      }
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_eye(real_T b_I[64])
{
  int32_T k_0;
  memset(&b_I[0], 0, sizeof(real_T) << 6U);
  k_0 = 0;
  for (int32_T k = 0; k < 8; k++) {
    b_I[k_0] = 1.0;
    k_0 += 9;
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_kron_b(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B[64], real_T K_data[], int32_T K_size[2])
{
  int32_T c;
  int32_T d;
  int32_T kidx;
  K_size[0] = b_A_size[0] << 3;
  K_size[1] = b_A_size[1] << 3;
  kidx = -1;
  c = b_A_size[1];
  d = b_A_size[0];
  for (int32_T b_j1 = 0; b_j1 < c; b_j1++) {
    for (int32_T j2 = 0; j2 < 8; j2++) {
      for (int32_T i1 = 0; i1 < d; i1++) {
        for (int32_T i2 = 0; i2 <= 6; i2 += 2) {
          _mm_storeu_pd(&K_data[(kidx + i2) + 1], _mm_mul_pd(_mm_loadu_pd(&b_B
            [(j2 << 3) + i2]), _mm_set1_pd(b_A_data[i1 + b_A_size[0] * b_j1])));
        }

        kidx += 8;
      }
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_eye_f(int32_T varargin_1, real_T b_I_data[],
  int32_T b_I_size[2])
{
  int32_T loop_ub;
  b_I_size[0] = varargin_1;
  b_I_size[1] = varargin_1;
  loop_ub = varargin_1 * varargin_1;
  if (loop_ub - 1 >= 0) {
    memset(&b_I_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  if (varargin_1 > 0) {
    loop_ub = static_cast<uint8_T>(varargin_1);
    for (int32_T k = 0; k < loop_ub; k++) {
      b_I_data[k + varargin_1 * k] = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_updateWeights(const real_T b_signal[13], real_T
  W[13])
{
  for (int32_T ct = 0; ct < 13; ct++) {
    real_T b_signal_0;
    b_signal_0 = b_signal[ct];
    if (b_signal_0 < 0.0) {
      W[ct] = 0.0;
    } else {
      W[ct] = b_signal_0 * b_signal_0;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_updateWeights_c(const real_T b_signal[8], real_T
  W[8])
{
  for (int32_T ct = 0; ct < 8; ct++) {
    real_T b_signal_0;
    b_signal_0 = b_signal[ct];
    if (b_signal_0 < 0.0) {
      W[ct] = 0.0;
    } else {
      W[ct] = b_signal_0 * b_signal_0;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_WtMult(const real_T W[8], const real_T M_data[],
  const int32_T M_size[2], real_T WM_data[], int32_T WM_size[2])
{
  real_T tmp[2];
  int32_T c;
  int32_T loop_ub;
  int32_T tmp_0;
  int16_T ixw;
  c = M_size[0];
  WM_size[0] = M_size[0];
  tmp_0 = M_size[1];
  WM_size[1] = M_size[1];
  loop_ub = M_size[0] * M_size[1];
  if (loop_ub - 1 >= 0) {
    memset(&WM_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  ixw = 1;
  for (loop_ub = 0; loop_ub < c; loop_ub++) {
    real_T W_0;
    int32_T scalarLB;
    int32_T vectorUB;
    W_0 = W[ixw - 1];
    scalarLB = (tmp_0 / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T i = 0; i <= vectorUB; i += 2) {
      _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_set1_pd(W_0), _mm_set_pd
        (M_data[loop_ub + M_size[0] * (i + 1)], M_data[loop_ub + M_size[0] * i])));
      WM_data[loop_ub + WM_size[0] * i] = tmp[0];
      WM_data[loop_ub + WM_size[0] * (i + 1)] = tmp[1];
    }

    for (int32_T i = scalarLB; i < tmp_0; i++) {
      WM_data[loop_ub + WM_size[0] * i] = M_data[M_size[0] * i + loop_ub] * W_0;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 8) {
      ixw = 1;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_a(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T b;
  int32_T mc;
  mc = b_A_size[1] - 1;
  b_C_size[0] = b_A_size[1];
  b = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (int32_T j = 0; j < b; j++) {
    int32_T boffset;
    int32_T c;
    int32_T coffset;
    coffset = (mc + 1) * j;
    boffset = j * b_B_size[0];
    if (mc >= 0) {
      memset(&b_C_data[coffset], 0, static_cast<uint32_T>(((mc + coffset) -
               coffset) + 1) * sizeof(real_T));
    }

    c = b_A_size[0];
    for (int32_T i = 0; i < c; i++) {
      real_T bkj;
      bkj = b_B_data[boffset + i];
      for (int32_T b_i = 0; b_i <= mc; b_i++) {
        int32_T tmp;
        tmp = coffset + b_i;
        b_C_data[tmp] += b_A_data[b_i * b_A_size[0] + i] * bkj;
      }
    }
  }
}

void proc_control::proc_control_binary_expand_op_3(real_T in1_data[], int32_T
  in1_size[2], const real_T in2_data[], const int32_T in2_size[2], const real_T
  in3_data[], const int32_T in3_size[2], const real_T in4_data[], const int32_T
  in4_size[2], const real_T in5[8], const real_T in6_data[], const int32_T
  in6_size[2], const real_T in7_data[], const int32_T in7_size[2])
{
  int32_T tmp_size[2];
  int32_T tmp_size_0[2];
  int32_T tmp_size_1[2];
  int32_T aux_0_1;
  int32_T aux_1_1;
  int32_T aux_2_1;
  int32_T i;
  int32_T i_0;
  int32_T loop_ub;
  int32_T loop_ub_0;
  int32_T scalarLB;
  int32_T stride_0_0;
  int32_T stride_0_1;
  int32_T stride_1_0;
  int32_T stride_1_1;
  int32_T stride_2_0;
  int32_T stride_2_1;
  int32_T tmp;
  int32_T tmp_0;
  int32_T tmp_1;
  int32_T vectorUB;
  proc_control_mtimes_a(in2_data, in2_size, in3_data, in3_size,
                        proc_control_B.tmp_data_m, tmp_size);
  proc_control_WtMult(in5, in4_data, in4_size, proc_control_B.tmp_data_j,
                      tmp_size_1);
  proc_control_mtimes_a(in4_data, in4_size, proc_control_B.tmp_data_j,
                        tmp_size_1, proc_control_B.tmp_data_n, tmp_size_0);
  proc_control_mtimes_a(in6_data, in6_size, in7_data, in7_size,
                        proc_control_B.tmp_data_pp, tmp_size_1);
  if (tmp_size_1[0] == 1) {
    if (tmp_size_0[0] == 1) {
      in1_size[0] = tmp_size[0];
    } else {
      in1_size[0] = tmp_size_0[0];
    }
  } else {
    in1_size[0] = tmp_size_1[0];
  }

  if (tmp_size_1[1] == 1) {
    if (tmp_size_0[1] == 1) {
      in1_size[1] = tmp_size[1];
    } else {
      in1_size[1] = tmp_size_0[1];
    }
  } else {
    in1_size[1] = tmp_size_1[1];
  }

  stride_0_0 = (tmp_size[0] != 1);
  stride_0_1 = (tmp_size[1] != 1);
  stride_1_0 = (tmp_size_0[0] != 1);
  stride_1_1 = (tmp_size_0[1] != 1);
  stride_2_0 = (tmp_size_1[0] != 1);
  stride_2_1 = (tmp_size_1[1] != 1);
  aux_0_1 = 0;
  aux_1_1 = 0;
  aux_2_1 = 0;
  if (tmp_size_1[1] == 1) {
    if (tmp_size_0[1] == 1) {
      loop_ub = tmp_size[1];
    } else {
      loop_ub = tmp_size_0[1];
    }
  } else {
    loop_ub = tmp_size_1[1];
  }

  for (i_0 = 0; i_0 < loop_ub; i_0++) {
    if (tmp_size_1[0] == 1) {
      if (tmp_size_0[0] == 1) {
        loop_ub_0 = tmp_size[0];
      } else {
        loop_ub_0 = tmp_size_0[0];
      }
    } else {
      loop_ub_0 = tmp_size_1[0];
    }

    scalarLB = (loop_ub_0 / 2) << 1;
    vectorUB = scalarLB - 2;
    for (i = 0; i <= vectorUB; i += 2) {
      tmp = tmp_size[0] * aux_0_1;
      tmp_0 = tmp_size_0[0] * aux_1_1;
      tmp_1 = tmp_size_1[0] * aux_2_1;
      _mm_storeu_pd(&in1_data[i + in1_size[0] * i_0], _mm_add_pd(_mm_add_pd
        (_mm_set_pd(proc_control_B.tmp_data_m[(i + 1) * stride_0_0 + tmp],
                    proc_control_B.tmp_data_m[i * stride_0_0 + tmp]), _mm_set_pd
         (proc_control_B.tmp_data_n[(i + 1) * stride_1_0 + tmp_0],
          proc_control_B.tmp_data_n[i * stride_1_0 + tmp_0])), _mm_set_pd
        (proc_control_B.tmp_data_pp[(i + 1) * stride_2_0 + tmp_1],
         proc_control_B.tmp_data_pp[i * stride_2_0 + tmp_1])));
    }

    for (i = scalarLB; i < loop_ub_0; i++) {
      in1_data[i + in1_size[0] * i_0] = (proc_control_B.tmp_data_m[i *
        stride_0_0 + tmp_size[0] * aux_0_1] + proc_control_B.tmp_data_n[i *
        stride_1_0 + tmp_size_0[0] * aux_1_1]) + proc_control_B.tmp_data_pp[i *
        stride_2_0 + tmp_size_1[0] * aux_2_1];
    }

    aux_2_1 += stride_2_1;
    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_af(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T b;
  b_C_size[0] = 8;
  b = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (int32_T j = 0; j < b; j++) {
    int32_T boffset;
    int32_T coffset;
    int32_T i;
    coffset = j << 3;
    boffset = j * b_B_size[0];
    memset(&b_C_data[coffset], 0, sizeof(real_T) << 3U);
    i = b_A_size[0];
    for (int32_T k = 0; k < i; k++) {
      real_T bkj;
      bkj = b_B_data[boffset + k];
      for (int32_T b_i = 0; b_i < 8; b_i++) {
        int32_T tmp;
        tmp = coffset + b_i;
        b_C_data[tmp] += b_A_data[b_i * b_A_size[0] + k] * bkj;
      }
    }
  }
}

void proc_control::proc_control_binary_expand_op_2(real_T in1_data[], int32_T
  in1_size[2], const real_T in2_data[], const int32_T in2_size[2], const real_T
  in3_data[], const int32_T in3_size[2], const real_T in4_data[], const int32_T
  in4_size[2], const real_T in5_data[], const int32_T in5_size[2])
{
  __m128d tmp;
  __m128d tmp_0;
  int32_T tmp_size[2];
  int32_T tmp_size_0[2];
  int32_T aux_0_1;
  int32_T aux_1_1;
  int32_T i;
  int32_T i_0;
  int32_T loop_ub;
  int32_T stride_0_1;
  int32_T stride_1_1;
  proc_control_mtimes_af(in2_data, in2_size, in3_data, in3_size,
    proc_control_B.tmp_data_h, tmp_size);
  proc_control_mtimes_af(in4_data, in4_size, in5_data, in5_size,
    proc_control_B.tmp_data_c0, tmp_size_0);
  in1_size[0] = 8;
  if (tmp_size_0[1] == 1) {
    in1_size[1] = tmp_size[1];
  } else {
    in1_size[1] = tmp_size_0[1];
  }

  stride_0_1 = (tmp_size[1] != 1);
  stride_1_1 = (tmp_size_0[1] != 1);
  aux_0_1 = 0;
  aux_1_1 = 0;
  if (tmp_size_0[1] == 1) {
    loop_ub = tmp_size[1];
  } else {
    loop_ub = tmp_size_0[1];
  }

  for (i_0 = 0; i_0 < loop_ub; i_0++) {
    for (i = 0; i <= 6; i += 2) {
      tmp = _mm_loadu_pd(&proc_control_B.tmp_data_h[(aux_0_1 << 3) + i]);
      tmp_0 = _mm_loadu_pd(&proc_control_B.tmp_data_c0[(aux_1_1 << 3) + i]);
      _mm_storeu_pd(&in1_data[i + (i_0 << 3)], _mm_add_pd(tmp, tmp_0));
    }

    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_contr_mpc_calculatehessian(const real_T b_Wy[13], const
  real_T b_Wu[8], const real_T b_Wdu[8], const real_T SuJm_data[], const int32_T
  SuJm_size[2], const real_T I2Jm_data[], const int32_T I2Jm_size[2], const
  real_T Jm_data[], const int32_T Jm_size[2], const real_T I1_data[], const
  int32_T I1_size[2], const real_T Su1_data[], const int32_T Su1_size[2], const
  real_T Sx_data[], const int32_T Sx_size[2], const real_T Hv_data[], const
  int32_T Hv_size[2], real_T b_H_data[], int32_T b_H_size[2], real_T Ku1_data[],
  int32_T Ku1_size[2], real_T Kut_data[], int32_T Kut_size[2], real_T Kx_data[],
  int32_T Kx_size[2], real_T Kv_data[], int32_T Kv_size[2], real_T Kr_data[],
  int32_T Kr_size[2])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  real_T tmp_2[2];
  real_T bkj;
  int32_T tmp_size[2];
  int32_T tmp_size_0[2];
  int32_T tmp_size_1[2];
  int32_T tmp_size_2[2];
  int32_T tmp_size_3[2];
  int32_T tmp_size_4[2];
  int32_T boffset;
  int32_T c;
  int32_T c_i;
  int32_T coffset;
  int32_T i;
  int32_T k;
  int32_T loop_ub;
  int32_T tmp_3;
  int16_T ixw;
  c = SuJm_size[0];
  Kr_size[0] = SuJm_size[0];
  tmp_3 = SuJm_size[1];
  Kr_size[1] = SuJm_size[1];
  loop_ub = SuJm_size[0] * SuJm_size[1];
  if (loop_ub - 1 >= 0) {
    memset(&Kr_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  ixw = 1;
  for (loop_ub = 0; loop_ub < c; loop_ub++) {
    bkj = b_Wy[ixw - 1];
    coffset = (tmp_3 / 2) << 1;
    boffset = coffset - 2;
    for (i = 0; i <= boffset; i += 2) {
      _mm_storeu_pd(&tmp_2[0], _mm_mul_pd(_mm_set1_pd(bkj), _mm_set_pd
        (SuJm_data[loop_ub + SuJm_size[0] * (i + 1)], SuJm_data[loop_ub +
         SuJm_size[0] * i])));
      Kr_data[loop_ub + Kr_size[0] * i] = tmp_2[0];
      Kr_data[loop_ub + Kr_size[0] * (i + 1)] = tmp_2[1];
    }

    for (i = coffset; i < tmp_3; i++) {
      Kr_data[loop_ub + Kr_size[0] * i] = SuJm_data[SuJm_size[0] * i + loop_ub] *
        bkj;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_WtMult(b_Wu, I2Jm_data, I2Jm_size, Kut_data, Kut_size);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, tmp_size);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_p, tmp_size_0);
  if (tmp_size[0] == 1) {
    proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                        tmp_size);
    proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l, tmp_size,
                          proc_control_B.tmp_data_b, tmp_size_4);
    i = tmp_size_4[0];
  } else {
    i = tmp_size[0];
  }

  if (tmp_size_0[1] == 1) {
    proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                        tmp_size);
    proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l, tmp_size,
                          proc_control_B.tmp_data_b, tmp_size_0);
    c = tmp_size_0[1];
  } else {
    c = tmp_size_0[1];
  }

  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, tmp_size);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                      tmp_size_0);
  proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l, tmp_size_0,
                        proc_control_B.tmp_data_b, tmp_size_4);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, tmp_size_0);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                      tmp_size_1);
  proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l, tmp_size_1,
                        proc_control_B.tmp_data_b, tmp_size_2);
  proc_control_mtimes_a(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                        proc_control_B.tmp_data_b, tmp_size_1);
  proc_control_mtimes_a(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                        proc_control_B.tmp_data_b, tmp_size_3);
  if ((tmp_size[0] == tmp_size_4[0]) && (tmp_size_0[1] == tmp_size_2[1]) && (i ==
       tmp_size_1[0]) && (c == tmp_size_3[1])) {
    proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                          proc_control_B.tmp_data_b, tmp_size);
    proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                        tmp_size_4);
    proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l,
                          tmp_size_4, proc_control_B.tmp_data_p, tmp_size_0);
    proc_control_mtimes_a(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                          proc_control_B.tmp_data_c, tmp_size_0);
    b_H_size[0] = tmp_size[0];
    b_H_size[1] = tmp_size[1];
    loop_ub = tmp_size[0] * tmp_size[1];
    coffset = (loop_ub / 2) << 1;
    boffset = coffset - 2;
    for (i = 0; i <= boffset; i += 2) {
      tmp = _mm_loadu_pd(&proc_control_B.tmp_data_b[i]);
      tmp_0 = _mm_loadu_pd(&proc_control_B.tmp_data_p[i]);
      tmp_1 = _mm_loadu_pd(&proc_control_B.tmp_data_c[i]);
      _mm_storeu_pd(&b_H_data[i], _mm_add_pd(_mm_add_pd(tmp, tmp_0), tmp_1));
    }

    for (i = coffset; i < loop_ub; i++) {
      b_H_data[i] = (proc_control_B.tmp_data_b[i] + proc_control_B.tmp_data_p[i])
        + proc_control_B.tmp_data_c[i];
    }
  } else {
    proc_control_binary_expand_op_3(b_H_data, b_H_size, SuJm_data, SuJm_size,
      Kr_data, Kr_size, Jm_data, Jm_size, b_Wdu, I2Jm_data, I2Jm_size, Kut_data,
      Kut_size);
  }

  proc_control_mtimes_af(Su1_data, Su1_size, Kr_data, Kr_size,
    proc_control_B.tmp_data_ja, tmp_size);
  proc_control_mtimes_af(I1_data, I1_size, Kut_data, Kut_size,
    proc_control_B.tmp_data_ja, tmp_size_0);
  if (tmp_size[1] == tmp_size_0[1]) {
    proc_control_mtimes_af(Su1_data, Su1_size, Kr_data, Kr_size,
      proc_control_B.tmp_data_ja, tmp_size);
    proc_control_mtimes_af(I1_data, I1_size, Kut_data, Kut_size,
      proc_control_B.tmp_data_m3, tmp_size_0);
    Ku1_size[0] = 8;
    Ku1_size[1] = tmp_size[1];
    loop_ub = tmp_size[1] << 3;
    coffset = (loop_ub / 2) << 1;
    boffset = coffset - 2;
    for (i = 0; i <= boffset; i += 2) {
      tmp = _mm_loadu_pd(&proc_control_B.tmp_data_ja[i]);
      tmp_0 = _mm_loadu_pd(&proc_control_B.tmp_data_m3[i]);
      _mm_storeu_pd(&Ku1_data[i], _mm_add_pd(tmp, tmp_0));
    }

    for (i = coffset; i < loop_ub; i++) {
      Ku1_data[i] = proc_control_B.tmp_data_ja[i] + proc_control_B.tmp_data_m3[i];
    }
  } else {
    proc_control_binary_expand_op_2(Ku1_data, Ku1_size, Su1_data, Su1_size,
      Kr_data, Kr_size, I1_data, I1_size, Kut_data, Kut_size);
  }

  tmp_3 = Kut_size[0] * Kut_size[1];
  coffset = (tmp_3 / 2) << 1;
  boffset = coffset - 2;
  for (i = 0; i <= boffset; i += 2) {
    tmp = _mm_loadu_pd(&Kut_data[i]);
    _mm_storeu_pd(&Kut_data[i], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
  }

  for (i = coffset; i < tmp_3; i++) {
    Kut_data[i] = -Kut_data[i];
  }

  Kx_size[0] = 21;
  c = SuJm_size[1];
  Kx_size[1] = SuJm_size[1];
  for (loop_ub = 0; loop_ub < c; loop_ub++) {
    coffset = loop_ub * 21;
    boffset = loop_ub * Kr_size[0];
    memset(&Kx_data[coffset], 0, 21U * sizeof(real_T));
    tmp_3 = Sx_size[0];
    for (k = 0; k < tmp_3; k++) {
      bkj = Kr_data[boffset + k];
      for (c_i = 0; c_i < 21; c_i++) {
        i = coffset + c_i;
        Kx_data[i] += Sx_data[c_i * Sx_size[0] + k] * bkj;
      }
    }
  }

  proc_control_mtimes_a(Hv_data, Hv_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, tmp_size);
  Kv_size[0] = tmp_size[0];
  Kv_size[1] = tmp_size[1];
  loop_ub = tmp_size[0] * tmp_size[1];
  if (loop_ub - 1 >= 0) {
    memcpy(&Kv_data[0], &proc_control_B.tmp_data_b[0], static_cast<uint32_T>
           (loop_ub) * sizeof(real_T));
  }

  tmp_3 = SuJm_size[0] * SuJm_size[1];
  coffset = (tmp_3 / 2) << 1;
  boffset = coffset - 2;
  for (i = 0; i <= boffset; i += 2) {
    tmp = _mm_loadu_pd(&Kr_data[i]);
    _mm_storeu_pd(&Kr_data[i], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
  }

  for (i = coffset; i < tmp_3; i++) {
    Kr_data[i] = -Kr_data[i];
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf(int32_T n, real_T b_A_data[], int32_T
  lda)
{
  int32_T info;
  int32_T j;
  boolean_T exitg1;
  info = 0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j <= static_cast<uint8_T>(n) - 1)) {
    real_T c;
    real_T ssq;
    int32_T b_k;
    int32_T idxAjj;
    idxAjj = j * lda + j;
    ssq = 0.0;
    if (j >= 1) {
      for (b_k = 0; b_k < j; b_k++) {
        c = b_A_data[b_k * lda + j];
        ssq += c * c;
      }
    }

    ssq = b_A_data[idxAjj] - ssq;
    if (ssq > 0.0) {
      ssq = sqrt(ssq);
      b_A_data[idxAjj] = ssq;
      if (j + 1 < n) {
        int32_T b_iy;
        int32_T ix;
        b_iy = (n - j) - 1;
        if ((b_iy != 0) && (j != 0)) {
          int32_T b;
          ix = j;
          b = ((j - 1) * lda + j) + 2;
          for (b_k = j + 2; lda < 0 ? b_k >= b : b_k <= b; b_k += lda) {
            int32_T d;
            c = -b_A_data[ix];
            d = (b_k + b_iy) - 1;
            for (int32_T b_ix = b_k; b_ix <= d; b_ix++) {
              int32_T tmp_0;
              tmp_0 = ((idxAjj + b_ix) - b_k) + 1;
              b_A_data[tmp_0] += b_A_data[b_ix - 1] * c;
            }

            ix += lda;
          }
        }

        ssq = 1.0 / ssq;
        b_k = idxAjj + b_iy;
        b_iy = ((((b_k - idxAjj) / 2) << 1) + idxAjj) + 2;
        ix = b_iy - 2;
        for (int32_T b_ix = idxAjj + 2; b_ix <= ix; b_ix += 2) {
          __m128d tmp;
          tmp = _mm_loadu_pd(&b_A_data[b_ix - 1]);
          _mm_storeu_pd(&b_A_data[b_ix - 1], _mm_mul_pd(tmp, _mm_set1_pd(ssq)));
        }

        for (int32_T b_ix = b_iy; b_ix <= b_k + 1; b_ix++) {
          b_A_data[b_ix - 1] *= ssq;
        }
      }

      j++;
    } else {
      b_A_data[idxAjj] = ssq;
      info = j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_diag(const real_T v_data[], const int32_T
  v_size[2], real_T d_data[], int32_T d_size[1])
{
  if ((v_size[0] == 1) && (v_size[1] == 1)) {
    d_size[0] = 1;
    d_data[0] = v_data[0];
  } else {
    int32_T dlen;
    if (v_size[1] > 0) {
      if (v_size[0] <= v_size[1]) {
        dlen = v_size[0];
      } else {
        dlen = v_size[1];
      }
    } else {
      dlen = 0;
    }

    d_size[0] = dlen;
    for (int32_T k = 0; k < dlen; k++) {
      d_data[k] = v_data[v_size[0] * k + k];
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
real_T proc_control::proc_control_minimum(const real_T x_data[], const int32_T
  x_size[1])
{
  real_T ex;
  int32_T last;
  last = x_size[0];
  if (static_cast<uint8_T>(x_size[0] - 1) + 1 <= 2) {
    if (static_cast<uint8_T>(x_size[0] - 1) + 1 == 1) {
      ex = x_data[0];
    } else {
      ex = x_data[x_size[0] - 1];
      if (!(x_data[0] > ex)) {
        if (rtIsNaN(x_data[0])) {
          if (rtIsNaN(ex)) {
            ex = x_data[0];
          }
        } else {
          ex = x_data[0];
        }
      }
    }
  } else {
    int32_T idx;
    int32_T k;
    if (!rtIsNaN(x_data[0])) {
      idx = 1;
    } else {
      boolean_T exitg1;
      idx = 0;
      k = 2;
      exitg1 = false;
      while ((!exitg1) && (k <= last)) {
        if (!rtIsNaN(x_data[k - 1])) {
          idx = k;
          exitg1 = true;
        } else {
          k++;
        }
      }
    }

    if (idx == 0) {
      ex = x_data[0];
    } else {
      ex = x_data[idx - 1];
      for (k = idx + 1; k <= last; k++) {
        real_T x;
        x = x_data[k - 1];
        if (ex > x) {
          ex = x;
        }
      }
    }
  }

  return ex;
}

void proc_control::proc_control_binary_expand_op_4(real_T in1_data[], int32_T
  in1_size[2], real_T in2, const int8_T in3_data[], const int32_T in3_size[2])
{
  int32_T aux_0_1;
  int32_T aux_1_1;
  int32_T in1_size_idx_0;
  int32_T in1_size_idx_1;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_0_1;
  int32_T stride_1_0;
  int32_T stride_1_1;
  if (in3_size[0] == 1) {
    in1_size_idx_0 = in1_size[0];
  } else {
    in1_size_idx_0 = in3_size[0];
  }

  if (in3_size[1] == 1) {
    in1_size_idx_1 = in1_size[1];
  } else {
    in1_size_idx_1 = in3_size[1];
  }

  stride_0_0 = (in1_size[0] != 1);
  stride_0_1 = (in1_size[1] != 1);
  stride_1_0 = (in3_size[0] != 1);
  stride_1_1 = (in3_size[1] != 1);
  aux_0_1 = 0;
  aux_1_1 = 0;
  if (in3_size[1] == 1) {
    loop_ub = in1_size[1];
  } else {
    loop_ub = in3_size[1];
  }

  for (int32_T i_0 = 0; i_0 < loop_ub; i_0++) {
    int32_T loop_ub_0;
    if (in3_size[0] == 1) {
      loop_ub_0 = in1_size[0];
    } else {
      loop_ub_0 = in3_size[0];
    }

    for (int32_T i = 0; i < loop_ub_0; i++) {
      proc_control_B.in1_data[i + in1_size_idx_0 * i_0] = static_cast<real_T>
        (in3_data[i * stride_1_0 + in3_size[0] * aux_1_1]) * in2 + in1_data[i *
        stride_0_0 + in1_size[0] * aux_0_1];
    }

    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
  }

  in1_size[0] = in1_size_idx_0;
  in1_size[1] = in1_size_idx_1;
  for (int32_T i_0 = 0; i_0 < in1_size_idx_1; i_0++) {
    for (int32_T i = 0; i < in1_size_idx_0; i++) {
      in1_data[i + in1_size[0] * i_0] = proc_control_B.in1_data[in1_size_idx_0 *
        i_0 + i];
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_checkhessian(real_T b_H_data[], int32_T
  b_H_size[2], real_T L_data[], int32_T L_size[2], real_T *BadH)
{
  real_T tmp_data[81];
  real_T absx;
  real_T normH;
  int32_T b_size[2];
  int32_T tmp_size[1];
  int32_T Tries;
  int32_T b_degrees_tmp;
  int32_T b_k;
  int32_T emlN_tmp;
  int32_T loop_ub_tmp;
  boolean_T MATRIX_INPUT_AND_P_IS_INF;
  boolean_T VECTOR_INPUT_AND_P_IS_INF;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  b_degrees_tmp = b_H_size[0];
  *BadH = 0.0;
  emlN_tmp = b_H_size[1];
  L_size[0] = b_H_size[0];
  L_size[1] = b_H_size[1];
  loop_ub_tmp = b_H_size[0] * b_H_size[1];
  if (loop_ub_tmp - 1 >= 0) {
    memcpy(&L_data[0], &b_H_data[0], static_cast<uint32_T>(loop_ub_tmp) * sizeof
           (real_T));
  }

  Tries = proc_control_xpotrf(b_H_size[1], L_data, b_H_size[1]);
  guard1 = false;
  if (Tries == 0) {
    proc_control_diag(L_data, L_size, tmp_data, tmp_size);
    if (proc_control_minimum(tmp_data, tmp_size) > 1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    VECTOR_INPUT_AND_P_IS_INF = false;
    MATRIX_INPUT_AND_P_IS_INF = false;
    if ((b_H_size[0] == 1) || (b_H_size[1] == 1)) {
      VECTOR_INPUT_AND_P_IS_INF = true;
    } else {
      MATRIX_INPUT_AND_P_IS_INF = true;
    }

    if ((b_H_size[0] == 0) || (b_H_size[1] == 0)) {
      normH = 0.0;
    } else if (MATRIX_INPUT_AND_P_IS_INF) {
      normH = 0.0;
      Tries = 0;
      exitg2 = false;
      while ((!exitg2) && (Tries <= b_H_size[0] - 1)) {
        absx = 0.0;
        for (b_k = 0; b_k < emlN_tmp; b_k++) {
          absx += fabs(b_H_data[b_H_size[0] * b_k + Tries]);
        }

        if (rtIsNaN(absx)) {
          normH = (rtNaN);
          exitg2 = true;
        } else {
          if (absx > normH) {
            normH = absx;
          }

          Tries++;
        }
      }
    } else if (VECTOR_INPUT_AND_P_IS_INF) {
      normH = 0.0;
      for (b_k = 0; b_k < loop_ub_tmp; b_k++) {
        absx = fabs(b_H_data[b_k]);
        if (rtIsNaN(absx)) {
          normH = (rtNaN);
        } else if (absx > normH) {
          normH = absx;
        }
      }
    } else {
      normH = (rtNaN);
    }

    if (normH >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (Tries <= 4)) {
        normH = rt_powd_snf(10.0, static_cast<real_T>(Tries)) *
          1.4901161193847656E-7;
        b_size[0] = b_degrees_tmp;
        b_size[1] = b_degrees_tmp;
        loop_ub_tmp = b_degrees_tmp * b_degrees_tmp;
        if (loop_ub_tmp - 1 >= 0) {
          memset(&proc_control_B.b_data[0], 0, static_cast<uint32_T>(loop_ub_tmp)
                 * sizeof(int8_T));
        }

        if (b_degrees_tmp > 0) {
          for (b_k = 0; b_k < b_degrees_tmp; b_k++) {
            proc_control_B.b_data[b_k + b_degrees_tmp * b_k] = 1;
          }
        }

        if ((b_H_size[0] == b_degrees_tmp) && (b_H_size[1] == b_degrees_tmp)) {
          loop_ub_tmp = b_H_size[0] * b_H_size[1];
          for (b_k = 0; b_k < loop_ub_tmp; b_k++) {
            b_H_data[b_k] += static_cast<real_T>(proc_control_B.b_data[b_k]) *
              normH;
          }
        } else {
          proc_control_binary_expand_op_4(b_H_data, b_H_size, normH,
            proc_control_B.b_data, b_size);
        }

        L_size[0] = b_H_size[0];
        L_size[1] = b_H_size[1];
        loop_ub_tmp = b_H_size[0] * b_H_size[1];
        if (loop_ub_tmp - 1 >= 0) {
          memcpy(&L_data[0], &b_H_data[0], static_cast<uint32_T>(loop_ub_tmp) *
                 sizeof(real_T));
        }

        b_k = proc_control_xpotrf(emlN_tmp, L_data, emlN_tmp);
        guard2 = false;
        if (b_k == 0) {
          proc_control_diag(L_data, L_size, tmp_data, tmp_size);
          if (proc_control_minimum(tmp_data, tmp_size) > 1.4901161193847656E-7)
          {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          Tries++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_eye_f3(int32_T varargin_1, real_T b_I_data[],
  int32_T b_I_size[2])
{
  int32_T loop_ub;
  b_I_size[0] = varargin_1;
  b_I_size[1] = varargin_1;
  loop_ub = varargin_1 * varargin_1;
  if (loop_ub - 1 >= 0) {
    memset(&b_I_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  if (varargin_1 > 0) {
    loop_ub = static_cast<uint8_T>(varargin_1);
    for (int32_T k = 0; k < loop_ub; k++) {
      b_I_data[k + varargin_1 * k] = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_trisolve(const real_T b_A_data[], const int32_T
  b_A_size[2], real_T b_B_data[], const int32_T b_B_size[2])
{
  int32_T y;
  if (b_A_size[0] <= b_A_size[1]) {
    y = b_A_size[0];
  } else {
    y = b_A_size[1];
  }

  if (y > b_B_size[0]) {
    y = b_B_size[0];
  }

  if ((b_B_size[1] != 0) && ((b_B_size[0] != 0) && (b_B_size[1] != 0))) {
    int32_T b;
    b = b_B_size[1];
    for (int32_T j = 0; j < b; j++) {
      int32_T jBcol;
      jBcol = b_B_size[0] * j;
      for (int32_T b_k = 0; b_k < y; b_k++) {
        real_T tmp;
        int32_T kAcol;
        int32_T tmp_0;
        kAcol = b_A_size[0] * b_k;
        tmp_0 = b_k + jBcol;
        tmp = b_B_data[tmp_0];
        if (tmp != 0.0) {
          b_B_data[tmp_0] = tmp / b_A_data[b_k + kAcol];
          for (int32_T i = b_k + 2; i <= y; i++) {
            int32_T tmp_1;
            tmp_1 = (i + jBcol) - 1;
            b_B_data[tmp_1] -= b_A_data[(i + kAcol) - 1] * b_B_data[tmp_0];
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_linsolve(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T c;
  int32_T i;
  int32_T j;
  int32_T minszA;
  int32_T nA_tmp;
  nA_tmp = b_A_size[1];
  if (b_A_size[0] <= b_A_size[1]) {
    minszA = b_A_size[0];
  } else {
    minszA = b_A_size[1];
  }

  minszA--;
  b_C_size[0] = b_A_size[1];
  c = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (j = 0; j < c; j++) {
    for (i = 0; i <= minszA; i++) {
      b_C_data[i + b_C_size[0] * j] = b_B_data[b_B_size[0] * j + i];
    }

    for (i = minszA + 2; i <= nA_tmp; i++) {
      b_C_data[(i + b_C_size[0] * j) - 1] = 0.0;
    }
  }

  proc_control_trisolve(b_A_data, b_A_size, b_C_data, b_C_size);
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afa(const coder::array<real_T, 2U> &b_A,
  const real_T b_B[21], coder::array<real_T, 1U> &b_C)
{
  int32_T mc;
  mc = b_A.size(0) - 1;
  b_C.set_size(b_A.size(0));
  for (int32_T i = 0; i <= mc; i++) {
    b_C[i] = 0.0;
  }

  for (int32_T i = 0; i < 21; i++) {
    int32_T aoffset;
    int32_T scalarLB;
    int32_T vectorUB;
    aoffset = i * b_A.size(0);
    scalarLB = ((mc + 1) / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&b_C[b_i]);
      _mm_storeu_pd(&b_C[b_i], _mm_add_pd(_mm_mul_pd(_mm_loadu_pd(&(*(coder::
        array<real_T, 2U> *)&b_A)[aoffset + b_i]), _mm_set1_pd(b_B[i])), tmp));
    }

    for (int32_T b_i = scalarLB; b_i <= mc; b_i++) {
      b_C[b_i] = b_A[aoffset + b_i] * b_B[i] + b_C[b_i];
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afai(const coder::array<real_T, 2U> &b_A,
  const real_T b_B[8], coder::array<real_T, 1U> &b_C)
{
  int32_T b_m_tmp;
  b_m_tmp = b_A.size(0);
  b_C.set_size(b_A.size(0));
  for (int32_T i = 0; i < b_m_tmp; i++) {
    real_T s;
    s = 0.0;
    for (int32_T k = 0; k < 8; k++) {
      s += b_A[k * b_A.size(0) + i] * b_B[k];
    }

    b_C[i] = s;
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afai0(const coder::array<real_T, 2U> &b_A,
  const coder::array<real_T, 1U> &b_B, coder::array<real_T, 1U> &b_C)
{
  int32_T i;
  int32_T mc;
  mc = b_A.size(0) - 1;
  b_C.set_size(b_A.size(0));
  for (i = 0; i <= mc; i++) {
    b_C[i] = 0.0;
  }

  i = b_A.size(1);
  for (int32_T k = 0; k < i; k++) {
    int32_T aoffset;
    int32_T scalarLB;
    int32_T vectorUB;
    aoffset = k * b_A.size(0);
    scalarLB = ((mc + 1) / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&b_C[b_i]);
      _mm_storeu_pd(&b_C[b_i], _mm_add_pd(_mm_mul_pd(_mm_loadu_pd(&(*(coder::
        array<real_T, 2U> *)&b_A)[aoffset + b_i]), _mm_set1_pd(b_B[k])), tmp));
    }

    for (int32_T b_i = scalarLB; b_i <= mc; b_i++) {
      b_C[b_i] = b_A[aoffset + b_i] * b_B[k] + b_C[b_i];
    }
  }
}

void proc_control::proc_control_binary_expand_op_7(coder::array<real_T, 1U> &in1,
  const coder::array<real_T, 1U> &in2, const coder::array<real_T, 2U> &in3,
  const real_T in4[21], const coder::array<real_T, 2U> &in5, const real_T in6[8],
  const coder::array<real_T, 2U> &in7, const coder::array<real_T, 1U> &in8)
{
  coder::array<real_T, 1U> tmp;
  coder::array<real_T, 1U> tmp_0;
  coder::array<real_T, 1U> tmp_1;
  int32_T i;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_1_0;
  int32_T stride_2_0;
  int32_T stride_3_0;
  proc_control_mtimes_afa(in3, in4, tmp);
  proc_control_mtimes_afai(in5, in6, tmp_0);
  proc_control_mtimes_afai0(in7, in8, tmp_1);
  if (tmp_1.size(0) == 1) {
    if (tmp_0.size(0) == 1) {
      if (tmp.size(0) == 1) {
        in1.set_size(in2.size(0));
      } else {
        in1.set_size(tmp.size(0));
      }
    } else {
      in1.set_size(tmp_0.size(0));
    }
  } else {
    in1.set_size(tmp_1.size(0));
  }

  stride_0_0 = (in2.size(0) != 1);
  stride_1_0 = (tmp.size(0) != 1);
  stride_2_0 = (tmp_0.size(0) != 1);
  stride_3_0 = (tmp_1.size(0) != 1);
  if (tmp_1.size(0) == 1) {
    if (tmp_0.size(0) == 1) {
      if (tmp.size(0) == 1) {
        loop_ub = in2.size(0);
      } else {
        loop_ub = tmp.size(0);
      }
    } else {
      loop_ub = tmp_0.size(0);
    }
  } else {
    loop_ub = tmp_1.size(0);
  }

  for (i = 0; i < loop_ub; i++) {
    in1[i] = -(((in2[i * stride_0_0] + tmp[i * stride_1_0]) + tmp_0[i *
                stride_2_0]) + tmp_1[i * stride_3_0]);
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
real_T proc_control::proc_control_norm(const real_T x_data[], const int32_T
  x_size[1])
{
  real_T y;
  if (x_size[0] == 0) {
    y = 0.0;
  } else {
    y = 0.0;
    if (x_size[0] == 1) {
      y = fabs(x_data[0]);
    } else {
      real_T scale;
      int32_T b;
      scale = 3.3121686421112381E-170;
      b = x_size[0];
      for (int32_T k = 0; k < b; k++) {
        real_T absxk;
        absxk = fabs(x_data[k]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  return y;
}

void proc_control::proc_control_binary_expand_op_5(real_T in1_data[], int32_T
  in1_size[2], const coder::array<real_T, 2U> &in2, int32_T in3, const real_T
  in4_data[], const int32_T in4_size[1])
{
  int32_T loop_ub;
  int32_T stride_0_1;
  int32_T stride_1_1;
  in1_size[0] = 1;
  if (in4_size[0] == 1) {
    in1_size[1] = in2.size(1);
  } else {
    in1_size[1] = in4_size[0];
  }

  stride_0_1 = (in2.size(1) != 1);
  stride_1_1 = (in4_size[0] != 1);
  if (in4_size[0] == 1) {
    loop_ub = in2.size(1);
  } else {
    loop_ub = in4_size[0];
  }

  for (int32_T i = 0; i < loop_ub; i++) {
    in1_data[i] = in2[i * stride_0_1 * in2.size(0) + in3] * in4_data[i *
      stride_1_1];
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afai05(const real_T b_A_data[], const
  int32_T b_A_size[2], const real_T b_B_data[], real_T b_C_data[], int32_T
  b_C_size[1])
{
  int32_T b;
  int32_T b_0;
  b_0 = b_A_size[0];
  b_C_size[0] = b_A_size[0];
  if (b_0 - 1 >= 0) {
    memset(&b_C_data[0], 0, static_cast<uint32_T>(b_0) * sizeof(real_T));
  }

  b = b_A_size[1];
  for (int32_T i = 0; i < b; i++) {
    int32_T aoffset;
    int32_T scalarLB;
    int32_T vectorUB;
    aoffset = i * b_0;
    scalarLB = (b_0 / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&b_C_data[b_i]);
      _mm_storeu_pd(&b_C_data[b_i], _mm_add_pd(_mm_mul_pd(_mm_loadu_pd
        (&b_A_data[aoffset + b_i]), _mm_set1_pd(b_B_data[i])), tmp));
    }

    for (int32_T b_i = scalarLB; b_i < b_0; b_i++) {
      b_C_data[b_i] += b_A_data[aoffset + b_i] * b_B_data[i];
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
real_T proc_control::proc_control_xnrm2(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[ix0 - 1]);
    } else {
      proc_control_B.scale_b = 3.3121686421112381E-170;
      proc_control_B.kend_g = (ix0 + n) - 1;
      for (proc_control_B.k_p = ix0; proc_control_B.k_p <= proc_control_B.kend_g;
           proc_control_B.k_p++) {
        proc_control_B.absxk_d = fabs(x_data[proc_control_B.k_p - 1]);
        if (proc_control_B.absxk_d > proc_control_B.scale_b) {
          proc_control_B.t_jd = proc_control_B.scale_b / proc_control_B.absxk_d;
          y = y * proc_control_B.t_jd * proc_control_B.t_jd + 1.0;
          proc_control_B.scale_b = proc_control_B.absxk_d;
        } else {
          proc_control_B.t_jd = proc_control_B.absxk_d / proc_control_B.scale_b;
          y += proc_control_B.t_jd * proc_control_B.t_jd;
        }
      }

      y = proc_control_B.scale_b * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_xgemv(int32_T b_m, int32_T n, const real_T
  b_A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iy;
    if (n - 1 >= 0) {
      memset(&y_data[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));
    }

    iy = 0;
    b = (n - 1) * lda + ia0;
    for (int32_T b_iy = ia0; lda < 0 ? b_iy >= b : b_iy <= b; b_iy += lda) {
      real_T c;
      int32_T d;
      c = 0.0;
      d = (b_iy + b_m) - 1;
      for (int32_T iyend = b_iy; iyend <= d; iyend++) {
        c += x_data[((ix0 + iyend) - b_iy) - 1] * b_A_data[iyend - 1];
      }

      y_data[iy] += c;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_xgerc(int32_T b_m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T b_A_data[], int32_T ia0, int32_T
  lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j = 0; j < n; j++) {
      real_T temp;
      temp = y_data[j];
      if (temp != 0.0) {
        int32_T b;
        temp *= alpha1;
        b = b_m + jA;
        for (int32_T ijA = jA; ijA < b; ijA++) {
          b_A_data[ijA - 1] += b_A_data[((ix0 + ijA) - jA) - 1] * temp;
        }
      }

      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_xgeqrf(real_T b_A_data[], const int32_T
  b_A_size[2], real_T tau_data[], int32_T tau_size[1])
{
  __m128d tmp;
  int32_T exitg1;
  boolean_T exitg2;
  proc_control_B.b_m_tmp = b_A_size[0];
  proc_control_B.n_tmp = b_A_size[1];
  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minmana = b_A_size[0];
  } else {
    proc_control_B.minmana = b_A_size[1];
  }

  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minmn = b_A_size[0];
  } else {
    proc_control_B.minmn = b_A_size[1];
  }

  tau_size[0] = proc_control_B.minmana;
  if (proc_control_B.minmana - 1 >= 0) {
    memset(&tau_data[0], 0, static_cast<uint32_T>(proc_control_B.minmana) *
           sizeof(real_T));
  }

  if ((b_A_size[0] != 0) && (b_A_size[1] != 0) && (proc_control_B.minmn >= 1)) {
    tau_size[0] = proc_control_B.minmana;
    if (proc_control_B.minmana - 1 >= 0) {
      memset(&tau_data[0], 0, static_cast<uint32_T>(proc_control_B.minmana) *
             sizeof(real_T));
    }

    if (proc_control_B.n_tmp - 1 >= 0) {
      memset(&proc_control_B.work_data_bp[0], 0, static_cast<uint32_T>
             (proc_control_B.n_tmp) * sizeof(real_T));
    }

    proc_control_B.b_e = proc_control_B.minmn;
    for (proc_control_B.minmn = 0; proc_control_B.minmn < proc_control_B.b_e;
         proc_control_B.minmn++) {
      proc_control_B.ii_d = proc_control_B.minmn * proc_control_B.b_m_tmp +
        proc_control_B.minmn;
      proc_control_B.mmi = proc_control_B.b_m_tmp - proc_control_B.minmn;
      if (proc_control_B.minmn + 1 < proc_control_B.b_m_tmp) {
        proc_control_B.atmp = b_A_data[proc_control_B.ii_d];
        proc_control_B.ix0 = proc_control_B.ii_d + 2;
        tau_data[proc_control_B.minmn] = 0.0;
        if (proc_control_B.mmi > 0) {
          proc_control_B.xnorm = proc_control_xnrm2(proc_control_B.mmi - 1,
            b_A_data, proc_control_B.ii_d + 2);
          if (proc_control_B.xnorm != 0.0) {
            proc_control_B.xnorm = rt_hypotd_snf(b_A_data[proc_control_B.ii_d],
              proc_control_B.xnorm);
            if (b_A_data[proc_control_B.ii_d] >= 0.0) {
              proc_control_B.xnorm = -proc_control_B.xnorm;
            }

            if (fabs(proc_control_B.xnorm) < 1.0020841800044864E-292) {
              proc_control_B.minmana = 0;
              proc_control_B.coltop_l = proc_control_B.ii_d + proc_control_B.mmi;
              do {
                proc_control_B.minmana++;
                proc_control_B.vectorUB_e = (((((proc_control_B.coltop_l -
                  proc_control_B.ii_d) - 1) / 2) << 1) + proc_control_B.ii_d) +
                  2;
                proc_control_B.vectorUB_tmp_h = proc_control_B.vectorUB_e - 2;
                for (proc_control_B.mmip1 = proc_control_B.ix0;
                     proc_control_B.mmip1 <= proc_control_B.vectorUB_tmp_h;
                     proc_control_B.mmip1 += 2) {
                  tmp = _mm_loadu_pd(&b_A_data[proc_control_B.mmip1 - 1]);
                  _mm_storeu_pd(&b_A_data[proc_control_B.mmip1 - 1], _mm_mul_pd
                                (tmp, _mm_set1_pd(9.9792015476736E+291)));
                }

                for (proc_control_B.mmip1 = proc_control_B.vectorUB_e;
                     proc_control_B.mmip1 <= proc_control_B.coltop_l;
                     proc_control_B.mmip1++) {
                  b_A_data[proc_control_B.mmip1 - 1] *= 9.9792015476736E+291;
                }

                proc_control_B.xnorm *= 9.9792015476736E+291;
                proc_control_B.atmp *= 9.9792015476736E+291;
              } while ((fabs(proc_control_B.xnorm) < 1.0020841800044864E-292) &&
                       (proc_control_B.minmana < 20));

              proc_control_B.xnorm = rt_hypotd_snf(proc_control_B.atmp,
                proc_control_xnrm2(proc_control_B.mmi - 1, b_A_data,
                                   proc_control_B.ii_d + 2));
              if (proc_control_B.atmp >= 0.0) {
                proc_control_B.xnorm = -proc_control_B.xnorm;
              }

              tau_data[proc_control_B.minmn] = (proc_control_B.xnorm -
                proc_control_B.atmp) / proc_control_B.xnorm;
              proc_control_B.atmp = 1.0 / (proc_control_B.atmp -
                proc_control_B.xnorm);
              for (proc_control_B.mmip1 = proc_control_B.ix0;
                   proc_control_B.mmip1 <= proc_control_B.vectorUB_tmp_h;
                   proc_control_B.mmip1 += 2) {
                tmp = _mm_loadu_pd(&b_A_data[proc_control_B.mmip1 - 1]);
                _mm_storeu_pd(&b_A_data[proc_control_B.mmip1 - 1], _mm_mul_pd
                              (tmp, _mm_set1_pd(proc_control_B.atmp)));
              }

              for (proc_control_B.mmip1 = proc_control_B.vectorUB_e;
                   proc_control_B.mmip1 <= proc_control_B.coltop_l;
                   proc_control_B.mmip1++) {
                b_A_data[proc_control_B.mmip1 - 1] *= proc_control_B.atmp;
              }

              for (proc_control_B.ix0 = 0; proc_control_B.ix0 <
                   proc_control_B.minmana; proc_control_B.ix0++) {
                proc_control_B.xnorm *= 1.0020841800044864E-292;
              }

              proc_control_B.atmp = proc_control_B.xnorm;
            } else {
              tau_data[proc_control_B.minmn] = (proc_control_B.xnorm -
                b_A_data[proc_control_B.ii_d]) / proc_control_B.xnorm;
              proc_control_B.atmp = 1.0 / (b_A_data[proc_control_B.ii_d] -
                proc_control_B.xnorm);
              proc_control_B.mmip1 = proc_control_B.ii_d + proc_control_B.mmi;
              proc_control_B.coltop_l = (((((proc_control_B.mmip1 -
                proc_control_B.ii_d) - 1) / 2) << 1) + proc_control_B.ii_d) + 2;
              proc_control_B.vectorUB_e = proc_control_B.coltop_l - 2;
              for (proc_control_B.minmana = proc_control_B.ix0;
                   proc_control_B.minmana <= proc_control_B.vectorUB_e;
                   proc_control_B.minmana += 2) {
                tmp = _mm_loadu_pd(&b_A_data[proc_control_B.minmana - 1]);
                _mm_storeu_pd(&b_A_data[proc_control_B.minmana - 1], _mm_mul_pd
                              (tmp, _mm_set1_pd(proc_control_B.atmp)));
              }

              for (proc_control_B.minmana = proc_control_B.coltop_l;
                   proc_control_B.minmana <= proc_control_B.mmip1;
                   proc_control_B.minmana++) {
                b_A_data[proc_control_B.minmana - 1] *= proc_control_B.atmp;
              }

              proc_control_B.atmp = proc_control_B.xnorm;
            }
          }
        }

        b_A_data[proc_control_B.ii_d] = proc_control_B.atmp;
      } else {
        tau_data[proc_control_B.minmn] = 0.0;
      }

      if (proc_control_B.minmn + 1 < proc_control_B.n_tmp) {
        proc_control_B.xnorm = b_A_data[proc_control_B.ii_d];
        b_A_data[proc_control_B.ii_d] = 1.0;
        proc_control_B.ix0 = (proc_control_B.ii_d + proc_control_B.b_m_tmp) + 1;
        if (tau_data[proc_control_B.minmn] != 0.0) {
          proc_control_B.mmip1 = proc_control_B.ii_d + proc_control_B.mmi;
          while ((proc_control_B.mmi > 0) && (b_A_data[proc_control_B.mmip1 - 1]
                  == 0.0)) {
            proc_control_B.mmi--;
            proc_control_B.mmip1--;
          }

          proc_control_B.mmip1 = (proc_control_B.n_tmp - proc_control_B.minmn) -
            1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.mmip1 > 0)) {
            proc_control_B.coltop_l = (proc_control_B.mmip1 - 1) *
              proc_control_B.b_m_tmp + proc_control_B.ix0;
            proc_control_B.minmana = proc_control_B.coltop_l;
            do {
              exitg1 = 0;
              if (proc_control_B.minmana <= (proc_control_B.coltop_l +
                   proc_control_B.mmi) - 1) {
                if (b_A_data[proc_control_B.minmana - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.minmana++;
                }
              } else {
                proc_control_B.mmip1--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.mmi = 0;
          proc_control_B.mmip1 = 0;
        }

        if (proc_control_B.mmi > 0) {
          proc_control_xgemv(proc_control_B.mmi, proc_control_B.mmip1, b_A_data,
                             proc_control_B.ix0, proc_control_B.b_m_tmp,
                             b_A_data, proc_control_B.ii_d + 1,
                             proc_control_B.work_data_bp);
          proc_control_xgerc(proc_control_B.mmi, proc_control_B.mmip1,
                             -tau_data[proc_control_B.minmn],
                             proc_control_B.ii_d + 1,
                             proc_control_B.work_data_bp, b_A_data,
                             proc_control_B.ix0, proc_control_B.b_m_tmp);
        }

        b_A_data[proc_control_B.ii_d] = proc_control_B.xnorm;
      }
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_xorgqr(int32_T b_m, int32_T n, int32_T k, real_T
  b_A_data[], const int32_T b_A_size[2], int32_T lda, const real_T tau_data[])
{
  __m128d tmp;
  real_T work_data[81];
  int32_T b_ia;
  int32_T coltop;
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T itau;
  int32_T lastc;
  int32_T lastv;
  int32_T loop_ub;
  boolean_T exitg2;
  if (n >= 1) {
    for (itau = k; itau < n; itau++) {
      ia = itau * lda;
      if (b_m - 1 >= 0) {
        memset(&b_A_data[ia], 0, static_cast<uint32_T>((b_m + ia) - ia) * sizeof
               (real_T));
      }

      b_A_data[ia + itau] = 1.0;
    }

    itau = k - 1;
    loop_ub = b_A_size[1];
    if (loop_ub - 1 >= 0) {
      memset(&work_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
    }

    for (i = k; i >= 1; i--) {
      ia = (i - 1) * lda + i;
      if (i < n) {
        b_A_data[ia - 1] = 1.0;
        lastc = (b_m - i) - 1;
        loop_ub = ia + lda;
        if (tau_data[itau] != 0.0) {
          lastv = lastc + 2;
          lastc += ia;
          while ((lastv > 0) && (b_A_data[lastc] == 0.0)) {
            lastv--;
            lastc--;
          }

          lastc = n - i;
          exitg2 = false;
          while ((!exitg2) && (lastc > 0)) {
            coltop = (lastc - 1) * lda + loop_ub;
            b_ia = coltop;
            do {
              exitg1 = 0;
              if (b_ia <= (coltop + lastv) - 1) {
                if (b_A_data[b_ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  b_ia++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          lastv = 0;
          lastc = 0;
        }

        if (lastv > 0) {
          proc_control_xgemv(lastv, lastc, b_A_data, loop_ub, lda, b_A_data, ia,
                             work_data);
          proc_control_xgerc(lastv, lastc, -tau_data[itau], ia, work_data,
                             b_A_data, loop_ub, lda);
        }
      }

      if (i < b_m) {
        lastv = (ia + b_m) - i;
        lastc = ((((lastv - ia) / 2) << 1) + ia) + 1;
        coltop = lastc - 2;
        for (loop_ub = ia + 1; loop_ub <= coltop; loop_ub += 2) {
          tmp = _mm_loadu_pd(&b_A_data[loop_ub - 1]);
          _mm_storeu_pd(&b_A_data[loop_ub - 1], _mm_mul_pd(tmp, _mm_set1_pd
            (-tau_data[itau])));
        }

        for (loop_ub = lastc; loop_ub <= lastv; loop_ub++) {
          b_A_data[loop_ub - 1] *= -tau_data[itau];
        }
      }

      b_A_data[ia - 1] = 1.0 - tau_data[itau];
      lastv = static_cast<uint8_T>(i - 1);
      for (loop_ub = 0; loop_ub < lastv; loop_ub++) {
        b_A_data[(ia - loop_ub) - 2] = 0.0;
      }

      itau--;
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
real_T proc_control::proc_control_KWIKfactor(const coder::array<real_T, 2U>
  &b_Ac, const coder::array<int32_T, 1U> &iC, int32_T nA, const real_T
  Linv_data[], const int32_T Linv_size[2], real_T RLinv_data[], const int32_T
  RLinv_size[2], real_T b_D_data[], const int32_T b_D_size[2], real_T b_H_data[],
  const int32_T b_H_size[2], int32_T n)
{
  real_T Status;
  int32_T exitg1;
  proc_control_B.loop_ub_f = Linv_size[0];
  proc_control_B.TL_size_idx_0 = Linv_size[0];
  Status = 1.0;
  proc_control_B.RLinv_idx_0_tmp = RLinv_size[0];
  proc_control_B.RLinv_idx_1_tmp = RLinv_size[1];
  for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <
       proc_control_B.RLinv_idx_1_tmp; proc_control_B.i_j_k++) {
    for (proc_control_B.b_m = 0; proc_control_B.b_m <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.b_m++) {
      RLinv_data[proc_control_B.b_m + RLinv_size[0] * proc_control_B.i_j_k] =
        0.0;
    }
  }

  for (proc_control_B.b_m = 0; proc_control_B.b_m < nA; proc_control_B.b_m++) {
    proc_control_B.iC_p2 = iC[proc_control_B.b_m];
    proc_control_B.b_n_o = b_Ac.size(1);
    for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k < proc_control_B.b_n_o;
         proc_control_B.i_j_k++) {
      proc_control_B.b_Ac_data[proc_control_B.i_j_k] = b_Ac[(b_Ac.size(0) *
        proc_control_B.i_j_k + proc_control_B.iC_p2) - 1];
    }

    proc_control_mtimes_afai05(Linv_data, Linv_size, proc_control_B.b_Ac_data,
      proc_control_B.tau_data, proc_control_B.tau_size);
    for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.i_j_k++) {
      RLinv_data[proc_control_B.i_j_k + RLinv_size[0] * proc_control_B.b_m] =
        proc_control_B.tau_data[proc_control_B.i_j_k];
    }
  }

  proc_control_B.b_m = RLinv_size[0] - 1;
  proc_control_B.Q_size[0] = RLinv_size[0];
  proc_control_B.Q_size[1] = RLinv_size[0];
  proc_control_B.R_size_idx_0 = RLinv_size[0];
  if (RLinv_size[0] > RLinv_size[1]) {
    for (proc_control_B.b_n_o = 0; proc_control_B.b_n_o <
         proc_control_B.RLinv_idx_1_tmp; proc_control_B.b_n_o++) {
      for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <= proc_control_B.b_m;
           proc_control_B.i_j_k++) {
        proc_control_B.Q_data[proc_control_B.i_j_k + proc_control_B.Q_size[0] *
          proc_control_B.b_n_o] = RLinv_data[RLinv_size[0] *
          proc_control_B.b_n_o + proc_control_B.i_j_k];
      }
    }

    proc_control_B.iC_p2 = RLinv_size[1] + 1;
    for (proc_control_B.b_n_o = proc_control_B.iC_p2; proc_control_B.b_n_o <=
         proc_control_B.b_m + 1; proc_control_B.b_n_o++) {
      for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <= proc_control_B.b_m;
           proc_control_B.i_j_k++) {
        proc_control_B.Q_data[proc_control_B.i_j_k + proc_control_B.Q_size[0] *
          (proc_control_B.b_n_o - 1)] = 0.0;
      }
    }

    proc_control_xgeqrf(proc_control_B.Q_data, proc_control_B.Q_size,
                        proc_control_B.tau_data, proc_control_B.tau_size);
    for (proc_control_B.b_n_o = 0; proc_control_B.b_n_o <
         proc_control_B.RLinv_idx_1_tmp; proc_control_B.b_n_o++) {
      for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <=
           proc_control_B.b_n_o; proc_control_B.i_j_k++) {
        proc_control_B.R_data[proc_control_B.i_j_k + proc_control_B.R_size_idx_0
          * proc_control_B.b_n_o] = proc_control_B.Q_data[proc_control_B.Q_size
          [0] * proc_control_B.b_n_o + proc_control_B.i_j_k];
      }

      for (proc_control_B.i_j_k = proc_control_B.b_n_o + 2; proc_control_B.i_j_k
           <= proc_control_B.b_m + 1; proc_control_B.i_j_k++) {
        proc_control_B.R_data[(proc_control_B.i_j_k +
          proc_control_B.R_size_idx_0 * proc_control_B.b_n_o) - 1] = 0.0;
      }
    }

    proc_control_xorgqr(RLinv_size[0], RLinv_size[0], RLinv_size[1],
                        proc_control_B.Q_data, proc_control_B.Q_size,
                        RLinv_size[0], proc_control_B.tau_data);
  } else {
    proc_control_B.b_A_size[0] = RLinv_size[0];
    proc_control_B.b_A_size[1] = RLinv_size[1];
    proc_control_B.iC_p2 = RLinv_size[0] * RLinv_size[1];
    if (proc_control_B.iC_p2 - 1 >= 0) {
      memcpy(&proc_control_B.b_A_data[0], &RLinv_data[0], static_cast<uint32_T>
             (proc_control_B.iC_p2) * sizeof(real_T));
    }

    proc_control_xgeqrf(proc_control_B.b_A_data, proc_control_B.b_A_size,
                        proc_control_B.tau_data, proc_control_B.tau_size);
    for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.i_j_k++) {
      for (proc_control_B.iC_p2 = 0; proc_control_B.iC_p2 <=
           proc_control_B.i_j_k; proc_control_B.iC_p2++) {
        proc_control_B.R_data[proc_control_B.iC_p2 + proc_control_B.R_size_idx_0
          * proc_control_B.i_j_k] =
          proc_control_B.b_A_data[proc_control_B.b_A_size[0] *
          proc_control_B.i_j_k + proc_control_B.iC_p2];
      }

      for (proc_control_B.iC_p2 = proc_control_B.i_j_k + 2; proc_control_B.iC_p2
           <= proc_control_B.b_m + 1; proc_control_B.iC_p2++) {
        proc_control_B.R_data[(proc_control_B.iC_p2 +
          proc_control_B.R_size_idx_0 * proc_control_B.i_j_k) - 1] = 0.0;
      }
    }

    proc_control_B.b_n_o = RLinv_size[0] + 1;
    for (proc_control_B.i_j_k = proc_control_B.b_n_o; proc_control_B.i_j_k <=
         proc_control_B.RLinv_idx_1_tmp; proc_control_B.i_j_k++) {
      for (proc_control_B.iC_p2 = 0; proc_control_B.iC_p2 <= proc_control_B.b_m;
           proc_control_B.iC_p2++) {
        proc_control_B.R_data[proc_control_B.iC_p2 + proc_control_B.R_size_idx_0
          * (proc_control_B.i_j_k - 1)] = proc_control_B.b_A_data
          [(proc_control_B.i_j_k - 1) * proc_control_B.b_A_size[0] +
          proc_control_B.iC_p2];
      }
    }

    proc_control_xorgqr(RLinv_size[0], RLinv_size[0], RLinv_size[0],
                        proc_control_B.b_A_data, proc_control_B.b_A_size,
                        RLinv_size[0], proc_control_B.tau_data);
    for (proc_control_B.b_n_o = 0; proc_control_B.b_n_o <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.b_n_o++) {
      for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <= proc_control_B.b_m;
           proc_control_B.i_j_k++) {
        proc_control_B.Q_data[proc_control_B.i_j_k + proc_control_B.Q_size[0] *
          proc_control_B.b_n_o] =
          proc_control_B.b_A_data[proc_control_B.b_A_size[0] *
          proc_control_B.b_n_o + proc_control_B.i_j_k];
      }
    }
  }

  proc_control_B.b_m = 0;
  do {
    exitg1 = 0;
    if (proc_control_B.b_m <= nA - 1) {
      if (fabs(proc_control_B.R_data[proc_control_B.R_size_idx_0 *
               proc_control_B.b_m + proc_control_B.b_m]) < 1.0E-12) {
        Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.b_m++;
      }
    } else {
      proc_control_B.i_j_tmp = static_cast<uint8_T>(n);
      for (proc_control_B.b_m = 0; proc_control_B.b_m < proc_control_B.i_j_tmp;
           proc_control_B.b_m++) {
        for (proc_control_B.b_n_o = 0; proc_control_B.b_n_o <
             proc_control_B.i_j_tmp; proc_control_B.b_n_o++) {
          proc_control_B.Linv = 0.0;
          for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <
               proc_control_B.loop_ub_f; proc_control_B.i_j_k++) {
            proc_control_B.Linv += Linv_data[Linv_size[0] * proc_control_B.b_m +
              proc_control_B.i_j_k] *
              proc_control_B.Q_data[proc_control_B.Q_size[0] *
              proc_control_B.b_n_o + proc_control_B.i_j_k];
          }

          proc_control_B.TL_data[proc_control_B.b_m +
            proc_control_B.TL_size_idx_0 * proc_control_B.b_n_o] =
            proc_control_B.Linv;
        }
      }

      for (proc_control_B.i_j_k = 0; proc_control_B.i_j_k <
           proc_control_B.RLinv_idx_1_tmp; proc_control_B.i_j_k++) {
        for (proc_control_B.b_m = 0; proc_control_B.b_m <
             proc_control_B.RLinv_idx_0_tmp; proc_control_B.b_m++) {
          RLinv_data[proc_control_B.b_m + RLinv_size[0] * proc_control_B.i_j_k] =
            0.0;
        }
      }

      for (proc_control_B.b_m = nA; proc_control_B.b_m >= 1; proc_control_B.b_m
           --) {
        RLinv_data[(proc_control_B.b_m + RLinv_size[0] * (proc_control_B.b_m - 1))
          - 1] = 1.0;
        for (proc_control_B.b_n_o = proc_control_B.b_m; proc_control_B.b_n_o <=
             nA; proc_control_B.b_n_o++) {
          proc_control_B.loop_ub_f = ((proc_control_B.b_n_o - 1) * RLinv_size[0]
            + proc_control_B.b_m) - 1;
          RLinv_data[proc_control_B.loop_ub_f] /= proc_control_B.R_data
            [((proc_control_B.b_m - 1) * proc_control_B.R_size_idx_0 +
              proc_control_B.b_m) - 1];
        }

        if (proc_control_B.b_m > 1) {
          proc_control_B.iC_p2 = static_cast<uint8_T>(proc_control_B.b_m - 1);
          for (proc_control_B.b_n_o = 0; proc_control_B.b_n_o <
               proc_control_B.iC_p2; proc_control_B.b_n_o++) {
            for (proc_control_B.i_j_k = proc_control_B.b_m; proc_control_B.i_j_k
                 <= nA; proc_control_B.i_j_k++) {
              proc_control_B.loop_ub_f = (proc_control_B.i_j_k - 1) *
                RLinv_size[0];
              proc_control_B.RLinv_idx_0_tmp = proc_control_B.b_n_o +
                proc_control_B.loop_ub_f;
              RLinv_data[proc_control_B.RLinv_idx_0_tmp] -=
                proc_control_B.R_data[(proc_control_B.b_m - 1) *
                proc_control_B.R_size_idx_0 + proc_control_B.b_n_o] *
                RLinv_data[(proc_control_B.b_m + proc_control_B.loop_ub_f) - 1];
            }
          }
        }
      }

      for (proc_control_B.b_m = 0; proc_control_B.b_m < proc_control_B.i_j_tmp;
           proc_control_B.b_m++) {
        for (proc_control_B.b_n_o = proc_control_B.b_m + 1; proc_control_B.b_n_o
             <= n; proc_control_B.b_n_o++) {
          proc_control_B.loop_ub_f = (proc_control_B.b_n_o - 1) * b_H_size[0] +
            proc_control_B.b_m;
          b_H_data[proc_control_B.loop_ub_f] = 0.0;
          for (proc_control_B.i_j_k = nA + 1; proc_control_B.i_j_k <= n;
               proc_control_B.i_j_k++) {
            proc_control_B.RLinv_idx_0_tmp = (proc_control_B.i_j_k - 1) *
              proc_control_B.TL_size_idx_0;
            b_H_data[proc_control_B.loop_ub_f] -= proc_control_B.TL_data
              [(proc_control_B.b_n_o + proc_control_B.RLinv_idx_0_tmp) - 1] *
              proc_control_B.TL_data[proc_control_B.b_m +
              proc_control_B.RLinv_idx_0_tmp];
          }

          b_H_data[(proc_control_B.b_n_o + b_H_size[0] * proc_control_B.b_m) - 1]
            = b_H_data[proc_control_B.loop_ub_f];
        }
      }

      for (proc_control_B.b_m = 0; proc_control_B.b_m < nA; proc_control_B.b_m++)
      {
        for (proc_control_B.b_n_o = 0; proc_control_B.b_n_o <
             proc_control_B.i_j_tmp; proc_control_B.b_n_o++) {
          proc_control_B.loop_ub_f = b_D_size[0] * proc_control_B.b_m +
            proc_control_B.b_n_o;
          b_D_data[proc_control_B.loop_ub_f] = 0.0;
          for (proc_control_B.i_j_k = proc_control_B.b_m + 1;
               proc_control_B.i_j_k <= nA; proc_control_B.i_j_k++) {
            b_D_data[proc_control_B.loop_ub_f] += proc_control_B.TL_data
              [(proc_control_B.i_j_k - 1) * proc_control_B.TL_size_idx_0 +
              proc_control_B.b_n_o] * RLinv_data[(proc_control_B.i_j_k - 1) *
              RLinv_size[0] + proc_control_B.b_m];
          }
        }
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return Status;
}

void proc_control::proc_control_binary_expand_op_6(real_T in1_data[], int32_T
  in1_size[1], real_T in2, const real_T in3_data[], const int32_T in3_size[1])
{
  real_T in1_data_0[81];
  int32_T in1_size_idx_0;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_1_0;
  if (in3_size[0] == 1) {
    in1_size_idx_0 = in1_size[0];
  } else {
    in1_size_idx_0 = in3_size[0];
  }

  stride_0_0 = (in1_size[0] != 1);
  stride_1_0 = (in3_size[0] != 1);
  if (in3_size[0] == 1) {
    loop_ub = in1_size[0];
  } else {
    loop_ub = in3_size[0];
  }

  for (int32_T i = 0; i < loop_ub; i++) {
    in1_data_0[i] = in3_data[i * stride_1_0] * in2 + in1_data[i * stride_0_0];
  }

  in1_size[0] = in1_size_idx_0;
  if (in1_size_idx_0 - 1 >= 0) {
    memcpy(&in1_data[0], &in1_data_0[0], static_cast<uint32_T>(in1_size_idx_0) *
           sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_solveQP(const real_T xQP[21], int32_T nCon,
  int32_T b_degrees, const real_T Kx_data[], const real_T Kr_data[], const
  int32_T Kr_size[2], const coder::array<real_T, 1U> &rseq, const real_T
  Ku1_data[], const real_T old_u[8], const real_T Kv_data[], const int32_T
  Kv_size[2], const coder::array<real_T, 1U> &vseq, const real_T Kut_data[],
  const int32_T Kut_size[2], const real_T b_utarget_data[], const real_T
  Linv_data[], const int32_T Linv_size[2], const real_T Hinv_data[], const
  int32_T Hinv_size[2], const coder::array<real_T, 2U> &b_Ac, const coder::array<
  real_T, 1U> &Bc, const coder::array<boolean_T, 1U> &iA, real_T zopt_data[],
  int32_T zopt_size[1], real_T f_data[], int32_T f_size[1], real_T *status)
{
  __m128d tmp;
  __m128d tmp_0;
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T exitg3;
  boolean_T guard1;
  f_size[0] = b_degrees;
  if (b_degrees - 1 >= 0) {
    memset(&f_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof(real_T));
  }

  for (proc_control_B.nA_a = 0; proc_control_B.nA_a <= b_degrees - 2;
       proc_control_B.nA_a++) {
    proc_control_B.rMin_b = 0.0;
    for (proc_control_B.idx = 0; proc_control_B.idx < 21; proc_control_B.idx++)
    {
      proc_control_B.rMin_b += Kx_data[21 * proc_control_B.nA_a +
        proc_control_B.idx] * xQP[proc_control_B.idx];
    }

    proc_control_B.Xnorm0_h = 0.0;
    proc_control_B.loop_ub_k = Kr_size[0];
    for (proc_control_B.idx = 0; proc_control_B.idx < proc_control_B.loop_ub_k;
         proc_control_B.idx++) {
      proc_control_B.Xnorm0_h += Kr_data[Kr_size[0] * proc_control_B.nA_a +
        proc_control_B.idx] * rseq[proc_control_B.idx];
    }

    proc_control_B.cMin_h = 0.0;
    for (proc_control_B.idx = 0; proc_control_B.idx < 8; proc_control_B.idx++) {
      proc_control_B.cMin_h += Ku1_data[(proc_control_B.nA_a << 3) +
        proc_control_B.idx] * old_u[proc_control_B.idx];
    }

    proc_control_B.cVal_h = 0.0;
    proc_control_B.loop_ub_k = Kv_size[0];
    for (proc_control_B.idx = 0; proc_control_B.idx < proc_control_B.loop_ub_k;
         proc_control_B.idx++) {
      proc_control_B.cVal_h += Kv_data[Kv_size[0] * proc_control_B.nA_a +
        proc_control_B.idx] * vseq[proc_control_B.idx];
    }

    proc_control_B.t_b = 0.0;
    proc_control_B.loop_ub_k = Kut_size[0];
    for (proc_control_B.idx = 0; proc_control_B.idx < proc_control_B.loop_ub_k;
         proc_control_B.idx++) {
      proc_control_B.t_b += Kut_data[Kut_size[0] * proc_control_B.nA_a +
        proc_control_B.idx] * b_utarget_data[proc_control_B.idx];
    }

    f_data[proc_control_B.nA_a] = (((proc_control_B.rMin_b +
      proc_control_B.Xnorm0_h) + proc_control_B.cMin_h) + proc_control_B.cVal_h)
      + proc_control_B.t_b;
  }

  proc_control_B.loop_ub_k = iA.size(0);
  proc_control_B.b_iA.set_size(iA.size(0));
  for (proc_control_B.idx = 0; proc_control_B.idx < proc_control_B.loop_ub_k;
       proc_control_B.idx++) {
    proc_control_B.b_iA[proc_control_B.idx] = iA[proc_control_B.idx];
  }

  proc_control_B.a__1.set_size(nCon);
  for (proc_control_B.idx = 0; proc_control_B.idx < nCon; proc_control_B.idx++)
  {
    proc_control_B.a__1[proc_control_B.idx] = 0.0;
  }

  proc_control_B.TotalFreeMoves_k = 1;
  if (nCon == 0) {
    zopt_size[0] = b_degrees;
    if (b_degrees - 1 >= 0) {
      memset(&zopt_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof(real_T));
    }

    proc_control_B.nA_a = static_cast<uint8_T>(b_degrees);
    for (proc_control_B.kNext = 0; proc_control_B.kNext < proc_control_B.nA_a;
         proc_control_B.kNext++) {
      proc_control_B.Xnorm0_h = 0.0;
      proc_control_B.loop_ub_k = Hinv_size[1];
      for (proc_control_B.idx = 0; proc_control_B.idx < proc_control_B.loop_ub_k;
           proc_control_B.idx++) {
        proc_control_B.Xnorm0_h += -Hinv_data[Hinv_size[0] * proc_control_B.idx
          + proc_control_B.kNext] * f_data[proc_control_B.idx];
      }

      zopt_data[proc_control_B.kNext] = proc_control_B.Xnorm0_h;
    }
  } else {
    if (b_degrees - 1 >= 0) {
      memset(&proc_control_B.r_data[0], 0, static_cast<uint32_T>(b_degrees) *
             sizeof(real_T));
    }

    proc_control_B.rMin_b = 0.0;
    proc_control_B.RLinv_size[0] = Linv_size[0];
    proc_control_B.RLinv_size[1] = Linv_size[1];
    proc_control_B.b_D_size[0] = Linv_size[0];
    proc_control_B.b_D_size[1] = Linv_size[1];
    proc_control_B.b_H_size_p[0] = Linv_size[0];
    proc_control_B.b_H_size_p[1] = Linv_size[1];
    proc_control_B.cTol.set_size(nCon);
    proc_control_B.cTolComputed_h = false;
    proc_control_B.iC.set_size(nCon);
    for (proc_control_B.idx = 0; proc_control_B.idx < nCon; proc_control_B.idx++)
    {
      proc_control_B.cTol[proc_control_B.idx] = 1.0;
      proc_control_B.iC[proc_control_B.idx] = 0;
    }

    proc_control_B.nA_a = -1;
    zopt_size[0] = b_degrees;
    if (b_degrees - 1 >= 0) {
      memset(&zopt_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof(real_T));
    }

    proc_control_B.kNext = static_cast<uint8_T>(b_degrees);
    for (proc_control_B.kDrop = 0; proc_control_B.kDrop < proc_control_B.kNext;
         proc_control_B.kDrop++) {
      proc_control_B.Xnorm0_h = 0.0;
      proc_control_B.loop_ub_k = Hinv_size[1];
      for (proc_control_B.idx = 0; proc_control_B.idx < proc_control_B.loop_ub_k;
           proc_control_B.idx++) {
        proc_control_B.Xnorm0_h += -Hinv_data[Hinv_size[0] * proc_control_B.idx
          + proc_control_B.kDrop] * f_data[proc_control_B.idx];
      }

      zopt_data[proc_control_B.kDrop] = proc_control_B.Xnorm0_h;
    }

    proc_control_B.Xnorm0_h = proc_control_norm(zopt_data, zopt_size);
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.TotalFreeMoves_k <= 940)) {
      proc_control_B.cMin_h = -0.01;
      proc_control_B.kNext = -1;
      for (proc_control_B.kDrop = 0; proc_control_B.kDrop < nCon;
           proc_control_B.kDrop++) {
        if (!proc_control_B.cTolComputed_h) {
          proc_control_B.loop_ub_k = b_Ac.size(1);
          if (zopt_size[0] == b_Ac.size(1)) {
            proc_control_B.AcRow_size[0] = 1;
            proc_control_B.AcRow_size[1] = b_Ac.size(1);
            proc_control_B.scalarLB_f = (b_Ac.size(1) / 2) << 1;
            proc_control_B.vectorUB_c = proc_control_B.scalarLB_f - 2;
            for (proc_control_B.idx = 0; proc_control_B.idx <=
                 proc_control_B.vectorUB_c; proc_control_B.idx += 2) {
              tmp_0 = _mm_mul_pd(_mm_set_pd(b_Ac[(proc_control_B.idx + 1) *
                b_Ac.size(0) + proc_control_B.kDrop], b_Ac[b_Ac.size(0) *
                proc_control_B.idx + proc_control_B.kDrop]), _mm_loadu_pd
                                 (&zopt_data[proc_control_B.idx]));
              _mm_storeu_pd(&proc_control_B.dv54[0], tmp_0);
              proc_control_B.AcRow_data[proc_control_B.idx] =
                proc_control_B.dv54[0];
              proc_control_B.AcRow_data[proc_control_B.idx + 1] =
                proc_control_B.dv54[1];
            }

            for (proc_control_B.idx = proc_control_B.scalarLB_f;
                 proc_control_B.idx < proc_control_B.loop_ub_k;
                 proc_control_B.idx++) {
              proc_control_B.AcRow_data[proc_control_B.idx] = b_Ac[b_Ac.size(0) *
                proc_control_B.idx + proc_control_B.kDrop] *
                zopt_data[proc_control_B.idx];
            }
          } else {
            proc_control_binary_expand_op_5(proc_control_B.AcRow_data,
              proc_control_B.AcRow_size, b_Ac, proc_control_B.kDrop, zopt_data,
              zopt_size);
          }

          proc_control_B.scalarLB_f = proc_control_B.AcRow_size[1];
          for (proc_control_B.idx = 0; proc_control_B.idx <
               proc_control_B.scalarLB_f; proc_control_B.idx++) {
            proc_control_B.z_data[proc_control_B.idx] = fabs
              (proc_control_B.AcRow_data[proc_control_B.idx]);
          }

          if (static_cast<uint8_T>(proc_control_B.AcRow_size[1] - 1) + 1 <= 2) {
            if (static_cast<uint8_T>(proc_control_B.AcRow_size[1] - 1) + 1 == 1)
            {
              proc_control_B.cVal_h = proc_control_B.z_data[0];
            } else {
              proc_control_B.cVal_h =
                proc_control_B.z_data[proc_control_B.AcRow_size[1] - 1];
              proc_control_B.idx = 0;
              proc_control_B.t_b = proc_control_B.z_data[proc_control_B.idx];
              if (!(proc_control_B.t_b < proc_control_B.cVal_h)) {
                if (rtIsNaN(proc_control_B.z_data[proc_control_B.idx])) {
                  if (rtIsNaN(proc_control_B.cVal_h)) {
                    proc_control_B.cVal_h = proc_control_B.t_b;
                  }
                } else {
                  proc_control_B.cVal_h = proc_control_B.t_b;
                }
              }
            }
          } else {
            proc_control_B.cVal_h = proc_control_B.z_data[0];
            if (!rtIsNaN(proc_control_B.cVal_h)) {
              proc_control_B.idx = 1;
            } else {
              proc_control_B.idx = 0;
              proc_control_B.loop_ub_k = 2;
              exitg3 = false;
              while ((!exitg3) && (proc_control_B.loop_ub_k <=
                                   proc_control_B.scalarLB_f)) {
                if (!rtIsNaN(proc_control_B.z_data[proc_control_B.loop_ub_k - 1]))
                {
                  proc_control_B.idx = proc_control_B.loop_ub_k;
                  exitg3 = true;
                } else {
                  proc_control_B.loop_ub_k++;
                }
              }
            }

            if (proc_control_B.idx == 0) {
            } else {
              proc_control_B.cVal_h = proc_control_B.z_data[proc_control_B.idx -
                1];
              for (proc_control_B.loop_ub_k = proc_control_B.idx + 1;
                   proc_control_B.loop_ub_k <= proc_control_B.scalarLB_f;
                   proc_control_B.loop_ub_k++) {
                proc_control_B.t_b =
                  proc_control_B.z_data[proc_control_B.loop_ub_k - 1];
                if (proc_control_B.cVal_h < proc_control_B.t_b) {
                  proc_control_B.cVal_h = proc_control_B.t_b;
                }
              }
            }
          }

          if ((proc_control_B.cTol[proc_control_B.kDrop] >=
               proc_control_B.cVal_h) || rtIsNaN(proc_control_B.cVal_h)) {
          } else {
            proc_control_B.cTol[proc_control_B.kDrop] = proc_control_B.cVal_h;
          }
        }

        if (!proc_control_B.b_iA[proc_control_B.kDrop]) {
          proc_control_B.t_b = 0.0;
          proc_control_B.loop_ub_k = b_Ac.size(1);
          for (proc_control_B.idx = 0; proc_control_B.idx <
               proc_control_B.loop_ub_k; proc_control_B.idx++) {
            proc_control_B.t_b += b_Ac[b_Ac.size(0) * proc_control_B.idx +
              proc_control_B.kDrop] * zopt_data[proc_control_B.idx];
          }

          proc_control_B.cVal_h = (proc_control_B.t_b - Bc[proc_control_B.kDrop])
            / proc_control_B.cTol[proc_control_B.kDrop];
          if (proc_control_B.cVal_h < proc_control_B.cMin_h) {
            proc_control_B.cMin_h = proc_control_B.cVal_h;
            proc_control_B.kNext = proc_control_B.kDrop;
          }
        }
      }

      proc_control_B.cTolComputed_h = true;
      if (proc_control_B.kNext + 1 <= 0) {
        exitg2 = true;
      } else if (proc_control_B.TotalFreeMoves_k == 940) {
        proc_control_B.TotalFreeMoves_k = 0;
        exitg2 = true;
      } else {
        do {
          exitg1 = 0;
          if ((proc_control_B.kNext + 1 > 0) && (proc_control_B.TotalFreeMoves_k
               <= 940)) {
            proc_control_B.AcRow_size[0] = 1;
            proc_control_B.loop_ub_k = b_Ac.size(1);
            proc_control_B.AcRow_size[1] = b_Ac.size(1);
            for (proc_control_B.idx = 0; proc_control_B.idx <
                 proc_control_B.loop_ub_k; proc_control_B.idx++) {
              proc_control_B.AcRow_data[proc_control_B.idx] = b_Ac[b_Ac.size(0) *
                proc_control_B.idx + proc_control_B.kNext];
            }

            guard1 = false;
            if (proc_control_B.nA_a + 1 == 0) {
              proc_control_mtimes_afai05(Hinv_data, Hinv_size,
                proc_control_B.AcRow_data, proc_control_B.z_data,
                proc_control_B.z_size);
              guard1 = true;
            } else {
              proc_control_B.cMin_h = proc_control_KWIKfactor(b_Ac,
                proc_control_B.iC, proc_control_B.nA_a + 1, Linv_data, Linv_size,
                proc_control_B.RLinv_data, proc_control_B.RLinv_size,
                proc_control_B.b_D_data, proc_control_B.b_D_size,
                proc_control_B.b_H_data, proc_control_B.b_H_size_p, b_degrees);
              if (proc_control_B.cMin_h <= 0.0) {
                proc_control_B.TotalFreeMoves_k = -2;
                exitg1 = 1;
              } else {
                proc_control_B.b_H_size_l[0] = proc_control_B.b_H_size_p[0];
                proc_control_B.b_H_size_l[1] = proc_control_B.b_H_size_p[1];
                proc_control_B.kDrop = proc_control_B.b_H_size_p[0] *
                  proc_control_B.b_H_size_p[1];
                proc_control_B.scalarLB_f = (proc_control_B.kDrop / 2) << 1;
                proc_control_B.vectorUB_c = proc_control_B.scalarLB_f - 2;
                for (proc_control_B.idx = 0; proc_control_B.idx <=
                     proc_control_B.vectorUB_c; proc_control_B.idx += 2) {
                  tmp_0 = _mm_loadu_pd
                    (&proc_control_B.b_H_data[proc_control_B.idx]);
                  _mm_storeu_pd(&proc_control_B.b_H_data_f[proc_control_B.idx],
                                _mm_mul_pd(tmp_0, _mm_set1_pd(-1.0)));
                }

                for (proc_control_B.idx = proc_control_B.scalarLB_f;
                     proc_control_B.idx < proc_control_B.kDrop;
                     proc_control_B.idx++) {
                  proc_control_B.b_H_data_f[proc_control_B.idx] =
                    -proc_control_B.b_H_data[proc_control_B.idx];
                }

                proc_control_mtimes_afai05(proc_control_B.b_H_data_f,
                  proc_control_B.b_H_size_l, proc_control_B.AcRow_data,
                  proc_control_B.z_data, proc_control_B.z_size);
                for (proc_control_B.kDrop = 0; proc_control_B.kDrop <=
                     proc_control_B.nA_a; proc_control_B.kDrop++) {
                  proc_control_B.cMin_h = 0.0;
                  for (proc_control_B.idx = 0; proc_control_B.idx <
                       proc_control_B.loop_ub_k; proc_control_B.idx++) {
                    proc_control_B.cMin_h +=
                      proc_control_B.b_D_data[proc_control_B.b_D_size[0] *
                      proc_control_B.kDrop + proc_control_B.idx] *
                      proc_control_B.AcRow_data[proc_control_B.idx];
                  }

                  proc_control_B.r_data[proc_control_B.kDrop] =
                    proc_control_B.cMin_h;
                }

                guard1 = true;
              }
            }

            if (guard1) {
              proc_control_B.kDrop = 0;
              proc_control_B.cMin_h = 0.0;
              proc_control_B.isT1Inf = true;
              proc_control_B.tempOK = true;
              if (proc_control_B.nA_a + 1 > 0) {
                proc_control_B.scalarLB_f = 0;
                exitg3 = false;
                while ((!exitg3) && (proc_control_B.scalarLB_f <=
                                     proc_control_B.nA_a)) {
                  if (proc_control_B.r_data[proc_control_B.scalarLB_f] >=
                      1.0E-12) {
                    proc_control_B.tempOK = false;
                    exitg3 = true;
                  } else {
                    proc_control_B.scalarLB_f++;
                  }
                }
              }

              if ((proc_control_B.nA_a + 1 != 0) && (!proc_control_B.tempOK)) {
                for (proc_control_B.scalarLB_f = 0; proc_control_B.scalarLB_f <=
                     proc_control_B.nA_a; proc_control_B.scalarLB_f++) {
                  proc_control_B.cVal_h =
                    proc_control_B.r_data[proc_control_B.scalarLB_f];
                  if (proc_control_B.cVal_h > 1.0E-12) {
                    proc_control_B.cVal_h =
                      proc_control_B.a__1[proc_control_B.iC[proc_control_B.scalarLB_f]
                      - 1] / proc_control_B.cVal_h;
                    if ((proc_control_B.kDrop == 0) || (proc_control_B.cVal_h <
                         proc_control_B.rMin_b)) {
                      proc_control_B.rMin_b = proc_control_B.cVal_h;
                      proc_control_B.kDrop = proc_control_B.scalarLB_f + 1;
                    }
                  }
                }

                if (proc_control_B.kDrop > 0) {
                  proc_control_B.cMin_h = proc_control_B.rMin_b;
                  proc_control_B.isT1Inf = false;
                }
              }

              proc_control_B.cVal_h = 0.0;
              if (proc_control_B.z_size[0] >= 1) {
                proc_control_B.scalarLB_f = proc_control_B.z_size[0];
                for (proc_control_B.idx = 0; proc_control_B.idx <
                     proc_control_B.scalarLB_f; proc_control_B.idx++) {
                  proc_control_B.cVal_h += b_Ac[b_Ac.size(0) *
                    proc_control_B.idx + proc_control_B.kNext] *
                    proc_control_B.z_data[proc_control_B.idx];
                }
              }

              if (proc_control_B.cVal_h <= 0.0) {
                proc_control_B.cVal_h = 0.0;
                proc_control_B.tempOK = true;
              } else {
                proc_control_B.t_b = 0.0;
                for (proc_control_B.idx = 0; proc_control_B.idx <
                     proc_control_B.loop_ub_k; proc_control_B.idx++) {
                  proc_control_B.t_b += b_Ac[b_Ac.size(0) * proc_control_B.idx +
                    proc_control_B.kNext] * zopt_data[proc_control_B.idx];
                }

                proc_control_B.cVal_h = (Bc[proc_control_B.kNext] -
                  proc_control_B.t_b) / proc_control_B.cVal_h;
                proc_control_B.tempOK = false;
              }

              if (proc_control_B.isT1Inf && proc_control_B.tempOK) {
                proc_control_B.TotalFreeMoves_k = -1;
                exitg1 = 1;
              } else {
                if (proc_control_B.tempOK) {
                  proc_control_B.t_b = proc_control_B.cMin_h;
                } else if (proc_control_B.isT1Inf) {
                  proc_control_B.t_b = proc_control_B.cVal_h;
                } else if (proc_control_B.cMin_h < proc_control_B.cVal_h) {
                  proc_control_B.t_b = proc_control_B.cMin_h;
                } else {
                  proc_control_B.t_b = proc_control_B.cVal_h;
                }

                for (proc_control_B.scalarLB_f = 0; proc_control_B.scalarLB_f <=
                     proc_control_B.nA_a; proc_control_B.scalarLB_f++) {
                  proc_control_B.idx =
                    proc_control_B.iC[proc_control_B.scalarLB_f];
                  proc_control_B.a__1[proc_control_B.idx - 1] =
                    proc_control_B.a__1[proc_control_B.idx - 1] -
                    proc_control_B.t_b *
                    proc_control_B.r_data[proc_control_B.scalarLB_f];
                  if ((proc_control_B.idx <= nCon) &&
                      (proc_control_B.a__1[proc_control_B.idx - 1] < 0.0)) {
                    proc_control_B.a__1[proc_control_B.idx - 1] = 0.0;
                  }
                }

                proc_control_B.a__1[proc_control_B.kNext] =
                  proc_control_B.a__1[proc_control_B.kNext] + proc_control_B.t_b;
                if ((fabs(proc_control_B.t_b - proc_control_B.cMin_h) <
                     2.2204460492503131E-16) && (proc_control_B.kDrop > 0)) {
                  proc_control_B.b_iA[proc_control_B.iC[proc_control_B.kDrop - 1]
                    - 1] = false;
                  if (proc_control_B.kDrop < proc_control_B.nA_a + 1) {
                    for (proc_control_B.scalarLB_f = proc_control_B.kDrop;
                         proc_control_B.scalarLB_f <= proc_control_B.nA_a;
                         proc_control_B.scalarLB_f++) {
                      proc_control_B.iC[proc_control_B.scalarLB_f - 1] =
                        proc_control_B.iC[proc_control_B.scalarLB_f];
                    }
                  }

                  proc_control_B.iC[proc_control_B.nA_a] = 0;
                  proc_control_B.nA_a--;
                }

                if (!proc_control_B.tempOK) {
                  if (zopt_size[0] == proc_control_B.z_size[0]) {
                    proc_control_B.loop_ub_k = zopt_size[0];
                    proc_control_B.scalarLB_f = (zopt_size[0] / 2) << 1;
                    proc_control_B.vectorUB_c = proc_control_B.scalarLB_f - 2;
                    for (proc_control_B.idx = 0; proc_control_B.idx <=
                         proc_control_B.vectorUB_c; proc_control_B.idx += 2) {
                      tmp_0 = _mm_loadu_pd
                        (&proc_control_B.z_data[proc_control_B.idx]);
                      tmp = _mm_loadu_pd(&zopt_data[proc_control_B.idx]);
                      _mm_storeu_pd(&zopt_data[proc_control_B.idx], _mm_add_pd
                                    (_mm_mul_pd(_mm_set1_pd(proc_control_B.t_b),
                        tmp_0), tmp));
                    }

                    for (proc_control_B.idx = proc_control_B.scalarLB_f;
                         proc_control_B.idx < proc_control_B.loop_ub_k;
                         proc_control_B.idx++) {
                      zopt_data[proc_control_B.idx] += proc_control_B.t_b *
                        proc_control_B.z_data[proc_control_B.idx];
                    }
                  } else {
                    proc_control_binary_expand_op_6(zopt_data, zopt_size,
                      proc_control_B.t_b, proc_control_B.z_data,
                      proc_control_B.z_size);
                  }

                  if (fabs(proc_control_B.t_b - proc_control_B.cVal_h) <
                      2.2204460492503131E-16) {
                    if (proc_control_B.nA_a + 1 == b_degrees) {
                      proc_control_B.TotalFreeMoves_k = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA_a++;
                      proc_control_B.iC[proc_control_B.nA_a] =
                        proc_control_B.kNext + 1;
                      proc_control_B.kDrop = proc_control_B.nA_a;
                      exitg3 = false;
                      while ((!exitg3) && (proc_control_B.kDrop + 1 > 1)) {
                        proc_control_B.idx =
                          proc_control_B.iC[proc_control_B.kDrop - 1];
                        if (proc_control_B.iC[proc_control_B.kDrop] >
                            proc_control_B.idx) {
                          exitg3 = true;
                        } else {
                          proc_control_B.scalarLB_f =
                            proc_control_B.iC[proc_control_B.kDrop];
                          proc_control_B.iC[proc_control_B.kDrop] =
                            proc_control_B.idx;
                          proc_control_B.iC[proc_control_B.kDrop - 1] =
                            proc_control_B.scalarLB_f;
                          proc_control_B.kDrop--;
                        }
                      }

                      proc_control_B.b_iA[proc_control_B.kNext] = true;
                      proc_control_B.kNext = -1;
                      proc_control_B.TotalFreeMoves_k++;
                    }
                  } else {
                    proc_control_B.TotalFreeMoves_k++;
                  }
                } else {
                  proc_control_B.TotalFreeMoves_k++;
                }
              }
            }
          } else {
            proc_control_B.cMin_h = proc_control_norm(zopt_data, zopt_size);
            if (fabs(proc_control_B.cMin_h - proc_control_B.Xnorm0_h) > 0.001) {
              proc_control_B.Xnorm0_h = proc_control_B.cMin_h;
              proc_control_B.kNext = Bc.size(0);
              proc_control_B.cTol.set_size(Bc.size(0));
              for (proc_control_B.kDrop = 0; proc_control_B.kDrop <
                   proc_control_B.kNext; proc_control_B.kDrop++) {
                proc_control_B.cTol[proc_control_B.kDrop] = fabs
                  (Bc[proc_control_B.kDrop]);
                if (proc_control_B.cTol[proc_control_B.kDrop] >= 1.0) {
                } else {
                  proc_control_B.cTol[proc_control_B.kDrop] = 1.0;
                }
              }

              proc_control_B.cTolComputed_h = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }

  *status = proc_control_B.TotalFreeMoves_k;
  if ((proc_control_B.TotalFreeMoves_k < 0) || (proc_control_B.TotalFreeMoves_k ==
       0)) {
    zopt_size[0] = b_degrees;
    if (b_degrees - 1 >= 0) {
      memset(&zopt_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S107>/VariableHorizonOptimizer'
void proc_control::proc_contr_mpcblock_optimizerPM(const coder::array<real_T, 1U>
  &rseq, const coder::array<real_T, 1U> &vseq, const real_T umin[8], const
  real_T umax[8], const real_T x[21], const real_T old_u[8], const real_T Mlim0
  [226], const real_T utargetseq[80], int32_T b_p, int32_T moves, const real_T
  b_uoff[8], const real_T H0[81], const real_T Ac0[2034], const real_T ywt[13],
  const real_T uwt[8], const real_T duwt[8], const real_T b_A[441], const coder::
  array<real_T, 3U> &Bu, const coder::array<real_T, 3U> &Bv, const real_T b_C
  [273], const coder::array<real_T, 3U> &Dv, real_T u[8], real_T useq[88],
  real_T *status)
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  static const int16_T v[226] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141,
    142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162,
    163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180,
    181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201,
    202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219,
    220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240,
    241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258,
    259, 260, 261, 262, 263, 264, 265, 266, 267, 340, 341, 342, 343, 344, 345,
    346, 347 };

  boolean_T exitg1;
  memset(&useq[0], 0, 88U * sizeof(real_T));
  if (b_p > 10) {
    b_p = 10;
  }

  if (b_p <= 1) {
    b_p = 1;
  }

  proc_control_B.pny = b_p * 13;
  proc_control_B.pny_d = b_p << 3;
  if (b_p <= moves) {
    proc_control_B.nmoves = b_p;
  } else {
    proc_control_B.nmoves = moves;
  }

  proc_control_B.TotalFreeMoves = proc_control_B.nmoves << 3;
  proc_control_B.Jm_size[0] = proc_control_B.pny_d;
  proc_control_B.Jm_size[1] = proc_control_B.TotalFreeMoves;
  proc_control_B.loop_ub = proc_control_B.pny_d * proc_control_B.TotalFreeMoves;
  if (proc_control_B.loop_ub - 1 >= 0) {
    memset(&proc_control_B.Jm_data[0], 0, static_cast<uint32_T>
           (proc_control_B.loop_ub) * sizeof(real_T));
  }

  proc_control_B.j = 0;
  for (proc_control_B.ioff = 0; proc_control_B.ioff < proc_control_B.nmoves;
       proc_control_B.ioff++) {
    for (proc_control_B.b_j_f = 0; proc_control_B.b_j_f < 8;
         proc_control_B.b_j_f++) {
      proc_control_B.Jm_data[((proc_control_B.j << 3) + proc_control_B.b_j_f) +
        proc_control_B.pny_d * ((proc_control_B.ioff << 3) +
        proc_control_B.b_j_f)] = 1.0;
    }

    proc_control_B.j++;
  }

  proc_control_B.tmp_size_l[0] = b_p;
  proc_control_kron(proc_control_B.tmp_size_l, proc_control_B.I1_data,
                    proc_control_B.I1_size);
  proc_control_mpc_constraintcoef(b_A, &(*(coder::array<real_T, 3U> *)&Bu)[0],
    &(*(coder::array<real_T, 3U> *)&Bv)[0], b_C, &(*(coder::array<real_T, 3U> *)
    &Dv)[0], proc_control_B.Jm_data, proc_control_B.Jm_size,
    proc_control_B.SuJm_data, proc_control_B.SuJm_size, proc_control_B.Sx_data_g,
    proc_control_B.Sx_size, proc_control_B.Su1_data_o, proc_control_B.Su1_size,
    proc_control_B.Hv_data, proc_control_B.Hv_size);
  proc_control_B.nmoves_tmp = proc_control_B.TotalFreeMoves << 1;
  proc_control_B.nmoves = (b_p << 1) * 21 + proc_control_B.nmoves_tmp;
  memset(&proc_control_B.isMrows0[0], 0, 436U * sizeof(boolean_T));
  for (proc_control_B.i_c = 0; proc_control_B.i_c < 226; proc_control_B.i_c++) {
    proc_control_B.isMrows0[v[proc_control_B.i_c]] = true;
  }

  memset(&proc_control_B.Mlimfull0[0], 0, 436U * sizeof(real_T));
  for (proc_control_B.i_c = 0; proc_control_B.i_c < 226; proc_control_B.i_c++) {
    proc_control_B.Mlimfull0[v[proc_control_B.i_c]] = Mlim0[proc_control_B.i_c];
  }

  memset(&proc_control_B.Vfull0[0], 0, 436U * sizeof(real_T));
  for (proc_control_B.i_c = 0; proc_control_B.i_c < 226; proc_control_B.i_c++) {
    proc_control_B.Vfull0[v[proc_control_B.i_c]] = Ac0[proc_control_B.i_c + 1808];
  }

  proc_control_B.isMrows_size[0] = proc_control_B.nmoves;
  if (proc_control_B.nmoves - 1 >= 0) {
    memset(&proc_control_B.isMrows_data[0], 0, static_cast<uint32_T>
           (proc_control_B.nmoves) * sizeof(boolean_T));
  }

  if (proc_control_B.nmoves - 1 >= 0) {
    memset(&proc_control_B.Mlimfull_data[0], 0, static_cast<uint32_T>
           (proc_control_B.nmoves) * sizeof(real_T));
  }

  if (proc_control_B.nmoves - 1 >= 0) {
    memset(&proc_control_B.Vfull_data[0], 0, static_cast<uint32_T>
           (proc_control_B.nmoves) * sizeof(real_T));
  }

  proc_control_Mrows_reshape(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p);
  proc_control_Mrows_reshape_h(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.pny);
  proc_control_B.ioff = b_p * 13 + proc_control_B.pny;
  proc_control_Mrows_reshape_hn(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.ioff);
  proc_control_B.ioff += proc_control_B.pny_d;
  proc_control_Mrows_reshape_hny(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.ioff);
  proc_control_B.ioff += proc_control_B.pny_d;
  proc_control_B.b_q_tmp = static_cast<uint32_T>(proc_control_B.TotalFreeMoves) >>
    3;
  proc_control_B.b_q = proc_control_B.b_q_tmp;
  proc_control_B.u = static_cast<uint32_T>(proc_control_B.TotalFreeMoves) -
    (proc_control_B.b_q_tmp << 3);
  if (proc_control_B.u >= 4U) {
    proc_control_B.b_q = proc_control_B.b_q_tmp + 1U;
  }

  proc_control_Mrows_reshape_hnyc(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    static_cast<int32_T>(proc_control_B.b_q), proc_control_B.ioff);
  proc_control_B.ioff += proc_control_B.TotalFreeMoves;
  proc_control_B.b_q = proc_control_B.b_q_tmp;
  if (proc_control_B.u >= 4U) {
    proc_control_B.b_q = proc_control_B.b_q_tmp + 1U;
  }

  proc_contro_Mrows_reshape_hnycd(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    static_cast<int32_T>(proc_control_B.b_q), proc_control_B.ioff);
  proc_control_B.ioff = proc_cont_combineVectorElements
    (proc_control_B.isMrows_data, proc_control_B.isMrows_size);
  proc_control_B.b_Mrows.set_size(proc_control_B.ioff);
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.ioff;
       proc_control_B.i_c++) {
    proc_control_B.b_Mrows[proc_control_B.i_c] = 0U;
  }

  proc_control_B.b_j_f = -1;
  proc_control_B.j = static_cast<uint16_T>(proc_control_B.nmoves);
  for (proc_control_B.nmoves = 0; proc_control_B.nmoves < proc_control_B.j;
       proc_control_B.nmoves++) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.b_j_f++;
      proc_control_B.b_Mrows[proc_control_B.b_j_f] = static_cast<uint16_T>
        (proc_control_B.nmoves + 1);
    }
  }

  proc_control_B.b_Ac.set_size(proc_control_B.ioff,
    proc_control_B.TotalFreeMoves + 1);
  proc_control_B.loop_ub = (proc_control_B.TotalFreeMoves + 1) *
    proc_control_B.ioff;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub;
       proc_control_B.i_c++) {
    proc_control_B.b_Ac[proc_control_B.i_c] = 0.0;
  }

  proc_control_B.b_Mx.set_size(proc_control_B.ioff, 21);
  proc_control_B.loop_ub = proc_control_B.ioff * 21;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub;
       proc_control_B.i_c++) {
    proc_control_B.b_Mx[proc_control_B.i_c] = 0.0;
  }

  proc_control_B.b_Mu1.set_size(proc_control_B.ioff, 8);
  proc_control_B.loop_ub = proc_control_B.ioff << 3;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub;
       proc_control_B.i_c++) {
    proc_control_B.b_Mu1[proc_control_B.i_c] = 0.0;
  }

  proc_control_B.b_Mv_b = proc_control_B.Hv_size[1];
  proc_control_B.b_Mv.set_size(proc_control_B.ioff, proc_control_B.Hv_size[1]);
  proc_control_B.loop_ub = proc_control_B.ioff * proc_control_B.Hv_size[1];
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub;
       proc_control_B.i_c++) {
    proc_control_B.b_Mv[proc_control_B.i_c] = 0.0;
  }

  proc_control_B.b_Mlim.set_size(proc_control_B.ioff);
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.ioff;
       proc_control_B.i_c++) {
    proc_control_B.b_Mlim[proc_control_B.i_c] = 0.0;
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.b_j_f = 0;
  } else {
    proc_control_B.b_j_f = proc_control_B.ioff;
  }

  proc_control_B.loop_ub = proc_control_B.isMrows_size[0] - 1;
  proc_control_B.nmoves = 0;
  for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.loop_ub;
       proc_control_B.i_c++) {
    if (proc_control_B.isMrows_data[proc_control_B.i_c]) {
      proc_control_B.nmoves++;
    }
  }

  proc_control_B.s_size_idx_0 = proc_control_B.nmoves;
  proc_control_B.nmoves = 0;
  for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.loop_ub;
       proc_control_B.i_c++) {
    if (proc_control_B.isMrows_data[proc_control_B.i_c]) {
      proc_control_B.s_data[proc_control_B.nmoves] = static_cast<int16_T>
        (proc_control_B.i_c);
      proc_control_B.nmoves++;
    }
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.b_j_f;
       proc_control_B.i_c++) {
    proc_control_B.b_Mlim[proc_control_B.i_c] =
      proc_control_B.Mlimfull_data[proc_control_B.s_data[proc_control_B.i_c]];
  }

  proc_control_B.w_size[0] = b_p;
  proc_control_B.w_size[1] = b_p;
  proc_control_B.loop_ub_tmp = b_p * b_p;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub_tmp;
       proc_control_B.i_c++) {
    proc_control_B.w_data[proc_control_B.i_c] = 1.0;
  }

  proc_control_tril(proc_control_B.w_data, proc_control_B.w_size);
  proc_control_eye(proc_control_B.y_tmp);
  proc_control_kron_b(proc_control_B.w_data, proc_control_B.w_size,
                      proc_control_B.y_tmp, proc_control_B.I2Jm_data,
                      proc_control_B.tmp_size);
  proc_control_mtimes(proc_control_B.I2Jm_data, proc_control_B.tmp_size,
                      proc_control_B.Jm_data, proc_control_B.Jm_size,
                      proc_control_B.y_data_c, proc_control_B.y_size);
  proc_control_B.w_size[0] = b_p;
  proc_control_B.w_size[1] = b_p;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub_tmp;
       proc_control_B.i_c++) {
    proc_control_B.w_data[proc_control_B.i_c] = 1.0;
  }

  proc_control_tril(proc_control_B.w_data, proc_control_B.w_size);
  proc_control_kron_b(proc_control_B.w_data, proc_control_B.w_size,
                      proc_control_B.y_tmp, proc_control_B.I2Jm_data,
                      proc_control_B.tmp_size);
  proc_control_mtimes(proc_control_B.I2Jm_data, proc_control_B.tmp_size,
                      proc_control_B.Jm_data, proc_control_B.Jm_size,
                      proc_control_B.varargin_2_data, proc_control_B.w_size);
  proc_control_B.loop_ub = proc_control_B.w_size[0] * proc_control_B.w_size[1];
  if (proc_control_B.loop_ub - 1 >= 0) {
    memcpy(&proc_control_B.I2Jm_data[0], &proc_control_B.varargin_2_data[0],
           static_cast<uint32_T>(proc_control_B.loop_ub) * sizeof(real_T));
  }

  proc_control_eye_f(proc_control_B.TotalFreeMoves, proc_control_B.I3_data,
                     proc_control_B.I3_size);
  proc_control_B.loop_ub = proc_control_B.SuJm_size[0] *
    proc_control_B.SuJm_size[1];
  proc_control_B.j = (proc_control_B.loop_ub / 2) << 1;
  proc_control_B.b_j_f = proc_control_B.j - 2;
  for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.b_j_f;
       proc_control_B.i_c += 2) {
    tmp_2 = _mm_loadu_pd(&proc_control_B.SuJm_data[proc_control_B.i_c]);
    _mm_storeu_pd(&proc_control_B.varargin_2_data[proc_control_B.i_c],
                  _mm_mul_pd(tmp_2, _mm_set1_pd(-1.0)));
  }

  for (proc_control_B.i_c = proc_control_B.j; proc_control_B.i_c <
       proc_control_B.loop_ub; proc_control_B.i_c++) {
    proc_control_B.varargin_2_data[proc_control_B.i_c] =
      -proc_control_B.SuJm_data[proc_control_B.i_c];
  }

  proc_control_B.loop_ub = proc_control_B.y_size[0] * proc_control_B.y_size[1];
  proc_control_B.j = (proc_control_B.loop_ub / 2) << 1;
  proc_control_B.b_j_f = proc_control_B.j - 2;
  for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.b_j_f;
       proc_control_B.i_c += 2) {
    tmp_2 = _mm_loadu_pd(&proc_control_B.y_data_c[proc_control_B.i_c]);
    _mm_storeu_pd(&proc_control_B.varargin_4_data[proc_control_B.i_c],
                  _mm_mul_pd(tmp_2, _mm_set1_pd(-1.0)));
  }

  for (proc_control_B.i_c = proc_control_B.j; proc_control_B.i_c <
       proc_control_B.loop_ub; proc_control_B.i_c++) {
    proc_control_B.varargin_4_data[proc_control_B.i_c] =
      -proc_control_B.y_data_c[proc_control_B.i_c];
  }

  proc_control_B.loop_ub = proc_control_B.I3_size[0] * proc_control_B.I3_size[1];
  proc_control_B.j = (proc_control_B.loop_ub / 2) << 1;
  proc_control_B.b_j_f = proc_control_B.j - 2;
  for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.b_j_f;
       proc_control_B.i_c += 2) {
    tmp_2 = _mm_loadu_pd(&proc_control_B.I3_data[proc_control_B.i_c]);
    _mm_storeu_pd(&proc_control_B.varargin_6_data[proc_control_B.i_c],
                  _mm_mul_pd(tmp_2, _mm_set1_pd(-1.0)));
  }

  for (proc_control_B.i_c = proc_control_B.j; proc_control_B.i_c <
       proc_control_B.loop_ub; proc_control_B.i_c++) {
    proc_control_B.varargin_6_data[proc_control_B.i_c] =
      -proc_control_B.I3_data[proc_control_B.i_c];
  }

  proc_control_B.b_cg = ((proc_control_B.SuJm_size[0] != 0) &&
    (proc_control_B.SuJm_size[1] != 0));
  if (proc_control_B.b_cg) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.SuJm_size[1]);
  } else if ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1]
              != 0)) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.SuJm_size[1]);
  } else if ((proc_control_B.w_size[0] != 0) && (proc_control_B.w_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.y_size[1]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.y_size[1]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
  } else {
    proc_control_B.b_j_f = proc_control_B.SuJm_size[1];
    if (proc_control_B.y_size[1] > proc_control_B.b_j_f) {
      proc_control_B.b_j_f = proc_control_B.y_size[1];
    }

    if (proc_control_B.y_size[1] > proc_control_B.b_j_f) {
      proc_control_B.b_j_f = proc_control_B.y_size[1];
    }

    if (proc_control_B.I3_size[1] > proc_control_B.b_j_f) {
      proc_control_B.b_j_f = proc_control_B.I3_size[1];
    }

    if (proc_control_B.I3_size[1] > proc_control_B.b_j_f) {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
    } else {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.b_j_f);
    }
  }

  proc_control_B.empty_non_axis_sizes_g = (proc_control_B.sizes_idx_1 == 0);
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_d[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else if (proc_control_B.b_cg) {
    proc_control_B.empty_non_axis_sizes_d[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_d[0] = 0U;
  }

  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_j[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else if ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1]
              != 0)) {
    proc_control_B.empty_non_axis_sizes_j[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_j[0] = 0U;
  }

  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_k[0] = static_cast<uint8_T>
      (proc_control_B.y_size[0]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes_k[0] = static_cast<uint8_T>
      (proc_control_B.y_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_k[0] = 0U;
  }

  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes[0] = static_cast<int8_T>
      (proc_control_B.y_size[0]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes[0] = static_cast<int8_T>
      (proc_control_B.y_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes[0] = 0;
  }

  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_m[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes_m[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_m[0] = 0;
  }

  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_i[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes_i[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_i[0] = 0;
  }

  proc_control_B.Mu_size_idx_0 = ((((proc_control_B.empty_non_axis_sizes_d[0] +
    proc_control_B.empty_non_axis_sizes_j[0]) +
    proc_control_B.empty_non_axis_sizes_k[0]) +
    proc_control_B.empty_non_axis_sizes[0]) +
    proc_control_B.empty_non_axis_sizes_m[0]) +
    proc_control_B.empty_non_axis_sizes_i[0];
  proc_control_B.loop_ub_tmp = proc_control_B.sizes_idx_1;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub_tmp;
       proc_control_B.i_c++) {
    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes_d[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mu_data[proc_control_B.i_ca + proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_c] =
        proc_control_B.SuJm_data[proc_control_B.empty_non_axis_sizes_d[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes_j[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mu_data[(proc_control_B.i_ca +
        proc_control_B.empty_non_axis_sizes_d[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.i_c] =
        proc_control_B.varargin_2_data[proc_control_B.empty_non_axis_sizes_j[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes_k[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mu_data[((proc_control_B.i_ca +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_j[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.i_c] =
        proc_control_B.I2Jm_data[proc_control_B.empty_non_axis_sizes_k[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mu_data[(((proc_control_B.i_ca +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_j[0]) +
        proc_control_B.empty_non_axis_sizes_k[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.i_c] =
        proc_control_B.varargin_4_data[proc_control_B.empty_non_axis_sizes[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes_m[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mu_data[((((proc_control_B.i_ca +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_j[0]) +
        proc_control_B.empty_non_axis_sizes_k[0]) +
        proc_control_B.empty_non_axis_sizes[0]) + proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_c] =
        proc_control_B.I3_data[proc_control_B.empty_non_axis_sizes_m[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes_i[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mu_data[(((((proc_control_B.i_ca +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_j[0]) +
        proc_control_B.empty_non_axis_sizes_k[0]) +
        proc_control_B.empty_non_axis_sizes[0]) +
        proc_control_B.empty_non_axis_sizes_m[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.i_c] =
        proc_control_B.varargin_6_data[proc_control_B.empty_non_axis_sizes_i[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }
  }

  proc_control_B.nmoves = (proc_control_B.pny_d + proc_control_B.TotalFreeMoves)
    << 1;
  proc_control_B.loop_ub = proc_control_B.Hv_size[0] * proc_control_B.Hv_size[1];
  proc_control_B.j = (proc_control_B.loop_ub / 2) << 1;
  proc_control_B.b_j_f = proc_control_B.j - 2;
  for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.b_j_f;
       proc_control_B.i_c += 2) {
    tmp_2 = _mm_loadu_pd(&proc_control_B.Hv_data[proc_control_B.i_c]);
    _mm_storeu_pd(&proc_control_B.varargin_1_data_a[proc_control_B.i_c],
                  _mm_mul_pd(tmp_2, _mm_set1_pd(-1.0)));
  }

  for (proc_control_B.i_c = proc_control_B.j; proc_control_B.i_c <
       proc_control_B.loop_ub; proc_control_B.i_c++) {
    proc_control_B.varargin_1_data_a[proc_control_B.i_c] =
      -proc_control_B.Hv_data[proc_control_B.i_c];
  }

  proc_control_B.b_cg = ((proc_control_B.Hv_size[0] != 0) &&
    (proc_control_B.Hv_size[1] != 0));
  if (proc_control_B.b_cg) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else if ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else if ((proc_control_B.nmoves != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else {
    proc_control_B.j = proc_control_B.Hv_size[1];
    if (proc_control_B.Hv_size[1] > proc_control_B.j) {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
    } else {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.j);
    }
  }

  if (proc_control_B.b_cg) {
    proc_control_B.varargin_1_m[0] = static_cast<uint8_T>
      (proc_control_B.Hv_size[0]);
  } else {
    proc_control_B.varargin_1_m[0] = 0U;
  }

  if ((proc_control_B.nmoves != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.j = proc_control_B.nmoves;
  } else {
    proc_control_B.j = 0;
  }

  if ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.empty_non_axis_sizes_d[0] = static_cast<uint8_T>
      (proc_control_B.Hv_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_d[0] = 0U;
  }

  proc_control_B.varargin_2_p = proc_control_B.sizes_idx_1;
  proc_control_B.Mv_aux_size_idx_0 = (proc_control_B.varargin_1_m[0] +
    proc_control_B.empty_non_axis_sizes_d[0]) + proc_control_B.j;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.varargin_2_p;
       proc_control_B.i_c++) {
    proc_control_B.loop_ub = proc_control_B.varargin_1_m[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mv_aux_data[proc_control_B.i_ca +
        proc_control_B.Mv_aux_size_idx_0 * proc_control_B.i_c] =
        proc_control_B.varargin_1_data_a[proc_control_B.varargin_1_m[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    proc_control_B.loop_ub = proc_control_B.empty_non_axis_sizes_d[0];
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.loop_ub;
         proc_control_B.i_ca++) {
      proc_control_B.Mv_aux_data[(proc_control_B.i_ca +
        proc_control_B.varargin_1_m[0]) + proc_control_B.Mv_aux_size_idx_0 *
        proc_control_B.i_c] =
        proc_control_B.Hv_data[proc_control_B.empty_non_axis_sizes_d[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.j;
         proc_control_B.i_ca++) {
      proc_control_B.Mv_aux_data[((proc_control_B.i_ca +
        proc_control_B.varargin_1_m[0]) + proc_control_B.empty_non_axis_sizes_d
        [0]) + proc_control_B.Mv_aux_size_idx_0 * proc_control_B.i_c] = 0.0;
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.j = 0;
  } else {
    proc_control_B.j = proc_control_B.ioff;
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.loop_ub_tmp;
       proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca <
         proc_control_B.s_size_idx_0; proc_control_B.i_ca++) {
      proc_control_B.Mu_data_c[proc_control_B.i_ca + proc_control_B.s_size_idx_0
        * proc_control_B.i_c] =
        -proc_control_B.Mu_data[proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_c + proc_control_B.s_data[proc_control_B.i_ca]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.loop_ub_tmp = 0;
  } else {
    proc_control_B.loop_ub_tmp = proc_control_B.ioff;
  }

  if (static_cast<real_T>(proc_control_B.TotalFreeMoves + 1) - 1.0 < 1.0) {
    proc_control_B.b_j_f = 0;
  } else {
    proc_control_B.b_j_f = proc_control_B.TotalFreeMoves;
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.b_j_f;
       proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.j;
         proc_control_B.i_ca++) {
      proc_control_B.b_Ac[proc_control_B.i_ca + proc_control_B.b_Ac.size(0) *
        proc_control_B.i_c] =
        proc_control_B.Mu_data_c[proc_control_B.loop_ub_tmp * proc_control_B.i_c
        + proc_control_B.i_ca];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.j = 0;
  } else {
    proc_control_B.j = proc_control_B.ioff;
  }

  proc_control_B.b_j_f = proc_control_B.b_Ac.size(1);
  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.j;
       proc_control_B.i_c++) {
    proc_control_B.b_Ac[proc_control_B.i_c + proc_control_B.b_Ac.size(0) *
      (proc_control_B.b_j_f - 1)] =
      proc_control_B.Vfull_data[proc_control_B.s_data[proc_control_B.i_c]];
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.j = 0;
  } else {
    proc_control_B.j = proc_control_B.ioff;
  }

  proc_control_B.loop_ub_tmp = (proc_control_B.Sx_size[0] +
    proc_control_B.Sx_size[0]) + proc_control_B.nmoves;
  proc_control_B.b_j_f = proc_control_B.Sx_size[0];
  for (proc_control_B.i_c = 0; proc_control_B.i_c < 21; proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.b_j_f;
         proc_control_B.i_ca++) {
      proc_control_B.Sx_data_tmp =
        proc_control_B.Sx_data_g[proc_control_B.Sx_size[0] * proc_control_B.i_c
        + proc_control_B.i_ca];
      proc_control_B.loop_ub = proc_control_B.loop_ub_tmp * proc_control_B.i_c;
      proc_control_B.Sx_data[proc_control_B.i_ca + proc_control_B.loop_ub] =
        -proc_control_B.Sx_data_tmp;
      proc_control_B.Sx_data[(proc_control_B.i_ca + proc_control_B.Sx_size[0]) +
        proc_control_B.loop_ub] = proc_control_B.Sx_data_tmp;
    }

    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.nmoves;
         proc_control_B.i_ca++) {
      proc_control_B.Sx_data[((proc_control_B.i_ca + proc_control_B.Sx_size[0])
        + proc_control_B.Sx_size[0]) + proc_control_B.loop_ub_tmp *
        proc_control_B.i_c] = 0.0;
    }
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < 21; proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.j;
         proc_control_B.i_ca++) {
      proc_control_B.b_Mx[proc_control_B.i_ca + proc_control_B.b_Mx.size(0) *
        proc_control_B.i_c] = proc_control_B.Sx_data[proc_control_B.loop_ub_tmp *
        proc_control_B.i_c + proc_control_B.s_data[proc_control_B.i_ca]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.nmoves = 0;
  } else {
    proc_control_B.nmoves = proc_control_B.ioff;
  }

  proc_control_B.loop_ub = (((proc_control_B.Su1_size[0] +
    proc_control_B.Su1_size[0]) + proc_control_B.I1_size[0]) +
    proc_control_B.I1_size[0]) + proc_control_B.nmoves_tmp;
  proc_control_B.Mu_size_idx_0 = proc_control_B.Su1_size[0];
  proc_control_B.loop_ub_tmp = proc_control_B.I1_size[0];
  for (proc_control_B.i_c = 0; proc_control_B.i_c < 8; proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca <
         proc_control_B.Mu_size_idx_0; proc_control_B.i_ca++) {
      proc_control_B.Sx_data_tmp =
        proc_control_B.Su1_data_o[proc_control_B.Su1_size[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
      proc_control_B.b_j_f = proc_control_B.loop_ub * proc_control_B.i_c;
      proc_control_B.Su1_data[proc_control_B.i_ca + proc_control_B.b_j_f] =
        -proc_control_B.Sx_data_tmp;
      proc_control_B.Su1_data[(proc_control_B.i_ca + proc_control_B.Su1_size[0])
        + proc_control_B.b_j_f] = proc_control_B.Sx_data_tmp;
    }

    proc_control_B.j = (proc_control_B.loop_ub_tmp / 2) << 1;
    proc_control_B.b_j_f = proc_control_B.j - 2;
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca <= proc_control_B.b_j_f;
         proc_control_B.i_ca += 2) {
      tmp_2 = _mm_loadu_pd(&proc_control_B.I1_data[proc_control_B.I1_size[0] *
                           proc_control_B.i_c + proc_control_B.i_ca]);
      _mm_storeu_pd(&proc_control_B.Su1_data[((proc_control_B.i_ca +
        proc_control_B.Su1_size[0]) + proc_control_B.Su1_size[0]) +
                    proc_control_B.loop_ub * proc_control_B.i_c], _mm_mul_pd
                    (tmp_2, _mm_set1_pd(-1.0)));
    }

    for (proc_control_B.i_ca = proc_control_B.j; proc_control_B.i_ca <
         proc_control_B.loop_ub_tmp; proc_control_B.i_ca++) {
      proc_control_B.Su1_data[((proc_control_B.i_ca + proc_control_B.Su1_size[0])
        + proc_control_B.Su1_size[0]) + proc_control_B.loop_ub *
        proc_control_B.i_c] = -proc_control_B.I1_data[proc_control_B.I1_size[0] *
        proc_control_B.i_c + proc_control_B.i_ca];
    }

    for (proc_control_B.i_ca = 0; proc_control_B.i_ca <
         proc_control_B.loop_ub_tmp; proc_control_B.i_ca++) {
      proc_control_B.Su1_data[(((proc_control_B.i_ca + proc_control_B.Su1_size[0])
        + proc_control_B.Su1_size[0]) + proc_control_B.I1_size[0]) +
        proc_control_B.loop_ub * proc_control_B.i_c] =
        proc_control_B.I1_data[proc_control_B.I1_size[0] * proc_control_B.i_c +
        proc_control_B.i_ca];
    }

    for (proc_control_B.i_ca = 0; proc_control_B.i_ca <
         proc_control_B.nmoves_tmp; proc_control_B.i_ca++) {
      proc_control_B.Su1_data[((((proc_control_B.i_ca + proc_control_B.Su1_size
        [0]) + proc_control_B.Su1_size[0]) + proc_control_B.I1_size[0]) +
        proc_control_B.I1_size[0]) + proc_control_B.loop_ub * proc_control_B.i_c]
        = 0.0;
    }
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < 8; proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.nmoves;
         proc_control_B.i_ca++) {
      proc_control_B.b_Mu1[proc_control_B.i_ca + proc_control_B.b_Mu1.size(0) *
        proc_control_B.i_c] = proc_control_B.Su1_data[proc_control_B.loop_ub *
        proc_control_B.i_c + proc_control_B.s_data[proc_control_B.i_ca]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.b_j_f = 0;
  } else {
    proc_control_B.b_j_f = proc_control_B.ioff;
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.varargin_2_p;
       proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca <
         proc_control_B.s_size_idx_0; proc_control_B.i_ca++) {
      proc_control_B.Mv_aux_data_d[proc_control_B.i_ca +
        proc_control_B.s_size_idx_0 * proc_control_B.i_c] =
        proc_control_B.Mv_aux_data[proc_control_B.Mv_aux_size_idx_0 *
        proc_control_B.i_c + proc_control_B.s_data[proc_control_B.i_ca]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.nmoves = 0;
  } else {
    proc_control_B.nmoves = proc_control_B.ioff;
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.b_Mv_b;
       proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.b_j_f;
         proc_control_B.i_ca++) {
      proc_control_B.b_Mv[proc_control_B.i_ca + proc_control_B.b_Mv.size(0) *
        proc_control_B.i_c] = proc_control_B.Mv_aux_data_d[proc_control_B.nmoves
        * proc_control_B.i_c + proc_control_B.i_ca];
    }
  }

  proc_control_B.b_H_size[0] = proc_control_B.TotalFreeMoves + 1;
  proc_control_B.b_H_size[1] = proc_control_B.TotalFreeMoves + 1;
  proc_control_B.loop_ub = (proc_control_B.TotalFreeMoves + 1) *
    (proc_control_B.TotalFreeMoves + 1);
  if (proc_control_B.loop_ub - 1 >= 0) {
    memset(&proc_control_B.b_H_data_g[0], 0, static_cast<uint32_T>
           (proc_control_B.loop_ub) * sizeof(real_T));
  }

  proc_control_B.b_H_data_g[proc_control_B.TotalFreeMoves +
    (proc_control_B.TotalFreeMoves + 1) * proc_control_B.TotalFreeMoves] = H0[80];
  proc_control_updateWeights(ywt, proc_control_B.dv12);
  proc_control_updateWeights_c(uwt, proc_control_B.umax_incr);
  proc_control_updateWeights_c(duwt, proc_control_B.umin_incr);
  proc_contr_mpc_calculatehessian(proc_control_B.dv12, proc_control_B.umax_incr,
    proc_control_B.umin_incr, proc_control_B.SuJm_data, proc_control_B.SuJm_size,
    proc_control_B.y_data_c, proc_control_B.y_size, proc_control_B.Jm_data,
    proc_control_B.Jm_size, proc_control_B.I1_data, proc_control_B.I1_size,
    proc_control_B.Su1_data_o, proc_control_B.Su1_size, proc_control_B.Sx_data_g,
    proc_control_B.Sx_size, proc_control_B.Hv_data, proc_control_B.Hv_size,
    proc_control_B.I2Jm_data, proc_control_B.tmp_size, proc_control_B.Ku1_data,
    proc_control_B.Ku1_size, proc_control_B.I3_data, proc_control_B.I3_size,
    proc_control_B.Kx_data, proc_control_B.Kx_size,
    proc_control_B.varargin_4_data, proc_control_B.varargin_4_size,
    proc_control_B.varargin_2_data, proc_control_B.w_size);
  if (proc_control_B.TotalFreeMoves < 1) {
    proc_control_B.b_j_f = 0;
    proc_control_B.nmoves = 0;
  } else {
    proc_control_B.b_j_f = proc_control_B.TotalFreeMoves;
    proc_control_B.nmoves = proc_control_B.TotalFreeMoves;
  }

  for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.nmoves;
       proc_control_B.i_c++) {
    for (proc_control_B.i_ca = 0; proc_control_B.i_ca < proc_control_B.b_j_f;
         proc_control_B.i_ca++) {
      proc_control_B.b_H_data_g[proc_control_B.i_ca +
        (proc_control_B.TotalFreeMoves + 1) * proc_control_B.i_c] =
        proc_control_B.I2Jm_data[proc_control_B.b_j_f * proc_control_B.i_c +
        proc_control_B.i_ca];
    }
  }

  proc_control_mpc_checkhessian(proc_control_B.b_H_data_g,
    proc_control_B.b_H_size, proc_control_B.b_Linv_data, proc_control_B.Jm_size,
    &proc_control_B.Sx_data_tmp);
  if (proc_control_B.Sx_data_tmp > 1.0) {
    proc_control_B.pny = 0;
    for (proc_control_B.pny_d = 0; proc_control_B.pny_d < 8;
         proc_control_B.pny_d++) {
      u[proc_control_B.pny_d] = old_u[proc_control_B.pny_d] +
        b_uoff[proc_control_B.pny_d];
      for (proc_control_B.i_c = 0; proc_control_B.i_c < 11; proc_control_B.i_c++)
      {
        useq[proc_control_B.i_c + proc_control_B.pny] = u[proc_control_B.pny_d];
      }

      proc_control_B.pny += 11;
    }

    *status = -2.0;
  } else {
    proc_control_eye_f3(proc_control_B.TotalFreeMoves + 1,
                        proc_control_B.tmp_data_g, proc_control_B.tmp_size);
    proc_control_linsolve(proc_control_B.b_Linv_data, proc_control_B.Jm_size,
                          proc_control_B.tmp_data_g, proc_control_B.tmp_size,
                          proc_control_B.b_H_data_g, proc_control_B.b_H_size);
    proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r);
    if (proc_control_B.b_Mlim.size(0) == 1) {
      proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r8);
      proc_control_B.i_c = proc_control_B.r8.size(0);
      proc_control_B.i_ca = proc_control_B.r.size(0);
    } else {
      proc_control_B.i_c = proc_control_B.b_Mlim.size(0);
      proc_control_B.i_ca = proc_control_B.b_Mlim.size(0);
    }

    if (proc_control_B.i_ca == 1) {
      proc_control_mtimes_afai(proc_control_B.b_Mu1, old_u, proc_control_B.r7);
      proc_control_B.i_ca = proc_control_B.r7.size(0);
    } else if (proc_control_B.b_Mlim.size(0) == 1) {
      proc_control_B.i_ca = proc_control_B.r.size(0);
    } else {
      proc_control_B.i_ca = proc_control_B.ioff;
    }

    proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r4);
    proc_control_mtimes_afai(proc_control_B.b_Mu1, old_u, proc_control_B.r5);
    proc_control_mtimes_afai0(proc_control_B.b_Mv, vseq, proc_control_B.r6);
    if ((proc_control_B.b_Mlim.size(0) == proc_control_B.r4.size(0)) &&
        (proc_control_B.i_c == proc_control_B.r5.size(0)) &&
        (proc_control_B.i_ca == proc_control_B.r6.size(0))) {
      proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r);
      proc_control_mtimes_afai(proc_control_B.b_Mu1, old_u, proc_control_B.r1);
      proc_control_mtimes_afai0(proc_control_B.b_Mv, vseq, proc_control_B.r2);
      proc_control_B.Bc.set_size(proc_control_B.ioff);
      proc_control_B.j = (proc_control_B.ioff / 2) << 1;
      proc_control_B.b_j_f = proc_control_B.j - 2;
      for (proc_control_B.i_c = 0; proc_control_B.i_c <= proc_control_B.b_j_f;
           proc_control_B.i_c += 2) {
        tmp_2 = _mm_loadu_pd(&proc_control_B.b_Mlim[proc_control_B.i_c]);
        tmp = _mm_loadu_pd(&proc_control_B.r[proc_control_B.i_c]);
        tmp_0 = _mm_loadu_pd(&proc_control_B.r1[proc_control_B.i_c]);
        tmp_1 = _mm_loadu_pd(&proc_control_B.r2[proc_control_B.i_c]);
        _mm_storeu_pd(&proc_control_B.Bc[proc_control_B.i_c], _mm_mul_pd
                      (_mm_add_pd(_mm_add_pd(_mm_add_pd(tmp_2, tmp), tmp_0),
          tmp_1), _mm_set1_pd(-1.0)));
      }

      for (proc_control_B.i_c = proc_control_B.j; proc_control_B.i_c <
           proc_control_B.ioff; proc_control_B.i_c++) {
        proc_control_B.Bc[proc_control_B.i_c] =
          -(((proc_control_B.b_Mlim[proc_control_B.i_c] +
              proc_control_B.r[proc_control_B.i_c]) +
             proc_control_B.r1[proc_control_B.i_c]) +
            proc_control_B.r2[proc_control_B.i_c]);
      }
    } else {
      proc_control_binary_expand_op_7(proc_control_B.Bc, proc_control_B.b_Mlim,
        proc_control_B.b_Mx, x, proc_control_B.b_Mu1, old_u, proc_control_B.b_Mv,
        vseq);
    }

    memset(&proc_control_B.umax_incr[0], 0, sizeof(real_T) << 3U);
    memset(&proc_control_B.umin_incr[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.i_c = 0; proc_control_B.i_c < 8; proc_control_B.i_c++) {
      proc_control_B.umax_incr_flag[proc_control_B.i_c] = false;
      proc_control_B.umin_incr_flag[proc_control_B.i_c] = false;
    }

    if ((proc_control_B.b_Mrows.size(0) != 0) && (proc_control_B.b_Mrows[0] > 0))
    {
      proc_control_B.b_j_f = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_j_f <= proc_control_B.b_Mrows.size(0)
                           - 1)) {
        if (proc_control_B.b_Mrows[proc_control_B.b_j_f] <= proc_control_B.pny)
        {
          proc_control_B.b_j_f++;
        } else {
          proc_control_B.i_c = proc_control_B.pny << 1;
          if (proc_control_B.b_Mrows[proc_control_B.b_j_f] <= proc_control_B.i_c)
          {
            proc_control_B.b_j_f++;
          } else if (proc_control_B.b_Mrows[proc_control_B.b_j_f] <=
                     proc_control_B.i_c + proc_control_B.pny_d) {
            proc_control_B.j = (proc_control_B.b_Mrows[proc_control_B.b_j_f] -
                                proc_control_B.i_c) - 1;
            proc_control_B.nmoves_tmp = proc_control_B.j - ((proc_control_B.j >>
              3) << 3);
            if (!proc_control_B.umax_incr_flag[proc_control_B.nmoves_tmp]) {
              proc_control_B.Sx_data_tmp = -(umax[proc_control_B.nmoves_tmp] -
                b_uoff[proc_control_B.nmoves_tmp]) -
                (-proc_control_B.b_Mlim[proc_control_B.b_j_f]);
            } else {
              proc_control_B.Sx_data_tmp =
                proc_control_B.umax_incr[proc_control_B.nmoves_tmp];
            }

            proc_control_B.umax_incr[proc_control_B.nmoves_tmp] =
              proc_control_B.Sx_data_tmp;
            proc_control_B.umax_incr_flag[proc_control_B.nmoves_tmp] = true;
            proc_control_B.Bc[proc_control_B.b_j_f] =
              proc_control_B.Bc[proc_control_B.b_j_f] +
              proc_control_B.Sx_data_tmp;
            proc_control_B.b_j_f++;
          } else if (proc_control_B.b_Mrows[proc_control_B.b_j_f] <=
                     ((proc_control_B.pny + proc_control_B.pny_d) << 1)) {
            proc_control_B.j = ((proc_control_B.b_Mrows[proc_control_B.b_j_f] -
                                 proc_control_B.i_c) - proc_control_B.pny_d) - 1;
            proc_control_B.nmoves_tmp = proc_control_B.j - ((proc_control_B.j >>
              3) << 3);
            if (!proc_control_B.umin_incr_flag[proc_control_B.nmoves_tmp]) {
              proc_control_B.Sx_data_tmp = (umin[proc_control_B.nmoves_tmp] -
                b_uoff[proc_control_B.nmoves_tmp]) -
                (-proc_control_B.b_Mlim[proc_control_B.b_j_f]);
            } else {
              proc_control_B.Sx_data_tmp =
                proc_control_B.umin_incr[proc_control_B.nmoves_tmp];
            }

            proc_control_B.umin_incr[proc_control_B.nmoves_tmp] =
              proc_control_B.Sx_data_tmp;
            proc_control_B.umin_incr_flag[proc_control_B.nmoves_tmp] = true;
            proc_control_B.Bc[proc_control_B.b_j_f] =
              proc_control_B.Bc[proc_control_B.b_j_f] +
              proc_control_B.Sx_data_tmp;
            proc_control_B.b_j_f++;
          } else {
            exitg1 = true;
          }
        }
      }
    }

    memcpy(&proc_control_B.utargetseq_data[0], &utargetseq[0],
           static_cast<uint32_T>(proc_control_B.pny_d) * sizeof(real_T));
    proc_control_B.r3.set_size(proc_control_B.ioff);
    for (proc_control_B.i_c = 0; proc_control_B.i_c < proc_control_B.ioff;
         proc_control_B.i_c++) {
      proc_control_B.r3[proc_control_B.i_c] = false;
    }

    proc_control_mtimes_a(proc_control_B.b_H_data_g, proc_control_B.b_H_size,
                          proc_control_B.b_H_data_g, proc_control_B.b_H_size,
                          proc_control_B.tmp_data_g, proc_control_B.tmp_size);
    proc_control_mpc_solveQP(x, proc_control_B.ioff,
      proc_control_B.TotalFreeMoves + 1, proc_control_B.Kx_data,
      proc_control_B.varargin_2_data, proc_control_B.w_size, rseq,
      proc_control_B.Ku1_data, old_u, proc_control_B.varargin_4_data,
      proc_control_B.varargin_4_size, vseq, proc_control_B.I3_data,
      proc_control_B.I3_size, proc_control_B.utargetseq_data,
      proc_control_B.b_H_data_g, proc_control_B.b_H_size,
      proc_control_B.tmp_data_g, proc_control_B.tmp_size, proc_control_B.b_Ac,
      proc_control_B.Bc, proc_control_B.r3, proc_control_B.zopt_data,
      proc_control_B.tmp_size_l, proc_control_B.f_data,
      proc_control_B.isMrows_size, status);
    for (proc_control_B.pny = 0; proc_control_B.pny <= 6; proc_control_B.pny +=
         2) {
      tmp_2 = _mm_loadu_pd(&proc_control_B.zopt_data[proc_control_B.pny]);
      _mm_storeu_pd(&u[proc_control_B.pny], _mm_add_pd(_mm_add_pd(_mm_loadu_pd
        (&old_u[proc_control_B.pny]), tmp_2), _mm_loadu_pd
        (&b_uoff[proc_control_B.pny])));
    }
  }
}

boolean_T proc_control::proc_control_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control::proc_control_isequal_p(const real_T varargin_1[6], const
  real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
real_T proc_control::proc_control_norm_nt(const real_T x[169])
{
  real_T y;
  int32_T j;
  boolean_T exitg1;
  y = 0.0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j < 13)) {
    real_T s;
    s = 0.0;
    for (int32_T i = 0; i < 13; i++) {
      s += fabs(x[13 * j + i]);
    }

    if (rtIsNaN(s)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (s > y) {
        y = s;
      }

      j++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_mpower_g(const real_T a[169], real_T b, real_T
  c[169])
{
  proc_control_B.e_o = fabs(b);
  if (proc_control_B.e_o <= 2.147483647E+9) {
    memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    proc_control_B.n_k = static_cast<int32_T>(proc_control_B.e_o);
    proc_control_B.b_n = static_cast<int32_T>(proc_control_B.e_o);
    proc_control_B.nbitson_d = 0;
    proc_control_B.nb_d = -2;
    while (proc_control_B.b_n > 0) {
      proc_control_B.nb_d++;
      if ((static_cast<uint32_T>(proc_control_B.b_n) & 1U) != 0U) {
        proc_control_B.nbitson_d++;
      }

      proc_control_B.b_n >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_o) <= 2) {
      if (b == 2.0) {
        proc_control_B.b_n = 0;
        for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21
             ++) {
          for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
               proc_control_B.i19++) {
            proc_control_B.e_o = 0.0;
            proc_control_B.i22 = 0;
            for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                 proc_control_B.i20++) {
              proc_control_B.e_o += a[proc_control_B.i22 + proc_control_B.i19] *
                a[proc_control_B.i20 + proc_control_B.b_n];
              proc_control_B.i22 += 13;
            }

            c[proc_control_B.i19 + proc_control_B.b_n] = proc_control_B.e_o;
          }

          proc_control_B.b_n += 13;
        }
      } else {
        proc_control_B.firstmult_n = false;
        for (proc_control_B.n_k = 0; proc_control_B.n_k < 169;
             proc_control_B.n_k++) {
          if (!proc_control_B.firstmult_n) {
            proc_control_B.firstmult_n = rtIsNaN(a[proc_control_B.n_k]);
          }
        }

        if (proc_control_B.firstmult_n) {
          for (proc_control_B.b_n = 0; proc_control_B.b_n < 169;
               proc_control_B.b_n++) {
            c[proc_control_B.b_n] = (rtNaN);
          }
        } else {
          memset(&c[0], 0, 169U * sizeof(real_T));
          proc_control_B.b_n = 0;
          for (proc_control_B.n_k = 0; proc_control_B.n_k < 13;
               proc_control_B.n_k++) {
            c[proc_control_B.b_n] = 1.0;
            proc_control_B.b_n += 14;
          }
        }
      }
    } else {
      proc_control_B.firstmult_n = true;
      proc_control_B.aBufferInUse_c = false;
      proc_control_B.cBufferInUse_c = ((static_cast<uint32_T>
        (proc_control_B.nbitson_d) & 1U) == 0U);
      for (proc_control_B.nbitson_d = 0; proc_control_B.nbitson_d <=
           proc_control_B.nb_d; proc_control_B.nbitson_d++) {
        if ((static_cast<uint32_T>(proc_control_B.n_k) & 1U) != 0U) {
          if (proc_control_B.firstmult_n) {
            proc_control_B.firstmult_n = false;
            if (proc_control_B.cBufferInUse_c) {
              if (proc_control_B.aBufferInUse_c) {
                memcpy(&proc_control_B.cBuffer_o[0], &proc_control_B.aBuffer_b[0],
                       169U * sizeof(real_T));
              } else {
                memcpy(&proc_control_B.cBuffer_o[0], &proc_control_B.b_a[0],
                       169U * sizeof(real_T));
              }
            } else if (proc_control_B.aBufferInUse_c) {
              memcpy(&c[0], &proc_control_B.aBuffer_b[0], 169U * sizeof(real_T));
            } else {
              memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            }
          } else {
            if (proc_control_B.aBufferInUse_c) {
              if (proc_control_B.cBufferInUse_c) {
                for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
                     proc_control_B.b_n++) {
                  proc_control_B.i21 = 0;
                  for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                       proc_control_B.i19++) {
                    proc_control_B.e_o = 0.0;
                    proc_control_B.i22 = 0;
                    for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                         proc_control_B.i20++) {
                      proc_control_B.e_o +=
                        proc_control_B.cBuffer_o[proc_control_B.i22 +
                        proc_control_B.b_n] *
                        proc_control_B.aBuffer_b[proc_control_B.i20 +
                        proc_control_B.i21];
                      proc_control_B.i22 += 13;
                    }

                    c[proc_control_B.i21 + proc_control_B.b_n] =
                      proc_control_B.e_o;
                    proc_control_B.i21 += 13;
                  }
                }
              } else {
                for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
                     proc_control_B.b_n++) {
                  proc_control_B.i21 = 0;
                  for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                       proc_control_B.i19++) {
                    proc_control_B.e_o = 0.0;
                    proc_control_B.i22 = 0;
                    for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                         proc_control_B.i20++) {
                      proc_control_B.e_o += c[proc_control_B.i22 +
                        proc_control_B.b_n] *
                        proc_control_B.aBuffer_b[proc_control_B.i20 +
                        proc_control_B.i21];
                      proc_control_B.i22 += 13;
                    }

                    proc_control_B.cBuffer_o[proc_control_B.i21 +
                      proc_control_B.b_n] = proc_control_B.e_o;
                    proc_control_B.i21 += 13;
                  }
                }
              }
            } else if (proc_control_B.cBufferInUse_c) {
              for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
                   proc_control_B.b_n++) {
                proc_control_B.i21 = 0;
                for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                     proc_control_B.i19++) {
                  proc_control_B.e_o = 0.0;
                  proc_control_B.i22 = 0;
                  for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                       proc_control_B.i20++) {
                    proc_control_B.e_o +=
                      proc_control_B.cBuffer_o[proc_control_B.i22 +
                      proc_control_B.b_n] *
                      proc_control_B.b_a[proc_control_B.i20 + proc_control_B.i21];
                    proc_control_B.i22 += 13;
                  }

                  c[proc_control_B.i21 + proc_control_B.b_n] =
                    proc_control_B.e_o;
                  proc_control_B.i21 += 13;
                }
              }
            } else {
              for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
                   proc_control_B.b_n++) {
                proc_control_B.i21 = 0;
                for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                     proc_control_B.i19++) {
                  proc_control_B.e_o = 0.0;
                  proc_control_B.i22 = 0;
                  for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                       proc_control_B.i20++) {
                    proc_control_B.e_o += c[proc_control_B.i22 +
                      proc_control_B.b_n] *
                      proc_control_B.b_a[proc_control_B.i20 + proc_control_B.i21];
                    proc_control_B.i22 += 13;
                  }

                  proc_control_B.cBuffer_o[proc_control_B.i21 +
                    proc_control_B.b_n] = proc_control_B.e_o;
                  proc_control_B.i21 += 13;
                }
              }
            }

            proc_control_B.cBufferInUse_c = !proc_control_B.cBufferInUse_c;
          }
        }

        proc_control_B.n_k >>= 1;
        if (proc_control_B.aBufferInUse_c) {
          for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
               proc_control_B.b_n++) {
            proc_control_B.i21 = 0;
            for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                 proc_control_B.i19++) {
              proc_control_B.ed2_l = 0.0;
              proc_control_B.i22 = 0;
              for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                   proc_control_B.i20++) {
                proc_control_B.ed2_l +=
                  proc_control_B.aBuffer_b[proc_control_B.i22 +
                  proc_control_B.b_n] *
                  proc_control_B.aBuffer_b[proc_control_B.i20 +
                  proc_control_B.i21];
                proc_control_B.i22 += 13;
              }

              proc_control_B.b_a[proc_control_B.i21 + proc_control_B.b_n] =
                proc_control_B.ed2_l;
              proc_control_B.i21 += 13;
            }
          }
        } else {
          for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
               proc_control_B.b_n++) {
            proc_control_B.i21 = 0;
            for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                 proc_control_B.i19++) {
              proc_control_B.e_o = 0.0;
              proc_control_B.i22 = 0;
              for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                   proc_control_B.i20++) {
                proc_control_B.e_o += proc_control_B.b_a[proc_control_B.i22 +
                  proc_control_B.b_n] * proc_control_B.b_a[proc_control_B.i20 +
                  proc_control_B.i21];
                proc_control_B.i22 += 13;
              }

              proc_control_B.aBuffer_b[proc_control_B.i21 + proc_control_B.b_n] =
                proc_control_B.e_o;
              proc_control_B.i21 += 13;
            }
          }
        }

        proc_control_B.aBufferInUse_c = !proc_control_B.aBufferInUse_c;
      }

      proc_control_B.b_n = 0;
      for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
      {
        for (proc_control_B.i19 = 0; proc_control_B.i19 < 13; proc_control_B.i19
             ++) {
          proc_control_B.e_o = 0.0;
          proc_control_B.ed2_l = 0.0;
          proc_control_B.i22 = 0;
          for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
               proc_control_B.i20++) {
            proc_control_B.n_k = proc_control_B.i20 + proc_control_B.b_n;
            _mm_storeu_pd(&proc_control_B.dv41[0], _mm_add_pd(_mm_mul_pd
              (_mm_set_pd(proc_control_B.b_a[proc_control_B.n_k],
                          proc_control_B.aBuffer_b[proc_control_B.n_k]),
               _mm_set1_pd(proc_control_B.cBuffer_o[proc_control_B.i22 +
                           proc_control_B.i19])), _mm_set_pd
              (proc_control_B.ed2_l, proc_control_B.e_o)));
            proc_control_B.e_o = proc_control_B.dv41[0];
            proc_control_B.ed2_l = proc_control_B.dv41[1];
            proc_control_B.i22 += 13;
          }

          proc_control_B.n_k = proc_control_B.i19 + proc_control_B.b_n;
          proc_control_B.cBuffer_g[proc_control_B.n_k] = proc_control_B.ed2_l;
          proc_control_B.cBuffer_a[proc_control_B.n_k] = proc_control_B.e_o;
        }

        proc_control_B.b_n += 13;
      }

      for (proc_control_B.b_n = 0; proc_control_B.b_n < 169; proc_control_B.b_n
           ++) {
        if (proc_control_B.firstmult_n) {
          if (proc_control_B.aBufferInUse_c) {
            c[proc_control_B.b_n] = proc_control_B.aBuffer_b[proc_control_B.b_n];
          } else {
            c[proc_control_B.b_n] = proc_control_B.b_a[proc_control_B.b_n];
          }
        } else if (proc_control_B.aBufferInUse_c) {
          c[proc_control_B.b_n] = proc_control_B.cBuffer_a[proc_control_B.b_n];
        } else {
          c[proc_control_B.b_n] = proc_control_B.cBuffer_g[proc_control_B.b_n];
        }
      }
    }
  } else {
    memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    if ((!rtIsInf(b)) && (!rtIsNaN(b))) {
      proc_control_B.firstmult_n = true;
      int32_T exitg1;
      do {
        exitg1 = 0;
        proc_control_B.ed2_l = floor(proc_control_B.e_o / 2.0);
        if (2.0 * proc_control_B.ed2_l != proc_control_B.e_o) {
          if (proc_control_B.firstmult_n) {
            memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            proc_control_B.firstmult_n = false;
          } else {
            for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
                 proc_control_B.b_n++) {
              proc_control_B.i21 = 0;
              for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                   proc_control_B.i19++) {
                proc_control_B.e_o = 0.0;
                proc_control_B.i22 = 0;
                for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                     proc_control_B.i20++) {
                  proc_control_B.e_o += c[proc_control_B.i22 +
                    proc_control_B.b_n] * proc_control_B.b_a[proc_control_B.i20
                    + proc_control_B.i21];
                  proc_control_B.i22 += 13;
                }

                proc_control_B.cBuffer_o[proc_control_B.i21 + proc_control_B.b_n]
                  = proc_control_B.e_o;
                proc_control_B.i21 += 13;
              }
            }

            memcpy(&c[0], &proc_control_B.cBuffer_o[0], 169U * sizeof(real_T));
          }
        }

        if (proc_control_B.ed2_l == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_o = proc_control_B.ed2_l;
          for (proc_control_B.b_n = 0; proc_control_B.b_n < 13;
               proc_control_B.b_n++) {
            proc_control_B.i21 = 0;
            for (proc_control_B.i19 = 0; proc_control_B.i19 < 13;
                 proc_control_B.i19++) {
              proc_control_B.ed2_l = 0.0;
              proc_control_B.i22 = 0;
              for (proc_control_B.i20 = 0; proc_control_B.i20 < 13;
                   proc_control_B.i20++) {
                proc_control_B.ed2_l += proc_control_B.b_a[proc_control_B.i22 +
                  proc_control_B.b_n] * proc_control_B.b_a[proc_control_B.i20 +
                  proc_control_B.i21];
                proc_control_B.i22 += 13;
              }

              proc_control_B.cBuffer_o[proc_control_B.i21 + proc_control_B.b_n] =
                proc_control_B.ed2_l;
              proc_control_B.i21 += 13;
            }
          }

          memcpy(&proc_control_B.b_a[0], &proc_control_B.cBuffer_o[0], 169U *
                 sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (proc_control_B.b_n = 0; proc_control_B.b_n < 169; proc_control_B.b_n
           ++) {
        c[proc_control_B.b_n] = (rtNaN);
      }
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
real_T proc_control::proc_control_log2_o(real_T x)
{
  real_T f;
  int32_T inte;
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!rtIsInf(x)) && (!rtIsNaN(x))) {
    real_T t;
    t = frexp(x, &inte);
    if (t == 0.5) {
      f = static_cast<real_T>(inte) - 1.0;
    } else if ((inte == 1) && (t < 0.75)) {
      f = log(2.0 * t) / 0.69314718055994529;
    } else {
      f = log(t) / 0.69314718055994529 + static_cast<real_T>(inte);
    }
  } else {
    f = x;
  }

  return f;
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_contro_padeApproximation_b(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  __m128d tmp_0;
  real_T A6_0[169];
  real_T V[169];
  real_T d;
  int32_T b_ix;
  int32_T e_k;
  int32_T e_k_0;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  int8_T ipiv[13];
  switch (m) {
   case 3:
    memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 60.0;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A[iy + jj] * F[b_ix + e_k_0];
          iy += 13;
        }

        A6_0[jj + e_k_0] = d;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[e_k_0]);
      _mm_storeu_pd(&F[e_k_0], tmp_0);
      _mm_storeu_pd(&V[e_k_0], _mm_mul_pd(_mm_set1_pd(12.0), _mm_loadu_pd
        (&A2[e_k_0])));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = A6_0[e_k_0];
      V[e_k_0] = 12.0 * A2[e_k_0];
    }

    d = 120.0;
    break;

   case 5:
    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      _mm_storeu_pd(&F[e_k_0], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(420.0),
        _mm_loadu_pd(&A2[e_k_0])), _mm_loadu_pd(&A4[e_k_0])));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = 420.0 * A2[e_k_0] + A4[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 15120.0;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A[iy + jj] * F[b_ix + e_k_0];
          iy += 13;
        }

        A6_0[jj + e_k_0] = d;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[e_k_0]);
      _mm_storeu_pd(&F[e_k_0], tmp_0);
      _mm_storeu_pd(&V[e_k_0], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(30.0),
        _mm_loadu_pd(&A4[e_k_0])), _mm_mul_pd(_mm_set1_pd(3360.0), _mm_loadu_pd(
        &A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = A6_0[e_k_0];
      V[e_k_0] = 30.0 * A4[e_k_0] + 3360.0 * A2[e_k_0];
    }

    d = 30240.0;
    break;

   case 7:
    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      _mm_storeu_pd(&F[e_k_0], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (1512.0), _mm_loadu_pd(&A4[e_k_0])), _mm_loadu_pd(&A6[e_k_0])),
        _mm_mul_pd(_mm_set1_pd(277200.0), _mm_loadu_pd(&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = (1512.0 * A4[e_k_0] + A6[e_k_0]) + 277200.0 * A2[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 8.64864E+6;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A[iy + jj] * F[b_ix + e_k_0];
          iy += 13;
        }

        A6_0[jj + e_k_0] = d;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[e_k_0]);
      _mm_storeu_pd(&F[e_k_0], tmp_0);
      _mm_storeu_pd(&V[e_k_0], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(56.0),
        _mm_loadu_pd(&A6[e_k_0])), _mm_mul_pd(_mm_set1_pd(25200.0), _mm_loadu_pd
        (&A4[e_k_0]))), _mm_mul_pd(_mm_set1_pd(1.99584E+6), _mm_loadu_pd
        (&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = A6_0[e_k_0];
      V[e_k_0] = (56.0 * A6[e_k_0] + 25200.0 * A4[e_k_0]) + 1.99584E+6 *
        A2[e_k_0];
    }

    d = 1.729728E+7;
    break;

   case 9:
    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A6[iy + jj] * A2[b_ix + e_k_0];
          iy += 13;
        }

        V[jj + e_k_0] = d;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      tmp_0 = _mm_loadu_pd(&V[e_k_0]);
      _mm_storeu_pd(&F[e_k_0], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd
        (_mm_set1_pd(3960.0), _mm_loadu_pd(&A6[e_k_0])), tmp_0), _mm_mul_pd
        (_mm_set1_pd(2.16216E+6), _mm_loadu_pd(&A4[e_k_0]))), _mm_mul_pd
        (_mm_set1_pd(3.027024E+8), _mm_loadu_pd(&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = ((3960.0 * A6[e_k_0] + V[e_k_0]) + 2.16216E+6 * A4[e_k_0]) +
        3.027024E+8 * A2[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 8.8216128E+9;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A[iy + jj] * F[b_ix + e_k_0];
          iy += 13;
        }

        A6_0[jj + e_k_0] = d;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      tmp_0 = _mm_loadu_pd(&A6_0[e_k_0]);
      _mm_storeu_pd(&F[e_k_0], tmp_0);
      tmp_0 = _mm_loadu_pd(&V[e_k_0]);
      _mm_storeu_pd(&V[e_k_0], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd
        (_mm_set1_pd(90.0), tmp_0), _mm_mul_pd(_mm_set1_pd(110880.0),
        _mm_loadu_pd(&A6[e_k_0]))), _mm_mul_pd(_mm_set1_pd(3.027024E+7),
        _mm_loadu_pd(&A4[e_k_0]))), _mm_mul_pd(_mm_set1_pd(2.0756736E+9),
        _mm_loadu_pd(&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = A6_0[e_k_0];
      V[e_k_0] = ((90.0 * V[e_k_0] + 110880.0 * A6[e_k_0]) + 3.027024E+7 *
                  A4[e_k_0]) + 2.0756736E+9 * A2[e_k_0];
    }

    d = 1.76432256E+10;
    break;

   default:
    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      _mm_storeu_pd(&F[e_k_0], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (3.352212864E+10), _mm_loadu_pd(&A6[e_k_0])), _mm_mul_pd(_mm_set1_pd
        (1.05594705216E+13), _mm_loadu_pd(&A4[e_k_0]))), _mm_mul_pd(_mm_set1_pd
        (1.1873537964288E+15), _mm_loadu_pd(&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = (3.352212864E+10 * A6[e_k_0] + 1.05594705216E+13 * A4[e_k_0]) +
        1.1873537964288E+15 * A2[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 3.238237626624E+16;
      e_k_0 += 14;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      _mm_storeu_pd(&V[e_k_0], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (16380.0), _mm_loadu_pd(&A4[e_k_0])), _mm_loadu_pd(&A6[e_k_0])),
        _mm_mul_pd(_mm_set1_pd(4.08408E+7), _mm_loadu_pd(&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      V[e_k_0] = (16380.0 * A4[e_k_0] + A6[e_k_0]) + 4.08408E+7 * A2[e_k_0];
    }

    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      e_k = 0;
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A6[iy + e_k_0] * V[b_ix + e_k];
          iy += 13;
        }

        iy = e_k + e_k_0;
        A6_0[iy] = F[iy] + d;
        e_k += 13;
      }
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A[iy + jj] * A6_0[b_ix + e_k_0];
          iy += 13;
        }

        F[jj + e_k_0] = d;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 <= 166; e_k_0 += 2) {
      _mm_storeu_pd(&A6_0[e_k_0], _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (182.0), _mm_loadu_pd(&A6[e_k_0])), _mm_mul_pd(_mm_set1_pd(960960.0),
        _mm_loadu_pd(&A4[e_k_0]))), _mm_mul_pd(_mm_set1_pd(1.32324192E+9),
        _mm_loadu_pd(&A2[e_k_0]))));
    }

    for (e_k_0 = 168; e_k_0 < 169; e_k_0++) {
      A6_0[e_k_0] = (182.0 * A6[e_k_0] + 960960.0 * A4[e_k_0]) + 1.32324192E+9 *
        A2[e_k_0];
    }

    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      e_k = 0;
      for (jj = 0; jj < 13; jj++) {
        d = 0.0;
        iy = 0;
        for (b_ix = 0; b_ix < 13; b_ix++) {
          d += A6[iy + e_k_0] * A6_0[b_ix + e_k];
          iy += 13;
        }

        iy = e_k + e_k_0;
        V[iy] = ((A6[iy] * 6.704425728E+11 + d) + A4[iy] * 1.29060195264E+14) +
          A2[iy] * 7.7717703038976E+15;
        e_k += 13;
      }
    }

    d = 6.476475253248E+16;
    break;
  }

  e_k_0 = 0;
  for (e_k = 0; e_k < 13; e_k++) {
    V[e_k_0] += d;
    e_k_0 += 14;
  }

  for (e_k = 0; e_k <= 166; e_k += 2) {
    __m128d tmp;
    tmp_0 = _mm_loadu_pd(&V[e_k]);
    tmp = _mm_loadu_pd(&F[e_k]);
    _mm_storeu_pd(&V[e_k], _mm_sub_pd(tmp_0, tmp));
    _mm_storeu_pd(&F[e_k], _mm_mul_pd(_mm_set1_pd(2.0), tmp));
  }

  for (e_k = 168; e_k < 169; e_k++) {
    d = F[e_k];
    V[e_k] -= d;
    F[e_k] = 2.0 * d;
  }

  for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
    ipiv[e_k_0] = static_cast<int8_T>(e_k_0 + 1);
  }

  for (e_k = 0; e_k < 12; e_k++) {
    jj = e_k * 14;
    iy = 13 - e_k;
    b_ix = 0;
    ix = jj;
    d = fabs(V[jj]);
    for (int32_T k_k = 2; k_k <= iy; k_k++) {
      real_T s;
      ix++;
      s = fabs(V[ix]);
      if (s > d) {
        b_ix = k_k - 1;
        d = s;
      }
    }

    if (V[jj + b_ix] != 0.0) {
      if (b_ix != 0) {
        iy = e_k + b_ix;
        ipiv[e_k] = static_cast<int8_T>(iy + 1);
        for (ix = 0; ix < 13; ix++) {
          e_k_0 = ix * 13 + e_k;
          d = V[e_k_0];
          V[e_k_0] = V[iy];
          V[iy] = d;
          iy += 13;
        }
      }

      iy = (jj - e_k) + 13;
      e_k_0 = (((((iy - jj) - 1) / 2) << 1) + jj) + 2;
      ix = e_k_0 - 2;
      for (b_ix = jj + 2; b_ix <= ix; b_ix += 2) {
        tmp_0 = _mm_loadu_pd(&V[b_ix - 1]);
        _mm_storeu_pd(&V[b_ix - 1], _mm_div_pd(tmp_0, _mm_set1_pd(V[jj])));
      }

      for (b_ix = e_k_0; b_ix <= iy; b_ix++) {
        V[b_ix - 1] /= V[jj];
      }
    }

    iy = jj + 13;
    b_ix = jj + 15;
    ix = 11 - e_k;
    for (int32_T k_k = 0; k_k <= ix; k_k++) {
      d = V[iy];
      if (V[iy] != 0.0) {
        e_k_0 = (b_ix - e_k) + 11;
        for (ijA = b_ix; ijA <= e_k_0; ijA++) {
          V[ijA - 1] += V[((jj + ijA) - b_ix) + 1] * -d;
        }
      }

      iy += 13;
      b_ix += 13;
    }
  }

  for (e_k = 0; e_k < 12; e_k++) {
    int8_T ipiv_0;
    ipiv_0 = ipiv[e_k];
    if (e_k + 1 != ipiv_0) {
      for (iy = 0; iy < 13; iy++) {
        e_k_0 = 13 * iy + e_k;
        d = F[e_k_0];
        ijA = (13 * iy + ipiv_0) - 1;
        F[e_k_0] = F[ijA];
        F[ijA] = d;
      }
    }
  }

  for (e_k = 0; e_k < 13; e_k++) {
    jj = 13 * e_k;
    for (iy = 0; iy < 13; iy++) {
      b_ix = 13 * iy;
      e_k_0 = iy + jj;
      if (F[e_k_0] != 0.0) {
        for (ix = iy + 2; ix < 14; ix++) {
          ijA = (ix + jj) - 1;
          F[ijA] -= V[(ix + b_ix) - 1] * F[e_k_0];
        }
      }
    }
  }

  for (e_k = 0; e_k < 13; e_k++) {
    jj = 13 * e_k;
    for (iy = 12; iy >= 0; iy--) {
      b_ix = 13 * iy;
      e_k_0 = iy + jj;
      d = F[e_k_0];
      if (d != 0.0) {
        F[e_k_0] = d / V[iy + b_ix];
        for (int32_T k_k = 0; k_k < iy; k_k++) {
          ijA = k_k + jj;
          F[ijA] -= V[k_k + b_ix] * F[e_k_0];
        }
      }
    }
  }

  e_k_0 = 0;
  for (e_k = 0; e_k < 13; e_k++) {
    F[e_k_0]++;
    e_k_0 += 14;
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_contr_recomputeBlockDiag_a(const real_T A[169], real_T
  F[169], const int32_T blockFormat[12])
{
  for (int32_T j = 0; j < 12; j++) {
    switch (blockFormat[j]) {
     case 0:
      break;

     case 1:
      {
        real_T A_0;
        real_T A_1;
        real_T delta;
        real_T expa;
        real_T sinchdelta;
        real_T u1;
        int32_T A_tmp;
        int32_T A_tmp_0;
        A_tmp_0 = 13 * j + j;
        A_0 = A[A_tmp_0];
        delta = exp(A_0);
        A_tmp = (j + 1) * 13 + j;
        A_1 = A[A_tmp + 1];
        expa = exp(A_1);
        sinchdelta = (A_1 + A_0) / 2.0;
        u1 = fabs(A_0 - A_1) / 2.0;
        if ((sinchdelta >= u1) || rtIsNaN(u1)) {
          u1 = sinchdelta;
        }

        if (u1 < 709.782712893384) {
          A_0 = (A_1 - A_0) / 2.0;
          if (A_0 == 0.0) {
            A_0 = 1.0;
          } else {
            A_0 = sinh(A_0) / A_0;
          }

          sinchdelta = A[A_tmp] * exp(sinchdelta) * A_0;
        } else {
          sinchdelta = (expa - delta) * A[A_tmp] / (A_1 - A_0);
        }

        F[A_tmp_0] = delta;
        F[A_tmp] = sinchdelta;
        F[A_tmp + 1] = expa;
      }
      break;

     default:
      {
        real_T A_0;
        real_T A_1;
        real_T delta;
        real_T expa;
        real_T sinchdelta;
        int32_T A_tmp;
        int32_T A_tmp_0;
        A_tmp_0 = (j + 1) * 13 + j;
        A_0 = A[A_tmp_0];
        A_tmp = 13 * j + j;
        A_1 = A[A_tmp + 1];
        delta = sqrt(fabs(A_0 * A_1));
        expa = exp(A[A_tmp]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = sin(delta) / delta;
        }

        delta = expa * cos(delta);
        F[A_tmp] = delta;
        F[A_tmp + 1] = A_1 * expa * sinchdelta;
        F[A_tmp_0] = A_0 * expa * sinchdelta;
        F[A_tmp_0 + 1] = delta;
      }
      break;
    }
  }

  if (blockFormat[11] == 0) {
    F[168] = exp(A[168]);
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
real_T proc_control::proc_control_xnrm2_h(int32_T n, const real_T x[169],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k = ix0; k <= kend; k++) {
        real_T absxk;
        absxk = fabs(x[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_xzsyhetrd_c(real_T A[169], real_T D[13], real_T
  E[12], real_T tau[12])
{
  __m128d tmp;
  real_T tmp_0[2];
  real_T taui;
  real_T temp2;
  real_T tmp_1;
  real_T xnorm;
  int32_T b_ix;
  int32_T b_iy;
  int32_T i;
  int32_T iv;
  int32_T knt;
  int32_T scalarLB;
  int32_T tau_tmp;
  int32_T temp2_tmp_tmp_tmp;
  int32_T vectorUB;
  for (i = 0; i < 12; i++) {
    temp2_tmp_tmp_tmp = 13 * i + i;
    temp2 = A[temp2_tmp_tmp_tmp + 1];
    if (i + 3 <= 13) {
      b_ix = i + 3;
    } else {
      b_ix = 13;
    }

    iv = i * 13 + b_ix;
    taui = 0.0;
    xnorm = proc_control_xnrm2_h(11 - i, A, iv);
    if (xnorm != 0.0) {
      xnorm = rt_hypotd_snf(temp2, xnorm);
      if (temp2 >= 0.0) {
        xnorm = -xnorm;
      }

      if (fabs(xnorm) < 1.0020841800044864E-292) {
        knt = 0;
        scalarLB = (iv - i) + 10;
        do {
          knt++;
          vectorUB = ((((scalarLB - iv) + 1) / 2) << 1) + iv;
          b_iy = vectorUB - 2;
          for (b_ix = iv; b_ix <= b_iy; b_ix += 2) {
            tmp = _mm_loadu_pd(&A[b_ix - 1]);
            _mm_storeu_pd(&A[b_ix - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (b_ix = vectorUB; b_ix <= scalarLB; b_ix++) {
            A[b_ix - 1] *= 9.9792015476736E+291;
          }

          xnorm *= 9.9792015476736E+291;
          temp2 *= 9.9792015476736E+291;
        } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));

        xnorm = rt_hypotd_snf(temp2, proc_control_xnrm2_h(11 - i, A, iv));
        if (temp2 >= 0.0) {
          xnorm = -xnorm;
        }

        taui = (xnorm - temp2) / xnorm;
        temp2 = 1.0 / (temp2 - xnorm);
        for (b_ix = iv; b_ix <= b_iy; b_ix += 2) {
          tmp = _mm_loadu_pd(&A[b_ix - 1]);
          _mm_storeu_pd(&A[b_ix - 1], _mm_mul_pd(tmp, _mm_set1_pd(temp2)));
        }

        for (b_ix = vectorUB; b_ix <= scalarLB; b_ix++) {
          A[b_ix - 1] *= temp2;
        }

        for (iv = 0; iv < knt; iv++) {
          xnorm *= 1.0020841800044864E-292;
        }

        temp2 = xnorm;
      } else {
        taui = (xnorm - temp2) / xnorm;
        temp2 = 1.0 / (temp2 - xnorm);
        b_ix = (iv - i) + 10;
        scalarLB = ((((b_ix - iv) + 1) / 2) << 1) + iv;
        vectorUB = scalarLB - 2;
        for (knt = iv; knt <= vectorUB; knt += 2) {
          tmp = _mm_loadu_pd(&A[knt - 1]);
          _mm_storeu_pd(&A[knt - 1], _mm_mul_pd(tmp, _mm_set1_pd(temp2)));
        }

        for (knt = scalarLB; knt <= b_ix; knt++) {
          A[knt - 1] *= temp2;
        }

        temp2 = xnorm;
      }
    }

    E[i] = temp2;
    if (taui != 0.0) {
      A[temp2_tmp_tmp_tmp + 1] = 1.0;
      for (iv = i + 1; iv < 13; iv++) {
        tau[iv - 1] = 0.0;
      }

      vectorUB = 11 - i;
      scalarLB = 12 - i;
      for (iv = 0; iv <= vectorUB; iv++) {
        b_iy = i + iv;
        xnorm = A[(13 * i + b_iy) + 1] * taui;
        temp2 = 0.0;
        tau_tmp = (b_iy + 1) * 13 + i;
        tau[b_iy] += A[(tau_tmp + iv) + 1] * xnorm;
        for (knt = iv + 2; knt <= scalarLB; knt++) {
          b_ix = i + knt;
          _mm_storeu_pd(&tmp_0[0], _mm_add_pd(_mm_mul_pd(_mm_set1_pd(A[tau_tmp +
            knt]), _mm_set_pd(A[b_ix + 13 * i], xnorm)), _mm_set_pd(temp2,
            tau[b_ix - 1])));
          tau[b_ix - 1] = tmp_0[0];
          temp2 = tmp_0[1];
        }

        tau[b_iy] += taui * temp2;
      }

      iv = temp2_tmp_tmp_tmp + 1;
      b_ix = i;
      b_iy = temp2_tmp_tmp_tmp + 1;
      xnorm = 0.0;
      for (knt = 0; knt <= vectorUB; knt++) {
        xnorm += tau[b_ix] * A[b_iy];
        b_ix++;
        b_iy++;
      }

      xnorm *= -0.5 * taui;
      if (!(xnorm == 0.0)) {
        b_ix = i;
        for (knt = 0; knt <= vectorUB; knt++) {
          tau[b_ix] += xnorm * A[iv];
          iv++;
          b_ix++;
        }
      }

      for (iv = 0; iv <= vectorUB; iv++) {
        b_iy = i + iv;
        xnorm = A[(13 * i + b_iy) + 1];
        temp2 = tau[b_iy];
        tmp_1 = temp2 * xnorm;
        b_ix = (b_iy + 1) * 13;
        tau_tmp = b_ix + i;
        A[(b_iy + b_ix) + 1] = (A[(tau_tmp + iv) + 1] - tmp_1) - tmp_1;
        for (knt = iv + 2; knt <= scalarLB; knt++) {
          b_iy = i + knt;
          A[b_iy + b_ix] = (A[tau_tmp + knt] - tau[b_iy - 1] * xnorm) - A[13 * i
            + b_iy] * temp2;
        }
      }
    }

    A[temp2_tmp_tmp_tmp + 1] = E[i];
    D[i] = A[temp2_tmp_tmp_tmp];
    tau[i] = taui;
  }

  D[12] = A[168];
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_xzlascl_g(real_T cfrom, real_T cto, int32_T m,
  real_T A[13], int32_T iA0)
{
  real_T cfromc;
  real_T ctoc;
  boolean_T notdone;
  cfromc = cfrom;
  ctoc = cto;
  notdone = true;
  while (notdone) {
    real_T cfrom1;
    real_T cto1;
    real_T mul;
    int32_T scalarLB;
    int32_T tmp_0;
    int32_T vectorUB;
    cfrom1 = cfromc * 2.0041683600089728E-292;
    cto1 = ctoc / 4.9896007738368E+291;
    if ((fabs(cfrom1) > fabs(ctoc)) && (ctoc != 0.0)) {
      mul = 2.0041683600089728E-292;
      cfromc = cfrom1;
    } else if (fabs(cto1) > fabs(cfromc)) {
      mul = 4.9896007738368E+291;
      ctoc = cto1;
    } else {
      mul = ctoc / cfromc;
      notdone = false;
    }

    scalarLB = (m / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp_0 = (b_i + iA0) - 1;
      tmp = _mm_loadu_pd(&A[tmp_0]);
      _mm_storeu_pd(&A[tmp_0], _mm_mul_pd(tmp, _mm_set1_pd(mul)));
    }

    for (int32_T b_i = scalarLB; b_i < m; b_i++) {
      tmp_0 = (b_i + iA0) - 1;
      A[tmp_0] *= mul;
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_xzlascl_gj(real_T cfrom, real_T cto, int32_T m,
  real_T A[12], int32_T iA0)
{
  real_T cfromc;
  real_T ctoc;
  boolean_T notdone;
  cfromc = cfrom;
  ctoc = cto;
  notdone = true;
  while (notdone) {
    real_T cfrom1;
    real_T cto1;
    real_T mul;
    int32_T scalarLB;
    int32_T tmp_0;
    int32_T vectorUB;
    cfrom1 = cfromc * 2.0041683600089728E-292;
    cto1 = ctoc / 4.9896007738368E+291;
    if ((fabs(cfrom1) > fabs(ctoc)) && (ctoc != 0.0)) {
      mul = 2.0041683600089728E-292;
      cfromc = cfrom1;
    } else if (fabs(cto1) > fabs(cfromc)) {
      mul = 4.9896007738368E+291;
      ctoc = cto1;
    } else {
      mul = ctoc / cfromc;
      notdone = false;
    }

    scalarLB = (m / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_i = 0; b_i <= vectorUB; b_i += 2) {
      __m128d tmp;
      tmp_0 = (b_i + iA0) - 1;
      tmp = _mm_loadu_pd(&A[tmp_0]);
      _mm_storeu_pd(&A[tmp_0], _mm_mul_pd(tmp, _mm_set1_pd(mul)));
    }

    for (int32_T b_i = scalarLB; b_i < m; b_i++) {
      tmp_0 = (b_i + iA0) - 1;
      A[tmp_0] *= mul;
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_xzlartg_c(real_T f, real_T g, real_T *cs, real_T
  *sn, real_T *r)
{
  real_T f1;
  f1 = fabs(f);
  *r = fabs(g);
  if (g == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
    *r = f;
  } else if (f == 0.0) {
    *cs = 0.0;
    if (g >= 0.0) {
      *sn = 1.0;
    } else {
      *sn = -1.0;
    }
  } else if ((f1 > 1.4916681462400413E-154) && (f1 < 4.7403759540545887E+153) &&
             (*r > 1.4916681462400413E-154) && (*r < 4.7403759540545887E+153)) {
    *r = sqrt(f * f + g * g);
    *cs = f1 / *r;
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = g / *r;
  } else {
    real_T fs;
    real_T gs;
    if ((f1 >= *r) || rtIsNaN(*r)) {
      *r = f1;
    }

    if ((*r <= 2.2250738585072014E-308) || rtIsNaN(*r)) {
      *r = 2.2250738585072014E-308;
    }

    if (*r >= 4.49423283715579E+307) {
      f1 = 4.49423283715579E+307;
    } else {
      f1 = *r;
    }

    fs = f / f1;
    gs = g / f1;
    *r = sqrt(fs * fs + gs * gs);
    *cs = fabs(fs) / *r;
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = gs / *r;
    *r *= f1;
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_rotateRight_nh(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  for (int32_T b_j = 0; b_j <= n - 2; b_j++) {
    real_T ctemp;
    real_T stemp;
    int32_T offsetj;
    int32_T offsetjp1;
    ctemp = cs[(ic0 + b_j) - 1];
    stemp = cs[(is0 + b_j) - 1];
    offsetj = (b_j * 13 + iz0) - 1;
    offsetjp1 = ((b_j + 1) * 13 + iz0) - 1;
    if ((ctemp != 1.0) || (stemp != 0.0)) {
      for (int32_T j = 0; j < 13; j++) {
        real_T temp;
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = offsetjp1 + j;
        temp = z[temp_tmp];
        tmp = offsetj + j;
        z[temp_tmp] = ctemp * temp - z[tmp] * stemp;
        z[tmp] = z[tmp] * ctemp + stemp * temp;
      }
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_xdlaev2_d(real_T a, real_T b, real_T c, real_T
  *rt1, real_T *rt2, real_T *cs1, real_T *sn1)
{
  real_T ab;
  real_T acmn;
  real_T acmx;
  real_T adf;
  real_T df;
  real_T sm;
  real_T tb;
  int32_T sgn1;
  int32_T sgn2;
  sm = a + c;
  df = a - c;
  adf = fabs(df);
  tb = b + b;
  ab = fabs(tb);
  if (fabs(a) > fabs(c)) {
    acmx = a;
    acmn = c;
  } else {
    acmx = c;
    acmn = a;
  }

  if (adf > ab) {
    real_T b_a;
    b_a = ab / adf;
    adf *= sqrt(b_a * b_a + 1.0);
  } else if (adf < ab) {
    adf /= ab;
    adf = sqrt(adf * adf + 1.0) * ab;
  } else {
    adf = ab * 1.4142135623730951;
  }

  if (sm < 0.0) {
    *rt1 = (sm - adf) * 0.5;
    sgn1 = -1;
    *rt2 = acmx / *rt1 * acmn - b / *rt1 * b;
  } else if (sm > 0.0) {
    *rt1 = (sm + adf) * 0.5;
    sgn1 = 1;
    *rt2 = acmx / *rt1 * acmn - b / *rt1 * b;
  } else {
    *rt1 = 0.5 * adf;
    *rt2 = -0.5 * adf;
    sgn1 = 1;
  }

  if (df >= 0.0) {
    df += adf;
    sgn2 = 1;
  } else {
    df -= adf;
    sgn2 = -1;
  }

  if (fabs(df) > ab) {
    tb = -tb / df;
    *sn1 = 1.0 / sqrt(tb * tb + 1.0);
    *cs1 = tb * *sn1;
  } else if (ab == 0.0) {
    *cs1 = 1.0;
    *sn1 = 0.0;
  } else {
    tb = -df / tb;
    *cs1 = 1.0 / sqrt(tb * tb + 1.0);
    *sn1 = tb * *cs1;
  }

  if (sgn1 == sgn2) {
    tb = *cs1;
    *cs1 = -*sn1;
    *sn1 = tb;
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_rotateRight_n(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  for (int32_T j = n - 1; j >= 1; j--) {
    real_T ctemp;
    real_T stemp;
    int32_T offsetj;
    int32_T offsetjp1;
    ctemp = cs[(ic0 + j) - 2];
    stemp = cs[(is0 + j) - 2];
    offsetj = ((j - 1) * 13 + iz0) - 1;
    offsetjp1 = (j * 13 + iz0) - 1;
    if ((ctemp != 1.0) || (stemp != 0.0)) {
      for (int32_T i = 0; i < 13; i++) {
        real_T temp;
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = offsetjp1 + i;
        temp = z[temp_tmp];
        tmp = offsetj + i;
        z[temp_tmp] = ctemp * temp - z[tmp] * stemp;
        z[tmp] = z[tmp] * ctemp + stemp * temp;
      }
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
int32_T proc_control::proc_control_xzsteqr_h(real_T d[13], real_T e[12], real_T
  z[169])
{
  real_T work[24];
  real_T b;
  real_T b_anorm;
  real_T b_s;
  real_T c;
  real_T e_0;
  real_T p;
  real_T r;
  real_T s;
  real_T tst;
  int32_T b_anorm_tmp;
  int32_T exitg1;
  int32_T exitg3;
  int32_T exitg4;
  int32_T i;
  int32_T info;
  int32_T iscale;
  int32_T l;
  int32_T l1;
  int32_T lend;
  int32_T lendsv;
  int32_T lsv;
  int32_T m;
  int32_T n_tmp;
  boolean_T exitg2;
  info = 0;
  memset(&work[0], 0, 24U * sizeof(real_T));
  i = 0;
  l1 = 1;
  do {
    exitg1 = 0;
    if (l1 > 13) {
      for (i = 0; i < 12; i++) {
        l = i;
        p = d[i];
        for (l1 = i + 2; l1 < 14; l1++) {
          tst = d[l1 - 1];
          if (tst < p) {
            l = l1 - 1;
            p = tst;
          }
        }

        if (l != i) {
          d[l] = d[i];
          d[i] = p;
          m = i * 13;
          l *= 13;
          for (l1 = 0; l1 < 13; l1++) {
            lsv = m + l1;
            tst = z[lsv];
            lend = l + l1;
            z[lsv] = z[lend];
            z[lend] = tst;
          }
        }
      }

      exitg1 = 1;
    } else {
      if (l1 > 1) {
        e[l1 - 2] = 0.0;
      }

      m = l1;
      exitg2 = false;
      while ((!exitg2) && (m < 13)) {
        tst = fabs(e[m - 1]);
        if (tst == 0.0) {
          exitg2 = true;
        } else if (tst <= sqrt(fabs(d[m - 1])) * sqrt(fabs(d[m])) *
                   2.2204460492503131E-16) {
          e[m - 1] = 0.0;
          exitg2 = true;
        } else {
          m++;
        }
      }

      l = l1 - 1;
      lsv = l1;
      lend = m;
      lendsv = m;
      l1 = m + 1;
      if (l + 1 == m) {
      } else {
        n_tmp = m - l;
        if (n_tmp <= 0) {
          tst = 0.0;
        } else {
          tst = fabs(d[(l + n_tmp) - 1]);
          iscale = 0;
          exitg2 = false;
          while ((!exitg2) && (iscale <= n_tmp - 2)) {
            b_anorm_tmp = l + iscale;
            b_anorm = fabs(d[b_anorm_tmp]);
            if (rtIsNaN(b_anorm)) {
              tst = (rtNaN);
              exitg2 = true;
            } else {
              if (b_anorm > tst) {
                tst = b_anorm;
              }

              b_anorm = fabs(e[b_anorm_tmp]);
              if (rtIsNaN(b_anorm)) {
                tst = (rtNaN);
                exitg2 = true;
              } else {
                if (b_anorm > tst) {
                  tst = b_anorm;
                }

                iscale++;
              }
            }
          }
        }

        iscale = 0;
        if (tst == 0.0) {
        } else if (rtIsInf(tst) || rtIsNaN(tst)) {
          for (i = 0; i < 13; i++) {
            d[i] = (rtNaN);
          }

          for (lend = 0; lend < 169; lend++) {
            z[lend] = (rtNaN);
          }

          exitg1 = 1;
        } else {
          if (tst > 2.2346346549904327E+153) {
            iscale = 1;
            proc_control_xzlascl_g(tst, 2.2346346549904327E+153, n_tmp, d, l + 1);
            proc_control_xzlascl_gj(tst, 2.2346346549904327E+153, n_tmp - 1, e,
              l + 1);
          } else if (tst < 3.02546243347603E-123) {
            iscale = 2;
            proc_control_xzlascl_g(tst, 3.02546243347603E-123, n_tmp, d, l + 1);
            proc_control_xzlascl_gj(tst, 3.02546243347603E-123, n_tmp - 1, e, l
              + 1);
          }

          if (fabs(d[m - 1]) < fabs(d[l])) {
            lend = lsv;
            l = m - 1;
          }

          if (lend > l + 1) {
            do {
              exitg4 = 0;
              if (l + 1 != lend) {
                m = l;
                exitg2 = false;
                while ((!exitg2) && (m + 1 < lend)) {
                  b_anorm = fabs(e[m]);
                  if (b_anorm * b_anorm <= 4.9303806576313238E-32 * fabs(d[m]) *
                      fabs(d[m + 1]) + 2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    m++;
                  }
                }
              } else {
                m = lend - 1;
              }

              if (m + 1 < lend) {
                e[m] = 0.0;
              }

              if (m + 1 == l + 1) {
                l++;
                if (l + 1 > lend) {
                  exitg4 = 1;
                }
              } else if (m + 1 == l + 2) {
                proc_control_xdlaev2_d(d[l], e[l], d[l + 1], &d[l], &b_anorm,
                  &work[l], &s);
                d[l + 1] = b_anorm;
                work[l + 12] = s;
                proc_control_rotateRight_n(2, z, l * 13 + 1, work, l + 1, l + 13);
                e[l] = 0.0;
                l += 2;
                if (l + 1 > lend) {
                  exitg4 = 1;
                }
              } else if (i == 390) {
                exitg4 = 1;
              } else {
                i++;
                b_anorm = (d[l + 1] - d[l]) / (2.0 * e[l]);
                s = rt_hypotd_snf(b_anorm, 1.0);
                if (!(b_anorm >= 0.0)) {
                  s = -s;
                }

                b_anorm = e[l] / (b_anorm + s) + (d[m] - d[l]);
                s = 1.0;
                c = 1.0;
                p = 0.0;
                for (n_tmp = m; n_tmp >= l + 1; n_tmp--) {
                  e_0 = e[n_tmp - 1];
                  b = c * e_0;
                  proc_control_xzlartg_c(b_anorm, s * e_0, &c, &b_s, &r);
                  s = b_s;
                  if (n_tmp != m) {
                    e[n_tmp] = r;
                  }

                  b_anorm = d[n_tmp] - p;
                  r = (d[n_tmp - 1] - b_anorm) * b_s + 2.0 * c * b;
                  p = b_s * r;
                  d[n_tmp] = b_anorm + p;
                  b_anorm = c * r - b;
                  work[n_tmp - 1] = c;
                  work[n_tmp + 11] = -b_s;
                }

                proc_control_rotateRight_n((m - l) + 1, z, l * 13 + 1, work, l +
                  1, l + 13);
                d[l] -= p;
                e[l] = b_anorm;
              }
            } while (exitg4 == 0);
          } else {
            do {
              exitg3 = 0;
              if (l + 1 != lend) {
                m = l + 1;
                exitg2 = false;
                while ((!exitg2) && (m > lend)) {
                  b_anorm = fabs(e[m - 2]);
                  if (b_anorm * b_anorm <= fabs(d[m - 1]) *
                      4.9303806576313238E-32 * fabs(d[m - 2]) +
                      2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    m--;
                  }
                }
              } else {
                m = lend;
              }

              if (m > lend) {
                e[m - 2] = 0.0;
              }

              if (l + 1 == m) {
                l--;
                if (l + 1 < lend) {
                  exitg3 = 1;
                }
              } else if (m == l) {
                proc_control_xdlaev2_d(d[l - 1], e[l - 1], d[l], &d[l - 1],
                  &b_anorm, &work[m - 1], &s);
                d[l] = b_anorm;
                work[m + 11] = s;
                proc_control_rotateRight_nh(2, z, (l - 1) * 13 + 1, work, m, m +
                  12);
                e[l - 1] = 0.0;
                l -= 2;
                if (l + 1 < lend) {
                  exitg3 = 1;
                }
              } else if (i == 390) {
                exitg3 = 1;
              } else {
                i++;
                p = e[l - 1];
                b_anorm = (d[l - 1] - d[l]) / (p * 2.0);
                s = rt_hypotd_snf(b_anorm, 1.0);
                if (!(b_anorm >= 0.0)) {
                  s = -s;
                }

                b_anorm = (d[m - 1] - d[l]) + p / (b_anorm + s);
                s = 1.0;
                c = 1.0;
                p = 0.0;
                for (n_tmp = m; n_tmp <= l; n_tmp++) {
                  e_0 = e[n_tmp - 1];
                  b = c * e_0;
                  proc_control_xzlartg_c(b_anorm, s * e_0, &c, &b_s, &r);
                  s = b_s;
                  if (n_tmp != m) {
                    e[n_tmp - 2] = r;
                  }

                  b_anorm = d[n_tmp - 1] - p;
                  r = (d[n_tmp] - b_anorm) * b_s + 2.0 * c * b;
                  p = b_s * r;
                  d[n_tmp - 1] = b_anorm + p;
                  b_anorm = c * r - b;
                  work[n_tmp - 1] = c;
                  work[n_tmp + 11] = b_s;
                }

                proc_control_rotateRight_nh((l - m) + 2, z, (m - 1) * 13 + 1,
                  work, m, m + 12);
                d[l] -= p;
                e[l - 1] = b_anorm;
              }
            } while (exitg3 == 0);
          }

          switch (iscale) {
           case 1:
            lend = lendsv - lsv;
            proc_control_xzlascl_g(2.2346346549904327E+153, tst, lend + 1, d,
              lsv);
            proc_control_xzlascl_gj(2.2346346549904327E+153, tst, lend, e, lsv);
            break;

           case 2:
            lend = lendsv - lsv;
            proc_control_xzlascl_g(3.02546243347603E-123, tst, lend + 1, d, lsv);
            proc_control_xzlascl_gj(3.02546243347603E-123, tst, lend, e, lsv);
            break;
          }

          if (i >= 390) {
            for (i = 0; i < 12; i++) {
              if (e[i] != 0.0) {
                info++;
              }
            }

            exitg1 = 1;
          }
        }
      }
    }
  } while (exitg1 == 0);

  return info;
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_xsyheev_c(real_T A[169], int32_T *info, real_T
  W[13])
{
  __m128d tmp;
  real_T work[13];
  real_T e[12];
  real_T tau[12];
  real_T absx;
  real_T anrm;
  real_T cfrom1;
  real_T cfromc;
  real_T cto1;
  real_T mul;
  int32_T coltop;
  int32_T e_i;
  int32_T exitg1;
  int32_T f;
  int32_T g;
  int32_T iaii;
  int32_T itau;
  int32_T jy;
  int32_T lastc;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T iscale;
  boolean_T notdone;
  *info = 0;
  anrm = 0.0;
  e_i = 0;
  exitg2 = false;
  while ((!exitg2) && (e_i < 13)) {
    itau = 0;
    do {
      exitg1 = 0;
      if (itau <= e_i) {
        absx = fabs(A[13 * e_i + itau]);
        if (rtIsNaN(absx)) {
          anrm = (rtNaN);
          exitg1 = 1;
        } else {
          if (absx > anrm) {
            anrm = absx;
          }

          itau++;
        }
      } else {
        e_i++;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }

  if (rtIsInf(anrm) || rtIsNaN(anrm)) {
    for (e_i = 0; e_i < 13; e_i++) {
      W[e_i] = (rtNaN);
    }

    for (lastc = 0; lastc < 169; lastc++) {
      A[lastc] = (rtNaN);
    }
  } else {
    iscale = false;
    guard1 = false;
    if ((anrm > 0.0) && (anrm < 1.0010415475915505E-146)) {
      iscale = true;
      anrm = 1.0010415475915505E-146 / anrm;
      guard1 = true;
    } else if (anrm > 9.9895953610111751E+145) {
      iscale = true;
      anrm = 9.9895953610111751E+145 / anrm;
      guard1 = true;
    }

    if (guard1) {
      absx = anrm;
      cfromc = 1.0;
      notdone = true;
      while (notdone) {
        cfrom1 = cfromc * 2.0041683600089728E-292;
        cto1 = absx / 4.9896007738368E+291;
        if ((fabs(cfrom1) > absx) && (absx != 0.0)) {
          mul = 2.0041683600089728E-292;
          cfromc = cfrom1;
        } else if (cto1 > fabs(cfromc)) {
          mul = 4.9896007738368E+291;
          absx = cto1;
        } else {
          mul = absx / cfromc;
          notdone = false;
        }

        for (lastc = 0; lastc <= 166; lastc += 2) {
          tmp = _mm_loadu_pd(&A[lastc]);
          _mm_storeu_pd(&A[lastc], _mm_mul_pd(tmp, _mm_set1_pd(mul)));
        }

        for (lastc = 168; lastc < 169; lastc++) {
          A[lastc] *= mul;
        }
      }
    }

    proc_control_xzsyhetrd_c(A, W, e, tau);
    iaii = 143;
    for (e_i = 11; e_i >= 0; e_i--) {
      A[iaii + 13] = 0.0;
      for (itau = e_i + 3; itau < 14; itau++) {
        lastc = itau + iaii;
        A[lastc + 12] = A[lastc - 1];
      }

      iaii += -13;
    }

    A[0] = 1.0;
    memset(&A[1], 0, 12U * sizeof(real_T));
    memset(&work[0], 0, 13U * sizeof(real_T));
    for (e_i = 11; e_i >= 0; e_i--) {
      iaii = (e_i * 13 + e_i) + 28;
      if (e_i + 1 < 12) {
        A[iaii - 14] = 1.0;
        if (tau[e_i] != 0.0) {
          itau = 12 - e_i;
          lastc = iaii - e_i;
          while ((itau > 0) && (A[lastc - 3] == 0.0)) {
            itau--;
            lastc--;
          }

          lastc = 10 - e_i;
          exitg2 = false;
          while ((!exitg2) && (lastc + 1 > 0)) {
            coltop = lastc * 13 + iaii;
            jy = coltop;
            do {
              exitg1 = 0;
              if (jy <= (coltop + itau) - 1) {
                if (A[jy - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  jy++;
                }
              } else {
                lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          itau = 0;
          lastc = -1;
        }

        if (itau > 0) {
          if (lastc + 1 != 0) {
            memset(&work[0], 0, static_cast<uint32_T>(lastc + 1) * sizeof(real_T));
            f = 13 * lastc + iaii;
            for (coltop = iaii; coltop <= f; coltop += 13) {
              absx = 0.0;
              g = (coltop + itau) - 1;
              for (jy = coltop; jy <= g; jy++) {
                absx += A[((iaii + jy) - coltop) - 14] * A[jy - 1];
              }

              jy = div_nde_s32_floor(coltop - iaii, 13);
              work[jy] += absx;
            }
          }

          if (!(-tau[e_i] == 0.0)) {
            coltop = iaii;
            f = lastc;
            for (lastc = 0; lastc <= f; lastc++) {
              absx = work[lastc];
              if (absx != 0.0) {
                absx *= -tau[e_i];
                g = itau + coltop;
                for (jy = coltop; jy < g; jy++) {
                  A[jy - 1] += A[((iaii + jy) - coltop) - 14] * absx;
                }
              }

              coltop += 13;
            }
          }
        }

        lastc = (iaii - e_i) - 2;
        coltop = (((((lastc - iaii) + 13) / 2) << 1) + iaii) - 12;
        f = coltop - 2;
        for (itau = iaii - 12; itau <= f; itau += 2) {
          tmp = _mm_loadu_pd(&A[itau - 1]);
          _mm_storeu_pd(&A[itau - 1], _mm_mul_pd(tmp, _mm_set1_pd(-tau[e_i])));
        }

        for (itau = coltop; itau <= lastc; itau++) {
          A[itau - 1] *= -tau[e_i];
        }
      }

      A[iaii - 14] = 1.0 - tau[e_i];
      for (itau = 0; itau < e_i; itau++) {
        A[(iaii - itau) - 15] = 0.0;
      }
    }

    *info = proc_control_xzsteqr_h(W, e, A);
    if (*info != 0) {
      for (e_i = 0; e_i < 13; e_i++) {
        W[e_i] = (rtNaN);
      }

      for (lastc = 0; lastc < 169; lastc++) {
        A[lastc] = (rtNaN);
      }
    } else if (iscale) {
      anrm = 1.0 / anrm;
      for (e_i = 0; e_i <= 10; e_i += 2) {
        tmp = _mm_loadu_pd(&W[e_i]);
        _mm_storeu_pd(&W[e_i], _mm_mul_pd(_mm_set1_pd(anrm), tmp));
      }

      for (e_i = 12; e_i < 13; e_i++) {
        W[e_i] *= anrm;
      }
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_expm_l(real_T A[169], real_T F[169])
{
  __m128d tmp;
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  boolean_T guard3;
  boolean_T guard4;
  proc_control_B.recomputeDiags_c = true;
  for (proc_control_B.e_j = 0; proc_control_B.e_j < 169; proc_control_B.e_j++) {
    if (proc_control_B.recomputeDiags_c) {
      proc_control_B.exptj_f = A[proc_control_B.e_j];
      if (rtIsInf(proc_control_B.exptj_f) || rtIsNaN(proc_control_B.exptj_f)) {
        proc_control_B.recomputeDiags_c = false;
      }
    }
  }

  if (!proc_control_B.recomputeDiags_c) {
    for (proc_control_B.e_i = 0; proc_control_B.e_i < 169; proc_control_B.e_i++)
    {
      F[proc_control_B.e_i] = (rtNaN);
    }
  } else {
    proc_control_B.e_j = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.e_j < 13)) {
      proc_control_B.e_i = 0;
      do {
        exitg1 = 0;
        if (proc_control_B.e_i < 13) {
          if ((proc_control_B.e_i != proc_control_B.e_j) && (!(A[13 *
                proc_control_B.e_j + proc_control_B.e_i] == 0.0))) {
            proc_control_B.recomputeDiags_c = false;
            exitg1 = 1;
          } else {
            proc_control_B.e_i++;
          }
        } else {
          proc_control_B.e_j++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (proc_control_B.recomputeDiags_c) {
      memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.b_s_j = 0;
      for (proc_control_B.b_s = 0; proc_control_B.b_s < 13; proc_control_B.b_s++)
      {
        F[proc_control_B.b_s_j] = exp(A[proc_control_B.b_s_j]);
        proc_control_B.b_s_j += 14;
      }
    } else {
      proc_control_B.recomputeDiags_c = true;
      proc_control_B.e_j = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.e_j < 13)) {
        proc_control_B.e_i = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.e_i <= proc_control_B.e_j) {
            if (!(A[13 * proc_control_B.e_j + proc_control_B.e_i] == A[13 *
                  proc_control_B.e_i + proc_control_B.e_j])) {
              proc_control_B.recomputeDiags_c = false;
              exitg1 = 1;
            } else {
              proc_control_B.e_i++;
            }
          } else {
            proc_control_B.e_j++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (proc_control_B.recomputeDiags_c) {
        memcpy(&proc_control_B.A2_p[0], &A[0], 169U * sizeof(real_T));
        proc_control_xsyheev_c(proc_control_B.A2_p, &proc_control_B.b_s,
          proc_control_B.w_p);
        proc_control_B.b_s_j = 0;
        for (proc_control_B.b_s = 0; proc_control_B.b_s < 13; proc_control_B.b_s
             ++) {
          proc_control_B.exptj_f = exp(proc_control_B.w_p[proc_control_B.b_s]);
          for (proc_control_B.e_j = 0; proc_control_B.e_j <= 10;
               proc_control_B.e_j += 2) {
            proc_control_B.e_i = proc_control_B.e_j + proc_control_B.b_s_j;
            tmp = _mm_loadu_pd(&proc_control_B.A2_p[proc_control_B.e_i]);
            _mm_storeu_pd(&F[proc_control_B.e_i], _mm_mul_pd(tmp, _mm_set1_pd
              (proc_control_B.exptj_f)));
          }

          for (proc_control_B.e_j = 12; proc_control_B.e_j < 13;
               proc_control_B.e_j++) {
            proc_control_B.F_tmp = proc_control_B.e_j + proc_control_B.b_s_j;
            F[proc_control_B.F_tmp] = proc_control_B.A2_p[proc_control_B.F_tmp] *
              proc_control_B.exptj_f;
          }

          proc_control_B.b_s_j += 13;
        }

        for (proc_control_B.e_i = 0; proc_control_B.e_i < 13; proc_control_B.e_i
             ++) {
          proc_control_B.b_s_j = 0;
          for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
               proc_control_B.i17++) {
            proc_control_B.exptj_f = 0.0;
            proc_control_B.i18 = 0;
            for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                 proc_control_B.F_tmp++) {
              proc_control_B.exptj_f += F[proc_control_B.i18 +
                proc_control_B.e_i] * proc_control_B.A2_p[proc_control_B.i18 +
                proc_control_B.i17];
              proc_control_B.i18 += 13;
            }

            proc_control_B.A4_p[proc_control_B.b_s_j + proc_control_B.e_i] =
              proc_control_B.exptj_f;
            proc_control_B.b_s_j += 13;
          }
        }

        memcpy(&F[0], &proc_control_B.A4_p[0], 169U * sizeof(real_T));
        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_j = 0; proc_control_B.b_s_j < 13;
             proc_control_B.b_s_j++) {
          proc_control_B.i17 = 0;
          for (proc_control_B.i18 = 0; proc_control_B.i18 < 13;
               proc_control_B.i18++) {
            proc_control_B.F_tmp = proc_control_B.i18 + proc_control_B.e_i;
            proc_control_B.A4_p[proc_control_B.F_tmp] = (F[proc_control_B.i17 +
              proc_control_B.b_s_j] + F[proc_control_B.F_tmp]) / 2.0;
            proc_control_B.i17 += 13;
          }

          proc_control_B.e_i += 13;
        }

        memcpy(&F[0], &proc_control_B.A4_p[0], 169U * sizeof(real_T));
      } else {
        proc_control_B.recomputeDiags_c = true;
        proc_control_B.e_j = 3;
        while (proc_control_B.recomputeDiags_c && (proc_control_B.e_j <= 13)) {
          proc_control_B.e_i = proc_control_B.e_j;
          while (proc_control_B.recomputeDiags_c && (proc_control_B.e_i <= 13))
          {
            proc_control_B.recomputeDiags_c = (A[((proc_control_B.e_j - 3) * 13
              + proc_control_B.e_i) - 1] == 0.0);
            proc_control_B.e_i++;
          }

          proc_control_B.e_j++;
        }

        if (proc_control_B.recomputeDiags_c) {
          proc_control_B.e_j = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.e_j - 1 < 12)) {
            proc_control_B.e_i = (proc_control_B.e_j - 1) * 13 +
              proc_control_B.e_j;
            proc_control_B.d6_ji = A[proc_control_B.e_i];
            if (proc_control_B.d6_ji != 0.0) {
              if ((proc_control_B.e_j != 12) && (A[(13 * proc_control_B.e_j +
                    proc_control_B.e_j) + 1] != 0.0)) {
                proc_control_B.recomputeDiags_c = false;
                exitg2 = true;
              } else {
                proc_control_B.b_s_j = 13 * proc_control_B.e_j +
                  proc_control_B.e_j;
                if (A[proc_control_B.e_i - 1] != A[proc_control_B.b_s_j]) {
                  proc_control_B.recomputeDiags_c = false;
                  exitg2 = true;
                } else {
                  proc_control_B.exptj_f = A[proc_control_B.b_s_j - 1];
                  if (rtIsNaN(proc_control_B.d6_ji)) {
                    proc_control_B.d6_ji = (rtNaN);
                  } else if (proc_control_B.d6_ji < 0.0) {
                    proc_control_B.d6_ji = -1.0;
                  } else {
                    proc_control_B.d6_ji = (proc_control_B.d6_ji > 0.0);
                  }

                  if (rtIsNaN(proc_control_B.exptj_f)) {
                    proc_control_B.exptj_f = (rtNaN);
                  } else if (proc_control_B.exptj_f < 0.0) {
                    proc_control_B.exptj_f = -1.0;
                  } else {
                    proc_control_B.exptj_f = (proc_control_B.exptj_f > 0.0);
                  }

                  if (proc_control_B.d6_ji * proc_control_B.exptj_f != -1.0) {
                    proc_control_B.recomputeDiags_c = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.e_j++;
                  }
                }
              }
            } else {
              proc_control_B.e_j++;
            }
          }
        }

        proc_control_B.exptj_f = 0.0;
        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_j = 0; proc_control_B.b_s_j < 13;
             proc_control_B.b_s_j++) {
          for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
               proc_control_B.i17++) {
            proc_control_B.d6_ji = 0.0;
            proc_control_B.i18 = 0;
            for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                 proc_control_B.F_tmp++) {
              proc_control_B.d6_ji += A[proc_control_B.i18 + proc_control_B.i17]
                * A[proc_control_B.F_tmp + proc_control_B.e_i];
              proc_control_B.i18 += 13;
            }

            proc_control_B.A2_p[proc_control_B.i17 + proc_control_B.e_i] =
              proc_control_B.d6_ji;
          }

          proc_control_B.e_i += 13;
        }

        for (proc_control_B.e_i = 0; proc_control_B.e_i < 13; proc_control_B.e_i
             ++) {
          for (proc_control_B.b_s_j = 0; proc_control_B.b_s_j < 13;
               proc_control_B.b_s_j++) {
            proc_control_B.A4_f = 0.0;
            for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                 proc_control_B.i17++) {
              proc_control_B.A4_f += proc_control_B.A2_p[13 * proc_control_B.i17
                + proc_control_B.e_i] * proc_control_B.A2_p[13 *
                proc_control_B.b_s_j + proc_control_B.i17];
            }

            proc_control_B.A4_p[proc_control_B.e_i + 13 * proc_control_B.b_s_j] =
              proc_control_B.A4_f;
          }

          for (proc_control_B.b_s_j = 0; proc_control_B.b_s_j < 13;
               proc_control_B.b_s_j++) {
            proc_control_B.d6_ji = 0.0;
            for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                 proc_control_B.i17++) {
              proc_control_B.d6_ji += proc_control_B.A4_p[13 *
                proc_control_B.i17 + proc_control_B.e_i] * proc_control_B.A2_p
                [13 * proc_control_B.b_s_j + proc_control_B.i17];
            }

            proc_control_B.A6_a[proc_control_B.e_i + 13 * proc_control_B.b_s_j] =
              proc_control_B.d6_ji;
          }
        }

        proc_control_B.d6_ji = rt_powd_snf(proc_control_norm_nt
          (proc_control_B.A6_a), 0.16666666666666666);
        proc_control_B.eta1_o = rt_powd_snf(proc_control_norm_nt
          (proc_control_B.A4_p), 0.25);
        if ((!(proc_control_B.eta1_o >= proc_control_B.d6_ji)) && (!rtIsNaN
             (proc_control_B.d6_ji))) {
          proc_control_B.eta1_o = proc_control_B.d6_ji;
        }

        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1_o <= 0.01495585217958292) {
          for (proc_control_B.e_j = 0; proc_control_B.e_j <= 166;
               proc_control_B.e_j += 2) {
            proc_control_B.dv35[0] = fabs(A[proc_control_B.e_j]);
            proc_control_B.dv35[1] = fabs(A[proc_control_B.e_j + 1]);
            tmp = _mm_loadu_pd(&proc_control_B.dv35[0]);
            _mm_storeu_pd(&proc_control_B.A4_e[proc_control_B.e_j], _mm_mul_pd
                          (_mm_set1_pd(0.19285012468241128), tmp));
          }

          for (proc_control_B.e_j = 168; proc_control_B.e_j < 169;
               proc_control_B.e_j++) {
            proc_control_B.A4_e[proc_control_B.e_j] = 0.19285012468241128 * fabs
              (A[proc_control_B.e_j]);
          }

          proc_control_mpower_g(proc_control_B.A4_e, 7.0, proc_control_B.dv3);
          proc_control_B.A4_f = ceil(proc_control_log2_o(proc_control_norm_nt
            (proc_control_B.dv3) / proc_control_norm_nt(A) * 2.0 /
            2.2204460492503131E-16) / 6.0);
          if (!(proc_control_B.A4_f >= 0.0)) {
            proc_control_B.A4_f = 0.0;
          }

          if (proc_control_B.A4_f == 0.0) {
            proc_control_B.b_s = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1_o <= 0.253939833006323) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j <= 166;
                 proc_control_B.e_j += 2) {
              proc_control_B.dv36[0] = fabs(A[proc_control_B.e_j]);
              proc_control_B.dv36[1] = fabs(A[proc_control_B.e_j + 1]);
              tmp = _mm_loadu_pd(&proc_control_B.dv36[0]);
              _mm_storeu_pd(&proc_control_B.A4_e[proc_control_B.e_j], _mm_mul_pd
                            (_mm_set1_pd(0.12321872304378752), tmp));
            }

            for (proc_control_B.e_j = 168; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.A4_e[proc_control_B.e_j] = 0.12321872304378752 *
                fabs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_g(proc_control_B.A4_e, 11.0, proc_control_B.dv3);
            proc_control_B.A4_f = ceil(proc_control_log2_o(proc_control_norm_nt
              (proc_control_B.dv3) / proc_control_norm_nt(A) * 2.0 /
              2.2204460492503131E-16) / 10.0);
            if (!(proc_control_B.A4_f >= 0.0)) {
              proc_control_B.A4_f = 0.0;
            }

            if (proc_control_B.A4_f == 0.0) {
              proc_control_B.b_s = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower_g(proc_control_B.A4_p, 2.0, proc_control_B.dv3);
          proc_control_B.eta1_o = rt_powd_snf(proc_control_norm_nt
            (proc_control_B.dv3), 0.125);
          if ((!(proc_control_B.d6_ji >= proc_control_B.eta1_o)) && (!rtIsNaN
               (proc_control_B.eta1_o))) {
            proc_control_B.d6_ji = proc_control_B.eta1_o;
          }

          if (proc_control_B.d6_ji <= 0.95041789961629319) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j <= 166;
                 proc_control_B.e_j += 2) {
              proc_control_B.dv37[0] = fabs(A[proc_control_B.e_j]);
              proc_control_B.dv37[1] = fabs(A[proc_control_B.e_j + 1]);
              tmp = _mm_loadu_pd(&proc_control_B.dv37[0]);
              _mm_storeu_pd(&proc_control_B.A4_e[proc_control_B.e_j], _mm_mul_pd
                            (_mm_set1_pd(0.090475336558796943), tmp));
            }

            for (proc_control_B.e_j = 168; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.A4_e[proc_control_B.e_j] = 0.090475336558796943 *
                fabs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_g(proc_control_B.A4_e, 15.0, proc_control_B.dv3);
            proc_control_B.A4_f = ceil(proc_control_log2_o(proc_control_norm_nt
              (proc_control_B.dv3) / proc_control_norm_nt(A) * 2.0 /
              2.2204460492503131E-16) / 14.0);
            if (!(proc_control_B.A4_f >= 0.0)) {
              proc_control_B.A4_f = 0.0;
            }

            if (proc_control_B.A4_f == 0.0) {
              proc_control_B.b_s = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_ji <= 2.097847961257068) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j <= 166;
                 proc_control_B.e_j += 2) {
              proc_control_B.dv38[0] = fabs(A[proc_control_B.e_j]);
              proc_control_B.dv38[1] = fabs(A[proc_control_B.e_j + 1]);
              tmp = _mm_loadu_pd(&proc_control_B.dv38[0]);
              _mm_storeu_pd(&proc_control_B.A4_e[proc_control_B.e_j], _mm_mul_pd
                            (_mm_set1_pd(0.071467735648795785), tmp));
            }

            for (proc_control_B.e_j = 168; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.A4_e[proc_control_B.e_j] = 0.071467735648795785 *
                fabs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_g(proc_control_B.A4_e, 19.0, proc_control_B.dv3);
            proc_control_B.A4_f = ceil(proc_control_log2_o(proc_control_norm_nt
              (proc_control_B.dv3) / proc_control_norm_nt(A) * 2.0 /
              2.2204460492503131E-16) / 18.0);
            if (!(proc_control_B.A4_f >= 0.0)) {
              proc_control_B.A4_f = 0.0;
            }

            if (proc_control_B.A4_f == 0.0) {
              proc_control_B.b_s = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          proc_control_B.e_i = 0;
          for (proc_control_B.b_s_j = 0; proc_control_B.b_s_j < 13;
               proc_control_B.b_s_j++) {
            for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                 proc_control_B.i17++) {
              proc_control_B.A4_f = 0.0;
              proc_control_B.i18 = 0;
              for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                   proc_control_B.F_tmp++) {
                proc_control_B.A4_f += proc_control_B.A4_p[proc_control_B.i18 +
                  proc_control_B.i17] * proc_control_B.A6_a[proc_control_B.F_tmp
                  + proc_control_B.e_i];
                proc_control_B.i18 += 13;
              }

              proc_control_B.A4_e[proc_control_B.i17 + proc_control_B.e_i] =
                proc_control_B.A4_f;
            }

            proc_control_B.e_i += 13;
          }

          proc_control_B.A4_f = rt_powd_snf(proc_control_norm_nt
            (proc_control_B.A4_e), 0.1);
          if ((proc_control_B.eta1_o >= proc_control_B.A4_f) || rtIsNaN
              (proc_control_B.A4_f)) {
            proc_control_B.A4_f = proc_control_B.eta1_o;
          }

          if ((proc_control_B.d6_ji <= proc_control_B.A4_f) || rtIsNaN
              (proc_control_B.A4_f)) {
            proc_control_B.A4_f = proc_control_B.d6_ji;
          }

          proc_control_B.A4_f = ceil(proc_control_log2_o(proc_control_B.A4_f /
            5.3719203511481517));
          if (proc_control_B.A4_f >= 0.0) {
            proc_control_B.exptj_f = proc_control_B.A4_f;
          }

          proc_control_B.d6_ji = rt_powd_snf(2.0, proc_control_B.exptj_f);
          for (proc_control_B.e_j = 0; proc_control_B.e_j <= 166;
               proc_control_B.e_j += 2) {
            tmp = _mm_loadu_pd(&A[proc_control_B.e_j]);
            tmp = _mm_div_pd(tmp, _mm_set1_pd(proc_control_B.d6_ji));
            _mm_storeu_pd(&proc_control_B.T_j[proc_control_B.e_j], tmp);
            _mm_storeu_pd(&proc_control_B.dv40[0], tmp);
            proc_control_B.dv39[0] = fabs(proc_control_B.dv40[0]);
            proc_control_B.dv39[1] = fabs(proc_control_B.dv40[1]);
            tmp = _mm_loadu_pd(&proc_control_B.dv39[0]);
            _mm_storeu_pd(&proc_control_B.A4_e[proc_control_B.e_j], _mm_mul_pd
                          (_mm_set1_pd(0.05031554467093536), tmp));
          }

          for (proc_control_B.e_j = 168; proc_control_B.e_j < 169;
               proc_control_B.e_j++) {
            proc_control_B.eta1_o = A[proc_control_B.e_j] / proc_control_B.d6_ji;
            proc_control_B.T_j[proc_control_B.e_j] = proc_control_B.eta1_o;
            proc_control_B.A4_e[proc_control_B.e_j] = 0.05031554467093536 * fabs
              (proc_control_B.eta1_o);
          }

          proc_control_mpower_g(proc_control_B.A4_e, 27.0, proc_control_B.dv3);
          proc_control_B.A4_f = ceil(proc_control_log2_o(proc_control_norm_nt
            (proc_control_B.dv3) / proc_control_norm_nt(proc_control_B.T_j) *
            2.0 / 2.2204460492503131E-16) / 26.0);
          if (!(proc_control_B.A4_f >= 0.0)) {
            proc_control_B.A4_f = 0.0;
          }

          proc_control_B.exptj_f += proc_control_B.A4_f;
          if (rtIsInf(proc_control_B.exptj_f)) {
            proc_control_B.d6_ji = proc_control_norm_nt(A) / 5.3719203511481517;
            if ((!rtIsInf(proc_control_B.d6_ji)) && (!rtIsNaN
                 (proc_control_B.d6_ji))) {
              proc_control_B.d6_ji = frexp(proc_control_B.d6_ji,
                &proc_control_B.b_s);
            } else {
              proc_control_B.b_s = 0;
            }

            proc_control_B.exptj_f = proc_control_B.b_s;
            if (proc_control_B.d6_ji == 0.5) {
              proc_control_B.exptj_f = static_cast<real_T>(proc_control_B.b_s) -
                1.0;
            }
          }

          proc_control_B.b_s = 13;
        }

        if (proc_control_B.exptj_f != 0.0) {
          proc_control_B.d6_ji = rt_powd_snf(2.0, proc_control_B.exptj_f);
          for (proc_control_B.e_i = 0; proc_control_B.e_i <= 166;
               proc_control_B.e_i += 2) {
            tmp = _mm_loadu_pd(&A[proc_control_B.e_i]);
            _mm_storeu_pd(&A[proc_control_B.e_i], _mm_div_pd(tmp, _mm_set1_pd
              (proc_control_B.d6_ji)));
          }

          for (proc_control_B.e_i = 168; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            A[proc_control_B.e_i] /= proc_control_B.d6_ji;
          }

          proc_control_B.d6_ji = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj_f);
          for (proc_control_B.e_i = 0; proc_control_B.e_i <= 166;
               proc_control_B.e_i += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.A2_p[proc_control_B.e_i]);
            _mm_storeu_pd(&proc_control_B.A2_p[proc_control_B.e_i], _mm_div_pd
                          (tmp, _mm_set1_pd(proc_control_B.d6_ji)));
          }

          for (proc_control_B.e_i = 168; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A2_p[proc_control_B.e_i] /= proc_control_B.d6_ji;
          }

          proc_control_B.d6_ji = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj_f);
          for (proc_control_B.e_i = 0; proc_control_B.e_i <= 166;
               proc_control_B.e_i += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.A4_p[proc_control_B.e_i]);
            _mm_storeu_pd(&proc_control_B.A4_p[proc_control_B.e_i], _mm_div_pd
                          (tmp, _mm_set1_pd(proc_control_B.d6_ji)));
          }

          for (proc_control_B.e_i = 168; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A4_p[proc_control_B.e_i] /= proc_control_B.d6_ji;
          }

          proc_control_B.d6_ji = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj_f);
          for (proc_control_B.e_i = 0; proc_control_B.e_i <= 166;
               proc_control_B.e_i += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.A6_a[proc_control_B.e_i]);
            _mm_storeu_pd(&proc_control_B.A6_a[proc_control_B.e_i], _mm_div_pd
                          (tmp, _mm_set1_pd(proc_control_B.d6_ji)));
          }

          for (proc_control_B.e_i = 168; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A6_a[proc_control_B.e_i] /= proc_control_B.d6_ji;
          }
        }

        if (proc_control_B.recomputeDiags_c) {
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 12;
               proc_control_B.e_j++) {
            proc_control_B.blockFormat_c[proc_control_B.e_j] = 0;
          }

          proc_control_B.e_j = 0;
          while (proc_control_B.e_j + 1 < 12) {
            proc_control_B.d6_ji = A[(13 * proc_control_B.e_j +
              proc_control_B.e_j) + 1];
            if (proc_control_B.d6_ji != 0.0) {
              proc_control_B.blockFormat_c[proc_control_B.e_j] = 2;
              proc_control_B.blockFormat_c[proc_control_B.e_j + 1] = 0;
              proc_control_B.e_j += 2;
            } else if ((proc_control_B.d6_ji == 0.0) && (A[((proc_control_B.e_j
                          + 1) * 13 + proc_control_B.e_j) + 2] == 0.0)) {
              proc_control_B.blockFormat_c[proc_control_B.e_j] = 1;
              proc_control_B.e_j++;
            } else {
              proc_control_B.blockFormat_c[proc_control_B.e_j] = 0;
              proc_control_B.e_j++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat_c[11] = 2;
          } else {
            switch (proc_control_B.blockFormat_c[10]) {
             case 0:
              proc_control_B.blockFormat_c[11] = 1;
              break;

             case 1:
              proc_control_B.blockFormat_c[11] = 1;
              break;
            }
          }
        }

        proc_contro_padeApproximation_b(A, proc_control_B.A2_p,
          proc_control_B.A4_p, proc_control_B.A6_a, proc_control_B.b_s, F);
        if (proc_control_B.recomputeDiags_c) {
          proc_contr_recomputeBlockDiag_a(A, F, proc_control_B.blockFormat_c);
        }

        proc_control_B.b_s = static_cast<int32_T>(proc_control_B.exptj_f);
        for (proc_control_B.e_j = 0; proc_control_B.e_j < proc_control_B.b_s;
             proc_control_B.e_j++) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            proc_control_B.b_s_j = 0;
            for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                 proc_control_B.i17++) {
              proc_control_B.exptj_f = 0.0;
              proc_control_B.i18 = 0;
              for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                   proc_control_B.F_tmp++) {
                proc_control_B.exptj_f += F[proc_control_B.i18 +
                  proc_control_B.e_i] * F[proc_control_B.F_tmp +
                  proc_control_B.b_s_j];
                proc_control_B.i18 += 13;
              }

              proc_control_B.A4_p[proc_control_B.b_s_j + proc_control_B.e_i] =
                proc_control_B.exptj_f;
              proc_control_B.b_s_j += 13;
            }
          }

          memcpy(&F[0], &proc_control_B.A4_p[0], 169U * sizeof(real_T));
          if (proc_control_B.recomputeDiags_c) {
            for (proc_control_B.e_i = 0; proc_control_B.e_i <= 166;
                 proc_control_B.e_i += 2) {
              tmp = _mm_loadu_pd(&A[proc_control_B.e_i]);
              _mm_storeu_pd(&A[proc_control_B.e_i], _mm_mul_pd(_mm_set1_pd(2.0),
                tmp));
            }

            for (proc_control_B.e_i = 168; proc_control_B.e_i < 169;
                 proc_control_B.e_i++) {
              A[proc_control_B.e_i] *= 2.0;
            }

            proc_contr_recomputeBlockDiag_a(A, F, proc_control_B.blockFormat_c);
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
void proc_control::proc_control_mldivide_jo(const real_T A[36], real_T B[36])
{
  real_T b_A[36];
  real_T smax;
  int32_T b_ix;
  int32_T c_k;
  int32_T e;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  int8_T ipiv[6];
  memcpy(&b_A[0], &A[0], 36U * sizeof(real_T));
  for (ijA = 0; ijA < 6; ijA++) {
    ipiv[ijA] = static_cast<int8_T>(ijA + 1);
  }

  for (int32_T b_j = 0; b_j < 5; b_j++) {
    jj = b_j * 7;
    iy = 6 - b_j;
    b_ix = 0;
    ix = jj;
    smax = fabs(b_A[jj]);
    for (c_k = 2; c_k <= iy; c_k++) {
      real_T s;
      ix++;
      s = fabs(b_A[ix]);
      if (s > smax) {
        b_ix = c_k - 1;
        smax = s;
      }
    }

    if (b_A[jj + b_ix] != 0.0) {
      if (b_ix != 0) {
        iy = b_j + b_ix;
        ipiv[b_j] = static_cast<int8_T>(iy + 1);
        for (ix = 0; ix < 6; ix++) {
          b_ix = ix * 6 + b_j;
          smax = b_A[b_ix];
          b_A[b_ix] = b_A[iy];
          b_A[iy] = smax;
          iy += 6;
        }
      }

      iy = (jj - b_j) + 6;
      ix = (((((iy - jj) - 1) / 2) << 1) + jj) + 2;
      c_k = ix - 2;
      for (b_ix = jj + 2; b_ix <= c_k; b_ix += 2) {
        __m128d tmp;
        tmp = _mm_loadu_pd(&b_A[b_ix - 1]);
        _mm_storeu_pd(&b_A[b_ix - 1], _mm_div_pd(tmp, _mm_set1_pd(b_A[jj])));
      }

      for (b_ix = ix; b_ix <= iy; b_ix++) {
        b_A[b_ix - 1] /= b_A[jj];
      }
    }

    iy = jj + 6;
    b_ix = jj + 8;
    ix = 4 - b_j;
    for (c_k = 0; c_k <= ix; c_k++) {
      smax = b_A[iy];
      if (b_A[iy] != 0.0) {
        e = (b_ix - b_j) + 4;
        for (ijA = b_ix; ijA <= e; ijA++) {
          b_A[ijA - 1] += b_A[((jj + ijA) - b_ix) + 1] * -smax;
        }
      }

      iy += 6;
      b_ix += 6;
    }
  }

  for (int32_T b_j = 0; b_j < 5; b_j++) {
    int8_T ipiv_0;
    ipiv_0 = ipiv[b_j];
    if (b_j + 1 != ipiv_0) {
      for (iy = 0; iy < 6; iy++) {
        b_ix = 6 * iy + b_j;
        smax = B[b_ix];
        ijA = (6 * iy + ipiv_0) - 1;
        B[b_ix] = B[ijA];
        B[ijA] = smax;
      }
    }
  }

  for (int32_T b_j = 0; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 0; iy < 6; iy++) {
      b_ix = 6 * iy;
      ijA = iy + jj;
      if (B[ijA] != 0.0) {
        for (ix = iy + 2; ix < 7; ix++) {
          e = (ix + jj) - 1;
          B[e] -= b_A[(ix + b_ix) - 1] * B[ijA];
        }
      }
    }
  }

  for (int32_T b_j = 0; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 5; iy >= 0; iy--) {
      b_ix = 6 * iy;
      ijA = iy + jj;
      smax = B[ijA];
      if (smax != 0.0) {
        B[ijA] = smax / b_A[iy + b_ix];
        for (c_k = 0; c_k < iy; c_k++) {
          e = c_k + jj;
          B[e] -= b_A[c_k + b_ix] * B[ijA];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_AUV8QuatSimFcn(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_10;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  __m128d tmp_j;
  __m128d tmp_k;
  __m128d tmp_l;
  __m128d tmp_m;
  __m128d tmp_n;
  __m128d tmp_o;
  __m128d tmp_p;
  __m128d tmp_q;
  __m128d tmp_r;
  __m128d tmp_s;
  __m128d tmp_t;
  __m128d tmp_u;
  __m128d tmp_v;
  __m128d tmp_w;
  __m128d tmp_x;
  __m128d tmp_y;
  __m128d tmp_z;
  tmp_y = _mm_loadu_pd(&in1[4]);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_mul_pd(tmp_y, tmp_y));
  proc_control_B.t8 = proc_control_B.dv53[0];
  proc_control_B.t9 = proc_control_B.dv53[1];
  tmp_y = _mm_set1_pd(2.0);
  tmp_4 = _mm_set1_pd(in1[4]);
  tmp_z = _mm_loadu_pd(&in1[5]);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_mul_pd(_mm_mul_pd(tmp_4, tmp_z),
    tmp_y));
  proc_control_B.t11_d = proc_control_B.dv53[0];
  proc_control_B.t12_o = proc_control_B.dv53[1];
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(in1[3],
    in1[5]), _mm_set_pd(in1[4], in1[6])), tmp_y));
  proc_control_B.t13_k = proc_control_B.dv53[0];
  proc_control_B.t14_j = proc_control_B.dv53[1];
  tmp_6 = _mm_set1_pd(in1[3]);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_mul_pd(_mm_mul_pd(tmp_6, tmp_z),
    tmp_y));
  proc_control_B.t15_d = proc_control_B.dv53[0];
  proc_control_B.t16_f = proc_control_B.dv53[1];
  tmp_z = _mm_set_pd(in1[10], in1[11]);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_div_pd(tmp_z, _mm_set_pd(1000.0,
    500.0)));
  proc_control_B.t25_a = proc_control_B.dv53[0];
  proc_control_B.t29_e = proc_control_B.dv53[1];
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_mul_pd(_mm_set_pd(in1[7], in1[12]),
    _mm_set_pd(32.4648, 0.018)));
  proc_control_B.t31_n = proc_control_B.dv53[0];
  proc_control_B.t50_o = proc_control_B.dv53[1];
  tmp_10 = _mm_loadu_pd(&in1[8]);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_mul_pd(tmp_10, _mm_set_pd(46.7695,
    43.6156)));
  proc_control_B.t53 = proc_control_B.dv53[0];
  proc_control_B.t54 = proc_control_B.dv53[1];
  proc_control_B.t18_d = proc_control_B.t9 * 2.0;
  proc_control_B.t19_c = in1[6] * in1[6] * 2.0;
  proc_control_B.t57_m = proc_control_B.t25_a + proc_control_B.t31_n;
  proc_control_B.t25_a += proc_control_B.t29_e;
  proc_control_B.t29_e += proc_control_B.t31_n;
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_add_pd(_mm_mul_pd(tmp_z, _mm_set_pd
    (0.062, 0.558)), _mm_set_pd(proc_control_B.dv53[1], proc_control_B.t50_o)));
  proc_control_B.t31_n = proc_control_B.dv53[0];
  proc_control_B.t64 = proc_control_B.dv53[1];
  proc_control_B.t65 = in1[12] * 0.031 + proc_control_B.t53;
  proc_control_B.t68_o = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t45_b = fabs(in1[11]) / 10.0 + 2.3333333333333335;
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_add_pd(_mm_mul_pd(_mm_set_pd(fabs
    (in1[8]), fabs(in1[12])), _mm_set_pd(0.82, 0.102)), _mm_set_pd(20.0, 5.0)));
  proc_control_B.t46 = proc_control_B.dv53[0];
  proc_control_B.t47_m = proc_control_B.dv53[1];
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_add_pd(_mm_mul_pd(_mm_set_pd(fabs
    (in1[10]), fabs(in1[7])), _mm_set_pd(0.167, 1.17)), _mm_set_pd
    (3.3333333333333335, 15.0)));
  proc_control_B.t51_i = proc_control_B.dv53[0];
  proc_control_B.t58_i = proc_control_B.dv53[1];
  tmp_z = _mm_set_pd(-1.0, 1.0);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_add_pd(_mm_mul_pd(_mm_set_pd(in1[12],
    fabs(in1[9])), _mm_set_pd(0.062, 0.756)), _mm_mul_pd(_mm_set_pd
    (proc_control_B.t50_o, 23.333333333333332), tmp_z)));
  proc_control_B.t59_g = proc_control_B.dv53[0];
  proc_control_B.t50_o = proc_control_B.dv53[1];
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_sub_pd(_mm_mul_pd(_mm_loadu_pd
    (&in1[10]), _mm_set_pd(0.031, 0.558)), _mm_set_pd(proc_control_B.t54,
    proc_control_B.t53)));
  proc_control_B.t53 = proc_control_B.dv53[0];
  proc_control_B.t54 = proc_control_B.dv53[1];
  tmp = _mm_set1_pd(in1[10]);
  _mm_storeu_pd(&proc_control_B.dv53[0], _mm_add_pd(_mm_sub_pd(_mm_div_pd(tmp,
    _mm_set_pd(125.0, 250.0)), _mm_div_pd(_mm_loadu_pd(&in1[11]), _mm_set1_pd
    (1000.0))), _mm_mul_pd(_mm_set_pd(in1[11], in1[12]), _mm_set_pd(1.7228,
    1.8864))));
  out1[0] = (((proc_control_B.t18_d + proc_control_B.t19_c) - 1.0) * -in1[7] +
             (proc_control_B.t12_o + proc_control_B.t15_d) * in1[9]) +
    (proc_control_B.t11_d - proc_control_B.t16_f) * in1[8];
  _mm_storeu_pd(&out1[1], _mm_add_pd(_mm_sub_pd(_mm_mul_pd(_mm_add_pd(_mm_set_pd
    (proc_control_B.t13_k, proc_control_B.t11_d), _mm_set_pd
    (proc_control_B.t14_j, proc_control_B.t16_f)), _mm_loadu_pd(&in1[7])),
    _mm_mul_pd(_mm_sub_pd(_mm_add_pd(_mm_set1_pd(proc_control_B.t8 * 2.0),
    _mm_set_pd(proc_control_B.t18_d, proc_control_B.t19_c)), _mm_set1_pd(1.0)),
               tmp_10)), _mm_mul_pd(_mm_sub_pd(_mm_set_pd(proc_control_B.t12_o,
    proc_control_B.t13_k), _mm_set_pd(proc_control_B.t15_d, proc_control_B.t14_j)),
    _mm_set_pd(in1[7], in1[9]))));
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  tmp_10 = _mm_set_pd(1.0, -1.0);
  tmp_9 = _mm_set1_pd(in1[11]);
  tmp_d = _mm_set1_pd(in1[12]);
  _mm_storeu_pd(&out1[4], _mm_add_pd(_mm_add_pd(_mm_div_pd(_mm_mul_pd(_mm_set_pd
    (in1[6], in1[3]), tmp), tmp_y), _mm_mul_pd(_mm_div_pd(_mm_mul_pd(_mm_set_pd
    (in1[3], in1[6]), tmp_9), tmp_y), tmp_10)), _mm_mul_pd(_mm_div_pd(_mm_mul_pd
    (_mm_set_pd(in1[4], in1[5]), tmp_d), tmp_y), tmp_z)));
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_d = in1[4] * in1[6];
  proc_control_B.t12_o = in1[5] * in1[6];
  proc_control_B.t13_k = in1[3] * in1[4];
  proc_control_B.t14_j = in1[3] * in1[5];
  proc_control_B.t15_d = in1[10] * proc_control_B.t57_m;
  proc_control_B.t16_f = in1[10] * proc_control_B.t58_i;
  proc_control_B.t18_d = in1[10] * proc_control_B.t64;
  proc_control_B.t19_c = in1[10] * proc_control_B.t53;
  proc_control_B.out1_tmp_mui = proc_control_B.dv53[0] * in1[10];
  proc_control_B.out1_tmp_no = proc_control_B.dv53[1] * in1[10];
  proc_control_B.out1_tmp_cag = in1[11] * proc_control_B.t45_b;
  proc_control_B.out1_tmp_jvr = in1[11] * proc_control_B.t29_e;
  proc_control_B.out1_tmp_ej = in1[11] * proc_control_B.t31_n;
  proc_control_B.out1_tmp_ep = in1[11] * proc_control_B.t54;
  proc_control_B.out1_tmp_kr = in1[11] * proc_control_B.t68_o;
  proc_control_B.out1_tmp_k4 = proc_control_B.dv53[0] * in1[11];
  proc_control_B.out1_tmp_id = in1[12] * proc_control_B.t46;
  proc_control_B.out1_tmp_eh = in1[12] * proc_control_B.t25_a;
  proc_control_B.out1_tmp_ly = in1[12] * proc_control_B.t50_o;
  proc_control_B.out1_tmp_ldf = in1[12] * proc_control_B.t65;
  proc_control_B.out1_tmp_lcq = in1[12] * proc_control_B.t68_o;
  proc_control_B.out1_tmp_obs = proc_control_B.dv53[1] * in1[12];
  proc_control_B.out1_tmp_i5 = proc_control_B.t51_i * in1[7];
  proc_control_B.out1_tmp_e2t = proc_control_B.t57_m * in1[7];
  proc_control_B.out1_tmp_lo = proc_control_B.t65 * in1[7];
  proc_control_B.out1_tmp_noc = proc_control_B.t54 * in1[7];
  proc_control_B.out1_tmp_eue = proc_control_B.t47_m * in1[8];
  proc_control_B.out1_tmp_cu = proc_control_B.t29_e * in1[8];
  proc_control_B.out1_tmp_ap = proc_control_B.t50_o * in1[8];
  proc_control_B.out1_tmp_ms = proc_control_B.t64 * in1[8];
  proc_control_B.out1_tmp_ckb = proc_control_B.t59_g * in1[9];
  proc_control_B.out1_tmp_fg = proc_control_B.t25_a * in1[9];
  proc_control_B.out1_tmp_mj = proc_control_B.t31_n * in1[9];
  proc_control_B.out1_tmp_k0 = proc_control_B.t53 * in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_B.t8 * 0.0063195296824236141)) + ((in2[0]
    * 1.4142135623730951 * 0.015171119710606879 + proc_control_B.t9 *
    -0.0063195296824236141) + in2[1] * 1.4142135623730951 * 0.014928824155507611))
                     + ((in2[2] * 1.4142135623730951 * 0.015171119710606879 +
    in2[3] * 1.4142135623730951 * 0.01516372519659284) - proc_control_B.t11_d *
                        0.4138016519122657)) + ((proc_control_B.t12_o *
    -0.0013017970932508 - proc_control_B.t13_k * 0.0013017970932508) +
    proc_control_B.t14_j * 0.4138016519122657)) + (((proc_control_B.t15_d *
    -0.96028628902704993 - proc_control_B.t16_f * 0.0001303522588356414) +
    proc_control_B.t18_d * 9.4803055144857715E-7) - proc_control_B.t19_c *
    6.8231348244175949E-6)) + (((proc_control_B.out1_tmp_mui *
    -0.010033314971702871 - proc_control_B.out1_tmp_no * 0.0010125044874363649)
    + proc_control_B.out1_tmp_cag * 0.010033314971702871) -
    proc_control_B.out1_tmp_jvr * 2.9388947094905889E-5)) +
                 (((proc_control_B.out1_tmp_ej * -6.8231348244175949E-6 +
                    proc_control_B.out1_tmp_ep * 0.030976977065388711) +
                   proc_control_B.out1_tmp_kr * 0.0010125044874363649) -
                  proc_control_B.out1_tmp_k4 * 0.0001303522588356414)) +
                (((proc_control_B.out1_tmp_id * -0.0010125044874363649 +
                   proc_control_B.out1_tmp_eh * 0.0002115171795569455) +
                  proc_control_B.out1_tmp_ly * 9.4803055144857715E-7) +
                 proc_control_B.out1_tmp_ldf * 0.030976977065388711)) +
               (((proc_control_B.out1_tmp_lcq * 0.010033314971702871 +
                  proc_control_B.out1_tmp_obs * 0.0001303522588356414) -
                 proc_control_B.out1_tmp_i5 * 0.030976977065388711) +
                proc_control_B.out1_tmp_e2t * 0.0040409200239048832)) +
              (((proc_control_B.out1_tmp_lo * -0.0010125044874363649 +
                 proc_control_B.out1_tmp_noc * 0.010033314971702871) -
                proc_control_B.out1_tmp_eue * 9.4803055144857715E-7) -
               proc_control_B.out1_tmp_cu * 0.311032764122789)) +
             (((proc_control_B.out1_tmp_ap * -0.0010125044874363649 -
                proc_control_B.out1_tmp_ms * 0.0001303522588356414) +
               proc_control_B.out1_tmp_ckb * 6.8231348244175949E-6) +
              proc_control_B.out1_tmp_fg * 0.031387639110527318)) +
    ((proc_control_B.out1_tmp_mj * 0.010033314971702871 -
      proc_control_B.out1_tmp_k0 * 0.0001303522588356414) + 0.003159764841211807);
  tmp_y = _mm_set1_pd(in2[0]);
  tmp_0 = _mm_set1_pd(in2[1]);
  tmp_1 = _mm_set1_pd(1.4142135623730951);
  tmp_2 = _mm_set1_pd(in2[2]);
  tmp_3 = _mm_set1_pd(in2[3]);
  tmp_5 = _mm_set1_pd(in1[6]);
  tmp_7 = _mm_set1_pd(in1[5]);
  tmp_8 = _mm_set_pd(0.0058758415205803329, 0.00099202109956931486);
  tmp_a = _mm_set_pd(5.2828771531483014E-6, 0.00042780737967584029);
  tmp_b = _mm_set1_pd(proc_control_B.dv53[0]);
  tmp_c = _mm_set_pd(0.002272431716587712, 0.021882274381510681);
  tmp_e = _mm_set_pd(2.9076309096921531E-5, 0.02320783323245932);
  tmp_f = _mm_set_pd(6.8231348244175949E-6, 9.4803055144857715E-7);
  tmp_g = _mm_set1_pd(proc_control_B.t68_o);
  tmp_h = _mm_set1_pd(proc_control_B.dv53[1]);
  tmp_i = _mm_set1_pd(proc_control_B.t57_m);
  tmp_j = _mm_set1_pd(in1[7]);
  tmp_k = _mm_set1_pd(proc_control_B.t65);
  tmp_l = _mm_set_pd(-5.2828771531483014E-6, 0.00042780737967584029);
  tmp_m = _mm_set1_pd(proc_control_B.t54);
  tmp_n = _mm_set_pd(0.00039756137245743289, 0.0001026911824132076);
  tmp_o = _mm_set1_pd(proc_control_B.t29_e);
  tmp_p = _mm_set1_pd(in1[8]);
  tmp_q = _mm_set1_pd(proc_control_B.t50_o);
  tmp_r = _mm_set1_pd(proc_control_B.t64);
  tmp_s = _mm_set_pd(0.021384731826702759, 2.9076309096921531E-5);
  tmp_t = _mm_set1_pd(proc_control_B.t25_a);
  tmp_u = _mm_set1_pd(in1[9]);
  tmp_v = _mm_set1_pd(proc_control_B.t31_n);
  tmp_w = _mm_set_pd(-0.00039756137245743289, 0.0001026911824132076);
  tmp_x = _mm_set1_pd(proc_control_B.t53);
  _mm_storeu_pd(&out1[8], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_y,
    _mm_set_pd(-1.725827915740819E-6, 0.00013975754063522079)), _mm_mul_pd(tmp_0,
    _mm_set_pd(-5.8281975682474322E-18, 7.9244610288113972E-21))), _mm_mul_pd
    (tmp_2, _mm_set_pd(1.748241265284163E-6, -0.00014157257363048341))),
    _mm_sub_pd(_mm_mul_pd(tmp_3, _mm_set_pd(1.740770148765829E-6,
    -0.0001409675626320625)), _mm_mul_pd(_mm_set1_pd(in2[4]), _mm_set_pd
    (0.02095639900015615, 0.0034249251816346319)))), _mm_add_pd(_mm_mul_pd
    (_mm_set1_pd(in2[5]), _mm_set_pd(0.021100316216985739, 0.003387750973601051)),
    _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(in2[6]), _mm_set_pd(0.021822949502860629,
    0.0035708122797193441)), tmp_z))), _mm_add_pd(_mm_mul_pd(_mm_set1_pd(in2[7]),
    _mm_set_pd(0.02167903228603104, -0.0035336380716857632)), _mm_mul_pd
    (_mm_mul_pd(_mm_set1_pd(proc_control_B.t8), _mm_set_pd(0.18635748921352191,
    0.02693023120923067)), tmp_10))), _mm_add_pd(_mm_sub_pd(_mm_mul_pd
    (_mm_set1_pd(proc_control_B.t9), _mm_set_pd(0.18635748921352191,
    -0.02693023120923067)), _mm_mul_pd(_mm_mul_pd(tmp_y, tmp_1), _mm_set_pd
    (4.8869263875916949E-5, 0.01090649593858282))), _mm_mul_pd(_mm_mul_pd(tmp_0,
    tmp_1), _mm_set_pd(6.6264429389244648E-5, 0.011000123045544621)))),
    _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_2, tmp_1), _mm_set_pd
    (-4.8869263875916949E-5, -0.01090649593858282)), _mm_mul_pd(_mm_mul_pd(tmp_3,
    tmp_1), _mm_set_pd(6.7490056888775055E-5, 0.01090087173345982))), _mm_mul_pd
               (_mm_mul_pd(_mm_mul_pd(tmp_4, tmp_5), tmp_8), tmp_10))),
    _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_7, tmp_5), _mm_set_pd
    (0.033540735888224739, -0.51979016069898065)), _mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_6, tmp_4), _mm_set_pd(0.033540735888224739,
    0.51979016069898065)), tmp_10)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_6,
    tmp_7), tmp_8), tmp_z))), _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd
    (_mm_mul_pd(tmp, tmp_i), _mm_set_pd(0.0002115171795569455,
    -2.9388947094905889E-5)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp, _mm_set1_pd
    (proc_control_B.t58_i)), tmp_c), tmp_10)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (tmp, tmp_r), tmp_e), tmp_z)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp, tmp_x),
    tmp_s), tmp_10))), _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd
    (tmp, tmp_b), _mm_set_pd(0.00039756137245743289, -0.0001026911824132076)),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp, tmp_h), tmp_a), tmp_z)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_9, _mm_set1_pd(proc_control_B.t45_b)), tmp_n),
     tmp_z)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_9, tmp_o), _mm_set_pd
    (0.00090136558200456737, 0.71944283020623911)), tmp_10))), _mm_add_pd
                (_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_9, tmp_v),
    _mm_set_pd(0.021384731826702759, -2.9076309096921531E-5)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_9, tmp_m), tmp_f), tmp_z)), _mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_9, tmp_g), tmp_a), tmp_10)), _mm_mul_pd(_mm_mul_pd
    (_mm_mul_pd(tmp_9, tmp_b), tmp_c), tmp_10))), _mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_d, _mm_set1_pd(proc_control_B.t46)),
    tmp_l), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_d, tmp_t), _mm_set_pd
    (0.66292668662778553, 0.00090136558200456737)), tmp_z)), _mm_mul_pd
     (_mm_mul_pd(_mm_mul_pd(tmp_d, tmp_q), tmp_e), tmp_z)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_d, tmp_k), tmp_f), tmp_z))), _mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_d, tmp_g), tmp_w),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_d, tmp_h), tmp_c), tmp_z)), _mm_mul_pd
                (_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.t51_i), tmp_j),
    tmp_f), tmp_10)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_i, tmp_j), _mm_set_pd
    (0.070445383214219059, 0.678350505826831)), tmp_z))), _mm_add_pd(_mm_add_pd
    (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_k, tmp_j), tmp_l), _mm_mul_pd
                (_mm_mul_pd(_mm_mul_pd(tmp_m, tmp_j), tmp_n), tmp_z)),
     _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.t47_m), tmp_p),
    tmp_e), tmp_10)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_o, tmp_p), _mm_set_pd
    (0.01232440254618042, 0.0031834266548094372)), tmp_10))), _mm_add_pd
    (_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_q, tmp_p), tmp_l),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_r, tmp_p), tmp_c), tmp_10)), _mm_mul_pd
                (_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.t59_g), tmp_u),
    tmp_s), tmp_z)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_t, tmp_u), _mm_set_pd
    (0.00016376919174759729, 0.013262028769951049)), tmp_10))), _mm_add_pd
    (_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_v, tmp_u), tmp_w), _mm_mul_pd
                (_mm_mul_pd(_mm_mul_pd(tmp_x, tmp_u), tmp_c), tmp_10)),
     _mm_mul_pd(_mm_set_pd(0.093178744606760927, 0.01346511560461533), tmp_z))));
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_B.t8 * 2.1047070084068991)) + ((in2[0] *
    1.4142135623730951 * 0.043593198825375247 + proc_control_B.t9 *
    -2.1047070084068991) - in2[1] * 1.4142135623730951 * 0.043051831063235027))
                        + ((in2[2] * 1.4142135623730951 * 0.043593198825375247 -
    in2[3] * 1.4142135623730951 * 0.043976565543532631) - proc_control_B.t11_d *
    0.1138522338822895)) + ((proc_control_B.t12_o * -25.242114556122988 -
    proc_control_B.t13_k * 25.242114556122988) + proc_control_B.t14_j *
    0.1138522338822895)) + ((proc_control_B.t15_d * -0.0040409200239048832 -
    proc_control_B.t16_f * 1.71018810547529) + proc_control_B.t18_d *
    0.021882274381510681)) + ((proc_control_B.t19_c * -0.002272431716587712 -
    proc_control_B.out1_tmp_mui * 0.0080268590155159435) +
    proc_control_B.out1_tmp_no * 0.0039859244840414)) +
                    ((proc_control_B.out1_tmp_cag * 0.0080268590155159435 -
                      proc_control_B.out1_tmp_jvr * 0.678350505826831) -
                     proc_control_B.out1_tmp_ej * 0.002272431716587712)) +
                   ((proc_control_B.out1_tmp_ep * 0.0001303522588356414 -
                     proc_control_B.out1_tmp_kr * 0.0039859244840414) -
                    proc_control_B.out1_tmp_k4 * 1.71018810547529)) +
                  (((proc_control_B.out1_tmp_id * 0.0039859244840414 +
                     proc_control_B.out1_tmp_eh * 0.070445383214219059) +
                    proc_control_B.out1_tmp_ly * 0.021882274381510681) +
                   proc_control_B.out1_tmp_ldf * 0.0001303522588356414)) +
                 ((proc_control_B.out1_tmp_lcq * 0.0080268590155159435 +
                   proc_control_B.out1_tmp_obs * 1.71018810547529) -
                  proc_control_B.out1_tmp_i5 * 0.0001303522588356414)) +
                ((proc_control_B.out1_tmp_e2t * 53.015831269733987 +
                  proc_control_B.out1_tmp_lo * 0.0039859244840414) +
                 proc_control_B.out1_tmp_noc * 0.0080268590155159435)) +
               ((proc_control_B.out1_tmp_eue * -0.021882274381510681 -
                 proc_control_B.out1_tmp_cu * 0.2488326294809943) +
                proc_control_B.out1_tmp_ap * 0.0039859244840414)) +
              ((proc_control_B.out1_tmp_ms * -1.71018810547529 +
                proc_control_B.out1_tmp_ckb * 0.002272431716587712) -
               proc_control_B.out1_tmp_fg * 0.1235636590052834)) +
    ((proc_control_B.out1_tmp_mj * 0.0080268590155159435 -
      proc_control_B.out1_tmp_k0 * 1.71018810547529) + 1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_B.t8 * 0.36821797582524962)) + ((in2[0] *
    1.4142135623730951 * 0.013457654526727991 + proc_control_B.t9 *
    0.36821797582524962) + in2[1] * 1.4142135623730951 * 0.013869054980635681))
                       + ((in2[2] * 1.4142135623730951 * 0.013457654526727991 +
    in2[3] * 1.4142135623730951 * 0.01386868232130781) + proc_control_B.t11_d *
    8.6371397256799973)) + ((proc_control_B.t12_o * 0.1184627304742461 +
    proc_control_B.t13_k * 0.1184627304742461) - proc_control_B.t14_j *
    8.6371397256799973)) + (((proc_control_B.t15_d * 0.311032764122789 +
    proc_control_B.t16_f * 0.0080268590155159435) - proc_control_B.t18_d *
    0.0001026911824132076) + proc_control_B.t19_c * 0.00039756137245743289)) +
                    ((proc_control_B.out1_tmp_mui * 0.58374455968341665 +
                      proc_control_B.out1_tmp_no * 1.606290206365557E-6) -
                     proc_control_B.out1_tmp_cag * 0.58374455968341665)) +
                   (((proc_control_B.out1_tmp_jvr * 0.0031834266548094372 +
                      proc_control_B.out1_tmp_ej * 0.00039756137245743289) -
                     proc_control_B.out1_tmp_ep * 0.010033314971702871) -
                    proc_control_B.out1_tmp_kr * 1.606290206365557E-6)) +
                  (((proc_control_B.out1_tmp_k4 * 0.0080268590155159435 +
                     proc_control_B.out1_tmp_id * 1.606290206365557E-6) -
                    proc_control_B.out1_tmp_eh * 0.01232440254618042) -
                   proc_control_B.out1_tmp_ly * 0.0001026911824132076)) +
                 ((proc_control_B.out1_tmp_ldf * -0.010033314971702871 -
                   proc_control_B.out1_tmp_lcq * 0.58374455968341665) -
                  proc_control_B.out1_tmp_obs * 0.0080268590155159435)) +
                ((proc_control_B.out1_tmp_i5 * 0.010033314971702871 -
                  proc_control_B.out1_tmp_e2t * 0.2488326294809943) +
                 proc_control_B.out1_tmp_lo * 1.606290206365557E-6)) +
               ((proc_control_B.out1_tmp_noc * -0.58374455968341665 +
                 proc_control_B.out1_tmp_eue * 0.0001026911824132076) +
                proc_control_B.out1_tmp_cu * 18.096081350185919)) +
              (((proc_control_B.out1_tmp_ap * 1.606290206365557E-6 +
                 proc_control_B.out1_tmp_ms * 0.0080268590155159435) -
                proc_control_B.out1_tmp_ckb * 0.00039756137245743289) -
               proc_control_B.out1_tmp_fg * 4.9794996397332282E-5)) +
    ((proc_control_B.out1_tmp_mj * -0.58374455968341665 +
      proc_control_B.out1_tmp_k0 * 0.0080268590155159435) - 0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_B.t8 * 0.0048929560732764686)) +
                        ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 +
    proc_control_B.t9 * 0.0048929560732764686) - in2[1] * 1.4142135623730951 *
    0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_B.t11_d * 0.65361132374006825)) +
                      ((proc_control_B.t12_o * 0.38451002147839958 +
                        proc_control_B.t13_k * 0.38451002147839958) +
                       proc_control_B.t14_j * 0.65361132374006825)) +
                     (((proc_control_B.t15_d * -0.031387639110527318 +
                        proc_control_B.t16_f * 0.0039859244840414) -
                       proc_control_B.t18_d * 0.00042780737967584029) +
                      proc_control_B.t19_c * 5.2828771531483014E-6)) +
                    (((proc_control_B.out1_tmp_mui * -1.606290206365557E-6 -
                       proc_control_B.out1_tmp_no * 0.53015902215788635) +
                      proc_control_B.out1_tmp_cag * 1.606290206365557E-6) +
                     proc_control_B.out1_tmp_jvr * 0.013262028769951049)) +
                   (((proc_control_B.out1_tmp_ej * 5.2828771531483014E-6 +
                      proc_control_B.out1_tmp_ep * 0.0010125044874363649) +
                     proc_control_B.out1_tmp_kr * 0.53015902215788635) +
                    proc_control_B.out1_tmp_k4 * 0.0039859244840414)) +
                  ((proc_control_B.out1_tmp_id * -0.53015902215788635 -
                    proc_control_B.out1_tmp_eh * 0.00016376919174759729) -
                   proc_control_B.out1_tmp_ly * 0.00042780737967584029)) +
                 (((proc_control_B.out1_tmp_ldf * 0.0010125044874363649 +
                    proc_control_B.out1_tmp_lcq * 1.606290206365557E-6) -
                   proc_control_B.out1_tmp_obs * 0.0039859244840414) -
                  proc_control_B.out1_tmp_i5 * 0.0010125044874363649)) +
                ((proc_control_B.out1_tmp_e2t * -0.1235636590052834 -
                  proc_control_B.out1_tmp_lo * 0.53015902215788635) +
                 proc_control_B.out1_tmp_noc * 1.606290206365557E-6)) +
               ((proc_control_B.out1_tmp_eue * 0.00042780737967584029 -
                 proc_control_B.out1_tmp_cu * 4.9794996397332282E-5) -
                proc_control_B.out1_tmp_ap * 0.53015902215788635)) +
              (((proc_control_B.out1_tmp_ms * 0.0039859244840414 -
                 proc_control_B.out1_tmp_ckb * 5.2828771531483014E-6) +
                proc_control_B.out1_tmp_fg * 16.434929686894481) +
               proc_control_B.out1_tmp_mj * 1.606290206365557E-6)) +
    (proc_control_B.out1_tmp_k0 * 0.0039859244840414 - 0.0024464780366382352);
}

// Function for MATLAB Function: '<S72>/MATLAB Function'
real_T proc_control::proc_control_norm_nti(const real_T x[4])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;
  absxk = fabs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = fabs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = fabs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = fabs(x[3]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * sqrt(y);
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_mpc_plantupdate(const real_T a[169], real_T b
  [104], const real_T c[169], real_T b_A[441], real_T b_B[630], real_T b_C[273],
  const real_T b_D[390], const int32_T b_mvindex[8], const int32_T b_myindex[13],
  const real_T b_Uscale[8], const real_T b_Yscale[13], real_T Bu[168], real_T
  Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13], real_T QQ[441], real_T
  RR[169], real_T NN[273])
{
  int32_T b_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  int8_T UnknownIn[29];
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (int32_T i = 0; i <= 10; i += 2) {
      __m128d tmp;
      b_tmp = i + i_1;
      tmp = _mm_loadu_pd(&b[b_tmp]);
      _mm_storeu_pd(&b[b_tmp], _mm_mul_pd(tmp, _mm_set1_pd(b_Uscale[i_0])));
    }

    for (int32_T i = 12; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i = 0; i < 13; i++) {
    for (b_tmp = 0; b_tmp <= 10; b_tmp += 2) {
      i_2 = b_tmp + i_1;
      _mm_storeu_pd(&b_C[i_2], _mm_div_pd(_mm_loadu_pd(&c[i_2]), _mm_loadu_pd
        (&b_Yscale[b_tmp])));
      _mm_storeu_pd(&b_A[b_tmp + i_0], _mm_loadu_pd(&a[i_2]));
    }

    for (b_tmp = 12; b_tmp < 13; b_tmp++) {
      i_2 = b_tmp + i_1;
      b_C[i_2] = c[i_2] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[i_2];
    }

    i_1 += 13;
    i_0 += 21;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 21 * i_1] = b[(b_mvindex[i_1] - 1) * 13 + i_0];
    }

    memcpy(&Bu[i_1 * 21], &b_B[i_1 * 21], 21U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    Bv[i_1] = b_B[i_1 + 168];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[b_myindex[i_1] + 103];
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 21; i_0++) {
      proc_control_B.b_tmp[i_0 + 34 * i_1] = b_B[(UnknownIn[i_1] - 1) * 21 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.b_tmp[(i_0 + 34 * i_1) + 21] = b_D[((UnknownIn[i_1] - 1) *
        13 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 34; i_1++) {
    i_0 = 0;
    for (int32_T i = 0; i < 34; i++) {
      real_T CovMat;
      CovMat = 0.0;
      b_tmp = 0;
      for (i_2 = 0; i_2 < 29; i_2++) {
        CovMat += proc_control_B.b_tmp[b_tmp + i_1] * proc_control_B.b_tmp[b_tmp
          + i];
        b_tmp += 34;
      }

      proc_control_B.CovMat[i_0 + i_1] = CovMat;
      i_0 += 34;
    }
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i = 0; i < 21; i++) {
    memcpy(&QQ[i_1], &proc_control_B.CovMat[i_0], 21U * sizeof(real_T));
    i_1 += 21;
    i_0 += 34;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    memcpy(&RR[i_1 * 13], &proc_control_B.CovMat[i_1 * 34 + 735], 13U * sizeof
           (real_T));
    memcpy(&NN[i_1 * 21], &proc_control_B.CovMat[i_1 * 34 + 714], 21U * sizeof
           (real_T));
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_cont_mpc_constraintcoefLTV(const real_T b_A[4851], const
  real_T Bu[1848], const real_T Bv[231], const real_T b_C[3003], const real_T
  Dv[143], const real_T b_Jm[640], real_T b_SuJm[1040], real_T b_Sx[2730],
  real_T b_Su1[1040], real_T b_Hv[1430])
{
  for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++) {
    proc_control_B.b_C_j = 0.0;
    proc_control_B.i27 = 0;
    for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21; proc_control_B.i_jx
         ++) {
      proc_control_B.b_C_j += b_C[(proc_control_B.i27 + proc_control_B.i26) +
        273] * Bv[proc_control_B.i_jx];
      proc_control_B.i27 += 13;
    }

    b_Hv[proc_control_B.i26] = proc_control_B.b_C_j;
    b_Hv[proc_control_B.i26 + 130] = Dv[proc_control_B.i26 + 13];
  }

  proc_control_B.i26 = 0;
  for (proc_control_B.i27 = 0; proc_control_B.i27 < 9; proc_control_B.i27++) {
    memset(&b_Hv[proc_control_B.i26 + 260], 0, 13U * sizeof(real_T));
    proc_control_B.i26 += 130;
  }

  proc_control_B.i26 = 0;
  for (proc_control_B.i27 = 0; proc_control_B.i27 < 11; proc_control_B.i27++) {
    memset(&b_Hv[proc_control_B.i26 + 13], 0, 117U * sizeof(real_T));
    proc_control_B.i26 += 130;
  }

  for (proc_control_B.i26 = 0; proc_control_B.i26 < 21; proc_control_B.i26++) {
    for (proc_control_B.i27 = 0; proc_control_B.i27 < 13; proc_control_B.i27++)
    {
      proc_control_B.b_C_j = 0.0;
      for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
           proc_control_B.i_jx++) {
        proc_control_B.b_C_j += b_C[(13 * proc_control_B.i_jx +
          proc_control_B.i27) + 273] * b_A[21 * proc_control_B.i26 +
          proc_control_B.i_jx];
      }

      b_Sx[proc_control_B.i27 + 130 * proc_control_B.i26] = proc_control_B.b_C_j;
    }

    memset(&b_Sx[proc_control_B.i26 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (proc_control_B.i26 = 0; proc_control_B.i26 < 8; proc_control_B.i26++) {
    for (proc_control_B.i27 = 0; proc_control_B.i27 < 13; proc_control_B.i27++)
    {
      proc_control_B.b_C_j = 0.0;
      for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
           proc_control_B.i_jx++) {
        proc_control_B.b_C_j += b_C[(13 * proc_control_B.i_jx +
          proc_control_B.i27) + 273] * Bu[21 * proc_control_B.i26 +
          proc_control_B.i_jx];
      }

      b_Su1[proc_control_B.i27 + 130 * proc_control_B.i26] =
        proc_control_B.b_C_j;
    }

    memset(&b_Su1[proc_control_B.i26 * 130 + 13], 0, 117U * sizeof(real_T));
    memcpy(&proc_control_B.a[proc_control_B.i26 * 130],
           &b_Su1[proc_control_B.i26 * 130], 13U * sizeof(real_T));
  }

  proc_control_B.i26 = 0;
  for (proc_control_B.i27 = 0; proc_control_B.i27 < 72; proc_control_B.i27++) {
    memset(&proc_control_B.a[proc_control_B.i26 + 1040], 0, 13U * sizeof(real_T));
    proc_control_B.i26 += 130;
  }

  proc_control_B.i26 = 0;
  for (proc_control_B.i27 = 0; proc_control_B.i27 < 80; proc_control_B.i27++) {
    memset(&proc_control_B.a[proc_control_B.i26 + 13], 0, 117U * sizeof(real_T));
    proc_control_B.i26 += 130;
  }

  memcpy(&proc_control_B.AA[0], &b_A[441], 441U * sizeof(real_T));
  memset(&proc_control_B.AA[441], 0, 3528U * sizeof(real_T));
  for (proc_control_B.i_m = 0; proc_control_B.i_m < 9; proc_control_B.i_m++) {
    proc_control_B.i_ig = static_cast<uint8_T>(static_cast<uint32_T>
      (proc_control_B.i_m + 1) * 13U + 1U);
    for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
    {
      proc_control_B.rows_g = static_cast<uint8_T>(static_cast<uint32_T>
        (proc_control_B.i26) + proc_control_B.i_ig);
      proc_control_B.rows_d[proc_control_B.i26] = proc_control_B.rows_g;
      for (proc_control_B.i27 = 0; proc_control_B.i27 < 8; proc_control_B.i27++)
      {
        proc_control_B.b_Su1_tmp = (130 * proc_control_B.i27 +
          proc_control_B.rows_g) - 1;
        b_Su1[proc_control_B.b_Su1_tmp] = 0.0;
        for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
             proc_control_B.i_jx++) {
          b_Su1[proc_control_B.b_Su1_tmp] += b_C[(13 * proc_control_B.i_jx +
            proc_control_B.i26) + (proc_control_B.i_m + 2) * 273] * Bu[(21 *
            proc_control_B.i27 + proc_control_B.i_jx) + (proc_control_B.i_m + 1)
            * 168];
        }
      }
    }

    proc_control_B.i_jx = (proc_control_B.i_m + 1) << 3;
    for (proc_control_B.i26 = 0; proc_control_B.i26 < 8; proc_control_B.i26++) {
      for (proc_control_B.i27 = 0; proc_control_B.i27 < 13; proc_control_B.i27++)
      {
        proc_control_B.rows_g = proc_control_B.rows_d[proc_control_B.i27];
        proc_control_B.a[(proc_control_B.rows_g + 130 * (proc_control_B.i26 +
          proc_control_B.i_jx)) - 1] = b_Su1[(130 * proc_control_B.i26 +
          proc_control_B.rows_g) - 1];
      }
    }

    for (proc_control_B.b_Su1_tmp = 0; proc_control_B.b_Su1_tmp <=
         proc_control_B.i_m; proc_control_B.b_Su1_tmp++) {
      proc_control_B.j_k = proc_control_B.i_m - proc_control_B.b_Su1_tmp;
      memcpy(&proc_control_B.AA_p[0], &proc_control_B.AA[proc_control_B.i_m *
             441 + proc_control_B.b_Su1_tmp * -441], 441U * sizeof(real_T));
      for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
      {
        for (proc_control_B.i27 = 0; proc_control_B.i27 < 21; proc_control_B.i27
             ++) {
          proc_control_B.b_C_j = 0.0;
          for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
               proc_control_B.i_jx++) {
            proc_control_B.b_C_j += b_C[(13 * proc_control_B.i_jx +
              proc_control_B.i26) + (proc_control_B.i_m + 2) * 273] *
              proc_control_B.AA_p[21 * proc_control_B.i27 + proc_control_B.i_jx];
          }

          proc_control_B.b_C_i[proc_control_B.i26 + 13 * proc_control_B.i27] =
            proc_control_B.b_C_j;
        }

        for (proc_control_B.i27 = 0; proc_control_B.i27 < 8; proc_control_B.i27
             ++) {
          proc_control_B.b_C_j = 0.0;
          for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
               proc_control_B.i_jx++) {
            proc_control_B.b_C_j += Bu[(21 * proc_control_B.i27 +
              proc_control_B.i_jx) + 168 * proc_control_B.j_k] *
              proc_control_B.b_C_i[13 * proc_control_B.i_jx + proc_control_B.i26];
          }

          proc_control_B.b_Su1_o[proc_control_B.i26 + 13 * proc_control_B.i27] =
            b_Su1[(130 * proc_control_B.i27 +
                   proc_control_B.rows_d[proc_control_B.i26]) - 1] +
            proc_control_B.b_C_j;
        }
      }

      for (proc_control_B.i26 = 0; proc_control_B.i26 < 8; proc_control_B.i26++)
      {
        for (proc_control_B.i27 = 0; proc_control_B.i27 < 13; proc_control_B.i27
             ++) {
          b_Su1[(proc_control_B.rows_d[proc_control_B.i27] + 130 *
                 proc_control_B.i26) - 1] = proc_control_B.b_Su1_o[13 *
            proc_control_B.i26 + proc_control_B.i27];
        }
      }

      proc_control_B.j_k <<= 3;
      for (proc_control_B.i26 = 0; proc_control_B.i26 < 8; proc_control_B.i26++)
      {
        for (proc_control_B.i27 = 0; proc_control_B.i27 < 13; proc_control_B.i27
             ++) {
          proc_control_B.rows_g = proc_control_B.rows_d[proc_control_B.i27];
          proc_control_B.a[(proc_control_B.rows_g + 130 * (proc_control_B.i26 +
            proc_control_B.j_k)) - 1] = b_Su1[(130 * proc_control_B.i26 +
            proc_control_B.rows_g) - 1];
        }
      }
    }

    for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
    {
      b_Hv[(proc_control_B.rows_d[proc_control_B.i26] + 130 *
            (proc_control_B.i_m + 2)) - 1] = Dv[(proc_control_B.i_m + 2) * 13 +
        proc_control_B.i26];
    }

    for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
    {
      proc_control_B.j_k = ((proc_control_B.i_m + 1) * 130 +
                            proc_control_B.rows_d[proc_control_B.i26]) - 1;
      b_Hv[proc_control_B.j_k] = 0.0;
      for (proc_control_B.i27 = 0; proc_control_B.i27 < 21; proc_control_B.i27++)
      {
        b_Hv[proc_control_B.j_k] += b_C[(13 * proc_control_B.i27 +
          proc_control_B.i26) + (proc_control_B.i_m + 2) * 273] * Bv
          [(proc_control_B.i_m + 1) * 21 + proc_control_B.i27];
      }
    }

    for (proc_control_B.b_Su1_tmp = 0; proc_control_B.b_Su1_tmp <=
         proc_control_B.i_m; proc_control_B.b_Su1_tmp++) {
      memcpy(&proc_control_B.AA_p[0],
             &proc_control_B.AA[proc_control_B.b_Su1_tmp * 441], 441U * sizeof
             (real_T));
      for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
      {
        proc_control_B.j_k = (130 * proc_control_B.b_Su1_tmp +
                              proc_control_B.rows_d[proc_control_B.i26]) - 1;
        b_Hv[proc_control_B.j_k] = 0.0;
        for (proc_control_B.i27 = 0; proc_control_B.i27 < 21; proc_control_B.i27
             ++) {
          proc_control_B.b_C_j = 0.0;
          for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
               proc_control_B.i_jx++) {
            proc_control_B.b_C_j += b_C[(13 * proc_control_B.i_jx +
              proc_control_B.i26) + (proc_control_B.i_m + 2) * 273] *
              proc_control_B.AA_p[21 * proc_control_B.i27 + proc_control_B.i_jx];
          }

          b_Hv[proc_control_B.j_k] += Bv[21 * proc_control_B.b_Su1_tmp +
            proc_control_B.i27] * proc_control_B.b_C_j;
        }
      }
    }

    for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
    {
      for (proc_control_B.i27 = 0; proc_control_B.i27 < 21; proc_control_B.i27++)
      {
        proc_control_B.b_C_j = 0.0;
        for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
             proc_control_B.i_jx++) {
          proc_control_B.b_C_j += b_C[(13 * proc_control_B.i_jx +
            proc_control_B.i26) + (proc_control_B.i_m + 2) * 273] *
            proc_control_B.AA[21 * proc_control_B.i27 + proc_control_B.i_jx];
        }

        proc_control_B.b_C_i[proc_control_B.i26 + 13 * proc_control_B.i27] =
          proc_control_B.b_C_j;
      }

      proc_control_B.rows_g = proc_control_B.rows_d[proc_control_B.i26];
      for (proc_control_B.i27 = 0; proc_control_B.i27 < 21; proc_control_B.i27++)
      {
        proc_control_B.b_Su1_tmp = (130 * proc_control_B.i27 +
          proc_control_B.rows_g) - 1;
        b_Sx[proc_control_B.b_Su1_tmp] = 0.0;
        for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
             proc_control_B.i_jx++) {
          b_Sx[proc_control_B.b_Su1_tmp] += proc_control_B.b_C_i[13 *
            proc_control_B.i_jx + proc_control_B.i26] * b_A[21 *
            proc_control_B.i27 + proc_control_B.i_jx];
        }
      }
    }

    if (proc_control_B.i_m + 2 < 10) {
      for (proc_control_B.b_Su1_tmp = 0; proc_control_B.b_Su1_tmp <=
           proc_control_B.i_m; proc_control_B.b_Su1_tmp++) {
        memcpy(&proc_control_B.AA_p[0],
               &proc_control_B.AA[proc_control_B.b_Su1_tmp * 441], 441U * sizeof
               (real_T));
        proc_control_B.j_k = proc_control_B.b_Su1_tmp * 21;
        for (proc_control_B.i26 = 0; proc_control_B.i26 < 21; proc_control_B.i26
             ++) {
          for (proc_control_B.i27 = 0; proc_control_B.i27 < 21;
               proc_control_B.i27++) {
            proc_control_B.AA_tmp = (proc_control_B.i27 + proc_control_B.j_k) *
              21 + proc_control_B.i26;
            proc_control_B.AA[proc_control_B.AA_tmp] = 0.0;
            for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 21;
                 proc_control_B.i_jx++) {
              proc_control_B.AA[proc_control_B.AA_tmp] += b_A[(21 *
                proc_control_B.i_jx + proc_control_B.i26) + (proc_control_B.i_m
                + 2) * 441] * proc_control_B.AA_p[21 * proc_control_B.i27 +
                proc_control_B.i_jx];
            }
          }
        }
      }

      memcpy(&proc_control_B.AA[proc_control_B.i_m * 441 + 441],
             &b_A[proc_control_B.i_m * 441 + 882], 441U * sizeof(real_T));
    }
  }

  proc_control_B.i26 = 0;
  proc_control_B.i27 = 0;
  for (proc_control_B.i_jx = 0; proc_control_B.i_jx < 8; proc_control_B.i_jx++)
  {
    for (proc_control_B.i_m = 0; proc_control_B.i_m < 130; proc_control_B.i_m++)
    {
      proc_control_B.b_C_j = 0.0;
      proc_control_B.b_Su1_tmp = 0;
      for (proc_control_B.j_k = 0; proc_control_B.j_k < 80; proc_control_B.j_k++)
      {
        proc_control_B.b_C_j += proc_control_B.a[proc_control_B.b_Su1_tmp +
          proc_control_B.i_m] * b_Jm[proc_control_B.j_k + proc_control_B.i27];
        proc_control_B.b_Su1_tmp += 130;
      }

      b_SuJm[proc_control_B.i_m + proc_control_B.i26] = proc_control_B.b_C_j;
    }

    proc_control_B.i26 += 130;
    proc_control_B.i27 += 80;
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf_f(real_T b_A[81])
{
  int32_T info;
  int32_T j;
  boolean_T exitg1;
  info = 0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j < 9)) {
    real_T c;
    real_T ssq;
    int32_T idxAjj;
    idxAjj = j * 9 + j;
    ssq = 0.0;
    if (j >= 1) {
      for (int32_T b_k = 0; b_k < j; b_k++) {
        c = b_A[b_k * 9 + j];
        ssq += c * c;
      }
    }

    ssq = b_A[idxAjj] - ssq;
    if (ssq > 0.0) {
      ssq = sqrt(ssq);
      b_A[idxAjj] = ssq;
      if (j + 1 < 9) {
        int32_T b_iy;
        int32_T d;
        int32_T jm1;
        if (j != 0) {
          b_iy = ((j - 1) * 9 + j) + 2;
          for (int32_T b_k = j + 2; b_k <= b_iy; b_k += 9) {
            jm1 = b_k - j;
            c = -b_A[div_nde_s32_floor(jm1 - 2, 9) * 9 + j];
            d = jm1 + 7;
            for (jm1 = b_k; jm1 <= d; jm1++) {
              int32_T tmp_0;
              tmp_0 = ((idxAjj + jm1) - b_k) + 1;
              b_A[tmp_0] += b_A[jm1 - 1] * c;
            }
          }
        }

        ssq = 1.0 / ssq;
        jm1 = (idxAjj - j) + 9;
        b_iy = (((((jm1 - idxAjj) - 1) / 2) << 1) + idxAjj) + 2;
        d = b_iy - 2;
        for (int32_T b_k = idxAjj + 2; b_k <= d; b_k += 2) {
          __m128d tmp;
          tmp = _mm_loadu_pd(&b_A[b_k - 1]);
          _mm_storeu_pd(&b_A[b_k - 1], _mm_mul_pd(tmp, _mm_set1_pd(ssq)));
        }

        for (int32_T b_k = b_iy; b_k <= jm1; b_k++) {
          b_A[b_k - 1] *= ssq;
        }
      }

      j++;
    } else {
      b_A[idxAjj] = ssq;
      info = j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
real_T proc_control::proc_control_minimum_l(const real_T x[9])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  if (!rtIsNaN(x[0])) {
    idx = 1;
  } else {
    boolean_T exitg1;
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 10)) {
      if (!rtIsNaN(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    for (k = idx + 1; k < 10; k++) {
      real_T x_0;
      x_0 = x[k - 1];
      if (ex > x_0) {
        ex = x_0;
      }
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_trisolve_g(const real_T b_A[81], real_T b_B[81])
{
  for (int32_T j = 0; j < 9; j++) {
    int32_T jBcol;
    jBcol = 9 * j;
    for (int32_T b_k = 0; b_k < 9; b_k++) {
      real_T b_B_0;
      int32_T b_B_tmp;
      int32_T kAcol;
      kAcol = 9 * b_k;
      b_B_tmp = b_k + jBcol;
      b_B_0 = b_B[b_B_tmp];
      if (b_B_0 != 0.0) {
        b_B[b_B_tmp] = b_B_0 / b_A[b_k + kAcol];
        for (int32_T i = b_k + 2; i < 10; i++) {
          int32_T tmp;
          tmp = (i + jBcol) - 1;
          b_B[tmp] -= b_A[(i + kAcol) - 1] * b_B[b_B_tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
real_T proc_control::proc_control_norm_n(const real_T x[9])
{
  real_T scale;
  real_T y;
  y = 0.0;
  scale = 3.3121686421112381E-170;
  for (int32_T k = 0; k < 9; k++) {
    real_T absxk;
    absxk = fabs(x[k]);
    if (absxk > scale) {
      real_T t;
      t = scale / absxk;
      y = y * t * t + 1.0;
      scale = absxk;
    } else {
      real_T t;
      t = absxk / scale;
      y += t * t;
    }
  }

  return scale * sqrt(y);
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
real_T proc_control::proc_control_maximum(const real_T x[9])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  if (!rtIsNaN(x[0])) {
    idx = 1;
  } else {
    boolean_T exitg1;
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 10)) {
      if (!rtIsNaN(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    for (k = idx + 1; k < 10; k++) {
      real_T x_0;
      x_0 = x[k - 1];
      if (ex < x_0) {
        ex = x_0;
      }
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
real_T proc_control::proc_control_xnrm2_g(int32_T n, const real_T x[81], int32_T
  ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_B.scale_d = 3.3121686421112381E-170;
      proc_control_B.kend = (ix0 + n) - 1;
      for (proc_control_B.k_o = ix0; proc_control_B.k_o <= proc_control_B.kend;
           proc_control_B.k_o++) {
        proc_control_B.absxk_e = fabs(x[proc_control_B.k_o - 1]);
        if (proc_control_B.absxk_e > proc_control_B.scale_d) {
          proc_control_B.t_e = proc_control_B.scale_d / proc_control_B.absxk_e;
          y = y * proc_control_B.t_e * proc_control_B.t_e + 1.0;
          proc_control_B.scale_d = proc_control_B.absxk_e;
        } else {
          proc_control_B.t_e = proc_control_B.absxk_e / proc_control_B.scale_d;
          y += proc_control_B.t_e * proc_control_B.t_e;
        }
      }

      y = proc_control_B.scale_d * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_xgemv_f(int32_T b_m, int32_T n, const real_T
  b_A[81], int32_T ia0, const real_T x[81], int32_T ix0, real_T y[9])
{
  if ((b_m != 0) && (n != 0)) {
    int32_T b;
    if (n - 1 >= 0) {
      memset(&y[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));
    }

    b = (n - 1) * 9 + ia0;
    for (int32_T b_iy = ia0; b_iy <= b; b_iy += 9) {
      real_T c;
      int32_T d;
      int32_T iyend;
      c = 0.0;
      d = (b_iy + b_m) - 1;
      for (iyend = b_iy; iyend <= d; iyend++) {
        c += x[((ix0 + iyend) - b_iy) - 1] * b_A[iyend - 1];
      }

      iyend = div_nde_s32_floor(b_iy - ia0, 9);
      y[iyend] += c;
    }
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_xgerc_g(int32_T b_m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y[9], real_T b_A[81], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j = 0; j < n; j++) {
      real_T temp;
      temp = y[j];
      if (temp != 0.0) {
        int32_T b;
        temp *= alpha1;
        b = b_m + jA;
        for (int32_T ijA = jA; ijA < b; ijA++) {
          b_A[ijA - 1] += b_A[((ix0 + ijA) - jA) - 1] * temp;
        }
      }

      jA += 9;
    }
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_KWIKfactor_k(const real_T b_Ac[2034], const
  int32_T iC[226], int32_T nA, const real_T b_Linv[81], real_T b_D[81], real_T
  b_H[81], int32_T n, real_T RLinv[81], real_T *Status)
{
  __m128d tmp;
  int32_T exitg1;
  boolean_T exitg2;
  *Status = 1.0;
  memset(&RLinv[0], 0, 81U * sizeof(real_T));
  for (proc_control_B.k_i = 0; proc_control_B.k_i < nA; proc_control_B.k_i++) {
    proc_control_B.ii = iC[proc_control_B.k_i];
    for (proc_control_B.b_coltop = 0; proc_control_B.b_coltop < 9;
         proc_control_B.b_coltop++) {
      proc_control_B.RLinv_a = 0.0;
      for (proc_control_B.b_lastv = 0; proc_control_B.b_lastv < 9;
           proc_control_B.b_lastv++) {
        proc_control_B.RLinv_a += b_Ac[(226 * proc_control_B.b_lastv +
          proc_control_B.ii) - 1] * b_Linv[9 * proc_control_B.b_lastv +
          proc_control_B.b_coltop];
      }

      RLinv[proc_control_B.b_coltop + 9 * proc_control_B.k_i] =
        proc_control_B.RLinv_a;
    }
  }

  memcpy(&proc_control_B.b_A_p[0], &RLinv[0], 81U * sizeof(real_T));
  memset(&proc_control_B.tau[0], 0, 9U * sizeof(real_T));
  memset(&proc_control_B.work[0], 0, 9U * sizeof(real_T));
  for (proc_control_B.k_i = 0; proc_control_B.k_i < 9; proc_control_B.k_i++) {
    proc_control_B.ii = proc_control_B.k_i * 9 + proc_control_B.k_i;
    if (proc_control_B.k_i + 1 < 9) {
      proc_control_B.RLinv_a = proc_control_B.b_A_p[proc_control_B.ii];
      proc_control_B.b_lastv = proc_control_B.ii + 2;
      proc_control_B.tau[proc_control_B.k_i] = 0.0;
      proc_control_B.beta1 = proc_control_xnrm2_g(8 - proc_control_B.k_i,
        proc_control_B.b_A_p, proc_control_B.ii + 2);
      if (proc_control_B.beta1 != 0.0) {
        proc_control_B.b_A_f = proc_control_B.b_A_p[proc_control_B.ii];
        proc_control_B.beta1 = rt_hypotd_snf(proc_control_B.b_A_f,
          proc_control_B.beta1);
        if (proc_control_B.b_A_f >= 0.0) {
          proc_control_B.beta1 = -proc_control_B.beta1;
        }

        if (fabs(proc_control_B.beta1) < 1.0020841800044864E-292) {
          proc_control_B.knt = 0;
          proc_control_B.coltop = (proc_control_B.ii - proc_control_B.k_i) + 9;
          do {
            proc_control_B.knt++;
            proc_control_B.vectorUB_o1 = (((((proc_control_B.coltop -
              proc_control_B.ii) - 1) / 2) << 1) + proc_control_B.ii) + 2;
            proc_control_B.vectorUB_tmp = proc_control_B.vectorUB_o1 - 2;
            for (proc_control_B.b_coltop = proc_control_B.b_lastv;
                 proc_control_B.b_coltop <= proc_control_B.vectorUB_tmp;
                 proc_control_B.b_coltop += 2) {
              tmp = _mm_loadu_pd(&proc_control_B.b_A_p[proc_control_B.b_coltop -
                                 1]);
              _mm_storeu_pd(&proc_control_B.b_A_p[proc_control_B.b_coltop - 1],
                            _mm_mul_pd(tmp, _mm_set1_pd(9.9792015476736E+291)));
            }

            for (proc_control_B.b_coltop = proc_control_B.vectorUB_o1;
                 proc_control_B.b_coltop <= proc_control_B.coltop;
                 proc_control_B.b_coltop++) {
              proc_control_B.b_A_p[proc_control_B.b_coltop - 1] *=
                9.9792015476736E+291;
            }

            proc_control_B.beta1 *= 9.9792015476736E+291;
            proc_control_B.RLinv_a *= 9.9792015476736E+291;
          } while ((fabs(proc_control_B.beta1) < 1.0020841800044864E-292) &&
                   (proc_control_B.knt < 20));

          proc_control_B.beta1 = rt_hypotd_snf(proc_control_B.RLinv_a,
            proc_control_xnrm2_g(8 - proc_control_B.k_i, proc_control_B.b_A_p,
            proc_control_B.ii + 2));
          if (proc_control_B.RLinv_a >= 0.0) {
            proc_control_B.beta1 = -proc_control_B.beta1;
          }

          proc_control_B.tau[proc_control_B.k_i] = (proc_control_B.beta1 -
            proc_control_B.RLinv_a) / proc_control_B.beta1;
          proc_control_B.RLinv_a = 1.0 / (proc_control_B.RLinv_a -
            proc_control_B.beta1);
          for (proc_control_B.b_coltop = proc_control_B.b_lastv;
               proc_control_B.b_coltop <= proc_control_B.vectorUB_tmp;
               proc_control_B.b_coltop += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.b_A_p[proc_control_B.b_coltop - 1]);
            _mm_storeu_pd(&proc_control_B.b_A_p[proc_control_B.b_coltop - 1],
                          _mm_mul_pd(tmp, _mm_set1_pd(proc_control_B.RLinv_a)));
          }

          for (proc_control_B.b_coltop = proc_control_B.vectorUB_o1;
               proc_control_B.b_coltop <= proc_control_B.coltop;
               proc_control_B.b_coltop++) {
            proc_control_B.b_A_p[proc_control_B.b_coltop - 1] *=
              proc_control_B.RLinv_a;
          }

          for (proc_control_B.b_lastv = 0; proc_control_B.b_lastv <
               proc_control_B.knt; proc_control_B.b_lastv++) {
            proc_control_B.beta1 *= 1.0020841800044864E-292;
          }

          proc_control_B.RLinv_a = proc_control_B.beta1;
        } else {
          proc_control_B.tau[proc_control_B.k_i] = (proc_control_B.beta1 -
            proc_control_B.b_A_f) / proc_control_B.beta1;
          proc_control_B.RLinv_a = 1.0 / (proc_control_B.b_A_f -
            proc_control_B.beta1);
          proc_control_B.b_coltop = (proc_control_B.ii - proc_control_B.k_i) + 9;
          proc_control_B.coltop = (((((proc_control_B.b_coltop -
            proc_control_B.ii) - 1) / 2) << 1) + proc_control_B.ii) + 2;
          proc_control_B.vectorUB_o1 = proc_control_B.coltop - 2;
          for (proc_control_B.knt = proc_control_B.b_lastv; proc_control_B.knt <=
               proc_control_B.vectorUB_o1; proc_control_B.knt += 2) {
            tmp = _mm_loadu_pd(&proc_control_B.b_A_p[proc_control_B.knt - 1]);
            _mm_storeu_pd(&proc_control_B.b_A_p[proc_control_B.knt - 1],
                          _mm_mul_pd(tmp, _mm_set1_pd(proc_control_B.RLinv_a)));
          }

          for (proc_control_B.knt = proc_control_B.coltop; proc_control_B.knt <=
               proc_control_B.b_coltop; proc_control_B.knt++) {
            proc_control_B.b_A_p[proc_control_B.knt - 1] *=
              proc_control_B.RLinv_a;
          }

          proc_control_B.RLinv_a = proc_control_B.beta1;
        }
      }

      proc_control_B.b_A_p[proc_control_B.ii] = 1.0;
      if (proc_control_B.tau[proc_control_B.k_i] != 0.0) {
        proc_control_B.b_lastv = 9 - proc_control_B.k_i;
        proc_control_B.knt = (proc_control_B.ii - proc_control_B.k_i) + 8;
        while ((proc_control_B.b_lastv > 0) &&
               (proc_control_B.b_A_p[proc_control_B.knt] == 0.0)) {
          proc_control_B.b_lastv--;
          proc_control_B.knt--;
        }

        proc_control_B.knt = 8 - proc_control_B.k_i;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.knt > 0)) {
          proc_control_B.b_coltop = ((proc_control_B.knt - 1) * 9 +
            proc_control_B.ii) + 9;
          proc_control_B.coltop = proc_control_B.b_coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.coltop + 1 <= proc_control_B.b_coltop +
                proc_control_B.b_lastv) {
              if (proc_control_B.b_A_p[proc_control_B.coltop] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.coltop++;
              }
            } else {
              proc_control_B.knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.b_lastv = 0;
        proc_control_B.knt = 0;
      }

      if (proc_control_B.b_lastv > 0) {
        proc_control_xgemv_f(proc_control_B.b_lastv, proc_control_B.knt,
                             proc_control_B.b_A_p, proc_control_B.ii + 10,
                             proc_control_B.b_A_p, proc_control_B.ii + 1,
                             proc_control_B.work);
        proc_control_xgerc_g(proc_control_B.b_lastv, proc_control_B.knt,
                             -proc_control_B.tau[proc_control_B.k_i],
                             proc_control_B.ii + 1, proc_control_B.work,
                             proc_control_B.b_A_p, proc_control_B.ii + 10);
      }

      proc_control_B.b_A_p[proc_control_B.ii] = proc_control_B.RLinv_a;
    } else {
      proc_control_B.tau[8] = 0.0;
    }
  }

  for (proc_control_B.k_i = 0; proc_control_B.k_i < 9; proc_control_B.k_i++) {
    for (proc_control_B.ii = 0; proc_control_B.ii <= proc_control_B.k_i;
         proc_control_B.ii++) {
      proc_control_B.R[proc_control_B.ii + 9 * proc_control_B.k_i] =
        proc_control_B.b_A_p[9 * proc_control_B.k_i + proc_control_B.ii];
    }

    for (proc_control_B.ii = proc_control_B.k_i + 2; proc_control_B.ii < 10;
         proc_control_B.ii++) {
      proc_control_B.R[(proc_control_B.ii + 9 * proc_control_B.k_i) - 1] = 0.0;
    }

    proc_control_B.work[proc_control_B.k_i] = 0.0;
  }

  for (proc_control_B.k_i = 8; proc_control_B.k_i >= 0; proc_control_B.k_i--) {
    proc_control_B.b_lastv = (proc_control_B.k_i * 9 + proc_control_B.k_i) + 10;
    if (proc_control_B.k_i + 1 < 9) {
      proc_control_B.b_A_p[proc_control_B.b_lastv - 10] = 1.0;
      if (proc_control_B.tau[proc_control_B.k_i] != 0.0) {
        proc_control_B.knt = 9 - proc_control_B.k_i;
        proc_control_B.b_coltop = proc_control_B.b_lastv - proc_control_B.k_i;
        while ((proc_control_B.knt > 0) &&
               (proc_control_B.b_A_p[proc_control_B.b_coltop - 2] == 0.0)) {
          proc_control_B.knt--;
          proc_control_B.b_coltop--;
        }

        proc_control_B.b_coltop = 8 - proc_control_B.k_i;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.b_coltop > 0)) {
          proc_control_B.coltop = (proc_control_B.b_coltop - 1) * 9 +
            proc_control_B.b_lastv;
          proc_control_B.ii = proc_control_B.coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.ii <= (proc_control_B.coltop + proc_control_B.knt)
                - 1) {
              if (proc_control_B.b_A_p[proc_control_B.ii - 1] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ii++;
              }
            } else {
              proc_control_B.b_coltop--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt = 0;
        proc_control_B.b_coltop = 0;
      }

      if (proc_control_B.knt > 0) {
        proc_control_xgemv_f(proc_control_B.knt, proc_control_B.b_coltop,
                             proc_control_B.b_A_p, proc_control_B.b_lastv,
                             proc_control_B.b_A_p, proc_control_B.b_lastv - 9,
                             proc_control_B.work);
        proc_control_xgerc_g(proc_control_B.knt, proc_control_B.b_coltop,
                             -proc_control_B.tau[proc_control_B.k_i],
                             proc_control_B.b_lastv - 9, proc_control_B.work,
                             proc_control_B.b_A_p, proc_control_B.b_lastv);
      }

      proc_control_B.b_coltop = (proc_control_B.b_lastv - proc_control_B.k_i) -
        1;
      proc_control_B.coltop = (((((proc_control_B.b_coltop -
        proc_control_B.b_lastv) + 9) / 2) << 1) + proc_control_B.b_lastv) - 8;
      proc_control_B.vectorUB_o1 = proc_control_B.coltop - 2;
      for (proc_control_B.knt = proc_control_B.b_lastv - 8; proc_control_B.knt <=
           proc_control_B.vectorUB_o1; proc_control_B.knt += 2) {
        tmp = _mm_loadu_pd(&proc_control_B.b_A_p[proc_control_B.knt - 1]);
        _mm_storeu_pd(&proc_control_B.b_A_p[proc_control_B.knt - 1], _mm_mul_pd
                      (tmp, _mm_set1_pd(-proc_control_B.tau[proc_control_B.k_i])));
      }

      for (proc_control_B.knt = proc_control_B.coltop; proc_control_B.knt <=
           proc_control_B.b_coltop; proc_control_B.knt++) {
        proc_control_B.b_A_p[proc_control_B.knt - 1] *=
          -proc_control_B.tau[proc_control_B.k_i];
      }
    }

    proc_control_B.b_A_p[proc_control_B.b_lastv - 10] = 1.0 -
      proc_control_B.tau[proc_control_B.k_i];
    for (proc_control_B.knt = 0; proc_control_B.knt < proc_control_B.k_i;
         proc_control_B.knt++) {
      proc_control_B.b_A_p[(proc_control_B.b_lastv - proc_control_B.knt) - 11] =
        0.0;
    }
  }

  proc_control_B.k_i = 0;
  do {
    exitg1 = 0;
    if (proc_control_B.k_i <= nA - 1) {
      if (fabs(proc_control_B.R[9 * proc_control_B.k_i + proc_control_B.k_i]) <
          1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.k_i++;
      }
    } else {
      proc_control_B.knt = 0;
      for (proc_control_B.k_i = 0; proc_control_B.k_i < n; proc_control_B.k_i++)
      {
        proc_control_B.coltop = 0;
        for (proc_control_B.ii = 0; proc_control_B.ii < n; proc_control_B.ii++)
        {
          proc_control_B.RLinv_a = 0.0;
          for (proc_control_B.b_coltop = 0; proc_control_B.b_coltop < 9;
               proc_control_B.b_coltop++) {
            proc_control_B.RLinv_a += b_Linv[proc_control_B.b_coltop +
              proc_control_B.knt] * proc_control_B.b_A_p[proc_control_B.b_coltop
              + proc_control_B.coltop];
          }

          proc_control_B.TL[proc_control_B.coltop + proc_control_B.k_i] =
            proc_control_B.RLinv_a;
          proc_control_B.coltop += 9;
        }

        proc_control_B.knt += 9;
      }

      memset(&RLinv[0], 0, 81U * sizeof(real_T));
      for (proc_control_B.k_i = nA; proc_control_B.k_i >= 1; proc_control_B.k_i
           --) {
        proc_control_B.b_coltop = (proc_control_B.k_i - 1) * 9;
        proc_control_B.knt = (proc_control_B.k_i + proc_control_B.b_coltop) - 1;
        RLinv[proc_control_B.knt] = 1.0;
        for (proc_control_B.ii = proc_control_B.k_i; proc_control_B.ii <= nA;
             proc_control_B.ii++) {
          proc_control_B.coltop = ((proc_control_B.ii - 1) * 9 +
            proc_control_B.k_i) - 1;
          RLinv[proc_control_B.coltop] /= proc_control_B.R[proc_control_B.knt];
        }

        if (proc_control_B.k_i > 1) {
          for (proc_control_B.ii = 0; proc_control_B.ii <= proc_control_B.k_i -
               2; proc_control_B.ii++) {
            for (proc_control_B.b_lastv = proc_control_B.k_i;
                 proc_control_B.b_lastv <= nA; proc_control_B.b_lastv++) {
              proc_control_B.knt = (proc_control_B.b_lastv - 1) * 9;
              proc_control_B.coltop = proc_control_B.knt + proc_control_B.ii;
              RLinv[proc_control_B.coltop] -= RLinv[(proc_control_B.knt +
                proc_control_B.k_i) - 1] *
                proc_control_B.R[proc_control_B.b_coltop + proc_control_B.ii];
            }
          }
        }
      }

      proc_control_B.knt = 0;
      for (proc_control_B.k_i = 0; proc_control_B.k_i < n; proc_control_B.k_i++)
      {
        proc_control_B.coltop = (proc_control_B.k_i + 1) * 9;
        for (proc_control_B.ii = proc_control_B.k_i + 1; proc_control_B.ii <= n;
             proc_control_B.ii++) {
          proc_control_B.b_coltop = (proc_control_B.coltop + proc_control_B.k_i)
            - 9;
          b_H[proc_control_B.b_coltop] = 0.0;
          proc_control_B.vectorUB_o1 = (nA + 1) * 9;
          for (proc_control_B.b_lastv = nA + 1; proc_control_B.b_lastv <= n;
               proc_control_B.b_lastv++) {
            b_H[proc_control_B.b_coltop] -= proc_control_B.TL
              [(proc_control_B.vectorUB_o1 + proc_control_B.ii) - 10] *
              proc_control_B.TL[(proc_control_B.vectorUB_o1 + proc_control_B.k_i)
              - 9];
            proc_control_B.vectorUB_o1 += 9;
          }

          b_H[(proc_control_B.ii + proc_control_B.knt) - 1] =
            b_H[proc_control_B.b_coltop];
          proc_control_B.coltop += 9;
        }

        proc_control_B.knt += 9;
      }

      proc_control_B.knt = 0;
      for (proc_control_B.k_i = 0; proc_control_B.k_i < nA; proc_control_B.k_i++)
      {
        for (proc_control_B.ii = 0; proc_control_B.ii < n; proc_control_B.ii++)
        {
          proc_control_B.b_coltop = proc_control_B.ii + proc_control_B.knt;
          b_D[proc_control_B.b_coltop] = 0.0;
          proc_control_B.vectorUB_o1 = (proc_control_B.k_i + 1) * 9;
          for (proc_control_B.b_lastv = proc_control_B.k_i + 1;
               proc_control_B.b_lastv <= nA; proc_control_B.b_lastv++) {
            b_D[proc_control_B.b_coltop] += proc_control_B.TL
              [(proc_control_B.vectorUB_o1 + proc_control_B.ii) - 9] * RLinv
              [(proc_control_B.vectorUB_o1 + proc_control_B.k_i) - 9];
            proc_control_B.vectorUB_o1 += 9;
          }
        }

        proc_control_B.knt += 9;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_DropConstraint(int32_T kDrop, boolean_T iA[226],
  int32_T *nA, int32_T iC[226])
{
  if (kDrop > 0) {
    iA[iC[kDrop - 1] - 1] = false;
    if (kDrop < *nA) {
      for (int32_T i = kDrop; i < *nA; i++) {
        iC[i - 1] = iC[i];
      }
    }

    iC[*nA - 1] = 0;
    (*nA)--;
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_qpkwik(const real_T b_Linv[81], const real_T
  b_Hinv[81], const real_T f[9], const real_T b_Ac[2034], const real_T b[226],
  boolean_T iA[226], int32_T maxiter, real_T FeasTol, real_T x[9], real_T
  lambda[226], int32_T *status)
{
  __m128d tmp;
  __m128d tmp_0;
  int32_T exitg1;
  int32_T exitg3;
  boolean_T exitg2;
  boolean_T exitg4;
  boolean_T guard1;
  boolean_T guard2;
  memset(&x[0], 0, 9U * sizeof(real_T));
  memset(&lambda[0], 0, 226U * sizeof(real_T));
  *status = 1;
  memset(&proc_control_B.r_i[0], 0, 9U * sizeof(real_T));
  proc_control_B.rMin = 0.0;
  proc_control_B.cTolComputed = false;
  for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 226; proc_control_B.i_j5++)
  {
    proc_control_B.cTol_p[proc_control_B.i_j5] = 1.0;
    proc_control_B.iC_p[proc_control_B.i_j5] = 0;
  }

  proc_control_B.nA = 0;
  for (proc_control_B.tmp = 0; proc_control_B.tmp < 226; proc_control_B.tmp++) {
    if (iA[proc_control_B.tmp]) {
      proc_control_B.nA++;
      proc_control_B.iC_p[proc_control_B.nA - 1] = proc_control_B.tmp + 1;
    }
  }

  guard1 = false;
  if (proc_control_B.nA > 0) {
    memset(&proc_control_B.Opt[0], 0, 18U * sizeof(real_T));
    for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 9; proc_control_B.i_j5++)
    {
      proc_control_B.Rhs[proc_control_B.i_j5] = f[proc_control_B.i_j5];
      proc_control_B.Rhs[proc_control_B.i_j5 + 9] = 0.0;
    }

    proc_control_B.DualFeasible = false;
    proc_control_B.tmp = static_cast<int32_T>(rt_roundd_snf(0.3 *
      static_cast<real_T>(proc_control_B.nA)));
    proc_control_B.ColdReset = false;
    do {
      exitg3 = 0;
      if ((!proc_control_B.DualFeasible) && (proc_control_B.nA > 0) && (*status <=
           maxiter)) {
        proc_control_KWIKfactor_k(b_Ac, proc_control_B.iC_p, proc_control_B.nA,
          b_Linv, proc_control_B.b_D_a, proc_control_B.b_H, 9,
          proc_control_B.RLinv, &proc_control_B.Xnorm0);
        if (proc_control_B.Xnorm0 < 0.0) {
          if (proc_control_B.ColdReset) {
            *status = -2;
            exitg3 = 2;
          } else {
            proc_control_B.nA = 0;
            memset(&iA[0], 0, 226U * sizeof(boolean_T));
            memset(&proc_control_B.iC_p[0], 0, 226U * sizeof(int32_T));
            proc_control_B.ColdReset = true;
          }
        } else {
          for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < proc_control_B.nA;
               proc_control_B.i_j5++) {
            proc_control_B.Rhs[proc_control_B.i_j5 + 9] =
              b[proc_control_B.iC_p[proc_control_B.i_j5] - 1];
            for (proc_control_B.iSave = proc_control_B.i_j5 + 1;
                 proc_control_B.iSave <= proc_control_B.nA; proc_control_B.iSave
                 ++) {
              proc_control_B.U_tmp = (9 * proc_control_B.i_j5 +
                proc_control_B.iSave) - 1;
              proc_control_B.U_k[proc_control_B.U_tmp] = 0.0;
              for (proc_control_B.iC_n = 0; proc_control_B.iC_n <
                   proc_control_B.nA; proc_control_B.iC_n++) {
                proc_control_B.U_k[proc_control_B.U_tmp] +=
                  proc_control_B.RLinv[(9 * proc_control_B.iC_n +
                  proc_control_B.iSave) - 1] * proc_control_B.RLinv[9 *
                  proc_control_B.iC_n + proc_control_B.i_j5];
              }

              proc_control_B.U_k[proc_control_B.i_j5 + 9 * (proc_control_B.iSave
                - 1)] = proc_control_B.U_k[proc_control_B.U_tmp];
            }
          }

          for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 9;
               proc_control_B.i_j5++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
                 proc_control_B.iC_n++) {
              proc_control_B.Xnorm0 += proc_control_B.b_H[9 *
                proc_control_B.iC_n + proc_control_B.i_j5] *
                proc_control_B.Rhs[proc_control_B.iC_n];
            }

            proc_control_B.Opt[proc_control_B.i_j5] = proc_control_B.Xnorm0;
            for (proc_control_B.iSave = 0; proc_control_B.iSave <
                 proc_control_B.nA; proc_control_B.iSave++) {
              proc_control_B.Opt[proc_control_B.i_j5] += proc_control_B.b_D_a[9 *
                proc_control_B.iSave + proc_control_B.i_j5] *
                proc_control_B.Rhs[proc_control_B.iSave + 9];
            }
          }

          for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < proc_control_B.nA;
               proc_control_B.i_j5++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
                 proc_control_B.iC_n++) {
              proc_control_B.Xnorm0 += proc_control_B.b_D_a[9 *
                proc_control_B.i_j5 + proc_control_B.iC_n] *
                proc_control_B.Rhs[proc_control_B.iC_n];
            }

            proc_control_B.Opt[proc_control_B.i_j5 + 9] = proc_control_B.Xnorm0;
            for (proc_control_B.iSave = 0; proc_control_B.iSave <
                 proc_control_B.nA; proc_control_B.iSave++) {
              proc_control_B.Opt[proc_control_B.i_j5 + 9] += proc_control_B.U_k
                [9 * proc_control_B.iSave + proc_control_B.i_j5] *
                proc_control_B.Rhs[proc_control_B.iSave + 9];
            }
          }

          proc_control_B.Xnorm0 = -1.0E-12;
          proc_control_B.i_j5 = -1;
          for (proc_control_B.iSave = 0; proc_control_B.iSave <
               proc_control_B.nA; proc_control_B.iSave++) {
            proc_control_B.cMin = proc_control_B.Opt[proc_control_B.iSave + 9];
            lambda[proc_control_B.iC_p[proc_control_B.iSave] - 1] =
              proc_control_B.cMin;
            if ((proc_control_B.cMin < proc_control_B.Xnorm0) &&
                (proc_control_B.iSave + 1 <= proc_control_B.nA)) {
              proc_control_B.i_j5 = proc_control_B.iSave;
              proc_control_B.Xnorm0 = proc_control_B.cMin;
            }
          }

          if (proc_control_B.i_j5 + 1 <= 0) {
            proc_control_B.DualFeasible = true;
            memcpy(&x[0], &proc_control_B.Opt[0], 9U * sizeof(real_T));
          } else {
            (*status)++;
            if (proc_control_B.tmp <= 5) {
              proc_control_B.iC_n = 5;
            } else {
              proc_control_B.iC_n = proc_control_B.tmp;
            }

            if (*status > proc_control_B.iC_n) {
              proc_control_B.nA = 0;
              memset(&iA[0], 0, 226U * sizeof(boolean_T));
              memset(&proc_control_B.iC_p[0], 0, 226U * sizeof(int32_T));
              proc_control_B.ColdReset = true;
            } else {
              lambda[proc_control_B.iC_p[proc_control_B.i_j5] - 1] = 0.0;
              proc_control_DropConstraint(proc_control_B.i_j5 + 1, iA,
                &proc_control_B.nA, proc_control_B.iC_p);
            }
          }
        }
      } else {
        if (proc_control_B.nA <= 0) {
          memset(&lambda[0], 0, 226U * sizeof(real_T));
          for (proc_control_B.tmp = 0; proc_control_B.tmp < 9;
               proc_control_B.tmp++) {
            proc_control_B.Xnorm0 = 0.0;
            proc_control_B.iC_n = 0;
            for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 9;
                 proc_control_B.i_j5++) {
              proc_control_B.Xnorm0 += -b_Hinv[proc_control_B.iC_n +
                proc_control_B.tmp] * f[proc_control_B.i_j5];
              proc_control_B.iC_n += 9;
            }

            x[proc_control_B.tmp] = proc_control_B.Xnorm0;
          }
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    for (proc_control_B.tmp = 0; proc_control_B.tmp < 9; proc_control_B.tmp++) {
      proc_control_B.Xnorm0 = 0.0;
      proc_control_B.iC_n = 0;
      for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 9; proc_control_B.i_j5
           ++) {
        proc_control_B.Xnorm0 += -b_Hinv[proc_control_B.iC_n +
          proc_control_B.tmp] * f[proc_control_B.i_j5];
        proc_control_B.iC_n += 9;
      }

      x[proc_control_B.tmp] = proc_control_B.Xnorm0;
    }

    guard1 = true;
  }

  if (guard1) {
    proc_control_B.Xnorm0 = proc_control_norm_n(x);
    exitg2 = false;
    while ((!exitg2) && (*status <= maxiter)) {
      proc_control_B.cMin = -FeasTol;
      proc_control_B.tmp = -1;
      for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 226;
           proc_control_B.i_j5++) {
        if (!proc_control_B.cTolComputed) {
          for (proc_control_B.iSave = 0; proc_control_B.iSave < 9;
               proc_control_B.iSave++) {
            proc_control_B.z_d[proc_control_B.iSave] = fabs(b_Ac[226 *
              proc_control_B.iSave + proc_control_B.i_j5] *
              x[proc_control_B.iSave]);
          }

          proc_control_B.cVal = proc_control_maximum(proc_control_B.z_d);
          if ((proc_control_B.cTol_p[proc_control_B.i_j5] >= proc_control_B.cVal)
              || rtIsNaN(proc_control_B.cVal)) {
          } else {
            proc_control_B.cTol_p[proc_control_B.i_j5] = proc_control_B.cVal;
          }
        }

        if (!iA[proc_control_B.i_j5]) {
          proc_control_B.t_k = 0.0;
          for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
               proc_control_B.iC_n++) {
            proc_control_B.t_k += b_Ac[226 * proc_control_B.iC_n +
              proc_control_B.i_j5] * x[proc_control_B.iC_n];
          }

          proc_control_B.cVal = (proc_control_B.t_k - b[proc_control_B.i_j5]) /
            proc_control_B.cTol_p[proc_control_B.i_j5];
          if (proc_control_B.cVal < proc_control_B.cMin) {
            proc_control_B.cMin = proc_control_B.cVal;
            proc_control_B.tmp = proc_control_B.i_j5;
          }
        }
      }

      proc_control_B.cTolComputed = true;
      if (proc_control_B.tmp + 1 <= 0) {
        exitg2 = true;
      } else if (*status == maxiter) {
        *status = 0;
        exitg2 = true;
      } else {
        do {
          exitg1 = 0;
          if ((proc_control_B.tmp + 1 > 0) && (*status <= maxiter)) {
            guard2 = false;
            if (proc_control_B.nA == 0) {
              for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
                   proc_control_B.iC_n++) {
                proc_control_B.cMin = 0.0;
                for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 9;
                     proc_control_B.i_j5++) {
                  proc_control_B.cMin += b_Hinv[9 * proc_control_B.i_j5 +
                    proc_control_B.iC_n] * b_Ac[226 * proc_control_B.i_j5 +
                    proc_control_B.tmp];
                }

                proc_control_B.z_d[proc_control_B.iC_n] = proc_control_B.cMin;
              }

              guard2 = true;
            } else {
              proc_control_KWIKfactor_k(b_Ac, proc_control_B.iC_p,
                proc_control_B.nA, b_Linv, proc_control_B.b_D_a,
                proc_control_B.b_H, 9, proc_control_B.RLinv,
                &proc_control_B.cMin);
              if (proc_control_B.cMin <= 0.0) {
                *status = -2;
                exitg1 = 1;
              } else {
                for (proc_control_B.iC_n = 0; proc_control_B.iC_n <= 78;
                     proc_control_B.iC_n += 2) {
                  tmp_0 = _mm_loadu_pd(&proc_control_B.b_H[proc_control_B.iC_n]);
                  _mm_storeu_pd(&proc_control_B.U_k[proc_control_B.iC_n],
                                _mm_mul_pd(tmp_0, _mm_set1_pd(-1.0)));
                }

                for (proc_control_B.iC_n = 80; proc_control_B.iC_n < 81;
                     proc_control_B.iC_n++) {
                  proc_control_B.U_k[proc_control_B.iC_n] =
                    -proc_control_B.b_H[proc_control_B.iC_n];
                }

                for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
                     proc_control_B.iC_n++) {
                  proc_control_B.cMin = 0.0;
                  for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 9;
                       proc_control_B.i_j5++) {
                    proc_control_B.cMin += proc_control_B.U_k[9 *
                      proc_control_B.i_j5 + proc_control_B.iC_n] * b_Ac[226 *
                      proc_control_B.i_j5 + proc_control_B.tmp];
                  }

                  proc_control_B.z_d[proc_control_B.iC_n] = proc_control_B.cMin;
                }

                for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 <
                     proc_control_B.nA; proc_control_B.i_j5++) {
                  proc_control_B.t_k = 0.0;
                  for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
                       proc_control_B.iC_n++) {
                    proc_control_B.t_k += b_Ac[226 * proc_control_B.iC_n +
                      proc_control_B.tmp] * proc_control_B.b_D_a[9 *
                      proc_control_B.i_j5 + proc_control_B.iC_n];
                  }

                  proc_control_B.r_i[proc_control_B.i_j5] = proc_control_B.t_k;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              proc_control_B.i_j5 = 0;
              proc_control_B.cMin = 0.0;
              proc_control_B.DualFeasible = true;
              proc_control_B.ColdReset = true;
              if (proc_control_B.nA > 0) {
                proc_control_B.iSave = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_B.iSave <= proc_control_B.nA -
                                     1)) {
                  if (proc_control_B.r_i[proc_control_B.iSave] >= 1.0E-12) {
                    proc_control_B.ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_B.iSave++;
                  }
                }
              }

              if ((proc_control_B.nA != 0) && (!proc_control_B.ColdReset)) {
                for (proc_control_B.iSave = 0; proc_control_B.iSave <
                     proc_control_B.nA; proc_control_B.iSave++) {
                  proc_control_B.cVal = proc_control_B.r_i[proc_control_B.iSave];
                  if (proc_control_B.cVal > 1.0E-12) {
                    proc_control_B.cVal =
                      lambda[proc_control_B.iC_p[proc_control_B.iSave] - 1] /
                      proc_control_B.cVal;
                    if ((proc_control_B.i_j5 == 0) || (proc_control_B.cVal <
                         proc_control_B.rMin)) {
                      proc_control_B.rMin = proc_control_B.cVal;
                      proc_control_B.i_j5 = proc_control_B.iSave + 1;
                    }
                  }
                }

                if (proc_control_B.i_j5 > 0) {
                  proc_control_B.cMin = proc_control_B.rMin;
                  proc_control_B.DualFeasible = false;
                }
              }

              proc_control_B.cVal = 0.0;
              for (proc_control_B.iSave = 0; proc_control_B.iSave < 9;
                   proc_control_B.iSave++) {
                proc_control_B.cVal += b_Ac[226 * proc_control_B.iSave +
                  proc_control_B.tmp] * proc_control_B.z_d[proc_control_B.iSave];
              }

              if (proc_control_B.cVal <= 0.0) {
                proc_control_B.cVal = 0.0;
                proc_control_B.ColdReset = true;
              } else {
                proc_control_B.t_k = 0.0;
                for (proc_control_B.iC_n = 0; proc_control_B.iC_n < 9;
                     proc_control_B.iC_n++) {
                  proc_control_B.t_k += b_Ac[226 * proc_control_B.iC_n +
                    proc_control_B.tmp] * x[proc_control_B.iC_n];
                }

                proc_control_B.cVal = (b[proc_control_B.tmp] -
                  proc_control_B.t_k) / proc_control_B.cVal;
                proc_control_B.ColdReset = false;
              }

              if (proc_control_B.DualFeasible && proc_control_B.ColdReset) {
                *status = -1;
                exitg1 = 1;
              } else {
                if (proc_control_B.ColdReset) {
                  proc_control_B.t_k = proc_control_B.cMin;
                } else if (proc_control_B.DualFeasible) {
                  proc_control_B.t_k = proc_control_B.cVal;
                } else if (proc_control_B.cMin < proc_control_B.cVal) {
                  proc_control_B.t_k = proc_control_B.cMin;
                } else {
                  proc_control_B.t_k = proc_control_B.cVal;
                }

                for (proc_control_B.iSave = 0; proc_control_B.iSave <
                     proc_control_B.nA; proc_control_B.iSave++) {
                  proc_control_B.iC_n = proc_control_B.iC_p[proc_control_B.iSave];
                  lambda[proc_control_B.iC_n - 1] -= proc_control_B.t_k *
                    proc_control_B.r_i[proc_control_B.iSave];
                  if ((proc_control_B.iC_n <= 226) &&
                      (lambda[proc_control_B.iC_n - 1] < 0.0)) {
                    lambda[proc_control_B.iC_n - 1] = 0.0;
                  }
                }

                lambda[proc_control_B.tmp] += proc_control_B.t_k;
                frexp(1.0, &proc_control_B.exponent);
                if (fabs(proc_control_B.t_k - proc_control_B.cMin) <
                    2.2204460492503131E-16) {
                  proc_control_DropConstraint(proc_control_B.i_j5, iA,
                    &proc_control_B.nA, proc_control_B.iC_p);
                }

                if (!proc_control_B.ColdReset) {
                  for (proc_control_B.iC_n = 0; proc_control_B.iC_n <= 6;
                       proc_control_B.iC_n += 2) {
                    tmp_0 = _mm_loadu_pd(&proc_control_B.z_d[proc_control_B.iC_n]);
                    tmp = _mm_loadu_pd(&x[proc_control_B.iC_n]);
                    _mm_storeu_pd(&x[proc_control_B.iC_n], _mm_add_pd(_mm_mul_pd
                      (_mm_set1_pd(proc_control_B.t_k), tmp_0), tmp));
                  }

                  for (proc_control_B.iC_n = 8; proc_control_B.iC_n < 9;
                       proc_control_B.iC_n++) {
                    x[proc_control_B.iC_n] += proc_control_B.t_k *
                      proc_control_B.z_d[proc_control_B.iC_n];
                  }

                  frexp(1.0, &proc_control_B.b_exponent);
                  if (fabs(proc_control_B.t_k - proc_control_B.cVal) <
                      2.2204460492503131E-16) {
                    if (proc_control_B.nA == 9) {
                      *status = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA++;
                      proc_control_B.iC_p[proc_control_B.nA - 1] =
                        proc_control_B.tmp + 1;
                      proc_control_B.i_j5 = proc_control_B.nA - 1;
                      exitg4 = false;
                      while ((!exitg4) && (proc_control_B.i_j5 + 1 > 1)) {
                        proc_control_B.iC_n =
                          proc_control_B.iC_p[proc_control_B.i_j5 - 1];
                        if (proc_control_B.iC_p[proc_control_B.i_j5] >
                            proc_control_B.iC_n) {
                          exitg4 = true;
                        } else {
                          proc_control_B.iSave =
                            proc_control_B.iC_p[proc_control_B.i_j5];
                          proc_control_B.iC_p[proc_control_B.i_j5] =
                            proc_control_B.iC_n;
                          proc_control_B.iC_p[proc_control_B.i_j5 - 1] =
                            proc_control_B.iSave;
                          proc_control_B.i_j5--;
                        }
                      }

                      iA[proc_control_B.tmp] = true;
                      proc_control_B.tmp = -1;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_B.cMin = proc_control_norm_n(x);
            if (fabs(proc_control_B.cMin - proc_control_B.Xnorm0) > 0.001) {
              proc_control_B.Xnorm0 = proc_control_B.cMin;
              for (proc_control_B.tmp = 0; proc_control_B.tmp < 226;
                   proc_control_B.tmp++) {
                proc_control_B.cMin = fabs(b[proc_control_B.tmp]);
                if (proc_control_B.cMin >= 1.0) {
                  proc_control_B.cTol_p[proc_control_B.tmp] =
                    proc_control_B.cMin;
                } else {
                  proc_control_B.cTol_p[proc_control_B.tmp] = 1.0;
                }
              }

              proc_control_B.cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S143>/FixedHorizonOptimizer'
void proc_control::proc_control_mpcblock_optimizer(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[21],
  const real_T old_u[8], const boolean_T iA[226], const real_T b_Mlim[226],
  real_T b_Mx[4746], real_T b_Mu1[1808], real_T b_Mv[2486], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[81], real_T b_Ac[2034],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[640], const real_T b_I1[640], const real_T b_A[4851], const real_T Bu
  [1848], const real_T Bv[231], const real_T b_C[3003], const real_T Dv[143],
  const int32_T b_Mrows[226], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[226])
{
  __m128d tmp;
  __m128d tmp_0;
  static const int8_T c_A[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1 };

  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  memset(&iAout[0], 0, 226U * sizeof(boolean_T));
  proc_cont_mpc_constraintcoefLTV(b_A, Bu, Bv, b_C, Dv, b_Jm,
    proc_control_B.b_SuJm, proc_control_B.b_Sx, proc_control_B.b_Su1,
    proc_control_B.b_Hv);
  if (b_Mrows[0] > 0) {
    proc_control_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.kidx < 226)) {
      if (b_Mrows[proc_control_B.kidx] <= 130) {
        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8;
             proc_control_B.i_fk++) {
          b_Ac[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            -proc_control_B.b_SuJm[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 21;
             proc_control_B.i_fk++) {
          b_Mx[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            -proc_control_B.b_Sx[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8;
             proc_control_B.i_fk++) {
          b_Mu1[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            -proc_control_B.b_Su1[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 11;
             proc_control_B.i_fk++) {
          b_Mv[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            -proc_control_B.b_Hv[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.kidx++;
      } else if (b_Mrows[proc_control_B.kidx] <= 260) {
        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8;
             proc_control_B.i_fk++) {
          b_Ac[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            proc_control_B.b_SuJm[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 21;
             proc_control_B.i_fk++) {
          b_Mx[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            proc_control_B.b_Sx[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8;
             proc_control_B.i_fk++) {
          b_Mu1[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            proc_control_B.b_Su1[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 11;
             proc_control_B.i_fk++) {
          b_Mv[proc_control_B.kidx + 226 * proc_control_B.i_fk] =
            proc_control_B.b_Hv[(130 * proc_control_B.i_fk +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 13; proc_control_B.kidx++)
  {
    proc_control_B.normH = ywt[proc_control_B.kidx];
    if (proc_control_B.normH < 0.0) {
      proc_control_B.b_Wy[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wy[proc_control_B.kidx] = proc_control_B.normH *
        proc_control_B.normH;
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.normH = uwt[proc_control_B.kidx];
    if (proc_control_B.normH < 0.0) {
      proc_control_B.b_Wu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wu[proc_control_B.kidx] = proc_control_B.normH *
        proc_control_B.normH;
    }

    proc_control_B.normH = duwt[proc_control_B.kidx];
    if (proc_control_B.normH < 0.0) {
      proc_control_B.b_Wdu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wdu[proc_control_B.kidx] = proc_control_B.normH *
        proc_control_B.normH;
    }
  }

  memset(&proc_control_B.b_B_j[0], 0, sizeof(real_T) << 6U);
  proc_control_B.kidx_h = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.b_B_j[proc_control_B.kidx_h] = 1.0;
    proc_control_B.kidx_h += 9;
  }

  proc_control_B.kidx = -1;
  for (proc_control_B.Tries = 0; proc_control_B.Tries < 10; proc_control_B.Tries
       ++) {
    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk++)
    {
      for (proc_control_B.kidx_h = 0; proc_control_B.kidx_h < 10;
           proc_control_B.kidx_h++) {
        for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 8;
             proc_control_B.i2_p++) {
          proc_control_B.a_m[(proc_control_B.kidx + proc_control_B.i2_p) + 1] =
            static_cast<int8_T>(c_A[10 * proc_control_B.Tries +
                                proc_control_B.kidx_h] * static_cast<int32_T>
                                (proc_control_B.b_B_j[(proc_control_B.i_fk << 3)
            + proc_control_B.i2_p]));
        }

        proc_control_B.kidx += 8;
      }
    }
  }

  proc_control_B.i_fk = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
         proc_control_B.Tries++) {
      proc_control_B.normH = 0.0;
      proc_control_B.kidx_h = 0;
      for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 80;
           proc_control_B.i2_p++) {
        proc_control_B.normH += static_cast<real_T>
          (proc_control_B.a_m[proc_control_B.kidx_h + proc_control_B.Tries]) *
          b_Jm[proc_control_B.i2_p + proc_control_B.i_fk];
        proc_control_B.kidx_h += 80;
      }

      proc_control_B.I2Jm[proc_control_B.Tries + proc_control_B.i_fk] =
        proc_control_B.normH;
    }

    proc_control_B.i_fk += 80;
  }

  proc_control_B.ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 130; proc_control_B.kidx++)
  {
    proc_control_B.normH = proc_control_B.b_Wy[proc_control_B.ixw - 1];
    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk++)
    {
      proc_control_B.Tries = 130 * proc_control_B.i_fk + proc_control_B.kidx;
      proc_control_B.WySuJm[proc_control_B.Tries] =
        proc_control_B.b_SuJm[proc_control_B.Tries] * proc_control_B.normH;
    }

    proc_control_B.ixw = static_cast<int16_T>(proc_control_B.ixw + 1);
    if (proc_control_B.ixw > 13) {
      proc_control_B.ixw = 1;
    }
  }

  proc_control_B.ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 80; proc_control_B.kidx++)
  {
    proc_control_B.normH = proc_control_B.b_Wu[proc_control_B.ixw - 1];
    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk++)
    {
      proc_control_B.Tries = 80 * proc_control_B.i_fk + proc_control_B.kidx;
      proc_control_B.WuI2Jm[proc_control_B.Tries] =
        proc_control_B.I2Jm[proc_control_B.Tries] * proc_control_B.normH;
    }

    proc_control_B.ixw = static_cast<int16_T>(proc_control_B.ixw + 1);
    if (proc_control_B.ixw > 8) {
      proc_control_B.ixw = 1;
    }
  }

  proc_control_B.ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 80; proc_control_B.kidx++)
  {
    proc_control_B.normH = proc_control_B.b_Wdu[proc_control_B.ixw - 1];
    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk++)
    {
      proc_control_B.Tries = 80 * proc_control_B.i_fk + proc_control_B.kidx;
      proc_control_B.WduJm[proc_control_B.Tries] = b_Jm[proc_control_B.Tries] *
        proc_control_B.normH;
    }

    proc_control_B.ixw = static_cast<int16_T>(proc_control_B.ixw + 1);
    if (proc_control_B.ixw > 8) {
      proc_control_B.ixw = 1;
    }
  }

  for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk++)
  {
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.s_i = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 130;
           proc_control_B.Tries++) {
        proc_control_B.s_i += proc_control_B.b_SuJm[130 * proc_control_B.i_fk +
          proc_control_B.Tries] * proc_control_B.WySuJm[130 *
          proc_control_B.kidx + proc_control_B.Tries];
      }

      proc_control_B.normH = 0.0;
      proc_control_B.b_Jm = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
           proc_control_B.Tries++) {
        proc_control_B.kidx_h = 80 * proc_control_B.i_fk + proc_control_B.Tries;
        proc_control_B.i2_p = 80 * proc_control_B.kidx + proc_control_B.Tries;
        _mm_storeu_pd(&proc_control_B.dv34[0], _mm_add_pd(_mm_mul_pd(_mm_set_pd
          (proc_control_B.I2Jm[proc_control_B.kidx_h],
           b_Jm[proc_control_B.kidx_h]), _mm_set_pd
          (proc_control_B.WuI2Jm[proc_control_B.i2_p],
           proc_control_B.WduJm[proc_control_B.i2_p])), _mm_set_pd
          (proc_control_B.normH, proc_control_B.b_Jm)));
        proc_control_B.b_Jm = proc_control_B.dv34[0];
        proc_control_B.normH = proc_control_B.dv34[1];
      }

      b_H[proc_control_B.i_fk + 9 * proc_control_B.kidx] = (proc_control_B.s_i +
        proc_control_B.b_Jm) + proc_control_B.normH;
      proc_control_B.normH = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 130;
           proc_control_B.Tries++) {
        proc_control_B.normH += proc_control_B.b_Su1[130 * proc_control_B.i_fk +
          proc_control_B.Tries] * proc_control_B.WySuJm[130 *
          proc_control_B.kidx + proc_control_B.Tries];
      }

      proc_control_B.kidx_h = (proc_control_B.kidx << 3) + proc_control_B.i_fk;
      proc_control_B.b_Su1_e[proc_control_B.kidx_h] = proc_control_B.normH;
      proc_control_B.normH = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
           proc_control_B.Tries++) {
        proc_control_B.normH += b_I1[80 * proc_control_B.i_fk +
          proc_control_B.Tries] * proc_control_B.WuI2Jm[80 * proc_control_B.kidx
          + proc_control_B.Tries];
      }

      proc_control_B.b_I1[proc_control_B.kidx_h] = proc_control_B.normH;
    }
  }

  for (proc_control_B.i_fk = 0; proc_control_B.i_fk <= 62; proc_control_B.i_fk +=
       2) {
    tmp = _mm_loadu_pd(&proc_control_B.b_Su1_e[proc_control_B.i_fk]);
    tmp_0 = _mm_loadu_pd(&proc_control_B.b_I1[proc_control_B.i_fk]);
    _mm_storeu_pd(&proc_control_B.b_B_j[proc_control_B.i_fk], _mm_add_pd(tmp,
      tmp_0));
  }

  for (proc_control_B.i_fk = 0; proc_control_B.i_fk <= 638; proc_control_B.i_fk +=
       2) {
    tmp = _mm_loadu_pd(&proc_control_B.WuI2Jm[proc_control_B.i_fk]);
    _mm_storeu_pd(&proc_control_B.WuI2Jm[proc_control_B.i_fk], _mm_mul_pd(tmp,
      _mm_set1_pd(-1.0)));
  }

  proc_control_B.i_fk = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 21; proc_control_B.kidx++)
  {
    proc_control_B.Tries = 0;
    proc_control_B.kidx_h = 0;
    for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 8; proc_control_B.i2_p++)
    {
      proc_control_B.normH = 0.0;
      for (proc_control_B.i12 = 0; proc_control_B.i12 < 130; proc_control_B.i12
           ++) {
        proc_control_B.normH += proc_control_B.b_Sx[proc_control_B.i12 +
          proc_control_B.i_fk] * proc_control_B.WySuJm[proc_control_B.i12 +
          proc_control_B.kidx_h];
      }

      proc_control_B.b_Kx[proc_control_B.Tries + proc_control_B.kidx] =
        proc_control_B.normH;
      proc_control_B.Tries += 21;
      proc_control_B.kidx_h += 130;
    }

    proc_control_B.i_fk += 130;
  }

  proc_control_B.i_fk = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 11; proc_control_B.kidx++)
  {
    proc_control_B.Tries = 0;
    proc_control_B.kidx_h = 0;
    for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 8; proc_control_B.i2_p++)
    {
      proc_control_B.s_i = 0.0;
      for (proc_control_B.i12 = 0; proc_control_B.i12 < 130; proc_control_B.i12
           ++) {
        proc_control_B.s_i += proc_control_B.b_Hv[proc_control_B.i12 +
          proc_control_B.i_fk] * proc_control_B.WySuJm[proc_control_B.i12 +
          proc_control_B.kidx_h];
      }

      proc_control_B.b_Kv[proc_control_B.Tries + proc_control_B.kidx] =
        proc_control_B.s_i;
      proc_control_B.Tries += 11;
      proc_control_B.kidx_h += 130;
    }

    proc_control_B.i_fk += 130;
  }

  for (proc_control_B.i_fk = 0; proc_control_B.i_fk <= 1038; proc_control_B.i_fk
       += 2) {
    tmp = _mm_loadu_pd(&proc_control_B.WySuJm[proc_control_B.i_fk]);
    _mm_storeu_pd(&proc_control_B.WySuJm[proc_control_B.i_fk], _mm_mul_pd(tmp,
      _mm_set1_pd(-1.0)));
  }

  proc_control_B.kidx = 0;
  memcpy(&proc_control_B.L[0], &b_H[0], 81U * sizeof(real_T));
  proc_control_B.Tries = proc_control_xpotrf_f(proc_control_B.L);
  guard1 = false;
  if (proc_control_B.Tries == 0) {
    proc_control_B.i_fk = 0;
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 9;
         proc_control_B.Tries++) {
      proc_control_B.varargin_1[proc_control_B.Tries] =
        proc_control_B.L[proc_control_B.i_fk];
      proc_control_B.i_fk += 10;
    }

    if (proc_control_minimum_l(proc_control_B.varargin_1) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_B.normH = 0.0;
    proc_control_B.Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.Tries < 9)) {
      proc_control_B.s_i = 0.0;
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 9; proc_control_B.i_fk
           ++) {
        proc_control_B.s_i += fabs(b_H[9 * proc_control_B.i_fk +
          proc_control_B.Tries]);
      }

      if (rtIsNaN(proc_control_B.s_i)) {
        proc_control_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_B.s_i > proc_control_B.normH) {
          proc_control_B.normH = proc_control_B.s_i;
        }

        proc_control_B.Tries++;
      }
    }

    if (proc_control_B.normH >= 1.0E+10) {
      proc_control_B.kidx = 2;
    } else {
      proc_control_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.Tries <= 4)) {
        proc_control_B.normH = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_B.Tries)) * 1.4901161193847656E-7;
        memset(&proc_control_B.b[0], 0, 81U * sizeof(int8_T));
        proc_control_B.kidx_h = 0;
        for (proc_control_B.kidx = 0; proc_control_B.kidx < 9;
             proc_control_B.kidx++) {
          proc_control_B.b[proc_control_B.kidx_h] = 1;
          proc_control_B.kidx_h += 10;
        }

        for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 81;
             proc_control_B.i_fk++) {
          proc_control_B.s_i = proc_control_B.normH * static_cast<real_T>
            (proc_control_B.b[proc_control_B.i_fk]) + b_H[proc_control_B.i_fk];
          b_H[proc_control_B.i_fk] = proc_control_B.s_i;
          proc_control_B.L[proc_control_B.i_fk] = proc_control_B.s_i;
        }

        proc_control_B.kidx = proc_control_xpotrf_f(proc_control_B.L);
        guard2 = false;
        if (proc_control_B.kidx == 0) {
          proc_control_B.kidx_h = 0;
          for (proc_control_B.kidx = 0; proc_control_B.kidx < 9;
               proc_control_B.kidx++) {
            proc_control_B.varargin_1[proc_control_B.kidx] =
              proc_control_B.L[proc_control_B.kidx_h];
            proc_control_B.kidx_h += 10;
          }

          if (proc_control_minimum_l(proc_control_B.varargin_1) >
              1.4901161193847656E-7) {
            proc_control_B.kidx = 1;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          proc_control_B.kidx = 3;
          proc_control_B.Tries++;
        }
      }
    }
  }

  if (proc_control_B.kidx > 1) {
    proc_control_B.kidx = 0;
    for (proc_control_B.kidx_h = 0; proc_control_B.kidx_h < 8;
         proc_control_B.kidx_h++) {
      u[proc_control_B.kidx_h] = old_u[proc_control_B.kidx_h] +
        b_uoff[proc_control_B.kidx_h];
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 11;
           proc_control_B.i_fk++) {
        useq[proc_control_B.i_fk + proc_control_B.kidx] =
          u[proc_control_B.kidx_h];
      }

      proc_control_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    memset(&proc_control_B.b[0], 0, 81U * sizeof(int8_T));
    proc_control_B.kidx_h = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 9; proc_control_B.kidx++)
    {
      proc_control_B.b[proc_control_B.kidx_h] = 1;
      proc_control_B.kidx_h += 10;
    }

    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 81; proc_control_B.i_fk
         ++) {
      b_H[proc_control_B.i_fk] = proc_control_B.b[proc_control_B.i_fk];
    }

    proc_control_trisolve_g(proc_control_B.L, b_H);
    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 226; proc_control_B.i_fk
         ++) {
      proc_control_B.normH = 0.0;
      for (proc_control_B.kidx = 0; proc_control_B.kidx < 21;
           proc_control_B.kidx++) {
        proc_control_B.normH += b_Mx[226 * proc_control_B.kidx +
          proc_control_B.i_fk] * x[proc_control_B.kidx];
      }

      proc_control_B.s_i = 0.0;
      for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx
           ++) {
        proc_control_B.s_i += b_Mu1[226 * proc_control_B.kidx +
          proc_control_B.i_fk] * old_u[proc_control_B.kidx];
      }

      proc_control_B.b_Jm = 0.0;
      for (proc_control_B.kidx = 0; proc_control_B.kidx < 11;
           proc_control_B.kidx++) {
        proc_control_B.b_Jm += b_Mv[226 * proc_control_B.kidx +
          proc_control_B.i_fk] * vseq[proc_control_B.kidx];
      }

      proc_control_B.Bc_c[proc_control_B.i_fk] = -(((b_Mlim[proc_control_B.i_fk]
        + proc_control_B.normH) + proc_control_B.s_i) + proc_control_B.b_Jm);
    }

    memset(&proc_control_B.b_Wu[0], 0, sizeof(real_T) << 3U);
    memset(&proc_control_B.b_Wdu[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk++)
    {
      proc_control_B.umax_incr_flag_d[proc_control_B.i_fk] = false;
      proc_control_B.umin_incr_flag_l[proc_control_B.i_fk] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.kidx = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.kidx < 226)) {
        if ((b_Mrows[proc_control_B.kidx] <= 130) ||
            (b_Mrows[proc_control_B.kidx] <= 260)) {
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 340) {
          proc_control_B.Tries = (b_Mrows[proc_control_B.kidx] -
            (((b_Mrows[proc_control_B.kidx] - 261) >> 3) << 3)) - 261;
          proc_control_B.b_Del_Save_Flag0 =
            proc_control_B.umax_incr_flag_d[proc_control_B.Tries];
          if (!proc_control_B.umax_incr_flag_d[proc_control_B.Tries]) {
            proc_control_B.normH = -(b_RMVscale[proc_control_B.Tries] *
              umax[proc_control_B.Tries] - b_uoff[proc_control_B.Tries]) -
              (-b_Mlim[proc_control_B.kidx]);
            proc_control_B.b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.normH = proc_control_B.b_Wu[proc_control_B.Tries];
          }

          proc_control_B.b_Wu[proc_control_B.Tries] = proc_control_B.normH;
          proc_control_B.umax_incr_flag_d[proc_control_B.Tries] =
            proc_control_B.b_Del_Save_Flag0;
          proc_control_B.Bc_c[proc_control_B.kidx] += proc_control_B.normH;
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 420) {
          proc_control_B.Tries = (b_Mrows[proc_control_B.kidx] -
            (((b_Mrows[proc_control_B.kidx] - 341) >> 3) << 3)) - 341;
          proc_control_B.b_Del_Save_Flag0 =
            proc_control_B.umin_incr_flag_l[proc_control_B.Tries];
          if (!proc_control_B.umin_incr_flag_l[proc_control_B.Tries]) {
            proc_control_B.normH = (b_RMVscale[proc_control_B.Tries] *
              umin[proc_control_B.Tries] - b_uoff[proc_control_B.Tries]) -
              (-b_Mlim[proc_control_B.kidx]);
            proc_control_B.b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.normH = proc_control_B.b_Wdu[proc_control_B.Tries];
          }

          proc_control_B.b_Wdu[proc_control_B.Tries] = proc_control_B.normH;
          proc_control_B.umin_incr_flag_l[proc_control_B.Tries] =
            proc_control_B.b_Del_Save_Flag0;
          proc_control_B.Bc_c[proc_control_B.kidx] += proc_control_B.normH;
          proc_control_B.kidx++;
        } else {
          exitg1 = true;
        }
      }
    }

    memset(&proc_control_B.varargin_1[0], 0, 9U * sizeof(real_T));
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.normH = 0.0;
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 21;
           proc_control_B.i_fk++) {
        proc_control_B.normH += proc_control_B.b_Kx[21 * proc_control_B.kidx +
          proc_control_B.i_fk] * x[proc_control_B.i_fk];
      }

      proc_control_B.b_Jm = 0.0;
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 130;
           proc_control_B.i_fk++) {
        proc_control_B.b_Jm += proc_control_B.WySuJm[130 * proc_control_B.kidx +
          proc_control_B.i_fk] * rseq[proc_control_B.i_fk];
      }

      proc_control_B.b_B_l = 0.0;
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk
           ++) {
        proc_control_B.b_B_l += proc_control_B.b_B_j[(proc_control_B.kidx << 3)
          + proc_control_B.i_fk] * old_u[proc_control_B.i_fk];
      }

      proc_control_B.s_i = 0.0;
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 11;
           proc_control_B.i_fk++) {
        proc_control_B.s_i += proc_control_B.b_Kv[11 * proc_control_B.kidx +
          proc_control_B.i_fk] * vseq[proc_control_B.i_fk];
      }

      proc_control_B.WuI2Jm_i = 0.0;
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 80;
           proc_control_B.i_fk++) {
        proc_control_B.WuI2Jm_i += proc_control_B.WuI2Jm[80 *
          proc_control_B.kidx + proc_control_B.i_fk] *
          b_utarget[proc_control_B.i_fk];
      }

      proc_control_B.varargin_1[proc_control_B.kidx] = (((proc_control_B.normH +
        proc_control_B.b_Jm) + proc_control_B.b_B_l) + proc_control_B.s_i) +
        proc_control_B.WuI2Jm_i;
    }

    memcpy(&iAout[0], &iA[0], 226U * sizeof(boolean_T));
    proc_control_B.i_fk = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 9; proc_control_B.kidx++)
    {
      proc_control_B.Tries = 0;
      for (proc_control_B.kidx_h = 0; proc_control_B.kidx_h < 9;
           proc_control_B.kidx_h++) {
        proc_control_B.s_i = 0.0;
        for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 9;
             proc_control_B.i2_p++) {
          proc_control_B.s_i += b_H[proc_control_B.i2_p + proc_control_B.i_fk] *
            b_H[proc_control_B.i2_p + proc_control_B.Tries];
        }

        proc_control_B.L[proc_control_B.Tries + proc_control_B.kidx] =
          proc_control_B.s_i;
        proc_control_B.Tries += 9;
      }

      proc_control_B.i_fk += 9;
    }

    proc_control_qpkwik(b_H, proc_control_B.L, proc_control_B.varargin_1, b_Ac,
                        proc_control_B.Bc_c, iAout, 940, 0.01,
                        proc_control_B.zopt, proc_control_B.a__1_fm,
                        &proc_control_B.kidx);
    if ((proc_control_B.kidx < 0) || (proc_control_B.kidx == 0)) {
      memset(&proc_control_B.zopt[0], 0, 9U * sizeof(real_T));
    }

    *status = proc_control_B.kidx;
    for (proc_control_B.kidx = 0; proc_control_B.kidx <= 6; proc_control_B.kidx +=
         2) {
      tmp = _mm_loadu_pd(&proc_control_B.zopt[proc_control_B.kidx]);
      _mm_storeu_pd(&u[proc_control_B.kidx], _mm_add_pd(_mm_add_pd(_mm_loadu_pd(
        &old_u[proc_control_B.kidx]), tmp), _mm_loadu_pd
        (&b_uoff[proc_control_B.kidx])));
    }

    memset(&proc_control_B.b_B_j[0], 0, sizeof(real_T) << 6U);
    proc_control_B.kidx_h = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.b_B_j[proc_control_B.kidx_h] = 1.0;
      proc_control_B.kidx_h += 9;
    }

    proc_control_B.kidx = -1;
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 10;
         proc_control_B.Tries++) {
      for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 8; proc_control_B.i_fk
           ++) {
        for (proc_control_B.kidx_h = 0; proc_control_B.kidx_h < 10;
             proc_control_B.kidx_h++) {
          for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 8;
               proc_control_B.i2_p++) {
            proc_control_B.a_m[(proc_control_B.kidx + proc_control_B.i2_p) + 1] =
              static_cast<int8_T>(c_A[10 * proc_control_B.Tries +
                                  proc_control_B.kidx_h] * static_cast<int32_T>
                                  (proc_control_B.b_B_j[(proc_control_B.i_fk <<
              3) + proc_control_B.i2_p]));
          }

          proc_control_B.kidx += 8;
        }
      }
    }

    proc_control_B.i_fk = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
           proc_control_B.Tries++) {
        proc_control_B.s_i = 0.0;
        proc_control_B.kidx_h = 0;
        for (proc_control_B.i2_p = 0; proc_control_B.i2_p < 80;
             proc_control_B.i2_p++) {
          proc_control_B.s_i += static_cast<real_T>
            (proc_control_B.a_m[proc_control_B.kidx_h + proc_control_B.Tries]) *
            b_Jm[proc_control_B.i2_p + proc_control_B.i_fk];
          proc_control_B.kidx_h += 80;
        }

        proc_control_B.I2Jm[proc_control_B.Tries + proc_control_B.i_fk] =
          proc_control_B.s_i;
      }

      proc_control_B.b_Wu[proc_control_B.kidx] = old_u[proc_control_B.kidx] +
        b_uoff[proc_control_B.kidx];
      proc_control_B.i_fk += 80;
    }

    for (proc_control_B.i_fk = 0; proc_control_B.i_fk < 80; proc_control_B.i_fk
         ++) {
      proc_control_B.s_i = 0.0;
      proc_control_B.normH = 0.0;
      proc_control_B.kidx = 0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 8;
           proc_control_B.Tries++) {
        proc_control_B.kidx_h = proc_control_B.kidx + proc_control_B.i_fk;
        _mm_storeu_pd(&proc_control_B.dv34[0], _mm_add_pd(_mm_mul_pd(_mm_set_pd
          (b_I1[proc_control_B.kidx_h],
           proc_control_B.I2Jm[proc_control_B.kidx_h]), _mm_set_pd
          (proc_control_B.b_Wu[proc_control_B.Tries],
           proc_control_B.zopt[proc_control_B.Tries])), _mm_set_pd
          (proc_control_B.normH, proc_control_B.s_i)));
        proc_control_B.s_i = proc_control_B.dv34[0];
        proc_control_B.normH = proc_control_B.dv34[1];
        proc_control_B.kidx += 80;
      }

      proc_control_B.a_ch[proc_control_B.i_fk] = proc_control_B.s_i +
        proc_control_B.normH;
    }

    proc_control_B.i_fk = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.Tries = 0;
      for (proc_control_B.kidx_h = 0; proc_control_B.kidx_h < 10;
           proc_control_B.kidx_h++) {
        useq[proc_control_B.kidx_h + proc_control_B.i_fk] =
          proc_control_B.a_ch[proc_control_B.Tries + proc_control_B.kidx];
        proc_control_B.Tries += 8;
      }

      useq[proc_control_B.i_fk + 10] = useq[proc_control_B.i_fk + 9];
      proc_control_B.i_fk += 11;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_isfinite(const real_T x[8], boolean_T b[8])
{
  for (int32_T i = 0; i < 8; i++) {
    real_T x_0;
    x_0 = x[i];
    b[i] = ((!rtIsInf(x_0)) && (!rtIsNaN(x_0)));
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_mtimes_e(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2])
{
  static const int8_T d[640] = { 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1
  };

  proc_control_B.mc_h = A_size[0] - 1;
  C_size[0] = A_size[0];
  C_size[1] = 8;
  for (proc_control_B.j_ne = 0; proc_control_B.j_ne < 8; proc_control_B.j_ne++)
  {
    proc_control_B.coffset_b = (proc_control_B.mc_h + 1) * proc_control_B.j_ne;
    proc_control_B.boffset_p = proc_control_B.j_ne * 80;
    if (proc_control_B.mc_h >= 0) {
      memset(&C_data[proc_control_B.coffset_b], 0, static_cast<uint32_T>
             (((proc_control_B.mc_h + proc_control_B.coffset_b) -
               proc_control_B.coffset_b) + 1) * sizeof(real_T));
    }

    for (proc_control_B.b_j2 = 0; proc_control_B.b_j2 < 80; proc_control_B.b_j2
         ++) {
      proc_control_B.aoffset_b = proc_control_B.b_j2 * A_size[0];
      proc_control_B.bkj_p = d[proc_control_B.boffset_p + proc_control_B.b_j2];
      proc_control_B.scalarLB_n = ((proc_control_B.mc_h + 1) / 2) << 1;
      proc_control_B.vectorUB_b = proc_control_B.scalarLB_n - 2;
      for (proc_control_B.b_i_b = 0; proc_control_B.b_i_b <=
           proc_control_B.vectorUB_b; proc_control_B.b_i_b += 2) {
        __m128d tmp;
        proc_control_B.i16 = proc_control_B.coffset_b + proc_control_B.b_i_b;
        tmp = _mm_loadu_pd(&C_data[proc_control_B.i16]);
        _mm_storeu_pd(&C_data[proc_control_B.i16], _mm_add_pd(_mm_mul_pd
          (_mm_loadu_pd(&A_data[proc_control_B.aoffset_b + proc_control_B.b_i_b]),
           _mm_set1_pd(static_cast<real_T>(proc_control_B.bkj_p))), tmp));
      }

      for (proc_control_B.b_i_b = proc_control_B.scalarLB_n;
           proc_control_B.b_i_b <= proc_control_B.mc_h; proc_control_B.b_i_b++)
      {
        proc_control_B.i16 = proc_control_B.coffset_b + proc_control_B.b_i_b;
        C_data[proc_control_B.i16] += A_data[proc_control_B.aoffset_b +
          proc_control_B.b_i_b] * static_cast<real_T>(proc_control_B.bkj_p);
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_getUBounds(const real_T runtimedata_lastMV[8],
  const real_T runtimedata_MVMin[80], const real_T runtimedata_MVMax[80], const
  real_T runtimedata_MVRateMin[80], const real_T runtimedata_MVRateMax[80],
  real_T A_data[], int32_T A_size[2], real_T Bu_data[], int32_T Bu_size[1])
{
  __m128d tmp_0;
  real_T b_Bu[320];
  real_T d[8];
  real_T ic[8];
  real_T runtimedata_MVRateMin_0[8];
  real_T d_0;
  int32_T idx_0[2];
  int32_T tmp_size[2];
  int32_T b_i;
  int32_T i;
  int32_T idx;
  int32_T k;
  int16_T ii_data[320];
  int8_T As[64];
  int8_T Au_tmp[64];
  int8_T Au_tmp_0[64];
  boolean_T x[320];
  boolean_T tmp[8];
  boolean_T exitg1;
  memset(&proc_control_B.Au[0], 0, 25600U * sizeof(real_T));
  memset(&b_Bu[0], 0, 320U * sizeof(real_T));
  memset(&x[0], 0, 320U * sizeof(boolean_T));
  for (i = 0; i < 8; i++) {
    ic[i] = static_cast<real_T>(i) + 1.0;
  }

  memset(&As[0], 0, sizeof(int8_T) << 6U);
  i = 0;
  for (idx = 0; idx < 8; idx++) {
    As[i] = 1;
    i += 9;
  }

  for (i = 0; i < 64; i++) {
    idx = As[i];
    Au_tmp[i] = static_cast<int8_T>(idx);
    Au_tmp_0[i] = static_cast<int8_T>(-idx);
  }

  for (idx = 0; idx < 10; idx++) {
    for (i = 0; i < 8; i++) {
      runtimedata_MVRateMin_0[i] = runtimedata_MVRateMin[10 * i + idx];
    }

    proc_control_isfinite(runtimedata_MVRateMin_0, tmp);
    for (i = 0; i < 8; i++) {
      x[static_cast<int32_T>(ic[i]) - 1] = tmp[i];
      runtimedata_MVRateMin_0[i] = runtimedata_MVRateMax[10 * i + idx];
    }

    proc_control_isfinite(runtimedata_MVRateMin_0, tmp);
    for (i = 0; i < 8; i++) {
      x[static_cast<int32_T>(ic[i] + 8.0) - 1] = tmp[i];
      runtimedata_MVRateMin_0[i] = runtimedata_MVMin[10 * i + idx];
    }

    proc_control_isfinite(runtimedata_MVRateMin_0, tmp);
    for (i = 0; i < 8; i++) {
      x[static_cast<int32_T>(ic[i] + 16.0) - 1] = tmp[i];
      runtimedata_MVRateMin_0[i] = runtimedata_MVMax[10 * i + idx];
    }

    proc_control_isfinite(runtimedata_MVRateMin_0, tmp);
    for (i = 0; i < 8; i++) {
      x[static_cast<int32_T>(ic[i] + 24.0) - 1] = tmp[i];
      for (k = 0; k < 8; k++) {
        proc_control_B.Au[((static_cast<int32_T>(ic[k]) + 320 * i) + 2560 * idx)
          - 1] = Au_tmp_0[(i << 3) + k];
      }
    }

    for (i = 0; i < 8; i++) {
      for (k = 0; k < 8; k++) {
        proc_control_B.Au[((static_cast<int32_T>(ic[k] + 8.0) + 320 * i) + 2560 *
                           idx) - 1] = Au_tmp[(i << 3) + k];
      }
    }

    for (i = 0; i < 8; i++) {
      for (k = 0; k < 8; k++) {
        proc_control_B.Au[((static_cast<int32_T>(ic[k] + 16.0) + 320 * i) + 2560
                           * idx) - 1] = Au_tmp_0[(i << 3) + k];
      }
    }

    for (i = 0; i < 8; i++) {
      for (k = 0; k < 8; k++) {
        proc_control_B.Au[((static_cast<int32_T>(ic[k] + 24.0) + 320 * i) + 2560
                           * idx) - 1] = Au_tmp[(i << 3) + k];
      }

      b_Bu[static_cast<int32_T>(ic[i]) - 1] = -runtimedata_MVRateMin[10 * i +
        idx];
    }

    for (i = 0; i < 8; i++) {
      b_Bu[static_cast<int32_T>(ic[i] + 8.0) - 1] = runtimedata_MVRateMax[10 * i
        + idx];
    }

    for (i = 0; i < 8; i++) {
      b_Bu[static_cast<int32_T>(ic[i] + 16.0) - 1] = -runtimedata_MVMin[10 * i +
        idx];
    }

    for (i = 0; i < 8; i++) {
      b_Bu[static_cast<int32_T>(ic[i] + 24.0) - 1] = runtimedata_MVMax[10 * i +
        idx];
    }

    if (idx + 1 == 1) {
      for (i = 0; i < 8; i++) {
        d_0 = runtimedata_lastMV[i];
        d[i] = d_0;
        runtimedata_MVRateMin_0[i] = b_Bu[static_cast<int32_T>(ic[i]) - 1] - d_0;
      }

      for (i = 0; i < 8; i++) {
        b_Bu[static_cast<int32_T>(ic[i]) - 1] = runtimedata_MVRateMin_0[i];
      }

      for (i = 0; i <= 6; i += 2) {
        tmp_0 = _mm_add_pd(_mm_set_pd(b_Bu[static_cast<int32_T>(ic[i + 1] + 8.0)
          - 1], b_Bu[static_cast<int32_T>(ic[i] + 8.0) - 1]), _mm_loadu_pd(&d[i]));
        _mm_storeu_pd(&runtimedata_MVRateMin_0[i], tmp_0);
      }

      for (i = 0; i < 8; i++) {
        b_Bu[static_cast<int32_T>(ic[i] + 8.0) - 1] = runtimedata_MVRateMin_0[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        for (k = 0; k < 8; k++) {
          proc_control_B.Au[((static_cast<int32_T>(ic[k]) + 320 * i) + 2560 *
                             (idx - 1)) - 1] = Au_tmp[(i << 3) + k];
        }
      }

      for (i = 0; i < 8; i++) {
        for (k = 0; k < 8; k++) {
          proc_control_B.Au[((static_cast<int32_T>(ic[k] + 8.0) + 320 * i) +
                             2560 * (idx - 1)) - 1] = Au_tmp_0[(i << 3) + k];
        }
      }
    }

    for (i = 0; i <= 6; i += 2) {
      tmp_0 = _mm_loadu_pd(&ic[i]);
      _mm_storeu_pd(&ic[i], _mm_add_pd(tmp_0, _mm_set1_pd(32.0)));
    }
  }

  idx = 0;
  i = 0;
  exitg1 = false;
  while ((!exitg1) && (i < 320)) {
    if (x[i]) {
      idx++;
      ii_data[idx - 1] = static_cast<int16_T>(i + 1);
      if (idx >= 320) {
        exitg1 = true;
      } else {
        i++;
      }
    } else {
      i++;
    }
  }

  if (idx < 1) {
    idx = 0;
  }

  if (idx > 0) {
    Bu_size[0] = idx;
    for (i = 0; i < idx; i++) {
      Bu_data[i] = b_Bu[ii_data[i] - 1];
    }

    for (i = 0; i < 8; i++) {
      for (k = 0; k < 10; k++) {
        for (b_i = 0; b_i < idx; b_i++) {
          proc_control_B.Auf_data[(b_i + idx * i) + (idx << 3) * k] =
            proc_control_B.Au[((320 * i + ii_data[b_i]) + 2560 * k) - 1];
        }
      }
    }

    idx_0[0] = idx;
    idx_0[1] = 80;
    proc_control_mtimes_e(proc_control_B.Auf_data, idx_0,
                          proc_control_B.tmp_data_ld, tmp_size);
    A_size[0] = idx;
    A_size[1] = 139;
    memset(&A_data[0], 0, static_cast<uint32_T>(idx * 130) * sizeof(real_T));
    k = idx << 3;
    for (i = 0; i < k; i++) {
      A_data[i + idx * 130] = proc_control_B.tmp_data_ld[i];
    }

    memset(&A_data[idx * 130 + k], 0, static_cast<uint32_T>((((idx + idx * 130)
              + k) - idx * 130) - k) * sizeof(real_T));
  } else {
    Bu_size[0] = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_getXUe(const real_T z[139], const real_T x[13],
  real_T X[143], real_T U[88], real_T *e)
{
  static const int8_T y[640] = { 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1
  };

  memset(&X[0], 0, 143U * sizeof(real_T));
  memset(&proc_control_B.Umv[0], 0, 88U * sizeof(real_T));
  for (proc_control_B.i25 = 0; proc_control_B.i25 < 80; proc_control_B.i25++) {
    proc_control_B.y_d = 0.0;
    proc_control_B.i_bw = 0;
    for (proc_control_B.i_i = 0; proc_control_B.i_i < 8; proc_control_B.i_i++) {
      proc_control_B.y_d += static_cast<real_T>(y[proc_control_B.i_bw +
        proc_control_B.i25]) * z[proc_control_B.i_i + 130];
      proc_control_B.i_bw += 80;
    }

    proc_control_B.y_n[proc_control_B.i25] = proc_control_B.y_d;
  }

  proc_control_B.i25 = 0;
  for (proc_control_B.i_bw = 0; proc_control_B.i_bw < 8; proc_control_B.i_bw++)
  {
    proc_control_B.i_i = 0;
    for (proc_control_B.U_tmp_a = 0; proc_control_B.U_tmp_a < 10;
         proc_control_B.U_tmp_a++) {
      proc_control_B.Umv[proc_control_B.U_tmp_a + proc_control_B.i25] =
        proc_control_B.y_n[proc_control_B.i_i + proc_control_B.i_bw];
      proc_control_B.i_i += 8;
    }

    proc_control_B.i25 += 11;
  }

  *e = z[138];
  memcpy(&proc_control_B.z_n[0], &z[0], 130U * sizeof(real_T));
  proc_control_B.i25 = 0;
  for (proc_control_B.i_bw = 0; proc_control_B.i_bw < 13; proc_control_B.i_bw++)
  {
    proc_control_B.i_i = 0;
    for (proc_control_B.U_tmp_a = 0; proc_control_B.U_tmp_a < 10;
         proc_control_B.U_tmp_a++) {
      X[(proc_control_B.U_tmp_a + proc_control_B.i25) + 1] =
        proc_control_B.z_n[proc_control_B.i_i + proc_control_B.i_bw];
      proc_control_B.i_i += 13;
    }

    X[proc_control_B.i25] = x[proc_control_B.i_bw];
    proc_control_B.i25 += 11;
  }

  proc_control_B.i_bw = 0;
  for (proc_control_B.i_i = 0; proc_control_B.i_i < 8; proc_control_B.i_i++) {
    proc_control_B.Umv[proc_control_B.i_bw + 10] =
      proc_control_B.Umv[proc_control_B.i_bw + 9];
    memcpy(&U[proc_control_B.i_bw], &proc_control_B.Umv[proc_control_B.i_bw],
           11U * sizeof(real_T));
    proc_control_B.i_bw += 11;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_con_AUV8QuatJacobianMatrix(const real_T in1[13], real_T
  Anqv[169])
{
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  __m128d tmp_4;
  __m128d tmp_5;
  __m128d tmp_6;
  __m128d tmp_7;
  __m128d tmp_8;
  __m128d tmp_9;
  __m128d tmp_a;
  __m128d tmp_b;
  __m128d tmp_c;
  __m128d tmp_d;
  __m128d tmp_e;
  __m128d tmp_f;
  __m128d tmp_g;
  __m128d tmp_h;
  __m128d tmp_i;
  real_T tmp[2];
  real_T t10;
  real_T t11;
  real_T t12;
  real_T t13;
  real_T t17;
  real_T t18;
  real_T t19;
  real_T t2;
  real_T t20;
  real_T t21;
  real_T t22;
  real_T t23;
  real_T t24;
  real_T t25;
  real_T t26;
  real_T t27;
  real_T t28;
  real_T t29;
  real_T t3;
  real_T t30;
  real_T t31;
  real_T t32;
  real_T t33;
  real_T t34;
  real_T t37;
  real_T t39;
  real_T t4;
  real_T t40;
  real_T t41;
  real_T t42;
  real_T t43;
  real_T t44;
  real_T t45;
  real_T t5;
  real_T t55;
  real_T t56;
  real_T t57;
  real_T t58;
  real_T t59;
  real_T t6;
  real_T t61;
  real_T t62;
  real_T t65;
  real_T t68;
  real_T t7;
  real_T t8;
  real_T t9;
  t2 = fabs(in1[10]);
  t3 = fabs(in1[11]);
  t4 = fabs(in1[12]);
  t5 = fabs(in1[7]);
  t6 = fabs(in1[8]);
  t7 = fabs(in1[9]);
  if (rtIsNaN(in1[10])) {
    t8 = (rtNaN);
  } else if (in1[10] < 0.0) {
    t8 = -1.0;
  } else {
    t8 = (in1[10] > 0.0);
  }

  if (rtIsNaN(in1[11])) {
    t9 = (rtNaN);
  } else if (in1[11] < 0.0) {
    t9 = -1.0;
  } else {
    t9 = (in1[11] > 0.0);
  }

  if (rtIsNaN(in1[12])) {
    t10 = (rtNaN);
  } else if (in1[12] < 0.0) {
    t10 = -1.0;
  } else {
    t10 = (in1[12] > 0.0);
  }

  if (rtIsNaN(in1[7])) {
    t11 = (rtNaN);
  } else if (in1[7] < 0.0) {
    t11 = -1.0;
  } else {
    t11 = (in1[7] > 0.0);
  }

  if (rtIsNaN(in1[8])) {
    t12 = (rtNaN);
  } else if (in1[8] < 0.0) {
    t12 = -1.0;
  } else {
    t12 = (in1[8] > 0.0);
  }

  if (rtIsNaN(in1[9])) {
    t13 = (rtNaN);
  } else if (in1[9] < 0.0) {
    t13 = -1.0;
  } else {
    t13 = (in1[9] > 0.0);
  }

  tmp_0 = _mm_set1_pd(2.0);
  tmp_4 = _mm_set1_pd(in1[4]);
  tmp_h = _mm_loadu_pd(&in1[5]);
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_4, tmp_h), tmp_0));
  t17 = tmp[0];
  t18 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(_mm_set_pd(in1[3], in1[5]),
    _mm_set_pd(in1[4], in1[6])), tmp_0));
  t19 = tmp[0];
  t20 = tmp[1];
  tmp_5 = _mm_set1_pd(in1[3]);
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_h), tmp_0));
  t21 = tmp[0];
  t22 = tmp[1];
  tmp_h = _mm_set1_pd(in1[7]);
  tmp_i = _mm_loadu_pd(&in1[4]);
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_h), tmp_0));
  t23 = tmp[0];
  t24 = tmp[1];
  tmp_1 = _mm_set_pd(in1[3], in1[6]);
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_h), tmp_0));
  t25 = tmp[0];
  t26 = tmp[1];
  tmp_2 = _mm_set1_pd(in1[8]);
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_2), tmp_0));
  t27 = tmp[0];
  t28 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_2), tmp_0));
  t29 = tmp[0];
  t30 = tmp[1];
  tmp_3 = _mm_set1_pd(in1[9]);
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_3), tmp_0));
  t31 = tmp[0];
  t32 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_1, tmp_3), tmp_0));
  t33 = tmp[0];
  t34 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_div_pd(tmp_i, tmp_0));
  t39 = tmp[0];
  t40 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_div_pd(tmp_1, tmp_0));
  t41 = tmp[0];
  t42 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_div_pd(_mm_loadu_pd(&in1[10]), tmp_0));
  t43 = tmp[0];
  t44 = tmp[1];
  t45 = in1[12] / 2.0;
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_set_pd(in1[11], in1[12]), _mm_set_pd
    (9.7602896722846373E-5, 1.0571299073092789E-5)));
  t55 = tmp[0];
  t56 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_set_pd(in1[7], in1[8]), _mm_set_pd
    (0.00477039452928936, 0.01129023503850542)));
  t57 = tmp[0];
  t58 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_set_pd(in1[9], in1[10]), _mm_set_pd
    (0.143523560675718, 9.1703771260780813E-5)));
  t59 = tmp[0];
  t61 = tmp[1];
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_set_pd(in1[9], in1[7]), _mm_set_pd
    (0.069014505171846527, 0.00568699616459184)));
  t62 = tmp[0];
  t65 = tmp[1];
  t68 = in1[8] * 0.0071670223909459834;
  _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_mul_pd(tmp_i, tmp_i), tmp_0));
  t37 = in1[6] * in1[6] * 2.0;
  memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -t29 + t32;
  Anqv[40] = t25 - t31;
  Anqv[41] = -t24 + t27;
  Anqv[42] = 0.0;
  Anqv[43] = t43;
  Anqv[44] = t44;
  Anqv[45] = t45;
  tmp_0 = _mm_set1_pd(in1[5]);
  tmp_1 = _mm_set_pd(0.00099202109956931486, 0.4138016519122657);
  _mm_storeu_pd(&Anqv[46], _mm_add_pd(_mm_mul_pd(tmp_4, _mm_set_pd
    (-0.51979016069898065, -0.0013017970932508)), _mm_mul_pd(tmp_0, tmp_1)));
  tmp_i = _mm_set_pd(1.0, -1.0);
  tmp_7 = _mm_set_pd(0.1138522338822895, 0.0058758415205803329);
  _mm_storeu_pd(&Anqv[48], _mm_add_pd(_mm_mul_pd(tmp_4, _mm_set_pd
    (-25.242114556122988, 0.033540735888224739)), _mm_mul_pd(_mm_mul_pd(tmp_0,
    tmp_7), tmp_i)));
  tmp_9 = _mm_set_pd(0.65361132374006825, 8.6371397256799973);
  tmp_a = _mm_set_pd(0.38451002147839958, 0.1184627304742461);
  _mm_storeu_pd(&Anqv[50], _mm_add_pd(_mm_mul_pd(tmp_4, tmp_a), _mm_mul_pd
    (_mm_mul_pd(tmp_0, tmp_9), tmp_i)));
  Anqv[52] = t28 + t33;
  tmp_g = _mm_set1_pd(4.0);
  _mm_storeu_pd(&Anqv[53], _mm_sub_pd(_mm_add_pd(_mm_set_pd(t25, t24),
    _mm_mul_pd(_mm_set_pd(t30, t34), tmp_i)), _mm_mul_pd(_mm_mul_pd(tmp_4,
    _mm_loadu_pd(&in1[8])), tmp_g)));
  Anqv[55] = -t43;
  Anqv[56] = 0.0;
  Anqv[57] = -t45;
  Anqv[58] = t44;
  tmp_6 = _mm_set1_pd(in1[6]);
  tmp_b = _mm_set_pd(-0.05386046241846134, -0.01263905936484723);
  tmp_c = _mm_set_pd(0.51979016069898065, 0.0013017970932508);
  _mm_storeu_pd(&Anqv[59], _mm_sub_pd(_mm_sub_pd(_mm_mul_pd(tmp_4, tmp_b),
    _mm_mul_pd(tmp_6, tmp_1)), _mm_mul_pd(tmp_5, tmp_c)));
  tmp_8 = _mm_set_pd(-1.0, 1.0);
  tmp_d = _mm_set_pd(-4.2094140168137981, 0.37271497842704371);
  tmp_e = _mm_set_pd(25.242114556122988, 0.033540735888224739);
  _mm_storeu_pd(&Anqv[61], _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_4, tmp_d),
    _mm_mul_pd(_mm_mul_pd(tmp_6, tmp_7), tmp_8)), _mm_mul_pd(_mm_mul_pd(tmp_5,
    tmp_e), tmp_8)));
  tmp_f = _mm_set_pd(0.009785912146552939, 0.73643595165049924);
  _mm_storeu_pd(&Anqv[63], _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_4, tmp_f),
    _mm_mul_pd(_mm_mul_pd(tmp_6, tmp_9), tmp_8)), _mm_mul_pd(tmp_5, tmp_a)));
  Anqv[65] = (t27 + t34) - in1[5] * in1[7] * 4.0;
  Anqv[66] = t23 + t33;
  Anqv[67] = (-t26 + t29) - in1[5] * in1[9] * 4.0;
  Anqv[68] = -t44;
  Anqv[69] = t45;
  Anqv[70] = 0.0;
  Anqv[71] = -t43;
  _mm_storeu_pd(&Anqv[72], _mm_add_pd(_mm_sub_pd(_mm_mul_pd(tmp_0, tmp_b),
    _mm_mul_pd(tmp_6, tmp_c)), _mm_mul_pd(tmp_5, tmp_1)));
  _mm_storeu_pd(&Anqv[74], _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_0, tmp_d),
    _mm_mul_pd(_mm_mul_pd(tmp_6, tmp_e), tmp_8)), _mm_mul_pd(_mm_mul_pd(tmp_5,
    tmp_7), tmp_i)));
  _mm_storeu_pd(&Anqv[76], _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_0, tmp_f),
    _mm_mul_pd(tmp_6, tmp_a)), _mm_mul_pd(_mm_mul_pd(tmp_5, tmp_9), tmp_i)));
  _mm_storeu_pd(&Anqv[78], _mm_sub_pd(_mm_add_pd(_mm_set_pd(t26, -t30),
    _mm_set_pd(t32, t31)), _mm_mul_pd(_mm_mul_pd(tmp_6, _mm_loadu_pd(&in1[7])),
    tmp_g)));
  Anqv[80] = t23 + t28;
  Anqv[81] = -t45;
  Anqv[82] = -t44;
  Anqv[83] = t43;
  Anqv[84] = 0.0;
  _mm_storeu_pd(&Anqv[85], _mm_sub_pd(_mm_mul_pd(tmp_4, _mm_set_pd
    (-0.00099202109956931486, -0.4138016519122657)), _mm_mul_pd(tmp_0, tmp_c)));
  _mm_storeu_pd(&Anqv[87], _mm_add_pd(_mm_mul_pd(tmp_4, _mm_set_pd
    (-0.1138522338822895, 0.0058758415205803329)), _mm_mul_pd(_mm_mul_pd(tmp_0,
    tmp_e), tmp_8)));
  _mm_storeu_pd(&Anqv[89], _mm_add_pd(_mm_mul_pd(tmp_4, _mm_set_pd
    (-0.65361132374006825, 8.6371397256799973)), _mm_mul_pd(tmp_0, tmp_a)));
  Anqv[91] = (-tmp[1] - t37) + 1.0;
  Anqv[92] = t17 + t22;
  Anqv[93] = t18 - t21;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  t23 = t11 * in1[7];
  Anqv[98] = (((((t5 * -0.036243063166504788 + t55) + t56) - t57) - t61) - t23 *
              0.036243063166504788) - 0.46465465598083061;
  tmp_0 = _mm_set_pd(7.9830677445685858E-6, 1.109195745194835E-6);
  tmp_4 = _mm_set1_pd(in1[11]);
  tmp_5 = _mm_set1_pd(in1[12]);
  _mm_storeu_pd(&Anqv[99], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(tmp_2, _mm_set_pd(-5.890830655932608E-5, 0.00477039452928936)),
     _mm_mul_pd(_mm_mul_pd(tmp_3, _mm_set_pd(0.00568699616459184,
    0.001468966557066211)), tmp_i)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(t11), tmp_h), tmp_0), tmp_i)), _mm_mul_pd(_mm_set_pd
    (0.0001023470223662639, 1.422045827172866E-5), tmp_i)), _mm_add_pd
    (_mm_sub_pd(_mm_mul_pd(tmp_4, _mm_set_pd(0.69409782663856512,
    0.00041592787873873338)), _mm_mul_pd(tmp_5, _mm_set_pd
    (0.00032422410747795261, 0.74121409319149256))), _mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(t5), tmp_0), tmp_i))));
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - t5 * 0.0001525121428377004) + ((in1[8] * 0.044446246736648841
    - in1[9] * 0.1148218101592509) - t23 * 0.0001525121428377004)) -
    0.0019552838825346208;
  Anqv[102] = (((in1[8] * 1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
                t23 * 0.011738978516892359) + 0.150499724575543) + ((in1[11] *
    -0.00568699616459184 - in1[12] * 0.001145088836853196) + t5 *
    0.011738978516892359);
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - t5 * 0.0011846302503005471) + ((in1[8] *
    -5.91169722427816 - in1[9] * 2.2977499514997389E-5) - t23 *
    0.0011846302503005471)) - 0.015187567311545479;
  Anqv[104] = t17 - t22;
  Anqv[105] = (-tmp[0] - t37) + 1.0;
  Anqv[106] = t19 + t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  t23 = t12 * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - t6 * 7.7738505218783331E-7) - in1[7] * 0.01129023503850542) +
    ((in1[9] * -0.00041111798914172931 - t23 * 7.7738505218783331E-7) -
     1.8960611028971542E-5);
  Anqv[112] = (((((t6 * -0.01903042325061665 + t55) + t58) - t59) - t65) - t23 *
               0.01903042325061665) - 0.46415666464918648;
  Anqv[113] = (((in1[7] * -5.890830655932608E-5 + in1[9] * 0.0071670223909459834)
                + t23 * 2.3842573459475649E-5) + 0.00058152618193843065) +
    ((in1[10] * -0.93255469429176219 - in1[12] * 7.6083411800115719E-5) + t6 *
     2.3842573459475649E-5);
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - t6 * 0.017943464992838758) + ((in1[7] *
    0.044446246736648841 - in1[9] * 5.3937622658585171) - t23 *
    0.017943464992838758)) - 0.4376454876302136;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + t6 * 8.4206769578830268E-5) + in1[7] * 1.7911420833141059E-5)
    + ((t23 * 8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
       0.0020538236482641531);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + t6 * 0.00035080205133418912) + ((in1[7] * -5.91169722427816 +
    in1[9] * 0.01257120723021817) + t23 * 0.00035080205133418912)) +
    0.0085561475935168052;
  Anqv[117] = t18 + t21;
  Anqv[118] = t19 - t20;
  Anqv[119] = (-tmp[0] - tmp[1]) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  t23 = t13 * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + t7 * 5.1582899272597018E-6) - in1[7] * 0.143523560675718) +
    ((t23 * 5.1582899272597018E-6 + in1[8] * -0.00041111798914172931) +
     0.0001592064792364106);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + t7 * 2.1981689677272681E-5) + ((in1[7] * -0.001468966557066211
    - in1[8] * 0.069014505171846527) + t23 * 2.1981689677272681E-5)) +
    0.00067844721226150231;
  Anqv[126] = (((((t7 * -0.01616685726098728 + t56) - t59) + t62) + t68) - t23 *
               0.01616685726098728) - 0.49897707595639768;
  tmp_0 = _mm_set_pd(0.00030055639757781919, 0.00171795837774031);
  tmp_1 = _mm_set1_pd(in1[10]);
  _mm_storeu_pd(&Anqv[127], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(tmp_1, _mm_set_pd(-0.00032387772021301561, 0.069014505171846527)),
     _mm_mul_pd(_mm_mul_pd(tmp_4, _mm_set_pd(0.143523560675718,
    0.0018646499569661989)), tmp_i)), _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(t7),
    tmp_0), tmp_8)), _mm_add_pd(_mm_add_pd(_mm_mul_pd(tmp_h, _mm_set_pd
    (8.3502908029033716, -0.1148218101592509)), _mm_mul_pd(_mm_mul_pd(tmp_2,
    _mm_set_pd(0.025315910649035739, 5.3937622658585171)), tmp_i)), _mm_mul_pd
    (_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(t13), tmp_3), tmp_0), tmp_8))),
    _mm_mul_pd(_mm_set_pd(0.0092764320240067664, 0.053023406720379938), tmp_8)));
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - t7 * 3.993855127780116E-6) - in1[7] *
               2.2977499514997389E-5) + ((in1[8] * 0.01257120723021817 - t23 *
    3.993855127780116E-6) - 0.00012326713357346041);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -t39;
  Anqv[134] = t42;
  Anqv[135] = t41;
  Anqv[136] = -t40;
  t23 = in1[10] * t8;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) - t2 *
               2.1768827225552109E-5) + (((in1[8] * -2.1519484922730651E-5 +
    in1[9] * 2.989993556213668E-6) - t23 * 2.1768827225552109E-5) -
    0.00043450752945213789);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                t2 * 0.0036543398217122828) + ((in1[8] * -9.1703771260780813E-5
    + in1[9] * 1.0731951852318531) - t23 * 0.0036543398217122828)) -
    0.072940914605035587;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((t2 * 0.0003794960966701478 - in1[8] * 0.93255469429176219) -
                in1[9] * 9.1703771260780813E-5)) + (t23 * 0.0003794960966701478
    + 0.007574772388625705);
  Anqv[140] = ((((t2 * -0.28560141361437341 + t65) - t68) - t23 *
                0.28560141361437341) - 5.7006270182509668) + ((in1[10] *
    0.00017692814721597281 - in1[11] * 0.00301187450220627) + in1[12] *
    0.0032852614324183722);
  tmp_0 = _mm_set_pd(0.00066564938883491385, 0.0013404854555911631);
  _mm_storeu_pd(&Anqv[141], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(tmp_1, _mm_set_pd(-0.0085297096290247246, 0.005100926963153893)),
     _mm_mul_pd(_mm_mul_pd(tmp_4, _mm_set_pd(0.59953739020136265,
    7.54282242443926E-5)), tmp_8)), _mm_mul_pd(_mm_mul_pd(tmp_5, _mm_set_pd
    (6.8948828938803766E-5, 0.76112100692746432)), tmp_8)), _mm_sub_pd
    (_mm_add_pd(_mm_mul_pd(_mm_set1_pd(t2), tmp_0), _mm_mul_pd(tmp_2, _mm_set_pd
    (1.6661666253314429E-5, 0.0012538688125934979))), _mm_mul_pd(tmp_3,
    _mm_set_pd(0.0013492616947596331, 0.00032387772021301561)))), _mm_add_pd
    (_mm_mul_pd(_mm_mul_pd(tmp_1, _mm_set1_pd(t8)), tmp_0), _mm_set_pd
     (0.013286414946804669, 0.026756196718386482))));
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -t40;
  Anqv[147] = -t41;
  Anqv[148] = t42;
  Anqv[149] = t39;
  t23 = in1[11] * t9;
  Anqv[150] = ((((in1[10] * -0.0030560301354578762 + in1[11] *
                  0.001929418735906703) + in1[12] * 6.2884941489263073E-5) + t3 *
                0.001003331497170287) + ((in1[7] * 9.7602896722846373E-5 - in1[9]
    * 1.4431163638272659) + t23 * 0.001003331497170287)) + 0.0234110682673067;
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) + t3 *
               1.026911824132076E-5) + (((in1[7] * 0.00041592787873873338 - in1
    [9] * 1.356129262930646E-5) + t23 * 1.026911824132076E-5) +
    0.00023961275896415121);
  tmp_0 = _mm_set_pd(0.00080268590155159437, -3.9756137245743291E-5);
  _mm_storeu_pd(&Anqv[152], _mm_add_pd(_mm_add_pd(_mm_sub_pd(_mm_add_pd
    (_mm_mul_pd(tmp_1, _mm_set_pd(-0.00301187450220627, 4.0426879502317728E-6)),
     _mm_mul_pd(tmp_4, _mm_set_pd(0.00082864946354184129, 0.023860477346842442))),
    _mm_mul_pd(tmp_5, _mm_set_pd(0.291807921220024, 0.000941018323416786))),
    _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd(t3), tmp_0), _mm_mul_pd(tmp_h,
    _mm_set_pd(0.032506453976272241, 0.69409782663856512))), _mm_mul_pd
               (_mm_mul_pd(tmp_3, _mm_set_pd(0.0018646499569661989,
    9.7602896722846373E-5)), tmp_8))), _mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_4,
    _mm_set1_pd(t9)), tmp_0), _mm_mul_pd(_mm_set_pd(0.018729337702870542,
    0.00092764320240067675), tmp_i))));
  Anqv[154] = ((((t3 * -0.058374455968341669 + t61) - t62) - t23 *
                0.058374455968341669) - 1.362070639261306) + ((in1[10] *
    7.54282242443926E-5 - in1[11] * 0.00019446645525741661) - in1[12] *
    0.003324115892995542);
  Anqv[155] = ((((t3 * 1.6062902063655571E-7 - in1[7] * 7.5569972812640509E-5) -
                 in1[9] * 0.01448357294143097) + t23 * 1.6062902063655571E-7) +
               ((in1[10] * -0.59953739020136265 + in1[11] *
                 0.0085432434746820687) + in1[12] * 0.0030111351640179931)) +
    3.7480104815196341E-6;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -t41;
  Anqv[160] = t40;
  Anqv[161] = -t39;
  Anqv[162] = t42;
  tmp_0 = _mm_set_pd(4.3636352726935713E-5, 0.0001032754577185093);
  _mm_storeu_pd(&Anqv[163], _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(tmp_1, _mm_set_pd(4.2079285691049859E-5, -0.030270009262121408)),
     _mm_mul_pd(_mm_mul_pd(tmp_4, _mm_set_pd(0.016528998001422841,
    6.2884941489263073E-5)), tmp_8)), _mm_mul_pd(tmp_5, _mm_set_pd
    (0.00283488707941543, 0.0020006959490984312))), _mm_mul_pd(_mm_mul_pd
    (_mm_set1_pd(t4), tmp_0), tmp_i)), _mm_add_pd(_mm_add_pd(_mm_add_pd
    (_mm_mul_pd(tmp_h, _mm_set_pd(-0.74121409319149256, 1.0571299073092789E-5)),
     _mm_mul_pd(tmp_2, _mm_set_pd(1.0571299073092789E-5, 1.3454180758607359))),
    _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(tmp_5, _mm_set1_pd(t10)), tmp_0), tmp_i)),
    _mm_mul_pd(_mm_set_pd(0.0021390368983792022, 0.0050625224371818262), tmp_i))));
  t23 = in1[12] * t10;
  Anqv[165] = ((((t4 * -5.3885346962112674E-7 - in1[7] * 0.00032422410747795261)
                 - in1[8] * 7.6083411800115719E-5) - t23 * 5.3885346962112674E-7)
               + ((in1[10] * -0.00016269010774240791 - in1[11] *
                   0.000941018323416786) - in1[12] * 2.6641242336162E-6)) -
    2.6414385765741509E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((t4 *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (t23 * 0.00040656429737222281 + 0.019929622420207);
  Anqv[167] = ((((t4 * 1.6384160104928689E-7 - in1[7] * 0.001145088836853196) -
                 in1[8] * 0.1118794885864644) + t23 * 1.6384160104928689E-7) +
               ((in1[10] * 0.76112100692746432 - in1[11] * 0.003324115892995542)
                - in1[12] * 0.005288701994301117)) + 8.0314510318277867E-6;
  Anqv[168] = ((((t4 * -0.054076220260104418 + t57) - t58) - t23 *
                0.054076220260104418) - 2.6507951107894319) + ((in1[10] *
    -6.8948828938803766E-5 + in1[11] * 0.0030111351640179931) + in1[12] *
    1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_stateEvolution(const real_T X[143], const real_T
  U[88], real_T c[130], real_T J[18070])
{
  __m128d tmp;
  static const int8_T b[640] = { 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1
  };

  static const real_T val[104] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  memset(&proc_control_B.Jx_k[0], 0, 16900U * sizeof(real_T));
  memset(&proc_control_B.Jmv[0], 0, 10400U * sizeof(real_T));
  memset(&c[0], 0, 130U * sizeof(real_T));
  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
       proc_control_B.Jx_tmp++) {
    proc_control_B.ic_g4[proc_control_B.Jx_tmp] = static_cast<real_T>
      (proc_control_B.Jx_tmp) + 1.0;
  }

  proc_control_B.Jx_tmp = 0;
  for (proc_control_B.i_jm = 0; proc_control_B.i_jm < 8; proc_control_B.i_jm++)
  {
    proc_control_B.Ak1_tmp = 0;
    for (proc_control_B.k_kg = 0; proc_control_B.k_kg < 11; proc_control_B.k_kg
         ++) {
      proc_control_B.b_U_m[proc_control_B.Ak1_tmp + proc_control_B.i_jm] =
        U[proc_control_B.k_kg + proc_control_B.Jx_tmp];
      proc_control_B.Ak1_tmp += 8;
    }

    proc_control_B.Jx_tmp += 11;
  }

  proc_control_B.Jx_tmp = 0;
  for (proc_control_B.k_kg = 0; proc_control_B.k_kg < 11; proc_control_B.k_kg++)
  {
    proc_control_B.i_jm = 0;
    for (proc_control_B.Ak1_tmp = 0; proc_control_B.Ak1_tmp < 13;
         proc_control_B.Ak1_tmp++) {
      proc_control_B.b_X_d[proc_control_B.Ak1_tmp + proc_control_B.Jx_tmp] =
        X[proc_control_B.i_jm + proc_control_B.k_kg];
      proc_control_B.i_jm += 11;
    }

    proc_control_B.Jx_tmp += 13;
  }

  for (proc_control_B.i_jm = 0; proc_control_B.i_jm < 10; proc_control_B.i_jm++)
  {
    proc_con_AUV8QuatJacobianMatrix(&proc_control_B.b_X_d[13 *
      proc_control_B.i_jm], proc_control_B.Ak);
    proc_control_B.Ak1_tmp = (proc_control_B.i_jm + 1) * 13;
    proc_con_AUV8QuatJacobianMatrix(&proc_control_B.b_X_d[proc_control_B.Ak1_tmp],
      proc_control_B.Ak1);
    proc_control_B.Jx_tmp = proc_control_B.i_jm << 3;
    proc_control_AUV8QuatSimFcn(&proc_control_B.b_X_d[13 * proc_control_B.i_jm],
      &proc_control_B.b_U_m[proc_control_B.Jx_tmp], proc_control_B.dv15);
    proc_control_AUV8QuatSimFcn(&proc_control_B.b_X_d[proc_control_B.Ak1_tmp],
      &proc_control_B.b_U_m[proc_control_B.Jx_tmp], proc_control_B.dv16);
    for (proc_control_B.k_kg = 0; proc_control_B.k_kg < 13; proc_control_B.k_kg
         ++) {
      c[static_cast<int32_T>(proc_control_B.ic_g4[proc_control_B.k_kg]) - 1] =
        (proc_control_B.b_X_d[13 * proc_control_B.i_jm + proc_control_B.k_kg] +
         (proc_control_B.dv15[proc_control_B.k_kg] +
          proc_control_B.dv16[proc_control_B.k_kg]) * 0.05) -
        proc_control_B.b_X_d[proc_control_B.Ak1_tmp + proc_control_B.k_kg];
      if (proc_control_B.i_jm + 1 > 1) {
        for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
             proc_control_B.Jx_tmp++) {
          proc_control_B.Jx_k[((static_cast<int32_T>
                                (proc_control_B.ic_g4[proc_control_B.Jx_tmp]) +
                                130 * proc_control_B.k_kg) + 1690 *
                               (proc_control_B.i_jm - 1)) - 1] =
            proc_control_B.Ak[13 * proc_control_B.k_kg + proc_control_B.Jx_tmp] *
            0.05;
        }

        proc_control_B.Jx_tmp = ((130 * proc_control_B.k_kg +
          static_cast<int32_T>(proc_control_B.ic_g4[proc_control_B.k_kg])) +
          (proc_control_B.i_jm - 1) * 1690) - 1;
        proc_control_B.Jx_k[proc_control_B.Jx_tmp]++;
      }
    }

    for (proc_control_B.k_kg = 0; proc_control_B.k_kg < 13; proc_control_B.k_kg
         ++) {
      for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
           proc_control_B.Jx_tmp++) {
        proc_control_B.Jx_k[((static_cast<int32_T>
                              (proc_control_B.ic_g4[proc_control_B.Jx_tmp]) +
                              130 * proc_control_B.k_kg) + 1690 *
                             proc_control_B.i_jm) - 1] = proc_control_B.Ak1[13 *
          proc_control_B.k_kg + proc_control_B.Jx_tmp] * 0.05;
      }

      proc_control_B.Jx_tmp = ((130 * proc_control_B.k_kg + static_cast<int32_T>
        (proc_control_B.ic_g4[proc_control_B.k_kg])) + 1690 *
        proc_control_B.i_jm) - 1;
      proc_control_B.Jx_k[proc_control_B.Jx_tmp]--;
    }

    for (proc_control_B.k_kg = 0; proc_control_B.k_kg < 8; proc_control_B.k_kg++)
    {
      for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
           proc_control_B.Jx_tmp++) {
        proc_control_B.Jmv[((static_cast<int32_T>
                             (proc_control_B.ic_g4[proc_control_B.Jx_tmp]) + 130
                             * proc_control_B.k_kg) + 1040 * proc_control_B.i_jm)
          - 1] = val[13 * proc_control_B.k_kg + proc_control_B.Jx_tmp];
      }
    }

    for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp <= 10;
         proc_control_B.Jx_tmp += 2) {
      tmp = _mm_loadu_pd(&proc_control_B.ic_g4[proc_control_B.Jx_tmp]);
      _mm_storeu_pd(&proc_control_B.ic_g4[proc_control_B.Jx_tmp], _mm_add_pd(tmp,
        _mm_set1_pd(13.0)));
    }

    for (proc_control_B.Jx_tmp = 12; proc_control_B.Jx_tmp < 13;
         proc_control_B.Jx_tmp++) {
      proc_control_B.ic_g4[proc_control_B.Jx_tmp] += 13.0;
    }
  }

  proc_control_B.Jx_tmp = 0;
  for (proc_control_B.i_jm = 0; proc_control_B.i_jm < 8; proc_control_B.i_jm++)
  {
    proc_control_B.Ak1_tmp = 0;
    for (proc_control_B.k_kg = 0; proc_control_B.k_kg < 130; proc_control_B.k_kg
         ++) {
      proc_control_B.Jmv_h = 0.0;
      proc_control_B.i29 = 0;
      for (proc_control_B.i28 = 0; proc_control_B.i28 < 80; proc_control_B.i28++)
      {
        proc_control_B.Jmv_h += proc_control_B.Jmv[proc_control_B.i29 +
          proc_control_B.k_kg] * static_cast<real_T>(b[proc_control_B.i28 +
          proc_control_B.Jx_tmp]);
        proc_control_B.i29 += 130;
      }

      proc_control_B.Jmv_n[proc_control_B.Ak1_tmp + proc_control_B.i_jm] =
        proc_control_B.Jmv_h;
      proc_control_B.Ak1_tmp += 8;
    }

    proc_control_B.Jx_tmp += 80;
  }

  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 130;
       proc_control_B.Jx_tmp++) {
    for (proc_control_B.i_jm = 0; proc_control_B.i_jm < 130; proc_control_B.i_jm
         ++) {
      J[proc_control_B.i_jm + 139 * proc_control_B.Jx_tmp] =
        proc_control_B.Jx_k[130 * proc_control_B.i_jm + proc_control_B.Jx_tmp];
    }

    memcpy(&J[proc_control_B.Jx_tmp * 139 + 130],
           &proc_control_B.Jmv_n[proc_control_B.Jx_tmp << 3], sizeof(real_T) <<
           3U);
    J[139 * proc_control_B.Jx_tmp + 138] = 0.0;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_all(const boolean_T x[130], boolean_T y[13])
{
  proc_control_B.i2_h = 1;
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++) {
    boolean_T exitg1;
    y[proc_control_B.i_a] = true;
    proc_control_B.a_d = proc_control_B.i2_h + 9;
    proc_control_B.ix_c = proc_control_B.i2_h;
    proc_control_B.i2_h += 10;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.ix_c <= proc_control_B.a_d)) {
      if (!x[proc_control_B.ix_c - 1]) {
        y[proc_control_B.i_a] = false;
        exitg1 = true;
      } else {
        proc_control_B.ix_c++;
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
boolean_T proc_control::proc_control_any(const boolean_T x[26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (x[k]) {
      y = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T Je_size[1], real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_B.Jx_o[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.loop_ub_n = Jx_size[0];
    for (proc_control_B.i15 = 0; proc_control_B.i15 < proc_control_B.loop_ub_n;
         proc_control_B.i15++) {
      for (proc_control_B.i14 = 0; proc_control_B.i14 < 130; proc_control_B.i14
           ++) {
        proc_control_B.varargin_1_data[proc_control_B.i14 + 130 *
          proc_control_B.i15] = Jx_data[proc_control_B.Jx_o[0] *
          proc_control_B.i14 + proc_control_B.i15];
      }
    }

    proc_control_B.Jx_b[0] = Jx_size[0];
    proc_control_B.Jx_b[1] = 80;
    proc_control_mtimes_e(Jmv_data, proc_control_B.Jx_b,
                          proc_control_B.tmp_data_d, proc_control_B.tmp_size_f);
    proc_control_B.loop_ub_dm = proc_control_B.tmp_size_f[0];
    for (proc_control_B.i15 = 0; proc_control_B.i15 < proc_control_B.loop_ub_dm;
         proc_control_B.i15++) {
      for (proc_control_B.i14 = 0; proc_control_B.i14 < 8; proc_control_B.i14++)
      {
        proc_control_B.varargin_2_data_d[proc_control_B.i14 +
          (proc_control_B.i15 << 3)] =
          proc_control_B.tmp_data_d[proc_control_B.tmp_size_f[0] *
          proc_control_B.i14 + proc_control_B.i15];
      }
    }

    proc_control_B.Jx_o[0] = 130;
    if (proc_control_B.tmp_size_f[0] != 0) {
      proc_control_B.varargin_2[0] = 8;
    } else {
      proc_control_B.varargin_2[0] = 0;
    }

    proc_control_B.loop_ub_dm = Je_size[0];
    if (proc_control_B.loop_ub_dm - 1 >= 0) {
      memcpy(&proc_control_B.Je_data[0], &Je_data[0], static_cast<uint32_T>
             (proc_control_B.loop_ub_dm) * sizeof(real_T));
    }

    proc_control_B.Je_b[0] = (Je_size[0] != 0);
    Jc_size[0] = (proc_control_B.varargin_2[0] + proc_control_B.Je_b[0]) + 130;
    Jc_size[1] = Jx_size[0];
    proc_control_B.loop_ub_dm = proc_control_B.varargin_2[0];
    proc_control_B.loop_ub_b = proc_control_B.Je_b[0];
    for (proc_control_B.i15 = 0; proc_control_B.i15 < proc_control_B.loop_ub_n;
         proc_control_B.i15++) {
      for (proc_control_B.i14 = 0; proc_control_B.i14 < 130; proc_control_B.i14
           ++) {
        Jc_data[proc_control_B.i14 + Jc_size[0] * proc_control_B.i15] =
          proc_control_B.varargin_1_data[proc_control_B.Jx_o[0] *
          proc_control_B.i15 + proc_control_B.i14];
      }

      for (proc_control_B.i14 = 0; proc_control_B.i14 <
           proc_control_B.loop_ub_dm; proc_control_B.i14++) {
        Jc_data[(proc_control_B.i14 + Jc_size[0] * proc_control_B.i15) + 130] =
          proc_control_B.varargin_2_data_d[proc_control_B.varargin_2[0] *
          proc_control_B.i15 + proc_control_B.i14];
      }

      if (proc_control_B.loop_ub_b - 1 >= 0) {
        Jc_data[(proc_control_B.varargin_2[0] + Jc_size[0] * proc_control_B.i15)
          + 130] = proc_control_B.Je_data[proc_control_B.Je_b[0] *
          proc_control_B.i15];
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_outputBounds(const real_T runtimedata_OutputMin
  [130], const real_T runtimedata_OutputMax[130], const real_T X[143], real_T e,
  real_T c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
  __m128d tmp;
  boolean_T exitg1;
  for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 130; proc_control_B.i_ct++)
  {
    proc_control_B.bv2[proc_control_B.i_ct] = rtIsInf
      (runtimedata_OutputMin[proc_control_B.i_ct]);
  }

  proc_control_all(proc_control_B.bv2, proc_control_B.x_p);
  proc_control_B.y_ik = true;
  proc_control_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.d_k < 13)) {
    if (!proc_control_B.x_p[proc_control_B.d_k]) {
      proc_control_B.y_ik = false;
      exitg1 = true;
    } else {
      proc_control_B.d_k++;
    }
  }

  if (proc_control_B.y_ik) {
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 130; proc_control_B.i_ct
         ++) {
      proc_control_B.bv2[proc_control_B.i_ct] = rtIsInf
        (runtimedata_OutputMax[proc_control_B.i_ct]);
    }

    proc_control_all(proc_control_B.bv2, proc_control_B.x_p);
    proc_control_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.d_k < 13)) {
      if (!proc_control_B.x_p[proc_control_B.d_k]) {
        proc_control_B.y_ik = false;
        exitg1 = true;
      } else {
        proc_control_B.d_k++;
      }
    }
  }

  if (proc_control_B.y_ik) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 260; proc_control_B.i_ct
         ++) {
      proc_control_B.b_c_o[proc_control_B.i_ct] = 0.0;
      proc_control_B.icf_n[proc_control_B.i_ct] = true;
    }

    memset(&proc_control_B.Jx[0], 0, 33800U * sizeof(real_T));
    memset(&proc_control_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13; proc_control_B.i_ct
         ++) {
      proc_control_B.ic_m[proc_control_B.i_ct] = static_cast<real_T>
        (proc_control_B.i_ct) + 1.0;
    }

    for (proc_control_B.d_k = 0; proc_control_B.d_k < 10; proc_control_B.d_k++)
    {
      for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13;
           proc_control_B.i_ct++) {
        proc_control_B.runtimedata_OutputMin_i = runtimedata_OutputMin[10 *
          proc_control_B.i_ct + proc_control_B.d_k];
        proc_control_B.icf_n[static_cast<int32_T>
          (proc_control_B.ic_m[proc_control_B.i_ct]) - 1] = ((!rtIsInf
          (proc_control_B.runtimedata_OutputMin_i)) && (!rtIsNaN
          (proc_control_B.runtimedata_OutputMin_i)));
      }

      for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13;
           proc_control_B.i_ct++) {
        proc_control_B.runtimedata_OutputMin_i =
          proc_control_B.ic_m[proc_control_B.i_ct];
        proc_control_B.runtimedata_OutputMax_a = runtimedata_OutputMax[10 *
          proc_control_B.i_ct + proc_control_B.d_k];
        proc_control_B.icf_n[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i + 13.0) - 1] = ((!rtIsInf
          (proc_control_B.runtimedata_OutputMax_a)) && (!rtIsNaN
          (proc_control_B.runtimedata_OutputMax_a)));
        proc_control_B.ic_g[proc_control_B.i_ct] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i) - 1;
        proc_control_B.ic_g[proc_control_B.i_ct + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i + 13.0) - 1;
      }

      for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 26;
           proc_control_B.i_ct++) {
        proc_control_B.icf_nc[proc_control_B.i_ct] =
          proc_control_B.icf_n[proc_control_B.ic_g[proc_control_B.i_ct]];
      }

      if (proc_control_any(proc_control_B.icf_nc)) {
        memset(&proc_control_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_B.c_k_k = 0; proc_control_B.c_k_k < 13;
             proc_control_B.c_k_k++) {
          proc_control_B.Ck[proc_control_B.c_k_k + 13 * proc_control_B.c_k_k] =
            1;
          proc_control_B.b_c_o[static_cast<int32_T>
            (proc_control_B.ic_m[proc_control_B.c_k_k]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.c_k_k +
             proc_control_B.d_k] - e) - X[(11 * proc_control_B.c_k_k +
            proc_control_B.d_k) + 1];
        }

        for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13;
             proc_control_B.i_ct++) {
          proc_control_B.b_c_o[static_cast<int32_T>
            (proc_control_B.ic_m[proc_control_B.i_ct] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_ct + proc_control_B.d_k) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_ct + proc_control_B.d_k])
            - e;
        }

        for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 169;
             proc_control_B.i_ct++) {
          proc_control_B.val[proc_control_B.i_ct] = static_cast<int8_T>
            (-proc_control_B.Ck[proc_control_B.i_ct]);
        }

        for (proc_control_B.c_k_k = 0; proc_control_B.c_k_k < 13;
             proc_control_B.c_k_k++) {
          for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13;
               proc_control_B.i_ct++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_m[proc_control_B.i_ct]) + 260
                                * proc_control_B.c_k_k) + 3380 *
                               proc_control_B.d_k) - 1] = proc_control_B.val[13 *
              proc_control_B.c_k_k + proc_control_B.i_ct];
          }
        }

        for (proc_control_B.c_k_k = 0; proc_control_B.c_k_k < 13;
             proc_control_B.c_k_k++) {
          for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13;
               proc_control_B.i_ct++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_m[proc_control_B.i_ct] + 13.0)
                                + 260 * proc_control_B.c_k_k) + 3380 *
                               proc_control_B.d_k) - 1] = proc_control_B.Ck[13 *
              proc_control_B.c_k_k + proc_control_B.i_ct];
          }

          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_m[proc_control_B.c_k_k]) - 1] = -1;
        }

        for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 13;
             proc_control_B.i_ct++) {
          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_m[proc_control_B.i_ct] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_B.i_ct = 0; proc_control_B.i_ct <= 10;
           proc_control_B.i_ct += 2) {
        tmp = _mm_loadu_pd(&proc_control_B.ic_m[proc_control_B.i_ct]);
        _mm_storeu_pd(&proc_control_B.ic_m[proc_control_B.i_ct], _mm_add_pd(tmp,
          _mm_set1_pd(26.0)));
      }

      for (proc_control_B.i_ct = 12; proc_control_B.i_ct < 13;
           proc_control_B.i_ct++) {
        proc_control_B.ic_m[proc_control_B.i_ct] += 26.0;
      }
    }

    proc_control_B.d_k = 0;
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 260; proc_control_B.i_ct
         ++) {
      if (proc_control_B.icf_n[proc_control_B.i_ct]) {
        proc_control_B.d_k++;
      }
    }

    proc_control_B.tmp_size_idx_0_j = proc_control_B.d_k;
    proc_control_B.d_k = 0;
    proc_control_B.c_k_k = 0;
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 260; proc_control_B.i_ct
         ++) {
      if (proc_control_B.icf_n[proc_control_B.i_ct]) {
        proc_control_B.tmp_data_my[proc_control_B.d_k] = static_cast<int16_T>
          (proc_control_B.i_ct);
        proc_control_B.c_k_k = proc_control_B.d_k + 1;
        proc_control_B.d_k++;
      }
    }

    for (proc_control_B.i_ct = 0; proc_control_B.i_ct <
         proc_control_B.tmp_size_idx_0_j; proc_control_B.i_ct++) {
      proc_control_B.b_c_data[proc_control_B.i_ct] =
        proc_control_B.b_c_o[proc_control_B.tmp_data_my[proc_control_B.i_ct]];
    }

    c_size[0] = proc_control_B.c_k_k;
    c_size[1] = 1;
    if (proc_control_B.c_k_k - 1 >= 0) {
      memcpy(&c_data[0], &proc_control_B.b_c_data[0], static_cast<uint32_T>
             (proc_control_B.c_k_k) * sizeof(real_T));
    }

    proc_control_B.Jx_size[0] = proc_control_B.tmp_size_idx_0_j;
    proc_control_B.Jx_size[1] = 13;
    proc_control_B.Jx_size[2] = 10;
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 10; proc_control_B.i_ct
         ++) {
      for (proc_control_B.c_k_k = 0; proc_control_B.c_k_k < 13;
           proc_control_B.c_k_k++) {
        for (proc_control_B.d_k = 0; proc_control_B.d_k <
             proc_control_B.tmp_size_idx_0_j; proc_control_B.d_k++) {
          proc_control_B.Jx_data[(proc_control_B.d_k +
            proc_control_B.tmp_size_idx_0_j * proc_control_B.c_k_k) +
            proc_control_B.tmp_size_idx_0_j * 13 * proc_control_B.i_ct] =
            proc_control_B.Jx[(260 * proc_control_B.c_k_k +
                               proc_control_B.tmp_data_my[proc_control_B.d_k]) +
            3380 * proc_control_B.i_ct];
        }
      }
    }

    proc_control_B.c_k_k = (proc_control_B.tmp_size_idx_0_j << 3) * 10;
    if (proc_control_B.c_k_k - 1 >= 0) {
      memset(&proc_control_B.tmp_data[0], 0, static_cast<uint32_T>
             (proc_control_B.c_k_k) * sizeof(real_T));
    }

    proc_control_B.b_c_size[0] = proc_control_B.tmp_size_idx_0_j;
    for (proc_control_B.i_ct = 0; proc_control_B.i_ct <
         proc_control_B.tmp_size_idx_0_j; proc_control_B.i_ct++) {
      proc_control_B.b_c_data[proc_control_B.i_ct] =
        proc_control_B.Je[proc_control_B.tmp_data_my[proc_control_B.i_ct]];
    }

    proc_control_reformJacobian(proc_control_B.Jx_data, proc_control_B.Jx_size,
      proc_control_B.tmp_data, proc_control_B.b_c_data, proc_control_B.b_c_size,
      Jc_data, Jc_size);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_c4_mpclib_anonFcn2(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[139], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[18070])
{
  proc_control_getXUe(z, runtimedata_x, proc_control_B.X_e, proc_control_B.U_c,
                      &proc_control_B.e_b);
  proc_control_stateEvolution(proc_control_B.X_e, proc_control_B.U_c,
    varargout_2, varargout_4);
  proc_control_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_e, proc_control_B.e_b, proc_control_B.varargin_1_data_c,
    proc_control_B.varargin_1_size_j, proc_control_B.b_varargin_1_data,
    proc_control_B.b_varargin_1_size);
  proc_control_B.sizes_idx_1_tmp_f = ((proc_control_B.varargin_1_size_j[0] != 0)
    && (proc_control_B.varargin_1_size_j[1] != 0));
  if (!proc_control_B.sizes_idx_1_tmp_f) {
    proc_control_B.sizes_i[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size_j[0]);
  } else if (proc_control_B.sizes_idx_1_tmp_f) {
    proc_control_B.sizes_i[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size_j[0]);
  } else {
    proc_control_B.sizes_i[0] = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_i[0];
  varargout_1_size[1] = proc_control_B.sizes_idx_1_tmp_f;
  proc_control_B.loop_ub_d = proc_control_B.sizes_idx_1_tmp_f;
  for (proc_control_B.i13 = 0; proc_control_B.i13 < proc_control_B.loop_ub_d;
       proc_control_B.i13++) {
    proc_control_B.loop_ub_a = proc_control_B.sizes_i[0];
    if (proc_control_B.loop_ub_a - 1 >= 0) {
      memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_c[0],
             static_cast<uint32_T>(proc_control_B.loop_ub_a) * sizeof(real_T));
    }
  }

  proc_control_B.sizes_idx_1_tmp_f = ((proc_control_B.b_varargin_1_size[0] != 0)
    && (proc_control_B.b_varargin_1_size[1] != 0));
  if (proc_control_B.sizes_idx_1_tmp_f) {
    proc_control_B.sizes_idx_0 = static_cast<uint8_T>
      (proc_control_B.b_varargin_1_size[0]);
  } else {
    proc_control_B.sizes_idx_0 = 0U;
  }

  varargout_3_size[0] = proc_control_B.sizes_idx_0;
  if (proc_control_B.sizes_idx_0 == 0) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    proc_control_B.i30 = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
  } else {
    if (proc_control_B.sizes_idx_1_tmp_f) {
      varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    } else {
      varargout_3_size[1] = 0;
    }

    if (proc_control_B.sizes_idx_1_tmp_f) {
      proc_control_B.i30 = static_cast<int16_T>
        (proc_control_B.b_varargin_1_size[1]);
    } else {
      proc_control_B.i30 = 0;
    }
  }

  proc_control_B.loop_ub_d = proc_control_B.sizes_idx_0 * proc_control_B.i30;
  if (proc_control_B.loop_ub_d - 1 >= 0) {
    memcpy(&varargout_3_data[0], &proc_control_B.b_varargin_1_data[0],
           static_cast<uint32_T>(proc_control_B.loop_ub_d) * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factoryConstruct(int32_T nVarMax, int32_T
  mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_KPwpEZDfdzkqudEdVwjGjF_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size[0] = mIneq;
  obj->cIneq_old.size[0] = mIneq;
  obj->grad.size[0] = nVarMax;
  obj->grad_old.size[0] = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size[0] = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    memset(&obj->lambdasqp.data[0], 0, static_cast<uint32_T>(mConstrMax) *
           sizeof(real_T));
  }

  obj->lambdaStopTest.size[0] = mConstrMax;
  obj->lambdaStopTestPrev.size[0] = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size[0] = nVarMax;
  if (nVarMax - 1 >= 0) {
    memset(&obj->delta_x.data[0], 0, static_cast<uint32_T>(nVarMax) * sizeof
           (real_T));
  }

  obj->socDirection.size[0] = nVarMax;
  obj->workingset_old.size[0] = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size[0] = nVarMax;
  obj->delta_gradLag.size[0] = nVarMax;
  obj->xstar.size[0] = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size[0] = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    memset(&obj->lambda.data[0], 0, static_cast<uint32_T>(mConstrMax) * sizeof
           (real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size[0] = nVarMax;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_cont_factoryConstruct_p52k(int32_T MaxVars, int32_T
  obj_grad_size[1], int32_T obj_Hx_size[1], boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  obj_grad_size[0] = MaxVars;
  obj_Hx_size[0] = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_con_factoryConstruct_p52kz(int32_T mIneqMax, int32_T
  nVarMax, int32_T mConstrMax, s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj)
{
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 139;
  obj->nVarOrig = 139;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size[0] = mIneqMax * nVarMax;
  obj->bineq.size[0] = mIneqMax;
  obj->Aeq.size[0] = 130 * nVarMax;
  obj->lb.size[0] = nVarMax;
  obj->ub.size[0] = nVarMax;
  obj->indexLB.size[0] = nVarMax;
  obj->indexUB.size[0] = nVarMax;
  obj->indexFixed.size[0] = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size[0] = nVarMax * mConstrMax;
  obj->bwset.size[0] = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size[0] = mConstrMax;
  for (int32_T i = 0; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (int32_T i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size[0] = mConstrMax;
  obj->Wid.size[0] = mConstrMax;
  obj->Wlocalidx.size[0] = mConstrMax;
  for (int32_T i = 0; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::computeObjectiveAndUserGradient(const
  s_xJmQKnCTzvv6aUzMZcIqsF_proc_T *obj_next_next_next_next_next_ne, const real_T
  x[139], real_T grad_workspace_data[], real_T *fval, int32_T *status)
{
  __m128d tmp;
  __m128d tmp_0;
  static const int8_T b[640] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1
  };

  static const int8_T c[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_getXUe(x, obj_next_next_next_next_next_ne->runtimedata.x,
                      proc_control_B.X_c, proc_control_B.U_f,
                      &proc_control_B.e_g);
  memset(&proc_control_B.gfX[0], 0, 130U * sizeof(real_T));
  memset(&proc_control_B.gfU[0], 0, 80U * sizeof(real_T));
  proc_control_B.fs_a = 0.0;
  for (proc_control_B.i_o = 0; proc_control_B.i_o < 13; proc_control_B.i_o++) {
    proc_control_B.ix[proc_control_B.i_o] = static_cast<real_T>
      (proc_control_B.i_o) + 1.0;
  }

  for (proc_control_B.i_o = 0; proc_control_B.i_o < 8; proc_control_B.i_o++) {
    proc_control_B.iu[proc_control_B.i_o] = static_cast<real_T>
      (proc_control_B.i_o) + 1.0;
  }

  proc_control_B.i_o = 0;
  for (proc_control_B.wtYerr_tmp_aj = 0; proc_control_B.wtYerr_tmp_aj < 11;
       proc_control_B.wtYerr_tmp_aj++) {
    proc_control_B.idx_current = 0;
    for (proc_control_B.gfU_tmp_tmp = 0; proc_control_B.gfU_tmp_tmp < 13;
         proc_control_B.gfU_tmp_tmp++) {
      proc_control_B.b_X_a[proc_control_B.gfU_tmp_tmp + proc_control_B.i_o] =
        proc_control_B.X_c[proc_control_B.idx_current +
        proc_control_B.wtYerr_tmp_aj];
      proc_control_B.idx_current += 11;
    }

    proc_control_B.i_o += 13;
  }

  proc_control_B.i_o = 0;
  for (proc_control_B.idx_current = 0; proc_control_B.idx_current < 8;
       proc_control_B.idx_current++) {
    proc_control_B.gfU_tmp_tmp = 0;
    for (proc_control_B.wtYerr_tmp_aj = 0; proc_control_B.wtYerr_tmp_aj < 11;
         proc_control_B.wtYerr_tmp_aj++) {
      proc_control_B.b_U_h[proc_control_B.gfU_tmp_tmp +
        proc_control_B.idx_current] =
        proc_control_B.U_f[proc_control_B.wtYerr_tmp_aj + proc_control_B.i_o];
      proc_control_B.gfU_tmp_tmp += 8;
    }

    proc_control_B.i_o += 11;
  }

  for (proc_control_B.idx_current = 0; proc_control_B.idx_current < 10;
       proc_control_B.idx_current++) {
    proc_control_B.wtYerr_b = 0.0;
    for (proc_control_B.i_o = 0; proc_control_B.i_o < 13; proc_control_B.i_o++)
    {
      proc_control_B.wtYerr_tmp_aj = 10 * proc_control_B.i_o +
        proc_control_B.idx_current;
      proc_control_B.wtYerr_tmp_a =
        obj_next_next_next_next_next_ne->
        runtimedata.OutputWeights[proc_control_B.wtYerr_tmp_aj];
      proc_control_B.wtYerr_j = (proc_control_B.b_X_a
        [(proc_control_B.idx_current + 1) * 13 + proc_control_B.i_o] -
        obj_next_next_next_next_next_ne->
        runtimedata.ref[proc_control_B.wtYerr_tmp_aj]) *
        proc_control_B.wtYerr_tmp_a;
      proc_control_B.wtYerr_b += proc_control_B.wtYerr_j *
        proc_control_B.wtYerr_j;
      proc_control_B.obj_next_next_next_next_next_ne[proc_control_B.i_o] =
        proc_control_B.wtYerr_tmp_a * proc_control_B.wtYerr_j;
    }

    proc_control_B.fs_a += proc_control_B.wtYerr_b;
    for (proc_control_B.i_o = 0; proc_control_B.i_o < 13; proc_control_B.i_o++)
    {
      proc_control_B.wtYerr_b = 0.0;
      for (proc_control_B.wtYerr_tmp_aj = 0; proc_control_B.wtYerr_tmp_aj < 13;
           proc_control_B.wtYerr_tmp_aj++) {
        proc_control_B.wtYerr_b += static_cast<real_T>(c[13 *
          proc_control_B.wtYerr_tmp_aj + proc_control_B.i_o]) *
          proc_control_B.obj_next_next_next_next_next_ne[proc_control_B.wtYerr_tmp_aj];
      }

      proc_control_B.gfX_d[proc_control_B.i_o] = proc_control_B.gfX[static_cast<
        int32_T>(proc_control_B.ix[proc_control_B.i_o]) - 1] +
        proc_control_B.wtYerr_b;
    }

    for (proc_control_B.i_o = 0; proc_control_B.i_o < 13; proc_control_B.i_o++)
    {
      proc_control_B.wtYerr_b = proc_control_B.ix[proc_control_B.i_o];
      proc_control_B.gfX[static_cast<int32_T>(proc_control_B.wtYerr_b) - 1] =
        proc_control_B.gfX_d[proc_control_B.i_o];
      proc_control_B.ix[proc_control_B.i_o] = proc_control_B.wtYerr_b + 13.0;
    }

    memcpy(&proc_control_B.umvk_d[0],
           &proc_control_B.b_U_h[proc_control_B.idx_current << 3], sizeof(real_T)
           << 3U);
    if (proc_control_B.idx_current + 1 == 1) {
      for (proc_control_B.i_o = 0; proc_control_B.i_o <= 6; proc_control_B.i_o +=
           2) {
        tmp = _mm_loadu_pd(&proc_control_B.umvk_d[proc_control_B.i_o]);
        _mm_storeu_pd(&proc_control_B.duk_j[proc_control_B.i_o], _mm_sub_pd(tmp,
          _mm_loadu_pd(&obj_next_next_next_next_next_ne->
                       runtimedata.lastMV[proc_control_B.i_o])));
      }
    } else {
      for (proc_control_B.i_o = 0; proc_control_B.i_o <= 6; proc_control_B.i_o +=
           2) {
        tmp = _mm_loadu_pd(&proc_control_B.umvk_d[proc_control_B.i_o]);
        tmp_0 = _mm_loadu_pd(&proc_control_B.b_U_h[((proc_control_B.idx_current
          - 1) << 3) + proc_control_B.i_o]);
        _mm_storeu_pd(&proc_control_B.duk_j[proc_control_B.i_o], _mm_sub_pd(tmp,
          tmp_0));
      }
    }

    for (proc_control_B.i_o = 0; proc_control_B.i_o < 8; proc_control_B.i_o++) {
      proc_control_B.wtYerr_tmp_aj = 10 * proc_control_B.i_o +
        proc_control_B.idx_current;
      proc_control_B.wtYerr_tmp_a =
        obj_next_next_next_next_next_ne->
        runtimedata.MVWeights[proc_control_B.wtYerr_tmp_aj];
      proc_control_B.wtYerr_b = (proc_control_B.umvk_d[proc_control_B.i_o] -
        obj_next_next_next_next_next_ne->
        runtimedata.MVScaledTarget[proc_control_B.wtYerr_tmp_aj]) *
        proc_control_B.wtYerr_tmp_a;
      proc_control_B.umvk_d[proc_control_B.i_o] = proc_control_B.wtYerr_b;
      proc_control_B.gfU_i[proc_control_B.i_o] = proc_control_B.gfU
        [static_cast<int32_T>(proc_control_B.iu[proc_control_B.i_o]) - 1] +
        proc_control_B.wtYerr_tmp_a * proc_control_B.wtYerr_b;
    }

    proc_control_B.wtYerr_b = 0.0;
    proc_control_B.wtYerr_tmp_a = 0.0;
    for (proc_control_B.i_o = 0; proc_control_B.i_o < 8; proc_control_B.i_o++) {
      proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_o]) - 1] =
        proc_control_B.gfU_i[proc_control_B.i_o];
      proc_control_B.wtYerr_j =
        obj_next_next_next_next_next_ne->runtimedata.MVRateWeights[10 *
        proc_control_B.i_o + proc_control_B.idx_current];
      proc_control_B.duk_k = proc_control_B.wtYerr_j *
        proc_control_B.duk_j[proc_control_B.i_o];
      proc_control_B.duk_j[proc_control_B.i_o] = proc_control_B.duk_k;
      proc_control_B.umvk_ca = proc_control_B.umvk_d[proc_control_B.i_o];
      proc_control_B.wtYerr_b += proc_control_B.umvk_ca * proc_control_B.umvk_ca;
      proc_control_B.wtYerr_tmp_a += proc_control_B.duk_k * proc_control_B.duk_k;
      proc_control_B.umvk_d[proc_control_B.i_o] = proc_control_B.wtYerr_j *
        proc_control_B.duk_k;
    }

    proc_control_B.fs_a = (proc_control_B.fs_a + proc_control_B.wtYerr_b) +
      proc_control_B.wtYerr_tmp_a;
    for (proc_control_B.i_o = 0; proc_control_B.i_o <= 6; proc_control_B.i_o +=
         2) {
      tmp = _mm_add_pd(_mm_set_pd(proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_o + 1]) - 1], proc_control_B.gfU[
        static_cast<int32_T>(proc_control_B.iu[proc_control_B.i_o]) - 1]),
                       _mm_loadu_pd(&proc_control_B.umvk_d[proc_control_B.i_o]));
      _mm_storeu_pd(&proc_control_B.gfU_i[proc_control_B.i_o], tmp);
    }

    for (proc_control_B.i_o = 0; proc_control_B.i_o < 8; proc_control_B.i_o++) {
      proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_o]) - 1] =
        proc_control_B.gfU_i[proc_control_B.i_o];
    }

    if (proc_control_B.idx_current + 1 > 1) {
      for (proc_control_B.i_o = 0; proc_control_B.i_o <= 4; proc_control_B.i_o +=
           4) {
        proc_control_B.wtYerr_tmp_aj = static_cast<int32_T>
          (proc_control_B.iu[proc_control_B.i_o] - 8.0);
        proc_control_B.gfU_tmp[proc_control_B.i_o] =
          proc_control_B.wtYerr_tmp_aj;
        proc_control_B.gfU_tmp_tmp = static_cast<int32_T>
          (proc_control_B.iu[proc_control_B.i_o + 1] - 8.0);
        proc_control_B.gfU_tmp[proc_control_B.i_o + 1] =
          proc_control_B.gfU_tmp_tmp;
        proc_control_B.gfU_tmp_tmp_e = static_cast<int32_T>
          (proc_control_B.iu[proc_control_B.i_o + 2] - 8.0);
        proc_control_B.gfU_tmp[proc_control_B.i_o + 2] =
          proc_control_B.gfU_tmp_tmp_e;
        proc_control_B.gfU_tmp_tmp_d = static_cast<int32_T>
          (proc_control_B.iu[proc_control_B.i_o + 3] - 8.0);
        proc_control_B.gfU_tmp[proc_control_B.i_o + 3] =
          proc_control_B.gfU_tmp_tmp_d;
        tmp = _mm_sub_pd(_mm_set_pd
                         (proc_control_B.gfU[proc_control_B.gfU_tmp_tmp - 1],
                          proc_control_B.gfU[proc_control_B.wtYerr_tmp_aj - 1]),
                         _mm_loadu_pd(&proc_control_B.umvk_d[proc_control_B.i_o]));
        _mm_storeu_pd(&proc_control_B.gfU_i[proc_control_B.i_o], tmp);
        tmp = _mm_sub_pd(_mm_set_pd
                         (proc_control_B.gfU[proc_control_B.gfU_tmp_tmp_d - 1],
                          proc_control_B.gfU[proc_control_B.gfU_tmp_tmp_e - 1]),
                         _mm_loadu_pd(&proc_control_B.umvk_d[proc_control_B.i_o
          + 2]));
        _mm_storeu_pd(&proc_control_B.gfU_i[proc_control_B.i_o + 2], tmp);
      }

      for (proc_control_B.i_o = 0; proc_control_B.i_o < 8; proc_control_B.i_o++)
      {
        proc_control_B.gfU[proc_control_B.gfU_tmp[proc_control_B.i_o] - 1] =
          proc_control_B.gfU_i[proc_control_B.i_o];
      }
    }

    for (proc_control_B.i_o = 0; proc_control_B.i_o <= 6; proc_control_B.i_o +=
         2) {
      tmp = _mm_loadu_pd(&proc_control_B.iu[proc_control_B.i_o]);
      _mm_storeu_pd(&proc_control_B.iu[proc_control_B.i_o], _mm_add_pd(tmp,
        _mm_set1_pd(8.0)));
    }
  }

  *fval = 100000.0 * proc_control_B.e_g * proc_control_B.e_g +
    proc_control_B.fs_a;
  for (proc_control_B.i_o = 0; proc_control_B.i_o < 8; proc_control_B.i_o++) {
    proc_control_B.wtYerr_b = 0.0;
    proc_control_B.wtYerr_tmp_aj = 0;
    for (proc_control_B.idx_current = 0; proc_control_B.idx_current < 80;
         proc_control_B.idx_current++) {
      proc_control_B.wtYerr_b += static_cast<real_T>
        (b[proc_control_B.wtYerr_tmp_aj + proc_control_B.i_o]) * (2.0 *
        proc_control_B.gfU[proc_control_B.idx_current]);
      proc_control_B.wtYerr_tmp_aj += 8;
    }

    proc_control_B.iu[proc_control_B.i_o] = proc_control_B.wtYerr_b;
  }

  for (proc_control_B.i_o = 0; proc_control_B.i_o <= 128; proc_control_B.i_o +=
       2) {
    tmp = _mm_loadu_pd(&proc_control_B.gfX[proc_control_B.i_o]);
    _mm_storeu_pd(&proc_control_B.b_x[proc_control_B.i_o], _mm_mul_pd
                  (_mm_set1_pd(2.0), tmp));
  }

  memcpy(&proc_control_B.b_x[130], &proc_control_B.iu[0], sizeof(real_T) << 3U);
  proc_control_B.b_x[138] = 200000.0 * proc_control_B.e_g;
  memcpy(&grad_workspace_data[0], &proc_control_B.b_x[0], 139U * sizeof(real_T));
  *status = 1;
  proc_control_B.allFinite_i = rtIsNaN(*fval);
  if (rtIsInf(*fval) || proc_control_B.allFinite_i) {
    if (proc_control_B.allFinite_i) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    proc_control_B.allFinite_i = true;
    proc_control_B.idx_current = -1;
    while (proc_control_B.allFinite_i && (proc_control_B.idx_current + 2 <= 139))
    {
      proc_control_B.e_g = grad_workspace_data[proc_control_B.idx_current + 1];
      proc_control_B.allFinite_i = ((!rtIsInf(proc_control_B.e_g)) && (!rtIsNaN
        (proc_control_B.e_g)));
      proc_control_B.idx_current++;
    }

    if (!proc_control_B.allFinite_i) {
      if (rtIsNaN(grad_workspace_data[proc_control_B.idx_current])) {
        *status = -3;
      } else if (grad_workspace_data[proc_control_B.idx_current] < 0.0) {
        *status = -1;
      } else {
        *status = -2;
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
int32_T proc_control::proc_contr_checkVectorNonFinite(int32_T N, const real_T
  vec_data[], int32_T iv0)
{
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0 - 2;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current + 2 <= idx_end)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec_data[idx_current + 1];
    allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (rtIsNaN(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S148>/NLMPC'
int32_T proc_control::proc_con_checkVectorNonFinite_a(const real_T vec[130])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = -1;
  while (allFinite && (idx_current + 2 <= 130)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec[idx_current + 1];
    allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (rtIsNaN(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S148>/NLMPC'
int32_T proc_control::computeConstraintsAndUserJacobi(int32_T
  obj_next_next_next_next_next_b_, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *obj_next_next_next_next_next_ne, const real_T x[139], real_T
  Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130], real_T
  JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_next_next_next_next_next_b_ > 0) {
    proc_control_c4_mpclib_anonFcn2(obj_next_next_next_next_next_ne->x,
      obj_next_next_next_next_next_ne->OutputMin,
      obj_next_next_next_next_next_ne->OutputMax, x, proc_control_B.a__3_data,
      proc_control_B.a__3_size, proc_control_B.b_x_o, proc_control_B.a__4_data,
      proc_control_B.a__4_size, proc_control_B.JacEqTrans_tmp);
    proc_control_B.col = static_cast<uint16_T>(obj_next_next_next_next_next_b_);
    for (proc_control_B.row = 0; proc_control_B.row < proc_control_B.col;
         proc_control_B.row++) {
      Cineq_workspace_data[(ineq0 + proc_control_B.row) - 1] =
        proc_control_B.a__3_data[proc_control_B.row];
    }

    memcpy(&Ceq_workspace[0], &proc_control_B.b_x_o[0], 130U * sizeof(real_T));
    proc_control_B.col_end = proc_control_B.a__4_size[0];
    for (proc_control_B.row = 0; proc_control_B.row < proc_control_B.col_end;
         proc_control_B.row++) {
      proc_control_B.idx_mat = proc_control_B.a__4_size[1];
      for (proc_control_B.col = 0; proc_control_B.col < proc_control_B.idx_mat;
           proc_control_B.col++) {
        JacIneqTrans_workspace_data[proc_control_B.row + ldJI * ((iJI_col +
          proc_control_B.col) - 1)] =
          proc_control_B.a__4_data[proc_control_B.a__4_size[0] *
          proc_control_B.col + proc_control_B.row];
      }
    }

    for (proc_control_B.row = 0; proc_control_B.row < 139; proc_control_B.row++)
    {
      for (proc_control_B.col = 0; proc_control_B.col < 130; proc_control_B.col
           ++) {
        JacEqTrans_workspace_data[proc_control_B.row + ldJE * proc_control_B.col]
          = proc_control_B.JacEqTrans_tmp[139 * proc_control_B.col +
          proc_control_B.row];
      }
    }
  } else {
    proc_control_c4_mpclib_anonFcn2(obj_next_next_next_next_next_ne->x,
      obj_next_next_next_next_next_ne->OutputMin,
      obj_next_next_next_next_next_ne->OutputMax, x, proc_control_B.a__3_data,
      proc_control_B.a__3_size, proc_control_B.b_x_o, proc_control_B.a__4_data,
      proc_control_B.a__4_size, proc_control_B.JacEqTrans_tmp);
    memcpy(&Ceq_workspace[0], &proc_control_B.b_x_o[0], 130U * sizeof(real_T));
    for (proc_control_B.row = 0; proc_control_B.row < 139; proc_control_B.row++)
    {
      for (proc_control_B.col = 0; proc_control_B.col < 130; proc_control_B.col
           ++) {
        JacEqTrans_workspace_data[proc_control_B.row + ldJE * proc_control_B.col]
          = proc_control_B.JacEqTrans_tmp[139 * proc_control_B.col +
          proc_control_B.row];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_next_next_next_next_next_b_,
    Cineq_workspace_data, ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_a(Ceq_workspace);
    if (status == 1) {
      proc_control_B.allFinite = true;
      proc_control_B.row = -1;
      proc_control_B.col = iJI_col;
      proc_control_B.col_end = (iJI_col + obj_next_next_next_next_next_b_) - 1;
      while (proc_control_B.allFinite && (proc_control_B.col <=
              proc_control_B.col_end)) {
        proc_control_B.row = -1;
        while (proc_control_B.allFinite && (proc_control_B.row + 2 <= 139)) {
          proc_control_B.idx_mat = ((proc_control_B.col - 1) * ldJI +
            proc_control_B.row) + 1;
          proc_control_B.allFinite = ((!rtIsInf
            (JacIneqTrans_workspace_data[proc_control_B.idx_mat])) && (!rtIsNaN
            (JacIneqTrans_workspace_data[proc_control_B.idx_mat])));
          proc_control_B.row++;
        }

        proc_control_B.col++;
      }

      if (!proc_control_B.allFinite) {
        proc_control_B.idx_mat = (proc_control_B.col - 2) * ldJI +
          proc_control_B.row;
        if (rtIsNaN(JacIneqTrans_workspace_data[proc_control_B.idx_mat])) {
          status = -3;
        } else if (JacIneqTrans_workspace_data[proc_control_B.idx_mat] < 0.0) {
          status = -1;
        } else {
          status = -2;
        }
      } else {
        proc_control_B.row = -1;
        proc_control_B.col = -1;
        while (proc_control_B.allFinite && (proc_control_B.col + 2 <= 130)) {
          proc_control_B.row = -1;
          while (proc_control_B.allFinite && (proc_control_B.row + 2 <= 139)) {
            proc_control_B.col_end = ((proc_control_B.col + 1) * ldJE +
              proc_control_B.row) + 1;
            proc_control_B.allFinite = ((!rtIsInf
              (JacEqTrans_workspace_data[proc_control_B.col_end])) && (!rtIsNaN
              (JacEqTrans_workspace_data[proc_control_B.col_end])));
            proc_control_B.row++;
          }

          proc_control_B.col++;
        }

        if (!proc_control_B.allFinite) {
          proc_control_B.col_end = ldJE * proc_control_B.col +
            proc_control_B.row;
          if (rtIsNaN(JacEqTrans_workspace_data[proc_control_B.col_end])) {
            status = -3;
          } else if (JacEqTrans_workspace_data[proc_control_B.col_end] < 0.0) {
            status = -1;
          } else {
            status = -2;
          }
        }
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::evalObjAndConstrAndDerivatives(int32_T
  obj_next_next_next_next_next_b_, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *obj_next_next_next_next_next_ne, const s_xJmQKnCTzvv6aUzMZcIqsF_proc_T
  *obj_next_next_next_next_next__0, const real_T x[139], real_T
  grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0, real_T
  Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T iJI_col,
  int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE, real_T *fval,
  int32_T *status)
{
  computeObjectiveAndUserGradient(obj_next_next_next_next_next__0, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_next_next_next_next_next_b_,
      obj_next_next_next_next_next_ne, x, Cineq_workspace_data, ineq0,
      Ceq_workspace, JacIneqTrans_workspace_data, iJI_col, ldJI,
      JacEqTrans_workspace_data, ldJE);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_co_modifyOverheadPhaseOne_
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj)
{
  int32_T d;
  int32_T idxEq;
  idxEq = static_cast<uint16_T>(obj->sizes[0]);
  for (int32_T idx = 0; idx < idxEq; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (int32_T idx = 0; idx < 130; idx++) {
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  idxEq = static_cast<uint16_T>(obj->sizes[2]);
  for (int32_T idx = 0; idx < idxEq; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  idxEq = obj->isActiveIdx[2];
  d = obj->nActiveConstr;
  for (int32_T idx = idxEq; idx <= d; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  idxEq = obj->isActiveIdx[4] - 1;
  if (obj->nWConstr[4] > 0) {
    d = obj->sizesNormal[4] - 1;
    for (int32_T idx = d; idx >= 0; idx--) {
      int32_T tmp;
      tmp = idxEq + idx;
      obj->isActiveConstr.data[tmp] = obj->isActiveConstr.data[tmp - 1];
    }
  } else {
    obj->isActiveConstr.data[(obj->isActiveIdx[4] + obj->sizesNormal[4]) - 1] =
      false;
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_setProblemType(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T PROBLEM_TYPE)
{
  int32_T c;
  int32_T colOffsetATw;
  int32_T colOffsetAineq;
  int32_T idxUpperExisting;
  int32_T idx_col;
  int32_T offsetEq1;
  int32_T offsetEq2;
  int32_T tmp;
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 139;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      idxUpperExisting = obj->isActiveIdx[4] - 1;
      offsetEq1 = static_cast<uint16_T>(obj->sizesNormal[4]);
      for (colOffsetATw = 0; colOffsetATw < offsetEq1; colOffsetATw++) {
        offsetEq2 = idxUpperExisting + colOffsetATw;
        obj->isActiveConstr.data[(obj->isActiveIdxNormal[4] + colOffsetATw) - 1]
          = obj->isActiveConstr.data[offsetEq2];
        obj->isActiveConstr.data[offsetEq2] = false;
      }
    }

    for (offsetEq2 = 0; offsetEq2 < 5; offsetEq2++) {
      obj->sizes[offsetEq2] = obj->sizesNormal[offsetEq2];
    }

    for (offsetEq2 = 0; offsetEq2 < 6; offsetEq2++) {
      obj->isActiveIdx[offsetEq2] = obj->isActiveIdxNormal[offsetEq2];
    }
    break;

   case 1:
    obj->nVar = 140;
    obj->mConstr = obj->mConstrOrig + 1;
    for (offsetEq2 = 0; offsetEq2 < 5; offsetEq2++) {
      obj->sizes[offsetEq2] = obj->sizesPhaseOne[offsetEq2];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    for (offsetEq2 = 0; offsetEq2 < 6; offsetEq2++) {
      obj->isActiveIdx[offsetEq2] = obj->isActiveIdxPhaseOne[offsetEq2];
    }
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (offsetEq2 = 0; offsetEq2 < 5; offsetEq2++) {
      obj->sizes[offsetEq2] = obj->sizesRegularized[offsetEq2];
    }

    if (obj->probType != 4) {
      idxUpperExisting = obj->sizes[2] + 269;
      offsetEq1 = obj->sizes[2] + 139;
      c = static_cast<uint16_T>(obj->sizes[0]);
      for (idx_col = 0; idx_col < c; idx_col++) {
        colOffsetATw = obj->ldA * idx_col;
        memset(&obj->ATwset.data[colOffsetATw + 139], 0, static_cast<uint32_T>
               (((obj->nVar + colOffsetATw) - colOffsetATw) - 139) * sizeof
               (real_T));
      }

      idx_col = static_cast<uint16_T>(obj->sizes[2]);
      for (colOffsetATw = 0; colOffsetATw < idx_col; colOffsetATw++) {
        colOffsetAineq = obj->ldA * colOffsetATw - 1;
        for (c = 140; c <= colOffsetATw + 139; c++) {
          obj->Aineq.data[c + colOffsetAineq] = 0.0;
        }

        obj->Aineq.data[(colOffsetATw + colOffsetAineq) + 140] = -1.0;
        offsetEq2 = obj->nVar;
        for (c = colOffsetATw + 141; c <= offsetEq2; c++) {
          obj->Aineq.data[c + colOffsetAineq] = 0.0;
        }
      }

      for (idx_col = 0; idx_col < 130; idx_col++) {
        colOffsetAineq = obj->ldA * idx_col - 1;
        colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA + colOffsetAineq;
        if (offsetEq1 >= 140) {
          memset(&obj->Aeq.data[colOffsetAineq + 140], 0, static_cast<uint32_T>
                 (((offsetEq1 + colOffsetAineq) - colOffsetAineq) - 139) *
                 sizeof(real_T));
        }

        if (offsetEq1 >= 140) {
          memset(&obj->ATwset.data[colOffsetATw + 140], 0, static_cast<uint32_T>
                 (((offsetEq1 + colOffsetATw) - colOffsetATw) - 139) * sizeof
                 (real_T));
        }

        c = idxUpperExisting + idx_col;
        if (idxUpperExisting - 129 <= c - 130) {
          memset(&obj->Aeq.data[(idxUpperExisting + colOffsetAineq) + -129], 0,
                 static_cast<uint32_T>(((((c - 130) + colOffsetAineq) -
                    idxUpperExisting) - colOffsetAineq) + 130) * sizeof(real_T));
        }

        if (idxUpperExisting - 129 <= c - 130) {
          memset(&obj->ATwset.data[(idxUpperExisting + colOffsetATw) + -129], 0,
                 static_cast<uint32_T>(((((c - 130) + colOffsetATw) -
                    idxUpperExisting) - colOffsetATw) + 130) * sizeof(real_T));
        }

        offsetEq2 = c + colOffsetAineq;
        obj->Aeq.data[offsetEq2 - 129] = -1.0;
        tmp = c + colOffsetATw;
        obj->ATwset.data[tmp - 129] = -1.0;
        if (c - 128 <= idxUpperExisting) {
          memset(&obj->Aeq.data[(c - 128) + colOffsetAineq], 0,
                 static_cast<uint32_T>((((idxUpperExisting + colOffsetAineq) -
                    (c - 128)) - colOffsetAineq) + 1) * sizeof(real_T));
        }

        if (c - 128 <= idxUpperExisting) {
          memset(&obj->ATwset.data[(c - 128) + colOffsetATw], 0,
                 static_cast<uint32_T>((((idxUpperExisting + colOffsetATw) - (c
                     - 128)) - colOffsetATw) + 1) * sizeof(real_T));
        }

        if (idxUpperExisting + 1 <= c) {
          memset(&obj->Aeq.data[(idxUpperExisting + colOffsetAineq) + 1], 0,
                 static_cast<uint32_T>(((c + colOffsetAineq) - idxUpperExisting)
                  - colOffsetAineq) * sizeof(real_T));
        }

        if (idxUpperExisting + 1 <= c) {
          memset(&obj->ATwset.data[(idxUpperExisting + colOffsetATw) + 1], 0,
                 static_cast<uint32_T>(((c + colOffsetATw) - idxUpperExisting) -
                  colOffsetATw) * sizeof(real_T));
        }

        obj->Aeq.data[offsetEq2 + 1] = 1.0;
        obj->ATwset.data[tmp + 1] = 1.0;
        if (c + 2 <= obj->nVar) {
          memset(&obj->Aeq.data[(c + 2) + colOffsetAineq], 0,
                 static_cast<uint32_T>((((obj->nVar + colOffsetAineq) - (c + 2))
                   - colOffsetAineq) + 1) * sizeof(real_T));
        }

        if (c + 2 <= obj->nVar) {
          memset(&obj->ATwset.data[(c + 2) + colOffsetATw], 0,
                 static_cast<uint32_T>((((obj->nVar + colOffsetATw) - (c + 2)) -
                   colOffsetATw) + 1) * sizeof(real_T));
        }
      }

      idxUpperExisting = 139;
      offsetEq1 = obj->sizesNormal[3] + 1;
      offsetEq2 = obj->sizesRegularized[3];
      for (colOffsetATw = offsetEq1; colOffsetATw <= offsetEq2; colOffsetATw++)
      {
        idxUpperExisting++;
        obj->indexLB.data[colOffsetATw - 1] = idxUpperExisting;
      }

      if (obj->nWConstr[4] > 0) {
        idxUpperExisting = static_cast<uint16_T>(obj->sizesRegularized[4]);
        for (colOffsetATw = 0; colOffsetATw < idxUpperExisting; colOffsetATw++)
        {
          obj->isActiveConstr.data[obj->isActiveIdxRegularized[4] + colOffsetATw]
            = obj->isActiveConstr.data[(obj->isActiveIdx[4] + colOffsetATw) - 1];
        }
      }

      idxUpperExisting = obj->isActiveIdx[4];
      offsetEq1 = obj->isActiveIdxRegularized[4] - 1;
      if (idxUpperExisting <= offsetEq1) {
        memset(&obj->isActiveConstr.data[idxUpperExisting + -1], 0, static_cast<
               uint32_T>((offsetEq1 - idxUpperExisting) + 1) * sizeof(boolean_T));
      }

      idxUpperExisting = obj->sizes[2] + 399;
      memset(&obj->lb.data[139], 0, static_cast<uint32_T>(idxUpperExisting - 139)
             * sizeof(real_T));
      offsetEq1 = obj->isActiveIdx[2];
      offsetEq2 = obj->nActiveConstr;
      for (idxUpperExisting = offsetEq1; idxUpperExisting <= offsetEq2;
           idxUpperExisting++) {
        colOffsetATw = (idxUpperExisting - 1) * obj->ldA - 1;
        if (obj->Wid.data[idxUpperExisting - 1] == 3) {
          c = obj->Wlocalidx.data[idxUpperExisting - 1];
          if (c + 138 >= 140) {
            memset(&obj->ATwset.data[colOffsetATw + 140], 0,
                   static_cast<uint32_T>((((c + 138) + colOffsetATw) -
                     colOffsetATw) - 139) * sizeof(real_T));
          }

          obj->ATwset.data[(c + colOffsetATw) + 139] = -1.0;
          if (c + 140 <= obj->nVar) {
            memset(&obj->ATwset.data[(c + 140) + colOffsetATw], 0,
                   static_cast<uint32_T>((((obj->nVar + colOffsetATw) - (c + 140))
                     - colOffsetATw) + 1) * sizeof(real_T));
          }
        } else {
          memset(&obj->ATwset.data[colOffsetATw + 140], 0, static_cast<uint32_T>
                 (((obj->nVar + colOffsetATw) - colOffsetATw) - 139) * sizeof
                 (real_T));
        }
      }
    }

    for (offsetEq2 = 0; offsetEq2 < 6; offsetEq2++) {
      obj->isActiveIdx[offsetEq2] = obj->isActiveIdxRegularized[offsetEq2];
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (offsetEq2 = 0; offsetEq2 < 5; offsetEq2++) {
      obj->sizes[offsetEq2] = obj->sizesRegPhaseOne[offsetEq2];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    for (offsetEq2 = 0; offsetEq2 < 6; offsetEq2++) {
      obj->isActiveIdx[offsetEq2] = obj->isActiveIdxRegPhaseOne[offsetEq2];
    }
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_initActiveSet(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj)
{
  int32_T colOffsetATw;
  int32_T f;
  int32_T iATw0;
  int32_T iAeq0;
  int32_T idx;
  int32_T idxFillStart;
  proc_control_setProblemType(obj, 3);
  idxFillStart = obj->isActiveIdx[2];
  if (idxFillStart <= obj->mConstrMax) {
    memset(&obj->isActiveConstr.data[idxFillStart + -1], 0, static_cast<uint32_T>
           ((obj->mConstrMax - idxFillStart) + 1) * sizeof(boolean_T));
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  idxFillStart = static_cast<uint16_T>(obj->sizes[0]);
  for (idx = 0; idx < idxFillStart; idx++) {
    obj->Wid.data[idx] = 1;
    obj->Wlocalidx.data[idx] = idx + 1;
    obj->isActiveConstr.data[idx] = true;
    colOffsetATw = obj->ldA * idx;
    iATw0 = static_cast<uint8_T>(obj->indexFixed.data[idx] - 1);
    if (iATw0 - 1 >= 0) {
      memset(&obj->ATwset.data[colOffsetATw], 0, static_cast<uint32_T>((iATw0 +
               colOffsetATw) - colOffsetATw) * sizeof(real_T));
    }

    obj->ATwset.data[(obj->indexFixed.data[idx] + colOffsetATw) - 1] = 1.0;
    iATw0 = obj->indexFixed.data[idx] + 1;
    if (iATw0 <= obj->nVar) {
      memset(&obj->ATwset.data[(iATw0 + colOffsetATw) + -1], 0, static_cast<
             uint32_T>((((obj->nVar + colOffsetATw) - iATw0) - colOffsetATw) + 1)
             * sizeof(real_T));
    }

    obj->bwset.data[idx] = obj->ub.data[obj->indexFixed.data[idx] - 1];
  }

  for (idx = 0; idx < 130; idx++) {
    colOffsetATw = obj->sizes[0] + idx;
    obj->Wid.data[colOffsetATw] = 2;
    obj->Wlocalidx.data[colOffsetATw] = idx + 1;
    obj->isActiveConstr.data[colOffsetATw] = true;
    iAeq0 = obj->ldA * idx;
    iATw0 = obj->ldA * colOffsetATw;
    f = obj->nVar - 1;
    for (idxFillStart = 0; idxFillStart <= f; idxFillStart++) {
      obj->ATwset.data[iATw0 + idxFillStart] = obj->Aeq.data[iAeq0 +
        idxFillStart];
    }

    obj->bwset.data[colOffsetATw] = obj->beq[idx];
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_contro_factoryConstruct_p5(int32_T maxRows, int32_T
  maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[],
  int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T obj_jpvt_size[1],
  int32_T *obj_mrows, int32_T *obj_ncols, int32_T obj_tau_size[1], int32_T
  *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows;
  if (loop_ub - 1 >= 0) {
    memset(&obj_Q_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  obj_jpvt_size[0] = maxCols;
  if (maxCols - 1 >= 0) {
    memset(&obj_jpvt_data[0], 0, static_cast<uint32_T>(maxCols) * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows <= maxCols) {
    obj_tau_size[0] = maxRows;
  } else {
    obj_tau_size[0] = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_contr_factoryConstruct_p52(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_computeGradLag(real_T workspace_data[], int32_T
  ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T b;
  int32_T f;
  int32_T g;
  int32_T iL0;
  int32_T ix;
  int32_T tmp;
  memcpy(&workspace_data[0], &grad_data[0], static_cast<uint16_T>(nVar) * sizeof
         (real_T));
  b = static_cast<uint16_T>(mFixed);
  for (iL0 = 0; iL0 < b; iL0++) {
    ix = finiteFixed_data[iL0];
    workspace_data[ix - 1] += lambda_data[iL0];
  }

  ix = mFixed;
  f = ldA * 129 + 1;
  for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
    g = (iL0 + nVar) - 1;
    for (b = iL0; b <= g; b++) {
      tmp = b - iL0;
      workspace_data[tmp] += AeqTrans_data[b - 1] * lambda_data[ix];
    }

    ix++;
  }

  if (mIneq != 0) {
    ix = mFixed + 130;
    f = (mIneq - 1) * ldA + 1;
    for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
      g = (iL0 + nVar) - 1;
      for (b = iL0; b <= g; b++) {
        tmp = b - iL0;
        workspace_data[tmp] += AineqTrans_data[b - 1] * lambda_data[ix];
      }

      ix++;
    }
  }

  iL0 = (mFixed + mIneq) + 130;
  ix = static_cast<uint16_T>(mLB);
  for (b = 0; b < ix; b++) {
    f = finiteLB_data[b];
    workspace_data[f - 1] -= lambda_data[iL0 + b];
  }

  if (static_cast<uint16_T>(mLB) - 1 >= 0) {
    iL0 += static_cast<uint16_T>(mLB);
  }

  ix = static_cast<uint16_T>(mUB);
  for (b = 0; b < ix; b++) {
    f = finiteUB_data[b];
    workspace_data[f - 1] += lambda_data[iL0 + b];
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_con_computePrimalFeasError(const real_T x[139],
  int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
  cEq[130], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[139],
  const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  real_T u1;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (int32_T idx = 0; idx < 130; idx++) {
    u1 = fabs(cEq[idx]);
    if ((!(feasError >= u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (int32_T idx = 0; idx < mIneq; idx++) {
    u1 = cIneq_data[idx];
    if ((!(feasError >= u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  mIneq = static_cast<uint16_T>(mLB);
  for (int32_T idx = 0; idx < mIneq; idx++) {
    int32_T finiteLB;
    finiteLB = finiteLB_data[idx];
    u1 = lb[finiteLB - 1] - x[finiteLB - 1];
    if ((!(feasError >= u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  mIneq = static_cast<uint16_T>(mUB);
  for (int32_T idx = 0; idx < mIneq; idx++) {
    u1 = x[finiteUB_data[idx] - 1] - (rtInf);
    if ((!(feasError >= u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  return feasError;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  idx = 0;
  exitg1 = false;
  while ((!exitg1) && (idx <= static_cast<uint16_T>(nVar) - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[idx])) && (!rtIsNaN(gradLag_data[idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      real_T u1;
      u1 = fabs(gradLag_data[idx]);
      if ((!(*val >= u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      idx++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_saveJacobian(s_KPwpEZDfdzkqudEdVwjGjF_proc_T
  *obj, int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  int32_T b;
  int32_T iCol;
  int32_T iCol_old;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = 0;
  b = mIneq - ineqCol0;
  for (int32_T idx_col = 0; idx_col <= b; idx_col++) {
    int32_T c;
    int32_T loop_ub_tmp;
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (loop_ub_tmp - 1 >= 0) {
      memcpy(&proc_control_B.y_data[0], &obj->JacCineqTrans_old.data[0],
             static_cast<uint32_T>(loop_ub_tmp) * sizeof(real_T));
    }

    c = static_cast<uint16_T>(nVar);
    for (int32_T k = 0; k < c; k++) {
      proc_control_B.y_data[iCol_old + k] = JacCineqTrans_data[iCol + k];
    }

    if (loop_ub_tmp - 1 >= 0) {
      memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_B.y_data[0],
             static_cast<uint32_T>(loop_ub_tmp) * sizeof(real_T));
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = 0;
  iCol_old = 0;
  b = static_cast<uint16_T>(nVar);
  for (int32_T idx_col = 0; idx_col < 130; idx_col++) {
    for (int32_T k = 0; k < b; k++) {
      obj->JacCeqTrans_old.data[iCol_old + k] = JacCeqTrans_data[iCol + k];
    }

    iCol += ldJ;
    iCol_old = iCol;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_control_computeComplError(const int32_T
  fscales_lineq_constraint_size[1], const int32_T fscales_cineq_constraint_size
  [1], const real_T xCurrent[139], int32_T mIneq, const real_T cIneq_data[],
  const int32_T finiteLB_data[], int32_T mLB, const real_T lb[139], const
  int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  int32_T mLinIneq;
  nlpComplError = 0.0;
  mLinIneq = fscales_lineq_constraint_size[0];
  if ((mIneq + mLB) + mUB > 0) {
    real_T lbDelta;
    real_T lbLambda;
    real_T u0;
    int32_T iLineq0;
    int32_T idx;
    for (idx = 0; idx < mLinIneq; idx++) {
      lbDelta = cIneq_data[idx];
      lbLambda = lambda_data[(iL0 + idx) - 1];
      u0 = fabs(lbDelta);
      if ((!(u0 <= lbLambda)) && (!rtIsNaN(lbLambda))) {
        u0 = lbLambda;
      }

      lbDelta = fabs(lbDelta * lbLambda);
      if ((lbDelta <= u0) || rtIsNaN(u0)) {
        u0 = lbDelta;
      }

      if ((!(nlpComplError >= u0)) && (!rtIsNaN(u0))) {
        nlpComplError = u0;
      }
    }

    iLineq0 = (iL0 + fscales_lineq_constraint_size[0]) - 1;
    idx = fscales_cineq_constraint_size[0];
    for (int32_T b_idx = 0; b_idx < idx; b_idx++) {
      lbDelta = cIneq_data[mLinIneq + b_idx];
      lbLambda = lambda_data[iLineq0 + b_idx];
      u0 = fabs(lbDelta);
      if ((!(u0 <= lbLambda)) && (!rtIsNaN(lbLambda))) {
        u0 = lbLambda;
      }

      lbDelta = fabs(lbDelta * lbLambda);
      if ((lbDelta <= u0) || rtIsNaN(u0)) {
        u0 = lbDelta;
      }

      if ((!(nlpComplError >= u0)) && (!rtIsNaN(u0))) {
        nlpComplError = u0;
      }
    }

    iLineq0 = (iL0 + mIneq) - 1;
    mLinIneq = iLineq0 + mLB;
    idx = static_cast<uint16_T>(mLB);
    for (int32_T b_idx = 0; b_idx < idx; b_idx++) {
      int32_T finiteLB;
      finiteLB = finiteLB_data[b_idx];
      lbDelta = xCurrent[finiteLB - 1] - lb[finiteLB - 1];
      lbLambda = lambda_data[iLineq0 + b_idx];
      u0 = fabs(lbDelta);
      if ((!(u0 <= lbLambda)) && (!rtIsNaN(lbLambda))) {
        u0 = lbLambda;
      }

      lbDelta = fabs(lbDelta * lbLambda);
      if ((lbDelta <= u0) || rtIsNaN(u0)) {
        u0 = lbDelta;
      }

      if ((!(nlpComplError >= u0)) && (!rtIsNaN(u0))) {
        nlpComplError = u0;
      }
    }

    iLineq0 = static_cast<uint16_T>(mUB);
    for (idx = 0; idx < iLineq0; idx++) {
      lbDelta = lambda_data[mLinIneq + idx];
      u0 = (rtInf) - xCurrent[finiteUB_data[idx] - 1];
      if ((u0 <= lbDelta) || rtIsNaN(lbDelta)) {
        lbLambda = u0;
      } else {
        lbLambda = lbDelta;
      }

      u0 = fabs(u0 * lbDelta);
      if ((u0 <= lbLambda) || rtIsNaN(lbLambda)) {
        lbLambda = u0;
      }

      if ((!(nlpComplError >= lbLambda)) && (!rtIsNaN(lbLambda))) {
        nlpComplError = lbLambda;
      }
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_computeGradLag_l(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T f;
  int32_T g;
  int32_T i;
  int32_T iL0;
  int32_T ix;
  int32_T tmp;
  memcpy(&workspace_data[0], &grad_data[0], static_cast<uint16_T>(nVar) * sizeof
         (real_T));
  i = static_cast<uint16_T>(mFixed);
  for (iL0 = 0; iL0 < i; iL0++) {
    ix = finiteFixed_data[iL0];
    workspace_data[ix - 1] += lambda_data[iL0];
  }

  ix = mFixed;
  f = ldA * 129 + 1;
  for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
    g = (iL0 + nVar) - 1;
    for (i = iL0; i <= g; i++) {
      tmp = i - iL0;
      workspace_data[tmp] += AeqTrans_data[i - 1] * lambda_data[ix];
    }

    ix++;
  }

  if (mIneq != 0) {
    ix = mFixed + 130;
    f = (mIneq - 1) * ldA + 1;
    for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
      g = (iL0 + nVar) - 1;
      for (i = iL0; i <= g; i++) {
        tmp = i - iL0;
        workspace_data[tmp] += AineqTrans_data[i - 1] * lambda_data[ix];
      }

      ix++;
    }
  }

  iL0 = (mFixed + mIneq) + 130;
  ix = static_cast<uint16_T>(mLB);
  for (i = 0; i < ix; i++) {
    f = finiteLB_data[i];
    workspace_data[f - 1] -= lambda_data[iL0 + i];
  }

  if (static_cast<uint16_T>(mLB) - 1 >= 0) {
    iL0 += static_cast<uint16_T>(mLB);
  }

  ix = static_cast<uint16_T>(mUB);
  for (i = 0; i < ix; i++) {
    f = finiteUB_data[i];
    workspace_data[f - 1] += lambda_data[iL0 + i];
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_con_computeDualFeasError_n(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  idx = 0;
  exitg1 = false;
  while ((!exitg1) && (idx <= static_cast<uint16_T>(nVar) - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[idx])) && (!rtIsNaN(gradLag_data[idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      real_T u1;
      u1 = fabs(gradLag_data[idx]);
      if ((!(*val >= u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      idx++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_c_updateWorkingSetForNewQP(const real_T xk[139],
  s_PAtG1CW05sRYOWrqzwRQyC_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[139], int32_T mUB, int32_T mFixed)
{
  real_T tmp[2];
  int32_T i;
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T idx = 0; idx < 130; idx++) {
    WorkingSet->beq[idx] = -cEq[idx];
    WorkingSet->bwset.data[mFixed + idx] = WorkingSet->beq[idx];
    for (i = 0; i < nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  i = static_cast<uint16_T>(mIneq);
  iw0 = (static_cast<uint16_T>(mIneq) / 2) << 1;
  iEq0 = iw0 - 2;
  for (int32_T idx = 0; idx <= iEq0; idx += 2) {
    _mm_storeu_pd(&WorkingSet->bineq.data[idx], _mm_mul_pd(_mm_loadu_pd
      (&cIneq_data[idx]), _mm_set1_pd(-1.0)));
  }

  for (int32_T idx = iw0; idx < i; idx++) {
    WorkingSet->bineq.data[idx] = -cIneq_data[idx];
  }

  i = static_cast<uint16_T>(mLB);
  for (int32_T idx = 0; idx < i; idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[idx] - 1] = -lb
      [WorkingSet->indexLB.data[idx] - 1] + xk[WorkingSet->indexLB.data[idx] - 1];
  }

  i = static_cast<uint16_T>(mUB);
  for (int32_T idx = 0; idx < i; idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[idx] - 1];
  }

  i = static_cast<uint16_T>(mFixed);
  for (int32_T idx = 0; idx < i; idx++) {
    _mm_storeu_pd(&tmp[0], _mm_sub_pd(_mm_set1_pd((rtInf)), _mm_set1_pd
      (xk[WorkingSet->indexFixed.data[idx] - 1])));
    WorkingSet->ub.data[WorkingSet->indexFixed.data[idx] - 1] = tmp[0];
    WorkingSet->bwset.data[idx] = tmp[1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    iw0 = WorkingSet->nActiveConstr;
    for (int32_T idx = mFixed + 131; idx <= iw0; idx++) {
      switch (WorkingSet->Wid.data[idx - 1]) {
       case 4:
        WorkingSet->bwset.data[idx - 1] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[idx - 1] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[idx - 1] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[idx - 1] - 1] - 1];
        break;

       default:
        {
          i = WorkingSet->Wlocalidx.data[idx - 1];
          WorkingSet->bwset.data[idx - 1] = WorkingSet->bineq.data[i - 1];
          if ((mNonlinIneq > 0) && (i > mIneq - mNonlinIneq)) {
            int32_T g;
            int32_T ix0;
            iEq0 = (idx - 1) * WorkingSet->ldA;
            ix0 = (i - 1) * WorkingSet->ldA;
            g = static_cast<uint16_T>(nVar);
            for (i = 0; i < g; i++) {
              WorkingSet->ATwset.data[iEq0 + i] = WorkingSet->Aineq.data[ix0 + i];
            }
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0)
{
  for (int32_T k = 0; k < n; k++) {
    real_T temp;
    int32_T temp_tmp;
    int32_T tmp;
    temp_tmp = (ix0 + k) - 1;
    temp = x_data[temp_tmp];
    tmp = (iy0 + k) - 1;
    x_data[temp_tmp] = x_data[tmp];
    x_data[tmp] = temp;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_control_xnrm2_a(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k = ix0; k <= kend; k++) {
        real_T absxk;
        absxk = fabs(x_data[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_control_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  __m128d tmp;
  real_T a;
  real_T tau;
  real_T xnorm;
  int32_T d;
  int32_T knt;
  int32_T scalarLB;
  int32_T vectorUB;
  int32_T vectorUB_tmp;
  tau = 0.0;
  if (n > 0) {
    xnorm = proc_control_xnrm2_a(n - 1, x_data, ix0);
    if (xnorm != 0.0) {
      xnorm = rt_hypotd_snf(*alpha1, xnorm);
      if (*alpha1 >= 0.0) {
        xnorm = -xnorm;
      }

      if (fabs(xnorm) < 1.0020841800044864E-292) {
        knt = 0;
        scalarLB = (ix0 + n) - 2;
        do {
          knt++;
          vectorUB = ((((scalarLB - ix0) + 1) / 2) << 1) + ix0;
          vectorUB_tmp = vectorUB - 2;
          for (d = ix0; d <= vectorUB_tmp; d += 2) {
            tmp = _mm_loadu_pd(&x_data[d - 1]);
            _mm_storeu_pd(&x_data[d - 1], _mm_mul_pd(tmp, _mm_set1_pd
              (9.9792015476736E+291)));
          }

          for (d = vectorUB; d <= scalarLB; d++) {
            x_data[d - 1] *= 9.9792015476736E+291;
          }

          xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((fabs(xnorm) < 1.0020841800044864E-292) && (knt < 20));

        xnorm = rt_hypotd_snf(*alpha1, proc_control_xnrm2_a(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          xnorm = -xnorm;
        }

        tau = (xnorm - *alpha1) / xnorm;
        a = 1.0 / (*alpha1 - xnorm);
        for (d = ix0; d <= vectorUB_tmp; d += 2) {
          tmp = _mm_loadu_pd(&x_data[d - 1]);
          _mm_storeu_pd(&x_data[d - 1], _mm_mul_pd(tmp, _mm_set1_pd(a)));
        }

        for (d = vectorUB; d <= scalarLB; d++) {
          x_data[d - 1] *= a;
        }

        for (d = 0; d < knt; d++) {
          xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = xnorm;
      } else {
        tau = (xnorm - *alpha1) / xnorm;
        a = 1.0 / (*alpha1 - xnorm);
        d = (ix0 + n) - 2;
        scalarLB = ((((d - ix0) + 1) / 2) << 1) + ix0;
        vectorUB = scalarLB - 2;
        for (knt = ix0; knt <= vectorUB; knt += 2) {
          tmp = _mm_loadu_pd(&x_data[knt - 1]);
          _mm_storeu_pd(&x_data[knt - 1], _mm_mul_pd(tmp, _mm_set1_pd(a)));
        }

        for (knt = scalarLB; knt <= d; knt++) {
          x_data[knt - 1] *= a;
        }

        *alpha1 = xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_j(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iy;
    if (n - 1 >= 0) {
      memset(&y_data[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));
    }

    iy = 0;
    b = (n - 1) * lda + ia0;
    for (int32_T b_iy = ia0; lda < 0 ? b_iy >= b : b_iy <= b; b_iy += lda) {
      real_T c;
      int32_T d;
      c = 0.0;
      d = (b_iy + m) - 1;
      for (int32_T iyend = b_iy; iyend <= d; iyend++) {
        c += x_data[((ix0 + iyend) - b_iy) - 1] * A_data[iyend - 1];
      }

      y_data[iy] += c;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgerc_a(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j = 0; j < n; j++) {
      real_T temp;
      temp = y_data[j];
      if (temp != 0.0) {
        int32_T b;
        temp *= alpha1;
        b = m + jA;
        for (int32_T ijA = jA; ijA < b; ijA++) {
          A_data[ijA - 1] += A_data[((ix0 + ijA) - jA) - 1] * temp;
        }
      }

      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  int32_T coltop;
  int32_T exitg1;
  int32_T ia;
  int32_T lastc;
  int32_T lastv;
  boolean_T exitg2;
  if (tau != 0.0) {
    lastv = m;
    lastc = iv0 + m;
    while ((lastv > 0) && (C_data[lastc - 2] == 0.0)) {
      lastv--;
      lastc--;
    }

    lastc = n;
    exitg2 = false;
    while ((!exitg2) && (lastc > 0)) {
      coltop = (lastc - 1) * ldc + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + lastv) - 1) {
          if (C_data[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    lastv = 0;
    lastc = 0;
  }

  if (lastv > 0) {
    proc_control_xgemv_j(lastv, lastc, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_xgerc_a(lastv, lastc, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  real_T b_atmp;
  real_T tau;
  int32_T i;
  int32_T ii;
  int32_T lda;
  int32_T loop_ub;
  int32_T mmi;
  lda = A_size[0];
  loop_ub = A_size[1];
  if (loop_ub - 1 >= 0) {
    memset(&proc_control_B.work_data[0], 0, static_cast<uint32_T>(loop_ub) *
           sizeof(real_T));
  }

  loop_ub = static_cast<uint16_T>(nfxd);
  for (i = 0; i < loop_ub; i++) {
    ii = i * lda + i;
    mmi = m - i;
    if (i + 1 < m) {
      b_atmp = A_data[ii];
      tau = proc_control_xzlarfg(mmi, &b_atmp, A_data, ii + 2);
      tau_data[i] = tau;
      A_data[ii] = b_atmp;
    } else {
      tau = 0.0;
      tau_data[i] = 0.0;
    }

    if (i + 1 < n) {
      b_atmp = A_data[ii];
      A_data[ii] = 1.0;
      proc_control_xzlarf(mmi, (n - i) - 1, ii + 1, tau, A_data, (ii + lda) + 1,
                          lda, proc_control_B.work_data);
      A_data[ii] = b_atmp;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  real_T s;
  real_T smax;
  real_T vn1;
  int32_T ii;
  int32_T ii_tmp;
  int32_T itemp;
  int32_T j;
  int32_T ma;
  int32_T minmn;
  int32_T mmi;
  int32_T nmi;
  int32_T pvt;
  ma = A_size[0];
  if (m <= n) {
    minmn = m;
  } else {
    minmn = n;
  }

  pvt = A_size[1];
  if (pvt - 1 >= 0) {
    memset(&proc_control_B.work_data_b[0], 0, static_cast<uint32_T>(pvt) *
           sizeof(real_T));
  }

  if (pvt - 1 >= 0) {
    memset(&proc_control_B.vn1_data[0], 0, static_cast<uint32_T>(pvt) * sizeof
           (real_T));
  }

  if (pvt - 1 >= 0) {
    memset(&proc_control_B.vn2_data[0], 0, static_cast<uint32_T>(pvt) * sizeof
           (real_T));
  }

  for (j = nfxd + 1; j <= n; j++) {
    vn1 = proc_control_xnrm2_a(m - nfxd, A_data, ((j - 1) * ma + nfxd) + 1);
    proc_control_B.vn1_data[j - 1] = vn1;
    proc_control_B.vn2_data[j - 1] = vn1;
  }

  for (j = nfxd + 1; j <= minmn; j++) {
    ii_tmp = (j - 1) * ma;
    ii = (ii_tmp + j) - 1;
    nmi = n - j;
    mmi = m - j;
    if (nmi + 1 < 1) {
      itemp = -2;
    } else {
      itemp = -1;
      if (nmi + 1 > 1) {
        smax = fabs(proc_control_B.vn1_data[j - 1]);
        for (pvt = 2; pvt <= nmi + 1; pvt++) {
          s = fabs(proc_control_B.vn1_data[(j + pvt) - 2]);
          if (s > smax) {
            itemp = pvt - 2;
            smax = s;
          }
        }
      }
    }

    pvt = j + itemp;
    if (pvt + 1 != j) {
      proc_control_xswap(m, A_data, pvt * ma + 1, ii_tmp + 1);
      itemp = jpvt_data[pvt];
      jpvt_data[pvt] = jpvt_data[j - 1];
      jpvt_data[j - 1] = itemp;
      proc_control_B.vn1_data[pvt] = proc_control_B.vn1_data[j - 1];
      proc_control_B.vn2_data[pvt] = proc_control_B.vn2_data[j - 1];
    }

    if (j < m) {
      smax = A_data[ii];
      vn1 = proc_control_xzlarfg(mmi + 1, &smax, A_data, ii + 2);
      tau_data[j - 1] = vn1;
      A_data[ii] = smax;
    } else {
      vn1 = 0.0;
      tau_data[j - 1] = 0.0;
    }

    if (j < n) {
      smax = A_data[ii];
      A_data[ii] = 1.0;
      proc_control_xzlarf(mmi + 1, nmi, ii + 1, vn1, A_data, (ii + ma) + 1, ma,
                          proc_control_B.work_data_b);
      A_data[ii] = smax;
    }

    for (pvt = j + 1; pvt <= n; pvt++) {
      ii = (pvt - 1) * ma + j;
      vn1 = proc_control_B.vn1_data[pvt - 1];
      if (vn1 != 0.0) {
        smax = fabs(A_data[ii - 1]) / vn1;
        smax = 1.0 - smax * smax;
        if (smax < 0.0) {
          smax = 0.0;
        }

        s = vn1 / proc_control_B.vn2_data[pvt - 1];
        s = s * s * smax;
        if (s <= 1.4901161193847656E-8) {
          if (j < m) {
            vn1 = proc_control_xnrm2_a(mmi, A_data, ii + 1);
            proc_control_B.vn1_data[pvt - 1] = vn1;
            proc_control_B.vn2_data[pvt - 1] = vn1;
          } else {
            proc_control_B.vn1_data[pvt - 1] = 0.0;
            proc_control_B.vn2_data[pvt - 1] = 0.0;
          }
        } else {
          proc_control_B.vn1_data[pvt - 1] = vn1 * sqrt(smax);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  tau_size[1])
{
  int32_T b_j;
  int32_T minmn;
  int32_T nfxd;
  static const int32_T offsets[4] = { 0, 1, 2, 3 };

  int32_T ma_tmp;
  ma_tmp = A_size[0];
  if (m <= n) {
    minmn = m;
  } else {
    minmn = n;
  }

  if (A_size[0] <= A_size[1]) {
    nfxd = A_size[0];
  } else {
    nfxd = A_size[1];
  }

  tau_size[0] = nfxd;
  if (nfxd - 1 >= 0) {
    memset(&tau_data[0], 0, static_cast<uint32_T>(nfxd) * sizeof(real_T));
  }

  if (minmn < 1) {
    ma_tmp = (n / 4) << 2;
    minmn = ma_tmp - 4;
    for (b_j = 0; b_j <= minmn; b_j += 4) {
      _mm_storeu_si128((__m128i *)&jpvt_data[b_j], _mm_add_epi32(_mm_add_epi32
        (_mm_set1_epi32(b_j), _mm_loadu_si128((const __m128i *)&offsets[0])),
        _mm_set1_epi32(1)));
    }

    for (b_j = ma_tmp; b_j < n; b_j++) {
      jpvt_data[b_j] = b_j + 1;
    }
  } else {
    nfxd = -1;
    for (b_j = 0; b_j < n; b_j++) {
      if (jpvt_data[b_j] != 0) {
        nfxd++;
        if (b_j + 1 != nfxd + 1) {
          proc_control_xswap(m, A_data, b_j * ma_tmp + 1, nfxd * ma_tmp + 1);
          jpvt_data[b_j] = jpvt_data[nfxd];
          jpvt_data[nfxd] = b_j + 1;
        } else {
          jpvt_data[b_j] = b_j + 1;
        }
      } else {
        jpvt_data[b_j] = b_j + 1;
      }
    }

    if (nfxd + 1 <= minmn) {
      nfxd++;
    } else {
      nfxd = minmn;
    }

    proc_control_qrf(A_data, A_size, m, n, nfxd, tau_data);
    if (nfxd < minmn) {
      proc_control_qrpf(A_data, A_size, m, n, nfxd, tau_data, jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factorQRE(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  int32_T b;
  int32_T idx;
  int32_T ix0;
  int32_T iy0;
  int32_T k;
  boolean_T guard1;
  idx = mrows * ncols;
  guard1 = false;
  if (idx > 0) {
    for (idx = 0; idx < ncols; idx++) {
      ix0 = ldA * idx;
      iy0 = obj->ldq * idx;
      b = static_cast<uint16_T>(mrows);
      for (k = 0; k < b; k++) {
        obj->QR.data[iy0 + k] = A_data[ix0 + k];
      }
    }

    guard1 = true;
  } else if (idx == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, obj->tau.size);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xorgqr_l(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  __m128d tmp;
  int32_T c;
  int32_T i;
  int32_T ia;
  int32_T itau;
  int32_T loop_ub;
  int32_T scalarLB;
  int32_T vectorUB;
  if (n >= 1) {
    for (itau = k; itau < n; itau++) {
      ia = itau * lda;
      memset(&A_data[ia], 0, static_cast<uint32_T>((m + ia) - ia) * sizeof
             (real_T));
      A_data[ia + itau] = 1.0;
    }

    itau = k - 1;
    loop_ub = A_size[1];
    if (loop_ub - 1 >= 0) {
      memset(&proc_control_B.work_data_l[0], 0, static_cast<uint32_T>(loop_ub) *
             sizeof(real_T));
    }

    for (i = k; i >= 1; i--) {
      ia = (i - 1) * lda + i;
      if (i < n) {
        A_data[ia - 1] = 1.0;
        proc_control_xzlarf((m - i) + 1, n - i, ia, tau_data[itau], A_data, ia +
                            lda, lda, proc_control_B.work_data_l);
      }

      if (i < m) {
        c = (ia + m) - i;
        scalarLB = ((((c - ia) / 2) << 1) + ia) + 1;
        vectorUB = scalarLB - 2;
        for (loop_ub = ia + 1; loop_ub <= vectorUB; loop_ub += 2) {
          tmp = _mm_loadu_pd(&A_data[loop_ub - 1]);
          _mm_storeu_pd(&A_data[loop_ub - 1], _mm_mul_pd(tmp, _mm_set1_pd
            (-tau_data[itau])));
        }

        for (loop_ub = scalarLB; loop_ub <= c; loop_ub++) {
          A_data[loop_ub - 1] *= -tau_data[itau];
        }
      }

      A_data[ia - 1] = 1.0 - tau_data[itau];
      c = static_cast<uint16_T>(i - 1);
      for (loop_ub = 0; loop_ub < c; loop_ub++) {
        A_data[(ia - loop_ub) - 2] = 0.0;
      }

      itau--;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  if (WorkingSet_nActiveConstr != 0) {
    int32_T currentMplier;
    int32_T idxOffset;
    int32_T mAll;
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    if (static_cast<uint16_T>(mAll + 1) - 1 >= 0) {
      memcpy(&workspace_data[0], &lambda_data[0], static_cast<uint16_T>(mAll + 1)
             * sizeof(real_T));
    }

    if (mAll >= 0) {
      memset(&lambda_data[0], 0, static_cast<uint32_T>(mAll + 1) * sizeof(real_T));
    }

    currentMplier = 0;
    mAll = 0;
    while ((mAll + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[mAll] <=
            2)) {
      if (WorkingSet_Wid_data[mAll] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[mAll]) - 2] =
        workspace_data[currentMplier];
      currentMplier++;
      mAll++;
    }

    while (mAll + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[mAll]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[mAll]) - 2] =
        workspace_data[currentMplier];
      currentMplier++;
      mAll++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T fscales_lineq_constraint_size[1], const int32_T
  fscales_cineq_constraint_size[1], s_PAtG1CW05sRYOWrqzwRQyC_proc_T *WorkingSet,
  s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState, s_o1KzuWoPqzc62zOgqamCNH_proc_T
  *QRManager, const real_T lb[139])
{
  real_T nlpComplErrorTmp;
  real_T s;
  real_T smax;
  real_T tmp;
  real_T tmp_0;
  int32_T b_n;
  int32_T c_ix;
  int32_T iQR0;
  int32_T idx_max;
  int32_T idx_max_tmp;
  int32_T ix;
  int32_T nVar;
  int32_T rankR;
  boolean_T dxTooSmall;
  boolean_T exitg1;
  boolean_T guard1;
  boolean_T isFeasible;
  nVar = WorkingSet->nVar;
  idx_max_tmp = static_cast<uint16_T>((((WorkingSet->sizes[0] +
    WorkingSet->sizes[2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 130);
  if (idx_max_tmp - 1 >= 0) {
    memcpy(&TrialState->lambdaStopTest.data[0], &TrialState->lambdasqp.data[0],
           static_cast<uint32_T>(idx_max_tmp) * sizeof(real_T));
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  if (WorkingSet->nVar < 1) {
    idx_max = 0;
  } else {
    idx_max = 1;
    if (WorkingSet->nVar > 1) {
      smax = fabs(TrialState->grad.data[0]);
      for (ix = 2; ix <= nVar; ix++) {
        s = fabs(TrialState->grad.data[ix - 1]);
        if (s > smax) {
          idx_max = ix;
          smax = s;
        }
      }
    }
  }

  smax = fabs(TrialState->grad.data[idx_max - 1]);
  if ((smax <= 1.0) || rtIsNaN(smax)) {
    smax = 1.0;
  }

  if (rtIsInf(smax)) {
    smax = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    if ((MeritFunction->nlpPrimalFeasError <= 1.0) || rtIsNaN
        (MeritFunction->nlpPrimalFeasError)) {
      MeritFunction->feasRelativeFactor = 1.0;
    } else {
      MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
    }
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &Flags->gradOK, &MeritFunction->nlpDualFeasError);
  if (!Flags->gradOK) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control_computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    if ((MeritFunction->nlpDualFeasError >= MeritFunction->nlpComplError) ||
        rtIsNaN(MeritFunction->nlpComplError)) {
      MeritFunction->firstOrderOpt = MeritFunction->nlpDualFeasError;
    } else {
      MeritFunction->firstOrderOpt = MeritFunction->nlpComplError;
    }

    if (TrialState->sqpIterations > 1) {
      proc_control_computeGradLag_l(memspace->workspace_float.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_n(WorkingSet->nVar,
        memspace->workspace_float.data, &dxTooSmall, &s);
      nlpComplErrorTmp = proc_control_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      if ((s < MeritFunction->nlpDualFeasError) && (nlpComplErrorTmp <
           MeritFunction->nlpComplError)) {
        MeritFunction->nlpDualFeasError = s;
        MeritFunction->nlpComplError = nlpComplErrorTmp;
        if (s >= nlpComplErrorTmp) {
          MeritFunction->firstOrderOpt = s;
        } else {
          MeritFunction->firstOrderOpt = nlpComplErrorTmp;
        }

        if (idx_max_tmp - 1 >= 0) {
          memcpy(&TrialState->lambdaStopTest.data[0],
                 &TrialState->lambdaStopTestPrev.data[0], static_cast<uint32_T>
                 (idx_max_tmp) * sizeof(real_T));
        }
      } else if (idx_max_tmp - 1 >= 0) {
        memcpy(&TrialState->lambdaStopTestPrev.data[0],
               &TrialState->lambdaStopTest.data[0], static_cast<uint32_T>
               (idx_max_tmp) * sizeof(real_T));
      }
    } else if (idx_max_tmp - 1 >= 0) {
      memcpy(&TrialState->lambdaStopTestPrev.data[0],
             &TrialState->lambdaStopTest.data[0], static_cast<uint32_T>
             (idx_max_tmp) * sizeof(real_T));
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 * smax) &&
        (MeritFunction->nlpComplError <= 0.02 * smax)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          dxTooSmall = true;
          ix = 0;
          exitg1 = false;
          while ((!exitg1) && (ix <= static_cast<uint16_T>(WorkingSet->nVar) - 1))
          {
            s = fabs(TrialState->xstarsqp[ix]);
            if ((s <= 1.0) || rtIsNaN(s)) {
              s = 1.0;
            }

            if (0.1 * s <= fabs(TrialState->delta_x.data[ix])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              ix++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else if (WorkingSet->nActiveConstr == 0) {
              Flags->done = true;
              TrialState->sqpExitFlag = 2;
            } else {
              proc_c_updateWorkingSetForNewQP(TrialState->xstarsqp, WorkingSet,
                WorkingSet->sizes[2], TrialState->mNonlinIneq,
                TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
              if (WorkingSet->nActiveConstr - 1 >= 0) {
                memset(&TrialState->lambda.data[0], 0, static_cast<uint32_T>
                       ((WorkingSet->nActiveConstr - 1) + 1) * sizeof(real_T));
              }

              proc_control_factorQRE(QRManager, WorkingSet->ATwset.data,
                WorkingSet->nVar, WorkingSet->nActiveConstr, WorkingSet->ldA);
              rankR = QRManager->minRowCol;
              for (idx_max = 0; idx_max < rankR; idx_max++) {
                iQR0 = QRManager->ldq * idx_max + idx_max;
                b_n = QRManager->mrows - idx_max;
                if (b_n - 2 >= 0) {
                  memcpy(&QRManager->Q.data[iQR0 + 1], &QRManager->QR.data[iQR0
                         + 1], static_cast<uint32_T>(((b_n + iQR0) - iQR0) - 1) *
                         sizeof(real_T));
                }
              }

              proc_control_xorgqr_l(QRManager->mrows, QRManager->mrows,
                                    QRManager->minRowCol, QRManager->Q.data,
                                    QRManager->Q.size, QRManager->ldq,
                                    QRManager->tau.data);
              rankR = QRManager->ldq;
              memset(&memspace->workspace_float.data[0], 0, static_cast<uint16_T>
                     (WorkingSet->nVar) * sizeof(real_T));
              iQR0 = 0;
              b_n = (WorkingSet->nVar - 1) * QRManager->ldq + 1;
              for (idx_max = 1; rankR < 0 ? idx_max >= b_n : idx_max <= b_n;
                   idx_max += rankR) {
                s = 0.0;
                c_ix = (idx_max + nVar) - 1;
                for (ix = idx_max; ix <= c_ix; ix++) {
                  s += QRManager->Q.data[ix - 1] * TrialState->grad.data[ix -
                    idx_max];
                }

                memspace->workspace_float.data[iQR0] -= s;
                iQR0++;
              }

              if (WorkingSet->nVar >= WorkingSet->nActiveConstr) {
                c_ix = WorkingSet->nVar;
              } else {
                c_ix = WorkingSet->nActiveConstr;
              }

              s = static_cast<real_T>(c_ix) * 2.2204460492503131E-16;
              if (s >= 1.4901161193847656E-8) {
                s = 1.4901161193847656E-8;
              }

              s *= fabs(QRManager->QR.data[0]);
              if (WorkingSet->nVar <= WorkingSet->nActiveConstr) {
                ix = WorkingSet->nVar;
              } else {
                ix = WorkingSet->nActiveConstr;
              }

              rankR = 0;
              nVar = 0;
              while ((rankR < ix) && (fabs(QRManager->QR.data[nVar]) > s)) {
                rankR++;
                nVar = (nVar + QRManager->ldq) + 1;
              }

              if (rankR != 0) {
                for (nVar = rankR; nVar >= 1; nVar--) {
                  iQR0 = ((nVar - 1) * QRManager->ldq + nVar) - 2;
                  memspace->workspace_float.data[nVar - 1] /= QRManager->
                    QR.data[iQR0 + 1];
                  for (idx_max = 0; idx_max <= nVar - 2; idx_max++) {
                    c_ix = (nVar - idx_max) - 2;
                    memspace->workspace_float.data[c_ix] -=
                      memspace->workspace_float.data[nVar - 1] *
                      QRManager->QR.data[iQR0 - idx_max];
                  }
                }
              }

              if (WorkingSet->nActiveConstr <= ix) {
                ix = WorkingSet->nActiveConstr;
              }

              for (nVar = 0; nVar < ix; nVar++) {
                TrialState->lambda.data[QRManager->jpvt.data[nVar] - 1] =
                  memspace->workspace_float.data[nVar];
              }

              proc_control_sortLambdaQP(TrialState->lambda.data,
                WorkingSet->nActiveConstr, WorkingSet->sizes,
                WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
              proc_control_computeGradLag_l(memspace->workspace_float.data,
                WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
                WorkingSet->sizes[2], WorkingSet->Aineq.data,
                WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
                WorkingSet->sizes[0], WorkingSet->indexLB.data,
                WorkingSet->sizes[3], WorkingSet->indexUB.data,
                WorkingSet->sizes[4], TrialState->lambda.data);
              proc_con_computeDualFeasError_n(WorkingSet->nVar,
                memspace->workspace_float.data, &isFeasible, &s);
              nlpComplErrorTmp = proc_control_computeComplError
                (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                 TrialState->xstarsqp, WorkingSet->sizes[2],
                 TrialState->cIneq.data, WorkingSet->indexLB.data,
                 WorkingSet->sizes[3], lb, WorkingSet->indexUB.data,
                 WorkingSet->sizes[4], TrialState->lambda.data,
                 WorkingSet->sizes[0] + 131);
              if ((s >= nlpComplErrorTmp) || rtIsNaN(nlpComplErrorTmp)) {
                tmp = s;
              } else {
                tmp = nlpComplErrorTmp;
              }

              if ((MeritFunction->nlpDualFeasError >=
                   MeritFunction->nlpComplError) || rtIsNaN
                  (MeritFunction->nlpComplError)) {
                tmp_0 = MeritFunction->nlpDualFeasError;
              } else {
                tmp_0 = MeritFunction->nlpComplError;
              }

              if (tmp <= tmp_0) {
                MeritFunction->nlpDualFeasError = s;
                MeritFunction->nlpComplError = nlpComplErrorTmp;
                MeritFunction->firstOrderOpt = tmp;
                if (idx_max_tmp - 1 >= 0) {
                  memcpy(&TrialState->lambdaStopTest.data[0],
                         &TrialState->lambda.data[0], static_cast<uint32_T>
                         (idx_max_tmp) * sizeof(real_T));
                }
              }

              if ((MeritFunction->nlpDualFeasError <= 0.02 * smax) &&
                  (MeritFunction->nlpComplError <= 0.02 * smax)) {
                TrialState->sqpExitFlag = 1;
              } else {
                TrialState->sqpExitFlag = 2;
              }

              Flags->done = true;
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 13900) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
boolean_T proc_control::proc_control_BFGSUpdate(int32_T nvar, real_T Bk[19321],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  __m128d tmp;
  __m128d tmp_0;
  real_T curvatureS;
  real_T dotSY;
  int32_T b;
  int32_T b_ix;
  int32_T b_jA;
  int32_T b_tmp;
  int32_T ix;
  int32_T jy;
  int32_T vectorUB;
  boolean_T success;
  dotSY = 0.0;
  if (nvar >= 1) {
    b = static_cast<uint16_T>(nvar);
    for (ix = 0; ix < b; ix++) {
      dotSY += sk_data[ix] * yk_data[ix];
    }
  }

  b_tmp = static_cast<uint16_T>(nvar);
  memset(&workspace_data[0], 0, static_cast<uint16_T>(nvar) * sizeof(real_T));
  ix = 0;
  jy = (nvar - 1) * 139 + 1;
  for (b = 1; b <= jy; b += 139) {
    b_ix = (b + nvar) - 1;
    for (b_jA = b; b_jA <= b_ix; b_jA++) {
      vectorUB = b_jA - b;
      workspace_data[vectorUB] += Bk[b_jA - 1] * sk_data[ix];
    }

    ix++;
  }

  curvatureS = 0.0;
  if (nvar >= 1) {
    for (b = 0; b < b_tmp; b++) {
      curvatureS += workspace_data[b] * sk_data[b];
    }
  }

  if (dotSY < 0.2 * curvatureS) {
    dotSY = 0.8 * curvatureS / (curvatureS - dotSY);
    jy = (static_cast<uint16_T>(nvar) / 2) << 1;
    vectorUB = jy - 2;
    for (ix = 0; ix <= vectorUB; ix += 2) {
      tmp_0 = _mm_loadu_pd(&yk_data[ix]);
      _mm_storeu_pd(&yk_data[ix], _mm_mul_pd(_mm_set1_pd(dotSY), tmp_0));
    }

    for (ix = jy; ix < b_tmp; ix++) {
      yk_data[ix] *= dotSY;
    }

    if (!(1.0 - dotSY == 0.0)) {
      jy = (nvar / 2) << 1;
      vectorUB = jy - 2;
      for (b = 0; b <= vectorUB; b += 2) {
        tmp_0 = _mm_loadu_pd(&workspace_data[b]);
        tmp = _mm_loadu_pd(&yk_data[b]);
        _mm_storeu_pd(&yk_data[b], _mm_add_pd(_mm_mul_pd(tmp_0, _mm_set1_pd(1.0
          - dotSY)), tmp));
      }

      for (b = jy; b < nvar; b++) {
        yk_data[b] += (1.0 - dotSY) * workspace_data[b];
      }
    }

    dotSY = 0.0;
    if (nvar >= 1) {
      for (ix = 0; ix < b_tmp; ix++) {
        dotSY += sk_data[ix] * yk_data[ix];
      }
    }
  }

  success = ((curvatureS > 2.2204460492503131E-16) && (dotSY >
              2.2204460492503131E-16));
  if (success) {
    curvatureS = -1.0 / curvatureS;
    if (!(curvatureS == 0.0)) {
      ix = 1;
      for (b = 0; b < b_tmp; b++) {
        if (workspace_data[b] != 0.0) {
          real_T temp;
          temp = workspace_data[b] * curvatureS;
          b_ix = nvar + ix;
          jy = (((b_ix - ix) / 2) << 1) + ix;
          vectorUB = jy - 2;
          for (b_jA = ix; b_jA <= vectorUB; b_jA += 2) {
            tmp_0 = _mm_loadu_pd(&workspace_data[b_jA - ix]);
            tmp = _mm_loadu_pd(&Bk[b_jA - 1]);
            _mm_storeu_pd(&Bk[b_jA - 1], _mm_add_pd(_mm_mul_pd(tmp_0,
              _mm_set1_pd(temp)), tmp));
          }

          for (b_jA = jy; b_jA < b_ix; b_jA++) {
            Bk[b_jA - 1] += workspace_data[b_jA - ix] * temp;
          }
        }

        ix += 139;
      }
    }

    dotSY = 1.0 / dotSY;
    if (!(dotSY == 0.0)) {
      b_jA = 1;
      for (ix = 0; ix < b_tmp; ix++) {
        curvatureS = yk_data[ix];
        if (curvatureS != 0.0) {
          curvatureS *= dotSY;
          b_ix = nvar + b_jA;
          jy = (((b_ix - b_jA) / 2) << 1) + b_jA;
          vectorUB = jy - 2;
          for (b = b_jA; b <= vectorUB; b += 2) {
            tmp_0 = _mm_loadu_pd(&yk_data[b - b_jA]);
            tmp = _mm_loadu_pd(&Bk[b - 1]);
            _mm_storeu_pd(&Bk[b - 1], _mm_add_pd(_mm_mul_pd(tmp_0, _mm_set1_pd
              (curvatureS)), tmp));
          }

          for (b = jy; b < b_ix; b++) {
            Bk[b - 1] += yk_data[b - b_jA] * curvatureS;
          }
        }

        b_jA += 139;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factorQRE_f(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, obj->tau.size);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_countsort(int32_T x_data[], int32_T xLen,
  int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  if ((xLen > 1) && (xMax > xMin)) {
    int32_T idxEnd;
    int32_T idxEnd_tmp;
    int32_T idxStart;
    int32_T maxOffset_tmp;
    idxEnd_tmp = xMax - xMin;
    if (idxEnd_tmp >= 0) {
      memset(&workspace_data[0], 0, static_cast<uint32_T>(idxEnd_tmp + 1) *
             sizeof(int32_T));
    }

    maxOffset_tmp = idxEnd_tmp - 1;
    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 2; idxStart <= maxOffset_tmp + 2; idxStart++) {
      workspace_data[idxStart - 1] += workspace_data[idxStart - 2];
    }

    idxStart = 1;
    idxEnd = workspace_data[0];
    for (int32_T maxOffset = 0; maxOffset <= maxOffset_tmp; maxOffset++) {
      for (idxEnd_tmp = idxStart; idxEnd_tmp <= idxEnd; idxEnd_tmp++) {
        x_data[idxEnd_tmp - 1] = maxOffset + xMin;
      }

      idxStart = workspace_data[maxOffset] + 1;
      idxEnd = workspace_data[maxOffset + 1];
    }

    for (int32_T maxOffset = idxStart; maxOffset <= idxEnd; maxOffset++) {
      x_data[maxOffset - 1] = xMax;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_removeConstr(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  if (idx_global < obj->nActiveConstr) {
    int32_T b;
    obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
    obj->Wlocalidx.data[idx_global - 1] = obj->Wlocalidx.data[obj->nActiveConstr
      - 1];
    b = static_cast<uint16_T>(obj->nVar);
    for (int32_T idx = 0; idx < b; idx++) {
      obj->ATwset.data[idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
        [(obj->nActiveConstr - 1) * obj->ldA + idx];
    }

    obj->bwset.data[idx_global - 1] = obj->bwset.data[obj->nActiveConstr - 1];
  }

  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S148>/NLMPC'
int32_T proc_control::proc_control_RemoveDependentEq_
  (s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
   *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager)
{
  real_T qtb;
  real_T tol;
  int32_T c_tmp_tmp;
  int32_T ix;
  int32_T mTotalWorkingEq;
  int32_T mTotalWorkingEq_tmp_tmp;
  int32_T mWorkingFixed;
  int32_T nDepInd;
  int32_T nVar;
  int32_T totalRank;
  boolean_T exitg1;
  mWorkingFixed = workingset->nWConstr[0];
  mTotalWorkingEq_tmp_tmp = workingset->nWConstr[0] + workingset->nWConstr[1];
  nDepInd = 0;
  if (mTotalWorkingEq_tmp_tmp > 0) {
    c_tmp_tmp = static_cast<uint16_T>(workingset->nVar);
    for (totalRank = 0; totalRank < mTotalWorkingEq_tmp_tmp; totalRank++) {
      for (nVar = 0; nVar < c_tmp_tmp; nVar++) {
        qrmanager->QR.data[totalRank + qrmanager->ldq * nVar] =
          workingset->ATwset.data[workingset->ldA * totalRank + nVar];
      }
    }

    nVar = mTotalWorkingEq_tmp_tmp - workingset->nVar;
    if (nVar > 0) {
      nDepInd = nVar;
    }

    memset(&qrmanager->jpvt.data[0], 0, static_cast<uint16_T>(workingset->nVar) *
           sizeof(int32_T));
    proc_control_factorQRE_f(qrmanager, mTotalWorkingEq_tmp_tmp,
      workingset->nVar);
    tol = 100.0 * static_cast<real_T>(workingset->nVar) * 2.2204460492503131E-16;
    if (workingset->nVar <= mTotalWorkingEq_tmp_tmp) {
      totalRank = workingset->nVar;
    } else {
      totalRank = mTotalWorkingEq_tmp_tmp;
    }

    totalRank += (totalRank - 1) * qrmanager->ldq;
    while ((totalRank > 0) && (fabs(qrmanager->QR.data[totalRank - 1]) < tol)) {
      totalRank = (totalRank - qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      ix = qrmanager->minRowCol;
      for (nVar = 0; nVar < ix; nVar++) {
        totalRank = qrmanager->ldq * nVar + nVar;
        mTotalWorkingEq = qrmanager->mrows - nVar;
        if (mTotalWorkingEq - 2 >= 0) {
          memcpy(&qrmanager->Q.data[totalRank + 1], &qrmanager->
                 QR.data[totalRank + 1], static_cast<uint32_T>(((mTotalWorkingEq
                    + totalRank) - totalRank) - 1) * sizeof(real_T));
        }
      }

      proc_control_xorgqr_l(qrmanager->mrows, qrmanager->mrows,
                            qrmanager->minRowCol, qrmanager->Q.data,
                            qrmanager->Q.size, qrmanager->ldq,
                            qrmanager->tau.data);
      mTotalWorkingEq = 0;
      exitg1 = false;
      while ((!exitg1) && (mTotalWorkingEq <= nDepInd - 1)) {
        ix = ((mTotalWorkingEq_tmp_tmp - mTotalWorkingEq) - 1) * qrmanager->ldq;
        qtb = 0.0;
        for (nVar = 0; nVar < mTotalWorkingEq_tmp_tmp; nVar++) {
          qtb += qrmanager->Q.data[ix + nVar] * workingset->bwset.data[nVar];
        }

        if (fabs(qtb) >= tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          mTotalWorkingEq++;
        }
      }
    }

    if (nDepInd > 0) {
      for (totalRank = 0; totalRank < mTotalWorkingEq_tmp_tmp; totalRank++) {
        mTotalWorkingEq = qrmanager->ldq * totalRank;
        ix = workingset->ldA * totalRank;
        for (nVar = 0; nVar < c_tmp_tmp; nVar++) {
          qrmanager->QR.data[mTotalWorkingEq + nVar] = workingset->
            ATwset.data[ix + nVar];
        }
      }

      for (nVar = 0; nVar < mWorkingFixed; nVar++) {
        qrmanager->jpvt.data[nVar] = 1;
      }

      nVar = workingset->nWConstr[0] + 1;
      if (nVar <= mTotalWorkingEq_tmp_tmp) {
        memset(&qrmanager->jpvt.data[nVar + -1], 0, static_cast<uint32_T>
               ((mTotalWorkingEq_tmp_tmp - nVar) + 1) * sizeof(int32_T));
      }

      proc_control_factorQRE_f(qrmanager, workingset->nVar,
        mTotalWorkingEq_tmp_tmp);
      for (mWorkingFixed = 0; mWorkingFixed < nDepInd; mWorkingFixed++) {
        memspace->workspace_int.data[mWorkingFixed] = qrmanager->jpvt.data
          [(mTotalWorkingEq_tmp_tmp - nDepInd) + mWorkingFixed];
      }

      proc_control_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, mTotalWorkingEq_tmp_tmp);
      for (mTotalWorkingEq = nDepInd; mTotalWorkingEq >= 1; mTotalWorkingEq--) {
        totalRank = workingset->nWConstr[0] + workingset->nWConstr[1];
        if (totalRank != 0) {
          nVar = memspace->workspace_int.data[mTotalWorkingEq - 1];
          if (nVar <= totalRank) {
            if ((totalRank == workingset->nActiveConstr) || (totalRank == nVar))
            {
              workingset->mEqRemoved++;
              workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
                workingset->Wlocalidx.data[nVar - 1];
              proc_control_removeConstr(workingset, nVar);
            } else {
              workingset->mEqRemoved++;
              mTotalWorkingEq_tmp_tmp = workingset->Wid.data[nVar - 1] - 1;
              mWorkingFixed = workingset->Wlocalidx.data[nVar - 1];
              workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
                mWorkingFixed;
              workingset->isActiveConstr.data[(workingset->
                isActiveIdx[mTotalWorkingEq_tmp_tmp] + mWorkingFixed) - 2] =
                false;
              workingset->Wid.data[nVar - 1] = workingset->Wid.data[totalRank -
                1];
              workingset->Wlocalidx.data[nVar - 1] = workingset->
                Wlocalidx.data[totalRank - 1];
              for (mWorkingFixed = 0; mWorkingFixed < c_tmp_tmp; mWorkingFixed++)
              {
                workingset->ATwset.data[mWorkingFixed + workingset->ldA * (nVar
                  - 1)] = workingset->ATwset.data[(totalRank - 1) *
                  workingset->ldA + mWorkingFixed];
              }

              workingset->bwset.data[nVar - 1] = workingset->
                bwset.data[totalRank - 1];
              workingset->Wid.data[totalRank - 1] = workingset->
                Wid.data[workingset->nActiveConstr - 1];
              workingset->Wlocalidx.data[totalRank - 1] =
                workingset->Wlocalidx.data[workingset->nActiveConstr - 1];
              for (mWorkingFixed = 0; mWorkingFixed < c_tmp_tmp; mWorkingFixed++)
              {
                workingset->ATwset.data[mWorkingFixed + workingset->ldA *
                  (totalRank - 1)] = workingset->ATwset.data
                  [(workingset->nActiveConstr - 1) * workingset->ldA +
                  mWorkingFixed];
              }

              workingset->bwset.data[totalRank - 1] = workingset->
                bwset.data[workingset->nActiveConstr - 1];
              workingset->nActiveConstr--;
              workingset->nWConstr[mTotalWorkingEq_tmp_tmp]--;
            }
          }
        }
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_contr_RemoveDependentIneq_
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *
   qrmanager, s_z8miyzCNLMZx998HtZciUB_proc_T *memspace)
{
  real_T tol;
  int32_T c;
  int32_T ix0;
  int32_T iy0;
  int32_T nActiveConstr;
  int32_T nActiveConstr_tmp;
  int32_T nDepIneq;
  int32_T nFixedConstr;
  int32_T nVar;
  nActiveConstr_tmp = workingset->nActiveConstr;
  nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  nVar = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    tol = 100.0 * static_cast<real_T>(workingset->nVar) * 2.2204460492503131E-16;
    for (nDepIneq = 0; nDepIneq < nFixedConstr; nDepIneq++) {
      qrmanager->jpvt.data[nDepIneq] = 1;
    }

    if (nFixedConstr + 1 <= workingset->nActiveConstr) {
      memset(&qrmanager->jpvt.data[nFixedConstr], 0, static_cast<uint32_T>
             (workingset->nActiveConstr - nFixedConstr) * sizeof(int32_T));
    }

    for (nDepIneq = 0; nDepIneq < nActiveConstr_tmp; nDepIneq++) {
      iy0 = qrmanager->ldq * nDepIneq;
      ix0 = workingset->ldA * nDepIneq;
      c = static_cast<uint16_T>(nVar);
      for (nActiveConstr = 0; nActiveConstr < c; nActiveConstr++) {
        qrmanager->QR.data[iy0 + nActiveConstr] = workingset->ATwset.data[ix0 +
          nActiveConstr];
      }
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    nDepIneq = 0;
    for (nActiveConstr = workingset->nActiveConstr - 1; nActiveConstr + 1 > nVar;
         nActiveConstr--) {
      nDepIneq++;
      memspace->workspace_int.data[nDepIneq - 1] = qrmanager->
        jpvt.data[nActiveConstr];
    }

    if (nActiveConstr + 1 <= workingset->nVar) {
      nVar = qrmanager->ldq * nActiveConstr + nActiveConstr;
      while ((nActiveConstr + 1 > nFixedConstr) && (fabs(qrmanager->QR.data[nVar])
              < tol)) {
        nDepIneq++;
        memspace->workspace_int.data[nDepIneq - 1] = qrmanager->
          jpvt.data[nActiveConstr];
        nActiveConstr--;
        nVar = (nVar - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, nDepIneq,
      memspace->workspace_sort.data, nFixedConstr + 1, workingset->nActiveConstr);
    for (nFixedConstr = nDepIneq; nFixedConstr >= 1; nFixedConstr--) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[nFixedConstr - 1]);
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgeqrf_e(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T tau_size[1])
{
  int32_T loop_ub;
  int32_T minmn;
  if (m <= n) {
    minmn = m;
  } else {
    minmn = n;
  }

  if (A_size[0] <= A_size[1]) {
    loop_ub = A_size[0];
  } else {
    loop_ub = A_size[1];
  }

  tau_size[0] = loop_ub;
  if (loop_ub - 1 >= 0) {
    memset(&tau_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  if (minmn >= 1) {
    proc_control_qrf(A_data, A_size, m, n, minmn, tau_data);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factorQR_a(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  int32_T b;
  int32_T idx;
  int32_T ix0;
  int32_T iy0;
  int32_T k;
  static const int32_T offsets[4] = { 0, 1, 2, 3 };

  boolean_T guard1;
  idx = mrows * ncols;
  guard1 = false;
  if (idx > 0) {
    for (idx = 0; idx < ncols; idx++) {
      ix0 = ldA * idx;
      iy0 = obj->ldq * idx;
      b = static_cast<uint16_T>(mrows);
      for (k = 0; k < b; k++) {
        obj->QR.data[iy0 + k] = A_data[ix0 + k];
      }
    }

    guard1 = true;
  } else if (idx == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    k = (ncols / 4) << 2;
    ix0 = k - 4;
    for (idx = 0; idx <= ix0; idx += 4) {
      _mm_storeu_si128((__m128i *)&obj->jpvt.data[idx], _mm_add_epi32
                       (_mm_add_epi32(_mm_set1_epi32(idx), _mm_loadu_si128((
        const __m128i *)&offsets[0])), _mm_set1_epi32(1)));
    }

    for (idx = k; idx < ncols; idx++) {
      obj->jpvt.data[idx] = idx + 1;
    }

    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqrf_e(obj->QR.data, obj->QR.size, mrows, ncols,
                          obj->tau.data, obj->tau.size);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factorQR(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  int32_T b;
  int32_T idx;
  static const int32_T offsets[4] = { 0, 1, 2, 3 };

  int32_T scalarLB;
  int32_T vectorUB;
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  b = static_cast<uint16_T>(ncols);
  scalarLB = (static_cast<uint16_T>(ncols) / 4) << 2;
  vectorUB = scalarLB - 4;
  for (idx = 0; idx <= vectorUB; idx += 4) {
    _mm_storeu_si128((__m128i *)&obj->jpvt.data[idx], _mm_add_epi32
                     (_mm_add_epi32(_mm_set1_epi32(idx), _mm_loadu_si128((const
      __m128i *)&offsets[0])), _mm_set1_epi32(1)));
  }

  for (idx = scalarLB; idx < b; idx++) {
    obj->jpvt.data[idx] = idx + 1;
  }

  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqrf_e(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                        obj->tau.size);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_jh(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T scalarLB;
    int32_T vectorUB;
    b = static_cast<uint16_T>(n);
    scalarLB = (static_cast<uint16_T>(n) / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_iy = 0; b_iy <= vectorUB; b_iy += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&y_data[b_iy]);
      _mm_storeu_pd(&y_data[b_iy], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
    }

    for (int32_T b_iy = scalarLB; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    scalarLB = 0;
    vectorUB = (n - 1) * lda + 1;
    for (int32_T b_iy = 1; lda < 0 ? b_iy >= vectorUB : b_iy <= vectorUB; b_iy +=
         lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (b = b_iy; b <= e; b++) {
        c += x_data[b - b_iy] * A_data[b - 1];
      }

      y_data[scalarLB] += c;
      scalarLB++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_con_maxConstraintViolation
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, const real_T x_data[])
{
  real_T u1;
  real_T v;
  int32_T g_tmp;
  int32_T k;
  if (obj->probType == 2) {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
               static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jh(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
                            x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        u1 = obj->maxConstrWorkspace.data[k] - x_data[k + 139];
        obj->maxConstrWorkspace.data[k] = u1;
        if ((!(v >= u1)) && (!rtIsNaN(u1))) {
          v = u1;
        }
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_xgemv_jh(139, 130, obj->Aeq.data, obj->ldA, x_data,
                          obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      g_tmp = obj->sizes[2] + k;
      obj->maxConstrWorkspace.data[k] = (obj->maxConstrWorkspace.data[k] -
        x_data[g_tmp + 139]) + x_data[g_tmp + 269];
      u1 = fabs(obj->maxConstrWorkspace.data[k]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  } else {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
               static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jh(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
                            x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        u1 = obj->maxConstrWorkspace.data[k];
        if ((!(v >= u1)) && (!rtIsNaN(u1))) {
          v = u1;
        }
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_xgemv_jh(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
                          obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      u1 = fabs(obj->maxConstrWorkspace.data[k]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[3] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[3]);
    for (k = 0; k < g_tmp; k++) {
      u1 = -x_data[obj->indexLB.data[k] - 1] - obj->lb.data[obj->indexLB.data[k]
        - 1];
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[4] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[4]);
    for (k = 0; k < g_tmp; k++) {
      u1 = x_data[obj->indexUB.data[k] - 1] - obj->ub.data[obj->indexUB.data[k]
        - 1];
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[0] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[0]);
    for (k = 0; k < g_tmp; k++) {
      u1 = fabs(x_data[obj->indexFixed.data[k] - 1] - obj->ub.data
                [obj->indexFixed.data[k] - 1]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  return v;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_jhn(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T scalarLB;
    int32_T vectorUB;
    b = static_cast<uint16_T>(n);
    scalarLB = (static_cast<uint16_T>(n) / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_iy = 0; b_iy <= vectorUB; b_iy += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&y_data[b_iy]);
      _mm_storeu_pd(&y_data[b_iy], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
    }

    for (int32_T b_iy = scalarLB; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    scalarLB = 0;
    vectorUB = (n - 1) * lda + 1;
    for (int32_T b_iy = 1; lda < 0 ? b_iy >= vectorUB : b_iy <= vectorUB; b_iy +=
         lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (b = b_iy; b <= e; b++) {
        c += x_data[((ix0 + b) - b_iy) - 1] * A_data[b - 1];
      }

      y_data[scalarLB] += c;
      scalarLB++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_c_maxConstraintViolation_a
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T u1;
  real_T v;
  int32_T g_tmp;
  int32_T k;
  if (obj->probType == 2) {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
               static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhn(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        u1 = obj->maxConstrWorkspace.data[k] - x_data[(ix0 + k) + 138];
        obj->maxConstrWorkspace.data[k] = u1;
        if ((!(v >= u1)) && (!rtIsNaN(u1))) {
          v = u1;
        }
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_xgemv_jhn(139, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      g_tmp = (ix0 + obj->sizes[2]) + k;
      obj->maxConstrWorkspace.data[k] = (obj->maxConstrWorkspace.data[k] -
        x_data[g_tmp + 138]) + x_data[g_tmp + 268];
      u1 = fabs(obj->maxConstrWorkspace.data[k]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  } else {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
               static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhn(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        u1 = obj->maxConstrWorkspace.data[k];
        if ((!(v >= u1)) && (!rtIsNaN(u1))) {
          v = u1;
        }
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_xgemv_jhn(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      u1 = fabs(obj->maxConstrWorkspace.data[k]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[3] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[3]);
    for (k = 0; k < g_tmp; k++) {
      u1 = -x_data[(ix0 + obj->indexLB.data[k]) - 2] - obj->lb.data
        [obj->indexLB.data[k] - 1];
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[4] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[4]);
    for (k = 0; k < g_tmp; k++) {
      u1 = x_data[(ix0 + obj->indexUB.data[k]) - 2] - obj->ub.data
        [obj->indexUB.data[k] - 1];
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[0] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[0]);
    for (k = 0; k < g_tmp; k++) {
      u1 = fabs(x_data[(ix0 + obj->indexFixed.data[k]) - 2] - obj->ub.data
                [obj->indexFixed.data[k] - 1]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  return v;
}

// Function for MATLAB Function: '<S148>/NLMPC'
boolean_T proc_control::proc_co_feasibleX0ForWorkingSet(real_T workspace_data[],
  const int32_T workspace_size[2], real_T xCurrent_data[],
  s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T
  *qrmanager)
{
  __m128d tmp;
  __m128d tmp_0;
  real_T c;
  real_T constrViolation_basicX;
  int32_T ar;
  int32_T c_tmp;
  int32_T e;
  int32_T exitg1;
  int32_T iAcol;
  int32_T iQR0;
  int32_T ix;
  int32_T iy;
  int32_T l;
  int32_T ldq;
  int32_T ldw;
  int32_T loop_ub_tmp;
  int32_T mWConstr;
  int32_T nVar;
  boolean_T nonDegenerateWset;
  mWConstr = workingset->nActiveConstr - 1;
  nVar = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    for (ix = 0; ix <= mWConstr; ix++) {
      workspace_data[ix] = workingset->bwset.data[ix];
      workspace_data[ix + workspace_size[0]] = workingset->bwset.data[ix];
    }

    ldw = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      iy = 0;
      iQR0 = (workingset->nActiveConstr - 1) * workingset->ldA + 1;
      for (ldq = 1; ldw < 0 ? ldq >= iQR0 : ldq <= iQR0; ldq += ldw) {
        c = 0.0;
        e = (ldq + nVar) - 1;
        for (ix = ldq; ix <= e; ix++) {
          c += workingset->ATwset.data[ix - 1] * xCurrent_data[ix - ldq];
        }

        workspace_data[iy] -= c;
        iy++;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      ldw = static_cast<uint16_T>(workingset->nVar);
      for (ix = 0; ix < ldw; ix++) {
        iy = qrmanager->ldq * ix;
        for (ldq = 0; ldq <= mWConstr; ldq++) {
          qrmanager->QR.data[ldq + iy] = workingset->ATwset.data[workingset->ldA
            * ldq + ix];
        }
      }

      proc_control_factorQR(qrmanager, workingset->nActiveConstr,
                            workingset->nVar);
      iy = qrmanager->minRowCol;
      for (ldq = 0; ldq < iy; ldq++) {
        iQR0 = qrmanager->ldq * ldq + ldq;
        ix = qrmanager->mrows - ldq;
        if (ix - 2 >= 0) {
          memcpy(&qrmanager->Q.data[iQR0 + 1], &qrmanager->QR.data[iQR0 + 1],
                 static_cast<uint32_T>(((ix + iQR0) - iQR0) - 1) * sizeof(real_T));
        }
      }

      proc_control_xorgqr_l(qrmanager->mrows, qrmanager->mrows,
                            qrmanager->minRowCol, qrmanager->Q.data,
                            qrmanager->Q.size, qrmanager->ldq,
                            qrmanager->tau.data);
      ldq = qrmanager->ldq;
      ldw = workspace_size[0];
      loop_ub_tmp = workspace_size[0] * workspace_size[1];
      if (loop_ub_tmp - 1 >= 0) {
        memcpy(&proc_control_B.B_data[0], &workspace_data[0],
               static_cast<uint32_T>(loop_ub_tmp) * sizeof(real_T));
      }

      for (ix = 0; ldw < 0 ? ix >= ldw : ix <= ldw; ix += ldw) {
        iQR0 = ix + nVar;
        for (iy = ix + 1; iy <= iQR0; iy++) {
          workspace_data[iy - 1] = 0.0;
        }
      }

      iy = -1;
      for (iQR0 = 0; ldw < 0 ? iQR0 >= ldw : iQR0 <= ldw; iQR0 += ldw) {
        iAcol = -1;
        ar = iQR0 + nVar;
        for (ix = iQR0 + 1; ix <= ar; ix++) {
          c = 0.0;
          for (e = 0; e <= mWConstr; e++) {
            c += qrmanager->Q.data[(e + iAcol) + 1] * proc_control_B.B_data[(e +
              iy) + 1];
          }

          workspace_data[ix - 1] += c;
          iAcol += ldq;
        }

        iy += ldw;
      }

      for (mWConstr = 0; mWConstr < 2; mWConstr++) {
        iy = ldw * mWConstr - 1;
        for (ix = nVar; ix >= 1; ix--) {
          iAcol = (ix - 1) * ldq;
          c_tmp = ix + iy;
          c = workspace_data[c_tmp];
          if (c != 0.0) {
            workspace_data[c_tmp] = c / qrmanager->QR.data[(ix + iAcol) - 1];
            ar = static_cast<uint16_T>(ix - 1);
            for (e = 0; e < ar; e++) {
              iQR0 = (e + iy) + 1;
              workspace_data[iQR0] -= qrmanager->QR.data[e + iAcol] *
                workspace_data[c_tmp];
            }
          }
        }
      }
    } else {
      proc_control_factorQR_a(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      iy = qrmanager->minRowCol;
      for (ldq = 0; ldq < iy; ldq++) {
        iQR0 = qrmanager->ldq * ldq + ldq;
        ix = qrmanager->mrows - ldq;
        if (ix - 2 >= 0) {
          memcpy(&qrmanager->Q.data[iQR0 + 1], &qrmanager->QR.data[iQR0 + 1],
                 static_cast<uint32_T>(((ix + iQR0) - iQR0) - 1) * sizeof(real_T));
        }
      }

      proc_control_xorgqr_l(qrmanager->mrows, qrmanager->minRowCol,
                            qrmanager->minRowCol, qrmanager->Q.data,
                            qrmanager->Q.size, qrmanager->ldq,
                            qrmanager->tau.data);
      ldq = qrmanager->ldq;
      ldw = workspace_size[0];
      for (iQR0 = 0; iQR0 < 2; iQR0++) {
        iy = ldw * iQR0;
        for (ix = 0; ix <= mWConstr; ix++) {
          iAcol = ldq * ix;
          c_tmp = ix + iy;
          c = workspace_data[c_tmp];
          ar = static_cast<uint16_T>(ix);
          for (e = 0; e < ar; e++) {
            c -= qrmanager->QR.data[e + iAcol] * workspace_data[e + iy];
          }

          workspace_data[c_tmp] = c / qrmanager->QR.data[ix + iAcol];
        }
      }

      ix = workspace_size[0] * workspace_size[1];
      if (ix - 1 >= 0) {
        memcpy(&proc_control_B.B_data[0], &workspace_data[0],
               static_cast<uint32_T>(ix) * sizeof(real_T));
      }

      for (ix = 0; ldw < 0 ? ix >= ldw : ix <= ldw; ix += ldw) {
        iQR0 = ix + nVar;
        for (iy = ix + 1; iy <= iQR0; iy++) {
          workspace_data[iy - 1] = 0.0;
        }
      }

      iAcol = 1;
      for (ix = 0; ldw < 0 ? ix >= ldw : ix <= ldw; ix += ldw) {
        ar = -1;
        loop_ub_tmp = iAcol + mWConstr;
        for (e = iAcol; e <= loop_ub_tmp; e++) {
          l = ix + nVar;
          c_tmp = ((((l - ix) / 2) << 1) + ix) + 1;
          iQR0 = c_tmp - 2;
          for (iy = ix + 1; iy <= iQR0; iy += 2) {
            tmp = _mm_loadu_pd(&qrmanager->Q.data[(ar + iy) - ix]);
            tmp_0 = _mm_loadu_pd(&workspace_data[iy - 1]);
            _mm_storeu_pd(&workspace_data[iy - 1], _mm_add_pd(_mm_mul_pd
              (_mm_set1_pd(proc_control_B.B_data[e - 1]), tmp), tmp_0));
          }

          for (iy = c_tmp; iy <= l; iy++) {
            workspace_data[iy - 1] += qrmanager->Q.data[(ar + iy) - ix] *
              proc_control_B.B_data[e - 1];
          }

          ar += ldq;
        }

        iAcol += ldw;
      }
    }

    mWConstr = 0;
    do {
      exitg1 = 0;
      if (mWConstr <= static_cast<uint16_T>(nVar) - 1) {
        c = workspace_data[mWConstr];
        if (rtIsInf(c) || rtIsNaN(c)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          c = workspace_data[mWConstr + workspace_size[0]];
          if (rtIsInf(c) || rtIsNaN(c)) {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            mWConstr++;
          }
        }
      } else {
        c_tmp = (nVar / 2) << 1;
        iQR0 = c_tmp - 2;
        for (mWConstr = 0; mWConstr <= iQR0; mWConstr += 2) {
          tmp = _mm_loadu_pd(&workspace_data[mWConstr]);
          tmp_0 = _mm_loadu_pd(&xCurrent_data[mWConstr]);
          _mm_storeu_pd(&workspace_data[mWConstr], _mm_add_pd(tmp, tmp_0));
        }

        for (mWConstr = c_tmp; mWConstr < nVar; mWConstr++) {
          workspace_data[mWConstr] += xCurrent_data[mWConstr];
        }

        c = proc_con_maxConstraintViolation(workingset, workspace_data);
        constrViolation_basicX = proc_c_maxConstraintViolation_a(workingset,
          workspace_data, workspace_size[0] + 1);
        if ((c <= 2.2204460492503131E-16) || (c < constrViolation_basicX)) {
          memcpy(&xCurrent_data[0], &workspace_data[0], static_cast<uint16_T>
                 (nVar) * sizeof(real_T));
        } else {
          mWConstr = static_cast<uint16_T>(nVar);
          for (nVar = 0; nVar < mWConstr; nVar++) {
            xCurrent_data[nVar] = workspace_data[workspace_size[0] + nVar];
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_con_RemoveDependentIneq__m
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *
   qrmanager, s_z8miyzCNLMZx998HtZciUB_proc_T *memspace)
{
  real_T tol;
  int32_T c;
  int32_T ix0;
  int32_T iy0;
  int32_T nActiveConstr;
  int32_T nActiveConstr_tmp;
  int32_T nDepIneq;
  int32_T nFixedConstr;
  int32_T nVar;
  nActiveConstr_tmp = workingset->nActiveConstr;
  nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  nVar = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    tol = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    for (nDepIneq = 0; nDepIneq < nFixedConstr; nDepIneq++) {
      qrmanager->jpvt.data[nDepIneq] = 1;
    }

    if (nFixedConstr + 1 <= workingset->nActiveConstr) {
      memset(&qrmanager->jpvt.data[nFixedConstr], 0, static_cast<uint32_T>
             (workingset->nActiveConstr - nFixedConstr) * sizeof(int32_T));
    }

    for (nDepIneq = 0; nDepIneq < nActiveConstr_tmp; nDepIneq++) {
      iy0 = qrmanager->ldq * nDepIneq;
      ix0 = workingset->ldA * nDepIneq;
      c = static_cast<uint16_T>(nVar);
      for (nActiveConstr = 0; nActiveConstr < c; nActiveConstr++) {
        qrmanager->QR.data[iy0 + nActiveConstr] = workingset->ATwset.data[ix0 +
          nActiveConstr];
      }
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    nDepIneq = 0;
    for (nActiveConstr = workingset->nActiveConstr - 1; nActiveConstr + 1 > nVar;
         nActiveConstr--) {
      nDepIneq++;
      memspace->workspace_int.data[nDepIneq - 1] = qrmanager->
        jpvt.data[nActiveConstr];
    }

    if (nActiveConstr + 1 <= workingset->nVar) {
      nVar = qrmanager->ldq * nActiveConstr + nActiveConstr;
      while ((nActiveConstr + 1 > nFixedConstr) && (fabs(qrmanager->QR.data[nVar])
              < tol)) {
        nDepIneq++;
        memspace->workspace_int.data[nDepIneq - 1] = qrmanager->
          jpvt.data[nActiveConstr];
        nActiveConstr--;
        nVar = (nVar - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, nDepIneq,
      memspace->workspace_sort.data, nFixedConstr + 1, workingset->nActiveConstr);
    for (nFixedConstr = nDepIneq; nFixedConstr >= 1; nFixedConstr--) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[nFixedConstr - 1]);
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_jhnw(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T scalarLB;
    int32_T vectorUB;
    b = static_cast<uint16_T>(n);
    scalarLB = (static_cast<uint16_T>(n) / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_iy = 0; b_iy <= vectorUB; b_iy += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&y_data[b_iy]);
      _mm_storeu_pd(&y_data[b_iy], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
    }

    for (int32_T b_iy = scalarLB; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    scalarLB = 0;
    vectorUB = (n - 1) * lda + 1;
    for (int32_T b_iy = 1; lda < 0 ? b_iy >= vectorUB : b_iy <= vectorUB; b_iy +=
         lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (b = b_iy; b <= e; b++) {
        c += A_data[b - 1] * x_data[b - b_iy];
      }

      y_data[scalarLB] += c;
      scalarLB++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc__maxConstraintViolation_ah
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, const real_T x_data[])
{
  real_T u1;
  real_T v;
  int32_T g_tmp;
  int32_T k;
  if (obj->probType == 2) {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
               static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhnw(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        u1 = obj->maxConstrWorkspace.data[k] - x_data[k + 139];
        obj->maxConstrWorkspace.data[k] = u1;
        if ((!(v >= u1)) && (!rtIsNaN(u1))) {
          v = u1;
        }
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_xgemv_jhnw(139, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      g_tmp = obj->sizes[2] + k;
      obj->maxConstrWorkspace.data[k] = (obj->maxConstrWorkspace.data[k] -
        x_data[g_tmp + 139]) + x_data[g_tmp + 269];
      u1 = fabs(obj->maxConstrWorkspace.data[k]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  } else {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
               static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhnw(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        u1 = obj->maxConstrWorkspace.data[k];
        if ((!(v >= u1)) && (!rtIsNaN(u1))) {
          v = u1;
        }
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_xgemv_jhnw(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      u1 = fabs(obj->maxConstrWorkspace.data[k]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[3] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[3]);
    for (k = 0; k < g_tmp; k++) {
      u1 = -x_data[obj->indexLB.data[k] - 1] - obj->lb.data[obj->indexLB.data[k]
        - 1];
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[4] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[4]);
    for (k = 0; k < g_tmp; k++) {
      u1 = x_data[obj->indexUB.data[k] - 1] - obj->ub.data[obj->indexUB.data[k]
        - 1];
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  if (obj->sizes[0] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[0]);
    for (k = 0; k < g_tmp; k++) {
      u1 = fabs(x_data[obj->indexFixed.data[k] - 1] - obj->ub.data
                [obj->indexFixed.data[k] - 1]);
      if ((!(v >= u1)) && (!rtIsNaN(u1))) {
        v = u1;
      }
    }
  }

  return v;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_PresolveWorkingSet
  (s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution, s_z8miyzCNLMZx998HtZciUB_proc_T
   *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset,
   s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager)
{
  real_T constrViolation;
  int32_T b;
  int32_T idxEndIneq;
  int32_T idxStartIneq;
  int32_T idxStartIneq_tmp;
  boolean_T guard1;
  boolean_T okWorkingSet;
  solution->state = 82;
  b = proc_control_RemoveDependentEq_(memspace, workingset, qrmanager);
  if ((b != -1) && (workingset->nActiveConstr <= qrmanager->ldq)) {
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_float.data, memspace->workspace_float.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__m(workingset, qrmanager, memspace);
      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_float.data, memspace->workspace_float.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        constrViolation = proc__maxConstraintViolation_ah(workingset,
          solution->xstar.data);
        if (constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    idxStartIneq_tmp = workingset->nWConstr[0] + workingset->nWConstr[1];
    idxStartIneq = idxStartIneq_tmp + 1;
    idxEndIneq = workingset->nActiveConstr;
    for (b = idxStartIneq; b <= idxEndIneq; b++) {
      workingset->isActiveConstr.data[(workingset->isActiveIdx
        [workingset->Wid.data[b - 1] - 1] + workingset->Wlocalidx.data[b - 1]) -
        2] = false;
    }

    workingset->nWConstr[2] = 0;
    workingset->nWConstr[3] = 0;
    workingset->nWConstr[4] = 0;
    workingset->nActiveConstr = idxStartIneq_tmp;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_jhnw4(int32_T m, int32_T n, const real_T
  A[19321], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if ((m != 0) && (n != 0)) {
    int32_T c;
    int32_T ix;
    memset(&y_data[0], 0, static_cast<uint16_T>(m) * sizeof(real_T));
    ix = 0;
    c = (n - 1) * lda + 1;
    for (int32_T b_iy = 1; lda < 0 ? b_iy >= c : b_iy <= c; b_iy += lda) {
      int32_T d;
      d = (b_iy + m) - 1;
      for (int32_T b = b_iy; b <= d; b++) {
        int32_T tmp;
        tmp = b - b_iy;
        y_data[tmp] += A[b - 1] * x_data[ix];
      }

      ix++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_contro_computeGrad_StoreHx
  (s_bsf2Fsale81D2LTDCKuKhG_proc_T *obj, const real_T H[19321], const real_T
   f_data[], const real_T x_data[])
{
  __m128d tmp;
  int32_T idx;
  int32_T iy;
  int32_T maxRegVar_tmp;
  int32_T scalarLB;
  int32_T scalarLB_tmp;
  int32_T vectorUB;
  switch (obj->objtype) {
   case 5:
    if (obj->nvar - 2 >= 0) {
      memset(&obj->grad.data[0], 0, static_cast<uint32_T>(obj->nvar - 1) *
             sizeof(real_T));
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_xgemv_jhnw4(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    if (static_cast<uint16_T>(obj->nvar) - 1 >= 0) {
      memcpy(&obj->grad.data[0], &obj->Hx.data[0], static_cast<uint16_T>
             (obj->nvar) * sizeof(real_T));
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      iy = obj->nvar - 1;
      scalarLB = (obj->nvar / 2) << 1;
      vectorUB = scalarLB - 2;
      for (idx = 0; idx <= vectorUB; idx += 2) {
        tmp = _mm_loadu_pd(&obj->grad.data[idx]);
        _mm_storeu_pd(&obj->grad.data[idx], _mm_add_pd(tmp, _mm_loadu_pd
          (&f_data[idx])));
      }

      for (idx = scalarLB; idx <= iy; idx++) {
        obj->grad.data[idx] += f_data[idx];
      }
    }
    break;

   default:
    maxRegVar_tmp = obj->maxVar - 1;
    proc_control_xgemv_jhnw4(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    iy = obj->nvar + 1;
    scalarLB_tmp = (obj->maxVar - obj->nvar) - 1;
    scalarLB = (((scalarLB_tmp / 2) << 1) + obj->nvar) + 1;
    vectorUB = scalarLB - 2;
    for (idx = iy; idx <= vectorUB; idx += 2) {
      _mm_storeu_pd(&obj->Hx.data[idx - 1], _mm_mul_pd(_mm_loadu_pd(&x_data[idx
        - 1]), _mm_set1_pd(obj->beta)));
    }

    for (idx = scalarLB; idx <= maxRegVar_tmp; idx++) {
      obj->Hx.data[idx - 1] = x_data[idx - 1] * obj->beta;
    }

    memcpy(&obj->grad.data[0], &obj->Hx.data[0], static_cast<uint16_T>
           (obj->maxVar - 1) * sizeof(real_T));
    if (obj->hasLinear && (obj->nvar >= 1)) {
      iy = obj->nvar - 1;
      scalarLB = (obj->nvar / 2) << 1;
      vectorUB = scalarLB - 2;
      for (idx = 0; idx <= vectorUB; idx += 2) {
        tmp = _mm_loadu_pd(&obj->grad.data[idx]);
        _mm_storeu_pd(&obj->grad.data[idx], _mm_add_pd(tmp, _mm_loadu_pd
          (&f_data[idx])));
      }

      for (idx = scalarLB; idx <= iy; idx++) {
        obj->grad.data[idx] += f_data[idx];
      }
    }

    if (scalarLB_tmp >= 1) {
      iy = obj->nvar;
      scalarLB = (scalarLB_tmp / 2) << 1;
      vectorUB = scalarLB - 2;
      for (idx = 0; idx <= vectorUB; idx += 2) {
        maxRegVar_tmp = iy + idx;
        tmp = _mm_loadu_pd(&obj->grad.data[maxRegVar_tmp]);
        _mm_storeu_pd(&obj->grad.data[maxRegVar_tmp], _mm_add_pd(tmp,
          _mm_set1_pd(obj->rho)));
      }

      for (idx = scalarLB; idx < scalarLB_tmp; idx++) {
        maxRegVar_tmp = iy + idx;
        obj->grad.data[maxRegVar_tmp] += obj->rho;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_contro_computeFval_ReuseHx(const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    {
      if (obj->hasLinear) {
        int32_T b_k_tmp;
        int32_T j;
        int32_T vectorUB;
        b_k_tmp = static_cast<uint16_T>(obj->nvar);
        j = (static_cast<uint16_T>(obj->nvar) / 2) << 1;
        vectorUB = j - 2;
        for (int32_T maxRegVar = 0; maxRegVar <= vectorUB; maxRegVar += 2) {
          __m128d tmp;
          tmp = _mm_loadu_pd(&obj->Hx.data[maxRegVar]);
          _mm_storeu_pd(&workspace_data[maxRegVar], _mm_add_pd(_mm_mul_pd
            (_mm_set1_pd(0.5), tmp), _mm_loadu_pd(&f_data[maxRegVar])));
        }

        for (int32_T maxRegVar = j; maxRegVar < b_k_tmp; maxRegVar++) {
          workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
            f_data[maxRegVar];
        }

        val = 0.0;
        if (obj->nvar >= 1) {
          for (int32_T b_k = 0; b_k < b_k_tmp; b_k++) {
            val += workspace_data[b_k] * x_data[b_k];
          }
        }
      } else {
        val = 0.0;
        if (obj->nvar >= 1) {
          int32_T b_k;
          b_k = static_cast<uint16_T>(obj->nvar);
          for (int32_T maxRegVar = 0; maxRegVar < b_k; maxRegVar++) {
            val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
          }
        }

        val *= 0.5;
      }
    }
    break;

   default:
    {
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      if (obj->hasLinear) {
        int32_T b_k;
        int32_T j;
        int32_T vectorUB;
        if (static_cast<uint16_T>(obj->nvar) - 1 >= 0) {
          memcpy(&workspace_data[0], &f_data[0], static_cast<uint16_T>(obj->nvar)
                 * sizeof(real_T));
        }

        b_k = obj->maxVar - obj->nvar;
        for (maxRegVar = 0; maxRegVar <= b_k - 2; maxRegVar++) {
          workspace_data[obj->nvar + maxRegVar] = obj->rho;
        }

        maxRegVar = static_cast<uint16_T>(obj->maxVar - 1);
        j = (static_cast<uint16_T>(obj->maxVar - 1) / 2) << 1;
        vectorUB = j - 2;
        for (b_k = 0; b_k <= vectorUB; b_k += 2) {
          __m128d tmp;
          __m128d tmp_0;
          tmp = _mm_loadu_pd(&obj->Hx.data[b_k]);
          tmp_0 = _mm_loadu_pd(&workspace_data[b_k]);
          _mm_storeu_pd(&workspace_data[b_k], _mm_add_pd(tmp_0, _mm_mul_pd
            (_mm_set1_pd(0.5), tmp)));
        }

        for (b_k = j; b_k < maxRegVar; b_k++) {
          workspace_data[b_k] += 0.5 * obj->Hx.data[b_k];
        }

        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (b_k = 0; b_k < maxRegVar; b_k++) {
            val += workspace_data[b_k] * x_data[b_k];
          }
        }
      } else {
        int32_T j;
        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          j = static_cast<uint16_T>(obj->maxVar - 1);
          for (int32_T b_k = 0; b_k < j; b_k++) {
            val += x_data[b_k] * obj->Hx.data[b_k];
          }
        }

        val *= 0.5;
        j = obj->nvar + 1;
        for (int32_T b_k = j; b_k <= maxRegVar; b_k++) {
          val += x_data[b_k - 1] * obj->rho;
        }
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xrotg(real_T *a, real_T *b, real_T *c, real_T *s)
{
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
  absa = fabs(*a);
  absb = fabs(*b);
  if (absa > absb) {
    roe = *a;
  }

  scale = absa + absb;
  if (scale == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *a = 0.0;
    *b = 0.0;
  } else {
    real_T ads;
    real_T bds;
    ads = absa / scale;
    bds = absb / scale;
    scale *= sqrt(ads * ads + bds * bds);
    if (roe < 0.0) {
      scale = -scale;
    }

    *c = *a / scale;
    *s = *b / scale;
    if (absa > absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }

    *a = scale;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_deleteColMoveEnd(s_o1KzuWoPqzc62zOgqamCNH_proc_T
  *obj, int32_T idx)
{
  real_T b_s;
  real_T b_temp;
  real_T c_c;
  int32_T QRk0;
  int32_T b_ix;
  int32_T b_temp_tmp;
  int32_T b_temp_tmp_0;
  int32_T e;
  int32_T endIdx;
  int32_T i;
  int32_T idxRotGCol;
  int32_T ix;
  if (obj->usedPivoting) {
    i = 1;
    while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
      i++;
    }

    idx = i;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    e = obj->minRowCol;
    for (endIdx = 0; endIdx < e; endIdx++) {
      obj->QR.data[endIdx + obj->ldq * (idx - 1)] = obj->QR.data[(obj->ncols - 1)
        * obj->ldq + endIdx];
    }

    obj->ncols--;
    if (obj->mrows <= obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      if (obj->mrows - 1 <= obj->ncols) {
        endIdx = obj->mrows - 1;
      } else {
        endIdx = obj->ncols;
      }

      e = endIdx;
      idxRotGCol = (idx - 1) * obj->ldq;
      while (e >= idx) {
        b_temp_tmp = e + idxRotGCol;
        b_temp = obj->QR.data[b_temp_tmp];
        proc_control_xrotg(&obj->QR.data[b_temp_tmp - 1], &b_temp, &c_c, &b_s);
        obj->QR.data[b_temp_tmp] = b_temp;
        obj->QR.data[e + obj->ldq * (e - 1)] = 0.0;
        QRk0 = obj->ldq * idx + e;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (i = 0; i < b_ix; i++) {
            b_temp = obj->QR.data[ix] * c_c + obj->QR.data[QRk0] * b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * c_c - obj->QR.data[ix] *
              b_s;
            obj->QR.data[ix] = b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        i = (e - 1) * obj->ldq;
        QRk0 = obj->mrows;
        if (obj->mrows >= 1) {
          ix = obj->ldq + i;
          for (b_ix = 0; b_ix < QRk0; b_ix++) {
            b_temp_tmp = ix + b_ix;
            b_temp_tmp_0 = i + b_ix;
            b_temp = obj->Q.data[b_temp_tmp_0] * c_c + obj->Q.data[b_temp_tmp] *
              b_s;
            obj->Q.data[b_temp_tmp] = obj->Q.data[b_temp_tmp] * c_c -
              obj->Q.data[b_temp_tmp_0] * b_s;
            obj->Q.data[b_temp_tmp_0] = b_temp;
          }
        }

        e--;
      }

      for (e = idx + 1; e <= endIdx; e++) {
        ix = (e - 1) * obj->ldq;
        b_temp_tmp = e + ix;
        b_temp = obj->QR.data[b_temp_tmp];
        proc_control_xrotg(&obj->QR.data[b_temp_tmp - 1], &b_temp, &c_c, &b_s);
        obj->QR.data[b_temp_tmp] = b_temp;
        QRk0 = (obj->ldq + 1) * e;
        i = obj->ncols - e;
        if (i >= 1) {
          b_ix = QRk0 - 1;
          for (idxRotGCol = 0; idxRotGCol < i; idxRotGCol++) {
            b_temp = obj->QR.data[b_ix] * c_c + obj->QR.data[QRk0] * b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * c_c - obj->QR.data[b_ix] *
              b_s;
            obj->QR.data[b_ix] = b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        idxRotGCol = obj->mrows;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + ix;
          for (i = 0; i < idxRotGCol; i++) {
            b_temp_tmp = b_ix + i;
            b_temp_tmp_0 = ix + i;
            b_temp = obj->Q.data[b_temp_tmp_0] * c_c + obj->Q.data[b_temp_tmp] *
              b_s;
            obj->Q.data[b_temp_tmp] = obj->Q.data[b_temp_tmp] * c_c -
              obj->Q.data[b_temp_tmp_0] * b_s;
            obj->Q.data[b_temp_tmp_0] = b_temp;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
boolean_T proc_control::proc_control_strcmp(const char_T a[7])
{
  int32_T ret;
  static const char_T b[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[19321], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T br;
    int32_T lastColC;
    br = ib0;
    lastColC = (n - 1) * ldc;
    for (int32_T cr = 0; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      b = cr + m;
      for (int32_T ic = cr + 1; ic <= b; ic++) {
        C_data[ic - 1] = 0.0;
      }
    }

    for (int32_T cr = 0; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      int32_T ar;
      int32_T c;
      ar = -1;
      c = br + k;
      for (int32_T ic = br; ic < c; ic++) {
        int32_T d;
        int32_T scalarLB;
        int32_T vectorUB;
        d = cr + m;
        scalarLB = ((((d - cr) / 2) << 1) + cr) + 1;
        vectorUB = scalarLB - 2;
        for (b = cr + 1; b <= vectorUB; b += 2) {
          __m128d tmp;
          tmp = _mm_loadu_pd(&C_data[b - 1]);
          _mm_storeu_pd(&C_data[b - 1], _mm_add_pd(_mm_mul_pd(_mm_set1_pd
            (B_data[ic - 1]), _mm_loadu_pd(&A[(ar + b) - cr])), tmp));
        }

        for (b = scalarLB; b <= d; b++) {
          C_data[b - 1] += A[(ar + b) - cr] * B_data[ic - 1];
        }

        ar += lda;
      }

      br += ldb;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemm_k(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T br;
    int32_T lastColC;
    lastColC = (n - 1) * ldc;
    for (int32_T cr = 0; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      b = cr + m;
      for (int32_T ic = cr + 1; ic <= b; ic++) {
        C_data[ic - 1] = 0.0;
      }
    }

    br = -1;
    for (int32_T cr = 0; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      int32_T ar;
      int32_T c;
      ar = ia0;
      c = cr + m;
      for (int32_T ic = cr + 1; ic <= c; ic++) {
        real_T temp;
        temp = 0.0;
        for (b = 0; b < k; b++) {
          temp += A_data[(b + ar) - 1] * B_data[(b + br) + 1];
        }

        C_data[ic - 1] += temp;
        ar += lda;
      }

      br += ldb;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_fullColLDL2_(s_962gqykB8vLiRVqsLdGQIG_proc_T
  *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T LDimSizeP1;
  LDimSizeP1 = obj->ldm;
  for (int32_T k = 0; k < NColsRemain; k++) {
    __m128d tmp;
    real_T alpha1;
    real_T y;
    int32_T LD_diagOffset;
    int32_T b_k;
    int32_T scalarLB;
    int32_T subMatrixDim;
    int32_T vectorUB;
    LD_diagOffset = (LDimSizeP1 + 1) * k + LD_offset;
    alpha1 = -1.0 / obj->FMat.data[LD_diagOffset - 1];
    subMatrixDim = (NColsRemain - k) - 2;
    for (b_k = 0; b_k <= subMatrixDim; b_k++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + b_k];
    }

    y = obj->workspace_;
    if (!(alpha1 == 0.0)) {
      int32_T jA;
      jA = LD_diagOffset + LDimSizeP1;
      for (b_k = 0; b_k <= subMatrixDim; b_k++) {
        if (y != 0.0) {
          real_T temp;
          int32_T b;
          temp = y * alpha1;
          b = (subMatrixDim + jA) + 1;
          scalarLB = ((((b - jA) / 2) << 1) + jA) + 1;
          vectorUB = scalarLB - 2;
          for (int32_T ijA = jA + 1; ijA <= vectorUB; ijA += 2) {
            tmp = _mm_loadu_pd(&obj->FMat.data[ijA - 1]);
            _mm_storeu_pd(&obj->FMat.data[ijA - 1], _mm_add_pd(tmp, _mm_set1_pd
              (obj->workspace_ * temp)));
          }

          for (int32_T ijA = scalarLB; ijA <= b; ijA++) {
            obj->FMat.data[ijA - 1] += obj->workspace_ * temp;
          }
        }

        jA += obj->ldm;
      }
    }

    alpha1 = 1.0 / obj->FMat.data[LD_diagOffset - 1];
    b_k = (LD_diagOffset + subMatrixDim) + 1;
    scalarLB = ((((b_k - LD_diagOffset) / 2) << 1) + LD_diagOffset) + 1;
    vectorUB = scalarLB - 2;
    for (subMatrixDim = LD_diagOffset + 1; subMatrixDim <= vectorUB;
         subMatrixDim += 2) {
      tmp = _mm_loadu_pd(&obj->FMat.data[subMatrixDim - 1]);
      _mm_storeu_pd(&obj->FMat.data[subMatrixDim - 1], _mm_mul_pd(tmp,
        _mm_set1_pd(alpha1)));
    }

    for (subMatrixDim = scalarLB; subMatrixDim <= b_k; subMatrixDim++) {
      obj->FMat.data[subMatrixDim - 1] *= alpha1;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_partialColLDL3_(s_962gqykB8vLiRVqsLdGQIG_proc_T *
  obj, int32_T LD_offset, int32_T NColsRemain)
{
  __m128d tmp;
  int32_T LD_diagOffset;
  int32_T LDimSizeP1;
  int32_T c;
  int32_T c_idx;
  int32_T idx;
  int32_T ix;
  int32_T lastColC;
  int32_T lda;
  int32_T numStrictLowerRows;
  int32_T subRows;
  LDimSizeP1 = obj->ldm + 1;
  for (int32_T k = 0; k < 48; k++) {
    real_T y;
    subRows = (NColsRemain - k) - 1;
    LD_diagOffset = (LDimSizeP1 * k + LD_offset) - 1;
    for (numStrictLowerRows = 0; numStrictLowerRows <= subRows;
         numStrictLowerRows++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + numStrictLowerRows];
    }

    for (c_idx = 0; c_idx < NColsRemain; c_idx++) {
      obj->workspace2_ = obj->workspace_;
    }

    lda = obj->ldm;
    y = obj->workspace2_;
    if ((NColsRemain != 0) && (k != 0)) {
      ix = LD_offset + k;
      c = (k - 1) * obj->ldm + 1;
      for (numStrictLowerRows = 1; lda < 0 ? numStrictLowerRows >= c :
           numStrictLowerRows <= c; numStrictLowerRows += lda) {
        lastColC = (numStrictLowerRows + NColsRemain) - 1;
        for (idx = numStrictLowerRows; idx <= lastColC; idx++) {
          y += -obj->FMat.data[ix - 1] * obj->workspace_;
        }

        ix += obj->ldm;
      }
    }

    obj->workspace2_ = y;
    for (c_idx = 0; c_idx < NColsRemain; c_idx++) {
      obj->workspace_ = y;
    }

    for (c_idx = 0; c_idx <= subRows; c_idx++) {
      obj->FMat.data[LD_diagOffset + c_idx] = obj->workspace_;
    }

    numStrictLowerRows = subRows;
    c_idx = (subRows / 2) << 1;
    lda = c_idx - 2;
    for (subRows = 0; subRows <= lda; subRows += 2) {
      ix = (subRows + LD_diagOffset) + 1;
      tmp = _mm_loadu_pd(&obj->FMat.data[ix]);
      _mm_storeu_pd(&obj->FMat.data[ix], _mm_div_pd(tmp, _mm_set1_pd
        (obj->FMat.data[LD_diagOffset])));
    }

    for (subRows = c_idx; subRows < numStrictLowerRows; subRows++) {
      ix = (subRows + LD_diagOffset) + 1;
      obj->FMat.data[ix] /= obj->FMat.data[LD_diagOffset];
    }
  }

  for (int32_T k = 48; k <= NColsRemain - 1; k += 48) {
    int32_T br;
    int32_T numStrictLowerRows_tmp;
    br = NColsRemain - k;
    if (br >= 48) {
      LD_diagOffset = 48;
    } else {
      LD_diagOffset = br;
    }

    numStrictLowerRows_tmp = k + LD_diagOffset;
    numStrictLowerRows = numStrictLowerRows_tmp - 1;
    for (subRows = k; subRows <= numStrictLowerRows; subRows++) {
      idx = numStrictLowerRows_tmp - subRows;
      for (lda = 0; lda < 48; lda++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset + subRows) + lda *
          obj->ldm) - 1];
      }

      ix = obj->ldm;
      if (idx != 0) {
        c = (obj->ldm * 47 + subRows) + 1;
        for (c_idx = subRows + 1; ix < 0 ? c_idx >= c : c_idx <= c; c_idx += ix)
        {
          lastColC = (c_idx + idx) - 1;
          for (lda = c_idx; lda <= lastColC; lda++) {
            // Check node always fails. would cause program termination and was eliminated 
          }
        }
      }
    }

    if (numStrictLowerRows_tmp < NColsRemain) {
      subRows = br - LD_diagOffset;
      numStrictLowerRows = ((LD_offset + LD_diagOffset) + LDimSizeP1 * k) - 1;
      for (idx = 0; idx < 48; idx++) {
        ix = (LD_offset + k) + idx * obj->ldm;
        for (lda = 0; lda < LD_diagOffset; lda++) {
          obj->workspace2_ = obj->FMat.data[(ix + lda) - 1];
        }
      }

      idx = obj->ldm;
      if ((subRows != 0) && (LD_diagOffset != 0)) {
        lastColC = (LD_diagOffset - 1) * obj->ldm + numStrictLowerRows;
        br = 0;
        for (LD_diagOffset = numStrictLowerRows; idx < 0 ? LD_diagOffset >=
             lastColC : LD_diagOffset <= lastColC; LD_diagOffset += idx) {
          br++;
          numStrictLowerRows_tmp = idx * 47 + br;
          for (ix = br; idx < 0 ? ix >= numStrictLowerRows_tmp : ix <=
               numStrictLowerRows_tmp; ix += idx) {
            int32_T h;
            h = LD_diagOffset + subRows;
            c_idx = ((((h - LD_diagOffset) / 2) << 1) + LD_diagOffset) + 1;
            lda = c_idx - 2;
            for (c = LD_diagOffset + 1; c <= lda; c += 2) {
              tmp = _mm_loadu_pd(&obj->FMat.data[c - 1]);
              _mm_storeu_pd(&obj->FMat.data[c - 1], _mm_add_pd(tmp, _mm_set1_pd(
                -obj->workspace2_ * obj->workspace_)));
            }

            for (c = c_idx; c <= h; c++) {
              obj->FMat.data[c - 1] += -obj->workspace2_ * obj->workspace_;
            }
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
int32_T proc_control::proc_control_xpotrf_g(int32_T n, real_T A_data[], int32_T
  lda)
{
  int32_T b_j;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j <= n - 1)) {
    real_T c;
    real_T ssq;
    int32_T idxA1j;
    int32_T idxAjj;
    int32_T nmj;
    idxA1j = b_j * lda;
    idxAjj = idxA1j + b_j;
    ssq = 0.0;
    if (b_j >= 1) {
      for (nmj = 0; nmj < b_j; nmj++) {
        c = A_data[idxA1j + nmj];
        ssq += c * c;
      }
    }

    ssq = A_data[idxAjj] - ssq;
    if (ssq > 0.0) {
      ssq = sqrt(ssq);
      A_data[idxAjj] = ssq;
      if (b_j + 1 < n) {
        int32_T jm1;
        nmj = (n - b_j) - 2;
        jm1 = (idxA1j + lda) + 1;
        idxAjj += lda;
        if ((b_j != 0) && (nmj + 1 != 0)) {
          int32_T b;
          int32_T iy;
          iy = idxAjj;
          b = lda * nmj + jm1;
          for (int32_T b_ix = jm1; lda < 0 ? b_ix >= b : b_ix <= b; b_ix += lda)
          {
            int32_T d;
            c = 0.0;
            d = (b_ix + b_j) - 1;
            for (int32_T b_iy = b_ix; b_iy <= d; b_iy++) {
              c += A_data[(idxA1j + b_iy) - b_ix] * A_data[b_iy - 1];
            }

            A_data[iy] -= c;
            iy += lda;
          }
        }

        ssq = 1.0 / ssq;
        idxA1j = (lda * nmj + idxAjj) + 1;
        for (nmj = idxAjj + 1; lda < 0 ? nmj >= idxA1j : nmj <= idxA1j; nmj +=
             lda) {
          A_data[nmj - 1] *= ssq;
        }
      }

      b_j++;
    } else {
      A_data[idxAjj] = ssq;
      info = b_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_jhnw4q(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T ix;
    memset(&y_data[0], 0, static_cast<uint32_T>(m) * sizeof(real_T));
    ix = 0;
    b = (n - 1) * lda + ia0;
    for (int32_T b_iy = ia0; lda < 0 ? b_iy >= b : b_iy <= b; b_iy += lda) {
      int32_T c;
      c = (b_iy + m) - 1;
      for (int32_T iyend = b_iy; iyend <= c; iyend++) {
        int32_T tmp;
        tmp = iyend - b_iy;
        y_data[tmp] += A_data[iyend - 1] * x_data[ix];
      }

      ix++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factor(s_962gqykB8vLiRVqsLdGQIG_proc_T *obj,
  const real_T A[19321], int32_T ndims, int32_T ldA)
{
  int32_T b_k;
  int32_T idx;
  int32_T ix0;
  int32_T iy0;
  obj->ndims = ndims;
  for (idx = 0; idx < ndims; idx++) {
    ix0 = ldA * idx;
    iy0 = obj->ldm * idx;
    for (b_k = 0; b_k < ndims; b_k++) {
      obj->FMat.data[iy0 + b_k] = A[b_k + ix0];
    }
  }

  obj->info = proc_control_xpotrf_g(ndims, obj->FMat.data, obj->ldm);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_solve(const s_962gqykB8vLiRVqsLdGQIG_proc_T *obj,
  real_T rhs_data[])
{
  int32_T n_tmp;
  n_tmp = obj->ndims;
  if (obj->ndims != 0) {
    int32_T jA;
    for (int32_T j = 0; j < n_tmp; j++) {
      real_T temp;
      jA = j * obj->ldm;
      temp = rhs_data[j];
      for (int32_T i = 0; i < j; i++) {
        temp -= obj->FMat.data[jA + i] * rhs_data[i];
      }

      rhs_data[j] = temp / obj->FMat.data[jA + j];
    }

    for (int32_T j = n_tmp; j >= 1; j--) {
      jA = ((j - 1) * obj->ldm + j) - 2;
      rhs_data[j - 1] /= obj->FMat.data[jA + 1];
      for (int32_T i = 0; i <= j - 2; i++) {
        int32_T ix;
        ix = (j - i) - 2;
        rhs_data[ix] -= obj->FMat.data[jA - i] * rhs_data[j - 1];
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_factor_h(s_962gqykB8vLiRVqsLdGQIG_proc_T *obj,
  const real_T A[19321], int32_T ndims, int32_T ldA)
{
  real_T s;
  real_T smax;
  int32_T A_maxDiag_idx;
  int32_T LD_diagOffset;
  int32_T LDimSizeP1;
  int32_T exitg2;
  int32_T ix;
  int32_T iy0;
  boolean_T exitg1;
  LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  for (A_maxDiag_idx = 0; A_maxDiag_idx < ndims; A_maxDiag_idx++) {
    ix = ldA * A_maxDiag_idx;
    iy0 = obj->ldm * A_maxDiag_idx;
    for (LD_diagOffset = 0; LD_diagOffset < ndims; LD_diagOffset++) {
      obj->FMat.data[iy0 + LD_diagOffset] = A[LD_diagOffset + ix];
    }
  }

  if (ndims < 1) {
    A_maxDiag_idx = -1;
  } else {
    A_maxDiag_idx = 0;
    if (ndims > 1) {
      smax = fabs(obj->FMat.data[0]);
      for (LD_diagOffset = 2; LD_diagOffset <= ndims; LD_diagOffset++) {
        s = fabs(obj->FMat.data[(LD_diagOffset - 1) * LDimSizeP1]);
        if (s > smax) {
          A_maxDiag_idx = LD_diagOffset - 1;
          smax = s;
        }
      }
    }
  }

  smax = fabs(obj->FMat.data[obj->ldm * A_maxDiag_idx + A_maxDiag_idx]) *
    2.2204460492503131E-16;
  if (smax >= 0.0) {
    obj->regTol_ = smax;
  } else {
    obj->regTol_ = 0.0;
  }

  if (ndims > 128) {
    A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (A_maxDiag_idx < ndims)) {
      LD_diagOffset = LDimSizeP1 * A_maxDiag_idx + 1;
      ix = ndims - A_maxDiag_idx;
      if (A_maxDiag_idx + 48 <= ndims) {
        proc_control_partialColLDL3_(obj, LD_diagOffset, ix);
        A_maxDiag_idx += 48;
      } else {
        proc_control_fullColLDL2_(obj, LD_diagOffset, ix);
        exitg1 = true;
      }
    }
  } else {
    proc_control_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    LDimSizeP1 = 0;
    do {
      exitg2 = 0;
      if (LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * LDimSizeP1 + LDimSizeP1] <= 0.0) {
          obj->info = -LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_solve_f(const s_962gqykB8vLiRVqsLdGQIG_proc_T
  *obj, real_T rhs_data[])
{
  int32_T jjA;
  int32_T n;
  n = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (int32_T b_j = 0; b_j <= n; b_j++) {
      int32_T c;
      jjA = b_j * obj->ldm + b_j;
      c = n - b_j;
      for (int32_T b_i = 0; b_i < c; b_i++) {
        int32_T ix;
        ix = (b_i + b_j) + 1;
        rhs_data[ix] -= obj->FMat.data[(b_i + jjA) + 1] * rhs_data[b_j];
      }
    }
  }

  n = obj->ndims;
  for (int32_T b_j = 0; b_j < n; b_j++) {
    rhs_data[b_j] /= obj->FMat.data[obj->ldm * b_j + b_j];
  }

  if (obj->ndims != 0) {
    for (int32_T b_j = n; b_j >= 1; b_j--) {
      real_T temp;
      jjA = (b_j - 1) * obj->ldm;
      temp = rhs_data[b_j - 1];
      for (int32_T b_i = n; b_i >= b_j + 1; b_i--) {
        temp -= obj->FMat.data[(jjA + b_i) - 1] * rhs_data[b_i - 1];
      }

      rhs_data[b_j - 1] = temp;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_compute_deltax(const real_T H[19321],
  s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution, s_z8miyzCNLMZx998HtZciUB_proc_T
  *memspace, const s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *objective, boolean_T alwaysPositiveDef)
{
  __m128d tmp;
  real_T s;
  real_T smax;
  int32_T b_jjA;
  int32_T b_mNull;
  int32_T c_mNull;
  int32_T d_ix;
  int32_T exitg2;
  int32_T mNull_tmp;
  int32_T nVar;
  int32_T nullStart;
  int32_T nullStartIdx;
  int32_T nullStartIdx_tmp;
  boolean_T exitg1;
  nVar = qrmanager->mrows - 1;
  mNull_tmp = qrmanager->mrows - qrmanager->ncols;
  if (mNull_tmp <= 0) {
    if (qrmanager->mrows - 1 >= 0) {
      memset(&solution->searchDir.data[0], 0, static_cast<uint32_T>
             ((qrmanager->mrows - 1) + 1) * sizeof(real_T));
    }
  } else {
    c_mNull = (qrmanager->mrows / 2) << 1;
    d_ix = c_mNull - 2;
    for (nullStartIdx = 0; nullStartIdx <= d_ix; nullStartIdx += 2) {
      tmp = _mm_loadu_pd(&objective->grad.data[nullStartIdx]);
      _mm_storeu_pd(&solution->searchDir.data[nullStartIdx], _mm_mul_pd(tmp,
        _mm_set1_pd(-1.0)));
    }

    for (nullStartIdx = c_mNull; nullStartIdx <= nVar; nullStartIdx++) {
      solution->searchDir.data[nullStartIdx] = -objective->
        grad.data[nullStartIdx];
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
        } else {
          proc_control_factor_h(cholmanager, H, qrmanager->mrows,
                                qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_solve_f(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, objective->nvar, objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_solve(cholmanager, solution->searchDir.data);
            smax = 1.0 / objective->beta;
            nullStartIdx = objective->nvar + 1;
            b_mNull = qrmanager->mrows;
            c_mNull = ((((qrmanager->mrows - objective->nvar) / 2) << 1) +
                       objective->nvar) + 1;
            d_ix = c_mNull - 2;
            for (nullStart = nullStartIdx; nullStart <= d_ix; nullStart += 2) {
              tmp = _mm_loadu_pd(&solution->searchDir.data[nullStart - 1]);
              _mm_storeu_pd(&solution->searchDir.data[nullStart - 1], _mm_mul_pd
                            (tmp, _mm_set1_pd(smax)));
            }

            for (nullStart = c_mNull; nullStart <= b_mNull; nullStart++) {
              solution->searchDir.data[nullStart - 1] *= smax;
            }
          }
        }
        break;
      }
    } else {
      nullStartIdx_tmp = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        for (nullStart = 0; nullStart < mNull_tmp; nullStart++) {
          memspace->workspace_float.data[nullStart] = -qrmanager->Q.data
            [(qrmanager->ncols + nullStart) * qrmanager->ldq + nVar];
        }

        proc_control_xgemv_jhnw4q(qrmanager->mrows, mNull_tmp, qrmanager->Q.data,
          nullStartIdx_tmp, qrmanager->ldq, memspace->workspace_float.data,
          solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_xgemm(qrmanager->mrows, mNull_tmp, qrmanager->mrows, H,
                             qrmanager->mrows, qrmanager->Q.data,
                             nullStartIdx_tmp, qrmanager->ldq,
                             memspace->workspace_float.data,
                             memspace->workspace_float.size[0]);
          proc_control_xgemm_k(mNull_tmp, mNull_tmp, qrmanager->mrows,
                               qrmanager->Q.data, nullStartIdx_tmp,
                               qrmanager->ldq, memspace->workspace_float.data,
                               memspace->workspace_float.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          nullStartIdx = qrmanager->mrows;
          proc_control_xgemm(objective->nvar, mNull_tmp, objective->nvar, H,
                             objective->nvar, qrmanager->Q.data,
                             nullStartIdx_tmp, qrmanager->ldq,
                             memspace->workspace_float.data,
                             memspace->workspace_float.size[0]);
          for (b_mNull = 0; b_mNull < mNull_tmp; b_mNull++) {
            b_jjA = objective->nvar + 1;
            c_mNull = ((((nullStartIdx - objective->nvar) / 2) << 1) +
                       objective->nvar) + 1;
            d_ix = c_mNull - 2;
            for (nullStart = b_jjA; nullStart <= d_ix; nullStart += 2) {
              tmp = _mm_loadu_pd(&qrmanager->Q.data[((b_mNull + qrmanager->ncols)
                * qrmanager->Q.size[0] + nullStart) - 1]);
              _mm_storeu_pd(&memspace->workspace_float.data[(nullStart +
                memspace->workspace_float.size[0] * b_mNull) - 1], _mm_mul_pd
                            (tmp, _mm_set1_pd(objective->beta)));
            }

            for (nullStart = c_mNull; nullStart <= nullStartIdx; nullStart++) {
              memspace->workspace_float.data[(nullStart +
                memspace->workspace_float.size[0] * b_mNull) - 1] =
                qrmanager->Q.data[((b_mNull + qrmanager->ncols) *
                                   qrmanager->Q.size[0] + nullStart) - 1] *
                objective->beta;
            }
          }

          proc_control_xgemm_k(mNull_tmp, mNull_tmp, qrmanager->mrows,
                               qrmanager->Q.data, nullStartIdx_tmp,
                               qrmanager->ldq, memspace->workspace_float.data,
                               memspace->workspace_float.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = mNull_tmp;
          cholmanager->info = proc_control_xpotrf_g(mNull_tmp,
            cholmanager->FMat.data, cholmanager->ldm);
        } else {
          nullStart = cholmanager->ldm + 1;
          cholmanager->ndims = mNull_tmp;
          nullStartIdx = 0;
          if (mNull_tmp > 1) {
            smax = fabs(cholmanager->FMat.data[0]);
            for (b_mNull = 2; b_mNull <= mNull_tmp; b_mNull++) {
              s = fabs(cholmanager->FMat.data[(b_mNull - 1) * nullStart]);
              if (s > smax) {
                nullStartIdx = b_mNull - 1;
                smax = s;
              }
            }
          }

          smax = fabs(cholmanager->FMat.data[cholmanager->ldm * nullStartIdx +
                      nullStartIdx]) * 2.2204460492503131E-16;
          if (smax >= 0.0) {
            cholmanager->regTol_ = smax;
          } else {
            cholmanager->regTol_ = 0.0;
          }

          if (mNull_tmp > 128) {
            b_mNull = 0;
            exitg1 = false;
            while ((!exitg1) && (b_mNull < mNull_tmp)) {
              nullStartIdx = nullStart * b_mNull + 1;
              c_mNull = mNull_tmp - b_mNull;
              if (b_mNull + 48 <= mNull_tmp) {
                proc_control_partialColLDL3_(cholmanager, nullStartIdx, c_mNull);
                b_mNull += 48;
              } else {
                proc_control_fullColLDL2_(cholmanager, nullStartIdx, c_mNull);
                exitg1 = true;
              }
            }
          } else {
            proc_control_fullColLDL2_(cholmanager, 1, mNull_tmp);
          }

          if (cholmanager->ConvexCheck) {
            b_mNull = 0;
            do {
              exitg2 = 0;
              if (b_mNull <= mNull_tmp - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm * b_mNull + b_mNull]
                    <= 0.0) {
                  cholmanager->info = -b_mNull - 1;
                  exitg2 = 1;
                } else {
                  b_mNull++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          c_mNull = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            memset(&memspace->workspace_float.data[0], 0, static_cast<uint32_T>
                   (mNull_tmp) * sizeof(real_T));
            b_mNull = 0;
            b_jjA = (mNull_tmp - 1) * qrmanager->ldq + nullStartIdx_tmp;
            for (nullStart = nullStartIdx_tmp; c_mNull < 0 ? nullStart >= b_jjA :
                 nullStart <= b_jjA; nullStart += c_mNull) {
              smax = 0.0;
              d_ix = nullStart + nVar;
              for (nullStartIdx = nullStart; nullStartIdx <= d_ix; nullStartIdx
                   ++) {
                smax += qrmanager->Q.data[nullStartIdx - 1] *
                  objective->grad.data[nullStartIdx - nullStart];
              }

              memspace->workspace_float.data[b_mNull] -= smax;
              b_mNull++;
            }
          }

          if (alwaysPositiveDef) {
            c_mNull = cholmanager->ndims;
            if (cholmanager->ndims != 0) {
              for (nullStart = 0; nullStart < c_mNull; nullStart++) {
                b_mNull = nullStart * cholmanager->ldm;
                smax = memspace->workspace_float.data[nullStart];
                for (nullStartIdx = 0; nullStartIdx < nullStart; nullStartIdx++)
                {
                  smax -= cholmanager->FMat.data[b_mNull + nullStartIdx] *
                    memspace->workspace_float.data[nullStartIdx];
                }

                memspace->workspace_float.data[nullStart] = smax /
                  cholmanager->FMat.data[b_mNull + nullStart];
              }
            }

            b_mNull = cholmanager->ndims;
            if (cholmanager->ndims != 0) {
              for (nullStartIdx = b_mNull; nullStartIdx >= 1; nullStartIdx--) {
                b_jjA = ((nullStartIdx - 1) * cholmanager->ldm + nullStartIdx) -
                  2;
                memspace->workspace_float.data[nullStartIdx - 1] /=
                  cholmanager->FMat.data[b_jjA + 1];
                for (c_mNull = 0; c_mNull <= nullStartIdx - 2; c_mNull++) {
                  d_ix = (nullStartIdx - c_mNull) - 2;
                  memspace->workspace_float.data[d_ix] -=
                    memspace->workspace_float.data[nullStartIdx - 1] *
                    cholmanager->FMat.data[b_jjA - c_mNull];
                }
              }
            }
          } else {
            b_mNull = cholmanager->ndims - 1;
            if (cholmanager->ndims != 0) {
              for (nullStartIdx = 0; nullStartIdx <= b_mNull; nullStartIdx++) {
                nullStart = nullStartIdx * cholmanager->ldm + nullStartIdx;
                d_ix = b_mNull - nullStartIdx;
                for (c_mNull = 0; c_mNull < d_ix; c_mNull++) {
                  nVar = (c_mNull + nullStartIdx) + 1;
                  memspace->workspace_float.data[nVar] -= cholmanager->
                    FMat.data[(c_mNull + nullStart) + 1] *
                    memspace->workspace_float.data[nullStartIdx];
                }
              }
            }

            nullStartIdx = cholmanager->ndims;
            for (nullStart = 0; nullStart < nullStartIdx; nullStart++) {
              memspace->workspace_float.data[nullStart] /=
                cholmanager->FMat.data[cholmanager->ldm * nullStart + nullStart];
            }

            c_mNull = cholmanager->ndims;
            if (cholmanager->ndims != 0) {
              for (nullStart = c_mNull; nullStart >= 1; nullStart--) {
                b_mNull = (nullStart - 1) * cholmanager->ldm;
                smax = memspace->workspace_float.data[nullStart - 1];
                for (nullStartIdx = c_mNull; nullStartIdx >= nullStart + 1;
                     nullStartIdx--) {
                  smax -= cholmanager->FMat.data[(b_mNull + nullStartIdx) - 1] *
                    memspace->workspace_float.data[nullStartIdx - 1];
                }

                memspace->workspace_float.data[nullStart - 1] = smax;
              }
            }
          }

          proc_control_xgemv_jhnw4q(qrmanager->mrows, mNull_tmp,
            qrmanager->Q.data, nullStartIdx_tmp, qrmanager->ldq,
            memspace->workspace_float.data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_control_xnrm2_ap(int32_T n, const real_T x_data[])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[0]);
    } else {
      real_T scale;
      int32_T b;
      scale = 3.3121686421112381E-170;
      b = static_cast<uint16_T>(n);
      for (int32_T k = 0; k < b; k++) {
        real_T absxk;
        absxk = fabs(x_data[k]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_xgemv_jhnw4qt(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T scalarLB;
    int32_T vectorUB;
    b = static_cast<uint16_T>(n);
    scalarLB = (static_cast<uint16_T>(n) / 2) << 1;
    vectorUB = scalarLB - 2;
    for (int32_T b_iy = 0; b_iy <= vectorUB; b_iy += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&y_data[b_iy]);
      _mm_storeu_pd(&y_data[b_iy], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
    }

    for (int32_T b_iy = scalarLB; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    b = 0;
    vectorUB = (n - 1) * lda + 1;
    for (int32_T b_iy = 1; lda < 0 ? b_iy >= vectorUB : b_iy <= vectorUB; b_iy +=
         lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (scalarLB = b_iy; scalarLB <= e; scalarLB++) {
        c += A_data[scalarLB - 1] * x_data[scalarLB - b_iy];
      }

      y_data[b] += c;
      b++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  real_T tmp[2];
  real_T alphaTemp;
  real_T b_c;
  real_T denomTol;
  real_T phaseOneCorrectionP;
  real_T ratio;
  real_T u0;
  int32_T d;
  int32_T d_tmp;
  int32_T e;
  int32_T f;
  int32_T iyend;
  int32_T ldw;
  int32_T ldw_tmp;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  denomTol = 2.2204460492503131E-13 * proc_control_xnrm2_ap(workingset_nVar,
    solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    d_tmp = static_cast<uint16_T>(workingset_sizes[2]);
    if (d_tmp - 1 >= 0) {
      memcpy(&workspace_data[0], &workingset_bineq_data[0], static_cast<uint32_T>
             (d_tmp) * sizeof(real_T));
    }

    proc_control_xgemv_jhnw4qt(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    ldw_tmp = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      iyend = workspace_size[0] + workingset_sizes[2];
      if (ldw_tmp + 1 <= iyend) {
        memset(&workspace_data[ldw_tmp], 0, static_cast<uint32_T>(iyend -
                ldw_tmp) * sizeof(real_T));
      }

      iyend = workspace_size[0];
      e = (workingset_sizes[2] - 1) * workingset_ldA + 1;
      for (d = 1; workingset_ldA < 0 ? d >= e : d <= e; d += workingset_ldA) {
        b_c = 0.0;
        f = (d + workingset_nVar) - 1;
        for (ldw = d; ldw <= f; ldw++) {
          b_c += workingset_Aineq_data[ldw - 1] * solution_searchDir_data[ldw -
            d];
        }

        workspace_data[iyend] += b_c;
        iyend++;
      }
    }

    for (d = 0; d < d_tmp; d++) {
      b_c = workspace_data[ldw_tmp + d];
      if ((b_c > denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[2] + d) - 1])) {
        u0 = fabs(workspace_data[d]);
        ratio = 0.02 - workspace_data[d];
        if ((u0 <= ratio) || rtIsNaN(ratio)) {
          ratio = u0;
        }

        alphaTemp = ratio / b_c;
        if (alphaTemp < *alpha) {
          *alpha = alphaTemp;
          *constrType = 3;
          *constrIdx = d + 1;
          *newBlocking = true;
        }
      }
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    _mm_storeu_pd(&tmp[0], _mm_mul_pd(_mm_set_pd
      (solution_searchDir_data[workingset_nVar - 1],
       solution_xstar_data[workingset_nVar - 1]), _mm_set1_pd(static_cast<real_T>
      (isPhaseOne))));
    b_c = tmp[0];
    phaseOneCorrectionP = tmp[1];
    d = workingset_sizes[3];
    for (ldw = 0; ldw <= d - 2; ldw++) {
      d_tmp = workingset_indexLB_data[ldw];
      alphaTemp = -solution_searchDir_data[d_tmp - 1] - phaseOneCorrectionP;
      if ((alphaTemp > denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[3] + ldw) - 1])) {
        ratio = (-solution_xstar_data[d_tmp - 1] - workingset_lb_data[d_tmp - 1])
          - b_c;
        u0 = fabs(ratio);
        if ((!(u0 <= 0.02 - ratio)) && (!rtIsNaN(0.02 - ratio))) {
          u0 = 0.02 - ratio;
        }

        alphaTemp = u0 / alphaTemp;
        if (alphaTemp < *alpha) {
          *alpha = alphaTemp;
          *constrType = 4;
          *constrIdx = ldw + 1;
          *newBlocking = true;
        }
      }
    }

    d = workingset_indexLB_data[workingset_sizes[3] - 1] - 1;
    b_c = -solution_searchDir_data[d];
    if ((b_c > denomTol) && (!workingset_isActiveConstr_data
         [(workingset_isActiveIdx[3] + workingset_sizes[3]) - 2])) {
      ratio = -solution_xstar_data[d] - workingset_lb_data[d];
      u0 = fabs(ratio);
      if ((!(u0 <= 0.02 - ratio)) && (!rtIsNaN(0.02 - ratio))) {
        u0 = 0.02 - ratio;
      }

      alphaTemp = u0 / b_c;
      if (alphaTemp < *alpha) {
        *alpha = alphaTemp;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    if (!(*alpha <= 1.0)) {
      *alpha = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_c_checkUnboundedOrIllPosed
  (s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution, const
   s_bsf2Fsale81D2LTDCKuKhG_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_xnrm2_ap(objective->nvar, solution->searchDir.data) > 100.0
        * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_addBoundToActiveSetMatrix_
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  if (static_cast<uint16_T>(idx_bnd_local - 1) - 1 >= 0) {
    memset(&obj->ATwset.data[colOffset + 1], 0, static_cast<uint32_T>((
             static_cast<uint16_T>(idx_bnd_local - 1) + colOffset) - colOffset) *
           sizeof(real_T));
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  if (idx_bnd_local + 1 <= obj->nVar) {
    memset(&obj->ATwset.data[(idx_bnd_local + colOffset) + 1], 0,
           static_cast<uint32_T>(((obj->nVar + colOffset) - idx_bnd_local) -
            colOffset) * sizeof(real_T));
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_addAineqConstr(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T idx_local)
{
  int32_T b;
  int32_T iAineq0;
  int32_T iAw0;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  b = obj->nVar - 1;
  for (int32_T idx = 0; idx <= b; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID,
  const real_T f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *objective, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  *updateFval)
{
  real_T tempMaxConstr;
  int32_T loop_ub;
  int32_T loop_ub_0;
  boolean_T nonDegenerateWset;
  solution->iterations++;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    solution->maxConstr = proc__maxConstraintViolation_ah(workingset,
      solution->xstar.data);
    tempMaxConstr = solution->maxConstr;
    if (objective->objtype == 5) {
      tempMaxConstr = solution->maxConstr - solution->xstar.data[objective->nvar
        - 1];
    }

    if (tempMaxConstr > 0.02) {
      loop_ub_0 = solution->searchDir.size[0];
      loop_ub = solution->searchDir.size[0];
      if (loop_ub - 1 >= 0) {
        memcpy(&proc_control_B.y_data_e[0], &solution->searchDir.data[0],
               static_cast<uint32_T>(loop_ub) * sizeof(real_T));
      }

      if (static_cast<uint16_T>(objective->nvar) - 1 >= 0) {
        memcpy(&proc_control_B.y_data_e[0], &solution->xstar.data[0],
               static_cast<uint16_T>(objective->nvar) * sizeof(real_T));
      }

      if (loop_ub_0 - 1 >= 0) {
        memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_e[0],
               static_cast<uint32_T>(loop_ub_0) * sizeof(real_T));
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_float.data, memspace->workspace_float.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      tempMaxConstr = proc__maxConstraintViolation_ah(workingset,
        solution->searchDir.data);
      if (tempMaxConstr < solution->maxConstr) {
        if (static_cast<uint16_T>(objective->nvar) - 1 >= 0) {
          memcpy(&solution->xstar.data[0], &solution->searchDir.data[0],
                 static_cast<uint16_T>(objective->nvar) * sizeof(real_T));
        }

        solution->maxConstr = tempMaxConstr;
      }
    }
  }

  if (*updateFval) {
    if (options_ObjectiveLimit > (rtMinusInf)) {
      solution->fstar = proc_contro_computeFval_ReuseHx(objective,
        memspace->workspace_float.data, f_data, solution->xstar.data);
      if ((solution->fstar < options_ObjectiveLimit) && ((solution->state != 0) ||
           (objective->objtype != 5))) {
        solution->state = 2;
      }
    } else {
      *updateFval = false;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_iterate(const real_T H[19321], const real_T
  f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  __m128d tmp;
  __m128d tmp_0;
  real_T normDelta;
  real_T s;
  real_T temp;
  int32_T activeSetChangeID;
  int32_T b_iy;
  int32_T b_iyend;
  int32_T exitg1;
  int32_T globalActiveConstrIdx;
  int32_T iQR0;
  int32_T idx;
  int32_T idxRotGCol;
  int32_T iy;
  int32_T iyend;
  int32_T nVar;
  boolean_T guard1;
  boolean_T guard11;
  boolean_T guard2;
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  activeSetChangeID = 0;
  nVar = workingset->nVar;
  globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_float.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  iyend = workingset->mConstrMax;
  if (workingset->mConstrMax - 1 >= 0) {
    memset(&solution->lambda.data[0], 0, static_cast<uint32_T>
           (workingset->mConstrMax) * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (solution->state == -5) {
      guard11 = false;
      if (subProblemChanged) {
        switch (activeSetChangeID) {
         case 1:
          b_iyend = (workingset->nActiveConstr - 1) * workingset->ldA;
          if (qrmanager->mrows <= qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          b_iy = qrmanager->ldq * qrmanager->ncols;
          iQR0 = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            iyend = b_iy + qrmanager->mrows;
            if (b_iy + 1 <= iyend) {
              memset(&qrmanager->QR.data[b_iy], 0, static_cast<uint32_T>(iyend -
                      b_iy) * sizeof(real_T));
            }

            iy = (qrmanager->mrows - 1) * qrmanager->ldq + 1;
            for (iyend = 1; iQR0 < 0 ? iyend >= iy : iyend <= iy; iyend += iQR0)
            {
              normDelta = 0.0;
              idxRotGCol = (iyend + qrmanager->mrows) - 1;
              for (idx = iyend; idx <= idxRotGCol; idx++) {
                normDelta += workingset->ATwset.data[(b_iyend + idx) - iyend] *
                  qrmanager->Q.data[idx - 1];
              }

              qrmanager->QR.data[b_iy] += normDelta;
              b_iy++;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          for (idx = qrmanager->mrows - 2; idx + 2 > qrmanager->ncols; idx--) {
            iQR0 = (qrmanager->ncols - 1) * qrmanager->ldq + idx;
            temp = qrmanager->QR.data[iQR0 + 1];
            proc_control_xrotg(&qrmanager->QR.data[iQR0], &temp, &normDelta, &s);
            qrmanager->QR.data[iQR0 + 1] = temp;
            idxRotGCol = qrmanager->ldq * idx;
            b_iyend = qrmanager->mrows;
            if (qrmanager->mrows >= 1) {
              iy = qrmanager->ldq + idxRotGCol;
              for (iyend = 0; iyend < b_iyend; iyend++) {
                iQR0 = iy + iyend;
                b_iy = idxRotGCol + iyend;
                temp = qrmanager->Q.data[b_iy] * normDelta + qrmanager->
                  Q.data[iQR0] * s;
                qrmanager->Q.data[iQR0] = qrmanager->Q.data[iQR0] * normDelta -
                  qrmanager->Q.data[b_iy] * s;
                qrmanager->Q.data[b_iy] = temp;
              }
            }
          }
          break;

         case -1:
          proc_control_deleteColMoveEnd(qrmanager, globalActiveConstrIdx);
          break;

         default:
          proc_control_factorQR_a(qrmanager, workingset->ATwset.data, nVar,
            workingset->nActiveConstr, workingset->ldA);
          b_iyend = qrmanager->minRowCol;
          for (iyend = 0; iyend < b_iyend; iyend++) {
            iQR0 = qrmanager->ldq * iyend + iyend;
            b_iy = qrmanager->mrows - iyend;
            if (b_iy - 2 >= 0) {
              memcpy(&qrmanager->Q.data[iQR0 + 1], &qrmanager->QR.data[iQR0 + 1],
                     static_cast<uint32_T>(((b_iy + iQR0) - iQR0) - 1) * sizeof
                     (real_T));
            }
          }

          proc_control_xorgqr_l(qrmanager->mrows, qrmanager->mrows,
                                qrmanager->minRowCol, qrmanager->Q.data,
                                qrmanager->Q.size, qrmanager->ldq,
                                qrmanager->tau.data);
          break;
        }

        proc_control_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          normDelta = proc_control_xnrm2_ap(nVar, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        iyend = solution->searchDir.size[0];
        b_iyend = solution->searchDir.size[0];
        if (b_iyend - 1 >= 0) {
          memcpy(&proc_control_B.y_data_d[0], &solution->searchDir.data[0],
                 static_cast<uint32_T>(b_iyend) * sizeof(real_T));
        }

        if (nVar - 1 >= 0) {
          memset(&proc_control_B.y_data_d[0], 0, static_cast<uint32_T>(nVar) *
                 sizeof(real_T));
        }

        if (iyend - 1 >= 0) {
          memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_d[0],
                 static_cast<uint32_T>(iyend) * sizeof(real_T));
        }

        normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (normDelta < options_StepTolerance) ||
            (workingset->nActiveConstr >= nVar)) {
          iyend = qrmanager->ncols;
          if (qrmanager->ncols > 0) {
            guard1 = false;
            if (objective->objtype != 4) {
              normDelta = 100.0 * static_cast<real_T>(qrmanager->mrows) *
                2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                idxRotGCol = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  idx = (qrmanager->ncols - 1) * qrmanager->ldq +
                    qrmanager->mrows;
                  while ((idxRotGCol > qrmanager->mrows) && (fabs
                          (qrmanager->QR.data[idx - 1]) >= normDelta)) {
                    idxRotGCol--;
                    idx -= qrmanager->ldq;
                  }

                  updateFval = (idxRotGCol == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  idx = (idxRotGCol - 1) * qrmanager->ldq + idxRotGCol;
                  while ((idxRotGCol >= 1) && (fabs(qrmanager->QR.data[idx - 1])
                          >= normDelta)) {
                    idxRotGCol--;
                    idx = (idx - qrmanager->ldq) - 1;
                  }

                  updateFval = (idxRotGCol == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              idx = qrmanager->ldq;
              if (qrmanager->mrows != 0) {
                memset(&memspace->workspace_float.data[0], 0,
                       static_cast<uint32_T>(qrmanager->ncols) * sizeof(real_T));
                b_iy = 0;
                iy = (qrmanager->ncols - 1) * qrmanager->ldq + 1;
                for (b_iyend = 1; idx < 0 ? b_iyend >= iy : b_iyend <= iy;
                     b_iyend += idx) {
                  normDelta = 0.0;
                  idxRotGCol = (b_iyend + qrmanager->mrows) - 1;
                  for (iQR0 = b_iyend; iQR0 <= idxRotGCol; iQR0++) {
                    normDelta += qrmanager->Q.data[iQR0 - 1] *
                      objective->grad.data[iQR0 - b_iyend];
                  }

                  memspace->workspace_float.data[b_iy] += normDelta;
                  b_iy++;
                }
              }

              if (qrmanager->ncols != 0) {
                for (b_iyend = iyend; b_iyend >= 1; b_iyend--) {
                  iy = ((b_iyend - 1) * idx + b_iyend) - 2;
                  memspace->workspace_float.data[b_iyend - 1] /=
                    qrmanager->QR.data[iy + 1];
                  for (iQR0 = 0; iQR0 <= b_iyend - 2; iQR0++) {
                    idxRotGCol = (b_iyend - iQR0) - 2;
                    memspace->workspace_float.data[idxRotGCol] -=
                      memspace->workspace_float.data[b_iyend - 1] *
                      qrmanager->QR.data[iy - iQR0];
                  }
                }
              }

              b_iyend = (qrmanager->ncols / 2) << 1;
              idx = b_iyend - 2;
              for (idxRotGCol = 0; idxRotGCol <= idx; idxRotGCol += 2) {
                tmp = _mm_loadu_pd(&memspace->workspace_float.data[idxRotGCol]);
                _mm_storeu_pd(&solution->lambda.data[idxRotGCol], _mm_mul_pd(tmp,
                  _mm_set1_pd(-1.0)));
              }

              for (idxRotGCol = b_iyend; idxRotGCol < iyend; idxRotGCol++) {
                solution->lambda.data[idxRotGCol] =
                  -memspace->workspace_float.data[idxRotGCol];
              }
            }
          }

          if ((solution->state != -7) || (workingset->nActiveConstr > nVar)) {
            iyend = 0;
            normDelta = 0.0;
            idx = (workingset->nWConstr[0] + workingset->nWConstr[1]) + 1;
            b_iyend = workingset->nActiveConstr;
            for (idxRotGCol = idx; idxRotGCol <= b_iyend; idxRotGCol++) {
              temp = solution->lambda.data[idxRotGCol - 1];
              if (temp < normDelta) {
                normDelta = temp;
                iyend = idxRotGCol;
              }
            }

            if (iyend == 0) {
              solution->state = 1;
            } else {
              activeSetChangeID = -1;
              globalActiveConstrIdx = iyend;
              subProblemChanged = true;
              proc_control_removeConstr(workingset, iyend);
              if (iyend < workingset->nActiveConstr + 1) {
                solution->lambda.data[iyend - 1] = solution->
                  lambda.data[workingset->nActiveConstr];
              }

              solution->lambda.data[workingset->nActiveConstr] = 0.0;
            }
          } else {
            iyend = workingset->nActiveConstr;
            activeSetChangeID = 0;
            globalActiveConstrIdx = workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_float.data,
            memspace->workspace_float.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            (objective->objtype == 5), &normDelta, &updateFval, &idxRotGCol,
            &iyend);
          if (updateFval) {
            switch (idxRotGCol) {
             case 3:
              proc_control_addAineqConstr(workingset, iyend);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4, iyend);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5, iyend);
              break;
            }

            activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((nVar >= 1) && (!(normDelta == 0.0))) {
            b_iyend = (nVar / 2) << 1;
            idx = b_iyend - 2;
            for (idxRotGCol = 0; idxRotGCol <= idx; idxRotGCol += 2) {
              tmp = _mm_loadu_pd(&solution->searchDir.data[idxRotGCol]);
              tmp_0 = _mm_loadu_pd(&solution->xstar.data[idxRotGCol]);
              _mm_storeu_pd(&solution->xstar.data[idxRotGCol], _mm_add_pd
                            (_mm_mul_pd(_mm_set1_pd(normDelta), tmp), tmp_0));
            }

            for (idxRotGCol = b_iyend; idxRotGCol < nVar; idxRotGCol++) {
              solution->xstar.data[idxRotGCol] += normDelta *
                solution->searchDir.data[idxRotGCol];
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&activeSetChangeID, f_data, solution,
          memspace, objective, workingset, qrmanager, options_ObjectiveLimit,
          runTimeOptions_MaxIterations, &updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_float.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[19321], const real_T f_data[],
  const real_T x_data[])
{
  int32_T beta1;
  beta1 = 0;
  if (obj_hasLinear) {
    if (static_cast<uint16_T>(obj_nvar) - 1 >= 0) {
      memcpy(&workspace_data[0], &f_data[0], static_cast<uint16_T>(obj_nvar) *
             sizeof(real_T));
    }

    beta1 = 1;
  }

  if (obj_nvar != 0) {
    int32_T e;
    int32_T ix;
    if (beta1 != 1) {
      memset(&workspace_data[0], 0, static_cast<uint16_T>(obj_nvar) * sizeof
             (real_T));
    }

    ix = 0;
    e = (obj_nvar - 1) * obj_nvar + 1;
    for (beta1 = 1; obj_nvar < 0 ? beta1 >= e : beta1 <= e; beta1 += obj_nvar) {
      real_T c;
      int32_T g;
      c = 0.5 * x_data[ix];
      g = (beta1 + obj_nvar) - 1;
      for (int32_T b = beta1; b <= g; b++) {
        int32_T tmp;
        tmp = b - beta1;
        workspace_data[tmp] += H[b - 1] * c;
      }

      ix++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_control_computeFval(const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *obj, real_T workspace_data[], const real_T H
  [19321], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  int32_T b;
  int32_T c_tmp_tmp;
  int32_T idx;
  int32_T scalarLB;
  int32_T vectorUB;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      b = static_cast<uint16_T>(obj->nvar);
      for (idx = 0; idx < b; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;

   default:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    b = obj->nvar + 1;
    c_tmp_tmp = obj->maxVar - 1;
    scalarLB = (((((obj->maxVar - obj->nvar) - 1) / 2) << 1) + obj->nvar) + 1;
    vectorUB = scalarLB - 2;
    for (idx = b; idx <= vectorUB; idx += 2) {
      _mm_storeu_pd(&workspace_data[idx - 1], _mm_add_pd(_mm_mul_pd(_mm_set1_pd
        (0.5 * obj->beta), _mm_loadu_pd(&x_data[idx - 1])), _mm_set1_pd(obj->rho)));
    }

    for (idx = scalarLB; idx <= c_tmp_tmp; idx++) {
      workspace_data[idx - 1] = 0.5 * obj->beta * x_data[idx - 1] + obj->rho;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      b = static_cast<uint16_T>(obj->maxVar - 1);
      for (idx = 0; idx < b; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_phaseone(const real_T H[19321], const real_T
  f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options, const
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  int32_T PROBTYPE_ORIG;
  int32_T idxEndIneq;
  int32_T idxStartIneq;
  int32_T idxStartIneq_tmp;
  int32_T mConstr;
  int32_T nVar_tmp;
  boolean_T exitg1;
  PROBTYPE_ORIG = workingset->probType;
  nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    mConstr = 1;
  } else {
    mConstr = 4;
  }

  proc_control_setProblemType(workingset, mConstr);
  idxStartIneq_tmp = workingset->nWConstr[0] + workingset->nWConstr[1];
  idxStartIneq = idxStartIneq_tmp + 1;
  idxEndIneq = workingset->nActiveConstr;
  for (mConstr = idxStartIneq; mConstr <= idxEndIneq; mConstr++) {
    workingset->isActiveConstr.data[(workingset->isActiveIdx
      [workingset->Wid.data[mConstr - 1] - 1] + workingset->
      Wlocalidx.data[mConstr - 1]) - 2] = false;
  }

  workingset->nWConstr[2] = 0;
  workingset->nWConstr[3] = 0;
  workingset->nWConstr[4] = 0;
  workingset->nActiveConstr = idxStartIneq_tmp;
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = proc_control_computeFval(objective,
    memspace->workspace_float.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                       cholmanager, objective, options->SolverName,
                       options->StepTolerance, options->ObjectiveLimit,
                       runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (mConstr <= workingset->nActiveConstr)) {
      if ((workingset->Wid.data[mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[mConstr - 1] == workingset->sizes[3])) {
        proc_control_removeConstr(workingset, mConstr);
        exitg1 = true;
      } else {
        mConstr++;
      }
    }
  }

  mConstr = workingset->nActiveConstr;
  while ((mConstr > workingset->sizes[0] + 130) && (mConstr > nVar_tmp)) {
    proc_control_removeConstr(workingset, mConstr);
    mConstr--;
  }

  solution->maxConstr = solution->xstar.data[nVar_tmp];
  proc_control_setProblemType(workingset, PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_driver_m(const real_T H[19321], const real_T
  f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options,
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  real_T maxConstr_new;
  int32_T b;
  int32_T idx;
  int32_T nVar;
  boolean_T guard1;
  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  nVar = workingset->nVar;
  guard1 = false;
  if (workingset->probType == 3) {
    b = static_cast<uint16_T>(workingset->sizes[0]);
    for (idx = 0; idx < b; idx++) {
      solution->xstar.data[workingset->indexFixed.data[idx] - 1] =
        workingset->ub.data[workingset->indexFixed.data[idx] - 1];
    }

    b = static_cast<uint16_T>(workingset->sizes[3]);
    for (idx = 0; idx < b; idx++) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] + idx) - 1])
      {
        solution->xstar.data[workingset->indexLB.data[idx] - 1] =
          -workingset->lb.data[workingset->indexLB.data[idx] - 1];
      }
    }

    b = static_cast<uint16_T>(workingset->sizes[4]);
    for (idx = 0; idx < b; idx++) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] + idx) - 1])
      {
        solution->xstar.data[workingset->indexUB.data[idx] - 1] =
          workingset->ub.data[workingset->indexUB.data[idx] - 1];
      }
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    solution->maxConstr = proc__maxConstraintViolation_ah(workingset,
      solution->xstar.data);
    if (solution->maxConstr > 0.02) {
      proc_control_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                            cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        solution->maxConstr = proc__maxConstraintViolation_ah(workingset,
          solution->xstar.data);
        if (solution->maxConstr > 0.02) {
          if (workingset->mConstrMax - 1 >= 0) {
            memset(&solution->lambda.data[0], 0, static_cast<uint32_T>
                   (workingset->mConstrMax) * sizeof(real_T));
          }

          solution->fstar = proc_control_computeFval(objective,
            memspace->workspace_float.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (solution->maxConstr > 0.0) {
            b = solution->searchDir.size[0];
            idx = solution->searchDir.size[0];
            if (idx - 1 >= 0) {
              memcpy(&proc_control_B.y_data_bn[0], &solution->searchDir.data[0],
                     static_cast<uint32_T>(idx) * sizeof(real_T));
            }

            nVar = static_cast<uint16_T>(nVar);
            if (nVar - 1 >= 0) {
              memcpy(&proc_control_B.y_data_bn[0], &solution->xstar.data[0],
                     static_cast<uint32_T>(nVar) * sizeof(real_T));
            }

            if (b - 1 >= 0) {
              memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_bn[0],
                     static_cast<uint32_T>(b) * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            maxConstr_new = proc__maxConstraintViolation_ah(workingset,
              solution->xstar.data);
            if (maxConstr_new >= solution->maxConstr) {
              solution->maxConstr = maxConstr_new;
              b = solution->xstar.size[0];
              idx = solution->xstar.size[0];
              if (idx - 1 >= 0) {
                memcpy(&proc_control_B.y_data_bn[0], &solution->xstar.data[0],
                       static_cast<uint32_T>(idx) * sizeof(real_T));
              }

              if (nVar - 1 >= 0) {
                memcpy(&proc_control_B.y_data_bn[0], &solution->searchDir.data[0],
                       static_cast<uint32_T>(nVar) * sizeof(real_T));
              }

              if (b - 1 >= 0) {
                memcpy(&solution->xstar.data[0], &proc_control_B.y_data_bn[0],
                       static_cast<uint32_T>(b) * sizeof(real_T));
              }
            }
          }

          proc_control_iterate(H, f_data, solution, memspace, workingset,
                               qrmanager, cholmanager, objective,
                               options->SolverName, options->StepTolerance,
                               options->ObjectiveLimit,
                               runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                           cholmanager, objective, options->SolverName,
                           options->StepTolerance, options->ObjectiveLimit,
                           runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_addAeqConstr(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T idx_local)
{
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    int32_T b_idx;
    int32_T iAeq0;
    int32_T iAw0;
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    b_idx = static_cast<uint16_T>(obj->nVar);
    for (totalEq = 0; totalEq < b_idx; totalEq++) {
      obj->ATwset.data[iAw0 + totalEq] = obj->Aeq.data[iAeq0 + totalEq];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    int32_T iAeq0;
    int32_T iAw0;
    int32_T iAw0_tmp;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = obj->Wlocalidx.data[totalEq];
    iAw0_tmp = static_cast<uint16_T>(obj->nVar);
    for (iAeq0 = 0; iAeq0 < iAw0_tmp; iAeq0++) {
      obj->ATwset.data[iAeq0 + obj->ldA * (obj->nActiveConstr - 1)] =
        obj->ATwset.data[obj->ldA * totalEq + iAeq0];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (int32_T b_idx = 0; b_idx < iAw0_tmp; b_idx++) {
      obj->ATwset.data[iAw0 + b_idx] = obj->Aeq.data[iAeq0 + b_idx];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
boolean_T proc_control::proc_control_soc(const real_T Hessian[19321], const
  real_T grad_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  __m128d tmp;
  __m128d tmp_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_1;
  real_T b_c;
  int32_T idxIneqOffset;
  int32_T idxStartIneq;
  int32_T idx_Aineq;
  int32_T idx_lower;
  int32_T ix;
  int32_T iy;
  int32_T n;
  int32_T nVar;
  int32_T nWIneq_old;
  int32_T nWLower_old;
  int32_T nWUpper_old;
  boolean_T success;
  nWIneq_old = WorkingSet->nWConstr[2];
  nWLower_old = WorkingSet->nWConstr[3];
  nWUpper_old = WorkingSet->nWConstr[4];
  nVar = WorkingSet->nVar;
  idxStartIneq = static_cast<uint16_T>(WorkingSet->nVar);
  for (idxIneqOffset = 0; idxIneqOffset < idxStartIneq; idxIneqOffset++) {
    TrialState->xstarsqp[idxIneqOffset] = TrialState->xstarsqp_old[idxIneqOffset];
    TrialState->socDirection.data[idxIneqOffset] = TrialState->
      xstar.data[idxIneqOffset];
  }

  if (static_cast<uint16_T>(WorkingSet->mConstrMax) - 1 >= 0) {
    memcpy(&TrialState->lambdaStopTest.data[0], &TrialState->lambda.data[0],
           static_cast<uint16_T>(WorkingSet->mConstrMax) * sizeof(real_T));
  }

  idxIneqOffset = WorkingSet->isActiveIdx[2];
  for (idxStartIneq = 0; idxStartIneq <= 128; idxStartIneq += 2) {
    tmp_0 = _mm_loadu_pd(&TrialState->cEq[idxStartIneq]);
    _mm_storeu_pd(&WorkingSet->beq[idxStartIneq], _mm_mul_pd(tmp_0, _mm_set1_pd(
      -1.0)));
  }

  idx_lower = WorkingSet->ldA;
  iy = 0;
  n = WorkingSet->ldA * 129 + 1;
  for (idxStartIneq = 1; idx_lower < 0 ? idxStartIneq >= n : idxStartIneq <= n;
       idxStartIneq += idx_lower) {
    b_c = 0.0;
    ix = (idxStartIneq + WorkingSet->nVar) - 1;
    for (idx_Aineq = idxStartIneq; idx_Aineq <= ix; idx_Aineq++) {
      b_c += WorkingSet->Aeq.data[idx_Aineq - 1] * TrialState->
        searchDir.data[idx_Aineq - idxStartIneq];
    }

    WorkingSet->beq[iy] += b_c;
    iy++;
  }

  for (idxStartIneq = 0; idxStartIneq < 130; idxStartIneq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + idxStartIneq] =
      WorkingSet->beq[idxStartIneq];
  }

  if (WorkingSet->sizes[2] > 0) {
    idx_Aineq = static_cast<uint16_T>(WorkingSet->sizes[2]);
    iy = (static_cast<uint16_T>(WorkingSet->sizes[2]) / 2) << 1;
    n = iy - 2;
    for (idxStartIneq = 0; idxStartIneq <= n; idxStartIneq += 2) {
      tmp_0 = _mm_loadu_pd(&TrialState->cIneq.data[idxStartIneq]);
      _mm_storeu_pd(&WorkingSet->bineq.data[idxStartIneq], _mm_mul_pd(tmp_0,
        _mm_set1_pd(-1.0)));
    }

    for (idxStartIneq = iy; idxStartIneq < idx_Aineq; idxStartIneq++) {
      WorkingSet->bineq.data[idxStartIneq] = -TrialState->
        cIneq.data[idxStartIneq];
    }

    iy = 0;
    n = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    for (idxStartIneq = 1; idx_lower < 0 ? idxStartIneq >= n : idxStartIneq <= n;
         idxStartIneq += idx_lower) {
      b_c = 0.0;
      ix = (idxStartIneq + WorkingSet->nVar) - 1;
      for (idx_Aineq = idxStartIneq; idx_Aineq <= ix; idx_Aineq++) {
        b_c += WorkingSet->Aineq.data[idx_Aineq - 1] *
          TrialState->searchDir.data[idx_Aineq - idxStartIneq];
      }

      WorkingSet->bineq.data[iy] += b_c;
      iy++;
    }

    idx_Aineq = 1;
    idx_lower = WorkingSet->sizes[2] + 1;
    iy = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    n = WorkingSet->nActiveConstr;
    for (idxStartIneq = idxIneqOffset; idxStartIneq <= n; idxStartIneq++) {
      switch (WorkingSet->Wid.data[idxStartIneq - 1]) {
       case 3:
        ix = idx_Aineq;
        idx_Aineq++;
        WorkingSet->bwset.data[idxStartIneq - 1] = WorkingSet->
          bineq.data[WorkingSet->Wlocalidx.data[idxStartIneq - 1] - 1];
        break;

       case 4:
        ix = idx_lower;
        idx_lower++;
        break;

       default:
        ix = iy;
        iy++;
        break;
      }

      TrialState->workingset_old.data[ix - 1] = WorkingSet->
        Wlocalidx.data[idxStartIneq - 1];
    }
  }

  memcpy(&TrialState->xstar.data[0], &TrialState->xstarsqp[0],
         static_cast<uint16_T>(WorkingSet->nVar) * sizeof(real_T));
  qpoptions_0 = *qpoptions;
  qpoptions_1 = *qpoptions;
  proc_control_driver_m(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective, &qpoptions_0,
                        &qpoptions_1);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  idxStartIneq = static_cast<uint16_T>(nVar);
  iy = (static_cast<uint16_T>(nVar) / 2) << 1;
  n = iy - 2;
  for (idxIneqOffset = 0; idxIneqOffset <= n; idxIneqOffset += 2) {
    tmp_0 = _mm_loadu_pd(&TrialState->socDirection.data[idxIneqOffset]);
    tmp = _mm_loadu_pd(&TrialState->xstar.data[idxIneqOffset]);
    _mm_storeu_pd(&TrialState->socDirection.data[idxIneqOffset], _mm_sub_pd(tmp,
      tmp_0));
    _mm_storeu_pd(&TrialState->xstar.data[idxIneqOffset], tmp_0);
  }

  for (idxIneqOffset = iy; idxIneqOffset < idxStartIneq; idxIneqOffset++) {
    b_c = TrialState->socDirection.data[idxIneqOffset];
    TrialState->socDirection.data[idxIneqOffset] = TrialState->
      xstar.data[idxIneqOffset] - b_c;
    TrialState->xstar.data[idxIneqOffset] = b_c;
  }

  success = (proc_control_xnrm2_ap(nVar, TrialState->socDirection.data) <= 2.0 *
             proc_control_xnrm2_ap(nVar, TrialState->xstar.data));
  idxIneqOffset = WorkingSet->sizes[2];
  for (nVar = 0; nVar <= 128; nVar += 2) {
    tmp_0 = _mm_loadu_pd(&TrialState->cEq[nVar]);
    _mm_storeu_pd(&WorkingSet->beq[nVar], _mm_mul_pd(tmp_0, _mm_set1_pd(-1.0)));
  }

  for (nVar = 0; nVar < 130; nVar++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + nVar] = WorkingSet->beq[nVar];
  }

  if (WorkingSet->sizes[2] > 0) {
    idxStartIneq = static_cast<uint16_T>(WorkingSet->sizes[2]);
    iy = (static_cast<uint16_T>(WorkingSet->sizes[2]) / 2) << 1;
    n = iy - 2;
    for (nVar = 0; nVar <= n; nVar += 2) {
      tmp_0 = _mm_loadu_pd(&TrialState->cIneq.data[nVar]);
      _mm_storeu_pd(&WorkingSet->bineq.data[nVar], _mm_mul_pd(tmp_0, _mm_set1_pd
        (-1.0)));
    }

    for (nVar = iy; nVar < idxStartIneq; nVar++) {
      WorkingSet->bineq.data[nVar] = -TrialState->cIneq.data[nVar];
    }

    if (!success) {
      iy = WorkingSet->nWConstr[0] + WorkingSet->nWConstr[1];
      idxStartIneq = iy + 1;
      idx_Aineq = WorkingSet->nActiveConstr;
      for (nVar = idxStartIneq; nVar <= idx_Aineq; nVar++) {
        WorkingSet->isActiveConstr.data[(WorkingSet->isActiveIdx
          [WorkingSet->Wid.data[nVar - 1] - 1] + WorkingSet->Wlocalidx.data[nVar
          - 1]) - 2] = false;
      }

      WorkingSet->nWConstr[2] = 0;
      WorkingSet->nWConstr[3] = 0;
      WorkingSet->nWConstr[4] = 0;
      WorkingSet->nActiveConstr = iy;
      for (nVar = 0; nVar < nWIneq_old; nVar++) {
        proc_control_addAineqConstr(WorkingSet, TrialState->
          workingset_old.data[nVar]);
      }

      for (nWIneq_old = 0; nWIneq_old < nWLower_old; nWIneq_old++) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[nWIneq_old + idxIneqOffset]);
      }

      for (nWLower_old = 0; nWLower_old < nWUpper_old; nWLower_old++) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(nWLower_old + idxIneqOffset) +
          WorkingSet->sizes[3]]);
      }
    }
  }

  if (!success) {
    if (static_cast<uint16_T>(WorkingSet->mConstrMax) - 1 >= 0) {
      memcpy(&TrialState->lambda.data[0], &TrialState->lambdaStopTest.data[0],
             static_cast<uint16_T>(WorkingSet->mConstrMax) * sizeof(real_T));
    }
  } else {
    proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
      WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
      WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
  }

  return success;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_normal(const real_T Hessian[19321], const real_T
  grad_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_1;
  real_T TrialState_0;
  real_T constrViolationEq;
  real_T constrViolationIneq;
  real_T penaltyParamTrial;
  int32_T b;
  int32_T k;
  boolean_T nonlinEqRemoved;
  qpoptions_0 = *qpoptions;
  qpoptions_1 = *qpoptions;
  proc_control_driver_m(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective, &qpoptions_0,
                        &qpoptions_1);
  if (TrialState->state > 0) {
    penaltyParamTrial = MeritFunction->penaltyParam;
    constrViolationEq = 0.0;
    for (k = 0; k < 130; k++) {
      constrViolationEq += fabs(TrialState->cEq[k]);
    }

    constrViolationIneq = 0.0;
    b = static_cast<uint16_T>(WorkingSet->sizes[2]);
    for (k = 0; k < b; k++) {
      TrialState_0 = TrialState->cIneq.data[k];
      if (TrialState_0 > 0.0) {
        constrViolationIneq += TrialState_0;
      }
    }

    constrViolationEq += constrViolationIneq;
    constrViolationIneq = MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    constrViolationIneq += constrViolationEq;
    if ((constrViolationIneq > 2.2204460492503131E-16) && (TrialState->fstar >
         0.0)) {
      if (TrialState->sqpFval == 0.0) {
        penaltyParamTrial = 1.0;
      } else {
        penaltyParamTrial = 1.5;
      }

      penaltyParamTrial = penaltyParamTrial * TrialState->fstar /
        constrViolationIneq;
    }

    if (penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = penaltyParamTrial * constrViolationEq +
        TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * penaltyParamTrial +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (penaltyParamTrial >= 1.0E-10) {
          MeritFunction->penaltyParam = penaltyParamTrial;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam * constrViolationEq +
          TrialState->sqpFval;
      }
    } else {
      if (penaltyParamTrial >= 1.0E-10) {
        MeritFunction->penaltyParam = penaltyParamTrial;
      } else {
        MeritFunction->penaltyParam = 1.0E-10;
      }

      MeritFunction->phi = MeritFunction->penaltyParam * constrViolationEq +
        TrialState->sqpFval;
    }

    constrViolationEq = TrialState->fstar - MeritFunction->penaltyParam *
      constrViolationEq;
    if (constrViolationEq <= 0.0) {
      MeritFunction->phiPrimePlus = constrViolationEq;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }
  }

  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (k = 0; k < 130; k++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + k] = k + 1;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_relaxed(const real_T Hessian[19321], const
  real_T grad_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_1;
  real_T beta;
  real_T qpfvalQuadExcess;
  real_T qpfvalQuadExcess_tmp;
  real_T s;
  real_T smax;
  int32_T idx_max;
  int32_T ix;
  int32_T ix_tmp;
  int32_T mFiniteLBOrig;
  int32_T mLBOrig;
  int32_T nVarOrig;
  boolean_T b_tf;
  boolean_T tf;
  nVarOrig = WorkingSet->nVar - 1;
  beta = 0.0;
  idx_max = static_cast<uint16_T>(WorkingSet->nVar);
  mLBOrig = 0;
  for (mFiniteLBOrig = 0; mFiniteLBOrig < idx_max; mFiniteLBOrig++) {
    beta += Hessian[mLBOrig];
    mLBOrig += 140;
  }

  beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    mLBOrig = QPObjective->nvar;
    if (QPObjective->nvar < 1) {
      idx_max = 0;
    } else {
      idx_max = 1;
      if (QPObjective->nvar > 1) {
        smax = fabs(grad_data[0]);
        for (mFiniteLBOrig = 2; mFiniteLBOrig <= mLBOrig; mFiniteLBOrig++) {
          s = fabs(grad_data[mFiniteLBOrig - 1]);
          if (s > smax) {
            idx_max = mFiniteLBOrig;
            smax = s;
          }
        }
      }
    }

    s = fabs(grad_data[idx_max - 1]);
    if ((s <= 1.0) || rtIsNaN(s)) {
      s = 1.0;
    }

    smax = 100.0 * s;
  } else {
    mLBOrig = WorkingSet->mConstr;
    if (WorkingSet->mConstr < 1) {
      idx_max = 0;
    } else {
      idx_max = 1;
      if (WorkingSet->mConstr > 1) {
        smax = fabs(TrialState->lambdasqp.data[0]);
        for (mFiniteLBOrig = 2; mFiniteLBOrig <= mLBOrig; mFiniteLBOrig++) {
          s = fabs(TrialState->lambdasqp.data[mFiniteLBOrig - 1]);
          if (s > smax) {
            idx_max = mFiniteLBOrig;
            smax = s;
          }
        }
      }
    }

    smax = fabs(TrialState->lambdasqp.data[idx_max - 1]);
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->beta = beta;
  QPObjective->rho = smax;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 4;
  proc_control_B.b_WorkingSet = *WorkingSet;
  proc_control_setProblemType(&proc_control_B.b_WorkingSet, 2);
  idx_max = proc_control_B.b_WorkingSet.sizes[2] + 1;
  mLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
             proc_control_B.b_WorkingSet.sizes[2]) - 260;
  ix_tmp = static_cast<uint16_T>(proc_control_B.b_WorkingSet.sizes[2]);
  if (ix_tmp - 1 >= 0) {
    memcpy(&memspace->workspace_float.data[0],
           &proc_control_B.b_WorkingSet.bineq.data[0], static_cast<uint32_T>
           (ix_tmp) * sizeof(real_T));
  }

  proc_control_xgemv_jhnw4qt(WorkingSet->nVar,
    proc_control_B.b_WorkingSet.sizes[2], proc_control_B.b_WorkingSet.Aineq.data,
    proc_control_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_float.data);
  for (mFiniteLBOrig = 0; mFiniteLBOrig < ix_tmp; mFiniteLBOrig++) {
    TrialState->xstar.data[(nVarOrig + mFiniteLBOrig) + 1] = static_cast<real_T>
      (memspace->workspace_float.data[mFiniteLBOrig] > 0.0) *
      memspace->workspace_float.data[mFiniteLBOrig];
  }

  memcpy(&memspace->workspace_float.data[0], &proc_control_B.b_WorkingSet.beq[0],
         130U * sizeof(real_T));
  proc_control_xgemv_jhnw4qt(WorkingSet->nVar, 130,
    proc_control_B.b_WorkingSet.Aeq.data, proc_control_B.b_WorkingSet.ldA,
    TrialState->xstar.data, memspace->workspace_float.data);
  for (mFiniteLBOrig = 0; mFiniteLBOrig < 130; mFiniteLBOrig++) {
    ix_tmp = idx_max + mFiniteLBOrig;
    if (memspace->workspace_float.data[mFiniteLBOrig] <= 0.0) {
      TrialState->xstar.data[nVarOrig + ix_tmp] = 0.0;
      TrialState->xstar.data[(nVarOrig + ix_tmp) + 130] =
        -memspace->workspace_float.data[mFiniteLBOrig];
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4, mLBOrig +
        ix_tmp);
      if (memspace->workspace_float.data[mFiniteLBOrig] >= -0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          (mLBOrig + ix_tmp) + 130);
      }
    } else {
      ix = nVarOrig + ix_tmp;
      TrialState->xstar.data[ix] = memspace->workspace_float.data[mFiniteLBOrig];
      TrialState->xstar.data[ix + 130] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4, (mLBOrig
        + ix_tmp) + 130);
      if (memspace->workspace_float.data[mFiniteLBOrig] <= 0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4, mLBOrig
          + ix_tmp);
      }
    }
  }

  nVarOrig = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_B.b_WorkingSet.nVar) - WorkingSet->nVar;
  qpoptions_0 = *qpoptions;
  qpoptions_1 = *qpoptions;
  proc_control_driver_m(Hessian, grad_data, TrialState, memspace,
                        &proc_control_B.b_WorkingSet, QRManager, CholManager,
                        QPObjective, &qpoptions_0, &qpoptions_1);
  qpoptions->MaxIterations = nVarOrig;
  idx_max = proc_control_B.b_WorkingSet.sizes[3] - 261;
  nVarOrig = 0;
  for (mFiniteLBOrig = 0; mFiniteLBOrig < 130; mFiniteLBOrig++) {
    mLBOrig = (proc_control_B.b_WorkingSet.isActiveIdx[3] + idx_max) +
      mFiniteLBOrig;
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data[mLBOrig];
    b_tf = proc_control_B.b_WorkingSet.isActiveConstr.data[mLBOrig + 130];
    memspace->workspace_int.data[mFiniteLBOrig] = tf;
    memspace->workspace_int.data[mFiniteLBOrig + 130] = b_tf;
    nVarOrig = (nVarOrig + tf) + b_tf;
  }

  mLBOrig = static_cast<uint16_T>(proc_control_B.b_WorkingSet.sizes[2]);
  for (mFiniteLBOrig = 0; mFiniteLBOrig < mLBOrig; mFiniteLBOrig++) {
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data
      [((proc_control_B.b_WorkingSet.isActiveIdx[3] + idx_max) -
        proc_control_B.b_WorkingSet.sizes[2]) + mFiniteLBOrig];
    memspace->workspace_int.data[mFiniteLBOrig + 260] = tf;
    nVarOrig += tf;
  }

  if (TrialState->state != -6) {
    idx_max = (proc_control_B.b_WorkingSet.nVarMax - WorkingSet->nVar) - 1;
    ix_tmp = WorkingSet->nVar + 1;
    s = 0.0;
    qpfvalQuadExcess = 0.0;
    if (idx_max >= 1) {
      ix = WorkingSet->nVar + idx_max;
      for (mFiniteLBOrig = ix_tmp; mFiniteLBOrig <= ix; mFiniteLBOrig++) {
        s += fabs(TrialState->xstar.data[mFiniteLBOrig - 1]);
      }

      idx_max = static_cast<uint16_T>(idx_max);
      for (mFiniteLBOrig = 0; mFiniteLBOrig < idx_max; mFiniteLBOrig++) {
        qpfvalQuadExcess_tmp = TrialState->xstar.data[WorkingSet->nVar +
          mFiniteLBOrig];
        qpfvalQuadExcess += qpfvalQuadExcess_tmp * qpfvalQuadExcess_tmp;
      }
    }

    beta = (TrialState->fstar - smax * s) - beta / 2.0 * qpfvalQuadExcess;
    mLBOrig = (WorkingSet->nVarMax - WorkingSet->nVar) - 1;
    smax = MeritFunction->penaltyParam;
    s = 0.0;
    for (mFiniteLBOrig = 0; mFiniteLBOrig < 130; mFiniteLBOrig++) {
      s += fabs(TrialState->cEq[mFiniteLBOrig]);
    }

    qpfvalQuadExcess = 0.0;
    ix = static_cast<uint16_T>(WorkingSet->sizes[2]);
    for (mFiniteLBOrig = 0; mFiniteLBOrig < ix; mFiniteLBOrig++) {
      qpfvalQuadExcess_tmp = TrialState->cIneq.data[mFiniteLBOrig];
      if (qpfvalQuadExcess_tmp > 0.0) {
        qpfvalQuadExcess += qpfvalQuadExcess_tmp;
      }
    }

    s += qpfvalQuadExcess;
    qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    qpfvalQuadExcess_tmp = 0.0;
    if (mLBOrig >= 1) {
      mLBOrig += WorkingSet->nVar;
      for (mFiniteLBOrig = ix_tmp; mFiniteLBOrig <= mLBOrig; mFiniteLBOrig++) {
        qpfvalQuadExcess_tmp += fabs(TrialState->xstar.data[mFiniteLBOrig - 1]);
      }
    }

    MeritFunction->linearizedConstrViol = qpfvalQuadExcess_tmp;
    qpfvalQuadExcess = (s + qpfvalQuadExcess) - qpfvalQuadExcess_tmp;
    if ((qpfvalQuadExcess > 2.2204460492503131E-16) && (beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        smax = 1.0;
      } else {
        smax = 1.5;
      }

      smax = smax * beta / qpfvalQuadExcess;
    }

    if (smax < MeritFunction->penaltyParam) {
      MeritFunction->phi = smax * s + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * smax +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (smax >= 1.0E-10) {
          MeritFunction->penaltyParam = smax;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam * s +
          TrialState->sqpFval;
      }
    } else {
      if (smax >= 1.0E-10) {
        MeritFunction->penaltyParam = smax;
      } else {
        MeritFunction->penaltyParam = 1.0E-10;
      }

      MeritFunction->phi = MeritFunction->penaltyParam * s + TrialState->sqpFval;
    }

    beta -= MeritFunction->penaltyParam * s;
    if (beta <= 0.0) {
      MeritFunction->phiPrimePlus = beta;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }

    idx_max = proc_control_B.b_WorkingSet.isActiveIdx[1] - 1;
    for (mFiniteLBOrig = 0; mFiniteLBOrig < 130; mFiniteLBOrig++) {
      if (memspace->workspace_int.data[mFiniteLBOrig] != 0) {
        tf = (memspace->workspace_int.data[mFiniteLBOrig + 130] != 0);
      } else {
        tf = false;
      }

      mLBOrig = idx_max + mFiniteLBOrig;
      TrialState->lambda.data[mLBOrig] *= static_cast<real_T>(tf);
    }

    idx_max = proc_control_B.b_WorkingSet.isActiveIdx[2];
    mLBOrig = proc_control_B.b_WorkingSet.nActiveConstr;
    for (mFiniteLBOrig = idx_max; mFiniteLBOrig <= mLBOrig; mFiniteLBOrig++) {
      if (proc_control_B.b_WorkingSet.Wid.data[mFiniteLBOrig - 1] == 3) {
        TrialState->lambda.data[mFiniteLBOrig - 1] *= static_cast<real_T>
          (memspace->
           workspace_int.data[proc_control_B.b_WorkingSet.Wlocalidx.data[mFiniteLBOrig
           - 1] + 259]);
      }
    }
  }

  proc_control_B.c_WorkingSet = proc_control_B.b_WorkingSet;
  mFiniteLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
                   proc_control_B.b_WorkingSet.sizes[2]) - 260;
  idx_max = proc_control_B.b_WorkingSet.nActiveConstr;
  while ((idx_max > proc_control_B.b_WorkingSet.sizes[0] + 130) && (nVarOrig > 0))
  {
    if ((proc_control_B.c_WorkingSet.Wid.data[idx_max - 1] == 4) &&
        (proc_control_B.c_WorkingSet.Wlocalidx.data[idx_max - 1] > mFiniteLBOrig))
    {
      beta = TrialState->lambda.data[proc_control_B.c_WorkingSet.nActiveConstr -
        1];
      TrialState->lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1] =
        0.0;
      TrialState->lambda.data[idx_max - 1] = beta;
      proc_control_removeConstr(&proc_control_B.c_WorkingSet, idx_max);
      nVarOrig--;
    }

    idx_max--;
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 3;
  *WorkingSet = proc_control_B.c_WorkingSet;
  proc_control_setProblemType(WorkingSet, 3);
  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
}

// Function for MATLAB Function: '<S148>/NLMPC'
boolean_T proc_control::proc_control_step_k(int32_T *STEP_TYPE, real_T Hessian
  [19321], const real_T lb[139], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  __m128d tmp;
  __m128d tmp_0;
  real_T tmp_1[2];
  real_T nrmDirInf;
  real_T nrmGradInf;
  real_T u1;
  int32_T exitg1;
  int32_T idxEndIneq;
  int32_T idxStartIneq;
  int32_T k;
  int32_T nVar;
  int32_T scalarLB;
  boolean_T checkBoundViolation;
  boolean_T guard1;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  nVar = WorkingSet->nVar;
  if (*STEP_TYPE != 3) {
    memcpy(&TrialState->xstar.data[0], &TrialState->xstarsqp[0],
           static_cast<uint16_T>(WorkingSet->nVar) * sizeof(real_T));
  } else {
    idxEndIneq = TrialState->searchDir.size[0];
    idxStartIneq = TrialState->searchDir.size[0];
    if (idxStartIneq - 1 >= 0) {
      memcpy(&proc_control_B.y_data_h[0], &TrialState->searchDir.data[0],
             static_cast<uint32_T>(idxStartIneq) * sizeof(real_T));
    }

    if (static_cast<uint16_T>(WorkingSet->nVar) - 1 >= 0) {
      memcpy(&proc_control_B.y_data_h[0], &TrialState->xstar.data[0],
             static_cast<uint16_T>(WorkingSet->nVar) * sizeof(real_T));
    }

    if (idxEndIneq - 1 >= 0) {
      memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_h[0],
             static_cast<uint32_T>(idxEndIneq) * sizeof(real_T));
    }
  }

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_normal(Hessian, TrialState->grad.data, TrialState,
                          MeritFunction, memspace, WorkingSet, QRManager,
                          CholManager, QPObjective, qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        idxEndIneq = TrialState->delta_x.size[0];
        idxStartIneq = TrialState->delta_x.size[0];
        if (idxStartIneq - 1 >= 0) {
          memcpy(&proc_control_B.y_data_h[0], &TrialState->delta_x.data[0],
                 static_cast<uint32_T>(idxStartIneq) * sizeof(real_T));
        }

        if (static_cast<uint16_T>(nVar) - 1 >= 0) {
          memcpy(&proc_control_B.y_data_h[0], &TrialState->xstar.data[0],
                 static_cast<uint16_T>(nVar) * sizeof(real_T));
        }

        if (idxEndIneq - 1 >= 0) {
          memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_h[0],
                 static_cast<uint32_T>(idxEndIneq) * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      scalarLB = WorkingSet->nWConstr[0] + WorkingSet->nWConstr[1];
      idxStartIneq = scalarLB + 1;
      idxEndIneq = WorkingSet->nActiveConstr;
      for (k = idxStartIneq; k <= idxEndIneq; k++) {
        WorkingSet->isActiveConstr.data[(WorkingSet->isActiveIdx
          [WorkingSet->Wid.data[k - 1] - 1] + WorkingSet->Wlocalidx.data[k - 1])
          - 2] = false;
      }

      WorkingSet->nWConstr[2] = 0;
      WorkingSet->nWConstr[3] = 0;
      WorkingSet->nWConstr[4] = 0;
      WorkingSet->nActiveConstr = scalarLB;
      idxEndIneq = TrialState->xstar.size[0];
      idxStartIneq = TrialState->xstar.size[0];
      if (idxStartIneq - 1 >= 0) {
        memcpy(&proc_control_B.m_data[0], &TrialState->xstar.data[0],
               static_cast<uint32_T>(idxStartIneq) * sizeof(real_T));
      }

      idxStartIneq = static_cast<uint16_T>(WorkingSet->sizes[3]);
      for (k = 0; k < idxStartIneq; k++) {
        nrmGradInf = WorkingSet->lb.data[WorkingSet->indexLB.data[k] - 1];
        if (-proc_control_B.m_data[WorkingSet->indexLB.data[k] - 1] > nrmGradInf)
        {
          proc_control_B.m_data[WorkingSet->indexLB.data[k] - 1] = -nrmGradInf +
            fabs(nrmGradInf);
        }
      }

      if (idxEndIneq - 1 >= 0) {
        memcpy(&TrialState->xstar.data[0], &proc_control_B.m_data[0],
               static_cast<uint32_T>(idxEndIneq) * sizeof(real_T));
      }

      proc_control_relaxed(Hessian, TrialState->grad.data, TrialState,
                           MeritFunction, memspace, WorkingSet, QRManager,
                           CholManager, QPObjective, qpoptions);
      idxEndIneq = TrialState->delta_x.size[0];
      idxStartIneq = TrialState->delta_x.size[0];
      if (idxStartIneq - 1 >= 0) {
        memcpy(&proc_control_B.y_data_h[0], &TrialState->delta_x.data[0],
               static_cast<uint32_T>(idxStartIneq) * sizeof(real_T));
      }

      if (static_cast<uint16_T>(nVar) - 1 >= 0) {
        memcpy(&proc_control_B.y_data_h[0], &TrialState->xstar.data[0],
               static_cast<uint16_T>(nVar) * sizeof(real_T));
      }

      if (idxEndIneq - 1 >= 0) {
        memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_h[0],
               static_cast<uint32_T>(idxEndIneq) * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_soc(Hessian, TrialState->grad.data, TrialState,
        memspace, WorkingSet, QRManager, CholManager, QPObjective, qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        idxStartIneq = static_cast<uint16_T>(nVar);
        scalarLB = (static_cast<uint16_T>(nVar) / 2) << 1;
        idxEndIneq = scalarLB - 2;
        for (k = 0; k <= idxEndIneq; k += 2) {
          tmp = _mm_loadu_pd(&TrialState->xstar.data[k]);
          tmp_0 = _mm_loadu_pd(&TrialState->socDirection.data[k]);
          _mm_storeu_pd(&TrialState->delta_x.data[k], _mm_add_pd(tmp, tmp_0));
        }

        for (k = scalarLB; k < idxStartIneq; k++) {
          TrialState->delta_x.data[k] = TrialState->xstar.data[k] +
            TrialState->socDirection.data[k];
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        nrmGradInf = 0.0;
        nrmDirInf = 1.0;
        for (k = 0; k < 139; k++) {
          u1 = fabs(TrialState->grad.data[k]);
          if ((!(nrmGradInf >= u1)) && (!rtIsNaN(u1))) {
            nrmGradInf = u1;
          }

          u1 = fabs(TrialState->xstar.data[k]);
          if ((!(nrmDirInf >= u1)) && (!rtIsNaN(u1))) {
            nrmDirInf = u1;
          }
        }

        nrmGradInf /= nrmDirInf;
        if ((nrmGradInf <= 2.2204460492503131E-16) || rtIsNaN(nrmGradInf)) {
          nrmGradInf = 2.2204460492503131E-16;
        }

        for (k = 0; k < 139; k++) {
          idxEndIneq = 139 * k;
          for (idxStartIneq = 0; idxStartIneq < k; idxStartIneq++) {
            Hessian[idxEndIneq + idxStartIneq] = 0.0;
          }

          scalarLB = 139 * k + k;
          Hessian[scalarLB] = nrmGradInf;
          if (137 - k >= 0) {
            memset(&Hessian[scalarLB + 1], 0, static_cast<uint32_T>((((137 - k)
                      + scalarLB) - scalarLB) + 1) * sizeof(real_T));
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    idxEndIneq = TrialState->delta_x.size[0];
    idxStartIneq = TrialState->delta_x.size[0];
    if (idxStartIneq - 1 >= 0) {
      memcpy(&proc_control_B.m_data[0], &TrialState->delta_x.data[0],
             static_cast<uint32_T>(idxStartIneq) * sizeof(real_T));
    }

    k = static_cast<uint16_T>(WorkingSet->sizes[3]);
    for (nVar = 0; nVar < k; nVar++) {
      nrmDirInf = proc_control_B.m_data[WorkingSet->indexLB.data[nVar] - 1];
      nrmGradInf = (TrialState->xstarsqp[WorkingSet->indexLB.data[nVar] - 1] +
                    nrmDirInf) - lb[WorkingSet->indexLB.data[nVar] - 1];
      if (nrmGradInf < 0.0) {
        _mm_storeu_pd(&tmp_1[0], _mm_sub_pd(_mm_set_pd(TrialState->
          xstar.data[WorkingSet->indexLB.data[nVar] - 1], nrmDirInf),
          _mm_set1_pd(nrmGradInf)));
        proc_control_B.m_data[WorkingSet->indexLB.data[nVar] - 1] = tmp_1[0];
        TrialState->xstar.data[WorkingSet->indexLB.data[nVar] - 1] = tmp_1[1];
      }
    }

    if (idxEndIneq - 1 >= 0) {
      memcpy(&TrialState->delta_x.data[0], &proc_control_B.m_data[0],
             static_cast<uint32_T>(idxEndIneq) * sizeof(real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_outputBounds_k(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  __m128d tmp;
  boolean_T exitg1;
  for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 130; proc_control_B.i_jn++)
  {
    proc_control_B.bv1[proc_control_B.i_jn] = rtIsInf
      (runtimedata_OutputMin[proc_control_B.i_jn]);
  }

  proc_control_all(proc_control_B.bv1, proc_control_B.x);
  proc_control_B.y_a5 = true;
  proc_control_B.k_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.k_k < 13)) {
    if (!proc_control_B.x[proc_control_B.k_k]) {
      proc_control_B.y_a5 = false;
      exitg1 = true;
    } else {
      proc_control_B.k_k++;
    }
  }

  if (proc_control_B.y_a5) {
    for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 130; proc_control_B.i_jn
         ++) {
      proc_control_B.bv1[proc_control_B.i_jn] = rtIsInf
        (runtimedata_OutputMax[proc_control_B.i_jn]);
    }

    proc_control_all(proc_control_B.bv1, proc_control_B.x);
    proc_control_B.k_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.k_k < 13)) {
      if (!proc_control_B.x[proc_control_B.k_k]) {
        proc_control_B.y_a5 = false;
        exitg1 = true;
      } else {
        proc_control_B.k_k++;
      }
    }
  }

  if (proc_control_B.y_a5) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 260; proc_control_B.i_jn
         ++) {
      proc_control_B.b_c[proc_control_B.i_jn] = 0.0;
      proc_control_B.icf[proc_control_B.i_jn] = true;
    }

    for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 13; proc_control_B.i_jn
         ++) {
      proc_control_B.ic_k[proc_control_B.i_jn] = static_cast<real_T>
        (proc_control_B.i_jn) + 1.0;
    }

    for (proc_control_B.k_k = 0; proc_control_B.k_k < 10; proc_control_B.k_k++)
    {
      for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 13;
           proc_control_B.i_jn++) {
        proc_control_B.runtimedata_OutputMin = runtimedata_OutputMin[10 *
          proc_control_B.i_jn + proc_control_B.k_k];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.ic_k[proc_control_B.i_jn]) - 1] = ((!rtIsInf
          (proc_control_B.runtimedata_OutputMin)) && (!rtIsNaN
          (proc_control_B.runtimedata_OutputMin)));
      }

      for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 13;
           proc_control_B.i_jn++) {
        proc_control_B.runtimedata_OutputMin =
          proc_control_B.ic_k[proc_control_B.i_jn];
        proc_control_B.runtimedata_OutputMax = runtimedata_OutputMax[10 *
          proc_control_B.i_jn + proc_control_B.k_k];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1] = ((!rtIsInf
          (proc_control_B.runtimedata_OutputMax)) && (!rtIsNaN
          (proc_control_B.runtimedata_OutputMax)));
        proc_control_B.ic[proc_control_B.i_jn] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin) - 1;
        proc_control_B.ic[proc_control_B.i_jn + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1;
      }

      for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 26;
           proc_control_B.i_jn++) {
        proc_control_B.icf_c[proc_control_B.i_jn] =
          proc_control_B.icf[proc_control_B.ic[proc_control_B.i_jn]];
      }

      if (proc_control_any(proc_control_B.icf_c)) {
        for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 13;
             proc_control_B.i_jn++) {
          proc_control_B.b_c[static_cast<int32_T>
            (proc_control_B.ic_k[proc_control_B.i_jn]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.i_jn + proc_control_B.k_k]
             - e) - X[(11 * proc_control_B.i_jn + proc_control_B.k_k) + 1];
        }

        for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 13;
             proc_control_B.i_jn++) {
          proc_control_B.b_c[static_cast<int32_T>
            (proc_control_B.ic_k[proc_control_B.i_jn] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_jn + proc_control_B.k_k) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_jn + proc_control_B.k_k])
            - e;
        }
      }

      for (proc_control_B.i_jn = 0; proc_control_B.i_jn <= 10;
           proc_control_B.i_jn += 2) {
        tmp = _mm_loadu_pd(&proc_control_B.ic_k[proc_control_B.i_jn]);
        _mm_storeu_pd(&proc_control_B.ic_k[proc_control_B.i_jn], _mm_add_pd(tmp,
          _mm_set1_pd(26.0)));
      }

      for (proc_control_B.i_jn = 12; proc_control_B.i_jn < 13;
           proc_control_B.i_jn++) {
        proc_control_B.ic_k[proc_control_B.i_jn] += 26.0;
      }
    }

    proc_control_B.k_k = 0;
    for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 260; proc_control_B.i_jn
         ++) {
      if (proc_control_B.icf[proc_control_B.i_jn]) {
        proc_control_B.k_k++;
      }
    }

    proc_control_B.tmp_size_idx_0 = proc_control_B.k_k;
    proc_control_B.k_k = 0;
    for (proc_control_B.i_jn = 0; proc_control_B.i_jn < 260; proc_control_B.i_jn
         ++) {
      if (proc_control_B.icf[proc_control_B.i_jn]) {
        proc_control_B.tmp_data_i[proc_control_B.k_k] = static_cast<int16_T>
          (proc_control_B.i_jn);
        proc_control_B.k_k++;
      }
    }

    c_size[0] = proc_control_B.tmp_size_idx_0;
    c_size[1] = 1;
    for (proc_control_B.i_jn = 0; proc_control_B.i_jn <
         proc_control_B.tmp_size_idx_0; proc_control_B.i_jn++) {
      c_data[proc_control_B.i_jn] =
        proc_control_B.b_c[proc_control_B.tmp_data_i[proc_control_B.i_jn]];
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_stateEvolution_f(const real_T X[143], const
  real_T U[88], real_T c[130])
{
  real_T b_X[143];
  real_T b_U[88];
  real_T ic[13];
  real_T tmp[13];
  real_T tmp_0[13];
  real_T ic_0;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  memset(&c[0], 0, 130U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    ic[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  i_0 = 0;
  for (i_1 = 0; i_1 < 8; i_1++) {
    i = 0;
    for (i_2 = 0; i_2 < 11; i_2++) {
      b_U[i + i_1] = U[i_2 + i_0];
      i += 8;
    }

    i_0 += 11;
  }

  i_0 = 0;
  for (i_2 = 0; i_2 < 11; i_2++) {
    i_1 = 0;
    for (i = 0; i < 13; i++) {
      b_X[i + i_0] = X[i_1 + i_2];
      i_1 += 11;
    }

    i_0 += 13;
  }

  for (i = 0; i < 10; i++) {
    i_0 = i << 3;
    proc_control_AUV8QuatSimFcn(&b_X[13 * i], &b_U[i_0], tmp);
    i_1 = (i + 1) * 13;
    proc_control_AUV8QuatSimFcn(&b_X[i_1], &b_U[i_0], tmp_0);
    for (i_0 = 0; i_0 < 13; i_0++) {
      ic_0 = ic[i_0];
      c[static_cast<int32_T>(ic_0) - 1] = (b_X[13 * i + i_0] + (tmp[i_0] +
        tmp_0[i_0]) * 0.05) - b_X[i_1 + i_0];
      ic[i_0] = ic_0 + 13.0;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_contr_c4_mpclib_anonFcn2_n(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[139], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130])
{
  proc_control_getXUe(z, runtimedata_x, proc_control_B.X_h, proc_control_B.U_m,
                      &proc_control_B.e_n);
  proc_control_outputBounds_k(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_h, proc_control_B.e_n, proc_control_B.varargin_1_data_g,
    proc_control_B.varargin_1_size);
  proc_control_B.sizes_idx_1_tmp = ((proc_control_B.varargin_1_size[0] != 0) &&
    (proc_control_B.varargin_1_size[1] != 0));
  if (!proc_control_B.sizes_idx_1_tmp) {
    proc_control_B.sizes[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size[0]);
  } else if (proc_control_B.sizes_idx_1_tmp) {
    proc_control_B.sizes[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size[0]);
  } else {
    proc_control_B.sizes[0] = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes[0];
  varargout_1_size[1] = proc_control_B.sizes_idx_1_tmp;
  proc_control_B.loop_ub_g = proc_control_B.sizes_idx_1_tmp;
  for (proc_control_B.i11 = 0; proc_control_B.i11 < proc_control_B.loop_ub_g;
       proc_control_B.i11++) {
    proc_control_B.loop_ub_c = proc_control_B.sizes[0];
    if (proc_control_B.loop_ub_c - 1 >= 0) {
      memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_g[0],
             static_cast<uint32_T>(proc_control_B.loop_ub_c) * sizeof(real_T));
    }
  }

  proc_control_stateEvolution_f(proc_control_B.X_h, proc_control_B.U_m,
    varargout_2);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_evalObjAndConstr(int32_T
  obj_next_next_next_next_next_b_, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *obj_next_next_next_next_next_ne, const s_xJmQKnCTzvv6aUzMZcIqsF_proc_T
  *obj_next_next_next_next_next__0, const real_T x[139], real_T
  Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130], real_T *fval,
  int32_T *status)
{
  __m128d tmp_0;
  __m128d tmp_1;
  __m128i tmp;
  proc_control_getXUe(x, obj_next_next_next_next_next__0->runtimedata.x,
                      proc_control_B.X_f, proc_control_B.U_o,
                      &proc_control_B.e_f);
  proc_control_B.fs = 0.0;
  proc_control_B.i_j = 0;
  for (proc_control_B.i_k = 0; proc_control_B.i_k < 11; proc_control_B.i_k++) {
    proc_control_B.yk = 0;
    for (proc_control_B.vectorUB_d = 0; proc_control_B.vectorUB_d < 13;
         proc_control_B.vectorUB_d++) {
      proc_control_B.b_X[proc_control_B.vectorUB_d + proc_control_B.i_j] =
        proc_control_B.X_f[proc_control_B.yk + proc_control_B.i_k];
      proc_control_B.yk += 11;
    }

    proc_control_B.i_j += 13;
  }

  proc_control_B.i_j = 0;
  for (proc_control_B.yk = 0; proc_control_B.yk < 8; proc_control_B.yk++) {
    proc_control_B.vectorUB_d = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 11; proc_control_B.i_k++)
    {
      proc_control_B.b_U[proc_control_B.vectorUB_d + proc_control_B.yk] =
        proc_control_B.U_o[proc_control_B.i_k + proc_control_B.i_j];
      proc_control_B.vectorUB_d += 8;
    }

    proc_control_B.i_j += 11;
  }

  for (proc_control_B.i_k = 0; proc_control_B.i_k < 10; proc_control_B.i_k++) {
    proc_control_B.wtYerr = 0.0;
    for (proc_control_B.i_j = 0; proc_control_B.i_j < 13; proc_control_B.i_j++)
    {
      proc_control_B.yk = 10 * proc_control_B.i_j + proc_control_B.i_k;
      proc_control_B.wtYerr_tmp = (proc_control_B.b_X[(proc_control_B.i_k + 1) *
        13 + proc_control_B.i_j] -
        obj_next_next_next_next_next__0->runtimedata.ref[proc_control_B.yk]) *
        obj_next_next_next_next_next__0->
        runtimedata.OutputWeights[proc_control_B.yk];
      proc_control_B.wtYerr += proc_control_B.wtYerr_tmp *
        proc_control_B.wtYerr_tmp;
    }

    proc_control_B.fs += proc_control_B.wtYerr;
    memcpy(&proc_control_B.umvk[0], &proc_control_B.b_U[proc_control_B.i_k << 3],
           sizeof(real_T) << 3U);
    if (proc_control_B.i_k + 1 == 1) {
      for (proc_control_B.i_j = 0; proc_control_B.i_j <= 6; proc_control_B.i_j +=
           2) {
        tmp_0 = _mm_loadu_pd(&proc_control_B.umvk[proc_control_B.i_j]);
        _mm_storeu_pd(&proc_control_B.duk[proc_control_B.i_j], _mm_sub_pd(tmp_0,
          _mm_loadu_pd(&obj_next_next_next_next_next__0->
                       runtimedata.lastMV[proc_control_B.i_j])));
      }
    } else {
      for (proc_control_B.i_j = 0; proc_control_B.i_j <= 6; proc_control_B.i_j +=
           2) {
        tmp_0 = _mm_loadu_pd(&proc_control_B.umvk[proc_control_B.i_j]);
        tmp_1 = _mm_loadu_pd(&proc_control_B.b_U[((proc_control_B.i_k - 1) << 3)
                             + proc_control_B.i_j]);
        _mm_storeu_pd(&proc_control_B.duk[proc_control_B.i_j], _mm_sub_pd(tmp_0,
          tmp_1));
      }
    }

    proc_control_B.wtYerr = 0.0;
    proc_control_B.wtYerr_tmp = 0.0;
    for (proc_control_B.i_j = 0; proc_control_B.i_j < 8; proc_control_B.i_j++) {
      proc_control_B.yk = 10 * proc_control_B.i_j + proc_control_B.i_k;
      proc_control_B.umvk_c = (proc_control_B.umvk[proc_control_B.i_j] -
        obj_next_next_next_next_next__0->
        runtimedata.MVScaledTarget[proc_control_B.yk]) *
        obj_next_next_next_next_next__0->runtimedata.MVWeights[proc_control_B.yk];
      proc_control_B.umvk[proc_control_B.i_j] = proc_control_B.umvk_c;
      proc_control_B.duk_f =
        obj_next_next_next_next_next__0->
        runtimedata.MVRateWeights[proc_control_B.yk] *
        proc_control_B.duk[proc_control_B.i_j];
      proc_control_B.duk[proc_control_B.i_j] = proc_control_B.duk_f;
      proc_control_B.wtYerr += proc_control_B.umvk_c * proc_control_B.umvk_c;
      proc_control_B.wtYerr_tmp += proc_control_B.duk_f * proc_control_B.duk_f;
    }

    proc_control_B.fs = (proc_control_B.fs + proc_control_B.wtYerr) +
      proc_control_B.wtYerr_tmp;
  }

  *fval = 100000.0 * proc_control_B.e_f * proc_control_B.e_f + proc_control_B.fs;
  proc_control_B.b1 = rtIsNaN(*fval);
  if (rtIsInf(*fval) || proc_control_B.b1) {
    if (proc_control_B.b1) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    if (obj_next_next_next_next_next_b_ - 1 < 0) {
      proc_control_B.i_j = 0;
    } else {
      proc_control_B.i_j = static_cast<uint16_T>(obj_next_next_next_next_next_b_
        - 1) + 1;
    }

    proc_control_B.ineqRange_size_idx_1 = proc_control_B.i_j;
    if (proc_control_B.i_j > 0) {
      proc_control_B.ineqRange_data[0] = 0;
      proc_control_B.yk = 0;
      for (proc_control_B.i_k = 2; proc_control_B.i_k <= proc_control_B.i_j;
           proc_control_B.i_k++) {
        proc_control_B.yk++;
        proc_control_B.ineqRange_data[proc_control_B.i_k - 1] =
          proc_control_B.yk;
      }
    }

    proc_control_B.i_k = proc_control_B.i_j - 1;
    proc_control_B.yk = (proc_control_B.i_j / 4) << 2;
    proc_control_B.vectorUB_d = proc_control_B.yk - 4;
    for (proc_control_B.i_j = 0; proc_control_B.i_j <= proc_control_B.vectorUB_d;
         proc_control_B.i_j += 4) {
      tmp = _mm_loadu_si128((const __m128i *)
                            &proc_control_B.ineqRange_data[proc_control_B.i_j]);
      _mm_storeu_si128((__m128i *)
                       &proc_control_B.ineqRange_data[proc_control_B.i_j],
                       _mm_add_epi32(tmp, _mm_set1_epi32(ineq0)));
    }

    for (proc_control_B.i_j = proc_control_B.yk; proc_control_B.i_j <=
         proc_control_B.i_k; proc_control_B.i_j++) {
      proc_control_B.ineqRange_data[proc_control_B.i_j] += ineq0;
    }

    proc_contr_c4_mpclib_anonFcn2_n(obj_next_next_next_next_next_ne->x,
      obj_next_next_next_next_next_ne->OutputMin,
      obj_next_next_next_next_next_ne->OutputMax, x, proc_control_B.b_data_f,
      proc_control_B.b_size, proc_control_B.c);
    for (proc_control_B.i_j = 0; proc_control_B.i_j <
         proc_control_B.ineqRange_size_idx_1; proc_control_B.i_j++) {
      Cineq_workspace_data[proc_control_B.ineqRange_data[proc_control_B.i_j] - 1]
        = proc_control_B.b_data_f[proc_control_B.i_j];
    }

    memcpy(&Ceq_workspace[0], &proc_control_B.c[0], 130U * sizeof(real_T));
    *status = proc_contr_checkVectorNonFinite(obj_next_next_next_next_next_b_,
      Cineq_workspace_data, ineq0);
    if (*status == 1) {
      *status = proc_con_checkVectorNonFinite_a(Ceq_workspace);
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_con_computeLinearResiduals(const real_T x[139], int32_T
  nVar, real_T workspaceIneq_data[], const int32_T workspaceIneq_size[1],
  int32_T mLinIneq, const real_T AineqT_data[], const real_T bineq_data[],
  int32_T ldAi)
{
  if (mLinIneq > 0) {
    int32_T b_tmp;
    int32_T loop_ub;
    int32_T vectorUB;
    loop_ub = workspaceIneq_size[0];
    if (loop_ub - 1 >= 0) {
      memcpy(&proc_control_B.y_data_bj[0], &workspaceIneq_data[0],
             static_cast<uint32_T>(loop_ub) * sizeof(real_T));
    }

    b_tmp = static_cast<uint16_T>(mLinIneq);
    if (static_cast<uint16_T>(mLinIneq) - 1 >= 0) {
      memcpy(&proc_control_B.y_data_bj[0], &bineq_data[0], static_cast<uint16_T>
             (mLinIneq) * sizeof(real_T));
    }

    if (loop_ub - 1 >= 0) {
      memcpy(&workspaceIneq_data[0], &proc_control_B.y_data_bj[0],
             static_cast<uint32_T>(loop_ub) * sizeof(real_T));
    }

    loop_ub = (static_cast<uint16_T>(mLinIneq) / 2) << 1;
    vectorUB = loop_ub - 2;
    for (int32_T k = 0; k <= vectorUB; k += 2) {
      __m128d tmp;
      tmp = _mm_loadu_pd(&workspaceIneq_data[k]);
      _mm_storeu_pd(&workspaceIneq_data[k], _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
    }

    for (int32_T k = loop_ub; k < b_tmp; k++) {
      workspaceIneq_data[k] = -workspaceIneq_data[k];
    }

    loop_ub = 0;
    vectorUB = (mLinIneq - 1) * ldAi + 1;
    for (int32_T k = 1; ldAi < 0 ? k >= vectorUB : k <= vectorUB; k += ldAi) {
      real_T c;
      int32_T f;
      c = 0.0;
      f = (k + nVar) - 1;
      for (b_tmp = k; b_tmp <= f; b_tmp++) {
        c += AineqT_data[b_tmp - 1] * x[b_tmp - k];
      }

      workspaceIneq_data[loop_ub] += c;
      loop_ub++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
real_T proc_control::proc_control_computeMeritFcn(real_T obj_penaltyParam,
  real_T fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T val;
  if (evalWellDefined) {
    real_T constrViolationEq;
    real_T constrViolationIneq;
    int32_T k;
    constrViolationEq = 0.0;
    for (k = 0; k < 130; k++) {
      constrViolationEq += fabs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    k = static_cast<uint16_T>(mIneq);
    for (int32_T idx = 0; idx < k; idx++) {
      real_T Cineq_workspace;
      Cineq_workspace = Cineq_workspace_data[idx];
      if (Cineq_workspace > 0.0) {
        constrViolationIneq += Cineq_workspace;
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, int32_T
  FcnEvaluator_next_next_next_nex, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_next_next_next_n_0, const s_xJmQKnCTzvv6aUzMZcIqsF_proc_T
  *FcnEvaluator_next_next_next_n_1, boolean_T socTaken, real_T *alpha, int32_T
  *exitflag)
{
  __m128d tmp;
  __m128d tmp_0;
  int32_T exitg1;
  boolean_T exitg2;
  proc_control_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_B.loop_ub_j = TrialState->searchDir.size[0];
  proc_control_B.loop_ub_i = TrialState->searchDir.size[0];
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    memcpy(&proc_control_B.y_data_j[0], &TrialState->searchDir.data[0],
           static_cast<uint32_T>(proc_control_B.loop_ub_i) * sizeof(real_T));
  }

  proc_control_B.loop_ub_i = static_cast<uint16_T>(WorkingSet_nVar);
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    memcpy(&proc_control_B.y_data_j[0], &TrialState->delta_x.data[0],
           static_cast<uint32_T>(proc_control_B.loop_ub_i) * sizeof(real_T));
  }

  if (proc_control_B.loop_ub_j - 1 >= 0) {
    memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_j[0],
           static_cast<uint32_T>(proc_control_B.loop_ub_j) * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 13900) {
      if ((*evalWellDefined) && (proc_control_B.phi_alpha <= *alpha * 0.0001 *
           MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        *alpha *= 0.7;
        proc_control_B.loop_ub_j = (static_cast<uint16_T>(WorkingSet_nVar) / 2) <<
          1;
        proc_control_B.vectorUB_o = proc_control_B.loop_ub_j - 2;
        for (proc_control_B.k_e = 0; proc_control_B.k_e <=
             proc_control_B.vectorUB_o; proc_control_B.k_e += 2) {
          tmp_0 = _mm_loadu_pd(&TrialState->xstar.data[proc_control_B.k_e]);
          _mm_storeu_pd(&TrialState->delta_x.data[proc_control_B.k_e],
                        _mm_mul_pd(_mm_set1_pd(*alpha), tmp_0));
        }

        for (proc_control_B.k_e = proc_control_B.loop_ub_j; proc_control_B.k_e <
             proc_control_B.loop_ub_i; proc_control_B.k_e++) {
          TrialState->delta_x.data[proc_control_B.k_e] = *alpha *
            TrialState->xstar.data[proc_control_B.k_e];
        }

        if (socTaken) {
          proc_control_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_B.phi_alpha == 0.0))) {
            proc_control_B.loop_ub_j = (WorkingSet_nVar / 2) << 1;
            proc_control_B.vectorUB_o = proc_control_B.loop_ub_j - 2;
            for (proc_control_B.k_e = 0; proc_control_B.k_e <=
                 proc_control_B.vectorUB_o; proc_control_B.k_e += 2) {
              tmp_0 = _mm_loadu_pd(&TrialState->
                                   socDirection.data[proc_control_B.k_e]);
              tmp = _mm_loadu_pd(&TrialState->delta_x.data[proc_control_B.k_e]);
              _mm_storeu_pd(&TrialState->delta_x.data[proc_control_B.k_e],
                            _mm_add_pd(_mm_mul_pd(_mm_set1_pd
                (proc_control_B.phi_alpha), tmp_0), tmp));
            }

            for (proc_control_B.k_e = proc_control_B.loop_ub_j;
                 proc_control_B.k_e < WorkingSet_nVar; proc_control_B.k_e++) {
              TrialState->delta_x.data[proc_control_B.k_e] +=
                proc_control_B.phi_alpha * TrialState->
                socDirection.data[proc_control_B.k_e];
            }
          }
        }

        proc_control_B.tooSmallX = true;
        proc_control_B.k_e = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.k_e <= static_cast<uint16_T>
                             (WorkingSet_nVar) - 1)) {
          proc_control_B.phi_alpha = fabs(TrialState->
            xstarsqp[proc_control_B.k_e]);
          if ((proc_control_B.phi_alpha <= 1.0) || rtIsNaN
              (proc_control_B.phi_alpha)) {
            proc_control_B.phi_alpha = 1.0;
          }

          if (0.1 * proc_control_B.phi_alpha <= fabs(TrialState->
               delta_x.data[proc_control_B.k_e])) {
            proc_control_B.tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_B.k_e++;
          }
        }

        if (proc_control_B.tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          for (proc_control_B.k_e = 0; proc_control_B.k_e <
               proc_control_B.loop_ub_i; proc_control_B.k_e++) {
            TrialState->xstarsqp[proc_control_B.k_e] = TrialState->
              xstarsqp_old[proc_control_B.k_e] + TrialState->
              delta_x.data[proc_control_B.k_e];
          }

          proc_control_evalObjAndConstr(FcnEvaluator_next_next_next_nex,
            FcnEvaluator_next_next_next_n_0, FcnEvaluator_next_next_next_n_1,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &TrialState->sqpFval, &proc_control_B.k_e);
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, TrialState->cIneq.size,
            proc_control_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_B.k_e == 1);
          proc_control_B.phi_alpha = proc_control_computeMeritFcn
            (MeritFunction_penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_driver(const real_T bineq_data[], const real_T
  lb[139], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  coder_internal_stickyStruct_2_T *FcnEvaluator, s_z8miyzCNLMZx998HtZciUB_proc_T
  *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T *WorkingSet,
  s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager, s_962gqykB8vLiRVqsLdGQIG_proc_T
  *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *QPObjective, const int32_T
  fscales_lineq_constraint_size[1], const int32_T fscales_cineq_constraint_size
  [1], real_T Hessian[19321])
{
  __m128d tmp;
  __m128d tmp_0;
  static const int8_T ab[19321] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const char_T x[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  int32_T exitg1;
  for (proc_control_B.idx_max_tmp = 0; proc_control_B.idx_max_tmp < 19321;
       proc_control_B.idx_max_tmp++) {
    Hessian[proc_control_B.idx_max_tmp] = ab[proc_control_B.idx_max_tmp];
  }

  proc_control_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_B.mFixed = WorkingSet->sizes[0];
  proc_control_B.mIneq_f = WorkingSet->sizes[2];
  proc_control_B.mLB = WorkingSet->sizes[3];
  proc_control_B.mUB = WorkingSet->sizes[4];
  proc_control_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 130;
  proc_control_B.mLinIneq_tmp = WorkingSet->sizes[2] - TrialState->mNonlinIneq;
  proc_control_B.u1 = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
                       WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar >= proc_control_B.u1) {
    proc_control_B.u1 = WorkingSet->nVar;
  }

  proc_control_B.qpoptions_MaxIterations = 10 * proc_control_B.u1;
  TrialState->steplength = 1.0;
  proc_control_B.Flags.fevalOK = true;
  proc_control_B.Flags.stepAccepted = false;
  proc_control_B.Flags.failedLineSearch = false;
  proc_control_B.Flags.stepType = 1;
  proc_control_B.idx_max_tmp_tmp = static_cast<uint16_T>
    (proc_control_B.mConstr_tmp);
  if (proc_control_B.idx_max_tmp_tmp - 1 >= 0) {
    memcpy(&TrialState->lambdaStopTest.data[0], &TrialState->lambdasqp.data[0],
           static_cast<uint32_T>(proc_control_B.idx_max_tmp_tmp) * sizeof(real_T));
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  if (WorkingSet->nVar < 1) {
    proc_control_B.idx_max = 0;
  } else {
    proc_control_B.idx_max = 1;
    if (WorkingSet->nVar > 1) {
      proc_control_B.smax = fabs(TrialState->grad.data[0]);
      for (proc_control_B.u1 = 2; proc_control_B.u1 <=
           proc_control_B.nVar_tmp_tmp; proc_control_B.u1++) {
        proc_control_B.s = fabs(TrialState->grad.data[proc_control_B.u1 - 1]);
        if (proc_control_B.s > proc_control_B.smax) {
          proc_control_B.idx_max = proc_control_B.u1;
          proc_control_B.smax = proc_control_B.s;
        }
      }
    }
  }

  proc_control_B.smax = fabs(TrialState->grad.data[proc_control_B.idx_max - 1]);
  if ((proc_control_B.smax <= 1.0) || rtIsNaN(proc_control_B.smax)) {
    proc_control_B.smax = 1.0;
  }

  if (rtIsInf(proc_control_B.smax)) {
    proc_control_B.smax = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, proc_control_B.mLinIneq_tmp, TrialState->mNonlinIneq,
     TrialState->cIneq.data, TrialState->cEq, WorkingSet->indexLB.data,
     WorkingSet->sizes[3], lb, WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if ((MeritFunction->nlpPrimalFeasError <= 1.0) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    MeritFunction->feasRelativeFactor = 1.0;
  } else {
    MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
  }

  proc_control_B.isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
    MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &proc_control_B.Flags.gradOK, &MeritFunction->nlpDualFeasError);
  if (!proc_control_B.Flags.gradOK) {
    proc_control_B.Flags.done = true;
    if (proc_control_B.isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    if (MeritFunction->nlpDualFeasError >= 0.0) {
      MeritFunction->firstOrderOpt = MeritFunction->nlpDualFeasError;
    } else {
      MeritFunction->firstOrderOpt = 0.0;
    }

    if (proc_control_B.idx_max_tmp_tmp - 1 >= 0) {
      memcpy(&TrialState->lambdaStopTestPrev.data[0],
             &TrialState->lambdaStopTest.data[0], static_cast<uint32_T>
             (proc_control_B.idx_max_tmp_tmp) * sizeof(real_T));
    }

    if (proc_control_B.isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
         proc_control_B.smax)) {
      proc_control_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_B.Flags.done = false;
      if (proc_control_B.isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
    WorkingSet->ldA);
  TrialState->sqpFval_old = TrialState->sqpFval;
  for (proc_control_B.u1 = 0; proc_control_B.u1 < 139; proc_control_B.u1++) {
    TrialState->xstarsqp_old[proc_control_B.u1] = TrialState->
      xstarsqp[proc_control_B.u1];
    TrialState->grad_old.data[proc_control_B.u1] = TrialState->
      grad.data[proc_control_B.u1];
  }

  proc_control_B.b_nVar = TrialState->cIneq_old.size[0];
  proc_control_B.u1 = TrialState->cIneq_old.size[0];
  if (proc_control_B.u1 - 1 >= 0) {
    memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq_old.data[0],
           static_cast<uint32_T>(proc_control_B.u1) * sizeof(real_T));
  }

  proc_control_B.b_nVar_tmp = static_cast<uint16_T>(TrialState->mIneq);
  if (proc_control_B.b_nVar_tmp - 1 >= 0) {
    memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0], static_cast<
           uint32_T>(proc_control_B.b_nVar_tmp) * sizeof(real_T));
  }

  if (proc_control_B.b_nVar - 1 >= 0) {
    memcpy(&TrialState->cIneq_old.data[0], &proc_control_B.y_data_n[0],
           static_cast<uint32_T>(proc_control_B.b_nVar) * sizeof(real_T));
  }

  memcpy(&TrialState->cEq_old[0], &TrialState->cEq[0], 130U * sizeof(real_T));
  if (!proc_control_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_B.Flags.done) {
    if ((!proc_control_B.Flags.stepAccepted) &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.expl_temp_g.IterDisplayQP = false;
      proc_control_B.expl_temp_g.RemainFeasible = false;
      proc_control_B.expl_temp_g.ProbRelTolFactor = 1.0;
      proc_control_B.expl_temp_g.ConstrRelTolFactor = 1.0;
      proc_control_B.expl_temp_g.PricingTolerance = 0.0;
      proc_control_B.expl_temp_g.ObjectiveLimit = (rtMinusInf);
      proc_control_B.expl_temp_g.ConstraintTolerance = 0.02;
      proc_control_B.expl_temp_g.OptimalityTolerance = 2.2204460492503131E-14;
      proc_control_B.expl_temp_g.StepTolerance = 1.0E-6;
      proc_control_B.expl_temp_g.MaxIterations =
        proc_control_B.qpoptions_MaxIterations;
      for (proc_control_B.idx_max_tmp = 0; proc_control_B.idx_max_tmp < 7;
           proc_control_B.idx_max_tmp++) {
        proc_control_B.expl_temp_g.SolverName[proc_control_B.idx_max_tmp] =
          x[proc_control_B.idx_max_tmp];
      }
    }

    do {
      exitg1 = 0;
      proc_control_B.isFeasible = !proc_control_B.Flags.failedLineSearch;
      if ((!proc_control_B.Flags.stepAccepted) && proc_control_B.isFeasible) {
        if (proc_control_B.Flags.stepType != 3) {
          proc_c_updateWorkingSetForNewQP(TrialState->xstarsqp, WorkingSet,
            proc_control_B.mIneq_f, TrialState->mNonlinIneq,
            TrialState->cIneq.data, TrialState->cEq, proc_control_B.mLB, lb,
            proc_control_B.mUB, proc_control_B.mFixed);
        }

        proc_control_B.expl_temp_lg = proc_control_B.expl_temp_g;
        proc_control_B.Flags.stepAccepted = proc_control_step_k
          (&proc_control_B.Flags.stepType, Hessian, lb, TrialState,
           MeritFunction, memspace, WorkingSet, QRManager, CholManager,
           QPObjective, &proc_control_B.expl_temp_lg);
        if (proc_control_B.Flags.stepAccepted) {
          proc_control_B.b_nVar = static_cast<uint16_T>
            (proc_control_B.nVar_tmp_tmp);
          for (proc_control_B.u1 = 0; proc_control_B.u1 < proc_control_B.b_nVar;
               proc_control_B.u1++) {
            TrialState->xstarsqp[proc_control_B.u1] += TrialState->
              delta_x.data[proc_control_B.u1];
          }

          proc_control_evalObjAndConstr
            (FcnEvaluator->next.next.next.next.next.b_value,
             &FcnEvaluator->next.next.next.next.next.next.next.b_value.workspace.runtimedata,
             &FcnEvaluator->next.next.next.next.next.next.next.next.b_value.workspace,
             TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
             TrialState->cEq, &TrialState->sqpFval, &proc_control_B.u1);
          proc_control_B.Flags.fevalOK = (proc_control_B.u1 == 1);
          TrialState->FunctionEvaluations++;
          proc_con_computeLinearResiduals(TrialState->xstarsqp,
            proc_control_B.nVar_tmp_tmp, TrialState->cIneq.data,
            TrialState->cIneq.size, proc_control_B.mLinIneq_tmp,
            WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
          MeritFunction->phiFullStep = proc_control_computeMeritFcn
            (MeritFunction->penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, proc_control_B.mIneq_f, TrialState->cEq,
             proc_control_B.Flags.fevalOK);
        }

        if ((proc_control_B.Flags.stepType == 1) &&
            proc_control_B.Flags.stepAccepted && proc_control_B.Flags.fevalOK &&
            (MeritFunction->phi < MeritFunction->phiFullStep) &&
            (TrialState->sqpFval < TrialState->sqpFval_old)) {
          proc_control_B.Flags.stepType = 3;
          proc_control_B.Flags.stepAccepted = false;
        } else {
          proc_control_linesearch(&proc_control_B.Flags.fevalOK, bineq_data,
            WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data,
            TrialState, MeritFunction->penaltyParam, MeritFunction->phi,
            MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
            FcnEvaluator->next.next.next.next.next.b_value,
            &FcnEvaluator->next.next.next.next.next.next.next.b_value.workspace.runtimedata,
            &FcnEvaluator->next.next.next.next.next.next.next.next.b_value.workspace,
            ((proc_control_B.Flags.stepType == 3) &&
             proc_control_B.Flags.stepAccepted), &proc_control_B.smax,
            &proc_control_B.u1);
          TrialState->steplength = proc_control_B.smax;
          if (proc_control_B.u1 > 0) {
            proc_control_B.Flags.stepAccepted = true;
          } else {
            proc_control_B.Flags.failedLineSearch = true;
          }
        }
      } else {
        exitg1 = 1;
      }
    } while (exitg1 == 0);

    if (proc_control_B.Flags.stepAccepted && proc_control_B.isFeasible) {
      proc_control_B.b_nVar = static_cast<uint16_T>(proc_control_B.nVar_tmp_tmp);
      for (proc_control_B.u1 = 0; proc_control_B.u1 < proc_control_B.b_nVar;
           proc_control_B.u1++) {
        TrialState->xstarsqp[proc_control_B.u1] = TrialState->
          xstarsqp_old[proc_control_B.u1] + TrialState->
          delta_x.data[proc_control_B.u1];
      }

      proc_control_B.idx_max_tmp = (static_cast<uint16_T>
        (proc_control_B.mConstr_tmp) / 2) << 1;
      proc_control_B.idx_max = proc_control_B.idx_max_tmp - 2;
      for (proc_control_B.u1 = 0; proc_control_B.u1 <= proc_control_B.idx_max;
           proc_control_B.u1 += 2) {
        tmp = _mm_loadu_pd(&TrialState->lambda.data[proc_control_B.u1]);
        tmp_0 = _mm_loadu_pd(&TrialState->lambdasqp.data[proc_control_B.u1]);
        _mm_storeu_pd(&TrialState->lambdasqp.data[proc_control_B.u1], _mm_add_pd
                      (_mm_mul_pd(_mm_sub_pd(tmp, tmp_0), _mm_set1_pd
          (TrialState->steplength)), tmp_0));
      }

      for (proc_control_B.u1 = proc_control_B.idx_max_tmp; proc_control_B.u1 <
           proc_control_B.idx_max_tmp_tmp; proc_control_B.u1++) {
        proc_control_B.smax = TrialState->lambdasqp.data[proc_control_B.u1];
        TrialState->lambdasqp.data[proc_control_B.u1] = (TrialState->
          lambda.data[proc_control_B.u1] - proc_control_B.smax) *
          TrialState->steplength + proc_control_B.smax;
      }

      TrialState->sqpFval_old = TrialState->sqpFval;
      for (proc_control_B.u1 = 0; proc_control_B.u1 < 139; proc_control_B.u1++)
      {
        TrialState->xstarsqp_old[proc_control_B.u1] = TrialState->
          xstarsqp[proc_control_B.u1];
        TrialState->grad_old.data[proc_control_B.u1] = TrialState->
          grad.data[proc_control_B.u1];
      }

      proc_control_B.b_nVar = TrialState->cIneq_old.size[0];
      proc_control_B.u1 = TrialState->cIneq_old.size[0];
      if (proc_control_B.u1 - 1 >= 0) {
        memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq_old.data[0],
               static_cast<uint32_T>(proc_control_B.u1) * sizeof(real_T));
      }

      if (proc_control_B.b_nVar_tmp - 1 >= 0) {
        memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0],
               static_cast<uint32_T>(proc_control_B.b_nVar_tmp) * sizeof(real_T));
      }

      if (proc_control_B.b_nVar - 1 >= 0) {
        memcpy(&TrialState->cIneq_old.data[0], &proc_control_B.y_data_n[0],
               static_cast<uint32_T>(proc_control_B.b_nVar) * sizeof(real_T));
      }

      memcpy(&TrialState->cEq_old[0], &TrialState->cEq[0], 130U * sizeof(real_T));
      proc_control_B.Flags.gradOK = true;
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->next.next.next.next.next.b_value,
         &FcnEvaluator->next.next.next.next.next.next.next.b_value.workspace.runtimedata,
         &FcnEvaluator->next.next.next.next.next.next.next.next.b_value.workspace,
         TrialState->xstarsqp, TrialState->grad.data, TrialState->cIneq.data,
         TrialState->iNonIneq0, TrialState->cEq, WorkingSet->Aineq.data,
         TrialState->iNonIneq0, WorkingSet->ldA, WorkingSet->Aeq.data,
         WorkingSet->ldA, &TrialState->sqpFval, &proc_control_B.u1);
      TrialState->FunctionEvaluations++;
      proc_control_B.Flags.fevalOK = (proc_control_B.u1 == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 139U *
             sizeof(real_T));
      proc_control_B.b_nVar = TrialState->cIneq.size[0];
      proc_control_B.u1 = TrialState->cIneq.size[0];
      if (proc_control_B.u1 - 1 >= 0) {
        memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0],
               static_cast<uint32_T>(proc_control_B.u1) * sizeof(real_T));
      }

      if (proc_control_B.b_nVar_tmp - 1 >= 0) {
        memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq_old.data[0],
               static_cast<uint32_T>(proc_control_B.b_nVar_tmp) * sizeof(real_T));
      }

      if (proc_control_B.b_nVar - 1 >= 0) {
        memcpy(&TrialState->cIneq.data[0], &proc_control_B.y_data_n[0],
               static_cast<uint32_T>(proc_control_B.b_nVar) * sizeof(real_T));
      }

      memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof(real_T));
    }

    proc_control_test_exit(&proc_control_B.Flags, memspace, MeritFunction,
      fscales_lineq_constraint_size, fscales_cineq_constraint_size, WorkingSet,
      TrialState, QRManager, lb);
    if ((!proc_control_B.Flags.done) && proc_control_B.Flags.stepAccepted) {
      proc_control_B.Flags.stepAccepted = false;
      proc_control_B.Flags.stepType = 1;
      proc_control_B.Flags.failedLineSearch = false;
      proc_control_B.b_nVar = (proc_control_B.mFixed + TrialState->iNonIneq0) +
        129;
      proc_control_B.u1 = WorkingSet->ldA;
      proc_control_B.idx_max = static_cast<uint16_T>(proc_control_B.nVar_tmp_tmp);
      memcpy(&TrialState->delta_gradLag.data[0], &TrialState->grad.data[0],
             static_cast<uint32_T>(proc_control_B.idx_max) * sizeof(real_T));
      if (proc_control_B.nVar_tmp_tmp >= 1) {
        proc_control_B.idx_max_tmp = (proc_control_B.nVar_tmp_tmp / 2) << 1;
        proc_control_B.idx_max = proc_control_B.idx_max_tmp - 2;
        for (proc_control_B.mLambda = 0; proc_control_B.mLambda <=
             proc_control_B.idx_max; proc_control_B.mLambda += 2) {
          tmp = _mm_loadu_pd(&TrialState->
                             delta_gradLag.data[proc_control_B.mLambda]);
          tmp_0 = _mm_loadu_pd(&TrialState->grad_old.data[proc_control_B.mLambda]);
          _mm_storeu_pd(&TrialState->delta_gradLag.data[proc_control_B.mLambda],
                        _mm_sub_pd(tmp, tmp_0));
        }

        for (proc_control_B.mLambda = proc_control_B.idx_max_tmp;
             proc_control_B.mLambda < proc_control_B.nVar_tmp_tmp;
             proc_control_B.mLambda++) {
          TrialState->delta_gradLag.data[proc_control_B.mLambda] -=
            TrialState->grad_old.data[proc_control_B.mLambda];
        }
      }

      proc_control_B.ix_k = proc_control_B.mFixed;
      proc_control_B.c_ix_tmp = WorkingSet->ldA * 129 + 1;
      for (proc_control_B.mLambda = 1; proc_control_B.u1 < 0 ?
           proc_control_B.mLambda >= proc_control_B.c_ix_tmp :
           proc_control_B.mLambda <= proc_control_B.c_ix_tmp;
           proc_control_B.mLambda += proc_control_B.u1) {
        proc_control_B.b_iy = (proc_control_B.mLambda +
          proc_control_B.nVar_tmp_tmp) - 1;
        for (proc_control_B.idx_max = proc_control_B.mLambda;
             proc_control_B.idx_max <= proc_control_B.b_iy;
             proc_control_B.idx_max++) {
          proc_control_B.idx_max_tmp = proc_control_B.idx_max -
            proc_control_B.mLambda;
          TrialState->delta_gradLag.data[proc_control_B.idx_max_tmp] +=
            WorkingSet->Aeq.data[proc_control_B.idx_max - 1] *
            TrialState->lambdasqp.data[proc_control_B.ix_k];
        }

        proc_control_B.ix_k++;
      }

      proc_control_B.c_ix = proc_control_B.mFixed;
      for (proc_control_B.mLambda = 1; proc_control_B.u1 < 0 ?
           proc_control_B.mLambda >= proc_control_B.c_ix_tmp :
           proc_control_B.mLambda <= proc_control_B.c_ix_tmp;
           proc_control_B.mLambda += proc_control_B.u1) {
        proc_control_B.b_iy = (proc_control_B.mLambda +
          proc_control_B.nVar_tmp_tmp) - 1;
        for (proc_control_B.idx_max = proc_control_B.mLambda;
             proc_control_B.idx_max <= proc_control_B.b_iy;
             proc_control_B.idx_max++) {
          proc_control_B.idx_max_tmp = proc_control_B.idx_max -
            proc_control_B.mLambda;
          TrialState->delta_gradLag.data[proc_control_B.idx_max_tmp] +=
            TrialState->JacCeqTrans_old.data[proc_control_B.idx_max - 1] *
            -TrialState->lambdasqp.data[proc_control_B.c_ix];
        }

        proc_control_B.c_ix++;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_B.ix_k = (TrialState->iNonIneq0 - 1) * WorkingSet->ldA + 1;
        proc_control_B.c_ix = proc_control_B.b_nVar;
        proc_control_B.c_ix_tmp = (TrialState->mNonlinIneq - 1) *
          WorkingSet->ldA;
        proc_control_B.iy = proc_control_B.c_ix_tmp + proc_control_B.ix_k;
        for (proc_control_B.mLambda = proc_control_B.ix_k; proc_control_B.u1 < 0
             ? proc_control_B.mLambda >= proc_control_B.iy :
             proc_control_B.mLambda <= proc_control_B.iy; proc_control_B.mLambda
             += proc_control_B.u1) {
          proc_control_B.b_iy = (proc_control_B.mLambda +
            proc_control_B.nVar_tmp_tmp) - 1;
          for (proc_control_B.idx_max = proc_control_B.mLambda;
               proc_control_B.idx_max <= proc_control_B.b_iy;
               proc_control_B.idx_max++) {
            proc_control_B.idx_max_tmp = proc_control_B.idx_max -
              proc_control_B.mLambda;
            TrialState->delta_gradLag.data[proc_control_B.idx_max_tmp] +=
              WorkingSet->Aineq.data[proc_control_B.idx_max - 1] *
              TrialState->lambdasqp.data[proc_control_B.c_ix];
          }

          proc_control_B.c_ix++;
        }

        proc_control_B.idx_max = proc_control_B.b_nVar;
        proc_control_B.c_ix = proc_control_B.c_ix_tmp + 1;
        for (proc_control_B.b_nVar = 1; proc_control_B.u1 < 0 ?
             proc_control_B.b_nVar >= proc_control_B.c_ix :
             proc_control_B.b_nVar <= proc_control_B.c_ix; proc_control_B.b_nVar
             += proc_control_B.u1) {
          proc_control_B.b_iy = (proc_control_B.b_nVar +
            proc_control_B.nVar_tmp_tmp) - 1;
          for (proc_control_B.mLambda = proc_control_B.b_nVar;
               proc_control_B.mLambda <= proc_control_B.b_iy;
               proc_control_B.mLambda++) {
            proc_control_B.idx_max_tmp = proc_control_B.mLambda -
              proc_control_B.b_nVar;
            TrialState->delta_gradLag.data[proc_control_B.idx_max_tmp] +=
              TrialState->JacCineqTrans_old.data[proc_control_B.mLambda - 1] *
              -TrialState->lambdasqp.data[proc_control_B.idx_max];
          }

          proc_control_B.idx_max++;
        }
      }

      proc_control_saveJacobian(TrialState, proc_control_B.nVar_tmp_tmp,
        proc_control_B.mIneq_f, WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, WorkingSet->ldA);
      proc_control_BFGSUpdate(proc_control_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_float.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S148>/NLMPC'
void proc_control::proc_control_fmincon(const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *fun_workspace_runtimedata, const sumhYdZsdukPgvAXm7nzHOD_proc__T
  *fun_workspace_userdata, const real_T x0[139], const real_T Aineq_data[],
  const real_T bineq_data[], const int32_T bineq_size[1], const real_T lb[139],
  const s_qYIvDqP9yRqtt40IDZ89JG_proc_T *nonlcon_workspace_runtimedata, const
  sumhYdZsdukPgvAXm7nzHOD_proc__T *nonlcon_workspace_userdata, real_T x[139],
  real_T *fval, real_T *exitflag, real_T *output_iterations, real_T
  *output_funcCount, char_T output_algorithm[3], real_T *output_constrviolation,
  real_T *output_stepsize, real_T *output_lssteplength, real_T
  *output_firstorderopt)
{
  __m128d tmp;
  proc_control_c4_mpclib_anonFcn2(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0, proc_control_B.Cineq_data,
    proc_control_B.Cineq_size, proc_control_B.Ceq,
    proc_control_B.JacCineqTrans_data, proc_control_B.JacCineqTrans_size,
    proc_control_B.JacCeqTrans);
  proc_control_B.mNonlinIneq = proc_control_B.Cineq_size[0] *
    proc_control_B.Cineq_size[1];
  proc_control_B.mIneq = bineq_size[0] + proc_control_B.mNonlinIneq;
  proc_control_B.mConstrMax = (proc_control_B.mIneq + proc_control_B.mIneq) +
    669;
  if (proc_control_B.mIneq + 400 >= proc_control_B.mConstrMax) {
    proc_control_B.maxDims = proc_control_B.mIneq + 400;
  } else {
    proc_control_B.maxDims = proc_control_B.mConstrMax;
  }

  proc_control_factoryConstruct(proc_control_B.mIneq + 400,
    proc_control_B.mConstrMax, proc_control_B.mIneq, proc_control_B.mNonlinIneq,
    &proc_control_B.TrialState);
  memcpy(&proc_control_B.TrialState.xstarsqp[0], &x0[0], 139U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.b_value =
    proc_control_B.mNonlinIneq;
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.x
     [0], &nonlcon_workspace_runtimedata->x[0], 13U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.lastMV
     [0], &nonlcon_workspace_runtimedata->lastMV[0], sizeof(real_T) << 3U);
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ref
     [0], &nonlcon_workspace_runtimedata->ref[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputWeights
     [0], &nonlcon_workspace_runtimedata->OutputWeights[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVWeights
     [0], &nonlcon_workspace_runtimedata->MVWeights[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateWeights
     [0], &nonlcon_workspace_runtimedata->MVRateWeights[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ECRWeight
    = nonlcon_workspace_runtimedata->ECRWeight;
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMin
     [0], &nonlcon_workspace_runtimedata->OutputMin[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMax
     [0], &nonlcon_workspace_runtimedata->OutputMax[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMin
     [0], &nonlcon_workspace_runtimedata->StateMin[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMax
     [0], &nonlcon_workspace_runtimedata->StateMax[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMin
     [0], &nonlcon_workspace_runtimedata->MVMin[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMax
     [0], &nonlcon_workspace_runtimedata->MVMax[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMin
     [0], &nonlcon_workspace_runtimedata->MVRateMin[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMax
     [0], &nonlcon_workspace_runtimedata->MVRateMax[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVScaledTarget
     [0], &nonlcon_workspace_runtimedata->MVScaledTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.userdata
    = *nonlcon_workspace_userdata;
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.x
     [0], &fun_workspace_runtimedata->x[0], 13U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.lastMV
     [0], &fun_workspace_runtimedata->lastMV[0], sizeof(real_T) << 3U);
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ref
     [0], &fun_workspace_runtimedata->ref[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputWeights
     [0], &fun_workspace_runtimedata->OutputWeights[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVWeights
     [0], &fun_workspace_runtimedata->MVWeights[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateWeights
     [0], &fun_workspace_runtimedata->MVRateWeights[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ECRWeight
    = fun_workspace_runtimedata->ECRWeight;
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMin
     [0], &fun_workspace_runtimedata->OutputMin[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMax
     [0], &fun_workspace_runtimedata->OutputMax[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMin
     [0], &fun_workspace_runtimedata->StateMin[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMax
     [0], &fun_workspace_runtimedata->StateMax[0], 130U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMin
     [0], &fun_workspace_runtimedata->MVMin[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMax
     [0], &fun_workspace_runtimedata->MVMax[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMin
     [0], &fun_workspace_runtimedata->MVRateMin[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMax
     [0], &fun_workspace_runtimedata->MVRateMax[0], 80U * sizeof(real_T));
  memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVScaledTarget
     [0], &fun_workspace_runtimedata->MVScaledTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.userdata
    = *fun_workspace_userdata;
  proc_cont_factoryConstruct_p52k(proc_control_B.mIneq + 400,
    proc_control_B.QPObjective.grad.size, proc_control_B.QPObjective.Hx.size,
    &proc_control_B.QPObjective.hasLinear, &proc_control_B.QPObjective.nvar,
    &proc_control_B.QPObjective.maxVar, &proc_control_B.QPObjective.beta,
    &proc_control_B.QPObjective.rho, &proc_control_B.QPObjective.objtype,
    &proc_control_B.QPObjective.prev_objtype,
    &proc_control_B.QPObjective.prev_nvar,
    &proc_control_B.QPObjective.prev_hasLinear,
    &proc_control_B.QPObjective.gammaScalar);
  proc_control_B.QPObjective.nvar = 139;
  proc_control_B.QPObjective.hasLinear = true;
  proc_control_B.QPObjective.objtype = 3;
  proc_control_B.memspace.workspace_float.size[0] = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_float.size[1] = proc_control_B.mIneq + 400;
  proc_control_B.memspace.workspace_int.size[0] = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_sort.size[0] = proc_control_B.maxDims;
  proc_con_factoryConstruct_p52kz(proc_control_B.mIneq, proc_control_B.mIneq +
    400, proc_control_B.mConstrMax, &proc_control_B.WorkingSet);
  proc_control_B.k = -1;
  for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 < 139; proc_control_B.iEq0++)
  {
    proc_control_B.b_c_ob = lb[proc_control_B.iEq0];
    if ((!rtIsInf(proc_control_B.b_c_ob)) && (!rtIsNaN(proc_control_B.b_c_ob)))
    {
      proc_control_B.k++;
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.k] =
        proc_control_B.iEq0 + 1;
    }
  }

  proc_control_B.WorkingSet.mConstrMax = proc_control_B.mConstrMax;
  proc_control_B.iEq0 = proc_control_B.mIneq + proc_control_B.k;
  proc_control_B.WorkingSet.mConstr = proc_control_B.iEq0 + 131;
  proc_control_B.WorkingSet.mConstrOrig = proc_control_B.iEq0 + 131;
  proc_control_B.WorkingSet_tmp[0] = 0;
  proc_control_B.WorkingSet_tmp[1] = 130;
  proc_control_B.WorkingSet_tmp[2] = static_cast<int16_T>(proc_control_B.mIneq);
  proc_control_B.WorkingSet_tmp[3] = static_cast<int16_T>(proc_control_B.k + 1);
  proc_control_B.WorkingSet_tmp[4] = 0;
  for (proc_control_B.i_n = 0; proc_control_B.i_n < 5; proc_control_B.i_n++) {
    proc_control_B.WorkingSet_tmp_p =
      proc_control_B.WorkingSet_tmp[proc_control_B.i_n];
    proc_control_B.WorkingSet.sizes[proc_control_B.i_n] =
      proc_control_B.WorkingSet_tmp_p;
    proc_control_B.WorkingSet.sizesNormal[proc_control_B.i_n] =
      proc_control_B.WorkingSet_tmp_p;
  }

  proc_control_B.WorkingSet.sizesPhaseOne[0] = 0;
  proc_control_B.WorkingSet.sizesPhaseOne[1] = 130;
  proc_control_B.WorkingSet.sizesPhaseOne[2] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.sizesPhaseOne[3] = proc_control_B.k + 2;
  proc_control_B.WorkingSet.sizesPhaseOne[4] = 0;
  proc_control_B.WorkingSet.sizesRegularized[0] = 0;
  proc_control_B.WorkingSet.sizesRegularized[1] = 130;
  proc_control_B.WorkingSet.sizesRegularized[2] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.sizesRegularized[3] = proc_control_B.iEq0 + 261;
  proc_control_B.WorkingSet.sizesRegularized[4] = 0;
  proc_control_B.WorkingSet.sizesRegPhaseOne[0] = 0;
  proc_control_B.WorkingSet.sizesRegPhaseOne[1] = 130;
  proc_control_B.WorkingSet.sizesRegPhaseOne[2] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.sizesRegPhaseOne[3] = proc_control_B.iEq0 + 262;
  proc_control_B.WorkingSet.sizesRegPhaseOne[4] = 0;
  proc_control_B.WorkingSet.isActiveIdxNormal[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxNormal[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxNormal[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxNormal[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxNormal[4] = proc_control_B.k + 1;
  proc_control_B.WorkingSet.isActiveIdxNormal[5] = 0;
  for (proc_control_B.i_n = 0; proc_control_B.i_n < 6; proc_control_B.i_n++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_n] =
      proc_control_B.WorkingSet.isActiveIdxNormal[proc_control_B.i_n];
  }

  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  for (proc_control_B.i_n = 0; proc_control_B.i_n < 6; proc_control_B.i_n++) {
    proc_control_B.WorkingSet.isActiveIdx[proc_control_B.i_n] =
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_n];
  }

  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[4] = proc_control_B.k + 2;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[5] = 0;
  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxNormal[proc_control_B.mConstrMax + 1] +=
      proc_control_B.WorkingSet.isActiveIdxNormal[proc_control_B.mConstrMax];
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  for (proc_control_B.i_n = 0; proc_control_B.i_n < 6; proc_control_B.i_n++) {
    proc_control_B.WorkingSet.isActiveIdxPhaseOne[proc_control_B.i_n] =
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_n];
  }

  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[4] = proc_control_B.iEq0 +
    261;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[5] = 0;
  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  for (proc_control_B.i_n = 0; proc_control_B.i_n < 6; proc_control_B.i_n++) {
    proc_control_B.WorkingSet.isActiveIdxRegularized[proc_control_B.i_n] =
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_n];
  }

  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[4] = proc_control_B.iEq0 +
    262;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[5] = 0;
  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  if (proc_control_B.mIneq > 0) {
    proc_control_B.mConstrMax = bineq_size[0];
    for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 <
         proc_control_B.mConstrMax; proc_control_B.iEq0++) {
      for (proc_control_B.i_n = 0; proc_control_B.i_n < 139; proc_control_B.i_n
           ++) {
        proc_control_B.WorkingSet.Aineq.data[proc_control_B.i_n +
          proc_control_B.WorkingSet.ldA * proc_control_B.iEq0] =
          Aineq_data[bineq_size[0] * proc_control_B.i_n + proc_control_B.iEq0];
      }
    }
  }

  for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 <= proc_control_B.k;
       proc_control_B.iEq0++) {
    proc_control_B.mConstrMax =
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.iEq0];
    proc_control_B.b_c_ob = lb[proc_control_B.mConstrMax - 1];
    if ((proc_control_B.TrialState.xstarsqp[proc_control_B.mConstrMax - 1] >=
         proc_control_B.b_c_ob) || rtIsNaN(proc_control_B.b_c_ob)) {
    } else {
      proc_control_B.TrialState.xstarsqp[proc_control_B.mConstrMax - 1] =
        proc_control_B.b_c_ob;
    }
  }

  evalObjAndConstrAndDerivatives(proc_control_B.mNonlinIneq,
    &proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata,
    &proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace,
    proc_control_B.TrialState.xstarsqp, proc_control_B.TrialState.grad.data,
    proc_control_B.TrialState.cIneq.data, proc_control_B.TrialState.iNonIneq0,
    proc_control_B.TrialState.cEq, proc_control_B.WorkingSet.Aineq.data,
    proc_control_B.TrialState.iNonIneq0, proc_control_B.WorkingSet.ldA,
    proc_control_B.WorkingSet.Aeq.data, proc_control_B.WorkingSet.ldA,
    &proc_control_B.TrialState.sqpFval, &proc_control_B.mConstrMax);
  proc_control_B.TrialState.FunctionEvaluations = 1;
  proc_control_B.mConstrMax = proc_control_B.WorkingSet.ldA;
  if (bineq_size[0] > 0) {
    proc_control_B.loop_ub_o = proc_control_B.TrialState.cIneq.size[0];
    if (proc_control_B.loop_ub_o - 1 >= 0) {
      memcpy(&proc_control_B.y_data_b[0], &proc_control_B.TrialState.cIneq.data
             [0], static_cast<uint32_T>(proc_control_B.loop_ub_o) * sizeof
             (real_T));
    }

    proc_control_B.iEq0 = bineq_size[0];
    memcpy(&proc_control_B.y_data_b[0], &bineq_data[0], static_cast<uint32_T>
           (proc_control_B.iEq0) * sizeof(real_T));
    if (proc_control_B.loop_ub_o - 1 >= 0) {
      memcpy(&proc_control_B.TrialState.cIneq.data[0], &proc_control_B.y_data_b
             [0], static_cast<uint32_T>(proc_control_B.loop_ub_o) * sizeof
             (real_T));
    }

    proc_control_B.loop_ub_o = (bineq_size[0] / 2) << 1;
    proc_control_B.vectorUB_h = proc_control_B.loop_ub_o - 2;
    for (proc_control_B.i_n = 0; proc_control_B.i_n <= proc_control_B.vectorUB_h;
         proc_control_B.i_n += 2) {
      tmp = _mm_loadu_pd
        (&proc_control_B.TrialState.cIneq.data[proc_control_B.i_n]);
      _mm_storeu_pd(&proc_control_B.TrialState.cIneq.data[proc_control_B.i_n],
                    _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
    }

    for (proc_control_B.i_n = proc_control_B.loop_ub_o; proc_control_B.i_n <
         proc_control_B.iEq0; proc_control_B.i_n++) {
      proc_control_B.TrialState.cIneq.data[proc_control_B.i_n] =
        -proc_control_B.TrialState.cIneq.data[proc_control_B.i_n];
    }

    proc_control_B.iEq0 = 0;
    proc_control_B.i_n = (bineq_size[0] - 1) * proc_control_B.WorkingSet.ldA + 1;
    for (proc_control_B.loop_ub_o = 1; proc_control_B.mConstrMax < 0 ?
         proc_control_B.loop_ub_o >= proc_control_B.i_n :
         proc_control_B.loop_ub_o <= proc_control_B.i_n;
         proc_control_B.loop_ub_o += proc_control_B.mConstrMax) {
      proc_control_B.b_c_ob = 0.0;
      for (proc_control_B.vectorUB_h = proc_control_B.loop_ub_o;
           proc_control_B.vectorUB_h <= proc_control_B.loop_ub_o + 138;
           proc_control_B.vectorUB_h++) {
        proc_control_B.b_c_ob +=
          proc_control_B.WorkingSet.Aineq.data[proc_control_B.vectorUB_h - 1] *
          proc_control_B.TrialState.xstarsqp[proc_control_B.vectorUB_h -
          proc_control_B.loop_ub_o];
      }

      proc_control_B.TrialState.cIneq.data[proc_control_B.iEq0] +=
        proc_control_B.b_c_ob;
      proc_control_B.iEq0++;
    }
  }

  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 130;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.beq[proc_control_B.mConstrMax] =
      -proc_control_B.TrialState.cEq[proc_control_B.mConstrMax];
    proc_control_B.WorkingSet.bwset.data[proc_control_B.mConstrMax] =
      proc_control_B.WorkingSet.beq[proc_control_B.mConstrMax];
  }

  proc_control_B.mConstrMax = 0;
  proc_control_B.iEq0 = 0;
  for (proc_control_B.i_n = 0; proc_control_B.i_n < 130; proc_control_B.i_n++) {
    memcpy(&proc_control_B.WorkingSet.ATwset.data[proc_control_B.mConstrMax],
           &proc_control_B.WorkingSet.Aeq.data[proc_control_B.iEq0], 139U *
           sizeof(real_T));
    proc_control_B.mConstrMax += proc_control_B.WorkingSet.ldA;
    proc_control_B.iEq0 = proc_control_B.mConstrMax;
  }

  proc_control_B.loop_ub_o = (proc_control_B.mIneq / 2) << 1;
  proc_control_B.vectorUB_h = proc_control_B.loop_ub_o - 2;
  for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 <= proc_control_B.vectorUB_h;
       proc_control_B.iEq0 += 2) {
    tmp = _mm_loadu_pd(&proc_control_B.TrialState.cIneq.data[proc_control_B.iEq0]);
    _mm_storeu_pd(&proc_control_B.WorkingSet.bineq.data[proc_control_B.iEq0],
                  _mm_mul_pd(tmp, _mm_set1_pd(-1.0)));
  }

  for (proc_control_B.iEq0 = proc_control_B.loop_ub_o; proc_control_B.iEq0 <
       proc_control_B.mIneq; proc_control_B.iEq0++) {
    proc_control_B.WorkingSet.bineq.data[proc_control_B.iEq0] =
      -proc_control_B.TrialState.cIneq.data[proc_control_B.iEq0];
  }

  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax <=
       proc_control_B.k; proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.lb.data[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax]
      - 1] =
      -lb[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1]
      + x0[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1];
  }

  proc_control_initActiveSet(&proc_control_B.WorkingSet);
  proc_control_B.MeritFunction.initFval = proc_control_B.TrialState.sqpFval;
  proc_control_B.MeritFunction.penaltyParam = 1.0;
  proc_control_B.MeritFunction.threshold = 0.0001;
  proc_control_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_B.b_c_ob = 0.0;
  for (proc_control_B.k = 0; proc_control_B.k < 130; proc_control_B.k++) {
    proc_control_B.b_c_ob += fabs(proc_control_B.TrialState.cEq[proc_control_B.k]);
  }

  proc_control_B.MeritFunction.initConstrViolationEq = proc_control_B.b_c_ob;
  proc_control_B.b_c_ob = 0.0;
  for (proc_control_B.k = 0; proc_control_B.k < proc_control_B.mIneq;
       proc_control_B.k++) {
    proc_control_B.scale_l =
      proc_control_B.TrialState.cIneq.data[proc_control_B.k];
    if (proc_control_B.scale_l > 0.0) {
      proc_control_B.b_c_ob += proc_control_B.scale_l;
    }
  }

  proc_control_B.MeritFunction.initConstrViolationIneq = proc_control_B.b_c_ob;
  proc_control_B.MeritFunction.phi = 0.0;
  proc_control_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_B.MeritFunction.phiFullStep = 0.0;
  proc_control_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_B.MeritFunction.nlpComplError = 0.0;
  proc_control_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_p5(proc_control_B.maxDims, proc_control_B.maxDims,
    &proc_control_B.QRManager.ldq, proc_control_B.QRManager.QR.size,
    proc_control_B.QRManager.Q.data, proc_control_B.QRManager.Q.size,
    proc_control_B.QRManager.jpvt.data, proc_control_B.QRManager.jpvt.size,
    &proc_control_B.QRManager.mrows, &proc_control_B.QRManager.ncols,
    proc_control_B.QRManager.tau.size, &proc_control_B.QRManager.minRowCol,
    &proc_control_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_p52(proc_control_B.maxDims,
    proc_control_B.CholManager.FMat.size, &proc_control_B.CholManager.ldm,
    &proc_control_B.CholManager.ndims, &proc_control_B.CholManager.info,
    &proc_control_B.CholManager.scaleFactor,
    &proc_control_B.CholManager.ConvexCheck, &proc_control_B.CholManager.regTol_,
    &proc_control_B.CholManager.workspace_,
    &proc_control_B.CholManager.workspace2_);
  proc_control_B.tmp_size_fz[0] = bineq_size[0];
  proc_control_B.tmp_size_h[0] = proc_control_B.mNonlinIneq;
  proc_control_driver(bineq_data, lb, &proc_control_B.TrialState,
                      &proc_control_B.MeritFunction,
                      &proc_control_B.FcnEvaluator, &proc_control_B.memspace,
                      &proc_control_B.WorkingSet, &proc_control_B.QRManager,
                      &proc_control_B.CholManager, &proc_control_B.QPObjective,
                      proc_control_B.tmp_size_fz, proc_control_B.tmp_size_h,
                      proc_control_B.unusedExpr);
  *fval = proc_control_B.TrialState.sqpFval;
  *exitflag = proc_control_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_B.MeritFunction.nlpPrimalFeasError;
  proc_control_B.b_c_ob = 0.0;
  proc_control_B.scale_l = 3.3121686421112381E-170;
  for (proc_control_B.mNonlinIneq = 0; proc_control_B.mNonlinIneq < 139;
       proc_control_B.mNonlinIneq++) {
    x[proc_control_B.mNonlinIneq] =
      proc_control_B.TrialState.xstarsqp[proc_control_B.mNonlinIneq];
    proc_control_B.absxk_k = fabs
      (proc_control_B.TrialState.delta_x.data[proc_control_B.mNonlinIneq]);
    if (proc_control_B.absxk_k > proc_control_B.scale_l) {
      proc_control_B.t_j = proc_control_B.scale_l / proc_control_B.absxk_k;
      proc_control_B.b_c_ob = proc_control_B.b_c_ob * proc_control_B.t_j *
        proc_control_B.t_j + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk_k;
    } else {
      proc_control_B.t_j = proc_control_B.absxk_k / proc_control_B.scale_l;
      proc_control_B.b_c_ob += proc_control_B.t_j * proc_control_B.t_j;
    }
  }

  *output_stepsize = proc_control_B.scale_l * sqrt(proc_control_B.b_c_ob);
  *output_lssteplength = proc_control_B.TrialState.steplength;
  *output_firstorderopt = proc_control_B.MeritFunction.firstOrderOpt;
}

void proc_control::proc_contr_Subscriber_setupImpl(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[26];
  static const char_T b_zeroDelimTopic_0[26] = "/proc_simulation/imu_info";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S38>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 26; i++) {
    // Start for MATLABSystem: '<S38>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_209_83.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_con_Subscriber_setupImpl_p(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[30];
  static const char_T b_zeroDelimTopic_0[30] = "/proc_simulation/dvl_velocity";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S39>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 30; i++) {
    // Start for MATLABSystem: '<S39>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_209_84.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_co_Subscriber_setupImpl_pr(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[23];
  static const char_T b_zeroDelimTopic_0[23] = "/proc_simulation/depth";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S40>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 23; i++) {
    // Start for MATLABSystem: '<S40>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_209_85.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_c_Subscriber_setupImpl_pr3(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[23];
  static const char_T b_zeroDelimTopic_0[23] = "/provider_imu/imu_info";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S27>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 23; i++) {
    // Start for MATLABSystem: '<S27>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_209_4.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc__Subscriber_setupImpl_pr35(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[27];
  static const char_T b_zeroDelimTopic_0[27] = "/provider_dvl/dvl_velocity";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S28>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 27; i++) {
    // Start for MATLABSystem: '<S28>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_209_5.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_Subscriber_setupImpl_pr351(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[22];
  static const char_T b_zeroDelimTopic_0[22] = "/provider_depth/depth";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S29>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 22; i++) {
    // Start for MATLABSystem: '<S29>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_209_6.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::pr_ROS2PubSubBase_setQOSProfile(rmw_qos_profile_t rmwProfile,
  real_T qosDepth, real_T qosDeadline, real_T qosLifespan, real_T
  qosLeaseDuration, boolean_T qosAvoidROSNamespaceConventions)
{
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  real_T input;
  real_T sec;
  input = qosDeadline;

  // Start for MATLABSystem: '<S15>/SinkBlock' incorporates:
  //   MATLABSystem: '<S111>/SinkBlock'

  if (qosDeadline == (rtInf)) {
    input = 0.0;
  }

  sec = floor(input);
  deadline.sec = sec;

  // Start for MATLABSystem: '<S15>/SinkBlock' incorporates:
  //   MATLABSystem: '<S111>/SinkBlock'

  deadline.nsec = (input - sec) * 1.0E+9;
  input = qosLifespan;

  // Start for MATLABSystem: '<S15>/SinkBlock' incorporates:
  //   MATLABSystem: '<S111>/SinkBlock'

  if (qosLifespan == (rtInf)) {
    input = 0.0;
  }

  sec = floor(input);
  lifespan.sec = sec;

  // Start for MATLABSystem: '<S15>/SinkBlock' incorporates:
  //   MATLABSystem: '<S111>/SinkBlock'

  lifespan.nsec = (input - sec) * 1.0E+9;
  input = qosLeaseDuration;

  // Start for MATLABSystem: '<S15>/SinkBlock' incorporates:
  //   MATLABSystem: '<S111>/SinkBlock'

  if (qosLeaseDuration == (rtInf)) {
    input = 0.0;
  }

  sec = floor(input);
  liveliness_lease_duration.sec = sec;

  // Start for MATLABSystem: '<S15>/SinkBlock' incorporates:
  //   MATLABSystem: '<S111>/SinkBlock'

  liveliness_lease_duration.nsec = (input - sec) * 1.0E+9;
  SET_QOS_VALUES(rmwProfile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)qosDepth,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)qosAvoidROSNamespaceConventions);
}

void proc_control::proc_contro_Publisher_setupImpl(const
  ros_slros2_internal_block_Pub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[24];
  static const char_T b_zeroDelimTopic_0[24] = "/proc_control/sensor_on";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S11>/SinkBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 24; i++) {
    // Start for MATLABSystem: '<S11>/SinkBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Pub_proc_control_500.createPublisher(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setupIm_pr351ewpk3k4(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[28];
  static const char_T b_zeroDelimTopic_0[28] = "/proc_control/set_mpc_gains";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S171>/SourceBlock'
  deadline.sec = 5.0;
  deadline.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 28; i++) {
    // Start for MATLABSystem: '<S171>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_780.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setupI_pr351ewpk3k4u(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[28];
  static const char_T b_zeroDelimTopic_0[28] = "/provider_power/current_not";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S172>/SourceBlock'
  deadline.sec = 5.0;
  deadline.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 28; i++) {
    // Start for MATLABSystem: '<S172>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_781.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_cont_PolyTrajSys_setupImpl
  (robotics_slcore_internal_bl_p_T *obj)
{
  real_T modCoeffs[36];
  real_T coefMat[12];
  real_T modBreaks[4];
  real_T obj_0[2];
  real_T tmp[2];
  int32_T b_j;
  for (b_j = 0; b_j < 6; b_j++) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    obj->PrevOptInputs.f1[b_j] = 1.0;
  }

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  obj->PrevOptInputs.f2[0] = 1.0;
  obj->PrevOptInputs.f2[1] = 1.0;
  tmp[0] = 1.0;
  tmp[1] = 1.0;
  for (b_j = 0; b_j < 3; b_j++) {
    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    obj_0[0] = obj->VelocityBoundaryCondition[b_j];
    obj_0[1] = obj->VelocityBoundaryCondition[b_j + 3];
    proc_contro_generateCubicCoeffs(tmp, obj_0, 1.0, modBreaks);
    coefMat[b_j] = modBreaks[0];
    coefMat[b_j + 3] = modBreaks[1];
    coefMat[b_j + 6] = modBreaks[2];
    coefMat[b_j + 9] = modBreaks[3];
  }

  tmp[0] = 1.0;
  tmp[1] = 2.0;
  pr_addFlatSegmentsToPPFormParts(tmp, coefMat, modBreaks, modCoeffs);

  // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
  PolyTrajSys_updateStoredPPForms(obj, modBreaks, modCoeffs);
  obj->PPFormUpdatedNeeded = false;
}

void proc_control::proc_con_Subscriber_setupImpl_n(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[23];
  static const char_T b_zeroDelimTopic_0[23] = "/proc_control/add_pose";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S252>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 23; i++) {
    // Start for MATLABSystem: '<S252>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_589.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_cont_Publisher_setupImpl_p(const
  ros_slros2_internal_block_Pub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[32];
  static const char_T b_zeroDelimTopic_0[32] = "/provider_thruster/thruster_pwm";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S19>/SinkBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 32; i++) {
    // Start for MATLABSystem: '<S19>/SinkBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Pub_proc_control_1380.createPublisher(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_con_Publisher_setupImpl_pr(const
  ros_slros2_internal_block_Pub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[27];
  static const char_T b_zeroDelimTopic_0[27] = "/telemetry/thruster_newton";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S20>/SinkBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 27; i++) {
    // Start for MATLABSystem: '<S20>/SinkBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Pub_proc_control_1386.createPublisher(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_co_Publisher_setupImpl_pr3(const
  ros_slros2_internal_block_Pub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[29];
  static const char_T b_zeroDelimTopic_0[29] = "proc_control/controller_info";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S23>/SinkBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 29; i++) {
    // Start for MATLABSystem: '<S23>/SinkBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Pub_proc_control_1430.createPublisher(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::pro_Subscriber_setupImpl_pr351e(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[23];
  static const char_T b_zeroDelimTopic_0[23] = "/proc_control/set_mode";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S56>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 23; i++) {
    // Start for MATLABSystem: '<S56>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_1.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setupImp_pr351ewpk3k(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[20];
  static const char_T b_zeroDelimTopic_0[20] = "/proc_nav/reset_pos";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S61>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 20; i++) {
    // Start for MATLABSystem: '<S61>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_1486.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::pr_Subscriber_setupImpl_pr351ew(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[28];
  static const char_T b_zeroDelimTopic_0[28] = "/provider_rs485/kill_status";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S57>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 28; i++) {
    // Start for MATLABSystem: '<S57>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_13.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::p_Subscriber_setupImpl_pr351ewp(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[67];
  static const char_T b_zeroDelimTopic_0[67] =
    "/proc_simulation/start_sim/proc_simulation/start_simulationulation";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S58>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  memcpy(&b_zeroDelimTopic[0], &b_zeroDelimTopic_0[0], 67U * sizeof(char_T));
  Sub_proc_control_40.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setupImpl_pr351ewpk(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[19];
  static const char_T b_zeroDelimTopic_0[19] = "/telemetry/dry_run";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S59>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 19; i++) {
    // Start for MATLABSystem: '<S59>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_15.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setupImpl_pr351ewpk3(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[20];
  static const char_T b_zeroDelimTopic_0[20] = "/proc_nav/reset_pos";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S60>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 20; i++) {
    // Start for MATLABSystem: '<S60>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_16.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setup_pr351ewpk3k4u0(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[16];
  static const char_T b_zeroDelimTopic_0[16] = "/spacenav/twist";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S245>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 16; i++) {
    // Start for MATLABSystem: '<S245>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_532.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::Subscriber_setu_pr351ewpk3k4u0o(const
  ros_slros2_internal_block_Sub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[35];
  static const char_T b_zeroDelimTopic_0[35] =
    "/proc_planner/send_trajectory_list";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S247>/SourceBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 35; i++) {
    // Start for MATLABSystem: '<S247>/SourceBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Sub_proc_control_572.createSubscriber(&b_zeroDelimTopic[0], qos_profile);
}

void proc_control::proc_c_Publisher_setupImpl_pr35(const
  ros_slros2_internal_block_Pub_T *obj)
{
  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF deadline;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  char_T b_zeroDelimTopic[29];
  static const char_T b_zeroDelimTopic_0[29] = "/proc_control/current_target";
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S243>/SinkBlock'
  deadline.sec = 0.0;
  deadline.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, deadline, lifespan,
                 RMW_QOS_POLICY_LIVELINESS_AUTOMATIC, liveliness_lease_duration,
                 (bool)obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i = 0; i < 29; i++) {
    // Start for MATLABSystem: '<S243>/SinkBlock'
    b_zeroDelimTopic[i] = b_zeroDelimTopic_0[i];
  }

  Pub_proc_control_671.createPublisher(&b_zeroDelimTopic[0], qos_profile);
}

// Model step function
void proc_control::step()
{
  static const real_T b_B[6930] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040302, -4.9246767934457643E-6,
    0.0052868326178782173, 0.0020754199270452169, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590372, 0.0014846744549160561, 7.0936716057342316E-6,
    -0.0051391900270571457, 0.0021227702215873057, -0.015228232305159619, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183288, -4.7070151263154071E-6,
    0.0050961555194273568, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017572, 7.3113332728645887E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.01539766274083806, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496928, -0.00048221414518065207, -0.0020535983066627922,
    -0.02239703294428403, 0.011382823490747533, 4.5300466257935381E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371,
    -0.0014603487861040302, -4.9246767934457643E-6, 0.0052868326178782173,
    0.0020754199270452169, -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020430568849590372,
    0.0014846744549160561, 7.0936716057342316E-6, -0.0051391900270571457,
    0.0021227702215873057, -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021016480453829815,
    -0.0014857887933183288, -4.7070151263154071E-6, 0.0050961555194273568,
    0.0020754929921346357, 0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021001536346134803,
    0.0014592344477017572, 7.3113332728645887E-6, -0.0053298671255080053,
    0.0021228432866767255, 0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496928,
    -0.00048221414518065207, -0.0020535983066627922, -0.02239703294428403,
    0.011382823490747533, 4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003062394217119654,
    0.00047731536664842925, 0.0020665268130396616, 0.022172426283366312,
    0.011387616330349713, -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829,
    0.000502570134369898, -0.0021189752999033816, 0.023341150699844014,
    -0.011594289336350715, -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542,
    -0.00049767135583767507, 0.0021060467935265117, -0.023116544038926296,
    -0.01117615048474652, 0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const int32_T offsets[4] = { 0, 1, 2, 3 };

  static const int32_T offsets_0[4] = { 0, 1, 2, 3 };

  static const int32_T offsets_1[4] = { 0, 1, 2, 3 };

  static const int32_T offsets_2[4] = { 0, 1, 2, 3 };

  __m128d tmp;
  __m128d tmp_0;
  __m128d tmp_1;
  __m128d tmp_2;
  __m128d tmp_3;
  static const int8_T tmp_4[7] = { 3, 4, 5, 6, 10, 11, 12 };

  static const int8_T tmp_5[9] = { 0, 0, 0, 1, 0, 0, 0, 0, 0 };

  static const int8_T tmp_6[7] = { 0, 0, 0, 1, 0, 0, 0 };

  static real_T d[130] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0
  };

  static real_T f[130] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };

  static const real_T b[441] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422014, 0.00023231657375355515, 0.00085021850252945286,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531576,
    -1.8831321574108635, 0.0081315634991630872, 0.031843900678722038, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T c[630] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040302, -4.9246767934457643E-6,
    0.0052868326178782173, 0.0020754199270452169, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590372, 0.0014846744549160561, 7.0936716057342316E-6,
    -0.0051391900270571457, 0.0021227702215873057, -0.015228232305159619, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183288, -4.7070151263154071E-6,
    0.0050961555194273568, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017572, 7.3113332728645887E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.01539766274083806, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496928, -0.00048221414518065207, -0.0020535983066627922,
    -0.02239703294428403, 0.011382823490747533, 4.5300466257935381E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const int8_T d_0[273] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T e[226] = { 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0 };

  static const real_T f_0[21] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const int16_T b_Mrows[226] = { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83,
    84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
    104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122,
    123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140,
    141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161,
    162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200,
    201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218,
    219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257,
    258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 341, 342, 343, 344,
    345, 346, 347, 348 };

  static const real_T old_yoff[13] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const int8_T a[640] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  };

  static const real_T g[81] = { 2.5651005531616526, 1.7832054070796954,
    -1.4357517509568314, -1.6576468970387899, 0.038415984331270484,
    0.3095395073701282, -0.036229291873675157, -0.31172619982772343, 0.0,
    1.7832054070796954, 2.5938374699880686, -1.6864513320323564,
    -1.4358192691239851, 0.3145650106035548, 0.034578475258585879,
    -0.32320230353911911, -0.025941182323021436, 0.0, -1.4357517509568314,
    -1.6864513320323564, 2.6637476660450403, 1.8530480849695157,
    0.06117543468629158, 0.34697869874687842, -0.059238726472737396,
    -0.34891540696043255, 0.0, -1.6576468970387899, -1.4358192691239853,
    1.8530480849695157, 2.6348757128843223, 0.33732446095857593,
    0.072017666635336319, -0.34621173813818135, -0.063130389455730726, 0.0,
    0.0384159843312705, 0.3145650106035548, 0.061175434686291587,
    0.337324460958576, 2.4332119794598022, 0.28387059424322519,
    -1.5303883889049394, -0.536694184798087, 0.0, 0.3095395073701282,
    0.034578475258585886, 0.34697869874687842, 0.072017666635336333,
    0.28387059424322514, 2.4635388544622838, -0.57357610916459878,
    -1.5238333395409092, 0.0, -0.036229291873675164, -0.32320230353911911,
    -0.059238726472737389, -0.3462117381381814, -1.5303883889049392,
    -0.57357610916459867, 2.5191280342931295, 0.23483646377640788, 0.0,
    -0.31172619982772343, -0.025941182323021422, -0.34891540696043261,
    -0.06313038945573074, -0.536694184798087, -1.5238333395409092,
    0.23483646377640785, 2.4756910605625873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 100000.0 };

  static const real_T h[2034] = { -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040302, 4.9246767934457643E-6,
    -0.0052868326178782173, -0.0020754199270452169, 0.015163628780498446,
    3.1616010707720436E-7, -0.0, -0.00019811352068166413, -9.733336993428119E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442151,
    6.5614497023245073E-6, -0.0080792362290577832, -0.0038844512459874072,
    0.026788702408483002, 6.8512917620797546E-7, -0.0, -0.00049104314225850373,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228137, 6.1601073524460925E-6, -0.0091991288332427812,
    -0.0053836032115810936, 0.035691534155111788, 9.515955241686091E-7, -0.0,
    -0.00081150591943762143, -0.00052435232813021946, 0.0034085439914897236,
    -0.0077185036154530772, 0.00563726604148579, 4.6396980079752287E-6,
    -0.0092690633506094088, -0.00654832074431959, 0.042501234100522735,
    1.0377937756639656E-6, -0.0, -0.0011189252136054859, -0.00082088448415742121,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424437,
    2.6414509523473813E-6, -0.0087398966293815786, -0.0073714321358738892,
    0.047702538425699506, 9.1853767957217993E-7, -0.0, -0.001391638779765514,
    -0.0011501728132765289, 0.0073666001295169623, -0.011161718745088724,
    0.00820124153324256, 5.8494966353776041E-7, -0.0079227307407974644,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369554E-7, -0.0,
    -0.0016207036860207355, -0.0014960212712305321, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969556, -1.2790233473825676E-6,
    -0.007020235458604745, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040202E-7, -0.0, -0.0018051919142820267, -0.0018435530683128007,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659432,
    -2.82239855008753E-6, -0.006154644849868848, -0.007934340486205024,
    0.056980982028061261, -5.1013685987929281E-7, -0.0, -0.0019487749913620006,
    -0.0021796573224240924, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589607, -4.0018112448208546E-6, -0.0053912134366169455,
    -0.0075881528377809079, 0.058718842971069225, -1.23424891917915E-6, -0.0,
    -0.0020573611713821582, -0.0024933028948330325, 0.017104826530695772,
    -0.017334285099427416, 0.0127345953246283, -4.8286811668072085E-6,
    -0.004756876866607529, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.00019811352068166413, 9.733336993428119E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442151,
    -6.5614497023245073E-6, 0.0080792362290577832, 0.0038844512459874072,
    -0.026788702408483002, 0.0, 0.00049104314225850373, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228137,
    -6.1601073524460925E-6, 0.0091991288332427812, 0.0053836032115810936,
    -0.035691534155111788, 0.0, 0.00081150591943762143, 0.00052435232813021946,
    -0.0034085439914897236, 0.0077185036154530772, -0.00563726604148579,
    -4.6396980079752287E-6, 0.0092690633506094088, 0.00654832074431959,
    -0.042501234100522735, 0.0, 0.0011189252136054859, 0.00082088448415742121,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424437,
    -2.6414509523473813E-6, 0.0087398966293815786, 0.0073714321358738892,
    -0.047702538425699506, 0.0, 0.001391638779765514, 0.0011501728132765289,
    -0.0073666001295169623, 0.011161718745088724, -0.00820124153324256,
    -5.8494966353776041E-7, 0.0079227307407974644, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.0016207036860207355, 0.0014960212712305321,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969556,
    1.2790233473825676E-6, 0.007020235458604745, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.0018051919142820267, 0.0018435530683128007,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659432,
    2.82239855008753E-6, 0.006154644849868848, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913620006, 0.0021796573224240924,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589607,
    4.0018112448208546E-6, 0.0053912134366169455, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821582, 0.0024933028948330325,
    -0.017104826530695772, 0.017334285099427416, -0.0127345953246283,
    4.8286811668072085E-6, 0.004756876866607529, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590372, -0.0014846744549160561, -7.0936716057342316E-6,
    0.0051391900270571457, -0.0021227702215873057, 0.015228232305159619,
    -5.1746825674618421E-7, -0.0, 0.00019360954683992132, -9.8951619720029927E-5,
    0.00066903596330777557, -0.0040067314306774966, -0.0029322591857517642,
    -1.0565746060026213E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970965, -1.2501804167265802E-6, -0.0, 0.00048137249874376524,
    -0.0002812123096721656, 0.0018515897913409904, -0.0058959962902359461,
    -0.00433805660413819, -1.1566011819059163E-5, 0.0090182698834108191,
    -0.0054509447270126056, 0.035888209656145233, -1.99674342474268E-6, -0.0,
    0.00079779982914970015, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130649, -0.0056981223890151169, -1.0967109079724044E-5,
    0.0091195753483278835, -0.00660567593380442, 0.0427701561488428,
    -2.6308219371928462E-6, -0.0, 0.0011028937830708195, -0.0008275864795065065,
    0.0053069505185103531, -0.0094682805098512523, -0.0070095628750181035,
    -9.4049919993817713E-6, 0.0086253321268044, -0.0074136435021352051,
    0.04804544484898185, -3.079742094619743E-6, -0.0, 0.0013749180814484189,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939333,
    -0.00827058862369585, -7.3245584742921722E-6, 0.0078377590270683056,
    -0.0078869236468970261, 0.052084536642155919, -3.3076191174553654E-6, -0.0,
    0.0016045634974303, -0.001502682321689071, 0.0097046471474189055,
    -0.01278758479729789, -0.009480426545954863, -5.0236620287564823E-6,
    0.0069562410011868225, -0.0080491061052958713, 0.055172377151487914,
    -3.3026429098114466E-6, -0.0, 0.0017904596235921739, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562018, -0.010639161635940208,
    -2.6918556487285661E-6, 0.0061029256813059053, -0.0079329836605401376,
    0.057528472990236557, -3.0679042907758775E-6, -0.0, 0.0019358763409865662,
    -0.0021835932805221218, 0.014653203386246897, -0.01587211736084378,
    -0.01174755497429808, -4.4233786615141425E-7, 0.0053445703843127169,
    -0.007578149996654163, 0.059322164719128156, -2.6150642512061629E-6, -0.0,
    0.002046412901449518, -0.0024952750539298735, 0.017257462274893824,
    -0.017329934052813311, -0.012806866470529164, 1.6630845986044885E-6,
    0.004710183664429741, -0.0070286124953556385, 0.06068425383363444, 0.0, 0.0,
    0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, -0.00019360954683992132, 9.8951619720029927E-5,
    -0.00066903596330777557, 0.0040067314306774966, 0.0029322591857517642,
    1.0565746060026213E-5, -0.0078884598525309352, 0.0039509928253638827,
    -0.026917231873970965, 0.0, -0.00048137249874376524, 0.0002812123096721656,
    -0.0018515897913409904, 0.0058959962902359461, 0.00433805660413819,
    1.1566011819059163E-5, -0.0090182698834108191, 0.0054509447270126056,
    -0.035888209656145233, 0.0, -0.00079779982914970015, 0.000529877384341185,
    -0.0034281815934806724, 0.0077152543580130649, 0.0056981223890151169,
    1.0967109079724044E-5, -0.0091195753483278835, 0.00660567593380442,
    -0.0427701561488428, 0.0, -0.0011028937830708195, 0.0008275864795065065,
    -0.0053069505185103531, 0.0094682805098512523, 0.0070095628750181035,
    9.4049919993817713E-6, -0.0086253321268044, 0.0074136435021352051,
    -0.04804544484898185, 0.0, -0.0013749180814484189, 0.0011572507586087781,
    -0.00741723100352391, 0.011158213201939333, 0.00827058862369585,
    7.3245584742921722E-6, -0.0078377590270683056, 0.0078869236468970261,
    -0.052084536642155919, 0.0, -0.0016045634974303, 0.001502682321689071,
    -0.0097046471474189055, 0.01278758479729789, 0.009480426545954863,
    5.0236620287564823E-6, -0.0069562410011868225, 0.0080491061052958713,
    -0.055172377151487914, 0.0, -0.0017904596235921739, 0.0018491127346458545,
    -0.012127361717645797, 0.014358380565562018, 0.010639161635940208,
    2.6918556487285661E-6, -0.0061029256813059053, 0.0079329836605401376,
    -0.057528472990236557, 0.0, -0.0019358763409865662, 0.0021835932805221218,
    -0.014653203386246897, 0.01587211736084378, 0.01174755497429808,
    4.4233786615141425E-7, -0.0053445703843127169, 0.007578149996654163,
    -0.059322164719128156, 0.0, -0.002046412901449518, 0.0024952750539298735,
    -0.017257462274893824, 0.017329934052813311, 0.012806866470529164,
    -1.6630845986044885E-6, -0.004710183664429741, 0.0070286124953556385,
    -0.06068425383363444, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021016480453829815, 0.0014857887933183288, 4.7070151263154071E-6,
    -0.0050961555194273568, -0.0020754929921346357, -0.015462266265499226,
    3.0426878718878512E-7, -0.0, -0.00019216872658156111, -9.73459460026197E-5,
    -0.0006792751071504849, -0.0041074683619141631, 0.0029340512081696582,
    6.3057460452133893E-6, -0.00782907896809333, -0.0038849506557918018,
    -0.027331354583334473, 6.62734268138552E-7, -0.0, -0.00047814040658582214,
    -0.000277566493848083, -0.0018802229105924365, -0.0060264210814452886,
    0.004340226359465434, 5.9587145352081754E-6, -0.0089598311740056811,
    -0.0053848318467642564, -0.036451644592615427, 9.2636180986459214E-7, -0.0,
    -0.00079309983115135284, -0.00052449064683289992, -0.0034822500476397213,
    -0.0078659750107290677, 0.0057004858091328934, 4.53035250065951E-6,
    -0.009072082021816039, -0.0065504901027000958, -0.04346807648358772,
    1.0194144264559595E-6, -0.0, -0.0010974076290702994, -0.00082115681443972331,
    -0.0053930322171731326, -0.0096322567462445857, 0.0070120285161873611,
    2.6300941233486375E-6, -0.00859341228061931, -0.0073746438770505617,
    -0.048873310311435589, 9.1637309261321483E-7, -0.0, -0.0013694590279160162,
    -0.001150631492424329, -0.0075418405117768745, -0.011330203401756304,
    0.0082731347444936279, 6.6101379080510053E-7, -0.0078222898403132,
    -0.0078653210901301167, -0.053043720345121143, 6.2369573871460046E-7, -0.0,
    -0.0015999229352117736, -0.0014967156366828343, -0.0098744448046202624,
    -0.012963718195152128, 0.009483080190435313, -1.1328950919024518E-6,
    -0.0069556646472008314, -0.0080434495506573524, -0.056266866774456553,
    1.6606812914153242E-7, -0.0, -0.0017873120317849229, -0.001844524963056166,
    -0.012349220884839871, -0.014535826846399721, 0.010641980597964831,
    -2.6245895611173217E-6, -0.0061142707936579412, -0.0079402478608791779,
    -0.058762467425333663, -4.2346592189731472E-7, -0.0, -0.0019347286197374037,
    -0.0021809376864936609, -0.014934176702927581, -0.016048831986543406,
    0.011750612976507081, -3.7686667972724881E-6, -0.0053642122139471188,
    -0.0075945532602473666, -0.060698414364158154, -1.1102016279514345E-6, -0.0,
    -0.002047586031960839, -0.0024949095612962508, -0.017604680748317732,
    -0.017504462457878039, 0.01281024154007194, -4.5731930224289637E-6,
    -0.0047343841216166364, -0.0070502037507671955, -0.062203013141477644, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156111, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696582,
    -6.3057460452133893E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582214, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.004340226359465434,
    -5.9587145352081754E-6, 0.0089598311740056811, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.00079309983115135284, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328934,
    -4.53035250065951E-6, 0.009072082021816039, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702994, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.0070120285161873611,
    -2.6300941233486375E-6, 0.00859341228061931, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160162, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.6101379080510053E-7, 0.0078222898403132, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117736, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.009483080190435313,
    1.1328950919024518E-6, 0.0069556646472008314, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849229, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964831,
    2.6245895611173217E-6, 0.0061142707936579412, 0.0079402478608791779,
    0.058762467425333663, 0.0, 0.0019347286197374037, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507081,
    3.7686667972724881E-6, 0.0053642122139471188, 0.0075945532602473666,
    0.060698414364158154, 0.0, 0.002047586031960839, 0.0024949095612962508,
    0.017604680748317732, 0.017504462457878039, -0.01281024154007194,
    4.5731930224289637E-6, 0.0047343841216166364, 0.0070502037507671955,
    0.062203013141477644, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017572, -7.3113332728645887E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.01539766274083806,
    -5.293595766346033E-7, -0.0, 0.00019955434094002435, -9.8964195788368479E-5,
    -0.00067609777093437923, -0.0041050445656567363, -0.0028891738663263207,
    -1.0821449717137331E-5, 0.0081386171134953875, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960036E-6, -0.0, 0.00049427523441644661,
    -0.00028126666539891307, -0.0018705737454285825, -0.0060234600994775568,
    -0.00428292063329557, -1.1767404636297082E-5, 0.0092575675426479175,
    -0.00545217336219577, -0.036254969091582, -2.021977139046697E-6, -0.0,
    0.00081620591743596853, -0.00053001570304386553, -0.0034626124456487752,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212516, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060056, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.416348828380519E-6, 0.0087718164755666659, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787082E-6, -0.0, 0.0013970978332979158,
    -0.0011577094377565786, -0.007491209637769931, -0.011326697858606906,
    -0.00819869541244478, -7.2484943470248376E-6, 0.0079381999275525677,
    -0.0078911687012202889, -0.0526280524684559, -3.28566710111032E-6, -0.0,
    0.0016253442482392609, -0.0015033766871413736, -0.0098029263852935661,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763732E-6,
    0.0070208118125907343, -0.0080542762665754622, -0.0557823370265015,
    -3.2504945682103177E-6, -0.0, 0.0018083395060892768, -0.0018500846293892205,
    -0.012253512617855847, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583657E-6, 0.00614329973751681, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939009E-6, -0.0, 0.0019499227126111626,
    -0.0021848736445916912, -0.014811305222971739, -0.016044804770756937,
    -0.011671987181380605, -2.0919341860305622E-7, 0.0053715716069825418,
    -0.0075845504191206286, -0.060095092616099251, -2.491016959978449E-6, -0.0,
    0.0020561880408708363, -0.0024968817203930927, -0.017452045004119697,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827252E-6,
    0.0047326764094206318, -0.007035229851983839, -0.061551515639656613, 0.0,
    0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, -0.00019955434094002435, 9.8964195788368479E-5,
    0.00067609777093437923, 0.0041050445656567363, 0.0028891738663263207,
    1.0821449717137331E-5, -0.0081386171134953875, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644661, 0.00028126666539891307,
    0.0018705737454285825, 0.0060234600994775568, 0.00428292063329557,
    1.1767404636297082E-5, -0.0092575675426479175, 0.00545217336219577,
    0.036254969091582, 0.0, -0.00081620591743596853, 0.00053001570304386553,
    0.0034626124456487752, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212516, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060056, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.416348828380519E-6, -0.0087718164755666659, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979158, 0.0011577094377565786,
    0.007491209637769931, 0.011326697858606906, 0.00819869541244478,
    7.2484943470248376E-6, -0.0079381999275525677, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392609, 0.0015033766871413736,
    0.0098029263852935661, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763732E-6, -0.0070208118125907343, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892768, 0.0018500846293892205,
    0.012253512617855847, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583657E-6, -0.00614329973751681, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111626, 0.0021848736445916912,
    0.014811305222971739, 0.016044804770756937, 0.011671987181380605,
    2.0919341860305622E-7, -0.0053715716069825418, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708363, 0.0024968817203930927,
    0.017452045004119697, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827252E-6, -0.0047326764094206318, 0.007035229851983839,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496928, 0.00048221414518065207, 0.0020535983066627922,
    0.02239703294428403, -0.011382823490747533, -4.5300466257935381E-5,
    0.00020111824649365369, -0.0, 0.0008351968162215236, -0.00052693283295635138,
    -1.4202292023779353E-6, 0.00056258770077962511, 0.00080001208779628772,
    0.0040222089662175116, 0.034075479854978261, -0.021043808615419379,
    -6.0914557418032515E-5, 0.00059482891125992271, -0.0, 0.0020621431062848592,
    -0.0014904815292193945, -3.3998696950912798E-6, 0.00075646106685663106,
    0.00099363790528140769, 0.0059054831078212966, 0.038583750917710685,
    -0.028829764251451333, -7.173583655156873E-5, 0.0011726262150481641, -0.0,
    0.0033929136972443525, -0.00279498368772149, -6.2738005970893276E-6,
    0.00087950249413920069, 0.0010977323314750817, 0.0077041407928327083,
    0.038610702862460149, -0.034678824448749812, -9.9958287731080519E-5,
    0.0019261216668453418, -0.0, 0.0046549264815772193, -0.0043437906953855288,
    -1.1349003863154773E-5, 0.00092769306525124077, 0.0011404644798644042,
    0.009419772323318653, 0.036103268168904447, -0.038611763746433325,
    -0.00016194825176056718, 0.0028471204265186336, -0.0, 0.0057572468853912644,
    -0.0060431370141094806, -2.0579570862839974E-5, 0.00090087854130221294,
    0.001143657327183455, 0.011054625516548589, 0.032403592626321823,
    -0.04072118239331815, -0.00026717427891659356, 0.0039276769289651294, -0.0,
    0.00666376541296399, -0.0078054281883259006, -3.6223635885386171E-5,
    0.00080226872093682746, 0.0011234628800830134, 0.012611407038876496,
    0.028384129958974068, -0.041159175748152546, -0.00041844655161156377,
    0.0051601319868246533, -0.0, 0.0073728135925645831, -0.00955188773329919,
    -6.053307029146797E-5, 0.00063786668577865517, 0.0010912837713868079,
    0.014093112150810595, 0.024568713767860049, -0.040124126137914669,
    -0.00061290951136035914, 0.0065371345335159294, -0.0, 0.0079023594828677973,
    -0.011214534686086313, -9.5503092630370764E-5, 0.00041585923480478323,
    0.0010547464749837698, 0.015502888074725239, 0.021234175454636826,
    -0.037847237535387088, -0.00084339143145200431, 0.00805165138168979, -0.0,
    0.0082797661137407261, -0.012737493468585184, -0.0001426924602110768,
    0.00014599763913536538, 0.001018611145724166, 0.016843930534120113,
    0.018491293400464751, -0.034579382681332371, -0.0010998423450844811, 0.0,
    0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, -0.0008351968162215236, 0.00052693283295635138,
    1.4202292023779353E-6, -0.00056258770077962511, -0.00080001208779628772,
    -0.0040222089662175116, -0.034075479854978261, 0.021043808615419379,
    6.0914557418032515E-5, 0.0, -0.0020621431062848592, 0.0014904815292193945,
    3.3998696950912798E-6, -0.00075646106685663106, -0.00099363790528140769,
    -0.0059054831078212966, -0.038583750917710685, 0.028829764251451333,
    7.173583655156873E-5, 0.0, -0.0033929136972443525, 0.00279498368772149,
    6.2738005970893276E-6, -0.00087950249413920069, -0.0010977323314750817,
    -0.0077041407928327083, -0.038610702862460149, 0.034678824448749812,
    9.9958287731080519E-5, 0.0, -0.0046549264815772193, 0.0043437906953855288,
    1.1349003863154773E-5, -0.00092769306525124077, -0.0011404644798644042,
    -0.009419772323318653, -0.036103268168904447, 0.038611763746433325,
    0.00016194825176056718, 0.0, -0.0057572468853912644, 0.0060431370141094806,
    2.0579570862839974E-5, -0.00090087854130221294, -0.001143657327183455,
    -0.011054625516548589, -0.032403592626321823, 0.04072118239331815,
    0.00026717427891659356, 0.0, -0.00666376541296399, 0.0078054281883259006,
    3.6223635885386171E-5, -0.00080226872093682746, -0.0011234628800830134,
    -0.012611407038876496, -0.028384129958974068, 0.041159175748152546,
    0.00041844655161156377, 0.0, -0.0073728135925645831, 0.00955188773329919,
    6.053307029146797E-5, -0.00063786668577865517, -0.0010912837713868079,
    -0.014093112150810595, -0.024568713767860049, 0.040124126137914669,
    0.00061290951136035914, 0.0, -0.0079023594828677973, 0.011214534686086313,
    9.5503092630370764E-5, -0.00041585923480478323, -0.0010547464749837698,
    -0.015502888074725239, -0.021234175454636826, 0.037847237535387088,
    0.00084339143145200431, 0.0, -0.0082797661137407261, 0.012737493468585184,
    0.0001426924602110768, -0.00014599763913536538, -0.001018611145724166,
    -0.016843930534120113, -0.018491293400464751, 0.034579382681332371,
    0.0010998423450844811, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.0003062394217119654, -0.00047731536664842925, -0.0020665268130396616,
    -0.022172426283366312, -0.011387616330349713, 0.00015666644814812003,
    -0.0002022625931303291, -0.0, -0.00082774518149017668, -0.000529592610445747,
    5.7389299890772084E-6, 0.00056396725231741671, -0.00079224661923222445,
    -0.0040450830466660873, -0.033768034595554684, -0.021141612605666528,
    0.00022480793913855977, -0.00059796183300178749, -0.0,
    -0.0020455667486544604, -0.0015016832971963196, 1.2281171297667533E-5,
    0.00075945441536740606, -0.0009843707517287496, -0.0059353031721315541,
    -0.038284778592207587, -0.029063239819559016, 0.00018775158260361411,
    -0.0011782958644571567, -0.0, -0.0033690819832402769, -0.0028218463087974089,
    1.4332584980973895E-5, 0.00088370610807833507, -0.0010877588806645177,
    -0.0077380022415320937, -0.03837241722031557, -0.035056627436016605,
    4.6343639124359488E-5, -0.0019345945407556694, -0.0, -0.0046275598281651058,
    -0.0043932358301320314, 6.920257210320176E-6, 0.0009321934846738553,
    -0.0011301251608970202, -0.0094549611400509669, -0.035949097799074847,
    -0.039118963178182836, -0.00018840012431222786, -0.0028584044719204794, -0.0,
    -0.0057307040828358151, -0.0061209378716336575, -1.4228364171763735E-5,
    0.00090443930240191107, -0.0011329532079862735, -0.011088696165303912,
    -0.032336970688930627, -0.04132810309639473, -0.00050011991607834528,
    -0.0039415515091365486, -0.0, -0.0066422289273360543, -0.0079156577616609179,
    -5.2501371284616778E-5, 0.00080349399699248939, -0.0011121622881278004,
    -0.012642241664372786, -0.028395620667837813, -0.0418285314829304,
    -0.00087020044792009415, -0.0051761828183116993, -0.0,
    -0.0073597906534701735, -0.00969668181913341, -0.00011034171177573492,
    0.0006353379826807698, -0.0010790145827917301, -0.014118960812822058,
    -0.024641539531302634, -0.040816497866809458, -0.0012796998356205372,
    -0.00655479171491834, -0.0, -0.0079004230433163732, -0.011394090655931458,
    -0.00018926275707432277, 0.00040824404672798562, -0.0010410718558982626,
    -0.015522390488027808, -0.021348319198257911, -0.0385250575094498,
    -0.0017105267608725739, -0.0080702287172710677, -0.0, -0.008290469892862088,
    -0.01295023522278608, -0.00028990993190658839, 0.00013213075603135004,
    -0.0010030885797492422, -0.01685612046981471, -0.018626398129647875,
    -0.035209634693518316, -0.0021461428964605904, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.00082774518149017668, 0.000529592610445747, -5.7389299890772084E-6,
    -0.00056396725231741671, 0.00079224661923222445, 0.0040450830466660873,
    0.033768034595554684, 0.021141612605666528, -0.00022480793913855977, 0.0,
    0.0020455667486544604, 0.0015016832971963196, -1.2281171297667533E-5,
    -0.00075945441536740606, 0.0009843707517287496, 0.0059353031721315541,
    0.038284778592207587, 0.029063239819559016, -0.00018775158260361411, 0.0,
    0.0033690819832402769, 0.0028218463087974089, -1.4332584980973895E-5,
    -0.00088370610807833507, 0.0010877588806645177, 0.0077380022415320937,
    0.03837241722031557, 0.035056627436016605, -4.6343639124359488E-5, 0.0,
    0.0046275598281651058, 0.0043932358301320314, -6.920257210320176E-6,
    -0.0009321934846738553, 0.0011301251608970202, 0.0094549611400509669,
    0.035949097799074847, 0.039118963178182836, 0.00018840012431222786, 0.0,
    0.0057307040828358151, 0.0061209378716336575, 1.4228364171763735E-5,
    -0.00090443930240191107, 0.0011329532079862735, 0.011088696165303912,
    0.032336970688930627, 0.04132810309639473, 0.00050011991607834528, 0.0,
    0.0066422289273360543, 0.0079156577616609179, 5.2501371284616778E-5,
    -0.00080349399699248939, 0.0011121622881278004, 0.012642241664372786,
    0.028395620667837813, 0.0418285314829304, 0.00087020044792009415, 0.0,
    0.0073597906534701735, 0.00969668181913341, 0.00011034171177573492,
    -0.0006353379826807698, 0.0010790145827917301, 0.014118960812822058,
    0.024641539531302634, 0.040816497866809458, 0.0012796998356205372, 0.0,
    0.0079004230433163732, 0.011394090655931458, 0.00018926275707432277,
    -0.00040824404672798562, 0.0010410718558982626, 0.015522390488027808,
    0.021348319198257911, 0.0385250575094498, 0.0017105267608725739, 0.0,
    0.008290469892862088, 0.01295023522278608, 0.00028990993190658839,
    -0.00013213075603135004, 0.0010030885797492422, 0.01685612046981471,
    0.018626398129647875, 0.035209634693518316, 0.0021461428964605904, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00031185892138120829,
    -0.000502570134369898, 0.0021189752999033816, -0.023341150699844014,
    0.011594289336350715, 4.8538698886608527E-5, 0.00020586795104612229, -0.0,
    -0.00086995623361496794, 0.00053660101735923357, 1.5306708468308135E-6,
    -0.00057297910874745141, -0.00083359519431663409, 0.004119248160739955,
    -0.035495899890902981, 0.021430149447512051, 6.5408284223244733E-5,
    0.0006062711891352639, -0.0, -0.0021471788857608371, 0.0015176122837254379,
    3.6460185703158003E-6, -0.000770344917774514, -0.00103515532550392,
    0.0060112845231374149, -0.040171560763765359, 0.029352888902237737,
    7.6101215650564729E-5, 0.0011908412917109572, -0.0, -0.0035314309384240458,
    0.0028454618318544097, 6.6294921173456258E-6, -0.00089555200508320771,
    -0.0011434481783357154, 0.0078039387061703035, -0.040176177008991183,
    0.035300685361534523, 0.00010352169015720698, 0.0019500242678547552, -0.0,
    -0.00484290600122265, 0.0044216287235151188, 1.1770888489239837E-5,
    -0.00094453662973384314, -0.0011878922635308329, 0.0095046860602438672,
    -0.037542072616071218, 0.039295727814625446, 0.00016467428301353407,
    0.0028749549914754272, -0.0, -0.0059870067172350123, 0.0061505759056418863,
    2.1035254999411097E-5, -0.00091716878475691331, -0.0011912658049384609,
    0.011119868808881342, -0.033669554571301941, 0.041433198448315861,
    0.00026950643131986451, 0.0039573555927472342, -0.0, -0.0069263207498740835,
    0.0079430910275364534, 3.6711018305390747E-5, -0.00081674138386906268,
    -0.0011704175763008584, 0.012654925863460519, -0.029468311129123046,
    0.041868716552104328, 0.0004211223488868039, 0.0051894553636579882, -0.0,
    -0.0076593329913997111, 0.00971897451281721, 6.1090607957708861E-5,
    -0.000649388305425708, -0.0011372333641091231, 0.014114591733434101,
    -0.025484039012415027, 0.040804892537124521, 0.00061678702026516556,
    0.00656392875731367, -0.0, -0.0082049716994792871, 0.01140904630781259,
    9.6212106762538893E-5, -0.00042346315376165077, -0.0010996549666288829,
    0.01550305918633214, -0.022004664482222366, 0.038477622702890485,
    0.00084930644176672517, 0.00807384784685867, -0.0, -0.008591923151116421,
    0.012956473101216526, 0.00014367324314189093, -0.00014890838604834526,
    -0.0010626319711789323, 0.016824106212107545, -0.019144919197986585,
    0.035142704197345845, 0.0011085037444974739, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.00086995623361496794, -0.00053660101735923357, -1.5306708468308135E-6,
    0.00057297910874745141, 0.00083359519431663409, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.5408284223244733E-5, 0.0,
    0.0021471788857608371, -0.0015176122837254379, -3.6460185703158003E-6,
    0.000770344917774514, 0.00103515532550392, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237737, -7.6101215650564729E-5, 0.0,
    0.0035314309384240458, -0.0028454618318544097, -6.6294921173456258E-6,
    0.00089555200508320771, 0.0011434481783357154, -0.0078039387061703035,
    0.040176177008991183, -0.035300685361534523, -0.00010352169015720698, 0.0,
    0.00484290600122265, -0.0044216287235151188, -1.1770888489239837E-5,
    0.00094453662973384314, 0.0011878922635308329, -0.0095046860602438672,
    0.037542072616071218, -0.039295727814625446, -0.00016467428301353407, 0.0,
    0.0059870067172350123, -0.0061505759056418863, -2.1035254999411097E-5,
    0.00091716878475691331, 0.0011912658049384609, -0.011119868808881342,
    0.033669554571301941, -0.041433198448315861, -0.00026950643131986451, 0.0,
    0.0069263207498740835, -0.0079430910275364534, -3.6711018305390747E-5,
    0.00081674138386906268, 0.0011704175763008584, -0.012654925863460519,
    0.029468311129123046, -0.041868716552104328, -0.0004211223488868039, 0.0,
    0.0076593329913997111, -0.00971897451281721, -6.1090607957708861E-5,
    0.000649388305425708, 0.0011372333641091231, -0.014114591733434101,
    0.025484039012415027, -0.040804892537124521, -0.00061678702026516556, 0.0,
    0.0082049716994792871, -0.01140904630781259, -9.6212106762538893E-5,
    0.00042346315376165077, 0.0010996549666288829, -0.01550305918633214,
    0.022004664482222366, -0.038477622702890485, -0.00084930644176672517, 0.0,
    0.008591923151116421, -0.012956473101216526, -0.00014367324314189093,
    0.00014890838604834526, 0.0010626319711789323, -0.016824106212107545,
    0.019144919197986585, -0.035142704197345845, -0.0011085037444974739, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572542,
    0.00049767135583767507, -0.0021060467935265117, 0.023116544038926296,
    0.01117615048474652, -0.00015990468077679308, -0.00020472360440944683, -0.0,
    0.00086250459888362091, 0.00051992442604286435, -5.8493716335300827E-6,
    -0.00055357584434958824, 0.00082582972575257082, -0.0040963740802913793,
    0.035188454631479404, 0.020755271773573836, -0.00022930166594377187,
    -0.0006031382673933989, -0.0, 0.0021306025281304384, 0.0014745525426902747,
    -1.2527320172892045E-5, -0.00074557056444952031, 0.001025888171951262,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772584,
    -0.00019211696170261, -0.0011851716423019645, -0.0, 0.0035075992244199706,
    0.0027713681646644867, -1.4688276501230182E-5, -0.00086765659713432448,
    0.0011334747275251512, -0.0077700772574709181, 0.039937891366846605,
    0.034434766523231866, -4.990704155048592E-5, -0.0019415513939444271, -0.0,
    0.0048155393478105379, 0.0043153978020024379, -7.3421418364052275E-6,
    -0.0009153499201912487, 0.0011775529445634484, -0.0094694972435115515,
    0.037387902246241611, 0.038434999109990681, 0.00018567409305926088,
    -0.002863670946073581, -0.0, 0.0059604639146795648, 0.0060134989801012466,
    1.3772680035192611E-5, -0.000888149058947206, 0.001180561685741279,
    -0.011085798160126016, 0.033602932633910738, 0.040616087041396992,
    0.0004977877636750741, -0.0039434810125758141, -0.0, 0.00690478426424615,
    0.0077779949224503582, 5.2013988864612175E-5, -0.00078902133406024907,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986781,
    0.04111899067897859, 0.00086752465064485358, -0.0051734045321709405, -0.0,
    0.0076463100523053032, 0.0095295950396153822, 0.00010978417410949397,
    -0.00062381636303371151, 0.0011249641755140447, -0.014088743071422632,
    0.0255568647758576, 0.040135731467599578, 0.0012758223267157302,
    -0.006546271575911259, -0.0, 0.0082030352599278648, 0.011199579034205171,
    0.00018855374294215457, -0.00040064012777111233, 0.001085980347543375,
    -0.015483556773029566, 0.022118808225843441, 0.037894672341946385,
    0.0017046117505578522, -0.0080552705112773917, -0.0, 0.0086026269302377847,
    0.012731255590154728, 0.0002889291489757741, -0.0001292200091183642,
    0.0010471094052040078, -0.016811916276412941, 0.0192800239271697,
    0.034646313177504821, 0.0021374814970475968, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    -0.00086250459888362091, -0.00051992442604286435, 5.8493716335300827E-6,
    0.00055357584434958824, -0.00082582972575257082, 0.0040963740802913793,
    -0.035188454631479404, -0.020755271773573836, 0.00022930166594377187, 0.0,
    -0.0021306025281304384, -0.0014745525426902747, 1.2527320172892045E-5,
    0.00074557056444952031, -0.001025888171951262, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772584, 0.00019211696170261, 0.0,
    -0.0035075992244199706, -0.0027713681646644867, 1.4688276501230182E-5,
    0.00086765659713432448, -0.0011334747275251512, 0.0077700772574709181,
    -0.039937891366846605, -0.034434766523231866, 4.990704155048592E-5, 0.0,
    -0.0048155393478105379, -0.0043153978020024379, 7.3421418364052275E-6,
    0.0009153499201912487, -0.0011775529445634484, 0.0094694972435115515,
    -0.037387902246241611, -0.038434999109990681, -0.00018567409305926088, 0.0,
    -0.0059604639146795648, -0.0060134989801012466, -1.3772680035192611E-5,
    0.000888149058947206, -0.001180561685741279, 0.011085798160126016,
    -0.033602932633910738, -0.040616087041396992, -0.0004977877636750741, 0.0,
    -0.00690478426424615, -0.0077779949224503582, -5.2013988864612175E-5,
    0.00078902133406024907, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986781, -0.04111899067897859, -0.00086752465064485358, 0.0,
    -0.0076463100523053032, -0.0095295950396153822, -0.00010978417410949397,
    0.00062381636303371151, -0.0011249641755140447, 0.014088743071422632,
    -0.0255568647758576, -0.040135731467599578, -0.0012758223267157302, 0.0,
    -0.0082030352599278648, -0.011199579034205171, -0.00018855374294215457,
    0.00040064012777111233, -0.001085980347543375, 0.015483556773029566,
    -0.022118808225843441, -0.037894672341946385, -0.0017046117505578522, 0.0,
    -0.0086026269302377847, -0.012731255590154728, -0.0002889291489757741,
    0.0001292200091183642, -0.0010471094052040078, 0.016811916276412941,
    -0.0192800239271697, -0.034646313177504821, -0.0021374814970475968, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0 };

  static const int8_T c_0[3003] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T d_1[4851] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422014, 0.00023231657375355515, 0.00085021850252945286,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531576,
    -1.8831321574108635, 0.0081315634991630872, 0.031843900678722038, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T h_0[390] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const int8_T b_D[4290] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int32_T b_Mrows_0[226] = { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59,
    60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82,
    83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102,
    103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121,
    122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139,
    140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160,
    161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178,
    179, 180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199,
    200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217,
    218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238,
    239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256,
    257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 341, 342, 343,
    344, 345, 346, 347, 348 };

  static const real_T o[4746] = { -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.00013605399495041681, -0.0, -0.94789999991422014,
    -0.00023231657375355515, -0.00085021850252945286, 7.4644574418929129E-5,
    0.042372304854011958, -0.0024338870206531576, 1.8831321574108635,
    -0.0081315634991630872, -0.031843900678722038, -0.00043991587755701022, -0.0,
    -0.828274284000475, -0.00071829654764050629, -0.0029829453882918139,
    6.2742313041972962E-5, 0.068633766567946786, -0.0034563974704851005,
    2.7676057047313591, -0.010552632650718258, -0.051628892588367392,
    -0.000797860786853296, -0.0, -0.6818963849413, -0.0012286665032447553,
    -0.0058496233936728374, -3.1342376034699586E-6, 0.083007916472729,
    -0.003589951713511725, 3.0036280976220535, -0.0094211711536435691,
    -0.061610545902671086, -0.0011410576782314461, -0.0, -0.5343495115843353,
    -0.0016286283183268835, -0.009021749356792794, -9.6497485535298051E-5,
    0.089026322360653609, -0.0032141564747645412, 2.8508353066487375,
    -0.0063671417100739421, -0.064250485451778416, -0.0014325731407650161, -0.0,
    -0.40019752452245955, -0.0018530175296307711, -0.012190593430831249,
    -0.00019695320686910958, 0.089492468630921779, -0.0025917690009131036,
    2.4929537206563293, -0.0025585879149516806, -0.06183312975738009,
    -0.0016569902495300276, -0.0, -0.28639136612488808, -0.0018851780974144152,
    -0.015153038865694132, -0.00028975242367587249, 0.086530782400458847,
    -0.0018944998662235903, 2.0533176075220276, 0.0012185274404540411,
    -0.056279995134445246, -0.0018124939712245022, -0.0, -0.19491893240955566,
    -0.0017398890238911875, -0.017791541512902187, -0.00036509371430410771,
    0.081679081417085062, -0.0012262657643497255, 1.6093908771185077,
    0.0044797329146593753, -0.049090033389302089, -0.00190510419796492, -0.0,
    -0.124775007481606, -0.0014501747445117856, -0.020053144545853434,
    -0.00041731907030702434, 0.075996736268228768, -0.00064278595634549422,
    1.2053422929471271, 0.0069681642442896569, -0.0413543415391572,
    -0.00194467159446681, -0.0, -0.073359348722708, -0.0010575604252408858,
    -0.021930316193073212, -0.00044409726735761094, 0.0701713979243816,
    -0.00016724585586822834, 0.86232253270031667, 0.00859101399456172,
    -0.033809555227781458, -0.0019422508947259363, -0.0, -0.037418484576088193,
    -0.00060521904635098484, -0.023444915627093114, -0.00044565246726613762,
    0.064614740447960034, 0.00019775366639506007, 0.58646352157906634,
    0.0093674482180796936, -0.026906527742490981, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.828274284000475,
    0.00071829654764050629, 0.0029829453882918139, -6.2742313041972962E-5,
    -0.068633766567946786, 0.0034563974704851005, -2.7676057047313591,
    0.010552632650718258, 0.051628892588367392, 0.0, 0.6818963849413,
    0.0012286665032447553, 0.0058496233936728374, 3.1342376034699586E-6,
    -0.083007916472729, 0.003589951713511725, -3.0036280976220535,
    0.0094211711536435691, 0.061610545902671086, 0.0, 0.5343495115843353,
    0.0016286283183268835, 0.009021749356792794, 9.6497485535298051E-5,
    -0.089026322360653609, 0.0032141564747645412, -2.8508353066487375,
    0.0063671417100739421, 0.064250485451778416, 0.0, 0.40019752452245955,
    0.0018530175296307711, 0.012190593430831249, 0.00019695320686910958,
    -0.089492468630921779, 0.0025917690009131036, -2.4929537206563293,
    0.0025585879149516806, 0.06183312975738009, 0.0, 0.28639136612488808,
    0.0018851780974144152, 0.015153038865694132, 0.00028975242367587249,
    -0.086530782400458847, 0.0018944998662235903, -2.0533176075220276,
    -0.0012185274404540411, 0.056279995134445246, 0.0, 0.19491893240955566,
    0.0017398890238911875, 0.017791541512902187, 0.00036509371430410771,
    -0.081679081417085062, 0.0012262657643497255, -1.6093908771185077,
    -0.0044797329146593753, 0.049090033389302089, 0.0, 0.124775007481606,
    0.0014501747445117856, 0.020053144545853434, 0.00041731907030702434,
    -0.075996736268228768, 0.00064278595634549422, -1.2053422929471271,
    -0.0069681642442896569, 0.0413543415391572, 0.0, 0.073359348722708,
    0.0010575604252408858, 0.021930316193073212, 0.00044409726735761094,
    -0.0701713979243816, 0.00016724585586822834, -0.86232253270031667,
    -0.00859101399456172, 0.033809555227781458, 0.0, 0.037418484576088193,
    0.00060521904635098484, 0.023444915627093114, 0.00044565246726613762,
    -0.064614740447960034, -0.00019775366639506007, -0.58646352157906634,
    -0.0093674482180796936, 0.026906527742490981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7393041473633996E-5,
    -0.0, -0.00022368763943092469, -0.97943363183036425, -0.0014929610497083712,
    -0.039186425137886907, -5.6614700144598253E-5, 0.00052789703364104388,
    -0.0078377521590508176, 0.80137776286231477, -0.056970805070725557,
    0.00010157607708522483, -0.0, -0.0006928899227488009, -0.92211339111192792,
    -0.00543690319059872, -0.073285774807074919, -4.6123839395337341E-5,
    0.00093583978277490387, -0.010204973422867386, 1.4679406075353216,
    -0.098330079431672449, 0.00021063569275170898, -0.0, -0.00118742477138997,
    -0.83504975370190071, -0.011094759552566745, -0.10151242737070898,
    6.5054042471130283E-6, 0.0012261501164608831, -0.0091500321471800414,
    1.9901277003085573, -0.12581707960111752, 0.00034308538224961334, -0.0,
    -0.0015770310792981481, -0.72555251236862717, -0.017816474142573421,
    -0.12341988813173868, 8.0264143073424557E-5, 0.0014049447068710742,
    -0.0062288168520714619, 2.3654096906129847, -0.14117636261848396,
    0.00048821416801761794, -0.0, -0.0017980869265099067, -0.60089840920731241,
    -0.025039554537448942, -0.13887539377535754, 0.00015870565009723183,
    0.0014815086013838215, -0.0025623484843079023, 2.5974908015098239,
    -0.14616521878490271, 0.00063637010650355059, -0.0, -0.0018336500124171166,
    -0.46804262274960007, -0.032289457713019082, -0.14802510882141279,
    0.00022990541532277067, 0.0014676225862297065, 0.0010906382789437497,
    2.6953622560768009, -0.14254095855242194, 0.00077917513704307188, -0.0,
    -0.0016972204487183172, -0.33338010549621289, -0.039178997027587086,
    -0.15125252723439678, 0.000286040975696016, 0.0013768668571441957,
    0.004259024861492205, 2.672264103686758, -0.13203559714993138,
    0.00090967019280314434, -0.0, -0.0014201240320154262, -0.20255999629099947,
    -0.045406297008819305, -0.14913262935985511, 0.00032277752150717767,
    0.0012239270282170202, 0.0066900551015905479, 2.5446089159537979,
    -0.11632397297836967, 0.0010223921260931036, -0.0, -0.0010421382438367184,
    -0.080353784609753856, -0.050751090741705619, -0.14238418727481639,
    0.00033858449201523894, 0.001023928636687647, 0.0082892702061722542,
    2.3309155290919734, -0.0969900191888171, 0.0011133865157176926, -0.0,
    -0.000604860594289518, 0.029424345381619813, -0.055069361216714394,
    -0.13182237870724534, 0.00033406267949034608, 0.00079182395248273969,
    0.0090709498678183311, 2.0507944495975989, -0.075494757610177043, 0.0,
    0.00022368763943092469, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231477, 0.056970805070725557, 0.0,
    0.0006928899227488009, 0.92211339111192792, 0.00543690319059872,
    0.073285774807074919, 4.6123839395337341E-5, -0.00093583978277490387,
    0.010204973422867386, -1.4679406075353216, 0.098330079431672449, 0.0,
    0.00118742477138997, 0.83504975370190071, 0.011094759552566745,
    0.10151242737070898, -6.5054042471130283E-6, -0.0012261501164608831,
    0.0091500321471800414, -1.9901277003085573, 0.12581707960111752, 0.0,
    0.0015770310792981481, 0.72555251236862717, 0.017816474142573421,
    0.12341988813173868, -8.0264143073424557E-5, -0.0014049447068710742,
    0.0062288168520714619, -2.3654096906129847, 0.14117636261848396, 0.0,
    0.0017980869265099067, 0.60089840920731241, 0.025039554537448942,
    0.13887539377535754, -0.00015870565009723183, -0.0014815086013838215,
    0.0025623484843079023, -2.5974908015098239, 0.14616521878490271, 0.0,
    0.0018336500124171166, 0.46804262274960007, 0.032289457713019082,
    0.14802510882141279, -0.00022990541532277067, -0.0014676225862297065,
    -0.0010906382789437497, -2.6953622560768009, 0.14254095855242194, 0.0,
    0.0016972204487183172, 0.33338010549621289, 0.039178997027587086,
    0.15125252723439678, -0.000286040975696016, -0.0013768668571441957,
    -0.004259024861492205, -2.672264103686758, 0.13203559714993138, 0.0,
    0.0014201240320154262, 0.20255999629099947, 0.045406297008819305,
    0.14913262935985511, -0.00032277752150717767, -0.0012239270282170202,
    -0.0066900551015905479, -2.5446089159537979, 0.11632397297836967, 0.0,
    0.0010421382438367184, 0.080353784609753856, 0.050751090741705619,
    0.14238418727481639, -0.00033858449201523894, -0.001023928636687647,
    -0.0082892702061722542, -2.3309155290919734, 0.0969900191888171, 0.0,
    0.000604860594289518, -0.029424345381619813, 0.055069361216714394,
    0.13182237870724534, -0.00033406267949034608, -0.00079182395248273969,
    -0.0090709498678183311, -2.0507944495975989, 0.075494757610177043, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -4.698526643327685E-7, -0.0, 3.7822888752804934E-6,
    -0.00035289231485000278, 3.4189139533984093E-5, -0.95461902809957677,
    7.1100422694502516E-7, -8.9811567385581109E-6, 0.0001312690294498295,
    -0.013640927712662433, 0.0012950988615465717, -1.7147269904128773E-6, -0.0,
    1.150767340776896E-5, -0.001315566365993538, 0.00012285543303127417,
    -0.91135406143948428, 3.3163316882791379E-7, -1.5519561417705546E-5,
    0.00016502531726898077, -0.02437486627411839, 0.0021906279895870522,
    -3.4972112753480519E-6, -0.0, 1.9307665671200697E-5, -0.0027413219232082322,
    0.00024768220209586342, -0.87012380424921076, -6.8812811117453457E-7,
    -1.9763302213130122E-5, 0.00013982125919807827, -0.032169433587467634,
    0.002751745249648645, -5.5977294121393286E-6, -0.0, 2.4989979045618723E-5,
    -0.0044849430478703716, 0.00039342983713991055, -0.83084483046096391,
    -1.9796506295754575E-6, -2.1918801185016628E-5, 8.4343468160018214E-5,
    -0.037113411718708571, 0.003036672947804085, -7.8197074306271E-6, -0.0,
    2.7577534552949828E-5, -0.0064082900969058146, 0.00054762695322665067,
    -0.793432109991374, -3.2636836733291796E-6, -2.2237423184653563E-5,
    1.8765440426749884E-5, -0.039397727302456866, 0.00309809039554805,
    -9.9933900139764223E-6, -0.0, 2.6921553480488338E-5, -0.0083848942547339062,
    0.00070031450657208035, -0.75779967207486343, -4.3468217299391308E-6,
    -2.1001923672367668E-5, -4.369046432035507E-5, -0.039294754138992867,
    0.002983898890566264, -1.1978309599851326E-5, -0.0, 2.3392946258553521E-5,
    -0.010303497261330055, 0.00084381691343032752, -0.72386135489367576,
    -5.1114348042188516E-6, -1.8513122731324463E-5, -9.5211988147831173E-5,
    -0.037136984758420775, 0.0027375673439149939, -1.3664452072861686E-5, -0.0,
    1.7647377061867673E-5, -0.01207052875767038, 0.00097252341176911846,
    -0.69153159412636034, -5.5025454870940645E-6, -1.507723451236707E-5,
    -0.00013200584315001913, -0.033296009575319148, 0.0023982197708525069,
    -1.497220553904411E-5, -0.0, 1.0454783952045055E-5, -0.013611557377969874,
    0.0010826699647867736, -0.6607262078574051, -5.5139498958081246E-6,
    -1.099426428108596E-5, -0.00015311621421909343, -0.028162610037210684,
    0.0020005870008040919, -1.58512172573075E-5, -0.0, 2.5823510576951064E-6,
    -0.014871788389995259, 0.0011721172939975261, -0.63136314118173154,
    -5.1749995919122709E-6, -6.5478271176522308E-6, -0.00015946802271606859,
    -0.022128624315847611, 0.0015749128178946061, 0.0, -3.7822888752804934E-6,
    0.00035289231485000278, -3.4189139533984093E-5, 0.95461902809957677,
    -7.1100422694502516E-7, 8.9811567385581109E-6, -0.0001312690294498295,
    0.013640927712662433, -0.0012950988615465717, 0.0, -1.150767340776896E-5,
    0.001315566365993538, -0.00012285543303127417, 0.91135406143948428,
    -3.3163316882791379E-7, 1.5519561417705546E-5, -0.00016502531726898077,
    0.02437486627411839, -0.0021906279895870522, 0.0, -1.9307665671200697E-5,
    0.0027413219232082322, -0.00024768220209586342, 0.87012380424921076,
    6.8812811117453457E-7, 1.9763302213130122E-5, -0.00013982125919807827,
    0.032169433587467634, -0.002751745249648645, 0.0, -2.4989979045618723E-5,
    0.0044849430478703716, -0.00039342983713991055, 0.83084483046096391,
    1.9796506295754575E-6, 2.1918801185016628E-5, -8.4343468160018214E-5,
    0.037113411718708571, -0.003036672947804085, 0.0, -2.7577534552949828E-5,
    0.0064082900969058146, -0.00054762695322665067, 0.793432109991374,
    3.2636836733291796E-6, 2.2237423184653563E-5, -1.8765440426749884E-5,
    0.039397727302456866, -0.00309809039554805, 0.0, -2.6921553480488338E-5,
    0.0083848942547339062, -0.00070031450657208035, 0.75779967207486343,
    4.3468217299391308E-6, 2.1001923672367668E-5, 4.369046432035507E-5,
    0.039294754138992867, -0.002983898890566264, 0.0, -2.3392946258553521E-5,
    0.010303497261330055, -0.00084381691343032752, 0.72386135489367576,
    5.1114348042188516E-6, 1.8513122731324463E-5, 9.5211988147831173E-5,
    0.037136984758420775, -0.0027375673439149939, 0.0, -1.7647377061867673E-5,
    0.01207052875767038, -0.00097252341176911846, 0.69153159412636034,
    5.5025454870940645E-6, 1.507723451236707E-5, 0.00013200584315001913,
    0.033296009575319148, -0.0023982197708525069, 0.0, -1.0454783952045055E-5,
    0.013611557377969874, -0.0010826699647867736, 0.6607262078574051,
    5.5139498958081246E-6, 1.099426428108596E-5, 0.00015311621421909343,
    0.028162610037210684, -0.0020005870008040919, 0.0, -2.5823510576951064E-6,
    0.014871788389995259, -0.0011721172939975261, 0.63136314118173154,
    5.1749995919122709E-6, 6.5478271176522308E-6, 0.00015946802271606859,
    0.022128624315847611, -0.0015749128178946061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.3215726369779442E-6,
    -0.0, 0.0008890798672821572, -3.9634420482915886E-6, -1.8779150781494825E-5,
    9.5621691177178581E-7, -0.95478880828256985, -4.1141673422749061E-5,
    0.03184011263878421, -0.00013737224957398745, -0.00070099650111093514,
    -7.37498820914889E-6, -0.0, 0.0028798974838507921, -1.2031552401106186E-5,
    -6.5541259101970566E-5, 4.8937143347579731E-7, -0.91186205573102064,
    -5.6569476786228777E-5, 0.045362532929058251, -0.00017200519888355809,
    -0.0011287940711174954, -1.3114491684476183E-5, -0.0, 0.0052334722224648012,
    -2.01428305293088E-5, -0.00012809304656000975, -8.0572652135228316E-7,
    -0.87104654382409041, -5.6272387520390891E-5, 0.047311950839458626,
    -0.0001450090986967697, -0.0013425995061396635, -1.8345363908047713E-5, -0.0,
    0.0075008822299020353, -2.6016006319195041E-5, -0.00019720530542317134,
    -2.4591635624240207E-6, -0.83218851749958367, -4.7375846559661062E-5,
    0.042598626592462489, -8.6719294425032092E-5, -0.0014003980563196173,
    -2.246593919613808E-5, -0.0, 0.00943970801201129, -2.8650001241530765E-5,
    -0.00026638512436626008, -4.121569324240198E-6, -0.79515340435959636,
    -3.4709382880706885E-5, 0.034628685752373246, -1.8297222644219502E-5,
    -0.0013530038284554778, -2.5265426660065411E-5, -0.0, 0.010947156098591032,
    -2.7909176085084142E-5, -0.0003314445701350322, -5.5519787679445418E-6,
    -0.75982412569723878, -2.1346028683459228E-5, 0.025634055662398753,
    4.6507757725176949E-5, -0.0012416072499104734, -2.6772519265671095E-5, -0.0,
    0.012008978947283564, -2.4195712839857506E-5, -0.00039000535890606163,
    -6.6018196083699578E-6, -0.72609874903249794, -9.0743971089964326E-6,
    0.016970752909635959, 9.9662858362088583E-5, -0.0010974787977650587,
    -2.7147117444576663E-5, -0.0, 0.012662186267626612, -1.8202379750182187E-5,
    -0.00044102211346605633, -7.1976650371651645E-6, -0.6938879802645469,
    1.2122638267861407E-6, 0.0093708626981431429, 0.00013734580510611544,
    -0.00094287838447155818, -2.6606724261902685E-5, -0.0, 0.012969100796935931,
    -1.0734651929982726E-5, -0.00048436730788982012, -7.3244316656170725E-6,
    -0.66311279263693523, 9.2109903987888457E-6, 0.0031443429792448793,
    0.00015868109865387842, -0.00079252796888270823, -2.5379438859688572E-5,
    -0.0, 0.013000295015379658, -2.589722391849923E-6, -0.00052049499991581891,
    -7.0100060277412662E-6, -0.63370234787111412, 1.4980529515579567E-5,
    -0.0016667489508736285, 0.00016472688705361702, -0.00065523809709111514, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    -0.0028798974838507921, 1.2031552401106186E-5, 6.5541259101970566E-5,
    -4.8937143347579731E-7, 0.91186205573102064, 5.6569476786228777E-5,
    -0.045362532929058251, 0.00017200519888355809, 0.0011287940711174954, 0.0,
    -0.0052334722224648012, 2.01428305293088E-5, 0.00012809304656000975,
    8.0572652135228316E-7, 0.87104654382409041, 5.6272387520390891E-5,
    -0.047311950839458626, 0.0001450090986967697, 0.0013425995061396635, 0.0,
    -0.0075008822299020353, 2.6016006319195041E-5, 0.00019720530542317134,
    2.4591635624240207E-6, 0.83218851749958367, 4.7375846559661062E-5,
    -0.042598626592462489, 8.6719294425032092E-5, 0.0014003980563196173, 0.0,
    -0.00943970801201129, 2.8650001241530765E-5, 0.00026638512436626008,
    4.121569324240198E-6, 0.79515340435959636, 3.4709382880706885E-5,
    -0.034628685752373246, 1.8297222644219502E-5, 0.0013530038284554778, 0.0,
    -0.010947156098591032, 2.7909176085084142E-5, 0.0003314445701350322,
    5.5519787679445418E-6, 0.75982412569723878, 2.1346028683459228E-5,
    -0.025634055662398753, -4.6507757725176949E-5, 0.0012416072499104734, 0.0,
    -0.012008978947283564, 2.4195712839857506E-5, 0.00039000535890606163,
    6.6018196083699578E-6, 0.72609874903249794, 9.0743971089964326E-6,
    -0.016970752909635959, -9.9662858362088583E-5, 0.0010974787977650587, 0.0,
    -0.012662186267626612, 1.8202379750182187E-5, 0.00044102211346605633,
    7.1976650371651645E-6, 0.6938879802645469, -1.2122638267861407E-6,
    -0.0093708626981431429, -0.00013734580510611544, 0.00094287838447155818, 0.0,
    -0.012969100796935931, 1.0734651929982726E-5, 0.00048436730788982012,
    7.3244316656170725E-6, 0.66311279263693523, -9.2109903987888457E-6,
    -0.0031443429792448793, -0.00015868109865387842, 0.00079252796888270823, 0.0,
    -0.013000295015379658, 2.589722391849923E-6, 0.00052049499991581891,
    7.0100060277412662E-6, 0.63370234787111412, -1.4980529515579567E-5,
    0.0016667489508736285, -0.00016472688705361702, 0.00065523809709111514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0975461597654075, -0.0, -0.00010755525579326826, 2.1621574234746449E-5,
    2.1868160728403114E-7, -1.3780352347645447E-5, -4.726345500155462E-5,
    -0.95132850476213759, -0.0038484242973110937, 0.00083332348166736752,
    7.02052193286396E-6, -0.19034474888147196, -0.0, -0.00034781644809942771,
    8.0172011321042361E-5, 5.4969881802128017E-7, -2.27156084527028E-5,
    -6.1029197992035108E-5, -0.90502865766333274, -0.0054665593201632268,
    0.0014772527708812103, 4.95430814192846E-6, -0.2786270567235003, -0.0,
    -0.00063091851878645136, 0.00016625074040907872, 6.1735780707766991E-7,
    -2.6252607162803279E-5, -5.1494038048003027E-5, -0.8609839718388137,
    -0.0056795948236747461, 0.0019356125977258328, -2.9115307819424857E-6,
    -0.36261302471049911, -0.0, -0.00090245519432003731, 0.00027079983551271978,
    2.2119866829129678E-7, -2.4200604136820603E-5, -2.694558480094988E-5,
    -0.81908391692432025, -0.0050872380724722365, 0.0022181312643041419,
    -1.3038309501360736E-5, -0.44251182472821321, -0.0, -0.001133218449650502,
    0.00038537548095676305, -6.7382439476824743E-7, -1.6687728185037589E-5,
    6.2191354156035657E-6, -0.77922357682239962, -0.0041046725047747916,
    0.0023394769197791019, -2.2436874234736825E-5, -0.51852240413199335, -0.0,
    -0.0013110011036634765, 0.00050236920150929093, -1.9748026060019931E-6,
    -4.1108907278707743E-6, 4.3301618795228678E-5, -0.74130332450590952,
    -0.0030032803749125755, 0.002318216917374391, -2.900623182681863E-5,
    -0.59083399926298918, -0.0, -0.0014343460932402755, 0.00061517585671316138,
    -3.5074845746161022E-6, 1.2918293945842902E-5, 8.1030215241858355E-5,
    -0.70522851787898222, -0.0019473513770154724, 0.0021757356069629606,
    -3.1585817150007006E-5, -0.65962661966219394, -0.0, -0.0015079911327062028,
    0.00071830734181529922, -5.0610477977019175E-6, 3.3629077447434722E-5,
    0.00011726944236928726, -0.67090921790025126, -0.0010250256181252785,
    0.001935151871385348, -2.9846869647270715E-5, -0.72507150519220565, -0.0,
    -0.0015397052431117911, 0.00080745303342220735, -6.4252668261848784E-6,
    5.7146315618063624E-5, 0.00015074631934028013, -0.63825992842150658,
    -0.00027303091474991563, 0.0016202781342734003, -2.4108355014696026E-5,
    -0.78733155816749323, -0.0, -0.0015382130601616069, 0.0008794900279362227,
    -7.4177895974794721E-6, 8.254233258825305E-5, 0.00018081245359503957,
    -0.60719935621397325, 0.00030444277158692639, 0.0012546589538664273,
    -1.5132465589501264E-5, 0.0, 0.00010755525579326826, -2.1621574234746449E-5,
    -2.1868160728403114E-7, 1.3780352347645447E-5, 4.726345500155462E-5,
    0.95132850476213759, 0.0038484242973110937, -0.00083332348166736752,
    -7.02052193286396E-6, 0.0, 0.00034781644809942771, -8.0172011321042361E-5,
    -5.4969881802128017E-7, 2.27156084527028E-5, 6.1029197992035108E-5,
    0.90502865766333274, 0.0054665593201632268, -0.0014772527708812103,
    -4.95430814192846E-6, 0.0, 0.00063091851878645136, -0.00016625074040907872,
    -6.1735780707766991E-7, 2.6252607162803279E-5, 5.1494038048003027E-5,
    0.8609839718388137, 0.0056795948236747461, -0.0019356125977258328,
    2.9115307819424857E-6, 0.0, 0.00090245519432003731, -0.00027079983551271978,
    -2.2119866829129678E-7, 2.4200604136820603E-5, 2.694558480094988E-5,
    0.81908391692432025, 0.0050872380724722365, -0.0022181312643041419,
    1.3038309501360736E-5, 0.0, 0.001133218449650502, -0.00038537548095676305,
    6.7382439476824743E-7, 1.6687728185037589E-5, -6.2191354156035657E-6,
    0.77922357682239962, 0.0041046725047747916, -0.0023394769197791019,
    2.2436874234736825E-5, 0.0, 0.0013110011036634765, -0.00050236920150929093,
    1.9748026060019931E-6, 4.1108907278707743E-6, -4.3301618795228678E-5,
    0.74130332450590952, 0.0030032803749125755, -0.002318216917374391,
    2.900623182681863E-5, 0.0, 0.0014343460932402755, -0.00061517585671316138,
    3.5074845746161022E-6, -1.2918293945842902E-5, -8.1030215241858355E-5,
    0.70522851787898222, 0.0019473513770154724, -0.0021757356069629606,
    3.1585817150007006E-5, 0.0, 0.0015079911327062028, -0.00071830734181529922,
    5.0610477977019175E-6, -3.3629077447434722E-5, -0.00011726944236928726,
    0.67090921790025126, 0.0010250256181252785, -0.001935151871385348,
    2.9846869647270715E-5, 0.0, 0.0015397052431117911, -0.00080745303342220735,
    6.4252668261848784E-6, -5.7146315618063624E-5, -0.00015074631934028013,
    0.63825992842150658, 0.00027303091474991563, -0.0016202781342734003,
    2.4108355014696026E-5, 0.0, 0.0015382130601616069, -0.0008794900279362227,
    7.4177895974794721E-6, -8.254233258825305E-5, -0.00018081245359503957,
    0.60719935621397325, -0.00030444277158692639, -0.0012546589538664273,
    1.5132465589501264E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.3122055023886007E-5, -0.0, -0.037320608448162512,
    -5.6600484105171559E-5, -3.8015848024516285E-5, 3.1210978741585189E-5,
    0.0063626044977050395, -0.00061780149290204141, -0.522532770785621,
    -0.0020692471467052189, -0.0015825196049838537, -0.00011574479420093426,
    -0.0, -0.054883325379601333, -0.00018966443044090412,
    -0.00015913497745743808, 4.0945532666326082E-5, 0.010980623673581975,
    -0.0010008925162674571, -0.20297142785939026, -0.0031026752110159071,
    -0.0032311282598539476, -0.00022752205992960302, -0.0, -0.059609081713834416,
    -0.00035391491177341896, -0.00035558528147582914, 3.3871843192837595E-5,
    0.014100450874041791, -0.0012102947949394331, -0.0030704723812149492,
    -0.0033580569219097351, -0.00455523354405733, -0.00035373445001635136, -0.0,
    -0.05663109393802071, -0.00051640836201293655, -0.00060680377897153164,
    1.4575749290501952E-5, 0.016007318935255449, -0.0012972660302894576,
    0.11018003657398513, -0.0030685538629213714, -0.0054126799810898353,
    -0.00048426672704270595, -0.0, -0.049583442794241726,
    -0.00065501984891378037, -0.00088904456777334838, -1.2704805442094325E-5,
    0.016981062543788658, -0.0013026524393105453, 0.16368620902280748,
    -0.0024327504919446057, -0.0058038975365799226, -0.00061259029406701151,
    -0.0, -0.04090697737647888, -0.00075661345705760764, -0.0011806142711058261,
    -4.424036447938312E-5, 0.017271651919341414, -0.001257515359061474,
    0.17834162877389872, -0.00161152031852069, -0.0058011916778807696,
    -0.00073484551737083533, -0.0, -0.03213584920181918, -0.00081517090061464042,
    -0.0014642560380119258, -7.6892574247333707E-5, 0.01708822624401821,
    -0.001184417876137854, 0.16965200751586249, -0.0007291224956574101,
    -0.0055040033969809025, -0.00084906792512870249, -0.0, -0.024145793721376797,
    -0.00083004077131965755, -0.0017277857906788903, -0.00010814064629558114,
    0.016596797545768038, -0.0010989617207572743, 0.14860158330679785,
    0.00012332407723901842, -0.005012625439237463, -0.00095456944621838586, -0.0,
    -0.01735713873319502, -0.00080439364948997052, -0.0019637497123331021,
    -0.00013606869238948609, 0.015923070727663555, -0.0010113191101064471,
    0.12257349852075866, 0.00088324870111464876, -0.0044144807303690987,
    -0.0010514662248786064, -0.0, -0.011892888990472713, -0.00074391712028932275,
    -0.0021686144256626563, -0.00015932684725223796, 0.015157884401586403,
    -0.00092761579980605332, 0.096212946275474359, 0.001511729232775398,
    -0.003778520544014743, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.054883325379601333, 0.00018966443044090412,
    0.00015913497745743808, -4.0945532666326082E-5, -0.010980623673581975,
    0.0010008925162674571, 0.20297142785939026, 0.0031026752110159071,
    0.0032311282598539476, 0.0, 0.059609081713834416, 0.00035391491177341896,
    0.00035558528147582914, -3.3871843192837595E-5, -0.014100450874041791,
    0.0012102947949394331, 0.0030704723812149492, 0.0033580569219097351,
    0.00455523354405733, 0.0, 0.05663109393802071, 0.00051640836201293655,
    0.00060680377897153164, -1.4575749290501952E-5, -0.016007318935255449,
    0.0012972660302894576, -0.11018003657398513, 0.0030685538629213714,
    0.0054126799810898353, 0.0, 0.049583442794241726, 0.00065501984891378037,
    0.00088904456777334838, 1.2704805442094325E-5, -0.016981062543788658,
    0.0013026524393105453, -0.16368620902280748, 0.0024327504919446057,
    0.0058038975365799226, 0.0, 0.04090697737647888, 0.00075661345705760764,
    0.0011806142711058261, 4.424036447938312E-5, -0.017271651919341414,
    0.001257515359061474, -0.17834162877389872, 0.00161152031852069,
    0.0058011916778807696, 0.0, 0.03213584920181918, 0.00081517090061464042,
    0.0014642560380119258, 7.6892574247333707E-5, -0.01708822624401821,
    0.001184417876137854, -0.16965200751586249, 0.0007291224956574101,
    0.0055040033969809025, 0.0, 0.024145793721376797, 0.00083004077131965755,
    0.0017277857906788903, 0.00010814064629558114, -0.016596797545768038,
    0.0010989617207572743, -0.14860158330679785, -0.00012332407723901842,
    0.005012625439237463, 0.0, 0.01735713873319502, 0.00080439364948997052,
    0.0019637497123331021, 0.00013606869238948609, -0.015923070727663555,
    0.0010113191101064471, -0.12257349852075866, -0.00088324870111464876,
    0.0044144807303690987, 0.0, 0.011892888990472713, 0.00074391712028932275,
    0.0021686144256626563, 0.00015932684725223796, -0.015157884401586403,
    0.00092761579980605332, -0.096212946275474359, -0.001511729232775398,
    0.003778520544014743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 4.7891849279322587E-6, -0.0, -4.0707966674952848E-5,
    -0.0464090538358248, -2.4610229279834437E-5, -0.0030919673412285178,
    -1.7576703166230984E-5, 9.7029434768206214E-5, -0.001509971515662687,
    -0.85302749794390476, -0.0014260811666531243, 1.9553719176953735E-5, -0.0,
    -0.00014006202707132539, -0.085043975442043368, -0.00017751299843456395,
    -0.00740711831933932, -2.331676728368985E-5, 0.00019851677117884567,
    -0.0023646344510826279, -0.69051044383405968, -0.004954155578038663,
    4.4454435358372452E-5, -0.0, -0.00026826271666735042, -0.11534365076190714,
    -0.00053902544131978166, -0.012536343471712256, -1.9098185441358164E-5,
    0.0002988879087654879, -0.0026849353030476142, -0.520979283271595,
    -0.0096289389499085859, 7.9134060107265971E-5, -0.0, -0.00040176330142696506,
    -0.13715425116620267, -0.0011468724162840489, -0.018093900163176455,
    -7.1564909796443892E-6, 0.00039337136440643975, -0.0025974596751517382,
    -0.3521548087015986, -0.014697559634988085, 0.00012280175601163312, -0.0,
    -0.00052321971195517906, -0.15068329187039023, -0.0020056697008370367,
    -0.023729720288973084, 1.0187559718062388E-5, 0.00047807706044242535,
    -0.0022221772612706046, -0.19074114854511831, -0.01958465295628432,
    0.0001743235042656341, -0.0, -0.00062096627057911784, -0.156445031663433,
    -0.0030952386675238376, -0.029138730282527434, 3.0718566326344354E-5,
    0.00055003449195668548, -0.0016654345695013371, -0.042286139963745,
    -0.023870305244826039, 0.00023231434335936233, -0.0, -0.00068823862252685784,
    -0.15520051836868357, -0.0043778662362908066, -0.034067186692455738,
    5.2451113500909331E-5, 0.00060719215788508272, -0.0010166182473423798,
    0.088893913180309286, -0.027269783951359681, 0.000295228761163138, -0.0,
    -0.00072229547807477873, -0.14789537730594471, -0.0058045821695615419,
    -0.038316151156875658, 7.3702925095851655E-5, 0.00064838193668042329,
    -0.00034726845470145766, 0.19973030442548714, -0.029614426390290671,
    0.00036144597642456366, -0.0, -0.00072353779133067276, -0.1355981346702376,
    -0.0073205027918376167, -0.041742328553016711, 9.312905043858073E-5,
    0.00067325342140161679, 0.000288264953102637, 0.28836573449166897,
    -0.030833377529667579, 0.00042934739472332966, -0.0, -0.00069468534504446588,
    -0.11944148905527346, -0.00886928065737454, -0.044256570097747604,
    0.00010972744951220567, 0.00068218410550778476, 0.00085127183938044852,
    0.35407400817630924, -0.030936089919557017, 0.0, 4.0707966674952848E-5,
    0.0464090538358248, 2.4610229279834437E-5, 0.0030919673412285178,
    1.7576703166230984E-5, -9.7029434768206214E-5, 0.001509971515662687,
    0.85302749794390476, 0.0014260811666531243, 0.0, 0.00014006202707132539,
    0.085043975442043368, 0.00017751299843456395, 0.00740711831933932,
    2.331676728368985E-5, -0.00019851677117884567, 0.0023646344510826279,
    0.69051044383405968, 0.004954155578038663, 0.0, 0.00026826271666735042,
    0.11534365076190714, 0.00053902544131978166, 0.012536343471712256,
    1.9098185441358164E-5, -0.0002988879087654879, 0.0026849353030476142,
    0.520979283271595, 0.0096289389499085859, 0.0, 0.00040176330142696506,
    0.13715425116620267, 0.0011468724162840489, 0.018093900163176455,
    7.1564909796443892E-6, -0.00039337136440643975, 0.0025974596751517382,
    0.3521548087015986, 0.014697559634988085, 0.0, 0.00052321971195517906,
    0.15068329187039023, 0.0020056697008370367, 0.023729720288973084,
    -1.0187559718062388E-5, -0.00047807706044242535, 0.0022221772612706046,
    0.19074114854511831, 0.01958465295628432, 0.0, 0.00062096627057911784,
    0.156445031663433, 0.0030952386675238376, 0.029138730282527434,
    -3.0718566326344354E-5, -0.00055003449195668548, 0.0016654345695013371,
    0.042286139963745, 0.023870305244826039, 0.0, 0.00068823862252685784,
    0.15520051836868357, 0.0043778662362908066, 0.034067186692455738,
    -5.2451113500909331E-5, -0.00060719215788508272, 0.0010166182473423798,
    -0.088893913180309286, 0.027269783951359681, 0.0, 0.00072229547807477873,
    0.14789537730594471, 0.0058045821695615419, 0.038316151156875658,
    -7.3702925095851655E-5, -0.00064838193668042329, 0.00034726845470145766,
    -0.19973030442548714, 0.029614426390290671, 0.0, 0.00072353779133067276,
    0.1355981346702376, 0.0073205027918376167, 0.041742328553016711,
    -9.312905043858073E-5, -0.00067325342140161679, -0.000288264953102637,
    -0.28836573449166897, 0.030833377529667579, 0.0, 0.00069468534504446588,
    0.11944148905527346, 0.00886928065737454, 0.044256570097747604,
    -0.00010972744951220567, -0.00068218410550778476, -0.00085127183938044852,
    -0.35407400817630924, 0.030936089919557017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.7712698035315807E-8,
    -0.0, -3.7516049822001062E-5, 2.1506383219102627E-9, -0.04392176650032184,
    0.00043412487299914745, -0.00017734495634069355, 1.6549466756155211E-6,
    -0.001284906265277134, 5.4203394113382172E-7, -0.76714673440244707,
    2.8623302431047426E-7, -0.0, -0.0001121390299617303, 9.9930280580189543E-8,
    -0.077616305140426584, 0.000747506199145241, -0.00029561181255359953,
    1.9554069952167189E-6, -0.0015808726960927762, 3.8087378155025922E-6,
    -0.58851802581999169, 4.6650639151568784E-7, -0.0, -0.00018711420602605174,
    4.2294604396763033E-7, -0.10346524275805116, 0.00096914766771613733,
    -0.00037180786338522853, 1.5787303151743397E-6, -0.001361747426785568,
    9.4592306518407551E-6, -0.45148691855727247, 5.9359525743418038E-7, -0.0,
    -0.00024479725336299507, 1.0741642050550255E-6, -0.12329559588148699,
    0.0011212711730100332, -0.00041847461841373451, 9.4463966810712164E-7,
    -0.00092758038898164519, 1.6803124111984035E-5, -0.346366306838756,
    6.5500201794533079E-7, -0.0, -0.0002792866342812386, 2.1172715458094573E-6,
    -0.138508903504834, 0.0012208947103972338, -0.00044470714519871993,
    2.9366712462844636E-7, -0.00045553929121130624, 2.4987385449466568E-5,
    -0.26572470476623739, 6.5588988921601E-7, -0.0, -0.00029131346062250354,
    3.5723481355705388E-6, -0.15018030302999721, 0.0012810427483857993,
    -0.00045699420172890974, -2.5292400768863519E-7, -3.9477188905057173E-5,
    3.3141365333322384E-5, -0.20386119065003519, 6.094804032994702E-7, -0.0,
    -0.00028485382851914452, 5.4177287146368167E-6, -0.1591345420557225,
    0.001311674867081696, -0.0004598920407324363, -6.4904531571258E-7,
    0.00028047075352852127, 4.0479717286119691E-5, -0.15640251435364058,
    5.3119165151301672E-7, -0.0, -0.00026500649983706538, 7.596037228349394E-6,
    -0.16600429269349035, 0.0013203984116997654, -0.00045655152686565,
    -8.9257237188670223E-7, 0.00049658191433857735, 4.6367322924956278E-5,
    -0.11999395989233737, 4.3537253332436289E-7, -0.0, -0.00023676421406210017,
    1.0022645589551683E-5, -0.17127488705181956, 0.0013130155456245142,
    -0.00044912096591901844, -1.0041862766183764E-6, 0.00061883103334604015,
    5.0352466044721574E-5, -0.092062158674784081, 3.3375645750419287E-7, -0.0,
    -0.00020438893444202764, 1.259514109773049E-5, -0.17531863458673524,
    0.0012939433112788585, -0.0004390470915561648, -1.013757462781988E-6,
    0.00066520498038440633, 5.2175154946732956E-5, -0.070633117078497357, 0.0,
    3.7516049822001062E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069355, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382172E-7, 0.76714673440244707, 0.0,
    0.0001121390299617303, -9.9930280580189543E-8, 0.077616305140426584,
    -0.000747506199145241, 0.00029561181255359953, -1.9554069952167189E-6,
    0.0015808726960927762, -3.8087378155025922E-6, 0.58851802581999169, 0.0,
    0.00018711420602605174, -4.2294604396763033E-7, 0.10346524275805116,
    -0.00096914766771613733, 0.00037180786338522853, -1.5787303151743397E-6,
    0.001361747426785568, -9.4592306518407551E-6, 0.45148691855727247, 0.0,
    0.00024479725336299507, -1.0741642050550255E-6, 0.12329559588148699,
    -0.0011212711730100332, 0.00041847461841373451, -9.4463966810712164E-7,
    0.00092758038898164519, -1.6803124111984035E-5, 0.346366306838756, 0.0,
    0.0002792866342812386, -2.1172715458094573E-6, 0.138508903504834,
    -0.0012208947103972338, 0.00044470714519871993, -2.9366712462844636E-7,
    0.00045553929121130624, -2.4987385449466568E-5, 0.26572470476623739, 0.0,
    0.00029131346062250354, -3.5723481355705388E-6, 0.15018030302999721,
    -0.0012810427483857993, 0.00045699420172890974, 2.5292400768863519E-7,
    3.9477188905057173E-5, -3.3141365333322384E-5, 0.20386119065003519, 0.0,
    0.00028485382851914452, -5.4177287146368167E-6, 0.1591345420557225,
    -0.001311674867081696, 0.0004598920407324363, 6.4904531571258E-7,
    -0.00028047075352852127, -4.0479717286119691E-5, 0.15640251435364058, 0.0,
    0.00026500649983706538, -7.596037228349394E-6, 0.16600429269349035,
    -0.0013203984116997654, 0.00045655152686565, 8.9257237188670223E-7,
    -0.00049658191433857735, -4.6367322924956278E-5, 0.11999395989233737, 0.0,
    0.00023676421406210017, -1.0022645589551683E-5, 0.17127488705181956,
    -0.0013130155456245142, 0.00044912096591901844, 1.0041862766183764E-6,
    -0.00061883103334604015, -5.0352466044721574E-5, 0.092062158674784081, 0.0,
    0.00020438893444202764, -1.259514109773049E-5, 0.17531863458673524,
    -0.0012939433112788585, 0.0004390470915561648, 1.013757462781988E-6,
    -0.00066520498038440633, -5.2175154946732956E-5, 0.070633117078497357, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T q[1808] = { -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040302, 4.9246767934457643E-6,
    -0.0052868326178782173, -0.0020754199270452169, 0.015163628780498446,
    3.1616010707720436E-7, -0.0, -0.00019811352068166413, -9.733336993428119E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442151,
    6.5614497023245073E-6, -0.0080792362290577832, -0.0038844512459874072,
    0.026788702408483002, 6.8512917620797546E-7, -0.0, -0.00049104314225850373,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228137, 6.1601073524460925E-6, -0.0091991288332427812,
    -0.0053836032115810936, 0.035691534155111788, 9.515955241686091E-7, -0.0,
    -0.00081150591943762143, -0.00052435232813021946, 0.0034085439914897236,
    -0.0077185036154530772, 0.00563726604148579, 4.6396980079752287E-6,
    -0.0092690633506094088, -0.00654832074431959, 0.042501234100522735,
    1.0377937756639656E-6, -0.0, -0.0011189252136054859, -0.00082088448415742121,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424437,
    2.6414509523473813E-6, -0.0087398966293815786, -0.0073714321358738892,
    0.047702538425699506, 9.1853767957217993E-7, -0.0, -0.001391638779765514,
    -0.0011501728132765289, 0.0073666001295169623, -0.011161718745088724,
    0.00820124153324256, 5.8494966353776041E-7, -0.0079227307407974644,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369554E-7, -0.0,
    -0.0016207036860207355, -0.0014960212712305321, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969556, -1.2790233473825676E-6,
    -0.007020235458604745, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040202E-7, -0.0, -0.0018051919142820267, -0.0018435530683128007,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659432,
    -2.82239855008753E-6, -0.006154644849868848, -0.007934340486205024,
    0.056980982028061261, -5.1013685987929281E-7, -0.0, -0.0019487749913620006,
    -0.0021796573224240924, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589607, -4.0018112448208546E-6, -0.0053912134366169455,
    -0.0075881528377809079, 0.058718842971069225, -1.23424891917915E-6, -0.0,
    -0.0020573611713821582, -0.0024933028948330325, 0.017104826530695772,
    -0.017334285099427416, 0.0127345953246283, -4.8286811668072085E-6,
    -0.004756876866607529, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.00019811352068166413, 9.733336993428119E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442151,
    -6.5614497023245073E-6, 0.0080792362290577832, 0.0038844512459874072,
    -0.026788702408483002, 0.0, 0.00049104314225850373, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228137,
    -6.1601073524460925E-6, 0.0091991288332427812, 0.0053836032115810936,
    -0.035691534155111788, 0.0, 0.00081150591943762143, 0.00052435232813021946,
    -0.0034085439914897236, 0.0077185036154530772, -0.00563726604148579,
    -4.6396980079752287E-6, 0.0092690633506094088, 0.00654832074431959,
    -0.042501234100522735, 0.0, 0.0011189252136054859, 0.00082088448415742121,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424437,
    -2.6414509523473813E-6, 0.0087398966293815786, 0.0073714321358738892,
    -0.047702538425699506, 0.0, 0.001391638779765514, 0.0011501728132765289,
    -0.0073666001295169623, 0.011161718745088724, -0.00820124153324256,
    -5.8494966353776041E-7, 0.0079227307407974644, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.0016207036860207355, 0.0014960212712305321,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969556,
    1.2790233473825676E-6, 0.007020235458604745, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.0018051919142820267, 0.0018435530683128007,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659432,
    2.82239855008753E-6, 0.006154644849868848, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913620006, 0.0021796573224240924,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589607,
    4.0018112448208546E-6, 0.0053912134366169455, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821582, 0.0024933028948330325,
    -0.017104826530695772, 0.017334285099427416, -0.0127345953246283,
    4.8286811668072085E-6, 0.004756876866607529, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590372, -0.0014846744549160561, -7.0936716057342316E-6,
    0.0051391900270571457, -0.0021227702215873057, 0.015228232305159619,
    -5.1746825674618421E-7, -0.0, 0.00019360954683992132, -9.8951619720029927E-5,
    0.00066903596330777557, -0.0040067314306774966, -0.0029322591857517642,
    -1.0565746060026213E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970965, -1.2501804167265802E-6, -0.0, 0.00048137249874376524,
    -0.0002812123096721656, 0.0018515897913409904, -0.0058959962902359461,
    -0.00433805660413819, -1.1566011819059163E-5, 0.0090182698834108191,
    -0.0054509447270126056, 0.035888209656145233, -1.99674342474268E-6, -0.0,
    0.00079779982914970015, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130649, -0.0056981223890151169, -1.0967109079724044E-5,
    0.0091195753483278835, -0.00660567593380442, 0.0427701561488428,
    -2.6308219371928462E-6, -0.0, 0.0011028937830708195, -0.0008275864795065065,
    0.0053069505185103531, -0.0094682805098512523, -0.0070095628750181035,
    -9.4049919993817713E-6, 0.0086253321268044, -0.0074136435021352051,
    0.04804544484898185, -3.079742094619743E-6, -0.0, 0.0013749180814484189,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939333,
    -0.00827058862369585, -7.3245584742921722E-6, 0.0078377590270683056,
    -0.0078869236468970261, 0.052084536642155919, -3.3076191174553654E-6, -0.0,
    0.0016045634974303, -0.001502682321689071, 0.0097046471474189055,
    -0.01278758479729789, -0.009480426545954863, -5.0236620287564823E-6,
    0.0069562410011868225, -0.0080491061052958713, 0.055172377151487914,
    -3.3026429098114466E-6, -0.0, 0.0017904596235921739, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562018, -0.010639161635940208,
    -2.6918556487285661E-6, 0.0061029256813059053, -0.0079329836605401376,
    0.057528472990236557, -3.0679042907758775E-6, -0.0, 0.0019358763409865662,
    -0.0021835932805221218, 0.014653203386246897, -0.01587211736084378,
    -0.01174755497429808, -4.4233786615141425E-7, 0.0053445703843127169,
    -0.007578149996654163, 0.059322164719128156, -2.6150642512061629E-6, -0.0,
    0.002046412901449518, -0.0024952750539298735, 0.017257462274893824,
    -0.017329934052813311, -0.012806866470529164, 1.6630845986044885E-6,
    0.004710183664429741, -0.0070286124953556385, 0.06068425383363444, 0.0, 0.0,
    0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, -0.00019360954683992132, 9.8951619720029927E-5,
    -0.00066903596330777557, 0.0040067314306774966, 0.0029322591857517642,
    1.0565746060026213E-5, -0.0078884598525309352, 0.0039509928253638827,
    -0.026917231873970965, 0.0, -0.00048137249874376524, 0.0002812123096721656,
    -0.0018515897913409904, 0.0058959962902359461, 0.00433805660413819,
    1.1566011819059163E-5, -0.0090182698834108191, 0.0054509447270126056,
    -0.035888209656145233, 0.0, -0.00079779982914970015, 0.000529877384341185,
    -0.0034281815934806724, 0.0077152543580130649, 0.0056981223890151169,
    1.0967109079724044E-5, -0.0091195753483278835, 0.00660567593380442,
    -0.0427701561488428, 0.0, -0.0011028937830708195, 0.0008275864795065065,
    -0.0053069505185103531, 0.0094682805098512523, 0.0070095628750181035,
    9.4049919993817713E-6, -0.0086253321268044, 0.0074136435021352051,
    -0.04804544484898185, 0.0, -0.0013749180814484189, 0.0011572507586087781,
    -0.00741723100352391, 0.011158213201939333, 0.00827058862369585,
    7.3245584742921722E-6, -0.0078377590270683056, 0.0078869236468970261,
    -0.052084536642155919, 0.0, -0.0016045634974303, 0.001502682321689071,
    -0.0097046471474189055, 0.01278758479729789, 0.009480426545954863,
    5.0236620287564823E-6, -0.0069562410011868225, 0.0080491061052958713,
    -0.055172377151487914, 0.0, -0.0017904596235921739, 0.0018491127346458545,
    -0.012127361717645797, 0.014358380565562018, 0.010639161635940208,
    2.6918556487285661E-6, -0.0061029256813059053, 0.0079329836605401376,
    -0.057528472990236557, 0.0, -0.0019358763409865662, 0.0021835932805221218,
    -0.014653203386246897, 0.01587211736084378, 0.01174755497429808,
    4.4233786615141425E-7, -0.0053445703843127169, 0.007578149996654163,
    -0.059322164719128156, 0.0, -0.002046412901449518, 0.0024952750539298735,
    -0.017257462274893824, 0.017329934052813311, 0.012806866470529164,
    -1.6630845986044885E-6, -0.004710183664429741, 0.0070286124953556385,
    -0.06068425383363444, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021016480453829815, 0.0014857887933183288, 4.7070151263154071E-6,
    -0.0050961555194273568, -0.0020754929921346357, -0.015462266265499226,
    3.0426878718878512E-7, -0.0, -0.00019216872658156111, -9.73459460026197E-5,
    -0.0006792751071504849, -0.0041074683619141631, 0.0029340512081696582,
    6.3057460452133893E-6, -0.00782907896809333, -0.0038849506557918018,
    -0.027331354583334473, 6.62734268138552E-7, -0.0, -0.00047814040658582214,
    -0.000277566493848083, -0.0018802229105924365, -0.0060264210814452886,
    0.004340226359465434, 5.9587145352081754E-6, -0.0089598311740056811,
    -0.0053848318467642564, -0.036451644592615427, 9.2636180986459214E-7, -0.0,
    -0.00079309983115135284, -0.00052449064683289992, -0.0034822500476397213,
    -0.0078659750107290677, 0.0057004858091328934, 4.53035250065951E-6,
    -0.009072082021816039, -0.0065504901027000958, -0.04346807648358772,
    1.0194144264559595E-6, -0.0, -0.0010974076290702994, -0.00082115681443972331,
    -0.0053930322171731326, -0.0096322567462445857, 0.0070120285161873611,
    2.6300941233486375E-6, -0.00859341228061931, -0.0073746438770505617,
    -0.048873310311435589, 9.1637309261321483E-7, -0.0, -0.0013694590279160162,
    -0.001150631492424329, -0.0075418405117768745, -0.011330203401756304,
    0.0082731347444936279, 6.6101379080510053E-7, -0.0078222898403132,
    -0.0078653210901301167, -0.053043720345121143, 6.2369573871460046E-7, -0.0,
    -0.0015999229352117736, -0.0014967156366828343, -0.0098744448046202624,
    -0.012963718195152128, 0.009483080190435313, -1.1328950919024518E-6,
    -0.0069556646472008314, -0.0080434495506573524, -0.056266866774456553,
    1.6606812914153242E-7, -0.0, -0.0017873120317849229, -0.001844524963056166,
    -0.012349220884839871, -0.014535826846399721, 0.010641980597964831,
    -2.6245895611173217E-6, -0.0061142707936579412, -0.0079402478608791779,
    -0.058762467425333663, -4.2346592189731472E-7, -0.0, -0.0019347286197374037,
    -0.0021809376864936609, -0.014934176702927581, -0.016048831986543406,
    0.011750612976507081, -3.7686667972724881E-6, -0.0053642122139471188,
    -0.0075945532602473666, -0.060698414364158154, -1.1102016279514345E-6, -0.0,
    -0.002047586031960839, -0.0024949095612962508, -0.017604680748317732,
    -0.017504462457878039, 0.01281024154007194, -4.5731930224289637E-6,
    -0.0047343841216166364, -0.0070502037507671955, -0.062203013141477644, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156111, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696582,
    -6.3057460452133893E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582214, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.004340226359465434,
    -5.9587145352081754E-6, 0.0089598311740056811, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.00079309983115135284, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328934,
    -4.53035250065951E-6, 0.009072082021816039, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702994, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.0070120285161873611,
    -2.6300941233486375E-6, 0.00859341228061931, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160162, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.6101379080510053E-7, 0.0078222898403132, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117736, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.009483080190435313,
    1.1328950919024518E-6, 0.0069556646472008314, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849229, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964831,
    2.6245895611173217E-6, 0.0061142707936579412, 0.0079402478608791779,
    0.058762467425333663, 0.0, 0.0019347286197374037, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507081,
    3.7686667972724881E-6, 0.0053642122139471188, 0.0075945532602473666,
    0.060698414364158154, 0.0, 0.002047586031960839, 0.0024949095612962508,
    0.017604680748317732, 0.017504462457878039, -0.01281024154007194,
    4.5731930224289637E-6, 0.0047343841216166364, 0.0070502037507671955,
    0.062203013141477644, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017572, -7.3113332728645887E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.01539766274083806,
    -5.293595766346033E-7, -0.0, 0.00019955434094002435, -9.8964195788368479E-5,
    -0.00067609777093437923, -0.0041050445656567363, -0.0028891738663263207,
    -1.0821449717137331E-5, 0.0081386171134953875, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960036E-6, -0.0, 0.00049427523441644661,
    -0.00028126666539891307, -0.0018705737454285825, -0.0060234600994775568,
    -0.00428292063329557, -1.1767404636297082E-5, 0.0092575675426479175,
    -0.00545217336219577, -0.036254969091582, -2.021977139046697E-6, -0.0,
    0.00081620591743596853, -0.00053001570304386553, -0.0034626124456487752,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212516, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060056, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.416348828380519E-6, 0.0087718164755666659, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787082E-6, -0.0, 0.0013970978332979158,
    -0.0011577094377565786, -0.007491209637769931, -0.011326697858606906,
    -0.00819869541244478, -7.2484943470248376E-6, 0.0079381999275525677,
    -0.0078911687012202889, -0.0526280524684559, -3.28566710111032E-6, -0.0,
    0.0016253442482392609, -0.0015033766871413736, -0.0098029263852935661,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763732E-6,
    0.0070208118125907343, -0.0080542762665754622, -0.0557823370265015,
    -3.2504945682103177E-6, -0.0, 0.0018083395060892768, -0.0018500846293892205,
    -0.012253512617855847, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583657E-6, 0.00614329973751681, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939009E-6, -0.0, 0.0019499227126111626,
    -0.0021848736445916912, -0.014811305222971739, -0.016044804770756937,
    -0.011671987181380605, -2.0919341860305622E-7, 0.0053715716069825418,
    -0.0075845504191206286, -0.060095092616099251, -2.491016959978449E-6, -0.0,
    0.0020561880408708363, -0.0024968817203930927, -0.017452045004119697,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827252E-6,
    0.0047326764094206318, -0.007035229851983839, -0.061551515639656613, 0.0,
    0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, -0.00019955434094002435, 9.8964195788368479E-5,
    0.00067609777093437923, 0.0041050445656567363, 0.0028891738663263207,
    1.0821449717137331E-5, -0.0081386171134953875, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644661, 0.00028126666539891307,
    0.0018705737454285825, 0.0060234600994775568, 0.00428292063329557,
    1.1767404636297082E-5, -0.0092575675426479175, 0.00545217336219577,
    0.036254969091582, 0.0, -0.00081620591743596853, 0.00053001570304386553,
    0.0034626124456487752, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212516, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060056, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.416348828380519E-6, -0.0087718164755666659, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979158, 0.0011577094377565786,
    0.007491209637769931, 0.011326697858606906, 0.00819869541244478,
    7.2484943470248376E-6, -0.0079381999275525677, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392609, 0.0015033766871413736,
    0.0098029263852935661, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763732E-6, -0.0070208118125907343, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892768, 0.0018500846293892205,
    0.012253512617855847, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583657E-6, -0.00614329973751681, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111626, 0.0021848736445916912,
    0.014811305222971739, 0.016044804770756937, 0.011671987181380605,
    2.0919341860305622E-7, -0.0053715716069825418, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708363, 0.0024968817203930927,
    0.017452045004119697, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827252E-6, -0.0047326764094206318, 0.007035229851983839,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496928, 0.00048221414518065207, 0.0020535983066627922,
    0.02239703294428403, -0.011382823490747533, -4.5300466257935381E-5,
    0.00020111824649365369, -0.0, 0.0008351968162215236, -0.00052693283295635138,
    -1.4202292023779353E-6, 0.00056258770077962511, 0.00080001208779628772,
    0.0040222089662175116, 0.034075479854978261, -0.021043808615419379,
    -6.0914557418032515E-5, 0.00059482891125992271, -0.0, 0.0020621431062848592,
    -0.0014904815292193945, -3.3998696950912798E-6, 0.00075646106685663106,
    0.00099363790528140769, 0.0059054831078212966, 0.038583750917710685,
    -0.028829764251451333, -7.173583655156873E-5, 0.0011726262150481641, -0.0,
    0.0033929136972443525, -0.00279498368772149, -6.2738005970893276E-6,
    0.00087950249413920069, 0.0010977323314750817, 0.0077041407928327083,
    0.038610702862460149, -0.034678824448749812, -9.9958287731080519E-5,
    0.0019261216668453418, -0.0, 0.0046549264815772193, -0.0043437906953855288,
    -1.1349003863154773E-5, 0.00092769306525124077, 0.0011404644798644042,
    0.009419772323318653, 0.036103268168904447, -0.038611763746433325,
    -0.00016194825176056718, 0.0028471204265186336, -0.0, 0.0057572468853912644,
    -0.0060431370141094806, -2.0579570862839974E-5, 0.00090087854130221294,
    0.001143657327183455, 0.011054625516548589, 0.032403592626321823,
    -0.04072118239331815, -0.00026717427891659356, 0.0039276769289651294, -0.0,
    0.00666376541296399, -0.0078054281883259006, -3.6223635885386171E-5,
    0.00080226872093682746, 0.0011234628800830134, 0.012611407038876496,
    0.028384129958974068, -0.041159175748152546, -0.00041844655161156377,
    0.0051601319868246533, -0.0, 0.0073728135925645831, -0.00955188773329919,
    -6.053307029146797E-5, 0.00063786668577865517, 0.0010912837713868079,
    0.014093112150810595, 0.024568713767860049, -0.040124126137914669,
    -0.00061290951136035914, 0.0065371345335159294, -0.0, 0.0079023594828677973,
    -0.011214534686086313, -9.5503092630370764E-5, 0.00041585923480478323,
    0.0010547464749837698, 0.015502888074725239, 0.021234175454636826,
    -0.037847237535387088, -0.00084339143145200431, 0.00805165138168979, -0.0,
    0.0082797661137407261, -0.012737493468585184, -0.0001426924602110768,
    0.00014599763913536538, 0.001018611145724166, 0.016843930534120113,
    0.018491293400464751, -0.034579382681332371, -0.0010998423450844811, 0.0,
    0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, -0.0008351968162215236, 0.00052693283295635138,
    1.4202292023779353E-6, -0.00056258770077962511, -0.00080001208779628772,
    -0.0040222089662175116, -0.034075479854978261, 0.021043808615419379,
    6.0914557418032515E-5, 0.0, -0.0020621431062848592, 0.0014904815292193945,
    3.3998696950912798E-6, -0.00075646106685663106, -0.00099363790528140769,
    -0.0059054831078212966, -0.038583750917710685, 0.028829764251451333,
    7.173583655156873E-5, 0.0, -0.0033929136972443525, 0.00279498368772149,
    6.2738005970893276E-6, -0.00087950249413920069, -0.0010977323314750817,
    -0.0077041407928327083, -0.038610702862460149, 0.034678824448749812,
    9.9958287731080519E-5, 0.0, -0.0046549264815772193, 0.0043437906953855288,
    1.1349003863154773E-5, -0.00092769306525124077, -0.0011404644798644042,
    -0.009419772323318653, -0.036103268168904447, 0.038611763746433325,
    0.00016194825176056718, 0.0, -0.0057572468853912644, 0.0060431370141094806,
    2.0579570862839974E-5, -0.00090087854130221294, -0.001143657327183455,
    -0.011054625516548589, -0.032403592626321823, 0.04072118239331815,
    0.00026717427891659356, 0.0, -0.00666376541296399, 0.0078054281883259006,
    3.6223635885386171E-5, -0.00080226872093682746, -0.0011234628800830134,
    -0.012611407038876496, -0.028384129958974068, 0.041159175748152546,
    0.00041844655161156377, 0.0, -0.0073728135925645831, 0.00955188773329919,
    6.053307029146797E-5, -0.00063786668577865517, -0.0010912837713868079,
    -0.014093112150810595, -0.024568713767860049, 0.040124126137914669,
    0.00061290951136035914, 0.0, -0.0079023594828677973, 0.011214534686086313,
    9.5503092630370764E-5, -0.00041585923480478323, -0.0010547464749837698,
    -0.015502888074725239, -0.021234175454636826, 0.037847237535387088,
    0.00084339143145200431, 0.0, -0.0082797661137407261, 0.012737493468585184,
    0.0001426924602110768, -0.00014599763913536538, -0.001018611145724166,
    -0.016843930534120113, -0.018491293400464751, 0.034579382681332371,
    0.0010998423450844811, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.0003062394217119654, -0.00047731536664842925, -0.0020665268130396616,
    -0.022172426283366312, -0.011387616330349713, 0.00015666644814812003,
    -0.0002022625931303291, -0.0, -0.00082774518149017668, -0.000529592610445747,
    5.7389299890772084E-6, 0.00056396725231741671, -0.00079224661923222445,
    -0.0040450830466660873, -0.033768034595554684, -0.021141612605666528,
    0.00022480793913855977, -0.00059796183300178749, -0.0,
    -0.0020455667486544604, -0.0015016832971963196, 1.2281171297667533E-5,
    0.00075945441536740606, -0.0009843707517287496, -0.0059353031721315541,
    -0.038284778592207587, -0.029063239819559016, 0.00018775158260361411,
    -0.0011782958644571567, -0.0, -0.0033690819832402769, -0.0028218463087974089,
    1.4332584980973895E-5, 0.00088370610807833507, -0.0010877588806645177,
    -0.0077380022415320937, -0.03837241722031557, -0.035056627436016605,
    4.6343639124359488E-5, -0.0019345945407556694, -0.0, -0.0046275598281651058,
    -0.0043932358301320314, 6.920257210320176E-6, 0.0009321934846738553,
    -0.0011301251608970202, -0.0094549611400509669, -0.035949097799074847,
    -0.039118963178182836, -0.00018840012431222786, -0.0028584044719204794, -0.0,
    -0.0057307040828358151, -0.0061209378716336575, -1.4228364171763735E-5,
    0.00090443930240191107, -0.0011329532079862735, -0.011088696165303912,
    -0.032336970688930627, -0.04132810309639473, -0.00050011991607834528,
    -0.0039415515091365486, -0.0, -0.0066422289273360543, -0.0079156577616609179,
    -5.2501371284616778E-5, 0.00080349399699248939, -0.0011121622881278004,
    -0.012642241664372786, -0.028395620667837813, -0.0418285314829304,
    -0.00087020044792009415, -0.0051761828183116993, -0.0,
    -0.0073597906534701735, -0.00969668181913341, -0.00011034171177573492,
    0.0006353379826807698, -0.0010790145827917301, -0.014118960812822058,
    -0.024641539531302634, -0.040816497866809458, -0.0012796998356205372,
    -0.00655479171491834, -0.0, -0.0079004230433163732, -0.011394090655931458,
    -0.00018926275707432277, 0.00040824404672798562, -0.0010410718558982626,
    -0.015522390488027808, -0.021348319198257911, -0.0385250575094498,
    -0.0017105267608725739, -0.0080702287172710677, -0.0, -0.008290469892862088,
    -0.01295023522278608, -0.00028990993190658839, 0.00013213075603135004,
    -0.0010030885797492422, -0.01685612046981471, -0.018626398129647875,
    -0.035209634693518316, -0.0021461428964605904, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.00082774518149017668, 0.000529592610445747, -5.7389299890772084E-6,
    -0.00056396725231741671, 0.00079224661923222445, 0.0040450830466660873,
    0.033768034595554684, 0.021141612605666528, -0.00022480793913855977, 0.0,
    0.0020455667486544604, 0.0015016832971963196, -1.2281171297667533E-5,
    -0.00075945441536740606, 0.0009843707517287496, 0.0059353031721315541,
    0.038284778592207587, 0.029063239819559016, -0.00018775158260361411, 0.0,
    0.0033690819832402769, 0.0028218463087974089, -1.4332584980973895E-5,
    -0.00088370610807833507, 0.0010877588806645177, 0.0077380022415320937,
    0.03837241722031557, 0.035056627436016605, -4.6343639124359488E-5, 0.0,
    0.0046275598281651058, 0.0043932358301320314, -6.920257210320176E-6,
    -0.0009321934846738553, 0.0011301251608970202, 0.0094549611400509669,
    0.035949097799074847, 0.039118963178182836, 0.00018840012431222786, 0.0,
    0.0057307040828358151, 0.0061209378716336575, 1.4228364171763735E-5,
    -0.00090443930240191107, 0.0011329532079862735, 0.011088696165303912,
    0.032336970688930627, 0.04132810309639473, 0.00050011991607834528, 0.0,
    0.0066422289273360543, 0.0079156577616609179, 5.2501371284616778E-5,
    -0.00080349399699248939, 0.0011121622881278004, 0.012642241664372786,
    0.028395620667837813, 0.0418285314829304, 0.00087020044792009415, 0.0,
    0.0073597906534701735, 0.00969668181913341, 0.00011034171177573492,
    -0.0006353379826807698, 0.0010790145827917301, 0.014118960812822058,
    0.024641539531302634, 0.040816497866809458, 0.0012796998356205372, 0.0,
    0.0079004230433163732, 0.011394090655931458, 0.00018926275707432277,
    -0.00040824404672798562, 0.0010410718558982626, 0.015522390488027808,
    0.021348319198257911, 0.0385250575094498, 0.0017105267608725739, 0.0,
    0.008290469892862088, 0.01295023522278608, 0.00028990993190658839,
    -0.00013213075603135004, 0.0010030885797492422, 0.01685612046981471,
    0.018626398129647875, 0.035209634693518316, 0.0021461428964605904, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00031185892138120829,
    -0.000502570134369898, 0.0021189752999033816, -0.023341150699844014,
    0.011594289336350715, 4.8538698886608527E-5, 0.00020586795104612229, -0.0,
    -0.00086995623361496794, 0.00053660101735923357, 1.5306708468308135E-6,
    -0.00057297910874745141, -0.00083359519431663409, 0.004119248160739955,
    -0.035495899890902981, 0.021430149447512051, 6.5408284223244733E-5,
    0.0006062711891352639, -0.0, -0.0021471788857608371, 0.0015176122837254379,
    3.6460185703158003E-6, -0.000770344917774514, -0.00103515532550392,
    0.0060112845231374149, -0.040171560763765359, 0.029352888902237737,
    7.6101215650564729E-5, 0.0011908412917109572, -0.0, -0.0035314309384240458,
    0.0028454618318544097, 6.6294921173456258E-6, -0.00089555200508320771,
    -0.0011434481783357154, 0.0078039387061703035, -0.040176177008991183,
    0.035300685361534523, 0.00010352169015720698, 0.0019500242678547552, -0.0,
    -0.00484290600122265, 0.0044216287235151188, 1.1770888489239837E-5,
    -0.00094453662973384314, -0.0011878922635308329, 0.0095046860602438672,
    -0.037542072616071218, 0.039295727814625446, 0.00016467428301353407,
    0.0028749549914754272, -0.0, -0.0059870067172350123, 0.0061505759056418863,
    2.1035254999411097E-5, -0.00091716878475691331, -0.0011912658049384609,
    0.011119868808881342, -0.033669554571301941, 0.041433198448315861,
    0.00026950643131986451, 0.0039573555927472342, -0.0, -0.0069263207498740835,
    0.0079430910275364534, 3.6711018305390747E-5, -0.00081674138386906268,
    -0.0011704175763008584, 0.012654925863460519, -0.029468311129123046,
    0.041868716552104328, 0.0004211223488868039, 0.0051894553636579882, -0.0,
    -0.0076593329913997111, 0.00971897451281721, 6.1090607957708861E-5,
    -0.000649388305425708, -0.0011372333641091231, 0.014114591733434101,
    -0.025484039012415027, 0.040804892537124521, 0.00061678702026516556,
    0.00656392875731367, -0.0, -0.0082049716994792871, 0.01140904630781259,
    9.6212106762538893E-5, -0.00042346315376165077, -0.0010996549666288829,
    0.01550305918633214, -0.022004664482222366, 0.038477622702890485,
    0.00084930644176672517, 0.00807384784685867, -0.0, -0.008591923151116421,
    0.012956473101216526, 0.00014367324314189093, -0.00014890838604834526,
    -0.0010626319711789323, 0.016824106212107545, -0.019144919197986585,
    0.035142704197345845, 0.0011085037444974739, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.00086995623361496794, -0.00053660101735923357, -1.5306708468308135E-6,
    0.00057297910874745141, 0.00083359519431663409, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.5408284223244733E-5, 0.0,
    0.0021471788857608371, -0.0015176122837254379, -3.6460185703158003E-6,
    0.000770344917774514, 0.00103515532550392, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237737, -7.6101215650564729E-5, 0.0,
    0.0035314309384240458, -0.0028454618318544097, -6.6294921173456258E-6,
    0.00089555200508320771, 0.0011434481783357154, -0.0078039387061703035,
    0.040176177008991183, -0.035300685361534523, -0.00010352169015720698, 0.0,
    0.00484290600122265, -0.0044216287235151188, -1.1770888489239837E-5,
    0.00094453662973384314, 0.0011878922635308329, -0.0095046860602438672,
    0.037542072616071218, -0.039295727814625446, -0.00016467428301353407, 0.0,
    0.0059870067172350123, -0.0061505759056418863, -2.1035254999411097E-5,
    0.00091716878475691331, 0.0011912658049384609, -0.011119868808881342,
    0.033669554571301941, -0.041433198448315861, -0.00026950643131986451, 0.0,
    0.0069263207498740835, -0.0079430910275364534, -3.6711018305390747E-5,
    0.00081674138386906268, 0.0011704175763008584, -0.012654925863460519,
    0.029468311129123046, -0.041868716552104328, -0.0004211223488868039, 0.0,
    0.0076593329913997111, -0.00971897451281721, -6.1090607957708861E-5,
    0.000649388305425708, 0.0011372333641091231, -0.014114591733434101,
    0.025484039012415027, -0.040804892537124521, -0.00061678702026516556, 0.0,
    0.0082049716994792871, -0.01140904630781259, -9.6212106762538893E-5,
    0.00042346315376165077, 0.0010996549666288829, -0.01550305918633214,
    0.022004664482222366, -0.038477622702890485, -0.00084930644176672517, 0.0,
    0.008591923151116421, -0.012956473101216526, -0.00014367324314189093,
    0.00014890838604834526, 0.0010626319711789323, -0.016824106212107545,
    0.019144919197986585, -0.035142704197345845, -0.0011085037444974739, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572542,
    0.00049767135583767507, -0.0021060467935265117, 0.023116544038926296,
    0.01117615048474652, -0.00015990468077679308, -0.00020472360440944683, -0.0,
    0.00086250459888362091, 0.00051992442604286435, -5.8493716335300827E-6,
    -0.00055357584434958824, 0.00082582972575257082, -0.0040963740802913793,
    0.035188454631479404, 0.020755271773573836, -0.00022930166594377187,
    -0.0006031382673933989, -0.0, 0.0021306025281304384, 0.0014745525426902747,
    -1.2527320172892045E-5, -0.00074557056444952031, 0.001025888171951262,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772584,
    -0.00019211696170261, -0.0011851716423019645, -0.0, 0.0035075992244199706,
    0.0027713681646644867, -1.4688276501230182E-5, -0.00086765659713432448,
    0.0011334747275251512, -0.0077700772574709181, 0.039937891366846605,
    0.034434766523231866, -4.990704155048592E-5, -0.0019415513939444271, -0.0,
    0.0048155393478105379, 0.0043153978020024379, -7.3421418364052275E-6,
    -0.0009153499201912487, 0.0011775529445634484, -0.0094694972435115515,
    0.037387902246241611, 0.038434999109990681, 0.00018567409305926088,
    -0.002863670946073581, -0.0, 0.0059604639146795648, 0.0060134989801012466,
    1.3772680035192611E-5, -0.000888149058947206, 0.001180561685741279,
    -0.011085798160126016, 0.033602932633910738, 0.040616087041396992,
    0.0004977877636750741, -0.0039434810125758141, -0.0, 0.00690478426424615,
    0.0077779949224503582, 5.2013988864612175E-5, -0.00078902133406024907,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986781,
    0.04111899067897859, 0.00086752465064485358, -0.0051734045321709405, -0.0,
    0.0076463100523053032, 0.0095295950396153822, 0.00010978417410949397,
    -0.00062381636303371151, 0.0011249641755140447, -0.014088743071422632,
    0.0255568647758576, 0.040135731467599578, 0.0012758223267157302,
    -0.006546271575911259, -0.0, 0.0082030352599278648, 0.011199579034205171,
    0.00018855374294215457, -0.00040064012777111233, 0.001085980347543375,
    -0.015483556773029566, 0.022118808225843441, 0.037894672341946385,
    0.0017046117505578522, -0.0080552705112773917, -0.0, 0.0086026269302377847,
    0.012731255590154728, 0.0002889291489757741, -0.0001292200091183642,
    0.0010471094052040078, -0.016811916276412941, 0.0192800239271697,
    0.034646313177504821, 0.0021374814970475968, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    -0.00086250459888362091, -0.00051992442604286435, 5.8493716335300827E-6,
    0.00055357584434958824, -0.00082582972575257082, 0.0040963740802913793,
    -0.035188454631479404, -0.020755271773573836, 0.00022930166594377187, 0.0,
    -0.0021306025281304384, -0.0014745525426902747, 1.2527320172892045E-5,
    0.00074557056444952031, -0.001025888171951262, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772584, 0.00019211696170261, 0.0,
    -0.0035075992244199706, -0.0027713681646644867, 1.4688276501230182E-5,
    0.00086765659713432448, -0.0011334747275251512, 0.0077700772574709181,
    -0.039937891366846605, -0.034434766523231866, 4.990704155048592E-5, 0.0,
    -0.0048155393478105379, -0.0043153978020024379, 7.3421418364052275E-6,
    0.0009153499201912487, -0.0011775529445634484, 0.0094694972435115515,
    -0.037387902246241611, -0.038434999109990681, -0.00018567409305926088, 0.0,
    -0.0059604639146795648, -0.0060134989801012466, -1.3772680035192611E-5,
    0.000888149058947206, -0.001180561685741279, 0.011085798160126016,
    -0.033602932633910738, -0.040616087041396992, -0.0004977877636750741, 0.0,
    -0.00690478426424615, -0.0077779949224503582, -5.2013988864612175E-5,
    0.00078902133406024907, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986781, -0.04111899067897859, -0.00086752465064485358, 0.0,
    -0.0076463100523053032, -0.0095295950396153822, -0.00010978417410949397,
    0.00062381636303371151, -0.0011249641755140447, 0.014088743071422632,
    -0.0255568647758576, -0.040135731467599578, -0.0012758223267157302, 0.0,
    -0.0082030352599278648, -0.011199579034205171, -0.00018855374294215457,
    0.00040064012777111233, -0.001085980347543375, 0.015483556773029566,
    -0.022118808225843441, -0.037894672341946385, -0.0017046117505578522, 0.0,
    -0.0086026269302377847, -0.012731255590154728, -0.0002889291489757741,
    0.0001292200091183642, -0.0010471094052040078, 0.016811916276412941,
    -0.0192800239271697, -0.034646313177504821, -0.0021374814970475968, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const real_T u[640] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0 };

  static const real_T v[640] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const int8_T c_1[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T c_b[48] = { 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  boolean_T exitg1;
  boolean_T guard1;

  // Outputs for IfAction SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' incorporates:
  //   ActionPort: '<S75>/Action Port'

  // SwitchCase: '<S68>/Switch Case' incorporates:
  //   MATLAB Function: '<S148>/NLMPC'

  f[0U] = (rtInf);
  f[1U] = (rtInf);
  f[2U] = (rtInf);
  f[3U] = (rtInf);
  f[4U] = (rtInf);
  f[5U] = (rtInf);
  f[6U] = (rtInf);
  f[7U] = (rtInf);
  f[8U] = (rtInf);
  f[9U] = (rtInf);
  f[10U] = (rtInf);
  f[11U] = (rtInf);
  f[12U] = (rtInf);
  f[13U] = (rtInf);
  f[14U] = (rtInf);
  f[15U] = (rtInf);
  f[16U] = (rtInf);
  f[17U] = (rtInf);
  f[18U] = (rtInf);
  f[19U] = (rtInf);
  d[0U] = (rtMinusInf);
  d[1U] = (rtMinusInf);
  d[2U] = (rtMinusInf);
  d[3U] = (rtMinusInf);
  d[4U] = (rtMinusInf);
  d[5U] = (rtMinusInf);
  d[6U] = (rtMinusInf);
  d[7U] = (rtMinusInf);
  d[8U] = (rtMinusInf);
  d[9U] = (rtMinusInf);
  d[10U] = (rtMinusInf);
  d[11U] = (rtMinusInf);
  d[12U] = (rtMinusInf);
  d[13U] = (rtMinusInf);
  d[14U] = (rtMinusInf);
  d[15U] = (rtMinusInf);
  d[16U] = (rtMinusInf);
  d[17U] = (rtMinusInf);
  d[18U] = (rtMinusInf);
  d[19U] = (rtMinusInf);
  d[20U] = (rtMinusInf);
  d[21U] = (rtMinusInf);
  d[22U] = (rtMinusInf);
  d[23U] = (rtMinusInf);
  d[24U] = (rtMinusInf);
  d[25U] = (rtMinusInf);
  d[26U] = (rtMinusInf);
  d[27U] = (rtMinusInf);
  d[28U] = (rtMinusInf);
  d[29U] = (rtMinusInf);

  // End of Outputs for SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' 
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // MATLABSystem: '<S56>/SourceBlock'
    proc_control_B.SourceBlock_o1_f = Sub_proc_control_1.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_d_o);

    // Outputs for Enabled SubSystem: '<S56>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S62>/Enable'

    if (proc_control_B.SourceBlock_o1_f) {
      // SignalConversion generated from: '<S62>/In1' incorporates:
      //   MATLABSystem: '<S56>/SourceBlock'

      proc_control_B.In1_me = proc_control_B.rtb_SourceBlock_o2_d_o;
    }

    // End of Outputs for SubSystem: '<S56>/Enabled Subsystem'

    // MATLABSystem: '<S61>/SourceBlock'
    proc_control_B.SourceBlock_o1_j = Sub_proc_control_1486.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_my_m);

    // MATLABSystem: '<S57>/SourceBlock'
    proc_control_B.SourceBlock_o1_e = Sub_proc_control_13.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_i_m);

    // Outputs for Enabled SubSystem: '<S57>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S63>/Enable'

    if (proc_control_B.SourceBlock_o1_e) {
      // SignalConversion generated from: '<S63>/In1' incorporates:
      //   MATLABSystem: '<S57>/SourceBlock'

      proc_control_B.In1_lz = proc_control_B.rtb_SourceBlock_o2_i_m;
    }

    // End of Outputs for SubSystem: '<S57>/Enabled Subsystem'

    // MATLABSystem: '<S58>/SourceBlock'
    proc_control_B.SourceBlock_o1_a = Sub_proc_control_40.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_m_n);

    // Outputs for Enabled SubSystem: '<S58>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S64>/Enable'

    if (proc_control_B.SourceBlock_o1_a) {
      // SignalConversion generated from: '<S64>/In1' incorporates:
      //   MATLABSystem: '<S58>/SourceBlock'

      proc_control_B.In1_gs = proc_control_B.rtb_SourceBlock_o2_m_n;
    }

    // End of Outputs for SubSystem: '<S58>/Enabled Subsystem'

    // MATLABSystem: '<S59>/SourceBlock'
    proc_control_B.SourceBlock_o1_k3 = Sub_proc_control_15.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_my_m);

    // Outputs for Enabled SubSystem: '<S59>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S65>/Enable'

    if (proc_control_B.SourceBlock_o1_k3) {
      // SignalConversion generated from: '<S65>/In1' incorporates:
      //   MATLABSystem: '<S59>/SourceBlock'

      proc_control_B.In1_gf = proc_control_B.rtb_SourceBlock_o2_my_m;
    }

    // End of Outputs for SubSystem: '<S59>/Enabled Subsystem'

    // MATLABSystem: '<S60>/SourceBlock'
    proc_control_B.SourceBlock_o1_k = Sub_proc_control_16.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_my_m);
  }

  // MATLABSystem: '<S45>/MATLAB System' incorporates:
  //   Delay: '<S45>/Delay'
  //   SignalConversion generated from: '<S45>/MATLAB System'

  if (proc_control_DW.obj_i.initial_mode != proc_control_P.mode.init) {
    proc_control_DW.obj_i.initial_mode = proc_control_P.mode.init;
  }

  //         %% Fonction qui détermine si on est mode dry_run
  if (proc_control_B.SourceBlock_o1_k3) {
    proc_control_DW.obj_i.m_notDryRun = !proc_control_B.In1_gf.data;
  }

  //          %% Fonction qui détermine la condition initial
  if (proc_control_B.SourceBlock_o1_a) {
    proc_control_DW.obj_i.m_simulation = 1.0;

    //  activer la simulation
    proc_control_DW.obj_i.m_initCond[0] = 0.0;
    proc_control_DW.obj_i.m_initCond[1] = 0.0;
    proc_control_DW.obj_i.m_initCond[2] = proc_control_B.In1_gs.position.z;

    //         %% Fonction qui vérifie si le quaternion est unitaire
    proc_control_B.scale = 3.3121686421112381E-170;
    proc_control_B.absxk = fabs(proc_control_B.In1_gs.orientation.x);
    if (proc_control_B.absxk > 3.3121686421112381E-170) {
      proc_control_B.d_oi = 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
      proc_control_B.d_oi = proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = fabs(proc_control_B.In1_gs.orientation.y);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d_oi = proc_control_B.d_oi * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d_oi += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = fabs(proc_control_B.In1_gs.orientation.z);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d_oi = proc_control_B.d_oi * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d_oi += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = fabs(proc_control_B.In1_gs.orientation.w);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d_oi = proc_control_B.d_oi * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d_oi += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.d_oi = proc_control_B.scale * sqrt(proc_control_B.d_oi);
    proc_control_B.n_c = proc_control_B.In1_gs.orientation.x /
      proc_control_B.d_oi;
    proc_control_B.n[0] = proc_control_B.n_c;
    proc_control_B.b_l[0] = rtIsNaN(proc_control_B.n_c);
    proc_control_B.n_c = proc_control_B.In1_gs.orientation.y /
      proc_control_B.d_oi;
    proc_control_B.n[1] = proc_control_B.n_c;
    proc_control_B.b_l[1] = rtIsNaN(proc_control_B.n_c);
    proc_control_B.n_c = proc_control_B.In1_gs.orientation.z /
      proc_control_B.d_oi;
    proc_control_B.n[2] = proc_control_B.n_c;
    proc_control_B.b_l[2] = rtIsNaN(proc_control_B.n_c);
    proc_control_B.n_c = proc_control_B.In1_gs.orientation.w /
      proc_control_B.d_oi;
    proc_control_B.n[3] = proc_control_B.n_c;
    proc_control_B.b_l[3] = rtIsNaN(proc_control_B.n_c);
    proc_control_B.Reset = true;
    proc_control_B.b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.b_k < 4)) {
      if (!proc_control_B.b_l[proc_control_B.b_k]) {
        proc_control_B.Reset = false;
        exitg1 = true;
      } else {
        proc_control_B.b_k++;
      }
    }

    if (proc_control_B.Reset) {
      proc_control_B.n[0] = 1.0;
      proc_control_B.n[1] = 0.0;
      proc_control_B.n[2] = 0.0;
      proc_control_B.n[3] = 0.0;
    }

    proc_control_DW.obj_i.m_initCond[3] = proc_control_B.n[0];
    proc_control_DW.obj_i.m_initCond[4] = proc_control_B.n[1];
    proc_control_DW.obj_i.m_initCond[5] = proc_control_B.n[2];
    proc_control_DW.obj_i.m_initCond[6] = proc_control_B.n[3];
  }

  //         %% Fonction qui détermine le mode
  //          %% Fonction qui détermine l'arret d'urgence
  if (proc_control_B.SourceBlock_o1_e) {
    proc_control_DW.obj_i.m_killStatus = !proc_control_B.In1_lz.status;
  }

  //  regarder l'états de la kill
  if (proc_control_B.SourceBlock_o1_f && (!(proc_control_DW.obj_i.m_killStatus
        != 0.0)) && (proc_control_DW.Delay_DSTATE_j != 0.0)) {
    proc_control_DW.obj_i.m_mode = proc_control_B.In1_me.data;
  }

  if ((proc_control_DW.obj_i.m_killStatus != 0.0) ||
      (!(proc_control_DW.obj_i.m_notDryRun != 0.0))) {
    proc_control_DW.obj_i.m_mode = 0.0;
  }

  // Start for MATLABSystem: '<S45>/MATLAB System'
  //          %% Fonction qui détermine si on reset
  proc_control_B.Reset = (proc_control_B.SourceBlock_o1_j ||
    proc_control_B.SourceBlock_o1_a);

  // MATLABSystem: '<S45>/MATLAB System'
  proc_control_DW.obj_i.m_reset = proc_control_B.Reset;

  //          %% Fonction qui détermine si on clear la trajectoire
  proc_control_DW.obj_i.m_trajClear = (proc_control_B.Reset ||
    proc_control_B.SourceBlock_o1_f || proc_control_B.SourceBlock_o1_k);

  // DataTypeConversion: '<S45>/Data Type Conversion' incorporates:
  //   MATLABSystem: '<S45>/MATLAB System'
  //
  proc_control_B.n_c = floor(proc_control_DW.obj_i.m_mode);
  if (rtIsNaN(proc_control_B.n_c) || rtIsInf(proc_control_B.n_c)) {
    proc_control_B.n_c = 0.0;
  } else {
    proc_control_B.n_c = fmod(proc_control_B.n_c, 256.0);
  }

  if (proc_control_B.n_c < 0.0) {
    // DataTypeConversion: '<S45>/Data Type Conversion'
    proc_control_B.mode = static_cast<uint8_T>(-static_cast<int8_T>(static_cast<
      uint8_T>(-proc_control_B.n_c)));
  } else {
    // DataTypeConversion: '<S45>/Data Type Conversion'
    proc_control_B.mode = static_cast<uint8_T>(proc_control_B.n_c);
  }

  // End of DataTypeConversion: '<S45>/Data Type Conversion'

  // ZeroOrderHold: '<S4>/Zero-Order Hold'
  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // If: '<S4>/If'
    if (proc_control_B.mode == 0) {
      // Outputs for IfAction SubSystem: '<S4>/Get_ROS_param' incorporates:
      //   ActionPort: '<S44>/Action Port'

      // MATLABSystem: '<S48>/Get Parameter'
      ParamGet_proc_control_140.getParameter(&proc_control_B.b_value);

      // DataTypeConversion: '<S48>/Data Type Conversion' incorporates:
      //   MATLABSystem: '<S48>/Get Parameter'

      proc_control_B.p_h = static_cast<real_T>(proc_control_B.b_value);

      // MATLABSystem: '<S48>/Get Parameter1'
      ParamGet_proc_control_143.getParameter(&proc_control_B.b_value);

      // DataTypeConversion: '<S48>/Data Type Conversion1' incorporates:
      //   MATLABSystem: '<S48>/Get Parameter1'

      proc_control_B.m_a = static_cast<real_T>(proc_control_B.b_value);

      // MATLABSystem: '<S50>/Get Parameter'
      ParamGet_proc_control_66.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S50>/Get Parameter1'
      ParamGet_proc_control_72.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S50>/Get Parameter2'
      ParamGet_proc_control_74.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S50>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S50>/Get Parameter2'

      memcpy(&proc_control_B.MVR_cn[0], &proc_control_B.dv9[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S50>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S50>/Get Parameter'

      memcpy(&proc_control_B.OV_d[0], &proc_control_B.dv7[0], 13U * sizeof
             (real_T));

      // MATLABSystem: '<S50>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S50>/Get Parameter1'

      memcpy(&proc_control_B.MV_p[0], &proc_control_B.dv8[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S51>/Get Parameter'
      ParamGet_proc_control_97.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S51>/Get Parameter1'
      ParamGet_proc_control_98.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S51>/Get Parameter2'
      ParamGet_proc_control_99.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S51>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S51>/Get Parameter2'

      memcpy(&proc_control_B.MVR_a[0], &proc_control_B.dv9[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S51>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S51>/Get Parameter'

      memcpy(&proc_control_B.OV_c[0], &proc_control_B.dv7[0], 13U * sizeof
             (real_T));

      // MATLABSystem: '<S51>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S51>/Get Parameter1'

      memcpy(&proc_control_B.MV_j[0], &proc_control_B.dv8[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S52>/Get Parameter'
      ParamGet_proc_control_106.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S52>/Get Parameter1'
      ParamGet_proc_control_107.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S52>/Get Parameter2'
      ParamGet_proc_control_108.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S52>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S52>/Get Parameter2'

      memcpy(&proc_control_B.MVR_c[0], &proc_control_B.dv9[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S52>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S52>/Get Parameter'

      memcpy(&proc_control_B.OV_l[0], &proc_control_B.dv7[0], 13U * sizeof
             (real_T));

      // MATLABSystem: '<S52>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S52>/Get Parameter1'

      memcpy(&proc_control_B.MV_l[0], &proc_control_B.dv8[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S53>/Get Parameter'
      ParamGet_proc_control_115.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S53>/Get Parameter1'
      ParamGet_proc_control_116.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S53>/Get Parameter2'
      ParamGet_proc_control_117.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S53>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S53>/Get Parameter2'

      memcpy(&proc_control_B.MVR[0], &proc_control_B.dv9[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S53>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S53>/Get Parameter'

      memcpy(&proc_control_B.OV[0], &proc_control_B.dv7[0], 13U * sizeof(real_T));

      // MATLABSystem: '<S53>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S53>/Get Parameter1'

      memcpy(&proc_control_B.MV_c[0], &proc_control_B.dv8[0], sizeof(real_T) <<
             3U);

      // MATLABSystem: '<S54>/Get Parameter'
      ParamGet_proc_control_133.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S54>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S54>/Get Parameter'

      memcpy(&proc_control_B.MV[0], &proc_control_B.dv7[0], sizeof(real_T) << 3U);

      // MATLABSystem: '<S48>/Get Parameter2'
      ParamGet_proc_control_144.getParameter(&proc_control_B.tmax);

      // MATLABSystem: '<S48>/Get Parameter3'
      ParamGet_proc_control_145.getParameter(&proc_control_B.tmin);

      // MATLABSystem: '<S49>/Get Parameter'
      ParamGet_proc_control_150.getParameter(&proc_control_B.linearTol);

      // MATLABSystem: '<S49>/Get Parameter1'
      ParamGet_proc_control_151.getParameter(&proc_control_B.angularTol);

      // MATLABSystem: '<S49>/Get Parameter2'
      ParamGet_proc_control_152.getParameter(&proc_control_B.timeInTol);

      // BusCreator: '<S47>/Bus Creator' incorporates:
      //   MATLABSystem: '<S47>/Rho'
      //   MATLABSystem: '<S47>/g'
      //   MATLABSystem: '<S47>/mass'
      //   MATLABSystem: '<S47>/sub height'
      //   MATLABSystem: '<S47>/volume'

      ParamGet_proc_control_166.getParameter(&proc_control_B.BusCreator.rho);
      ParamGet_proc_control_167.getParameter(&proc_control_B.BusCreator.g);
      ParamGet_proc_control_168.getParameter(&proc_control_B.BusCreator.mass);
      ParamGet_proc_control_169.getParameter(&proc_control_B.BusCreator.volume);
      ParamGet_proc_control_170.getParameter
        (&proc_control_B.BusCreator.sub_height);

      // MATLABSystem: '<S47>/rg'
      ParamGet_proc_control_171.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System11' incorporates:
      //   MATLABSystem: '<S47>/rg'

      proc_control_B.obj_n0.lastValues[0] = proc_control_B.dv7[0];
      proc_control_B.obj_n0.lastValues[1] = proc_control_B.dv7[1];
      proc_control_B.obj_n0.lastValues[2] = proc_control_B.dv7[2];

      // MATLABSystem: '<S47>/rb'
      ParamGet_proc_control_173.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System12' incorporates:
      //   MATLABSystem: '<S47>/rb'

      proc_control_B.obj_jm.lastValues[0] = proc_control_B.dv7[0];
      proc_control_B.obj_jm.lastValues[1] = proc_control_B.dv7[1];
      proc_control_B.obj_jm.lastValues[2] = proc_control_B.dv7[2];

      // MATLABSystem: '<S47>/cdl'
      ParamGet_proc_control_175.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S47>/cdl'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.obj_n.lastValues[proc_control_B.Ns] =
          proc_control_B.dv7[proc_control_B.Ns];
      }

      // MATLABSystem: '<S47>/cdq'
      ParamGet_proc_control_177.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System2' incorporates:
      //   MATLABSystem: '<S47>/cdq'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.obj_li.lastValues[proc_control_B.Ns] =
          proc_control_B.dv7[proc_control_B.Ns];
      }

      // MATLABSystem: '<S47>/added mass'
      ParamGet_proc_control_180.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S47>/added mass'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.obj_d.lastValues[proc_control_B.Ns] =
          proc_control_B.dv7[proc_control_B.Ns];
      }

      // MATLABSystem: '<S47>/I'
      ParamGet_proc_control_182.getParameter(128U,
        &proc_control_B.VectorConcatenate[0], &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S47>/I'

      memcpy(&proc_control_B.obj_lw.lastValues[0],
             &proc_control_B.VectorConcatenate[0], 9U * sizeof(real_T));

      // MATLABSystem: '<S47>/depth pose'
      ParamGet_proc_control_184.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S47>/depth pose'

      proc_control_B.obj_bx.lastValues[0] = proc_control_B.dv7[0];
      proc_control_B.obj_bx.lastValues[1] = proc_control_B.dv7[1];
      proc_control_B.obj_bx.lastValues[2] = proc_control_B.dv7[2];

      // MATLABSystem: '<S47>/hydro pose'
      ParamGet_proc_control_186.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System6' incorporates:
      //   MATLABSystem: '<S47>/hydro pose'

      proc_control_B.obj_o4.lastValues[0] = proc_control_B.dv7[0];
      proc_control_B.obj_o4.lastValues[1] = proc_control_B.dv7[1];
      proc_control_B.obj_o4.lastValues[2] = proc_control_B.dv7[2];

      // MATLABSystem: '<S47>/sonar pose'
      ParamGet_proc_control_190.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/MATLAB System7' incorporates:
      //   MATLABSystem: '<S47>/sonar pose'

      proc_control_B.obj_k3.lastValues[0] = proc_control_B.dv7[0];
      proc_control_B.obj_k3.lastValues[1] = proc_control_B.dv7[1];
      proc_control_B.obj_k3.lastValues[2] = proc_control_B.dv7[2];

      // MATLABSystem: '<S47>/dvl rotation'
      ParamGet_proc_control_192.getParameter(64U, &proc_control_B.dv7[0],
        &proc_control_B.len);

      // MATLABSystem: '<S47>/thrusters'
      ParamGet_proc_control_194.getParameter(48U, &proc_control_B.a__1_j[0],
        &proc_control_B.len);

      // MATLAB Function: '<S47>/MATLAB Function' incorporates:
      //   MATLABSystem: '<S47>/thrusters'

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i
           ++) {
        proc_control_B.base_index = proc_control_B.Ns_i * 6;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.array_f[proc_control_B.Ns_i + (proc_control_B.Ns << 3)]
            = proc_control_B.a__1_j[proc_control_B.Ns +
            proc_control_B.base_index];
        }
      }

      // End of MATLAB Function: '<S47>/MATLAB Function'

      // MATLABSystem: '<S47>/dvl lost override'
      ParamGet_proc_control_196.getParameter(&proc_control_B.b_value_e);

      // BusCreator: '<S47>/Bus Creator' incorporates:
      //   DataTypeConversion: '<S47>/Data Type Conversion'
      //   MATLABSystem: '<S47>/MATLAB System1'
      //   MATLABSystem: '<S47>/MATLAB System11'
      //   MATLABSystem: '<S47>/MATLAB System12'
      //   MATLABSystem: '<S47>/MATLAB System2'
      //   MATLABSystem: '<S47>/MATLAB System3'
      //   MATLABSystem: '<S47>/MATLAB System4'
      //   MATLABSystem: '<S47>/MATLAB System5'
      //   MATLABSystem: '<S47>/MATLAB System6'
      //   MATLABSystem: '<S47>/MATLAB System7'
      //   MATLABSystem: '<S47>/MATLAB System8'
      //   MATLABSystem: '<S47>/dvl lost override'
      //   MATLABSystem: '<S47>/dvl rotation'
      //
      proc_control_B.BusCreator.rg[0] = proc_control_B.obj_n0.lastValues[0];
      proc_control_B.BusCreator.rb[0] = proc_control_B.obj_jm.lastValues[0];
      proc_control_B.BusCreator.rg[1] = proc_control_B.obj_n0.lastValues[1];
      proc_control_B.BusCreator.rb[1] = proc_control_B.obj_jm.lastValues[1];
      proc_control_B.BusCreator.rg[2] = proc_control_B.obj_n0.lastValues[2];
      proc_control_B.BusCreator.rb[2] = proc_control_B.obj_jm.lastValues[2];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.BusCreator.cdl[proc_control_B.Ns] =
          proc_control_B.obj_n.lastValues[proc_control_B.Ns];
        proc_control_B.BusCreator.cdq[proc_control_B.Ns] =
          proc_control_B.obj_li.lastValues[proc_control_B.Ns];
        proc_control_B.BusCreator.added_mass[proc_control_B.Ns] =
          proc_control_B.obj_d.lastValues[proc_control_B.Ns];
      }

      memcpy(&proc_control_B.BusCreator.I[0], &proc_control_B.obj_lw.lastValues
             [0], 9U * sizeof(real_T));
      proc_control_B.BusCreator.depth_pose[0] =
        proc_control_B.obj_bx.lastValues[0];
      proc_control_B.BusCreator.hydro_pose[0] =
        proc_control_B.obj_o4.lastValues[0];
      proc_control_B.BusCreator.sonar_pose[0] =
        proc_control_B.obj_k3.lastValues[0];
      proc_control_B.BusCreator.dvl_rotation[0] = proc_control_B.dv7[0];
      proc_control_B.BusCreator.depth_pose[1] =
        proc_control_B.obj_bx.lastValues[1];
      proc_control_B.BusCreator.hydro_pose[1] =
        proc_control_B.obj_o4.lastValues[1];
      proc_control_B.BusCreator.sonar_pose[1] =
        proc_control_B.obj_k3.lastValues[1];
      proc_control_B.BusCreator.dvl_rotation[1] = proc_control_B.dv7[1];
      proc_control_B.BusCreator.depth_pose[2] =
        proc_control_B.obj_bx.lastValues[2];
      proc_control_B.BusCreator.hydro_pose[2] =
        proc_control_B.obj_o4.lastValues[2];
      proc_control_B.BusCreator.sonar_pose[2] =
        proc_control_B.obj_k3.lastValues[2];
      proc_control_B.BusCreator.dvl_rotation[2] = proc_control_B.dv7[2];
      memcpy(&proc_control_B.BusCreator.thrusters[0], &proc_control_B.array_f[0],
             48U * sizeof(real_T));
      proc_control_B.BusCreator.dvl_lost_override = proc_control_B.b_value_e;

      // End of Outputs for SubSystem: '<S4>/Get_ROS_param'
    }

    // End of If: '<S4>/If'

    // Math: '<S181>/Transpose'
    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 6; proc_control_B.nz++) {
      proc_control_B.b_k = 0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 8; proc_control_B.i_g++)
      {
        proc_control_B.Transpose[proc_control_B.b_k + proc_control_B.nz] =
          proc_control_B.BusCreator.thrusters[proc_control_B.i_g +
          proc_control_B.Ns];
        proc_control_B.b_k += 6;
      }

      proc_control_B.Ns += 8;
    }

    // End of Math: '<S181>/Transpose'
  }

  // End of ZeroOrderHold: '<S4>/Zero-Order Hold'

  // DataTypeConversion: '<S3>/Data Type Conversion' incorporates:
  //   MATLABSystem: '<S45>/MATLAB System'
  //
  proc_control_B.n_c = floor(proc_control_DW.obj_i.m_simulation);
  if (rtIsNaN(proc_control_B.n_c) || rtIsInf(proc_control_B.n_c)) {
    proc_control_B.n_c = 0.0;
  } else {
    proc_control_B.n_c = fmod(proc_control_B.n_c, 256.0);
  }

  if (proc_control_B.n_c < 0.0) {
    proc_control_B.Ns = static_cast<uint8_T>(-static_cast<int8_T>
      (static_cast<uint8_T>(-proc_control_B.n_c)));
  } else {
    proc_control_B.Ns = static_cast<uint8_T>(proc_control_B.n_c);
  }

  // SwitchCase: '<S3>/Switch Case' incorporates:
  //   DataTypeConversion: '<S3>/Data Type Conversion'
  //   MATLABSystem: '<S27>/SourceBlock'
  //   MATLABSystem: '<S28>/SourceBlock'
  //   MATLABSystem: '<S29>/SourceBlock'
  //   MATLABSystem: '<S38>/SourceBlock'
  //   MATLABSystem: '<S39>/SourceBlock'
  //   MATLABSystem: '<S40>/SourceBlock'
  //
  if (proc_control_B.Ns == 1) {
    // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
    //   ActionPort: '<S26>/Action Port'

    // MATLABSystem: '<S38>/SourceBlock'
    proc_control_B.b_value_e = Sub_proc_control_209_83.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_n_m);

    // Outputs for Enabled SubSystem: '<S38>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S41>/Enable'

    if (proc_control_B.b_value_e) {
      // SignalConversion generated from: '<S41>/In1'
      proc_control_B.In1_g = proc_control_B.rtb_SourceBlock_o2_n_m;
    }

    // End of Outputs for SubSystem: '<S38>/Enabled Subsystem'

    // SignalConversion generated from: '<S183>/ SFunction ' incorporates:
    //   MATLAB Function: '<S176>/MATLAB Function'
    //   MATLABSystem: '<S38>/SourceBlock'
    //   SignalConversion generated from: '<S26>/imu data'
    //
    proc_control_B.n[1] = proc_control_B.In1_g.orientation.x;
    proc_control_B.n[2] = proc_control_B.In1_g.orientation.y;
    proc_control_B.n[3] = proc_control_B.In1_g.orientation.z;

    // SignalConversion generated from: '<S26>/imu data' incorporates:
    //   Merge: '<S3>/Merge'

    proc_control_B.t = proc_control_B.In1_g.orientation.w;
    proc_control_B.i = proc_control_B.In1_g.angular_velocity.x;
    proc_control_B.linearScaling = proc_control_B.In1_g.angular_velocity.y;
    proc_control_B.residue = proc_control_B.In1_g.angular_velocity.z;

    // MATLABSystem: '<S39>/SourceBlock'
    proc_control_B.NewDvlMsg = Sub_proc_control_209_84.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_p_n);

    // Outputs for Enabled SubSystem: '<S39>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S42>/Enable'

    if (proc_control_B.NewDvlMsg) {
      // SignalConversion generated from: '<S42>/In1'
      proc_control_B.In1_iq = proc_control_B.rtb_SourceBlock_o2_p_n;
    }

    // End of Outputs for SubSystem: '<S39>/Enabled Subsystem'

    // SignalConversion generated from: '<S26>/dvl data' incorporates:
    //   MATLABSystem: '<S39>/SourceBlock'
    //   Merge: '<S3>/Merge1'
    //
    proc_control_B.oc = proc_control_B.In1_iq.x_vel_btm;
    proc_control_B.t10 = proc_control_B.In1_iq.y_vel_btm;
    proc_control_B.t11 = proc_control_B.In1_iq.z_vel_btm;
    proc_control_B.t13 = proc_control_B.In1_iq.velocity1;
    proc_control_B.t19 = proc_control_B.In1_iq.velocity2;
    proc_control_B.t20 = proc_control_B.In1_iq.velocity3;
    proc_control_B.t24 = proc_control_B.In1_iq.velocity4;

    // MATLABSystem: '<S40>/SourceBlock'
    proc_control_B.newPressureMsg = Sub_proc_control_209_85.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_pk_n);

    // Outputs for Enabled SubSystem: '<S40>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S43>/Enable'

    if (proc_control_B.newPressureMsg) {
      // SignalConversion generated from: '<S43>/In1'
      proc_control_B.In1_hb = proc_control_B.rtb_SourceBlock_o2_pk_n;
    }

    // End of Outputs for SubSystem: '<S40>/Enabled Subsystem'

    // SignalConversion generated from: '<S26>/depth data' incorporates:
    //   MATLABSystem: '<S40>/SourceBlock'
    //   Merge: '<S3>/Merge2'
    //
    proc_control_B.rtb_Merge2_data = proc_control_B.In1_hb.data;

    // End of Outputs for SubSystem: '<S3>/Simulation'
  } else {
    // Outputs for IfAction SubSystem: '<S3>/AUV' incorporates:
    //   ActionPort: '<S24>/Action Port'

    // MATLABSystem: '<S27>/SourceBlock'
    proc_control_B.b_value_e = Sub_proc_control_209_4.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_n_m);

    // Outputs for Enabled SubSystem: '<S27>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S30>/Enable'

    if (proc_control_B.b_value_e) {
      // SignalConversion generated from: '<S30>/In1'
      proc_control_B.In1_e = proc_control_B.rtb_SourceBlock_o2_n_m;
    }

    // End of Outputs for SubSystem: '<S27>/Enabled Subsystem'

    // SignalConversion generated from: '<S183>/ SFunction ' incorporates:
    //   MATLAB Function: '<S176>/MATLAB Function'
    //   MATLABSystem: '<S27>/SourceBlock'
    //   SignalConversion generated from: '<S24>/imu data'
    //
    proc_control_B.n[1] = proc_control_B.In1_e.orientation.x;
    proc_control_B.n[2] = proc_control_B.In1_e.orientation.y;
    proc_control_B.n[3] = proc_control_B.In1_e.orientation.z;

    // SignalConversion generated from: '<S24>/imu data' incorporates:
    //   Merge: '<S3>/Merge'

    proc_control_B.t = proc_control_B.In1_e.orientation.w;
    proc_control_B.i = proc_control_B.In1_e.angular_velocity.x;
    proc_control_B.linearScaling = proc_control_B.In1_e.angular_velocity.y;
    proc_control_B.residue = proc_control_B.In1_e.angular_velocity.z;

    // MATLABSystem: '<S28>/SourceBlock'
    proc_control_B.NewDvlMsg = Sub_proc_control_209_5.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_p_n);

    // Outputs for Enabled SubSystem: '<S28>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S31>/Enable'

    if (proc_control_B.NewDvlMsg) {
      // SignalConversion generated from: '<S31>/In1'
      proc_control_B.In1_m = proc_control_B.rtb_SourceBlock_o2_p_n;
    }

    // End of Outputs for SubSystem: '<S28>/Enabled Subsystem'

    // SignalConversion generated from: '<S24>/dvl data' incorporates:
    //   MATLABSystem: '<S28>/SourceBlock'
    //   Merge: '<S3>/Merge1'
    //
    proc_control_B.oc = proc_control_B.In1_m.x_vel_btm;
    proc_control_B.t10 = proc_control_B.In1_m.y_vel_btm;
    proc_control_B.t11 = proc_control_B.In1_m.z_vel_btm;
    proc_control_B.t13 = proc_control_B.In1_m.velocity1;
    proc_control_B.t19 = proc_control_B.In1_m.velocity2;
    proc_control_B.t20 = proc_control_B.In1_m.velocity3;
    proc_control_B.t24 = proc_control_B.In1_m.velocity4;

    // MATLABSystem: '<S29>/SourceBlock'
    proc_control_B.newPressureMsg = Sub_proc_control_209_6.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_pk_n);

    // Outputs for Enabled SubSystem: '<S29>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S32>/Enable'

    if (proc_control_B.newPressureMsg) {
      // SignalConversion generated from: '<S32>/In1'
      proc_control_B.In1_b = proc_control_B.rtb_SourceBlock_o2_pk_n;
    }

    // End of Outputs for SubSystem: '<S29>/Enabled Subsystem'

    // SignalConversion generated from: '<S24>/depth data' incorporates:
    //   MATLABSystem: '<S29>/SourceBlock'
    //   Merge: '<S3>/Merge2'
    //
    proc_control_B.rtb_Merge2_data = proc_control_B.In1_b.data;

    // End of Outputs for SubSystem: '<S3>/AUV'
  }

  // End of SwitchCase: '<S3>/Switch Case'

  // SignalConversion generated from: '<S183>/ SFunction ' incorporates:
  //   MATLAB Function: '<S176>/MATLAB Function'
  //   Merge: '<S3>/Merge'

  proc_control_B.n[0] = proc_control_B.t;

  // MATLAB Function: '<S176>/MATLAB Function' incorporates:
  //   Merge: '<S3>/Merge'
  //   SignalConversion generated from: '<S183>/ SFunction '

  proc_control_B.scale = 3.3121686421112381E-170;
  proc_control_B.absxk = fabs(proc_control_B.t);
  if (proc_control_B.absxk > 3.3121686421112381E-170) {
    proc_control_B.d_oi = 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
    proc_control_B.d_oi = proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = fabs(proc_control_B.n[1]);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d_oi = proc_control_B.d_oi * proc_control_B.t *
      proc_control_B.t + 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d_oi += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = fabs(proc_control_B.n[2]);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d_oi = proc_control_B.d_oi * proc_control_B.t *
      proc_control_B.t + 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d_oi += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = fabs(proc_control_B.n[3]);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d_oi = proc_control_B.d_oi * proc_control_B.t *
      proc_control_B.t + 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d_oi += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.d_oi = proc_control_B.scale * sqrt(proc_control_B.d_oi);
  proc_control_B.n_c = proc_control_B.n[0] / proc_control_B.d_oi;
  proc_control_B.n[0] = proc_control_B.n_c;
  proc_control_B.b_l[0] = rtIsNaN(proc_control_B.n_c);
  proc_control_B.n_c = proc_control_B.n[1] / proc_control_B.d_oi;
  proc_control_B.n[1] = proc_control_B.n_c;
  proc_control_B.b_l[1] = rtIsNaN(proc_control_B.n_c);
  proc_control_B.n_c = proc_control_B.n[2] / proc_control_B.d_oi;
  proc_control_B.n[2] = proc_control_B.n_c;
  proc_control_B.b_l[2] = rtIsNaN(proc_control_B.n_c);
  proc_control_B.n_c = proc_control_B.n[3] / proc_control_B.d_oi;
  proc_control_B.n[3] = proc_control_B.n_c;
  proc_control_B.b_l[3] = rtIsNaN(proc_control_B.n_c);
  proc_control_B.Reset = true;
  proc_control_B.b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_k < 4)) {
    if (!proc_control_B.b_l[proc_control_B.b_k]) {
      proc_control_B.Reset = false;
      exitg1 = true;
    } else {
      proc_control_B.b_k++;
    }
  }

  if (proc_control_B.Reset) {
    proc_control_B.n[0] = 1.0;
    proc_control_B.n[1] = 0.0;
    proc_control_B.n[2] = 0.0;
    proc_control_B.n[3] = 0.0;
  }

  // Sum: '<S189>/Sum' incorporates:
  //   Product: '<S189>/Product'
  //   Product: '<S189>/Product1'
  //   Product: '<S189>/Product2'
  //   Product: '<S189>/Product3'
  //   UnaryMinus: '<S184>/Unary Minus'
  //   UnaryMinus: '<S184>/Unary Minus1'
  //   UnaryMinus: '<S184>/Unary Minus2'

  tmp_2 = _mm_set1_pd(((proc_control_B.n[0] * proc_control_B.n[0] +
                        -proc_control_B.n[1] * -proc_control_B.n[1]) +
                       -proc_control_B.n[2] * -proc_control_B.n[2]) +
                      -proc_control_B.n[3] * -proc_control_B.n[3]);

  // Product: '<S185>/Divide'
  tmp_1 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.n[0]), tmp_2);
  _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);

  // Product: '<S185>/Divide'
  proc_control_B.d_oi = proc_control_B.dv25[0];

  // Product: '<S185>/Divide1'
  proc_control_B.scale = proc_control_B.dv25[1];

  // UnaryMinus: '<S184>/Unary Minus1'
  tmp_2 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.n[2]), tmp_2);
  _mm_storeu_pd(&proc_control_B.dv25[0], tmp_2);

  // Outputs for Enabled SubSystem: '<S6>/DVL Measurements' incorporates:
  //   EnablePort: '<S177>/Enable'

  if (proc_control_B.NewDvlMsg) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Enabled SubSystem: '<S202>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S205>/Enable'

      // Delay: '<S202>/Delay'
      if (proc_control_DW.Delay_DSTATE_i > 0.0) {
        // Gain: '<S206>/1//2' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.n_c = proc_control_P.u2_Gain *
          proc_control_B.BusCreator.dvl_rotation[0];

        // Trigonometry: '<S206>/sincos'
        proc_control_B.rtb_sincos_o2_idx_0 = cos(proc_control_B.n_c);
        proc_control_B.t57 = sin(proc_control_B.n_c);

        // Gain: '<S206>/1//2' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.n_c = proc_control_P.u2_Gain *
          proc_control_B.BusCreator.dvl_rotation[1];

        // Trigonometry: '<S206>/sincos'
        proc_control_B.rtb_sincos_o2_idx_1 = cos(proc_control_B.n_c);
        proc_control_B.t39 = sin(proc_control_B.n_c);

        // Gain: '<S206>/1//2' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.n_c = proc_control_P.u2_Gain *
          proc_control_B.BusCreator.dvl_rotation[2];

        // Trigonometry: '<S206>/sincos'
        proc_control_B.rtb_sincos_o2_idx_2 = cos(proc_control_B.n_c);
        proc_control_B.n_c = sin(proc_control_B.n_c);

        // Fcn: '<S206>/q0' incorporates:
        //   Fcn: '<S206>/q3'
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.q0_tmp = proc_control_B.rtb_sincos_o2_idx_0 *
          proc_control_B.rtb_sincos_o2_idx_1;
        proc_control_B.Product3_l = proc_control_B.t57 * proc_control_B.t39;

        // Fcn: '<S206>/q0' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.q0 = proc_control_B.q0_tmp *
          proc_control_B.rtb_sincos_o2_idx_2 - proc_control_B.Product3_l *
          proc_control_B.n_c;

        // Fcn: '<S206>/q1' incorporates:
        //   Fcn: '<S206>/q2'
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.rtb_sincos_o2_idx_0 *= proc_control_B.t39;
        proc_control_B.t57 *= proc_control_B.rtb_sincos_o2_idx_1;

        // Fcn: '<S206>/q1' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.q1 = proc_control_B.rtb_sincos_o2_idx_0 *
          proc_control_B.n_c + proc_control_B.t57 *
          proc_control_B.rtb_sincos_o2_idx_2;

        // Fcn: '<S206>/q2' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.q2 = proc_control_B.rtb_sincos_o2_idx_0 *
          proc_control_B.rtb_sincos_o2_idx_2 - proc_control_B.t57 *
          proc_control_B.n_c;

        // Fcn: '<S206>/q3' incorporates:
        //   Trigonometry: '<S206>/sincos'

        proc_control_B.q3 = proc_control_B.q0_tmp * proc_control_B.n_c +
          proc_control_B.Product3_l * proc_control_B.rtb_sincos_o2_idx_2;
      }

      // End of Delay: '<S202>/Delay'
      // End of Outputs for SubSystem: '<S202>/Enabled Subsystem'
    }

    // SignalConversion generated from: '<S203>/ SFunction ' incorporates:
    //   MATLAB Function: '<S177>/MATLAB Function'
    //   Merge: '<S3>/Merge1'

    proc_control_B.TmpSignalConversionAtSFunct[0] = proc_control_B.oc;

    // MATLAB Function: '<S177>/MATLAB Function' incorporates:
    //   Constant: '<S177>/Constant'
    //   Merge: '<S3>/Merge1'
    //   SignalConversion generated from: '<S203>/ SFunction '

    proc_control_B.sincos_o1[0] = fabs(proc_control_B.oc);
    proc_control_B.sincos_o1[1] = fabs(proc_control_B.t10);
    proc_control_B.sincos_o1[2] = fabs(proc_control_B.t11);
    if (!rtIsNaN(proc_control_B.sincos_o1[0])) {
      proc_control_B.base_index = 1;
    } else {
      proc_control_B.base_index = 0;
      proc_control_B.b_k = 2;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k <= 3)) {
        if (!rtIsNaN(proc_control_B.sincos_o1[proc_control_B.b_k - 1])) {
          proc_control_B.base_index = proc_control_B.b_k;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }
    }

    if (proc_control_B.base_index == 0) {
      proc_control_B.oc = proc_control_B.sincos_o1[0];
    } else {
      proc_control_B.oc = proc_control_B.sincos_o1[proc_control_B.base_index - 1];
      for (proc_control_B.nz = proc_control_B.base_index + 1; proc_control_B.nz <
           4; proc_control_B.nz++) {
        proc_control_B.n_c = proc_control_B.sincos_o1[proc_control_B.nz - 1];
        if (proc_control_B.oc < proc_control_B.n_c) {
          proc_control_B.oc = proc_control_B.n_c;
        }
      }
    }

    if (proc_control_B.oc < proc_control_P.Constant_Value_iv) {
      proc_control_B.sincos_o1[0] = proc_control_B.TmpSignalConversionAtSFunct[0];
      proc_control_B.sincos_o1[1] = proc_control_B.t10;
      proc_control_B.sincos_o1[2] = proc_control_B.t11;
      proc_control_B.enable_i = 1.0;
    } else {
      proc_control_B.TmpSignalConversionAtSFunct[0] = fabs(proc_control_B.t13);
      proc_control_B.TmpSignalConversionAtSFunct[1] = fabs(proc_control_B.t19);
      proc_control_B.TmpSignalConversionAtSFunct[2] = fabs(proc_control_B.t20);
      proc_control_B.TmpSignalConversionAtSFunct[3] = fabs(proc_control_B.t24);
      if (!rtIsNaN(proc_control_B.TmpSignalConversionAtSFunct[0])) {
        proc_control_B.base_index = 1;
      } else {
        proc_control_B.base_index = 0;
        proc_control_B.nz = 2;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.nz <= 4)) {
          if (!rtIsNaN
              (proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.nz - 1]))
          {
            proc_control_B.base_index = proc_control_B.nz;
            exitg1 = true;
          } else {
            proc_control_B.nz++;
          }
        }
      }

      if (proc_control_B.base_index == 0) {
        proc_control_B.oc = proc_control_B.TmpSignalConversionAtSFunct[0];
      } else {
        proc_control_B.oc =
          proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.base_index -
          1];
        for (proc_control_B.nz = proc_control_B.base_index + 1;
             proc_control_B.nz < 5; proc_control_B.nz++) {
          proc_control_B.t10 =
            proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.nz - 1];
          if (proc_control_B.oc < proc_control_B.t10) {
            proc_control_B.oc = proc_control_B.t10;
          }
        }
      }

      if (proc_control_B.oc < proc_control_P.Constant_Value_iv) {
        proc_control_B.sincos_o1[0] = proc_control_B.t13;
        proc_control_B.sincos_o1[1] = proc_control_B.t19;
        proc_control_B.sincos_o1[2] = proc_control_B.t20;
        proc_control_B.enable_i = 0.0;
      } else {
        proc_control_B.sincos_o1[0] = 0.0;
        proc_control_B.sincos_o1[1] = 0.0;
        proc_control_B.sincos_o1[2] = 0.0;
        proc_control_B.enable_i = 0.0;
      }
    }

    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Sqrt: '<S211>/sqrt' incorporates:
      //   Product: '<S212>/Product'
      //   Product: '<S212>/Product1'
      //   Product: '<S212>/Product2'
      //   Product: '<S212>/Product3'
      //   Sum: '<S212>/Sum'

      proc_control_B.Product3_h = sqrt(((proc_control_B.q0 * proc_control_B.q0 +
        proc_control_B.q1 * proc_control_B.q1) + proc_control_B.q2 *
        proc_control_B.q2) + proc_control_B.q3 * proc_control_B.q3);

      // Product: '<S207>/Product'
      proc_control_B.Product_o = proc_control_B.q0 / proc_control_B.Product3_h;

      // Product: '<S207>/Product1'
      proc_control_B.Product1_hg = proc_control_B.q1 / proc_control_B.Product3_h;

      // Product: '<S207>/Product2'
      proc_control_B.Product2_j = proc_control_B.q2 / proc_control_B.Product3_h;

      // Product: '<S207>/Product3'
      proc_control_B.Product3_h = proc_control_B.q3 / proc_control_B.Product3_h;

      // Product: '<S208>/Product' incorporates:
      //   Product: '<S209>/Product'

      proc_control_B.n_c = proc_control_B.Product1_hg *
        proc_control_B.Product2_j;

      // Product: '<S208>/Product1' incorporates:
      //   Product: '<S209>/Product1'

      proc_control_B.t10 = proc_control_B.Product_o * proc_control_B.Product3_h;

      // Gain: '<S208>/Gain' incorporates:
      //   Product: '<S208>/Product'
      //   Product: '<S208>/Product1'
      //   Sum: '<S208>/Sum1'

      proc_control_B.Gain_l = (proc_control_B.n_c + proc_control_B.t10) *
        proc_control_P.Gain_Gain;

      // Gain: '<S208>/Gain1' incorporates:
      //   Product: '<S208>/Product2'
      //   Product: '<S208>/Product3'
      //   Sum: '<S208>/Sum2'

      proc_control_B.Gain1 = (proc_control_B.Product1_hg *
        proc_control_B.Product3_h - proc_control_B.Product_o *
        proc_control_B.Product2_j) * proc_control_P.Gain1_Gain;

      // Product: '<S208>/Product7' incorporates:
      //   Product: '<S209>/Product7'

      proc_control_B.Product3_l = proc_control_B.Product3_h *
        proc_control_B.Product3_h;

      // Gain: '<S208>/Gain2' incorporates:
      //   Constant: '<S208>/Constant'
      //   Product: '<S208>/Product6'
      //   Product: '<S208>/Product7'
      //   Sum: '<S208>/Sum3'

      proc_control_B.Gain2 = ((proc_control_P.Constant_Value_or -
        proc_control_B.Product2_j * proc_control_B.Product2_j) -
        proc_control_B.Product3_l) * proc_control_P.Gain2_Gain;

      // Gain: '<S209>/Gain' incorporates:
      //   Sum: '<S209>/Sum1'

      proc_control_B.Gain_o = (proc_control_B.n_c - proc_control_B.t10) *
        proc_control_P.Gain_Gain_g;

      // Gain: '<S209>/Gain1' incorporates:
      //   Product: '<S209>/Product2'
      //   Product: '<S209>/Product3'
      //   Sum: '<S209>/Sum2'

      proc_control_B.Gain1_d = (proc_control_B.Product_o *
        proc_control_B.Product1_hg + proc_control_B.Product2_j *
        proc_control_B.Product3_h) * proc_control_P.Gain1_Gain_j;

      // Gain: '<S209>/Gain2' incorporates:
      //   Constant: '<S209>/Constant'
      //   Product: '<S209>/Product6'
      //   Sum: '<S209>/Sum3'

      proc_control_B.Gain2_l = ((proc_control_P.Constant_Value_m -
        proc_control_B.Product1_hg * proc_control_B.Product1_hg) -
        proc_control_B.Product3_l) * proc_control_P.Gain2_Gain_j;
    }

    // Sum: '<S208>/Sum' incorporates:
    //   Product: '<S208>/Product4'
    //   Product: '<S208>/Product5'
    //   Product: '<S208>/Product8'

    proc_control_B.Sum = (proc_control_B.sincos_o1[0] * proc_control_B.Gain2 +
                          proc_control_B.Gain_l * proc_control_B.sincos_o1[1]) +
      proc_control_B.Gain1 * proc_control_B.sincos_o1[2];

    // Sum: '<S209>/Sum' incorporates:
    //   Product: '<S209>/Product4'
    //   Product: '<S209>/Product5'
    //   Product: '<S209>/Product8'

    proc_control_B.Sum_n = (proc_control_B.sincos_o1[0] * proc_control_B.Gain_o
      + proc_control_B.Gain2_l * proc_control_B.sincos_o1[1]) +
      proc_control_B.Gain1_d * proc_control_B.sincos_o1[2];
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Gain: '<S210>/Gain' incorporates:
      //   Product: '<S210>/Product'
      //   Product: '<S210>/Product1'
      //   Sum: '<S210>/Sum1'

      proc_control_B.Gain_d = (proc_control_B.Product1_hg *
        proc_control_B.Product3_h + proc_control_B.Product_o *
        proc_control_B.Product2_j) * proc_control_P.Gain_Gain_e;

      // Gain: '<S210>/Gain1' incorporates:
      //   Product: '<S210>/Product2'
      //   Product: '<S210>/Product3'
      //   Sum: '<S210>/Sum2'

      proc_control_B.Gain1_e = (proc_control_B.Product2_j *
        proc_control_B.Product3_h - proc_control_B.Product_o *
        proc_control_B.Product1_hg) * proc_control_P.Gain1_Gain_e;

      // Gain: '<S210>/Gain2' incorporates:
      //   Constant: '<S210>/Constant'
      //   Product: '<S210>/Product6'
      //   Product: '<S210>/Product7'
      //   Sum: '<S210>/Sum3'

      proc_control_B.Gain2_n = ((proc_control_P.Constant_Value_j5 -
        proc_control_B.Product1_hg * proc_control_B.Product1_hg) -
        proc_control_B.Product2_j * proc_control_B.Product2_j) *
        proc_control_P.Gain2_Gain_h;

      // Update for Delay: '<S202>/Delay' incorporates:
      //   Constant: '<S202>/Constant'

      proc_control_DW.Delay_DSTATE_i = proc_control_P.Constant_Value_ll;
    }

    // Sum: '<S210>/Sum' incorporates:
    //   Product: '<S210>/Product4'
    //   Product: '<S210>/Product5'
    //   Product: '<S210>/Product8'

    proc_control_B.Sum_l = (proc_control_B.sincos_o1[0] * proc_control_B.Gain_d
      + proc_control_B.Gain1_e * proc_control_B.sincos_o1[1]) +
      proc_control_B.Gain2_n * proc_control_B.sincos_o1[2];
  }

  // End of Outputs for SubSystem: '<S6>/DVL Measurements'

  // Outputs for Enabled SubSystem: '<S6>/Depth Measurements' incorporates:
  //   EnablePort: '<S178>/Enable'

  if (proc_control_B.newPressureMsg) {
    // Sqrt: '<S219>/sqrt' incorporates:
    //   Product: '<S220>/Product'
    //   Product: '<S220>/Product1'
    //   Product: '<S220>/Product2'
    //   Product: '<S220>/Product3'
    //   Sum: '<S220>/Sum'

    proc_control_B.Product3_h = sqrt(((proc_control_B.d_oi * proc_control_B.d_oi
      + proc_control_B.scale * proc_control_B.scale) + proc_control_B.dv25[0] *
      proc_control_B.dv25[0]) + proc_control_B.dv25[1] * proc_control_B.dv25[1]);

    // Product: '<S215>/Product'
    proc_control_B.Product_o = proc_control_B.d_oi / proc_control_B.Product3_h;

    // Product: '<S215>/Product1'
    proc_control_B.Product1_hg = proc_control_B.scale /
      proc_control_B.Product3_h;

    // Product: '<S215>/Product2'
    proc_control_B.Product3_l = proc_control_B.dv25[0] /
      proc_control_B.Product3_h;

    // Product: '<S215>/Product3'
    proc_control_B.Product3_h = proc_control_B.dv25[1] /
      proc_control_B.Product3_h;

    // Sum: '<S178>/Sum' incorporates:
    //   Constant: '<S218>/Constant'
    //   Gain: '<S218>/Gain'
    //   Gain: '<S218>/Gain1'
    //   Gain: '<S218>/Gain2'
    //   Merge: '<S3>/Merge2'
    //   Product: '<S218>/Product'
    //   Product: '<S218>/Product1'
    //   Product: '<S218>/Product2'
    //   Product: '<S218>/Product3'
    //   Product: '<S218>/Product4'
    //   Product: '<S218>/Product5'
    //   Product: '<S218>/Product6'
    //   Product: '<S218>/Product7'
    //   Product: '<S218>/Product8'
    //   Sum: '<S218>/Sum'
    //   Sum: '<S218>/Sum1'
    //   Sum: '<S218>/Sum2'
    //   Sum: '<S218>/Sum3'

    proc_control_B.zposition = proc_control_B.rtb_Merge2_data -
      (((proc_control_B.Product1_hg * proc_control_B.Product3_h +
         proc_control_B.Product_o * proc_control_B.Product3_l) *
        proc_control_P.Gain_Gain_c * proc_control_B.BusCreator.depth_pose[0] +
        (proc_control_B.Product3_l * proc_control_B.Product3_h -
         proc_control_B.Product_o * proc_control_B.Product1_hg) *
        proc_control_P.Gain1_Gain_p * proc_control_B.BusCreator.depth_pose[1]) +
       ((proc_control_P.Constant_Value_b - proc_control_B.Product1_hg *
         proc_control_B.Product1_hg) - proc_control_B.Product3_l *
        proc_control_B.Product3_l) * proc_control_P.Gain2_Gain_e *
       proc_control_B.BusCreator.depth_pose[2]);
  }

  // End of Outputs for SubSystem: '<S6>/Depth Measurements'

  // Outputs for Enabled SubSystem: '<S3>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S25>/Enable'

  // Logic: '<S3>/NOT' incorporates:
  //   Delay: '<S3>/Delay'

  if (!(proc_control_DW.Delay_DSTATE_m != 0.0)) {
    // Switch: '<S36>/Reset' incorporates:
    //   Constant: '<S25>/Constant'
    //   Constant: '<S36>/Initial Condition'
    //   Memory: '<S36>/Memory'
    //   MinMax: '<S34>/MinMax'

    if (proc_control_P.Constant_Value_a != 0.0) {
      proc_control_B.Reset = proc_control_P.MinMaxRunningResettable_vinit;
    } else {
      proc_control_B.Reset = (proc_control_B.NewDvlMsg ||
        proc_control_DW.Memory_PreviousInput_e);
    }

    // End of Switch: '<S36>/Reset'

    // Switch: '<S37>/Reset' incorporates:
    //   Constant: '<S25>/Constant1'
    //   Constant: '<S37>/Initial Condition'
    //   Memory: '<S37>/Memory'
    //   MinMax: '<S35>/MinMax'

    if (proc_control_P.Constant1_Value_i != 0.0) {
      proc_control_B.b_value_e = proc_control_P.MinMaxRunningResettable1_vinit;
    } else {
      proc_control_B.b_value_e = (proc_control_B.b_value_e ||
        proc_control_DW.Memory_PreviousInput_n);
    }

    // End of Switch: '<S37>/Reset'

    // MATLAB Function: '<S25>/MATLAB Function'
    proc_control_B.y = (proc_control_B.Reset + proc_control_B.b_value_e >= 2);

    // Update for Memory: '<S36>/Memory'
    proc_control_DW.Memory_PreviousInput_e = proc_control_B.Reset;

    // Update for Memory: '<S37>/Memory'
    proc_control_DW.Memory_PreviousInput_n = proc_control_B.b_value_e;
  }

  // End of Logic: '<S3>/NOT'
  // End of Outputs for SubSystem: '<S3>/Enabled Subsystem'

  // Outputs for Enabled SubSystem: '<Root>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S1>/Enable'

  // Outputs for Enabled SubSystem: '<S6>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S179>/Enable'

  // Logic: '<S180>/AND' incorporates:
  //   Constant: '<S221>/Enable1'
  //   Constant: '<S221>/Enable3'
  //   DataStoreRead: '<S222>/Data Store ReadX'
  //   DataStoreRead: '<S223>/Data Store ReadX'
  //   DataTypeConversion: '<S221>/DataTypeConversion_Enable2'
  //   Logic: '<S180>/NOT'
  //   MATLABSystem: '<S222>/MATLAB System'
  //   MATLABSystem: '<S223>/MATLAB System'
  //   MATLABSystem: '<S45>/MATLAB System'
  //   SignalConversion generated from: '<S223>/MATLAB System'
  //   Switch: '<S179>/Switch'
  //
  if ((!(proc_control_DW.obj_i.m_reset != 0.0)) && (proc_control_B.y != 0.0)) {
    // DataTypeConversion: '<S221>/DataTypeConversion_uState' incorporates:
    //   Delay: '<S181>/Delay'

    proc_control_B.DataTypeConversion_uState[0] = proc_control_B.Probe_o1;
    memcpy(&proc_control_B.DataTypeConversion_uState[1],
           &proc_control_DW.Delay_DSTATE[0], sizeof(real_T) << 3U);
    proc_control_B.DataTypeConversion_uState[9] = proc_control_B.BusCreator.mass;
    proc_control_B.DataTypeConversion_uState[10] =
      proc_control_B.BusCreator.volume;
    proc_control_B.DataTypeConversion_uState[11] =
      proc_control_B.BusCreator.sub_height;
    memcpy(&proc_control_B.DataTypeConversion_uState[12],
           &proc_control_B.BusCreator.I[0], 9U * sizeof(real_T));
    proc_control_B.DataTypeConversion_uState[21] = proc_control_B.BusCreator.rg
      [0];
    proc_control_B.DataTypeConversion_uState[24] = proc_control_B.BusCreator.rb
      [0];
    proc_control_B.DataTypeConversion_uState[22] = proc_control_B.BusCreator.rg
      [1];
    proc_control_B.DataTypeConversion_uState[25] = proc_control_B.BusCreator.rb
      [1];
    proc_control_B.DataTypeConversion_uState[23] = proc_control_B.BusCreator.rg
      [2];
    proc_control_B.DataTypeConversion_uState[26] = proc_control_B.BusCreator.rb
      [2];
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 6; proc_control_B.Ns_i++)
    {
      proc_control_B.DataTypeConversion_uState[proc_control_B.Ns_i + 27] =
        proc_control_B.BusCreator.cdl[proc_control_B.Ns_i];
      proc_control_B.DataTypeConversion_uState[proc_control_B.Ns_i + 33] =
        proc_control_B.BusCreator.cdq[proc_control_B.Ns_i];
      proc_control_B.DataTypeConversion_uState[proc_control_B.Ns_i + 39] =
        proc_control_B.BusCreator.added_mass[proc_control_B.Ns_i];
    }

    proc_control_B.DataTypeConversion_uState[45] = proc_control_B.BusCreator.rho;
    proc_control_B.DataTypeConversion_uState[46] = proc_control_B.BusCreator.g;
    memcpy(&proc_control_B.DataTypeConversion_uState[47],
           &proc_control_B.Transpose[0], 48U * sizeof(real_T));

    // End of DataTypeConversion: '<S221>/DataTypeConversion_uState'

    // Outputs for Enabled SubSystem: '<S221>/Correct1' incorporates:
    //   EnablePort: '<S222>/Enable'

    if (proc_control_P.Enable1_Value) {
      // MATLABSystem: '<S222>/MATLAB System' incorporates:
      //   Constant: '<S221>/BlockOrdering'

      proc_control_B.MATLABSystem_o3_k = proc_control_P.BlockOrdering_Value;

      // MATLABSystem: '<S222>/MATLAB System' incorporates:
      //   DataStoreRead: '<S222>/Data Store ReadX'

      // EKFNAVMESUREDF Summary of this function goes here
      //    Detailed explanation goes here
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        memcpy(&proc_control_B.imvec[0], &proc_control_DW.x[0], 13U * sizeof
               (real_T));

        // Start for MATLABSystem: '<S222>/MATLAB System' incorporates:
        //   DataStoreRead: '<S222>/Data Store ReadX'

        proc_control_B.Product3_h = 1.4901161193847656E-8 * fabs
          (proc_control_DW.x[proc_control_B.b_j]);
        if ((proc_control_B.Product3_h <= 1.4901161193847656E-8) || rtIsNaN
            (proc_control_B.Product3_h)) {
          proc_control_B.Product3_h = 1.4901161193847656E-8;
        }

        proc_control_B.imvec[proc_control_B.b_j] =
          proc_control_DW.x[proc_control_B.b_j] + proc_control_B.Product3_h;

        // EKFNAVMESUREDF Summary of this function goes here
        //    Detailed explanation goes here
        for (proc_control_B.Ns = 0; proc_control_B.Ns <= 4; proc_control_B.Ns +=
             2) {
          proc_control_B.nz = tmp_4[proc_control_B.Ns + 1];
          _mm_storeu_pd(&proc_control_B.b_dHdx[proc_control_B.Ns + 7 *
                        proc_control_B.b_j], _mm_div_pd(_mm_sub_pd(_mm_set_pd
            (proc_control_B.imvec[proc_control_B.nz],
             proc_control_B.imvec[tmp_4[proc_control_B.Ns]]), _mm_set_pd
            (proc_control_DW.x[proc_control_B.nz],
             proc_control_DW.x[tmp_4[proc_control_B.Ns]])), _mm_set1_pd
            (proc_control_B.Product3_h)));
        }

        for (proc_control_B.Ns = 6; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_B.b_dHdx[proc_control_B.Ns + 7 * proc_control_B.b_j] =
            (proc_control_B.imvec[tmp_4[proc_control_B.Ns]] -
             proc_control_DW.x[tmp_4[proc_control_B.Ns]]) /
            proc_control_B.Product3_h;
        }
      }

      // EKFNAVMESUREDF Summary of this function goes here
      //    Detailed explanation goes here
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 7; proc_control_B.b_j++)
      {
        // Start for MATLABSystem: '<S222>/MATLAB System' incorporates:
        //   Constant: '<S221>/R1'
        //   DataStoreRead: '<S222>/Data Store ReadP'
        //
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
             proc_control_B.Ns_i++) {
          proc_control_B.base_index = proc_control_B.Ns_i * 13 - 1;
          proc_control_B.Product3_h = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_h += proc_control_DW.P
              [(proc_control_B.base_index + proc_control_B.b_k) + 1] *
              proc_control_B.b_dHdx[proc_control_B.b_k * 7 + proc_control_B.b_j];
          }

          proc_control_B.K[proc_control_B.Ns_i + 20 * proc_control_B.b_j] =
            proc_control_B.Product3_h;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_B.K[(proc_control_B.Ns + 20 * proc_control_B.b_j) + 13] =
            proc_control_P.R1_Value[7 * proc_control_B.Ns + proc_control_B.b_j];
        }
      }

      proc_control_qr(proc_control_B.K, proc_control_B.a__1_af,
                      proc_control_B.R_m);
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 7; proc_control_B.i_g
             ++) {
          proc_control_B.Sy[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.R_m[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 7;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S222>/MATLAB System' incorporates:
        //   DataStoreRead: '<S222>/Data Store ReadP'

        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.n_c = 0.0;
          proc_control_B.i_g = 0;
          for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
               proc_control_B.base_index++) {
            proc_control_B.n_c += proc_control_DW.P[proc_control_B.i_g +
              proc_control_B.Ns] * proc_control_DW.P[proc_control_B.i_g +
              proc_control_B.b_k];
            proc_control_B.i_g += 13;
          }

          proc_control_B.A_h[proc_control_B.nz + proc_control_B.Ns] =
            proc_control_B.n_c;
          proc_control_B.nz += 13;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S222>/MATLAB System'
        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.t10 = 0.0;
          proc_control_B.i_g = 0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i_p = 0; proc_control_B.i_p < 13;
               proc_control_B.i_p++) {
            proc_control_B.t10 += proc_control_B.A_h[proc_control_B.i_g +
              proc_control_B.b_k] *
              proc_control_B.b_dHdx[proc_control_B.base_index +
              proc_control_B.Ns];
            proc_control_B.i_g += 13;
            proc_control_B.base_index += 7;
          }

          proc_control_B.K_k[proc_control_B.nz + proc_control_B.Ns] =
            proc_control_B.t10;
          proc_control_B.nz += 7;
        }
      }

      // MATLABSystem: '<S222>/MATLAB System'
      memcpy(&proc_control_B.C_i[0], &proc_control_B.K_k[0], 91U * sizeof(real_T));

      // Start for MATLABSystem: '<S222>/MATLAB System'
      proc_control_trisolve_p(proc_control_B.Sy, proc_control_B.C_i);
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 7; proc_control_B.i_g
             ++) {
          proc_control_B.R_m[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.Sy[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 7;
      }

      proc_control_trisolve_pr(proc_control_B.R_m, proc_control_B.C_i);

      // MATLABSystem: '<S222>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_B.K_k[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.C_i[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 88; proc_control_B.Ns +=
           2) {
        // Start for MATLABSystem: '<S222>/MATLAB System'
        tmp_2 = _mm_loadu_pd(&proc_control_B.K_k[proc_control_B.Ns]);
        _mm_storeu_pd(&proc_control_B.C_i[proc_control_B.Ns], _mm_mul_pd(tmp_2,
          _mm_set1_pd(-1.0)));
      }

      for (proc_control_B.Ns = 90; proc_control_B.Ns < 91; proc_control_B.Ns++)
      {
        // Start for MATLABSystem: '<S222>/MATLAB System'
        proc_control_B.C_i[proc_control_B.Ns] =
          -proc_control_B.K_k[proc_control_B.Ns];
      }

      // MATLABSystem: '<S222>/MATLAB System' incorporates:
      //   DataStoreRead: '<S222>/Data Store ReadP'

      proc_control_B.Ns = 0;
      proc_control_B.nz = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k++)
      {
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_B.t10 = 0.0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i_p = 0; proc_control_B.i_p < 7;
               proc_control_B.i_p++) {
            proc_control_B.t10 += proc_control_B.C_i[proc_control_B.base_index +
              proc_control_B.i_g] * proc_control_B.b_dHdx[proc_control_B.i_p +
              proc_control_B.nz];
            proc_control_B.base_index += 13;
          }

          proc_control_B.A_h[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.t10;
        }

        proc_control_B.Ns += 13;
        proc_control_B.nz += 7;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
           proc_control_B.Ns_i++) {
        proc_control_B.A_h[proc_control_B.Ns]++;
        proc_control_B.Ns += 14;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        proc_control_B.nz = proc_control_B.b_j * 13 - 1;
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
             proc_control_B.Ns_i++) {
          proc_control_B.base_index = proc_control_B.Ns_i * 13 - 1;
          proc_control_B.Product3_h = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_h += proc_control_DW.P
              [(proc_control_B.base_index + proc_control_B.b_k) + 1] *
              proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
          }

          proc_control_B.y_m[(proc_control_B.nz + proc_control_B.Ns_i) + 1] =
            proc_control_B.Product3_h;
        }
      }

      // Start for MATLABSystem: '<S222>/MATLAB System' incorporates:
      //   Constant: '<S221>/R1'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_B.t10 = 0.0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i_p = 0; proc_control_B.i_p < 7;
               proc_control_B.i_p++) {
            proc_control_B.t10 += proc_control_B.K_k[proc_control_B.base_index +
              proc_control_B.i_g] * proc_control_P.R1_Value[proc_control_B.i_p +
              proc_control_B.Ns];
            proc_control_B.base_index += 13;
          }

          proc_control_B.C_i[proc_control_B.b_k + proc_control_B.nz] =
            proc_control_B.t10;
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 7;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        memcpy(&proc_control_B.y_i[proc_control_B.Ns * 20],
               &proc_control_B.y_m[proc_control_B.Ns * 13], 13U * sizeof(real_T));
        for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++)
        {
          proc_control_B.y_i[(proc_control_B.nz + 20 * proc_control_B.Ns) + 13] =
            proc_control_B.C_i[7 * proc_control_B.Ns + proc_control_B.nz];
        }
      }

      // MATLABSystem: '<S222>/MATLAB System'
      proc_control_qr_p(proc_control_B.y_i, proc_control_B.a__1_f,
                        proc_control_B.A_h);

      // DataStoreWrite: '<S222>/Data Store WriteP' incorporates:
      //   MATLABSystem: '<S222>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_DW.P[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 13;
        }

        proc_control_B.Ns += 13;
      }

      // End of DataStoreWrite: '<S222>/Data Store WriteP'

      // SignalConversion generated from: '<S222>/MATLAB System' incorporates:
      //   Merge: '<S3>/Merge'

      proc_control_B.d[0] = proc_control_B.d_oi;
      proc_control_B.d[1] = proc_control_B.scale;
      proc_control_B.d[2] = proc_control_B.dv25[0];
      proc_control_B.d[3] = proc_control_B.dv25[1];
      proc_control_B.d[4] = proc_control_B.i;
      proc_control_B.d[5] = proc_control_B.linearScaling;
      proc_control_B.d[6] = proc_control_B.residue;
      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 4; proc_control_B.Ns += 2)
      {
        tmp_2 = _mm_sub_pd(_mm_loadu_pd(&proc_control_B.d[proc_control_B.Ns]),
                           _mm_set_pd(proc_control_DW.x[tmp_4[proc_control_B.Ns
          + 1]], proc_control_DW.x[tmp_4[proc_control_B.Ns]]));
        _mm_storeu_pd(&proc_control_B.d_o[proc_control_B.Ns], tmp_2);
      }

      for (proc_control_B.Ns = 6; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_B.d_o[proc_control_B.Ns] =
          proc_control_B.d[proc_control_B.Ns] -
          proc_control_DW.x[tmp_4[proc_control_B.Ns]];
      }

      // DataStoreWrite: '<S222>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S222>/Data Store ReadX'
      //   MATLABSystem: '<S222>/MATLAB System'
      //
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.n_c = 0.0;
        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 7; proc_control_B.b_k
             ++) {
          proc_control_B.n_c += proc_control_B.K_k[proc_control_B.nz +
            proc_control_B.Ns] * proc_control_B.d_o[proc_control_B.b_k];
          proc_control_B.nz += 13;
        }

        proc_control_DW.x[proc_control_B.Ns] += proc_control_B.n_c;
      }

      // End of DataStoreWrite: '<S222>/Data Store WriteX'
    }

    // End of Outputs for SubSystem: '<S221>/Correct1'

    // Switch: '<S179>/Switch' incorporates:
    //   Constant: '<S179>/Constant'
    //   Constant: '<S221>/Enable1'
    //   DataStoreRead: '<S222>/Data Store ReadX'
    //   MATLABSystem: '<S222>/MATLAB System'
    //
    if (proc_control_B.BusCreator.dvl_lost_override >
        proc_control_P.Switch_Threshold) {
      proc_control_B.n_c = proc_control_P.Constant_Value_le;
    } else {
      proc_control_B.n_c = proc_control_B.enable_i;
    }

    // Outputs for Enabled SubSystem: '<S221>/Correct2' incorporates:
    //   EnablePort: '<S223>/Enable'

    if (proc_control_B.n_c != 0.0) {
      // MATLABSystem: '<S223>/MATLAB System' incorporates:
      //   DataStoreRead: '<S223>/Data Store ReadP'
      //   DataStoreRead: '<S223>/Data Store ReadX'

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        memcpy(&proc_control_B.imvec[0], &proc_control_DW.x[0], 13U * sizeof
               (real_T));

        // Start for MATLABSystem: '<S223>/MATLAB System' incorporates:
        //   DataStoreRead: '<S223>/Data Store ReadX'

        proc_control_B.Product3_h = 1.4901161193847656E-8 * fabs
          (proc_control_DW.x[proc_control_B.b_j]);
        if ((proc_control_B.Product3_h <= 1.4901161193847656E-8) || rtIsNaN
            (proc_control_B.Product3_h)) {
          proc_control_B.Product3_h = 1.4901161193847656E-8;
        }

        proc_control_B.imvec[proc_control_B.b_j] =
          proc_control_DW.x[proc_control_B.b_j] + proc_control_B.Product3_h;
        tmp_2 = _mm_div_pd(_mm_sub_pd(_mm_loadu_pd(&proc_control_B.imvec[7]),
          _mm_loadu_pd(&proc_control_DW.x[7])), _mm_set1_pd
                           (proc_control_B.Product3_h));
        _mm_storeu_pd(&proc_control_B.b_dHdx_n[3 * proc_control_B.b_j], tmp_2);
        proc_control_B.b_dHdx_n[3 * proc_control_B.b_j + 2] =
          (proc_control_B.imvec[9] - proc_control_DW.x[9]) /
          proc_control_B.Product3_h;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 3; proc_control_B.b_j++)
      {
        proc_control_B.nz = proc_control_B.b_j * 13 - 1;
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
             proc_control_B.Ns_i++) {
          proc_control_B.base_index = proc_control_B.Ns_i * 13 - 1;
          proc_control_B.Product3_h = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_h += proc_control_DW.P
              [(proc_control_B.base_index + proc_control_B.b_k) + 1] *
              proc_control_B.b_dHdx_n[proc_control_B.b_k * 3 +
              proc_control_B.b_j];
          }

          proc_control_B.K_d[(proc_control_B.nz + proc_control_B.Ns_i) + 1] =
            proc_control_B.Product3_h;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S223>/MATLAB System'
        proc_control_B.array_f[proc_control_B.Ns] =
          proc_control_B.K_d[proc_control_B.Ns];
        proc_control_B.array_f[proc_control_B.Ns + 16] =
          proc_control_B.K_d[proc_control_B.Ns + 13];
        proc_control_B.array_f[proc_control_B.Ns + 32] =
          proc_control_B.K_d[proc_control_B.Ns + 26];
      }

      // Start for MATLABSystem: '<S223>/MATLAB System' incorporates:
      //   Constant: '<S221>/R2'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 3; proc_control_B.nz++) {
        proc_control_B.array_f[proc_control_B.Ns + 13] =
          proc_control_P.R2_Value[proc_control_B.nz];
        proc_control_B.array_f[proc_control_B.Ns + 14] =
          proc_control_P.R2_Value[proc_control_B.nz + 3];
        proc_control_B.array_f[proc_control_B.Ns + 15] =
          proc_control_P.R2_Value[proc_control_B.nz + 6];
        proc_control_B.Ns += 16;
      }

      // MATLABSystem: '<S223>/MATLAB System'
      proc_control_qr_pr(proc_control_B.array_f, proc_control_B.a__1_j,
                         proc_control_B.TmpSignalConversionAtMATL_d);
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 3; proc_control_B.nz++) {
        proc_control_B.twpt[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.nz];
        proc_control_B.twpt[proc_control_B.Ns + 1] =
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.nz + 3];
        proc_control_B.twpt[proc_control_B.Ns + 2] =
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.nz + 6];
        proc_control_B.Ns += 3;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S223>/MATLAB System' incorporates:
        //   DataStoreRead: '<S223>/Data Store ReadP'

        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.n_c = 0.0;
          proc_control_B.i_g = 0;
          for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
               proc_control_B.base_index++) {
            proc_control_B.n_c += proc_control_DW.P[proc_control_B.i_g +
              proc_control_B.Ns] * proc_control_DW.P[proc_control_B.i_g +
              proc_control_B.b_k];
            proc_control_B.i_g += 13;
          }

          proc_control_B.A_h[proc_control_B.nz + proc_control_B.Ns] =
            proc_control_B.n_c;
          proc_control_B.nz += 13;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S223>/MATLAB System'
        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.t10 = 0.0;
          proc_control_B.i_g = 0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i_p = 0; proc_control_B.i_p < 13;
               proc_control_B.i_p++) {
            proc_control_B.t10 += proc_control_B.A_h[proc_control_B.i_g +
              proc_control_B.b_k] *
              proc_control_B.b_dHdx_n[proc_control_B.base_index +
              proc_control_B.Ns];
            proc_control_B.i_g += 13;
            proc_control_B.base_index += 3;
          }

          proc_control_B.K_d[proc_control_B.nz + proc_control_B.Ns] =
            proc_control_B.t10;
          proc_control_B.nz += 3;
        }
      }

      // MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        proc_control_B.C_n[proc_control_B.Ns] =
          proc_control_B.K_d[proc_control_B.Ns];
        proc_control_B.C_n[proc_control_B.Ns + 1] =
          proc_control_B.K_d[proc_control_B.Ns + 1];
        proc_control_B.C_n[proc_control_B.Ns + 2] =
          proc_control_B.K_d[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;
      }

      // Start for MATLABSystem: '<S223>/MATLAB System'
      proc_control_trisolve_pr3(proc_control_B.twpt, proc_control_B.C_n);

      // MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        proc_control_B.C_c[proc_control_B.Ns] =
          proc_control_B.C_n[proc_control_B.Ns];
        proc_control_B.C_c[proc_control_B.Ns + 1] =
          proc_control_B.C_n[proc_control_B.Ns + 1];
        proc_control_B.C_c[proc_control_B.Ns + 2] =
          proc_control_B.C_n[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;
      }

      // Start for MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 3; proc_control_B.nz++) {
        proc_control_B.twpt_c[proc_control_B.Ns] =
          proc_control_B.twpt[proc_control_B.nz];
        proc_control_B.twpt_c[proc_control_B.Ns + 1] =
          proc_control_B.twpt[proc_control_B.nz + 3];
        proc_control_B.twpt_c[proc_control_B.Ns + 2] =
          proc_control_B.twpt[proc_control_B.nz + 6];
        proc_control_B.Ns += 3;
      }

      proc_control_trisolve_pr35(proc_control_B.twpt_c, proc_control_B.C_c);

      // MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        proc_control_B.K_d[proc_control_B.nz] =
          proc_control_B.C_c[proc_control_B.Ns];
        proc_control_B.K_d[proc_control_B.nz + 13] =
          proc_control_B.C_c[proc_control_B.Ns + 1];
        proc_control_B.K_d[proc_control_B.nz + 26] =
          proc_control_B.C_c[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 36; proc_control_B.Ns +=
           2) {
        // Start for MATLABSystem: '<S223>/MATLAB System'
        tmp_2 = _mm_loadu_pd(&proc_control_B.K_d[proc_control_B.Ns]);
        _mm_storeu_pd(&proc_control_B.C_n[proc_control_B.Ns], _mm_mul_pd(tmp_2,
          _mm_set1_pd(-1.0)));
      }

      for (proc_control_B.Ns = 38; proc_control_B.Ns < 39; proc_control_B.Ns++)
      {
        // Start for MATLABSystem: '<S223>/MATLAB System'
        proc_control_B.C_n[proc_control_B.Ns] =
          -proc_control_B.K_d[proc_control_B.Ns];
      }

      // MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      proc_control_B.nz = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k++)
      {
        proc_control_B.residue = proc_control_B.b_dHdx_n[proc_control_B.Ns + 1];
        proc_control_B.linearScaling = proc_control_B.b_dHdx_n[proc_control_B.Ns];
        proc_control_B.t10 = proc_control_B.b_dHdx_n[proc_control_B.Ns + 2];
        for (proc_control_B.i_g = 0; proc_control_B.i_g <= 10;
             proc_control_B.i_g += 2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.C_n[proc_control_B.i_g + 13]);
          tmp_1 = _mm_loadu_pd(&proc_control_B.C_n[proc_control_B.i_g]);
          tmp = _mm_loadu_pd(&proc_control_B.C_n[proc_control_B.i_g + 26]);
          _mm_storeu_pd(&proc_control_B.A_h[proc_control_B.i_g +
                        proc_control_B.nz], _mm_add_pd(_mm_add_pd(_mm_mul_pd
            (_mm_set1_pd(proc_control_B.residue), tmp_2), _mm_mul_pd(_mm_set1_pd
            (proc_control_B.linearScaling), tmp_1)), _mm_mul_pd(_mm_set1_pd
            (proc_control_B.t10), tmp)));
        }

        for (proc_control_B.i_g = 12; proc_control_B.i_g < 13;
             proc_control_B.i_g++) {
          proc_control_B.A_h[proc_control_B.i_g + proc_control_B.nz] =
            (proc_control_B.C_n[proc_control_B.i_g + 13] *
             proc_control_B.residue + proc_control_B.linearScaling *
             proc_control_B.C_n[proc_control_B.i_g]) +
            proc_control_B.C_n[proc_control_B.i_g + 26] * proc_control_B.t10;
        }

        proc_control_B.Ns += 3;
        proc_control_B.nz += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
           proc_control_B.Ns_i++) {
        proc_control_B.A_h[proc_control_B.Ns]++;
        proc_control_B.Ns += 14;
      }

      // Start for MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        // MATLABSystem: '<S223>/MATLAB System' incorporates:
        //   DataStoreRead: '<S223>/Data Store ReadP'

        proc_control_B.nz = proc_control_B.b_j * 13 - 1;
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
             proc_control_B.Ns_i++) {
          proc_control_B.base_index = proc_control_B.Ns_i * 13 - 1;
          proc_control_B.Product3_h = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_h += proc_control_DW.P
              [(proc_control_B.base_index + proc_control_B.b_k) + 1] *
              proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
          }

          proc_control_B.y_m[(proc_control_B.nz + proc_control_B.Ns_i) + 1] =
            proc_control_B.Product3_h;
        }

        // Start for MATLABSystem: '<S223>/MATLAB System' incorporates:
        //   Constant: '<S221>/R2'
        //
        proc_control_B.t10 = proc_control_B.K_d[proc_control_B.b_j + 13];
        proc_control_B.residue = proc_control_B.K_d[proc_control_B.b_j];
        proc_control_B.linearScaling = proc_control_B.K_d[proc_control_B.b_j +
          26];
        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k
             ++) {
          proc_control_B.C_n[proc_control_B.b_k + proc_control_B.Ns] =
            (proc_control_P.R2_Value[proc_control_B.nz + 1] * proc_control_B.t10
             + proc_control_P.R2_Value[proc_control_B.nz] *
             proc_control_B.residue) + proc_control_P.R2_Value[proc_control_B.nz
            + 2] * proc_control_B.linearScaling;
          proc_control_B.nz += 3;
        }

        proc_control_B.Ns += 3;
      }

      // Start for MATLABSystem: '<S223>/MATLAB System'
      proc_control_B.Ns = 0;
      proc_control_B.nz = 0;
      proc_control_B.b_k = 0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g++)
      {
        memcpy(&proc_control_B.y_o[proc_control_B.Ns],
               &proc_control_B.y_m[proc_control_B.b_k], 13U * sizeof(real_T));
        proc_control_B.y_o[proc_control_B.Ns + 13] =
          proc_control_B.C_n[proc_control_B.nz];
        proc_control_B.y_o[proc_control_B.Ns + 14] =
          proc_control_B.C_n[proc_control_B.nz + 1];
        proc_control_B.y_o[proc_control_B.Ns + 15] =
          proc_control_B.C_n[proc_control_B.nz + 2];
        proc_control_B.Ns += 16;
        proc_control_B.nz += 3;
        proc_control_B.b_k += 13;
      }

      // MATLABSystem: '<S223>/MATLAB System'
      proc_control_qr_pr3(proc_control_B.y_o, proc_control_B.a__1_e,
                          proc_control_B.A_h);
      tmp_2 = _mm_sub_pd(_mm_set_pd(proc_control_B.Sum_n, proc_control_B.Sum),
                         _mm_loadu_pd(&proc_control_DW.x[7]));
      _mm_storeu_pd(&proc_control_B.dv25[0], tmp_2);
      proc_control_B.residue = proc_control_B.dv25[0];
      proc_control_B.linearScaling = proc_control_B.dv25[1];

      // SignalConversion generated from: '<S223>/MATLAB System' incorporates:
      //   DataStoreRead: '<S223>/Data Store ReadX'
      //   MATLABSystem: '<S223>/MATLAB System'
      //
      proc_control_B.t10 = proc_control_B.Sum_l - proc_control_DW.x[9];

      // DataStoreWrite: '<S223>/Data Store WriteP' incorporates:
      //   DataStoreRead: '<S223>/Data Store ReadX'
      //   DataStoreWrite: '<S223>/Data Store WriteX'
      //   MATLABSystem: '<S223>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_DW.P[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 13;
        }

        proc_control_DW.x[proc_control_B.nz] +=
          (proc_control_B.K_d[proc_control_B.nz + 13] *
           proc_control_B.linearScaling + proc_control_B.K_d[proc_control_B.nz] *
           proc_control_B.residue) + proc_control_B.K_d[proc_control_B.nz + 26] *
          proc_control_B.t10;
        proc_control_B.Ns += 13;
      }

      // End of DataStoreWrite: '<S223>/Data Store WriteP'
    }

    // End of Outputs for SubSystem: '<S221>/Correct2'

    // Outputs for Enabled SubSystem: '<S221>/Correct3' incorporates:
    //   EnablePort: '<S224>/Enable'

    if (proc_control_P.Enable3_Value) {
      // MATLABSystem: '<S224>/MATLAB System' incorporates:
      //   Constant: '<S221>/R3'
      //   DataStoreRead: '<S224>/Data Store ReadP'
      //   DataStoreRead: '<S224>/Data Store ReadX'

      EKFCorrectorAdditive_getMeasure(proc_control_P.R3_Value, proc_control_DW.x,
        proc_control_DW.P, &proc_control_B.residue, proc_control_B.imvec,
        &proc_control_B.linearScaling, proc_control_B.z_c, &proc_control_B.i);
      proc_control_B.residue = proc_control_B.zposition - proc_control_B.residue;
      memcpy(&proc_control_B.X_e_m[0], &proc_control_B.imvec[0], 13U * sizeof
             (real_T));

      // Start for MATLABSystem: '<S224>/MATLAB System'
      proc_control_trisolve_pr351(proc_control_B.linearScaling,
        proc_control_B.X_e_m);

      // MATLABSystem: '<S224>/MATLAB System'
      memcpy(&proc_control_B.imvec[0], &proc_control_B.X_e_m[0], 13U * sizeof
             (real_T));

      // Start for MATLABSystem: '<S224>/MATLAB System'
      proc_control_trisolve_pr351(proc_control_B.linearScaling,
        proc_control_B.imvec);
      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 10; proc_control_B.Ns +=
           2) {
        tmp_2 = _mm_loadu_pd(&proc_control_B.imvec[proc_control_B.Ns]);
        _mm_storeu_pd(&proc_control_B.DataStoreRead[proc_control_B.Ns],
                      _mm_mul_pd(tmp_2, _mm_set1_pd(-1.0)));
      }

      for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns++)
      {
        proc_control_B.DataStoreRead[proc_control_B.Ns] =
          -proc_control_B.imvec[proc_control_B.Ns];
      }

      // MATLABSystem: '<S224>/MATLAB System' incorporates:
      //   DataStoreRead: '<S224>/Data Store ReadP'

      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        for (proc_control_B.b_k = 0; proc_control_B.b_k <= 10;
             proc_control_B.b_k += 2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.DataStoreRead[proc_control_B.b_k]);
          _mm_storeu_pd(&proc_control_B.A_h[proc_control_B.b_k +
                        proc_control_B.Ns], _mm_mul_pd(tmp_2, _mm_set1_pd
            (proc_control_B.z_c[proc_control_B.nz])));
        }

        for (proc_control_B.b_k = 12; proc_control_B.b_k < 13;
             proc_control_B.b_k++) {
          proc_control_B.A_h[proc_control_B.b_k + proc_control_B.Ns] =
            proc_control_B.DataStoreRead[proc_control_B.b_k] *
            proc_control_B.z_c[proc_control_B.nz];
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
           proc_control_B.Ns_i++) {
        proc_control_B.A_h[proc_control_B.Ns]++;
        proc_control_B.Ns += 14;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
             proc_control_B.Ns_i++) {
          proc_control_B.base_index = proc_control_B.Ns_i * 13 - 1;
          proc_control_B.Product3_h = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_h += proc_control_DW.P
              [(proc_control_B.base_index + proc_control_B.b_k) + 1] *
              proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
          }

          proc_control_B.y_l[proc_control_B.Ns_i + 14 * proc_control_B.b_j] =
            proc_control_B.Product3_h;
        }

        proc_control_B.y_l[14 * proc_control_B.b_j + 13] =
          proc_control_B.imvec[proc_control_B.b_j] * proc_control_B.i;
      }

      proc_control_qr_pr35(proc_control_B.y_l, proc_control_B.a__1_h,
                           proc_control_B.A_h);

      // DataStoreWrite: '<S224>/Data Store WriteP' incorporates:
      //   DataStoreRead: '<S224>/Data Store ReadX'
      //   DataStoreWrite: '<S224>/Data Store WriteX'
      //   MATLABSystem: '<S224>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_DW.P[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 13;
        }

        proc_control_DW.x[proc_control_B.nz] +=
          proc_control_B.imvec[proc_control_B.nz] * proc_control_B.residue;
        proc_control_B.Ns += 13;
      }

      // End of DataStoreWrite: '<S224>/Data Store WriteP'
    }

    // End of Outputs for SubSystem: '<S221>/Correct3'

    // Outputs for Atomic SubSystem: '<S221>/Output'
    // DataStoreRead: '<S225>/Data Store Read' incorporates:
    //   Constant: '<S221>/Enable3'
    //   DataStoreRead: '<S223>/Data Store ReadX'
    //   DataTypeConversion: '<S221>/DataTypeConversion_Enable2'
    //   MATLABSystem: '<S223>/MATLAB System'
    //   SignalConversion generated from: '<S223>/MATLAB System'
    //   Switch: '<S179>/Switch'
    //
    memcpy(&proc_control_B.DataStoreRead[0], &proc_control_DW.x[0], 13U * sizeof
           (real_T));

    // Outputs for Atomic SubSystem: '<S221>/Predict'
    // Start for MATLABSystem: '<S226>/MATLAB System' incorporates:
    //   DataStoreRead: '<S225>/Data Store Read'
    //   DataStoreRead: '<S226>/Data Store ReadX'
    //   DataTypeConversion: '<S221>/DataTypeConversion_uState'

    memcpy(&proc_control_B.z_c[0], &proc_control_DW.x[0], 13U * sizeof(real_T));

    // End of Outputs for SubSystem: '<S221>/Output'
    proc_control_EkfNavStatesEq(proc_control_B.z_c,
      proc_control_B.DataTypeConversion_uState);
    memcpy(&proc_control_B.z_c[0], &proc_control_DW.x[0], 13U * sizeof(real_T));
    proc_control_EkfNavStatesEq(proc_control_B.z_c,
      proc_control_B.DataTypeConversion_uState);

    // MATLABSystem: '<S226>/MATLAB System' incorporates:
    //   DataStoreRead: '<S226>/Data Store ReadX'

    for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
    {
      memcpy(&proc_control_B.imvec[0], &proc_control_DW.x[0], 13U * sizeof
             (real_T));

      // Start for MATLABSystem: '<S226>/MATLAB System' incorporates:
      //   DataStoreRead: '<S226>/Data Store ReadX'

      proc_control_B.Product3_h = 1.4901161193847656E-8 * fabs
        (proc_control_DW.x[proc_control_B.b_j]);
      if ((proc_control_B.Product3_h <= 1.4901161193847656E-8) || rtIsNaN
          (proc_control_B.Product3_h)) {
        proc_control_B.Product3_h = 1.4901161193847656E-8;
      }

      proc_control_B.imvec[proc_control_B.b_j] =
        proc_control_DW.x[proc_control_B.b_j] + proc_control_B.Product3_h;

      // Start for MATLABSystem: '<S226>/MATLAB System' incorporates:
      //   DataStoreRead: '<S226>/Data Store ReadX'
      //   DataTypeConversion: '<S221>/DataTypeConversion_uState'

      proc_control_EkfNavStatesEq(proc_control_B.imvec,
        proc_control_B.DataTypeConversion_uState);
      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 10; proc_control_B.Ns +=
           2) {
        // Start for MATLABSystem: '<S226>/MATLAB System'
        tmp_2 = _mm_loadu_pd(&proc_control_B.imvec[proc_control_B.Ns]);
        tmp_1 = _mm_loadu_pd(&proc_control_B.z_c[proc_control_B.Ns]);
        _mm_storeu_pd(&proc_control_B.A_h[proc_control_B.Ns + 13 *
                      proc_control_B.b_j], _mm_div_pd(_mm_sub_pd(tmp_2, tmp_1),
          _mm_set1_pd(proc_control_B.Product3_h)));
      }

      for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns++)
      {
        proc_control_B.A_h[proc_control_B.Ns + 13 * proc_control_B.b_j] =
          (proc_control_B.imvec[proc_control_B.Ns] -
           proc_control_B.z_c[proc_control_B.Ns]) / proc_control_B.Product3_h;
      }
    }

    // DataStoreWrite: '<S226>/Data Store WriteX' incorporates:
    //   DataTypeConversion: '<S221>/DataTypeConversion_uState'
    //   MATLABSystem: '<S226>/MATLAB System'
    //
    proc_control_EkfNavStatesEq(proc_control_DW.x,
      proc_control_B.DataTypeConversion_uState);
    for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
    {
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 13;
           proc_control_B.Ns_i++) {
        // MATLABSystem: '<S226>/MATLAB System' incorporates:
        //   DataStoreRead: '<S226>/Data Store ReadP'

        proc_control_B.base_index = proc_control_B.Ns_i * 13 - 1;
        proc_control_B.Product3_h = 0.0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.Product3_h += proc_control_DW.P
            [(proc_control_B.base_index + proc_control_B.b_k) + 1] *
            proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
        }

        // Start for MATLABSystem: '<S226>/MATLAB System' incorporates:
        //   Constant: '<S221>/Q'
        //
        proc_control_B.Ns = 26 * proc_control_B.b_j + proc_control_B.Ns_i;
        proc_control_B.y_a[proc_control_B.Ns] = proc_control_B.Product3_h;
        proc_control_B.y_a[proc_control_B.Ns + 13] = proc_control_P.Q_Value[13 *
          proc_control_B.Ns_i + proc_control_B.b_j];
      }
    }

    // MATLABSystem: '<S226>/MATLAB System'
    proc_control_qr_pr351(proc_control_B.y_a, proc_control_B.a__1_a,
                          proc_control_B.A_h);

    // DataStoreWrite: '<S226>/Data Store WriteP' incorporates:
    //   MATLABSystem: '<S226>/MATLAB System'
    //
    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
      proc_control_B.b_k = 0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g++)
      {
        proc_control_DW.P[proc_control_B.i_g + proc_control_B.Ns] =
          proc_control_B.A_h[proc_control_B.b_k + proc_control_B.nz];
        proc_control_B.b_k += 13;
      }

      proc_control_B.Ns += 13;
    }

    // End of DataStoreWrite: '<S226>/Data Store WriteP'
    // End of Outputs for SubSystem: '<S221>/Predict'

    // Outputs for Atomic SubSystem: '<S9>/Header Assignment'
    // ASCIIToString: '<S13>/ASCII to String' incorporates:
    //   Constant: '<S12>/Constant'

    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 128; proc_control_B.Ns_i
         ++) {
      proc_control_B.Switch1[proc_control_B.Ns_i] = static_cast<int8_T>
        (proc_control_P.Constant_Value_g3.header.frame_id[proc_control_B.Ns_i]);
      proc_control_B.Switch1[proc_control_B.Ns_i + 128] = '\x00';
    }

    // MATLABSystem: '<S13>/Current Time'
    currentROS2TimeBus(&proc_control_B.BusCreator_l.header.stamp);

    // Switch: '<S13>/Switch1' incorporates:
    //   ASCIIToString: '<S13>/ASCII to String'
    //   Constant: '<S13>/Constant1'
    //   StringConstant: '<S13>/String Constant1'

    if (proc_control_P.Constant1_Value != 0.0) {
      strncpy(&proc_control_B.Switch1_p[0],
              &proc_control_P.StringConstant1_String[0], 255U);
      proc_control_B.Switch1_p[255] = '\x00';
    } else {
      strncpy(&proc_control_B.Switch1_p[0], &proc_control_B.Switch1[0], 255U);
      proc_control_B.Switch1_p[255] = '\x00';
    }

    // End of Switch: '<S13>/Switch1'

    // Switch: '<S13>/Switch' incorporates:
    //   Constant: '<S13>/Constant'

    if (!(proc_control_P.Constant_Value_gj != 0.0)) {
      // BusCreator: '<S9>/Bus Creator' incorporates:
      //   Constant: '<S12>/Constant'

      proc_control_B.BusCreator_l.header.stamp =
        proc_control_P.Constant_Value_g3.header.stamp;
    }

    // End of Switch: '<S13>/Switch'

    // StringToASCII: '<S13>/String To ASCII'
    strncpy(&proc_control_B.cv[0], &proc_control_B.Switch1_p[0], 128U);

    // BusCreator: '<S9>/Bus Creator' incorporates:
    //   BusCreator: '<S9>/Bus Creator7'
    //   BusCreator: '<S9>/Bus Creator8'
    //   Constant: '<S12>/Constant'
    //   Constant: '<S9>/Constant'
    //   MATLAB Function: '<S9>/MATLAB Function1'
    //   SignalConversion generated from: '<S13>/HeaderAssign'
    //   StringLength: '<S13>/String Length'
    //   StringToASCII: '<S13>/String To ASCII'

    proc_control_B.BusCreator_l.header.frame_id_SL_Info.CurrentLength = strlen
      (&proc_control_B.Switch1_p[0]);
    proc_control_B.BusCreator_l.header.frame_id_SL_Info.ReceivedLength =
      proc_control_P.Constant_Value_g3.header.frame_id_SL_Info.ReceivedLength;

    // End of Outputs for SubSystem: '<S9>/Header Assignment'
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 128; proc_control_B.Ns_i
         ++) {
      // Outputs for Atomic SubSystem: '<S9>/Header Assignment'
      proc_control_B.BusCreator_l.header.frame_id[proc_control_B.Ns_i] =
        static_cast<uint8_T>(proc_control_B.cv[proc_control_B.Ns_i]);
      proc_control_B.BusCreator_l.child_frame_id[proc_control_B.Ns_i] =
        proc_control_P.Constant_Value_g3.child_frame_id[proc_control_B.Ns_i];

      // End of Outputs for SubSystem: '<S9>/Header Assignment'
    }

    // Outputs for Atomic SubSystem: '<S9>/Header Assignment'
    proc_control_B.BusCreator_l.child_frame_id_SL_Info =
      proc_control_P.Constant_Value_g3.child_frame_id_SL_Info;

    // End of Outputs for SubSystem: '<S9>/Header Assignment'
    proc_control_B.BusCreator_l.pose.pose.position.x =
      proc_control_B.DataStoreRead[0];
    proc_control_B.BusCreator_l.pose.pose.position.y =
      proc_control_B.DataStoreRead[1];
    proc_control_B.BusCreator_l.pose.pose.position.z =
      proc_control_B.DataStoreRead[2];
    proc_control_B.BusCreator_l.pose.pose.orientation.x =
      proc_control_B.DataStoreRead[4];
    proc_control_B.BusCreator_l.pose.pose.orientation.y =
      proc_control_B.DataStoreRead[5];
    proc_control_B.BusCreator_l.pose.pose.orientation.z =
      proc_control_B.DataStoreRead[6];
    proc_control_B.BusCreator_l.pose.pose.orientation.w =
      proc_control_B.DataStoreRead[3];
    proc_control_B.BusCreator_l.twist.twist.linear.x =
      proc_control_B.DataStoreRead[7];
    proc_control_B.BusCreator_l.twist.twist.linear.y =
      proc_control_B.DataStoreRead[8];
    proc_control_B.BusCreator_l.twist.twist.linear.z =
      proc_control_B.DataStoreRead[9];
    proc_control_B.BusCreator_l.twist.twist.angular.x =
      proc_control_B.DataStoreRead[10];
    proc_control_B.BusCreator_l.twist.twist.angular.y =
      proc_control_B.DataStoreRead[11];
    proc_control_B.BusCreator_l.twist.twist.angular.z =
      proc_control_B.DataStoreRead[12];
    memcpy(&proc_control_B.BusCreator_l.pose.covariance[0],
           &proc_control_P.Constant_Value_kf[0], 36U * sizeof(real_T));
    memcpy(&proc_control_B.BusCreator_l.twist.covariance[0],
           &proc_control_P.Constant_Value_kf[0], 36U * sizeof(real_T));

    // MATLABSystem: '<S15>/SinkBlock'
    Pub_proc_control_478.publish(&proc_control_B.BusCreator_l);

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.WorldPosition[0] = proc_control_B.DataStoreRead[0];
    proc_control_B.WorldPosition[1] = proc_control_B.DataStoreRead[1];
    proc_control_B.WorldPosition[2] = proc_control_B.DataStoreRead[2];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.qS2W[0] = proc_control_B.DataStoreRead[3];
    proc_control_B.qS2W[1] = proc_control_B.DataStoreRead[4];
    proc_control_B.qS2W[2] = proc_control_B.DataStoreRead[5];
    proc_control_B.qS2W[3] = proc_control_B.DataStoreRead[6];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.BodyVelocity[0] = proc_control_B.DataStoreRead[7];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.AngularRate[0] = proc_control_B.DataStoreRead[10];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.BodyVelocity[1] = proc_control_B.DataStoreRead[8];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.AngularRate[1] = proc_control_B.DataStoreRead[11];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.BodyVelocity[2] = proc_control_B.DataStoreRead[9];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.AngularRate[2] = proc_control_B.DataStoreRead[12];

    // BusAssignment: '<S8>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S8>/Data Type Conversion'

    proc_control_B.BusAssignment_g.data = (proc_control_B.y != 0.0);

    // ZeroOrderHold: '<S8>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLABSystem: '<S11>/SinkBlock'
      Pub_proc_control_500.publish(&proc_control_B.BusAssignment_g);
    }

    // End of ZeroOrderHold: '<S8>/Zero-Order Hold'
  }

  // End of Logic: '<S180>/AND'
  // End of Outputs for SubSystem: '<S6>/Enabled Subsystem'
  // End of Outputs for SubSystem: '<Root>/Enabled Subsystem'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i++)
    {
      // Delay: '<S5>/Delay'
      proc_control_B.Delay[proc_control_B.Ns_i] =
        proc_control_DW.Delay_DSTATE_m0[proc_control_B.Ns_i];
    }
  }

  // If: '<S5>/If' incorporates:
  //   BusCreator generated from: '<S69>/MATLAB System'
  //   Lookup_n-D: '<S70>/N to A'
  //   Lookup_n-D: '<S70>/n-D Lookup Table1'
  //   MATLABSystem: '<S171>/SourceBlock'
  //   MATLABSystem: '<S172>/SourceBlock'
  //   MATLABSystem: '<S50>/MATLAB System1'
  //   MATLABSystem: '<S50>/MATLAB System3'
  //   MATLABSystem: '<S50>/MATLAB System4'
  //   MATLABSystem: '<S51>/MATLAB System3'
  //   MATLABSystem: '<S51>/MATLAB System4'
  //   MATLABSystem: '<S51>/MATLAB System5'
  //   MATLABSystem: '<S52>/MATLAB System3'
  //   MATLABSystem: '<S52>/MATLAB System4'
  //   MATLABSystem: '<S52>/MATLAB System5'
  //   MATLABSystem: '<S53>/MATLAB System3'
  //   MATLABSystem: '<S53>/MATLAB System4'
  //   MATLABSystem: '<S53>/MATLAB System5'
  //   MATLABSystem: '<S69>/MATLAB System'
  //   Trigonometry: '<S206>/sincos'
  //
  proc_control_B.rtPrevAction = proc_control_DW.If_ActiveSubsystem_b;
  proc_control_DW.If_ActiveSubsystem_b = 0;
  if (proc_control_B.rtPrevAction != 0) {
    // SystemReset for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
    //   ActionPort: '<S69>/Action Port'

    // SystemReset for If: '<S5>/If' incorporates:
    //   MATLABSystem: '<S69>/MATLAB System'

    proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_k);

    // End of SystemReset for SubSystem: '<S5>/If Action Subsystem'
  }

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  proc_control_B.b_value_e = Sub_proc_control_780.getLatestMessage
    (&proc_control_B.rtb_SourceBlock_o2_h_e);

  // Outputs for Enabled SubSystem: '<S171>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S173>/Enable'

  if (proc_control_B.b_value_e) {
    // SignalConversion generated from: '<S173>/In1'
    proc_control_B.In1_j = proc_control_B.rtb_SourceBlock_o2_h_e;
  }

  // End of Outputs for SubSystem: '<S171>/Enabled Subsystem'
  proc_control_B.Reset = Sub_proc_control_781.getLatestMessage
    (&proc_control_B.rtb_SourceBlock_o2_a);

  // Outputs for Enabled SubSystem: '<S172>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S174>/Enable'

  if (proc_control_B.Reset) {
    // SignalConversion generated from: '<S174>/In1'
    proc_control_B.In1 = proc_control_B.rtb_SourceBlock_o2_a;
  }

  // End of Outputs for SubSystem: '<S172>/Enabled Subsystem'
  //         %% Fonction D'initialisation
  //  Conditions initial
  if (proc_control_DW.obj_k.init == 0.0) {
    proc_control_DW.obj_k.gainsList[0] = 10.0;
    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 20] =
        proc_control_B.OV_c[proc_control_B.nz];
      proc_control_B.Ns += 20;
    }

    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++) {
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 280] =
        proc_control_B.MV_j[proc_control_B.nz];
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 440] =
        proc_control_B.MVR_a[proc_control_B.nz];
      proc_control_B.Ns += 20;
    }

    proc_control_DW.obj_k.gainsList[1] = 11.0;
    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 21] =
        proc_control_B.OV_l[proc_control_B.nz];
      proc_control_B.Ns += 20;
    }

    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++) {
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 281] =
        proc_control_B.MV_l[proc_control_B.nz];
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 441] =
        proc_control_B.MVR_c[proc_control_B.nz];
      proc_control_B.Ns += 20;
    }

    proc_control_DW.obj_k.gainsList[2] = 19.0;
    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 22] =
        proc_control_B.OV[proc_control_B.nz];
      proc_control_B.Ns += 20;
    }

    proc_control_B.Ns = 0;
    for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++) {
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 282] =
        proc_control_B.MV_c[proc_control_B.nz];
      proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 442] =
        proc_control_B.MVR[proc_control_B.nz];
      proc_control_B.Ns += 20;
    }

    proc_control_DW.obj_k.init = 1.0;
  }

  //  Init function
  //       %% Fonction qui traite les gains recu via ros.
  if (proc_control_B.b_value_e) {
    if (proc_control_B.In1_j.ov_SL_Info.CurrentLength == 13U) {
      //  regarder la vaiditée des ov
      memcpy(&proc_control_DW.obj_k.rosOV[0], &proc_control_B.In1_j.ov[0], 13U *
             sizeof(real_T));
    }

    if (proc_control_B.In1_j.mv_SL_Info.CurrentLength == 8U) {
      //  regarder la vaiditée des mv
      memcpy(&proc_control_DW.obj_k.rosMV[0], &proc_control_B.In1_j.mv[0],
             sizeof(real_T) << 3U);
    }

    if (proc_control_B.In1_j.mvr_SL_Info.CurrentLength == 8U) {
      //  regarder la vaiditée des mvr
      memcpy(&proc_control_DW.obj_k.rosMVR[0], &proc_control_B.In1_j.mvr[0],
             sizeof(real_T) << 3U);
    }
  }

  //  traiter les gains recu via ros.
  //         %% Fonction qui détermine les gain
  //  Vérifier si le mode existe
  for (proc_control_B.Ns = 0; proc_control_B.Ns < 20; proc_control_B.Ns++) {
    proc_control_B.corr[proc_control_B.Ns] =
      (proc_control_DW.obj_k.gainsList[proc_control_B.Ns] == proc_control_B.mode);
  }

  if (proc_control_B.mode == 31) {
    //  Mode ros debug
    memcpy(&proc_control_B.imvec[0], &proc_control_DW.obj_k.rosOV[0], 13U *
           sizeof(real_T));
    memcpy(&proc_control_B.u_scale[0], &proc_control_DW.obj_k.rosMV[0], sizeof
           (real_T) << 3U);
    memcpy(&proc_control_B.U_f1[0], &proc_control_DW.obj_k.rosMVR[0], sizeof
           (real_T) << 3U);
  } else {
    proc_control_B.nz = proc_control_B.corr[0];
    for (proc_control_B.base_index = 0; proc_control_B.base_index < 19;
         proc_control_B.base_index++) {
      // Outputs for Enabled SubSystem: '<S6>/DVL Measurements' incorporates:
      //   EnablePort: '<S177>/Enable'

      // Outputs for Enabled SubSystem: '<S202>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S205>/Enable'

      proc_control_B.nz += proc_control_B.corr[proc_control_B.base_index + 1];

      // End of Outputs for SubSystem: '<S202>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S6>/DVL Measurements'
    }

    if (proc_control_B.nz == 1) {
      //  mode existe et unique
      proc_control_B.base_index = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.nz - 1 < 20)) {
        if (proc_control_B.corr[proc_control_B.nz - 1]) {
          proc_control_B.base_index++;
          proc_control_B.ii_data[proc_control_B.base_index - 1] =
            proc_control_B.nz;
          if (proc_control_B.base_index >= 20) {
            exitg1 = true;
          } else {
            proc_control_B.nz++;
          }
        } else {
          proc_control_B.nz++;
        }
      }

      if (proc_control_B.base_index < 1) {
        proc_control_B.Ns = 0;
      } else {
        proc_control_B.Ns = proc_control_B.base_index;
      }

      if (proc_control_B.Ns - 1 >= 0) {
        memcpy(&proc_control_B.i_data[0], &proc_control_B.ii_data[0],
               static_cast<uint32_T>(proc_control_B.Ns) * sizeof(int32_T));
      }

      if (proc_control_B.Ns == 0) {
        proc_control_B.i = 0.0;
      } else {
        proc_control_B.i = proc_control_B.i_data[0];
        for (proc_control_B.base_index = 2; proc_control_B.base_index <=
             proc_control_B.Ns; proc_control_B.base_index++) {
          // Outputs for Enabled SubSystem: '<S6>/DVL Measurements' incorporates:
          //   EnablePort: '<S177>/Enable'

          // Outputs for Enabled SubSystem: '<S202>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S205>/Enable'

          proc_control_B.i += static_cast<real_T>
            (proc_control_B.i_data[proc_control_B.base_index - 1]);

          // End of Outputs for SubSystem: '<S202>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S6>/DVL Measurements'
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.imvec[proc_control_B.Ns] =
          proc_control_DW.obj_k.gainsList[((proc_control_B.Ns + 1) * 20 +
          static_cast<int32_T>(proc_control_B.i)) - 1];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.u_scale[proc_control_B.Ns] =
          proc_control_DW.obj_k.gainsList[((proc_control_B.Ns + 14) * 20 +
          static_cast<int32_T>(proc_control_B.i)) - 1];
        proc_control_B.U_f1[proc_control_B.Ns] =
          proc_control_DW.obj_k.gainsList[((proc_control_B.Ns + 22) * 20 +
          static_cast<int32_T>(proc_control_B.i)) - 1];
      }
    } else {
      //  mode non trouver. retourne default
      memcpy(&proc_control_B.imvec[0], &proc_control_B.OV_d[0], 13U * sizeof
             (real_T));
      memcpy(&proc_control_B.u_scale[0], &proc_control_B.MV_p[0], sizeof(real_T)
             << 3U);
      memcpy(&proc_control_B.U_f1[0], &proc_control_B.MVR_cn[0], sizeof(real_T) <<
             3U);
    }
  }

  //   Ajust gain if loosing dvl
  tmp_2 = _mm_set1_pd(1.0 / sqrt(((proc_control_B.qS2W[0] * proc_control_B.qS2W
    [0] + proc_control_B.qS2W[1] * proc_control_B.qS2W[1]) +
    proc_control_B.qS2W[2] * proc_control_B.qS2W[2]) + proc_control_B.qS2W[3] *
    proc_control_B.qS2W[3]));
  tmp_1 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.qS2W[0]), tmp_2);
  _mm_storeu_pd(&proc_control_B.n[0], tmp_1);
  tmp_2 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.qS2W[2]), tmp_2);
  _mm_storeu_pd(&proc_control_B.n[2], tmp_2);
  proc_control_B.i = (proc_control_B.n[1] * proc_control_B.n[3] -
                      proc_control_B.n[0] * proc_control_B.n[2]) * -2.0;
  proc_control_B.NewDvlMsg = (proc_control_B.i >= 0.99999999999999778);
  proc_control_B.newPressureMsg = (proc_control_B.i <= -0.99999999999999778);
  proc_control_B.Product3_h = proc_control_B.i;
  if (proc_control_B.NewDvlMsg) {
    proc_control_B.Product3_h = 1.0;
  }

  if (proc_control_B.newPressureMsg) {
    proc_control_B.Product3_h = -1.0;
  }

  proc_control_B.NewDvlMsg = (proc_control_B.NewDvlMsg ||
    proc_control_B.newPressureMsg);
  proc_control_B.residue = proc_control_B.n[0] * proc_control_B.n[0];
  proc_control_B.linearScaling = proc_control_B.n[1] * proc_control_B.n[1];
  proc_control_B.t10 = proc_control_B.n[2] * proc_control_B.n[2];
  proc_control_B.i = proc_control_B.n[3] * proc_control_B.n[3];
  proc_control_B.sincos_o1[0] = rt_atan2d_snf((proc_control_B.n[1] *
    proc_control_B.n[2] + proc_control_B.n[0] * proc_control_B.n[3]) * 2.0,
    ((proc_control_B.residue + proc_control_B.linearScaling) -
     proc_control_B.t10) - proc_control_B.i);
  proc_control_B.sincos_o1[1] = asin(proc_control_B.Product3_h);
  proc_control_B.sincos_o1[2] = rt_atan2d_snf((proc_control_B.n[2] *
    proc_control_B.n[3] + proc_control_B.n[0] * proc_control_B.n[1]) * 2.0,
    ((proc_control_B.residue - proc_control_B.linearScaling) -
     proc_control_B.t10) + proc_control_B.i);

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.nz = 0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'

  if (proc_control_B.NewDvlMsg) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i++)
    {
      proc_control_B.nz++;
    }
  }

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.g_size[0] = proc_control_B.nz;
  proc_control_B.nz = 0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'

  if (proc_control_B.NewDvlMsg) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i++)
    {
      proc_control_B.nz++;
    }
  }

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.b_k = proc_control_B.nz;
  proc_control_B.nz = 0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'
  //
  if (proc_control_B.NewDvlMsg) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i++)
    {
      proc_control_B.nz++;
    }
  }

  if (proc_control_B.nz - 1 >= 0) {
    proc_control_B.b_x_data = proc_control_B.Product3_h;
  }

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.Ns = 0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'
  //
  if (proc_control_B.NewDvlMsg) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i++)
    {
      proc_control_B.Ns++;
    }
  }

  proc_control_B.b_j = proc_control_B.Ns - 1;
  for (proc_control_B.base_index = 0; proc_control_B.base_index <=
       proc_control_B.b_j; proc_control_B.base_index++) {
    if (rtIsNaN(proc_control_B.b_x_data)) {
      proc_control_B.b_x_data = (rtNaN);
    } else if (proc_control_B.b_x_data < 0.0) {
      proc_control_B.b_x_data = -1.0;
    } else {
      proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
    }
  }

  for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.nz;
       proc_control_B.Ns++) {
    proc_control_B.b_x_data = -proc_control_B.b_x_data * 2.0;
  }

  if (proc_control_B.g_size[0] == proc_control_B.b_k) {
    proc_control_B.j_size[0] = proc_control_B.g_size[0];
    if (proc_control_B.g_size[0] - 1 >= 0) {
      proc_control_B.j_data = rt_atan2d_snf(proc_control_B.n[1],
        proc_control_B.n[0]);
    }
  } else {
    proc_control_B.Ns = 0;
    if (proc_control_B.NewDvlMsg) {
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i
           ++) {
        proc_control_B.Ns++;
      }
    }

    proc_control_B.n_size[0] = proc_control_B.Ns;
    proc_control_B.n_size_o[0] = proc_control_B.Ns;
    if (proc_control_B.Ns - 1 >= 0) {
      proc_control_B.n_data = proc_control_B.n[1];
      proc_control_B.n_data_j = proc_control_B.n[0];
    }

    proc_control_expand_atan2(&proc_control_B.n_data, proc_control_B.n_size,
      &proc_control_B.n_data_j, proc_control_B.n_size_o, &proc_control_B.j_data,
      proc_control_B.j_size);
  }

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.Ns = 0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'

  if (proc_control_B.NewDvlMsg) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i++)
    {
      proc_control_B.Ns++;
    }
  }

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.g_size[0] = proc_control_B.Ns;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'

  if (proc_control_B.nz != proc_control_B.j_size[0]) {
    proc_control_binary_expand_op_1(proc_control_B.sincos_o1,
      proc_control_B.g_size, &proc_control_B.b_x_data, &proc_control_B.j_data);
  }

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  proc_control_B.nz = 0;

  // Outputs for IfAction SubSystem: '<S5>/If Action Subsystem' incorporates:
  //   ActionPort: '<S69>/Action Port'

  // If: '<S5>/If' incorporates:
  //   BusCreator generated from: '<S69>/MATLAB System'
  //   Delay: '<S5>/Delay'
  //   MATLABSystem: '<S172>/SourceBlock'
  //   MATLABSystem: '<S54>/MATLAB System5'
  //   MATLABSystem: '<S69>/MATLAB System'
  //   Math: '<S69>/Transpose'
  //   SignalConversion generated from: '<S69>/MATLAB System'
  //
  if (proc_control_B.NewDvlMsg) {
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i++)
    {
      proc_control_B.nz++;
    }
  }

  if (proc_control_B.nz - 1 >= 0) {
    proc_control_B.sincos_o1[2] = 0.0;
  }

  if ((fabs(proc_control_B.sincos_o1[1]) > 0.3490658503988659) || (fabs
       (proc_control_B.sincos_o1[2]) > 0.3490658503988659)) {
    //  If roll pitch exeed 20deg
    memcpy(&proc_control_B.u_scale[0], &proc_control_B.MV[0], sizeof(real_T) <<
           3U);
  }

  //  Avoir les gains selon le mode
  memcpy(&proc_control_B.VectorConcatenate[0], &proc_control_B.In1.data[0],
         sizeof(real_T) << 7U);

  //         %% Fonction qui vérifie l'états des moteurs.
  if (proc_control_B.Reset) {
    proc_control_B.VectorConcatenate[7] = 0.0;

    //  regarder si le courant est en dessou du seuil
    //  Rénitialiser le compteur si thruster est bon
    //  Aditionner les échantillion défectueux
    //  Condition qui vérifie si les thruster sont defectueux
    //  rajouter des moteur défecteux
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      proc_control_B.Reset = (proc_control_B.VectorConcatenate[proc_control_B.Ns]
        < rt_roundd_snf(static_cast<real_T>
                        (proc_control_B.Delay[proc_control_B.Ns]) * 0.1));
      proc_control_DW.obj_k.currentFaultCount[proc_control_B.Ns] =
        proc_control_DW.obj_k.currentFaultCount[proc_control_B.Ns] *
        static_cast<real_T>(proc_control_B.Reset) + static_cast<real_T>
        (proc_control_B.Reset);
      proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns] =
        ((proc_control_DW.obj_k.currentFaultCount[proc_control_B.Ns] >= 20.0) +
         proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns] != 0);
    }
  }

  //  Vérifier l'etats des thrusters
  //         %% Fonction qui applique la saturation des moteurs
  //  Enlever les thrusters defectueux
  //       %% Fonction qui prend la decision de kill le sub
  for (proc_control_B.Ns = 0; proc_control_B.Ns <= 6; proc_control_B.Ns += 2) {
    // MATLABSystem: '<S69>/MATLAB System'
    proc_control_B.mvmin[proc_control_B.Ns] = proc_control_B.tmin * static_cast<
      real_T>(!proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns]);
    proc_control_B.residue =
      !proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns + 1];

    // MATLABSystem: '<S69>/MATLAB System'
    proc_control_B.mvmin[proc_control_B.Ns + 1] = proc_control_B.tmin *
      proc_control_B.residue;

    // MATLABSystem: '<S69>/MATLAB System'
    proc_control_B.mvmax[proc_control_B.Ns] = proc_control_B.tmax *
      static_cast<real_T>
      (!proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns]);
    proc_control_B.mvmax[proc_control_B.Ns + 1] = proc_control_B.tmax *
      proc_control_B.residue;
  }

  memcpy(&proc_control_B.ywt[0], &proc_control_B.imvec[0], 13U * sizeof(real_T));
  for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
    // SignalConversion generated from: '<S69>/MATLAB System'
    proc_control_B.mvwt[proc_control_B.Ns] =
      proc_control_B.u_scale[proc_control_B.Ns];

    // SignalConversion generated from: '<S69>/MATLAB System'
    proc_control_B.dmwwt[proc_control_B.Ns] =
      proc_control_B.U_f1[proc_control_B.Ns];

    // SignalConversion generated from: '<S69>/MATLAB System'
    proc_control_B.thrustersStatus[proc_control_B.Ns] =
      !proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns];
  }

  proc_control_B.p = proc_control_B.p_h;
  proc_control_B.m = proc_control_B.m_a;

  // End of Outputs for SubSystem: '<S5>/If Action Subsystem'
  if ((&proc_control_M)->Timing.TaskCounters.TID[1] == 0) {
    // MATLABSystem: '<S245>/SourceBlock'
    proc_control_B.b_value_e = Sub_proc_control_532.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_g_b);

    // Outputs for Enabled SubSystem: '<S245>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S246>/Enable'

    // Start for MATLABSystem: '<S245>/SourceBlock'
    if (proc_control_B.b_value_e) {
      // SignalConversion generated from: '<S246>/In1'
      proc_control_B.In1_l = proc_control_B.rtb_SourceBlock_o2_g_b;
    }

    // End of Start for MATLABSystem: '<S245>/SourceBlock'
    // End of Outputs for SubSystem: '<S245>/Enabled Subsystem'

    // Gain: '<S236>/Gain'
    proc_control_B.Gain[0] = proc_control_P.Gain_Gain_er *
      proc_control_B.In1_l.angular.x;
    proc_control_B.Gain[1] = proc_control_P.Gain_Gain_er *
      proc_control_B.In1_l.angular.y;
    proc_control_B.Gain[2] = proc_control_P.Gain_Gain_er *
      proc_control_B.In1_l.angular.z;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // MATLABSystem: '<S247>/SourceBlock'
    proc_control_B.SourceBlock_o1 = Sub_proc_control_572.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_j_l);

    // Outputs for Enabled SubSystem: '<S247>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S248>/Enable'

    if (proc_control_B.SourceBlock_o1) {
      // SignalConversion generated from: '<S248>/In1' incorporates:
      //   MATLABSystem: '<S247>/SourceBlock'

      proc_control_B.In1_i = proc_control_B.rtb_SourceBlock_o2_j_l;
    }

    // End of Outputs for SubSystem: '<S247>/Enabled Subsystem'
  }

  // SwitchCase: '<S7>/Switch Case' incorporates:
  //   Concatenate: '<S250>/Matrix Concatenate'
  //   Constant: '<S250>/Constant'
  //   Logic: '<S238>/OR'
  //   MATLABSystem: '<S251>/Rotation Trajectory'
  //   MATLABSystem: '<S252>/SourceBlock'
  //   MATLABSystem: '<S254>/Polynomial Trajectory'
  //   MATLABSystem: '<S45>/MATLAB System'
  //   Selector: '<S250>/Selector1'
  //   Selector: '<S251>/Selector'
  //   Selector: '<S251>/Selector1'
  //
  proc_control_B.rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem;
  switch (proc_control_B.mode) {
   case 19:
   case 20:
   case 21:
    proc_control_B.rtAction = 0;
    break;

   case 10:
    proc_control_B.rtAction = 1;
    break;

   case 11:
   case 30:
   case 31:
   case 40:
   case 41:
    proc_control_B.rtAction = 2;
    break;

   default:
    proc_control_B.rtAction = 3;
    break;
  }

  proc_control_DW.SwitchCase_ActiveSubsystem = proc_control_B.rtAction;
  switch (proc_control_B.rtAction) {
   case 0:
    // Outputs for IfAction SubSystem: '<S7>/SpaceNav' incorporates:
    //   ActionPort: '<S235>/Action Port'

    // SignalConversion generated from: '<S235>/Transpose' incorporates:
    //   Constant: '<S235>/Constant'

    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 7; proc_control_B.Ns_i++)
    {
      proc_control_B.imvec[proc_control_B.Ns_i] =
        proc_control_P.Constant_Value_l4[proc_control_B.Ns_i];
    }

    proc_control_B.imvec[7] = proc_control_B.In1_l.linear.x;
    proc_control_B.imvec[8] = proc_control_B.In1_l.linear.y;
    proc_control_B.imvec[9] = proc_control_B.In1_l.linear.z;
    proc_control_B.imvec[10] = proc_control_B.Gain[0];
    proc_control_B.imvec[11] = proc_control_B.Gain[1];
    proc_control_B.imvec[12] = proc_control_B.Gain[2];

    // End of SignalConversion generated from: '<S235>/Transpose'

    // MATLAB Function: '<S235>/MATLAB Function' incorporates:
    //   Math: '<S235>/Transpose'

    for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
         proc_control_B.base_index++) {
      proc_control_B.nz = proc_control_B.base_index * 10;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 10; proc_control_B.b_k++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.nz +
          proc_control_B.b_k] = proc_control_B.imvec[proc_control_B.base_index];
      }
    }

    // End of MATLAB Function: '<S235>/MATLAB Function'

    // Merge generated from: '<S7>/Merge' incorporates:
    //   Constant: '<S235>/Constant2'
    //   SignalConversion generated from: '<S235>/Out1'

    proc_control_B.Reset = proc_control_P.Constant2_Value_h;

    // Merge generated from: '<S7>/Merge' incorporates:
    //   Constant: '<S235>/Constant3'
    //   SignalConversion generated from: '<S235>/Out1'

    proc_control_B.NewDvlMsg = proc_control_P.Constant3_Value_i;
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 7; proc_control_B.Ns_i++)
    {
      // Merge generated from: '<S7>/Merge' incorporates:
      //   Math: '<S235>/Transpose'
      //   SignalConversion generated from: '<S235>/Out1'

      proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns_i] =
        proc_control_B.imvec[proc_control_B.Ns_i];
    }

    // End of Outputs for SubSystem: '<S7>/SpaceNav'
    break;

   case 1:
    // Outputs for IfAction SubSystem: '<S7>/ProcPlanner Trajectory' incorporates:
    //   ActionPort: '<S233>/Action Port'

    // RelationalOperator: '<S241>/Compare' incorporates:
    //   Constant: '<S241>/Constant'

    proc_control_B.b_value_e = (static_cast<int32_T>
      (proc_control_B.SourceBlock_o1) > static_cast<int32_T>
      (proc_control_P.Constant_Value_pl));

    // SignalConversion generated from: '<S233>/MATLAB System'
    proc_control_B.DataStoreRead[0] = proc_control_B.WorldPosition[0];
    proc_control_B.DataStoreRead[1] = proc_control_B.WorldPosition[1];
    proc_control_B.DataStoreRead[2] = proc_control_B.WorldPosition[2];
    proc_control_B.DataStoreRead[3] = proc_control_B.qS2W[0];
    proc_control_B.DataStoreRead[4] = proc_control_B.qS2W[1];
    proc_control_B.DataStoreRead[5] = proc_control_B.qS2W[2];
    proc_control_B.DataStoreRead[6] = proc_control_B.qS2W[3];
    proc_control_B.DataStoreRead[7] = proc_control_B.BodyVelocity[0];
    proc_control_B.DataStoreRead[10] = proc_control_B.AngularRate[0];
    proc_control_B.DataStoreRead[8] = proc_control_B.BodyVelocity[1];
    proc_control_B.DataStoreRead[11] = proc_control_B.AngularRate[1];
    proc_control_B.DataStoreRead[9] = proc_control_B.BodyVelocity[2];
    proc_control_B.DataStoreRead[12] = proc_control_B.AngularRate[2];

    // Merge generated from: '<S7>/Merge' incorporates:
    //   BusCreator generated from: '<S233>/MATLAB System'
    //   MATLABSystem: '<S233>/MATLAB System'
    //   MATLABSystem: '<S45>/MATLAB System'
    //   RelationalOperator: '<S240>/FixPt Relational Operator'
    //   UnitDelay: '<S240>/Delay Input1'
    //  *
    //  Block description for '<S240>/Delay Input1':
    //
    //   Store in Global RAM

    pro_ProcPlannerManager_stepImpl(&proc_control_DW.obj_l, (static_cast<int32_T>
      (proc_control_B.b_value_e) > static_cast<int32_T>
      (proc_control_DW.DelayInput1_DSTATE)), proc_control_B.In1_i.transforms,
      proc_control_B.In1_i.transforms_SL_Info.ReceivedLength,
      proc_control_B.In1_i.velocities, proc_control_DW.obj_i.m_trajClear,
      proc_control_B.DataStoreRead, proc_control_B.linearTol,
      proc_control_B.angularTol, proc_control_B.timeInTol,
      proc_control_B.CostFcn_workspace_runtimedata.ref, &proc_control_B.Reset,
      &proc_control_B.NewDvlMsg, proc_control_B.TmpSignalConversionAtMATLAB);

    // Update for UnitDelay: '<S240>/Delay Input1'
    //
    //  Block description for '<S240>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = proc_control_B.b_value_e;

    // End of Outputs for SubSystem: '<S7>/ProcPlanner Trajectory'
    break;

   case 2:
    if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
      // InitializeConditions for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
      //   ActionPort: '<S238>/Action Port'

      // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
      //   Delay: '<S238>/Delay'

      proc_control_DW.Delay_DSTATE_g = proc_control_P.Delay_InitialCondition_az;

      // End of InitializeConditions for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 

      // SystemReset for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
      //   ActionPort: '<S238>/Action Port'

      //  Fonction Reset
      //  Initialize / reset discrete-state properties
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 18; proc_control_B.Ns++) {
        // SystemReset for SwitchCase: '<S7>/Switch Case' incorporates:
        //   MATLABSystem: '<S238>/MATLAB System'
        //
        proc_control_DW.obj_f.poseList[proc_control_B.Ns] = 999.0;
      }

      // SystemReset for SwitchCase: '<S7>/Switch Case' incorporates:
      //   DiscreteIntegrator: '<S251>/Discrete-Time Integrator'
      //   MATLABSystem: '<S238>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++) {
        proc_control_DW.obj_f.poseList[proc_control_B.Ns] =
          tmp_5[proc_control_B.nz];
        proc_control_B.Ns += 2;
      }

      // initCond(1,1:7);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_DW.obj_f.initcond[proc_control_B.Ns] =
          tmp_6[proc_control_B.Ns];
      }

      proc_control_DW.obj_f.i = 2.0;

      // SystemReset for Resettable SubSystem: '<S238>/Resettable Subsystem'
      proc_control_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_P.DiscreteTimeIntegrator_IC;

      // End of SystemReset for SubSystem: '<S238>/Resettable Subsystem'
      // End of SystemReset for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    }

    // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
    //   ActionPort: '<S238>/Action Port'

    // MATLABSystem: '<S252>/SourceBlock'
    proc_control_B.b_value_e = Sub_proc_control_589.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_ne_h);

    // Outputs for Enabled SubSystem: '<S238>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S249>/Enable'

    // Outputs for Enabled SubSystem: '<S252>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S255>/Enable'

    if (proc_control_B.b_value_e) {
      // DataTypeConversion: '<S249>/Data Type Conversion'
      proc_control_B.DataTypeConversion[0] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.position.x;
      proc_control_B.DataTypeConversion[1] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.position.y;
      proc_control_B.DataTypeConversion[2] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.position.z;
      proc_control_B.DataTypeConversion[3] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.orientation.z;
      proc_control_B.DataTypeConversion[4] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.orientation.y;
      proc_control_B.DataTypeConversion[5] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.orientation.x;

      // DataTypeConversion: '<S249>/Data Type Conversion1'
      proc_control_B.DataTypeConversion1[0] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.frame;
      proc_control_B.DataTypeConversion1[1] =
        proc_control_B.rtb_SourceBlock_o2_ne_h.speed;

      // DataTypeConversion: '<S249>/Data Type Conversion2'
      proc_control_B.DataTypeConversion2 =
        proc_control_B.rtb_SourceBlock_o2_ne_h.fine;
    }

    // End of Outputs for SubSystem: '<S252>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S238>/Enabled Subsystem'

    // SignalConversion generated from: '<S238>/MATLAB System' incorporates:
    //   MATLABSystem: '<S252>/SourceBlock'
    //
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 6; proc_control_B.Ns_i++)
    {
      proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.Ns_i] =
        proc_control_B.DataTypeConversion[proc_control_B.Ns_i];
    }

    proc_control_B.TmpSignalConversionAtMATL_d[6] =
      proc_control_B.DataTypeConversion1[0];
    proc_control_B.TmpSignalConversionAtMATL_d[7] =
      proc_control_B.DataTypeConversion1[1];
    proc_control_B.TmpSignalConversionAtMATL_d[8] =
      proc_control_B.DataTypeConversion2;

    // SignalConversion generated from: '<S238>/MATLAB System'
    proc_control_B.TmpSignalConversionAtMATLAB[0] =
      proc_control_B.WorldPosition[0];
    proc_control_B.TmpSignalConversionAtMATLAB[1] =
      proc_control_B.WorldPosition[1];
    proc_control_B.TmpSignalConversionAtMATLAB[2] =
      proc_control_B.WorldPosition[2];

    // MATLABSystem: '<S238>/MATLAB System' incorporates:
    //   Constant: '<S238>/Constant'
    //   Delay: '<S238>/Delay'
    //   MATLABSystem: '<S252>/SourceBlock'
    //   MATLABSystem: '<S45>/MATLAB System'
    //   SignalConversion generated from: '<S238>/MATLAB System'
    //
    //  Main appeller à chaque exécution
    //  Suppression du buffer.
    //  ======================================================================== 
    //  Sous Routines
    // ========================================================================== 
    //  Fonction qui interprete les message ROS
    if (proc_control_P.Constant_Value_ao == 1.0) {
      //  supprimer le buffer de way points
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++) {
        proc_control_DW.obj_f.poseList[proc_control_B.Ns + 1] = 999.0;
        proc_control_B.Ns += 2;
      }

      proc_control_DW.obj_f.i = 2.0;
    }

    //  Ajout d'un waypoint provenant de ROS.
    if (proc_control_B.b_value_e && (proc_control_DW.obj_f.i <= 2.0)) {
      // ========================================================================== 
      //  Fonction qui interprete les waypoints reçu par ROS
      //  Determiner le quaternion en fonction des angles d'euler.
      //  Orde de rotation : ZYX.
      //  Reel
      //  Information sur le nouveau waypoints
      memset(&proc_control_B.twpt[0], 0, 9U * sizeof(real_T));
      proc_control_B.twpt[7] = proc_control_B.DataTypeConversion1[1];

      //  Information de la pose précédente
      //  LastPosition
      //  LastQuaternion
      //  transformer les angle d'euler quaternions
      proc_control_B.n_c = 0.017453292519943295 *
        proc_control_B.TmpSignalConversionAtMATL_d[3] / 2.0;
      proc_control_B.sincos_o1[0] = proc_control_B.n_c;
      proc_control_B.rtb_sincos_o2_idx_0 = proc_control_B.n_c;
      proc_control_B.n_c = 0.017453292519943295 *
        proc_control_B.TmpSignalConversionAtMATL_d[4] / 2.0;
      proc_control_B.sincos_o1[1] = proc_control_B.n_c;
      proc_control_B.rtb_sincos_o2_idx_1 = proc_control_B.n_c;
      proc_control_B.n_c = 0.017453292519943295 *
        proc_control_B.TmpSignalConversionAtMATL_d[5] / 2.0;
      proc_control_B.rtb_sincos_o2_idx_0 = cos
        (proc_control_B.rtb_sincos_o2_idx_0);
      proc_control_B.sincos_o1[0] = sin(proc_control_B.sincos_o1[0]);
      proc_control_B.rtb_sincos_o2_idx_1 = cos
        (proc_control_B.rtb_sincos_o2_idx_1);
      proc_control_B.sincos_o1[1] = sin(proc_control_B.sincos_o1[1]);
      proc_control_B.rtb_sincos_o2_idx_2 = cos(proc_control_B.n_c);
      proc_control_B.sincos_o1[2] = sin(proc_control_B.n_c);
      tmp_2 = _mm_set_pd(-1.0, 1.0);
      _mm_storeu_pd(&proc_control_B.n[0], _mm_add_pd(_mm_mul_pd(_mm_mul_pd
        (_mm_set1_pd(proc_control_B.rtb_sincos_o2_idx_0), _mm_set1_pd
         (proc_control_B.rtb_sincos_o2_idx_1)), _mm_set_pd
        (proc_control_B.sincos_o1[2], proc_control_B.rtb_sincos_o2_idx_2)),
        _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.sincos_o1[0]),
        _mm_set1_pd(proc_control_B.sincos_o1[1])), _mm_set_pd
        (proc_control_B.rtb_sincos_o2_idx_2, proc_control_B.sincos_o1[2])),
                   tmp_2)));
      _mm_storeu_pd(&proc_control_B.n[2], _mm_add_pd(_mm_mul_pd(_mm_mul_pd
        (_mm_set_pd(proc_control_B.sincos_o1[0],
                    proc_control_B.rtb_sincos_o2_idx_0), _mm_set_pd
         (proc_control_B.rtb_sincos_o2_idx_1, proc_control_B.sincos_o1[1])),
        _mm_set1_pd(proc_control_B.rtb_sincos_o2_idx_2)), _mm_mul_pd(_mm_mul_pd
        (_mm_mul_pd(_mm_set_pd(proc_control_B.rtb_sincos_o2_idx_0,
        proc_control_B.sincos_o1[0]), _mm_set_pd(proc_control_B.sincos_o1[1],
        proc_control_B.rtb_sincos_o2_idx_1)), _mm_set1_pd
         (proc_control_B.sincos_o1[2])), tmp_2)));

      //  calculer
      //  quaternion partie scalaire
      //  quaternion partie vectoriel
      proc_control_B.linearScaling = 0.0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k++)
      {
        proc_control_B.linearScaling += proc_control_DW.obj_f.poseList
          [(((proc_control_B.b_k + 4) << 1) + static_cast<int32_T>
            (proc_control_DW.obj_f.i - 1.0)) - 1] *
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.b_k];
      }

      proc_control_B.i = 2.0 * proc_control_B.linearScaling;
      proc_control_B.linearScaling = 0.0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k++)
      {
        proc_control_B.Product3_l = proc_control_DW.obj_f.poseList
          [(((proc_control_B.b_k + 4) << 1) + static_cast<int32_T>
            (proc_control_DW.obj_f.i - 1.0)) - 1];
        proc_control_B.linearScaling += proc_control_B.Product3_l *
          proc_control_B.Product3_l;
      }

      proc_control_B.Product_o = proc_control_DW.obj_f.poseList
        [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 5];
      proc_control_B.linearScaling = proc_control_B.Product_o *
        proc_control_B.Product_o - proc_control_B.linearScaling;
      proc_control_B.residue = proc_control_B.Product_o * 2.0;

      //  QuatRotate n'est pas compilable
      //  choisir sens du quaternion
      proc_control_B.TmpSignalConversionAtSFunct[1] = proc_control_B.n[1];
      proc_control_B.TmpSignalConversionAtSFunct[2] = proc_control_B.n[2];
      proc_control_B.TmpSignalConversionAtSFunct[3] = proc_control_B.n[3];

      // ========================================================================== 
      //  Fonnction qui retoure le quaternion le plus court/long selon
      //  l'utilisateur
      proc_control_B.Product3_h = 0.0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 4; proc_control_B.b_k++)
      {
        proc_control_B.Product3_h += proc_control_DW.obj_f.poseList
          [(((proc_control_B.b_k + 3) << 1) + static_cast<int32_T>
            (proc_control_DW.obj_f.i - 1.0)) - 1] *
          proc_control_B.n[proc_control_B.b_k];
      }

      //  conjuger le quaternion au besoin
      if (((proc_control_B.Product3_h > 1.0) &&
           (proc_control_B.DataTypeConversion2 == 0.0)) ||
          ((proc_control_B.Product3_h < 1.0) &&
           (proc_control_B.DataTypeConversion2 == 1.0))) {
        proc_control_B.TmpSignalConversionAtSFunct[1] = -proc_control_B.n[1];
        proc_control_B.TmpSignalConversionAtSFunct[2] = -proc_control_B.n[2];
        proc_control_B.TmpSignalConversionAtSFunct[3] = -proc_control_B.n[3];
      }

      //  transformer le point en fonction du frame
      proc_control_B.n_c = rt_roundd_snf(proc_control_B.DataTypeConversion1[0]);
      if (proc_control_B.n_c < 256.0) {
        if (proc_control_B.n_c >= 0.0) {
          proc_control_B.u1_d = static_cast<uint8_T>(proc_control_B.n_c);
        } else {
          proc_control_B.u1_d = 0U;
        }
      } else {
        proc_control_B.u1_d = MAX_uint8_T;
      }

      switch (proc_control_B.u1_d) {
       case 0U:
        //  position et angle absolue
        proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_d[0];
        proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_d[1];
        proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_d[2];
        proc_control_B.twpt[3] = proc_control_B.n[0];
        proc_control_B.twpt[4] = proc_control_B.n[1];
        proc_control_B.twpt[5] = proc_control_B.n[2];
        proc_control_B.twpt[6] = proc_control_B.n[3];
        break;

       case 1U:
        //  position et angle relatif
        proc_control_B.n_c = proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 11];
        proc_control_B.rtb_sincos_o2_idx_2 = proc_control_DW.obj_f.poseList[
          static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 9];
        proc_control_B.q0_tmp = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 7];
        tmp_2 = _mm_set_pd(proc_control_B.rtb_sincos_o2_idx_2,
                           proc_control_B.q0_tmp);
        tmp_1 = _mm_set_pd(proc_control_B.n_c,
                           proc_control_B.rtb_sincos_o2_idx_2);
        tmp = _mm_set_pd(proc_control_B.q0_tmp, proc_control_B.n_c);
        tmp_0 = _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_sub_pd(_mm_mul_pd(tmp_1,
          _mm_set_pd(proc_control_B.TmpSignalConversionAtMATL_d[0],
                     proc_control_B.TmpSignalConversionAtMATL_d[2])), _mm_mul_pd
          (tmp, _mm_loadu_pd(&proc_control_B.TmpSignalConversionAtMATL_d[1]))),
          _mm_set1_pd(proc_control_B.residue)), _mm_add_pd(_mm_mul_pd(tmp_2,
          _mm_set1_pd(proc_control_B.i)), _mm_mul_pd(_mm_set1_pd
          (proc_control_B.linearScaling), _mm_loadu_pd
          (&proc_control_B.TmpSignalConversionAtMATL_d[0])))), _mm_set_pd
                           (proc_control_DW.obj_f.poseList[static_cast<int32_T>
                            (proc_control_DW.obj_f.i - 1.0) + 1],
                            proc_control_DW.obj_f.poseList[static_cast<int32_T>
                            (proc_control_DW.obj_f.i - 1.0) - 1]));
        _mm_storeu_pd(&proc_control_B.twpt[0], tmp_0);
        proc_control_B.twpt[2] = ((proc_control_B.q0_tmp *
          proc_control_B.TmpSignalConversionAtMATL_d[1] -
          proc_control_B.rtb_sincos_o2_idx_2 *
          proc_control_B.TmpSignalConversionAtMATL_d[0]) *
          proc_control_B.residue + (proc_control_B.n_c * proc_control_B.i +
          proc_control_B.linearScaling *
          proc_control_B.TmpSignalConversionAtMATL_d[2])) +
          proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 3];
        proc_control_B.twpt[3] = ((proc_control_B.Product_o * proc_control_B.n[0]
          - proc_control_B.q0_tmp * proc_control_B.TmpSignalConversionAtSFunct[1])
          - proc_control_B.rtb_sincos_o2_idx_2 *
          proc_control_B.TmpSignalConversionAtSFunct[2]) - proc_control_B.n_c *
          proc_control_B.TmpSignalConversionAtSFunct[3];
        tmp_2 = _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
          (proc_control_B.Product_o), _mm_loadu_pd
          (&proc_control_B.TmpSignalConversionAtSFunct[1])), _mm_mul_pd(tmp_2,
          _mm_set1_pd(proc_control_B.n[0]))), _mm_sub_pd(_mm_mul_pd(tmp_1,
          _mm_set_pd(proc_control_B.TmpSignalConversionAtSFunct[1],
                     proc_control_B.TmpSignalConversionAtSFunct[3])), _mm_mul_pd
          (tmp, _mm_loadu_pd(&proc_control_B.TmpSignalConversionAtSFunct[2]))));
        _mm_storeu_pd(&proc_control_B.twpt[4], tmp_2);
        proc_control_B.twpt[6] = (proc_control_B.Product_o *
          proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.n_c *
          proc_control_B.n[0]) + (proc_control_B.q0_tmp *
          proc_control_B.TmpSignalConversionAtSFunct[2] -
          proc_control_B.rtb_sincos_o2_idx_2 *
          proc_control_B.TmpSignalConversionAtSFunct[1]);
        break;

       case 2U:
        //  position relatif et angle absolue
        proc_control_B.d34 = proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 11];
        proc_control_B.d35 = proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 9];
        proc_control_B.d36 = proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 7];
        tmp_2 = _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_sub_pd(_mm_mul_pd
          (_mm_set_pd(proc_control_B.d34, proc_control_B.d35), _mm_set_pd
           (proc_control_B.TmpSignalConversionAtMATL_d[0],
            proc_control_B.TmpSignalConversionAtMATL_d[2])), _mm_mul_pd
          (_mm_set_pd(proc_control_B.d36, proc_control_B.d34), _mm_loadu_pd
           (&proc_control_B.TmpSignalConversionAtMATL_d[1]))), _mm_set1_pd
          (proc_control_B.residue)), _mm_add_pd(_mm_mul_pd(_mm_set_pd
          (proc_control_B.d35, proc_control_B.d36), _mm_set1_pd(proc_control_B.i)),
          _mm_mul_pd(_mm_set1_pd(proc_control_B.linearScaling), _mm_loadu_pd
                     (&proc_control_B.TmpSignalConversionAtMATL_d[0])))),
                           _mm_set_pd(proc_control_DW.obj_f.poseList[
          static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 1],
          proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) - 1]));
        _mm_storeu_pd(&proc_control_B.twpt[0], tmp_2);
        proc_control_B.twpt[2] = ((proc_control_B.d36 *
          proc_control_B.TmpSignalConversionAtMATL_d[1] - proc_control_B.d35 *
          proc_control_B.TmpSignalConversionAtMATL_d[0]) *
          proc_control_B.residue + (proc_control_B.d34 * proc_control_B.i +
          proc_control_B.linearScaling *
          proc_control_B.TmpSignalConversionAtMATL_d[2])) +
          proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 3];
        proc_control_B.twpt[3] = proc_control_B.n[0];
        proc_control_B.twpt[4] = proc_control_B.n[1];
        proc_control_B.twpt[5] = proc_control_B.n[2];
        proc_control_B.twpt[6] = proc_control_B.n[3];
        break;

       case 3U:
        //  position absolue et angle relatif
        proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_d[0];
        proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_d[1];
        proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_d[2];
        proc_control_B.base_index = static_cast<int32_T>(proc_control_DW.obj_f.i
          - 1.0) + 9;
        proc_control_B.Ns = static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0)
          + 7;
        proc_control_B.Ns_i = static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0)
          + 11;
        proc_control_B.i = proc_control_DW.obj_f.poseList[static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + 11];
        proc_control_B.linearScaling = proc_control_DW.obj_f.poseList[
          static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 7];
        proc_control_B.residue = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 9];
        proc_control_B.twpt[3] = ((proc_control_B.Product_o * proc_control_B.n[0]
          - proc_control_B.linearScaling *
          proc_control_B.TmpSignalConversionAtSFunct[1]) -
          proc_control_B.residue * proc_control_B.TmpSignalConversionAtSFunct[2])
          - proc_control_B.i * proc_control_B.TmpSignalConversionAtSFunct[3];
        tmp_2 = _mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
          (proc_control_B.Product_o), _mm_loadu_pd
          (&proc_control_B.TmpSignalConversionAtSFunct[1])), _mm_mul_pd
          (_mm_set_pd(proc_control_DW.obj_f.poseList[proc_control_B.base_index],
                      proc_control_DW.obj_f.poseList[proc_control_B.Ns]),
           _mm_set1_pd(proc_control_B.n[0]))), _mm_sub_pd(_mm_mul_pd(_mm_set_pd
          (proc_control_DW.obj_f.poseList[proc_control_B.Ns_i],
           proc_control_DW.obj_f.poseList[proc_control_B.base_index]),
          _mm_set_pd(proc_control_B.TmpSignalConversionAtSFunct[1],
                     proc_control_B.TmpSignalConversionAtSFunct[3])), _mm_mul_pd
          (_mm_set_pd(proc_control_DW.obj_f.poseList[proc_control_B.Ns],
                      proc_control_DW.obj_f.poseList[proc_control_B.Ns_i]),
           _mm_loadu_pd(&proc_control_B.TmpSignalConversionAtSFunct[2]))));
        _mm_storeu_pd(&proc_control_B.twpt[4], tmp_2);
        proc_control_B.twpt[6] = (proc_control_B.Product_o *
          proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.i *
          proc_control_B.n[0]) + (proc_control_B.linearScaling *
          proc_control_B.TmpSignalConversionAtSFunct[2] - proc_control_B.residue
          * proc_control_B.TmpSignalConversionAtSFunct[1]);
        break;

       default:
        //  retourne le point précédent
        proc_control_B.twpt[0] = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) - 1];
        proc_control_B.twpt[1] = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 1];
        proc_control_B.twpt[2] = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 3];
        proc_control_B.twpt[3] = proc_control_B.Product_o;
        proc_control_B.twpt[4] = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 7];
        proc_control_B.twpt[5] = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 9];
        proc_control_B.twpt[6] = proc_control_DW.obj_f.poseList
          [static_cast<int32_T>(proc_control_DW.obj_f.i - 1.0) + 11];
        break;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++) {
        proc_control_DW.obj_f.poseList[(static_cast<int32_T>
          (proc_control_DW.obj_f.i) + (proc_control_B.Ns << 1)) - 1] =
          proc_control_B.twpt[proc_control_B.Ns];
      }

      proc_control_DW.obj_f.i++;
    }

    //  Générer la trajectoire
    if (proc_control_DW.Delay_DSTATE_g) {
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++) {
        proc_control_B.nz = proc_control_B.Ns << 1;
        proc_control_DW.obj_f.poseList[proc_control_B.nz] =
          proc_control_DW.obj_f.poseList[(static_cast<int32_T>
          (proc_control_DW.obj_f.i - 1.0) + proc_control_B.nz) - 1];
        proc_control_DW.obj_f.poseList[proc_control_B.nz + 1] = 999.0;
      }

      proc_control_DW.obj_f.i = 2.0;
    }

    //  Reset Trajectoire
    if (proc_control_DW.obj_i.m_trajClear != 0.0) {
      // ========================================================================== 
      //  Fonction qui reset la trajectoire
      //  remove roll and pitch from initial condition
      tmp_2 = _mm_set1_pd(1.0 / sqrt(((proc_control_B.qS2W[0] *
        proc_control_B.qS2W[0] + proc_control_B.qS2W[1] * proc_control_B.qS2W[1])
        + proc_control_B.qS2W[2] * proc_control_B.qS2W[2]) +
        proc_control_B.qS2W[3] * proc_control_B.qS2W[3]));
      tmp_1 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.qS2W[0]), tmp_2);
      _mm_storeu_pd(&proc_control_B.n[0], tmp_1);
      tmp_2 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.qS2W[2]), tmp_2);
      _mm_storeu_pd(&proc_control_B.n[2], tmp_2);
      proc_control_B.i = (proc_control_B.n[1] * proc_control_B.n[3] +
                          proc_control_B.n[0] * proc_control_B.n[2]) * 2.0;
      proc_control_B.NewDvlMsg = (proc_control_B.i >= 0.99999999999999778);
      proc_control_B.newPressureMsg = (proc_control_B.i <= -0.99999999999999778);
      if (proc_control_B.NewDvlMsg) {
        proc_control_B.i = 1.0;
      }

      proc_control_B.Product3_h = proc_control_B.i;
      if (proc_control_B.newPressureMsg) {
        proc_control_B.Product3_h = -1.0;
      }

      proc_control_B.NewDvlMsg = (proc_control_B.NewDvlMsg ||
        proc_control_B.newPressureMsg);
      proc_control_B.residue = proc_control_B.n[0] * proc_control_B.n[0];
      proc_control_B.linearScaling = proc_control_B.n[1] * proc_control_B.n[1];
      proc_control_B.t10 = proc_control_B.n[2] * proc_control_B.n[2];
      proc_control_B.i = proc_control_B.n[3] * proc_control_B.n[3];
      proc_control_B.sincos_o1[0] = rt_atan2d_snf((proc_control_B.n[2] *
        proc_control_B.n[3] - proc_control_B.n[0] * proc_control_B.n[1]) * -2.0,
        ((proc_control_B.residue - proc_control_B.linearScaling) -
         proc_control_B.t10) + proc_control_B.i);
      proc_control_B.sincos_o1[1] = asin(proc_control_B.Product3_h);
      proc_control_B.sincos_o1[2] = rt_atan2d_snf((proc_control_B.n[1] *
        proc_control_B.n[2] - proc_control_B.n[0] * proc_control_B.n[3]) * -2.0,
        ((proc_control_B.residue + proc_control_B.linearScaling) -
         proc_control_B.t10) - proc_control_B.i);
      proc_control_B.nz = 0;
      if (proc_control_B.NewDvlMsg) {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
             proc_control_B.Ns_i++) {
          proc_control_B.nz++;
        }
      }

      if (proc_control_B.nz - 1 >= 0) {
        proc_control_B.sincos_o1[0] = 0.0;
      }

      proc_control_B.nz = 0;
      if (proc_control_B.NewDvlMsg) {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
             proc_control_B.Ns_i++) {
          proc_control_B.nz++;
        }
      }

      proc_control_B.g_size[0] = proc_control_B.nz;
      proc_control_B.nz = 0;
      if (proc_control_B.NewDvlMsg) {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
             proc_control_B.Ns_i++) {
          proc_control_B.nz++;
        }
      }

      proc_control_B.b_k = proc_control_B.nz;
      proc_control_B.nz = 0;
      if (proc_control_B.NewDvlMsg) {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
             proc_control_B.Ns_i++) {
          proc_control_B.nz++;
        }
      }

      if (proc_control_B.nz - 1 >= 0) {
        proc_control_B.b_x_data = proc_control_B.Product3_h;
      }

      proc_control_B.Ns = 0;
      if (proc_control_B.NewDvlMsg) {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
             proc_control_B.Ns_i++) {
          proc_control_B.Ns++;
        }
      }

      proc_control_B.b_j = proc_control_B.Ns - 1;
      for (proc_control_B.base_index = 0; proc_control_B.base_index <=
           proc_control_B.b_j; proc_control_B.base_index++) {
        if (rtIsNaN(proc_control_B.b_x_data)) {
          proc_control_B.b_x_data = (rtNaN);
        } else if (proc_control_B.b_x_data < 0.0) {
          proc_control_B.b_x_data = -1.0;
        } else {
          proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.nz;
           proc_control_B.Ns++) {
        proc_control_B.b_x_data *= 2.0;
      }

      if (proc_control_B.g_size[0] == proc_control_B.b_k) {
        proc_control_B.j_size[0] = proc_control_B.g_size[0];
        if (proc_control_B.g_size[0] - 1 >= 0) {
          proc_control_B.j_data = rt_atan2d_snf(proc_control_B.n[1],
            proc_control_B.n[0]);
        }
      } else {
        proc_control_B.Ns = 0;
        if (proc_control_B.NewDvlMsg) {
          for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
               proc_control_B.Ns_i++) {
            proc_control_B.Ns++;
          }
        }

        proc_control_B.n_size[0] = proc_control_B.Ns;
        proc_control_B.n_size_o[0] = proc_control_B.Ns;
        if (proc_control_B.Ns - 1 >= 0) {
          proc_control_B.n_data = proc_control_B.n[1];
          proc_control_B.n_data_j = proc_control_B.n[0];
        }

        proc_control_expand_atan2(&proc_control_B.n_data, proc_control_B.n_size,
          &proc_control_B.n_data_j, proc_control_B.n_size_o,
          &proc_control_B.j_data, proc_control_B.j_size);
      }

      proc_control_B.Ns = 0;
      if (proc_control_B.NewDvlMsg) {
        for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1;
             proc_control_B.Ns_i++) {
          proc_control_B.Ns++;
        }
      }

      proc_control_B.g_size[0] = proc_control_B.Ns;
      if (proc_control_B.nz == proc_control_B.j_size[0]) {
        if (proc_control_B.g_size[0] - 1 >= 0) {
          proc_control_B.sincos_o1[2] = proc_control_B.b_x_data *
            proc_control_B.j_data;
        }
      } else {
        proc_control_binary_expand_op(proc_control_B.sincos_o1,
          proc_control_B.g_size, &proc_control_B.b_x_data,
          &proc_control_B.j_data);
      }

      //  Retransformer en quaternion
      proc_control_B.n_c = proc_control_B.sincos_o1[0] * 0.0 / 2.0;
      proc_control_B.sincos_o1[0] = proc_control_B.n_c;
      proc_control_B.rtb_sincos_o2_idx_0 = proc_control_B.n_c;
      proc_control_B.n_c = proc_control_B.sincos_o1[1] * 0.0 / 2.0;
      proc_control_B.sincos_o1[1] = proc_control_B.n_c;
      proc_control_B.rtb_sincos_o2_idx_1 = proc_control_B.n_c;
      proc_control_B.n_c = proc_control_B.sincos_o1[2] / 2.0;
      proc_control_B.rtb_sincos_o2_idx_0 = cos
        (proc_control_B.rtb_sincos_o2_idx_0);
      proc_control_B.sincos_o1[0] = sin(proc_control_B.sincos_o1[0]);
      proc_control_B.sincos_o1[1] = sin(proc_control_B.sincos_o1[1]);
      tmp_2 = _mm_set1_pd(cos(proc_control_B.rtb_sincos_o2_idx_1));
      tmp_1 = _mm_set1_pd(sin(proc_control_B.n_c));
      tmp = _mm_set_pd(proc_control_B.sincos_o1[0],
                       proc_control_B.rtb_sincos_o2_idx_0);
      tmp_0 = _mm_set1_pd(proc_control_B.sincos_o1[1]);
      tmp_3 = _mm_set1_pd(cos(proc_control_B.n_c));
      _mm_storeu_pd(&proc_control_B.TmpSignalConversionAtMATLAB[3], _mm_add_pd
                    (_mm_mul_pd(_mm_mul_pd(tmp, tmp_2), tmp_3), _mm_mul_pd
                     (_mm_mul_pd(_mm_mul_pd(_mm_set_pd
        (proc_control_B.rtb_sincos_o2_idx_0, proc_control_B.sincos_o1[0]), tmp_0),
        tmp_1), _mm_set_pd(1.0, -1.0))));
      _mm_storeu_pd(&proc_control_B.TmpSignalConversionAtMATLAB[5], _mm_add_pd
                    (_mm_mul_pd(_mm_mul_pd(_mm_set_pd
        (proc_control_B.rtb_sincos_o2_idx_0, -proc_control_B.sincos_o1[0]),
        tmp_2), tmp_1), _mm_mul_pd(_mm_mul_pd(tmp, tmp_0), tmp_3)));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_DW.obj_f.initcond[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns];
      }

      //  definir les conditions initiaux
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++) {
        proc_control_DW.obj_f.poseList[proc_control_B.Ns + 1] = 999.0;
        proc_control_B.Ns += 2;
      }

      proc_control_DW.obj_f.poseList[14] = 0.0;
      proc_control_DW.obj_f.poseList[16] = 0.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++) {
        proc_control_DW.obj_f.poseList[proc_control_B.Ns] =
          proc_control_DW.obj_f.initcond[proc_control_B.nz];
        proc_control_DW.obj_f.poseList[proc_control_B.Ns + 1] =
          proc_control_DW.obj_f.initcond[proc_control_B.nz];
        proc_control_B.Ns += 2;
      }

      proc_control_DW.obj_f.poseList[15] = 1.0;
      proc_control_DW.obj_f.poseList[17] = 0.0;
      proc_control_DW.obj_f.i = 2.0;
    }

    // Outputs for Enabled SubSystem: '<S238>/Pre-traitement' incorporates:
    //   EnablePort: '<S250>/Enable'

    if (proc_control_B.b_value_e || (proc_control_DW.obj_i.m_trajClear != 0.0))
    {
      proc_control_B.MatrixConcatenate[0] = proc_control_P.Constant_Value_j55;

      // Math: '<S250>/Transpose' incorporates:
      //   Concatenate: '<S250>/Matrix Concatenate'
      //   Constant: '<S250>/Constant'
      //   MATLABSystem: '<S238>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++) {
        proc_control_B.Transpose_b[proc_control_B.nz] =
          proc_control_DW.obj_f.poseList[proc_control_B.Ns];
        proc_control_B.Transpose_b[proc_control_B.nz + 9] =
          proc_control_DW.obj_f.poseList[proc_control_B.Ns + 1];
        proc_control_B.Ns += 2;
      }

      // End of Math: '<S250>/Transpose'

      // Selector: '<S250>/Selector2' incorporates:
      //   Concatenate: '<S250>/Matrix Concatenate'
      //   Math: '<S250>/Transpose'

      proc_control_B.MatrixConcatenate[1] = proc_control_B.Transpose_b[16];

      // Selector: '<S250>/Selector' incorporates:
      //   Math: '<S250>/Transpose'
      //   Selector: '<S250>/Selector1'

      proc_control_B.Ns = 0;
      proc_control_B.nz = 0;
      proc_control_B.b_k = 0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 2; proc_control_B.i_g++)
      {
        proc_control_B.Selector[proc_control_B.Ns] =
          proc_control_B.Transpose_b[proc_control_B.nz];
        proc_control_B.Selector[proc_control_B.Ns + 1] =
          proc_control_B.Transpose_b[proc_control_B.nz + 1];
        proc_control_B.Selector[proc_control_B.Ns + 2] =
          proc_control_B.Transpose_b[proc_control_B.nz + 2];
        proc_control_B.Selector1[proc_control_B.b_k] =
          proc_control_B.Transpose_b[proc_control_B.nz + 3];
        proc_control_B.Selector1[proc_control_B.b_k + 1] =
          proc_control_B.Transpose_b[proc_control_B.nz + 4];
        proc_control_B.Selector1[proc_control_B.b_k + 2] =
          proc_control_B.Transpose_b[proc_control_B.nz + 5];
        proc_control_B.Selector1[proc_control_B.b_k + 3] =
          proc_control_B.Transpose_b[proc_control_B.nz + 6];
        proc_control_B.Ns += 3;
        proc_control_B.nz += 9;
        proc_control_B.b_k += 4;
      }

      // End of Selector: '<S250>/Selector'
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Selector: '<S250>/Selector4' incorporates:
        //   Math: '<S250>/Transpose'

        proc_control_B.Selector4[proc_control_B.Ns] =
          proc_control_B.Transpose_b[proc_control_B.Ns + 9];
      }
    }

    // End of Outputs for SubSystem: '<S238>/Pre-traitement'

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    if (proc_control_B.b_value_e &&
        (proc_control_PrevZCX.ResettableSubsystem_Reset_ZCE != POS_ZCSIG)) {
      // InitializeConditions for DiscreteIntegrator: '<S251>/Discrete-Time Integrator' 
      proc_control_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_P.DiscreteTimeIntegrator_IC;
    }

    proc_control_PrevZCX.ResettableSubsystem_Reset_ZCE =
      proc_control_B.b_value_e;

    // DiscreteIntegrator: '<S251>/Discrete-Time Integrator' incorporates:
    //   Concatenate: '<S250>/Matrix Concatenate'
    //   Constant: '<S250>/Constant'
    //   Constant: '<S251>/Constant'
    //   Logic: '<S238>/OR'
    //   MATLABSystem: '<S252>/SourceBlock'
    //   MATLABSystem: '<S45>/MATLAB System'
    //
    proc_control_B.n_c = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_P.Constant_Value_ht;

    // DiscreteIntegrator: '<S251>/Discrete-Time Integrator'
    proc_control_B.i = proc_control_B.n_c +
      proc_control_DW.DiscreteTimeIntegrator_DSTATE;

    // MATLABSystem: '<S251>/Rotation Trajectory' incorporates:
    //   Concatenate: '<S250>/Matrix Concatenate'
    //   MATLABSystem: '<S254>/Polynomial Trajectory'

    if (proc_control_DW.obj_p3.TunablePropsChanged) {
      proc_control_DW.obj_p3.TunablePropsChanged = false;
    }

    proc_control_B.Product3_l = proc_control_B.MatrixConcatenate[1] -
      proc_control_B.MatrixConcatenate[0];
    proc_control_B.linearScaling = 1.0 / proc_control_B.Product3_l;
    proc_control_B.Product3_h = (proc_control_B.i -
      proc_control_B.MatrixConcatenate[0]) * proc_control_B.linearScaling;
    if (proc_control_B.i < proc_control_B.MatrixConcatenate[0]) {
      proc_control_B.Product3_h = 0.0;
    }

    if (proc_control_B.i > proc_control_B.MatrixConcatenate[1]) {
      proc_control_B.Product3_h = 1.0;
    }

    if (proc_control_B.i < proc_control_B.MatrixConcatenate[0]) {
      proc_control_B.linearScaling = 0.0;
    }

    // MATLABSystem: '<S251>/Rotation Trajectory' incorporates:
    //   Concatenate: '<S250>/Matrix Concatenate'

    proc_control_B.scale = proc_control_B.linearScaling;
    if (proc_control_B.i > proc_control_B.MatrixConcatenate[1]) {
      proc_control_B.scale = 0.0;
    }

    // MATLABSystem: '<S251>/Rotation Trajectory' incorporates:
    //   Concatenate: '<S250>/Matrix Concatenate'

    proc_control_B.linearScaling = proc_control_B.Product3_h;
    if ((proc_control_B.Product3_h > 1.0) && (proc_control_B.Product3_h <
         1.0000000149011612)) {
      proc_control_B.linearScaling = 1.0;
    }

    if ((proc_control_B.Product3_h < 0.0) && (proc_control_B.Product3_h >
         -1.4901161193847656E-8)) {
      proc_control_B.linearScaling = 0.0;
    }

    // MATLABSystem: '<S251>/Rotation Trajectory' incorporates:
    //   Selector: '<S250>/Selector1'
    //   Selector: '<S251>/Selector'

    proc_control_B.Product_o = sqrt(((proc_control_B.Selector1[0] *
      proc_control_B.Selector1[0] + proc_control_B.Selector1[1] *
      proc_control_B.Selector1[1]) + proc_control_B.Selector1[2] *
      proc_control_B.Selector1[2]) + proc_control_B.Selector1[3] *
      proc_control_B.Selector1[3]);
    tmp_2 = _mm_set1_pd(proc_control_B.Product_o);
    tmp_1 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.Selector1[0]), tmp_2);

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);

    // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
    //   ActionPort: '<S238>/Action Port'

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    proc_control_B.Product1_hg = proc_control_B.dv25[0];
    proc_control_B.Product2_j = proc_control_B.dv25[1];
    tmp_1 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.Selector1[2]), tmp_2);

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);

    // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
    //   ActionPort: '<S238>/Action Port'

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    proc_control_B.oc = proc_control_B.dv25[0];
    proc_control_B.t10 = proc_control_B.dv25[1];
    tmp_2 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.Selector1[0]), tmp_2);

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    _mm_storeu_pd(&proc_control_B.dv25[0], tmp_2);

    // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
    //   ActionPort: '<S238>/Action Port'

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    // MATLABSystem: '<S251>/Rotation Trajectory' incorporates:
    //   Selector: '<S250>/Selector1'
    //   Selector: '<S251>/Selector'
    //   Selector: '<S251>/Selector1'

    proc_control_B.Product3_h = proc_control_B.Selector1[2] /
      proc_control_B.Product_o;
    proc_control_B.Product_o = proc_control_B.Selector1[3] /
      proc_control_B.Product_o;
    proc_control_B.expl_temp_gs = proc_contr_quaternionBase_slerp
      (proc_control_B.Product1_hg, proc_control_B.Product2_j, proc_control_B.oc,
       proc_control_B.t10, proc_control_B.dv25[0], proc_control_B.dv25[1],
       proc_control_B.Product3_h, proc_control_B.Product_o);
    proc_control_B.expl_temp_n = proc_con_quaternionBase_slerp_p
      (proc_control_B.Product1_hg, proc_control_B.Product2_j, proc_control_B.oc,
       proc_control_B.t10, proc_control_B.dv25[0], proc_control_B.dv25[1],
       proc_control_B.Product3_h, proc_control_B.Product_o);
    proc_control_B.expl_temp_l0 = proc_co_quaternionBase_slerp_pr
      (proc_control_B.Product1_hg, proc_control_B.Product2_j, proc_control_B.oc,
       proc_control_B.t10, proc_control_B.dv25[0], proc_control_B.dv25[1],
       proc_control_B.Product3_h, proc_control_B.Product_o,
       proc_control_B.linearScaling);
    proc_control_quaternionBase_log(((proc_control_B.expl_temp_gs.a *
      proc_control_B.expl_temp_n.a - -proc_control_B.expl_temp_gs.b *
      proc_control_B.expl_temp_n.b) - -proc_control_B.expl_temp_gs.c *
      proc_control_B.expl_temp_n.c) - -proc_control_B.expl_temp_gs.d *
      proc_control_B.expl_temp_n.d, ((proc_control_B.expl_temp_gs.a *
      proc_control_B.expl_temp_n.b + -proc_control_B.expl_temp_gs.b *
      proc_control_B.expl_temp_n.a) + -proc_control_B.expl_temp_gs.c *
      proc_control_B.expl_temp_n.d) - -proc_control_B.expl_temp_gs.d *
      proc_control_B.expl_temp_n.c, ((proc_control_B.expl_temp_gs.a *
      proc_control_B.expl_temp_n.c - -proc_control_B.expl_temp_gs.b *
      proc_control_B.expl_temp_n.d) + -proc_control_B.expl_temp_gs.c *
      proc_control_B.expl_temp_n.a) + -proc_control_B.expl_temp_gs.d *
      proc_control_B.expl_temp_n.b, ((proc_control_B.expl_temp_gs.a *
      proc_control_B.expl_temp_n.d + -proc_control_B.expl_temp_gs.b *
      proc_control_B.expl_temp_n.c) - -proc_control_B.expl_temp_gs.c *
      proc_control_B.expl_temp_n.b) + -proc_control_B.expl_temp_gs.d *
      proc_control_B.expl_temp_n.a, &proc_control_B.linearScaling,
      &proc_control_B.residue, &proc_control_B.Product3_h,
      &proc_control_B.Product_o);

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    tmp_2 = _mm_set_pd(1.0, -1.0);

    // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
    //   ActionPort: '<S238>/Action Port'

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_mul_pd(_mm_sub_pd
      (_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_set1_pd
      (proc_control_B.expl_temp_l0.a), _mm_set_pd(proc_control_B.residue,
      proc_control_B.linearScaling)), _mm_mul_pd(_mm_mul_pd(_mm_set1_pd
      (proc_control_B.expl_temp_l0.b), _mm_set_pd(proc_control_B.linearScaling,
      proc_control_B.residue)), tmp_2)), _mm_mul_pd(_mm_mul_pd(_mm_set1_pd
      (proc_control_B.expl_temp_l0.c), _mm_set_pd(proc_control_B.Product_o,
      proc_control_B.Product3_h)), tmp_2)), _mm_mul_pd(_mm_set1_pd
      (proc_control_B.expl_temp_l0.d), _mm_set_pd(proc_control_B.Product3_h,
      proc_control_B.Product_o))), _mm_set1_pd(proc_control_B.scale)),
      _mm_set1_pd(2.0)));

    // MATLABSystem: '<S251>/Rotation Trajectory'
    proc_control_B.oc = (((proc_control_B.expl_temp_l0.a *
      proc_control_B.Product3_h - proc_control_B.expl_temp_l0.b *
      proc_control_B.Product_o) + proc_control_B.expl_temp_l0.c *
                          proc_control_B.linearScaling) +
                         proc_control_B.expl_temp_l0.d * proc_control_B.residue)
      * proc_control_B.scale * 2.0;
    proc_control_B.linearScaling = (((proc_control_B.expl_temp_l0.a *
      proc_control_B.Product_o + proc_control_B.expl_temp_l0.b *
      proc_control_B.Product3_h) - proc_control_B.expl_temp_l0.c *
      proc_control_B.residue) + proc_control_B.expl_temp_l0.d *
      proc_control_B.linearScaling) * proc_control_B.scale * 2.0;

    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    proc_control_B.sincos_o1[0] = ((proc_control_B.dv25[0] *
      -proc_control_B.expl_temp_l0.b + proc_control_B.dv25[1] *
      proc_control_B.expl_temp_l0.a) + proc_control_B.oc *
      -proc_control_B.expl_temp_l0.d) - proc_control_B.linearScaling *
      -proc_control_B.expl_temp_l0.c;
    proc_control_B.sincos_o1[1] = ((proc_control_B.dv25[0] *
      -proc_control_B.expl_temp_l0.c - proc_control_B.dv25[1] *
      -proc_control_B.expl_temp_l0.d) + proc_control_B.oc *
      proc_control_B.expl_temp_l0.a) + proc_control_B.linearScaling *
      -proc_control_B.expl_temp_l0.b;
    proc_control_B.sincos_o1[2] = ((proc_control_B.dv25[0] *
      -proc_control_B.expl_temp_l0.d + proc_control_B.dv25[1] *
      -proc_control_B.expl_temp_l0.c) - proc_control_B.oc *
      -proc_control_B.expl_temp_l0.b) + proc_control_B.linearScaling *
      proc_control_B.expl_temp_l0.a;

    // MATLABSystem: '<S254>/Polynomial Trajectory' incorporates:
    //   Concatenate: '<S250>/Matrix Concatenate'
    //   Selector: '<S250>/Selector'

    proc_control_B.newPressureMsg = false;
    proc_control_B.p_ha = true;
    proc_control_B.b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.b_k < 6)) {
      if (!(proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.b_k] ==
            proc_control_P.PolynomialTrajectory_VelocityBo[proc_control_B.b_k]))
      {
        proc_control_B.p_ha = false;
        exitg1 = true;
      } else {
        proc_control_B.b_k++;
      }
    }

    if (proc_control_B.p_ha) {
      proc_control_B.newPressureMsg = true;
    }

    if (!proc_control_B.newPressureMsg) {
      if (proc_control_DW.obj_m.isInitialized == 1) {
        proc_control_DW.obj_m.TunablePropsChanged = true;
        proc_control_DW.obj_m.tunablePropertyChanged[3] = true;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.Ns] =
          proc_control_P.PolynomialTrajectory_VelocityBo[proc_control_B.Ns];
      }
    }

    if (proc_control_DW.obj_m.TunablePropsChanged) {
      proc_control_DW.obj_m.TunablePropsChanged = false;
      if (proc_control_DW.obj_m.tunablePropertyChanged[3] ||
          proc_control_DW.obj_m.tunablePropertyChanged[4]) {
        proc_control_B.Reset = true;
      } else {
        proc_control_B.Reset = false;
      }

      proc_control_DW.obj_m.PPFormUpdatedNeeded = proc_control_B.Reset;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 5; proc_control_B.Ns++) {
        proc_control_DW.obj_m.tunablePropertyChanged[proc_control_B.Ns] = false;
      }
    }

    guard1 = false;
    if (proc_control_DW.obj_m.PPFormUpdatedNeeded) {
      guard1 = true;
    } else {
      proc_control_B.newPressureMsg = false;
      proc_control_B.Reset = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 6)) {
        if (!(proc_control_B.Selector[proc_control_B.b_k] ==
              proc_control_DW.obj_m.PrevOptInputs.f1[proc_control_B.b_k])) {
          proc_control_B.Reset = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (!proc_control_B.Reset) {
        proc_control_B.p_ha = false;
      } else {
        proc_control_B.p_ha = true;
        proc_control_B.b_k = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.b_k < 2)) {
          if (!(proc_control_B.MatrixConcatenate[proc_control_B.b_k] ==
                proc_control_DW.obj_m.PrevOptInputs.f2[proc_control_B.b_k])) {
            proc_control_B.p_ha = false;
            exitg1 = true;
          } else {
            proc_control_B.b_k++;
          }
        }
      }

      if (proc_control_B.p_ha) {
        proc_control_B.newPressureMsg = true;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_DW.obj_m.PrevOptInputs.f1[proc_control_B.Ns] =
          proc_control_B.Selector[proc_control_B.Ns];
      }

      proc_control_DW.obj_m.PrevOptInputs.f2[0] =
        proc_control_B.MatrixConcatenate[0];
      proc_control_DW.obj_m.PrevOptInputs.f2[1] =
        proc_control_B.MatrixConcatenate[1];
      if (!proc_control_B.newPressureMsg) {
        guard1 = true;
      }
    }

    if (guard1) {
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 3; proc_control_B.b_j++)
      {
        proc_control_B.dv23[0] = proc_control_B.Selector[proc_control_B.b_j];
        proc_control_B.dv24[0] =
          proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.b_j];
        proc_control_B.dv23[1] = proc_control_B.Selector[proc_control_B.b_j + 3];
        proc_control_B.dv24[1] =
          proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.b_j + 3];
        proc_contro_generateCubicCoeffs(proc_control_B.dv23, proc_control_B.dv24,
          proc_control_B.Product3_l, proc_control_B.n);
        proc_control_B.coefMat[proc_control_B.b_j] = proc_control_B.n[0];
        proc_control_B.coefMat[proc_control_B.b_j + 3] = proc_control_B.n[1];
        proc_control_B.coefMat[proc_control_B.b_j + 6] = proc_control_B.n[2];
        proc_control_B.coefMat[proc_control_B.b_j + 9] = proc_control_B.n[3];
      }

      pr_addFlatSegmentsToPPFormParts(proc_control_B.MatrixConcatenate,
        proc_control_B.coefMat, proc_control_B.n, proc_control_B.modCoeffs);
      PolyTrajSys_updateStoredPPForms(&proc_control_DW.obj_m, proc_control_B.n,
        proc_control_B.modCoeffs);
      proc_control_DW.obj_m.PPFormUpdatedNeeded = false;
    }

    proc_control_B.Product3_h = proc_control_B.i;
    if (proc_control_B.i == proc_control_DW.obj_m.PPStruct.breaks[2]) {
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 1; proc_control_B.Ns_i
           ++) {
        proc_control_B.Product3_h = proc_control_DW.obj_m.PPStruct.breaks[2] -
          2.2204460492503131E-15;
      }
    }

    // Update for DiscreteIntegrator: '<S251>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S254>/Polynomial Trajectory'
    //
    proc_control_DW.DiscreteTimeIntegrator_DSTATE = proc_control_B.n_c +
      proc_control_B.i;

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'

    // MATLABSystem: '<S238>/MATLAB System1'
    if (proc_control_DW.obj.linearConvergence !=
        proc_control_P.MATLABSystem1_linearConvergence) {
      proc_control_DW.obj.linearConvergence =
        proc_control_P.MATLABSystem1_linearConvergence;
    }

    if (proc_control_DW.obj.quaternionConvergence !=
        proc_control_P.MATLABSystem1_quaternionConverg) {
      proc_control_DW.obj.quaternionConvergence =
        proc_control_P.MATLABSystem1_quaternionConverg;
    }

    if (proc_control_DW.obj.TargetThreshold !=
        proc_control_P.MATLABSystem1_TargetThreshold) {
      proc_control_DW.obj.TargetThreshold =
        proc_control_P.MATLABSystem1_TargetThreshold;
    }

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    // MATLABSystem: '<S254>/Polynomial Trajectory'
    proc_control_ppval(proc_control_DW.obj_m.PPStruct.breaks,
                       proc_control_DW.obj_m.PPStruct.coefs, proc_control_B.i,
                       proc_control_B.dv20);
    proc_control_ppval(proc_control_DW.obj_m.PPDStruct.breaks,
                       proc_control_DW.obj_m.PPDStruct.coefs,
                       proc_control_B.Product3_h, proc_control_B.dv21);

    // Start for MATLABSystem: '<S238>/MATLAB System1' incorporates:
    //   MATLABSystem: '<S251>/Rotation Trajectory'
    //   MATLABSystem: '<S254>/Polynomial Trajectory'
    //   SignalConversion generated from: '<S238>/Transpose2'
    //
    proc_control_B.DataStoreRead[0] = proc_control_B.dv20[0];
    proc_control_B.DataStoreRead[1] = proc_control_B.dv20[1];
    proc_control_B.DataStoreRead[2] = proc_control_B.dv20[2];
    proc_control_B.DataStoreRead[3] = proc_control_B.expl_temp_l0.a;
    proc_control_B.DataStoreRead[4] = proc_control_B.expl_temp_l0.b;
    proc_control_B.DataStoreRead[5] = proc_control_B.expl_temp_l0.c;
    proc_control_B.DataStoreRead[6] = proc_control_B.expl_temp_l0.d;
    proc_control_B.DataStoreRead[7] = proc_control_B.dv21[0];
    proc_control_B.DataStoreRead[10] = proc_control_B.sincos_o1[0];

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    proc_control_B.z_c[0] = proc_control_B.WorldPosition[0];

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    proc_control_B.DataStoreRead[8] = proc_control_B.dv21[1];
    proc_control_B.DataStoreRead[11] = proc_control_B.sincos_o1[1];

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    proc_control_B.z_c[1] = proc_control_B.WorldPosition[1];

    // Outputs for Resettable SubSystem: '<S238>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S251>/Reset'

    proc_control_B.DataStoreRead[9] = proc_control_B.dv21[2];
    proc_control_B.DataStoreRead[12] = proc_control_B.sincos_o1[2];

    // End of Outputs for SubSystem: '<S238>/Resettable Subsystem'
    proc_control_B.z_c[2] = proc_control_B.WorldPosition[2];
    proc_control_B.z_c[3] = proc_control_B.qS2W[0];
    proc_control_B.z_c[4] = proc_control_B.qS2W[1];
    proc_control_B.z_c[5] = proc_control_B.qS2W[2];
    proc_control_B.z_c[6] = proc_control_B.qS2W[3];
    proc_control_B.z_c[7] = proc_control_B.BodyVelocity[0];
    proc_control_B.z_c[10] = proc_control_B.AngularRate[0];
    proc_control_B.z_c[8] = proc_control_B.BodyVelocity[1];
    proc_control_B.z_c[11] = proc_control_B.AngularRate[1];
    proc_control_B.z_c[9] = proc_control_B.BodyVelocity[2];
    proc_control_B.z_c[12] = proc_control_B.AngularRate[2];

    // Merge generated from: '<S7>/Merge' incorporates:
    //   MATLABSystem: '<S238>/MATLAB System'
    //   MATLABSystem: '<S238>/MATLAB System1'
    //   MATLABSystem: '<S45>/MATLAB System'
    //   Math: '<S238>/Transpose1'
    //   Selector: '<S250>/Selector4'
    //
    proc_TrajectoryManager_stepImpl(&proc_control_DW.obj,
      proc_control_DW.obj_i.m_trajClear, proc_control_B.DataStoreRead,
      proc_control_B.Selector4, proc_control_DW.obj_f.initcond,
      proc_control_B.z_c, proc_control_B.CostFcn_workspace_runtimedata.ref,
      &proc_control_B.Reset);

    // Merge generated from: '<S7>/Merge' incorporates:
    //   Constant: '<S238>/Constant1'
    //   SignalConversion generated from: '<S238>/Reference'

    proc_control_B.NewDvlMsg = proc_control_P.Constant1_Value_is;
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 7; proc_control_B.Ns_i++)
    {
      // Merge generated from: '<S7>/Merge' incorporates:
      //   Math: '<S238>/Transpose1'
      //   Selector: '<S250>/Selector4'
      //   SignalConversion generated from: '<S238>/Reference'

      proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns_i] =
        proc_control_B.Selector4[proc_control_B.Ns_i];
    }

    // Update for Delay: '<S238>/Delay' incorporates:
    //   MATLABSystem: '<S252>/SourceBlock'
    //
    proc_control_DW.Delay_DSTATE_g = proc_control_B.b_value_e;

    // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    break;

   default:
    // Outputs for IfAction SubSystem: '<S7>/IDLE' incorporates:
    //   ActionPort: '<S231>/Action Port'

    // MATLAB Function: '<S231>/MATLAB Function' incorporates:
    //   Constant: '<S231>/Constant'
    //   Math: '<S231>/Transpose'

    memcpy(&proc_control_B.imvec[0], &proc_control_P.Constant_Value_mt[0], 13U *
           sizeof(real_T));
    proc_control_B.imvec[9] = -proc_control_P.Constant_Value_mt[9];
    for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
         proc_control_B.base_index++) {
      proc_control_B.nz = proc_control_B.base_index * 10;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 10; proc_control_B.b_k++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.nz +
          proc_control_B.b_k] = proc_control_B.imvec[proc_control_B.base_index];
      }
    }

    // End of MATLAB Function: '<S231>/MATLAB Function'

    // Merge generated from: '<S7>/Merge' incorporates:
    //   Constant: '<S231>/Constant2'
    //   SignalConversion generated from: '<S231>/y'

    proc_control_B.Reset = proc_control_P.Constant2_Value_a;

    // Merge generated from: '<S7>/Merge' incorporates:
    //   Constant: '<S231>/Constant3'
    //   SignalConversion generated from: '<S231>/y'

    proc_control_B.NewDvlMsg = proc_control_P.Constant3_Value_n;
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 7; proc_control_B.Ns_i++)
    {
      // Merge generated from: '<S7>/Merge' incorporates:
      //   Constant: '<S231>/Constant'
      //   Math: '<S231>/Transpose'
      //   SignalConversion generated from: '<S231>/y'

      proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns_i] =
        proc_control_P.Constant_Value_mt[proc_control_B.Ns_i];
    }

    // End of Outputs for SubSystem: '<S7>/IDLE'
    break;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // SwitchCase: '<S68>/Switch Case' incorporates:
    //   Constant: '<S71>/Constant'
    //   Constant: '<S71>/Constant1'
    //   MATLAB Function: '<S107>/VariableHorizonOptimizer'
    //   MATLAB Function: '<S143>/FixedHorizonOptimizer'
    //   SignalConversion generated from: '<S108>/ SFunction '
    //   SignalConversion generated from: '<S144>/ SFunction '

    proc_control_B.rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem_p;
    switch (proc_control_B.mode) {
     case 10:
     case 11:
     case 19:
     case 31:
      proc_control_B.rtAction = 0;
      break;

     case 20:
     case 21:
      proc_control_B.rtAction = 1;
      break;

     case 30:
      proc_control_B.rtAction = 2;
      break;

     case 40:
      proc_control_B.rtAction = 3;
      break;

     default:
      proc_control_B.rtAction = 4;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem_p = proc_control_B.rtAction;
    switch (proc_control_B.rtAction) {
     case 0:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S68>/If Action Subsystem' incorporates:
        //   ActionPort: '<S71>/Action Port'

        // InitializeConditions for SwitchCase: '<S68>/Switch Case' incorporates:
        //   Delay: '<S71>/Delay'
        //   DiscretePulseGenerator: '<S71>/Pulse Generator'
        //   Memory: '<S79>/Memory'
        //   UnitDelay: '<S79>/last_mv'

        memcpy(&proc_control_DW.Delay_DSTATE_a[0],
               &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) << 3U);
        memcpy(&proc_control_DW.Memory_PreviousInput_l[0],
               &proc_control_P.Memory_InitialCondition[0], 226U * sizeof
               (boolean_T));
        memcpy(&proc_control_DW.last_mv_DSTATE_j[0],
               &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) << 3U);
        proc_control_DW.clockTickCounter_f = 0;

        // End of InitializeConditions for SubSystem: '<S68>/If Action Subsystem' 

        // SystemReset for IfAction SubSystem: '<S68>/If Action Subsystem' incorporates:
        //   ActionPort: '<S71>/Action Port'

        // SystemReset for SwitchCase: '<S68>/Switch Case' incorporates:
        //   MATLABSystem: '<S71>/MATLAB System'
        //
        proc_contro_TrimPlant_resetImpl(&proc_control_DW.obj_b);

        // End of SystemReset for SubSystem: '<S68>/If Action Subsystem'
      }

      // Outputs for IfAction SubSystem: '<S68>/If Action Subsystem' incorporates:
      //   ActionPort: '<S71>/Action Port'

      // Outputs for Atomic SubSystem: '<S78>/Header Assignment'
      // ASCIIToString: '<S110>/ASCII to String' incorporates:
      //   Constant: '<S109>/Constant'

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 128;
           proc_control_B.Ns_i++) {
        proc_control_B.rtb_ASCIItoString_k[proc_control_B.Ns_i] =
          static_cast<int8_T>
          (proc_control_P.Constant_Value_f.header.frame_id[proc_control_B.Ns_i]);
        proc_control_B.rtb_ASCIItoString_k[proc_control_B.Ns_i + 128] = '\x00';
      }

      // MATLABSystem: '<S110>/Current Time'
      currentROS2TimeBus(&proc_control_B.BusAssignment_k.header.stamp);

      // Switch: '<S110>/Switch1' incorporates:
      //   ASCIIToString: '<S110>/ASCII to String'
      //   Constant: '<S110>/Constant1'
      //   StringConstant: '<S110>/String Constant1'

      if (proc_control_P.Constant1_Value_l != 0.0) {
        strncpy(&proc_control_B.Switch1[0],
                &proc_control_P.StringConstant1_String_j[0], 255U);
        proc_control_B.Switch1[255] = '\x00';
      } else {
        strncpy(&proc_control_B.Switch1[0], &proc_control_B.rtb_ASCIItoString_k
                [0], 255U);
        proc_control_B.Switch1[255] = '\x00';
      }

      // End of Switch: '<S110>/Switch1'

      // Switch: '<S110>/Switch' incorporates:
      //   Constant: '<S110>/Constant'

      if (!(proc_control_P.Constant_Value_l != 0.0)) {
        // BusAssignment: '<S78>/Bus Assignment' incorporates:
        //   Constant: '<S109>/Constant'

        proc_control_B.BusAssignment_k.header.stamp =
          proc_control_P.Constant_Value_f.header.stamp;
      }

      // End of Switch: '<S110>/Switch'
      // End of Outputs for SubSystem: '<S78>/Header Assignment'

      // SignalConversion generated from: '<S71>/MATLAB System'
      proc_control_B.DataStoreRead[0] = proc_control_B.WorldPosition[0];
      proc_control_B.DataStoreRead[1] = proc_control_B.WorldPosition[1];
      proc_control_B.DataStoreRead[2] = proc_control_B.WorldPosition[2];
      proc_control_B.DataStoreRead[3] = proc_control_B.qS2W[0];
      proc_control_B.DataStoreRead[4] = proc_control_B.qS2W[1];
      proc_control_B.DataStoreRead[5] = proc_control_B.qS2W[2];
      proc_control_B.DataStoreRead[6] = proc_control_B.qS2W[3];
      proc_control_B.DataStoreRead[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.DataStoreRead[10] = proc_control_B.AngularRate[0];
      proc_control_B.DataStoreRead[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.DataStoreRead[11] = proc_control_B.AngularRate[1];
      proc_control_B.DataStoreRead[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.DataStoreRead[12] = proc_control_B.AngularRate[2];

      // Start for MATLABSystem: '<S71>/MATLAB System' incorporates:
      //   BusCreator: '<S47>/Bus Creator'
      //   Delay: '<S71>/Delay'

      proc_control_TrimPlant_stepImpl(&proc_control_DW.obj_b,
        proc_control_DW.Delay_DSTATE_a, proc_control_B.DataStoreRead,
        proc_control_B.CostFcn_workspace_runtimedata.ref,
        proc_control_B.BusCreator.rho, proc_control_B.BusCreator.g,
        proc_control_B.BusCreator.mass, proc_control_B.BusCreator.volume,
        proc_control_B.BusCreator.sub_height, proc_control_B.BusCreator.rg,
        proc_control_B.BusCreator.rb, proc_control_B.BusCreator.cdl,
        proc_control_B.BusCreator.cdq, proc_control_B.BusCreator.added_mass,
        proc_control_B.BusCreator.I, proc_control_B.BusCreator.thrusters,
        proc_control_B.y_m, proc_control_B.rtb_B_p, proc_control_B.A_h,
        proc_control_B.dv5, proc_control_B.u_scale, proc_control_B.z_c,
        proc_control_B.X_e_m, proc_control_B.imvec,
        proc_control_B.rtb_MATLABSystem_o10_c);

      // Outputs for Atomic SubSystem: '<S78>/Header Assignment'
      // StringToASCII: '<S110>/String To ASCII'
      strncpy(&proc_control_B.cv[0], &proc_control_B.Switch1[0], 128U);

      // BusAssignment: '<S78>/Bus Assignment' incorporates:
      //   Constant: '<S109>/Constant'
      //   MATLABSystem: '<S71>/MATLAB System'
      //   SignalConversion generated from: '<S110>/HeaderAssign'
      //   StringLength: '<S110>/String Length'
      //   StringToASCII: '<S110>/String To ASCII'

      proc_control_B.BusAssignment_k.header.frame_id_SL_Info.CurrentLength =
        strlen(&proc_control_B.Switch1[0]);
      proc_control_B.BusAssignment_k.header.frame_id_SL_Info.ReceivedLength =
        proc_control_P.Constant_Value_f.header.frame_id_SL_Info.ReceivedLength;

      // End of Outputs for SubSystem: '<S78>/Header Assignment'
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 128;
           proc_control_B.Ns_i++) {
        // Outputs for Atomic SubSystem: '<S78>/Header Assignment'
        proc_control_B.BusAssignment_k.header.frame_id[proc_control_B.Ns_i] =
          static_cast<uint8_T>(proc_control_B.cv[proc_control_B.Ns_i]);
        proc_control_B.BusAssignment_k.child_frame_id[proc_control_B.Ns_i] =
          proc_control_P.Constant_Value_f.child_frame_id[proc_control_B.Ns_i];

        // End of Outputs for SubSystem: '<S78>/Header Assignment'
      }

      // Outputs for Atomic SubSystem: '<S78>/Header Assignment'
      proc_control_B.BusAssignment_k.child_frame_id_SL_Info =
        proc_control_P.Constant_Value_f.child_frame_id_SL_Info;
      memcpy(&proc_control_B.BusAssignment_k.pose.covariance[0],
             &proc_control_P.Constant_Value_f.pose.covariance[0], 36U * sizeof
             (real_T));
      memcpy(&proc_control_B.BusAssignment_k.twist.covariance[0],
             &proc_control_P.Constant_Value_f.twist.covariance[0], 36U * sizeof
             (real_T));

      // End of Outputs for SubSystem: '<S78>/Header Assignment'
      proc_control_B.BusAssignment_k.pose.pose.position.x =
        proc_control_B.rtb_MATLABSystem_o10_c[0];
      proc_control_B.BusAssignment_k.pose.pose.position.y =
        proc_control_B.rtb_MATLABSystem_o10_c[1];
      proc_control_B.BusAssignment_k.pose.pose.position.z =
        proc_control_B.rtb_MATLABSystem_o10_c[2];
      proc_control_B.BusAssignment_k.pose.pose.orientation.w =
        proc_control_B.rtb_MATLABSystem_o10_c[4];
      proc_control_B.BusAssignment_k.pose.pose.orientation.x =
        proc_control_B.rtb_MATLABSystem_o10_c[3];
      proc_control_B.BusAssignment_k.pose.pose.orientation.y =
        proc_control_B.rtb_MATLABSystem_o10_c[5];
      proc_control_B.BusAssignment_k.pose.pose.orientation.z =
        proc_control_B.rtb_MATLABSystem_o10_c[6];
      proc_control_B.BusAssignment_k.twist.twist.linear.x =
        proc_control_B.rtb_MATLABSystem_o10_c[7];
      proc_control_B.BusAssignment_k.twist.twist.linear.y =
        proc_control_B.rtb_MATLABSystem_o10_c[8];
      proc_control_B.BusAssignment_k.twist.twist.linear.z =
        proc_control_B.rtb_MATLABSystem_o10_c[9];
      proc_control_B.BusAssignment_k.twist.twist.angular.x =
        proc_control_B.rtb_MATLABSystem_o10_c[10];
      proc_control_B.BusAssignment_k.twist.twist.angular.y =
        proc_control_B.rtb_MATLABSystem_o10_c[11];
      proc_control_B.BusAssignment_k.twist.twist.angular.z =
        proc_control_B.rtb_MATLABSystem_o10_c[12];

      // MATLABSystem: '<S111>/SinkBlock'
      Pub_proc_control_913.publish(&proc_control_B.BusAssignment_k);

      // Rounding: '<S79>/Floor'
      proc_control_B.residue = floor(proc_control_B.p);

      // MinMax: '<S79>/Min' incorporates:
      //   Constant: '<S79>/Constant'

      if ((proc_control_P.Constant_Value_aa <= proc_control_B.residue) ||
          rtIsNaN(proc_control_B.residue)) {
        proc_control_B.residue = proc_control_P.Constant_Value_aa;
      }

      // MATLAB Function: '<S107>/VariableHorizonOptimizer' incorporates:
      //   MinMax: '<S79>/Min'

      proc_control_B.base_index = static_cast<int32_T>(rt_roundd_snf
        (proc_control_B.residue));
      proc_control_B.Bu.set_size(21, 8, proc_control_B.base_index + 1);

      // MATLAB Function: '<S107>/VariableHorizonOptimizer'
      proc_control_B.Ns_i = (proc_control_B.base_index + 1) * 168;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.Ns_i;
           proc_control_B.Ns++) {
        proc_control_B.Bu[proc_control_B.Ns] = 0.0;
      }

      proc_control_B.Bv.set_size(21, 1, proc_control_B.base_index + 1);

      // MATLAB Function: '<S107>/VariableHorizonOptimizer'
      proc_control_B.Ns_i = (proc_control_B.base_index + 1) * 21;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.Ns_i;
           proc_control_B.Ns++) {
        proc_control_B.Bv[proc_control_B.Ns] = 0.0;
      }

      proc_control_B.Dv.set_size(13, 1, proc_control_B.base_index + 1);

      // MATLAB Function: '<S107>/VariableHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S75>/Pulse Generator'
      //   MATLABSystem: '<S71>/MATLAB System'

      proc_control_B.Ns_i = (proc_control_B.base_index + 1) * 13;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.Ns_i;
           proc_control_B.Ns++) {
        proc_control_B.Dv[proc_control_B.Ns] = 0.0;
      }

      memcpy(&proc_control_B.b_A_c[0], &b[0], 441U * sizeof(real_T));
      memcpy(&proc_control_B.b_B[0], &c[0], 630U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 273; proc_control_B.Ns++)
      {
        proc_control_B.b_C_o[proc_control_B.Ns] = d_0[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      proc_control_B.nz = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k++)
      {
        memcpy(&proc_control_B.b_C_o[proc_control_B.Ns],
               &proc_control_B.A_h[proc_control_B.Ns], 13U * sizeof(real_T));
        memcpy(&proc_control_B.b_A_c[proc_control_B.nz],
               &proc_control_B.y_m[proc_control_B.Ns], 13U * sizeof(real_T));
        proc_control_B.Ns += 13;
        proc_control_B.nz += 21;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        memcpy(&proc_control_B.b_B[proc_control_B.Ns * 21],
               &proc_control_B.rtb_B_p[proc_control_B.Ns * 13], 13U * sizeof
               (real_T));
        for (proc_control_B.nz = 0; proc_control_B.nz < 21; proc_control_B.nz++)
        {
          proc_control_B.Bu[proc_control_B.nz + 21 * proc_control_B.Ns] =
            proc_control_B.b_B[21 * proc_control_B.Ns + proc_control_B.nz];
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 21; proc_control_B.Ns++) {
        proc_control_B.Bv[proc_control_B.Ns] =
          proc_control_B.b_B[proc_control_B.Ns + 168];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.Dv[proc_control_B.Ns] = 0.0;
      }

      memcpy(&proc_control_B.b_Mlim_m[0], &e[0], 226U * sizeof(real_T));
      memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      memcpy(&proc_control_B.U_f1[0], &proc_control_B.u_scale[0], sizeof(real_T)
             << 3U);
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 226;
           proc_control_B.Ns_i++) {
        proc_control_B.b_Mrows_j = b_Mrows[proc_control_B.Ns_i];
        if (proc_control_B.b_Mrows_j <= 130) {
          proc_control_B.Ns = (proc_control_B.b_Mrows_j -
                               (proc_control_B.b_Mrows_j - 1) / 13 * 13) - 1;
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] +=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_c[proc_control_B.Ns];
        } else if (proc_control_B.b_Mrows_j <= 260) {
          proc_control_B.Ns = (proc_control_B.b_Mrows_j -
                               (proc_control_B.b_Mrows_j - 131) / 13 * 13) - 131;
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] -=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_c[proc_control_B.Ns];
        } else if (proc_control_B.b_Mrows_j <= 340) {
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] += 0.0 -
            proc_control_B.U_f1[(proc_control_B.b_Mrows_j -
            (((proc_control_B.b_Mrows_j - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] -= 0.0 -
            proc_control_B.U_f1[proc_control_B.b_Mrows_j - 341];
        }
      }

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i
           ++) {
        proc_control_B.residue = proc_control_B.U_f1[proc_control_B.Ns_i];
        proc_control_B.Ns = 0;
        for (proc_control_B.nz = 0; proc_control_B.nz < 10; proc_control_B.nz++)
        {
          proc_control_B.b_j = proc_control_B.Ns + proc_control_B.Ns_i;
          proc_control_B.b_utarget[proc_control_B.b_j] -= proc_control_B.residue;
          proc_control_B.Ns += 8;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.b_xoff[proc_control_B.Ns] =
          proc_control_B.X_e_m[proc_control_B.Ns];
        proc_control_B.Bv[proc_control_B.Ns] =
          proc_control_B.imvec[proc_control_B.Ns];
      }

      proc_control_B.vseq.set_size(proc_control_B.base_index + 1);

      // MATLAB Function: '<S107>/VariableHorizonOptimizer'
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i <=
           proc_control_B.base_index; proc_control_B.Ns_i++) {
        proc_control_B.vseq[proc_control_B.Ns_i] = 1.0;
      }

      proc_control_B.rseq.set_size(proc_control_B.base_index * 13);

      // MATLAB Function: '<S107>/VariableHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S71>/MATLAB System'

      proc_control_B.Ns_i = proc_control_B.base_index * 13;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.Ns_i;
           proc_control_B.Ns++) {
        proc_control_B.rseq[proc_control_B.Ns] = 0.0;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        if (proc_control_B.base_index >= 10) {
          for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i <= 8;
               proc_control_B.Ns_i += 2) {
            tmp_2 = _mm_sub_pd(_mm_loadu_pd
                               (&proc_control_B.CostFcn_workspace_runtimedata.ref
                                [10 * proc_control_B.b_j + proc_control_B.Ns_i]),
                               _mm_set1_pd(proc_control_B.z_c[proc_control_B.b_j]));
            _mm_storeu_pd(&proc_control_B.dv25[0], tmp_2);
            proc_control_B.rseq[proc_control_B.b_j + proc_control_B.Ns_i * 13] =
              proc_control_B.dv25[0];
            proc_control_B.rseq[proc_control_B.b_j + (proc_control_B.Ns_i + 1) *
              13] = proc_control_B.dv25[1];
          }

          for (proc_control_B.Ns_i = 10; proc_control_B.Ns_i <
               proc_control_B.base_index; proc_control_B.Ns_i++) {
            proc_control_B.rseq[proc_control_B.b_j + proc_control_B.Ns_i * 13] =
              proc_control_B.CostFcn_workspace_runtimedata.ref[10 *
              proc_control_B.b_j + 9] - proc_control_B.z_c[proc_control_B.b_j];
          }
        } else {
          for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i <
               proc_control_B.base_index; proc_control_B.Ns_i++) {
            proc_control_B.rseq[proc_control_B.b_j + proc_control_B.Ns_i * 13] =
              proc_control_B.CostFcn_workspace_runtimedata.ref[10 *
              proc_control_B.b_j + proc_control_B.Ns_i] -
              proc_control_B.z_c[proc_control_B.b_j];
          }
        }

        // SignalConversion generated from: '<S108>/ SFunction ' incorporates:
        //   MATLABSystem: '<S71>/MATLAB System'

        proc_control_B.rtb_X_e_o[proc_control_B.b_j] =
          proc_control_B.X_e_m[proc_control_B.b_j] -
          proc_control_B.b_xoff[proc_control_B.b_j];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 4; proc_control_B.Ns += 2)
      {
        // MATLAB Function: '<S107>/VariableHorizonOptimizer' incorporates:
        //   Constant: '<S71>/Constant'
        //   SignalConversion generated from: '<S108>/ SFunction '

        tmp_2 = _mm_loadu_pd(&proc_control_B.b_xoff[proc_control_B.Ns + 13]);

        // SignalConversion generated from: '<S108>/ SFunction ' incorporates:
        //   Constant: '<S71>/Constant'
        //   MATLAB Function: '<S107>/VariableHorizonOptimizer'

        _mm_storeu_pd(&proc_control_B.rtb_X_e_o[proc_control_B.Ns + 13],
                      _mm_sub_pd(_mm_loadu_pd
          (&proc_control_P.Constant_Value_o1[proc_control_B.Ns]), tmp_2));
      }

      tmp_2 = _mm_sub_pd(_mm_loadu_pd(&proc_control_P.Constant1_Value_g[0]),
                         _mm_loadu_pd(&proc_control_B.b_xoff[19]));
      _mm_storeu_pd(&proc_control_B.rtb_X_e_o[19], tmp_2);

      // MATLAB Function: '<S107>/VariableHorizonOptimizer' incorporates:
      //   Constant: '<S71>/Constant'
      //   Constant: '<S71>/Constant1'
      //   SignalConversion generated from: '<S108>/ SFunction '
      //   UnitDelay: '<S79>/last_mv'

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 6; proc_control_B.Ns += 2)
      {
        tmp_2 = _mm_loadu_pd(&proc_control_DW.last_mv_DSTATE_j[proc_control_B.Ns]);
        tmp_1 = _mm_loadu_pd(&proc_control_B.u_scale[proc_control_B.Ns]);
        _mm_storeu_pd(&proc_control_B.dv18[proc_control_B.Ns], _mm_sub_pd(tmp_2,
          tmp_1));
      }

      // Update for Memory: '<S79>/Memory' incorporates:
      //   MATLAB Function: '<S107>/VariableHorizonOptimizer'
      //   MATLABSystem: '<S69>/MATLAB System'
      //   Math: '<S79>/Math Function'
      //   Math: '<S79>/Math Function1'
      //   Math: '<S79>/Math Function2'
      //   Rounding: '<S79>/Floor1'
      //   SignalConversion generated from: '<S69>/MATLAB System'
      //
      proc_contr_mpcblock_optimizerPM(proc_control_B.rseq, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax, proc_control_B.rtb_X_e_o,
        proc_control_B.dv18, proc_control_B.b_Mlim_m, proc_control_B.b_utarget,
        proc_control_B.base_index, static_cast<int32_T>(floor(proc_control_B.m)),
        proc_control_B.u_scale, g, h, proc_control_B.ywt, proc_control_B.mvwt,
        proc_control_B.dmwwt, proc_control_B.b_A_c, proc_control_B.Bu,
        proc_control_B.Bv, proc_control_B.b_C_o, proc_control_B.Dv,
        proc_control_B.U_f1, proc_control_B.U, &proc_control_B.i);

      // DataTypeConversion: '<S71>/Data Type Conversion'
      proc_control_B.n_c = floor(proc_control_B.i);
      if (rtIsNaN(proc_control_B.n_c) || rtIsInf(proc_control_B.n_c)) {
        proc_control_B.n_c = 0.0;
      } else {
        proc_control_B.n_c = fmod(proc_control_B.n_c, 256.0);
      }

      if (proc_control_B.n_c < 0.0) {
        // Merge generated from: '<S68>/Merge' incorporates:
        //   SignalConversion generated from: '<S71>/Out1'

        proc_control_B.MpcStatus = static_cast<int8_T>(-static_cast<int8_T>(
          static_cast<uint8_T>(-proc_control_B.n_c)));
      } else {
        // Merge generated from: '<S68>/Merge' incorporates:
        //   SignalConversion generated from: '<S71>/Out1'

        proc_control_B.MpcStatus = static_cast<int8_T>(static_cast<uint8_T>
          (proc_control_B.n_c));
      }

      // End of DataTypeConversion: '<S71>/Data Type Conversion'

      // DiscretePulseGenerator: '<S71>/Pulse Generator'
      if ((proc_control_DW.clockTickCounter_f <
           proc_control_P.PulseGenerator_Duty) &&
          (proc_control_DW.clockTickCounter_f >= 0)) {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.alive = proc_control_P.PulseGenerator_Amp;
      } else {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.alive = 0.0;
      }

      if (proc_control_DW.clockTickCounter_f >=
          proc_control_P.PulseGenerator_Period - 1.0) {
        proc_control_DW.clockTickCounter_f = 0;
      } else {
        proc_control_DW.clockTickCounter_f++;
      }

      // End of DiscretePulseGenerator: '<S71>/Pulse Generator'
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i <= 6;
           proc_control_B.Ns_i += 2) {
        // Gain: '<S79>/u_scale'
        tmp_2 = _mm_loadu_pd(&proc_control_B.U_f1[proc_control_B.Ns_i]);
        tmp_1 = _mm_mul_pd(_mm_loadu_pd
                           (&proc_control_P.u_scale_Gain[proc_control_B.Ns_i]),
                           tmp_2);

        // Math: '<S70>/Transpose' incorporates:
        //   Gain: '<S79>/u_scale'
        //   Merge generated from: '<S68>/Merge'
        //   SignalConversion generated from: '<S71>/Out1'

        _mm_storeu_pd(&proc_control_B.Transpose_n[proc_control_B.Ns_i], tmp_1);

        // Update for Delay: '<S71>/Delay' incorporates:
        //   Gain: '<S79>/u_scale'

        _mm_storeu_pd(&proc_control_DW.Delay_DSTATE_a[proc_control_B.Ns_i],
                      tmp_1);

        // Update for UnitDelay: '<S79>/last_mv' incorporates:
        //   Gain: '<S79>/u_scale'

        _mm_storeu_pd(&proc_control_DW.last_mv_DSTATE_j[proc_control_B.Ns_i],
                      tmp_2);
      }

      // End of Outputs for SubSystem: '<S68>/If Action Subsystem'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S68>/If Action Subsystem2' incorporates:
      //   ActionPort: '<S73>/Action Port'

      // SampleTimeMath: '<S145>/TSamp' incorporates:
      //   Merge generated from: '<S7>/Merge'
      //   Selector: '<S73>/Selector'
      //
      //  About '<S145>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 6; proc_control_B.nz++) {
        proc_control_B.TSamp[proc_control_B.nz] =
          proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns +
          70] * proc_control_P.TSamp_WtEt;
        proc_control_B.Ns += 10;
      }

      // End of SampleTimeMath: '<S145>/TSamp'

      // MATLABSystem: '<S73>/MATLAB System' incorporates:
      //   Merge generated from: '<S7>/Merge'
      //   Selector: '<S73>/Selector'

      if (proc_control_DW.obj_p.k != proc_control_P.MATLABSystem_k) {
        proc_control_DW.obj_p.k = proc_control_P.MATLABSystem_k;
      }

      proc_control_B.newPressureMsg = false;
      proc_control_B.p_ha = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 48)) {
        if (!(proc_control_DW.obj_p.binv[proc_control_B.b_k] ==
              proc_control_P.binv[proc_control_B.b_k])) {
          proc_control_B.p_ha = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (proc_control_B.p_ha) {
        proc_control_B.newPressureMsg = true;
      }

      if (!proc_control_B.newPressureMsg) {
        memcpy(&proc_control_DW.obj_p.binv[0], &proc_control_P.binv[0], 48U *
               sizeof(real_T));
      }

      if (proc_control_DW.obj_p.mass != proc_control_P.physics.mass) {
        proc_control_DW.obj_p.mass = proc_control_P.physics.mass;
      }

      if (proc_control_DW.obj_p.volume != proc_control_P.physics.volume) {
        proc_control_DW.obj_p.volume = proc_control_P.physics.volume;
      }

      if (proc_control_DW.obj_p.height != proc_control_P.physics.height) {
        proc_control_DW.obj_p.height = proc_control_P.physics.height;
      }

      proc_control_B.newPressureMsg = false;
      proc_control_B.p_ha = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 9)) {
        if (!(proc_control_DW.obj_p.I[proc_control_B.b_k] ==
              proc_control_P.physics.I[proc_control_B.b_k])) {
          proc_control_B.p_ha = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (proc_control_B.p_ha) {
        proc_control_B.newPressureMsg = true;
      }

      if (!proc_control_B.newPressureMsg) {
        memcpy(&proc_control_DW.obj_p.I[0], &proc_control_P.physics.I[0], 9U *
               sizeof(real_T));
      }

      if (!proc_control_isequal(proc_control_DW.obj_p.RG,
           proc_control_P.physics.RG)) {
        proc_control_DW.obj_p.RG[0] = proc_control_P.physics.RG[0];
        proc_control_DW.obj_p.RG[1] = proc_control_P.physics.RG[1];
        proc_control_DW.obj_p.RG[2] = proc_control_P.physics.RG[2];
      }

      if (!proc_control_isequal(proc_control_DW.obj_p.RB,
           proc_control_P.physics.RB)) {
        proc_control_DW.obj_p.RB[0] = proc_control_P.physics.RB[0];
        proc_control_DW.obj_p.RB[1] = proc_control_P.physics.RB[1];
        proc_control_DW.obj_p.RB[2] = proc_control_P.physics.RB[2];
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_p.AddedMass,
           proc_control_P.physics.AddedMass)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_p.AddedMass[proc_control_B.Ns] =
            proc_control_P.physics.AddedMass[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_p.CDL,
           proc_control_P.physics.CDL)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_p.CDL[proc_control_B.Ns] =
            proc_control_P.physics.CDL[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_p.CDQ,
           proc_control_P.physics.CDQ)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_p.CDQ[proc_control_B.Ns] =
            proc_control_P.physics.CDQ[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal(proc_control_DW.obj_p.AF,
           proc_control_P.physics.AF)) {
        proc_control_DW.obj_p.AF[0] = proc_control_P.physics.AF[0];
        proc_control_DW.obj_p.AF[1] = proc_control_P.physics.AF[1];
        proc_control_DW.obj_p.AF[2] = proc_control_P.physics.AF[2];
      }

      if (proc_control_DW.obj_p.g != proc_control_P.physics.g) {
        proc_control_DW.obj_p.g = proc_control_P.physics.g;
      }

      if (proc_control_DW.obj_p.rho != proc_control_P.physics.rho) {
        proc_control_DW.obj_p.rho = proc_control_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (proc_control_B.mode) {
       case 20U:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_B.constValues[0] = proc_control_DW.obj_p.mass;
        proc_control_B.constValues[1] = proc_control_DW.obj_p.volume;
        proc_control_B.constValues[3] = proc_control_DW.obj_p.AF[0];
        proc_control_B.constValues[6] = proc_control_DW.obj_p.I[0];
        proc_control_B.constValues[9] = proc_control_DW.obj_p.I[1];
        proc_control_B.constValues[12] = proc_control_DW.obj_p.I[2];
        proc_control_B.constValues[15] = proc_control_DW.obj_p.RG[0];
        proc_control_B.constValues[18] = proc_control_DW.obj_p.RB[0];
        proc_control_B.constValues[4] = proc_control_DW.obj_p.AF[1];
        proc_control_B.constValues[7] = proc_control_DW.obj_p.I[3];
        proc_control_B.constValues[10] = proc_control_DW.obj_p.I[4];
        proc_control_B.constValues[13] = proc_control_DW.obj_p.I[5];
        proc_control_B.constValues[16] = proc_control_DW.obj_p.RG[1];
        proc_control_B.constValues[19] = proc_control_DW.obj_p.RB[1];
        proc_control_B.constValues[5] = proc_control_DW.obj_p.AF[2];
        proc_control_B.constValues[8] = proc_control_DW.obj_p.I[6];
        proc_control_B.constValues[11] = proc_control_DW.obj_p.I[7];
        proc_control_B.constValues[14] = proc_control_DW.obj_p.I[8];
        proc_control_B.constValues[17] = proc_control_DW.obj_p.RG[2];
        proc_control_B.constValues[20] = proc_control_DW.obj_p.RB[2];

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_B.imvec[3] = 1.0;
        proc_control_B.imvec[4] = 0.0;
        proc_control_B.imvec[5] = 0.0;
        proc_control_B.imvec[6] = 0.0;
        proc_control_B.Ns = 0;
        for (proc_control_B.nz = 0; proc_control_B.nz < 6; proc_control_B.nz++)
        {
          proc_control_B.constValues[proc_control_B.nz + 21] =
            proc_control_DW.obj_p.CDL[proc_control_B.nz];
          proc_control_B.constValues[proc_control_B.nz + 27] =
            proc_control_DW.obj_p.CDQ[proc_control_B.nz];
          proc_control_B.constValues[proc_control_B.nz + 33] =
            proc_control_DW.obj_p.AddedMass[proc_control_B.nz];
          proc_control_B.imvec[proc_control_B.nz + 7] =
            proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns +
            70];
          proc_control_B.Ns += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVModelMatrices
        //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 9.1. 
        //     12-Jul-2022 16:58:53
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.constValues[6], proc_control_B.constValues[3]),
          _mm_set1_pd(proc_control_B.imvec[10])));
        proc_control_B.i = proc_control_B.dv25[0];
        proc_control_B.linearScaling = proc_control_B.dv25[1];
        tmp_2 = _mm_mul_pd(_mm_set_pd(proc_control_B.constValues[4],
          proc_control_B.constValues[9]), _mm_loadu_pd(&proc_control_B.imvec[10]));
        _mm_storeu_pd(&proc_control_B.dv25[0], tmp_2);
        proc_control_B.residue = proc_control_B.dv25[0];
        proc_control_B.Product3_h = proc_control_B.dv25[1];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.constValues[10], proc_control_B.constValues[7]),
          _mm_set1_pd(proc_control_B.imvec[11])));
        proc_control_B.Product_o = proc_control_B.dv25[0];
        proc_control_B.Product1_hg = proc_control_B.dv25[1];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.constValues[8], proc_control_B.constValues[5]),
          _mm_set1_pd(proc_control_B.imvec[12])));
        proc_control_B.Product2_j = proc_control_B.dv25[0];
        proc_control_B.oc = proc_control_B.dv25[1];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.imvec[10], proc_control_B.constValues[11]), _mm_set_pd
          (proc_control_B.constValues[33], proc_control_B.imvec[12])));
        proc_control_B.t10 = proc_control_B.dv25[0];
        proc_control_B.t11 = proc_control_B.dv25[1];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.constValues[0], proc_control_B.imvec[11]), _mm_set_pd
          (proc_control_B.constValues[12], proc_control_B.constValues[34])));
        proc_control_B.t12 = proc_control_B.dv25[0];
        proc_control_B.t13 = proc_control_B.dv25[1];
        tmp_2 = _mm_set1_pd(proc_control_B.constValues[0]);
        tmp_1 = _mm_mul_pd(tmp_2, _mm_loadu_pd(&proc_control_B.constValues[13]));
        _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);
        proc_control_B.t14 = proc_control_B.dv25[0];
        proc_control_B.t15 = proc_control_B.dv25[1];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.imvec[10], proc_control_B.imvec[12]), _mm_set_pd
          (proc_control_B.constValues[12], proc_control_B.constValues[35])));
        proc_control_B.t16 = proc_control_B.dv25[0];
        proc_control_B.t17 = proc_control_B.dv25[1];
        tmp_1 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.imvec[10]), _mm_set_pd
                           (proc_control_B.constValues[12],
                            proc_control_B.constValues[14]));
        _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);
        proc_control_B.t19 = proc_control_B.dv25[0];
        proc_control_B.t20 = proc_control_B.dv25[1];
        tmp_1 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.imvec[11]), _mm_set1_pd
                           (proc_control_B.constValues[13]));
        _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);
        proc_control_B.t21 = proc_control_B.dv25[0];
        proc_control_B.t24 = proc_control_B.dv25[1];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_set_pd
          (proc_control_B.imvec[7], proc_control_B.imvec[12]), _mm_set_pd
          (proc_control_B.constValues[30], proc_control_B.constValues[14])));
        proc_control_B.t25 = proc_control_B.dv25[0];
        proc_control_B.d_oi = proc_control_B.dv25[1];
        tmp_1 = _mm_mul_pd(_mm_loadu_pd(&proc_control_B.imvec[8]), _mm_loadu_pd(
          &proc_control_B.constValues[31]));
        _mm_storeu_pd(&proc_control_B.dv25[0], tmp_1);
        proc_control_B.scale = proc_control_B.dv25[0];
        proc_control_B.absxk = proc_control_B.dv25[1];
        proc_control_B.t = proc_control_B.constValues[1] *
          proc_control_B.constValues[36];
        proc_control_B.Product3_l = proc_control_B.imvec[5] *
          proc_control_B.imvec[6] * 2.0 + proc_control_B.imvec[3] *
          proc_control_B.imvec[4] * 2.0;
        proc_control_B.t52 = proc_control_B.constValues[0] - proc_control_B.t;
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_add_pd(_mm_mul_pd
          (_mm_set_pd(proc_control_B.imvec[10], proc_control_B.imvec[11]),
           _mm_set_pd(proc_control_B.constValues[13],
                      proc_control_B.constValues[14])), _mm_set_pd
          (proc_control_B.imvec[9], proc_control_B.imvec[7])), tmp_2));
        proc_control_B.t56 = proc_control_B.dv25[0];
        proc_control_B.t57 = proc_control_B.dv25[1];
        proc_control_B.rtb_sincos_o2_idx_1 = (proc_control_B.constValues[12] *
          proc_control_B.imvec[12] + proc_control_B.imvec[8]) *
          proc_control_B.constValues[0];
        proc_control_B.rtb_sincos_o2_idx_0 = (proc_control_B.t17 +
          proc_control_B.t21) * proc_control_B.constValues[0];
        _mm_storeu_pd(&proc_control_B.dv25[0], _mm_mul_pd(_mm_add_pd(_mm_set_pd
          (proc_control_B.t21, proc_control_B.t17), _mm_set1_pd
          (proc_control_B.t25)), tmp_2));
        proc_control_B.t25 = proc_control_B.imvec[4] * proc_control_B.imvec[6] *
          2.0 - proc_control_B.imvec[3] * proc_control_B.imvec[5] * 2.0;
        proc_control_B.t70 = (proc_control_B.imvec[4] * proc_control_B.imvec[4] *
                              2.0 + proc_control_B.imvec[5] *
                              proc_control_B.imvec[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_B.modCoeffs[0] = -proc_control_B.constValues[30] +
          proc_control_B.constValues[0];
        proc_control_B.modCoeffs[1] = 0.0;
        proc_control_B.modCoeffs[2] = 0.0;
        proc_control_B.modCoeffs[3] = 0.0;
        proc_control_B.modCoeffs[4] = proc_control_B.t15;
        proc_control_B.modCoeffs[5] = -proc_control_B.t14;
        proc_control_B.modCoeffs[6] = 0.0;
        proc_control_B.modCoeffs[7] = -proc_control_B.constValues[31] +
          proc_control_B.constValues[0];
        proc_control_B.modCoeffs[8] = 0.0;
        proc_control_B.modCoeffs[9] = -proc_control_B.t15;
        proc_control_B.modCoeffs[10] = 0.0;
        proc_control_B.modCoeffs[11] = proc_control_B.t13;
        proc_control_B.modCoeffs[12] = 0.0;
        proc_control_B.modCoeffs[13] = 0.0;
        proc_control_B.modCoeffs[14] = -proc_control_B.constValues[32] +
          proc_control_B.constValues[0];
        proc_control_B.modCoeffs[15] = proc_control_B.t14;
        proc_control_B.modCoeffs[16] = -proc_control_B.t13;
        proc_control_B.modCoeffs[17] = 0.0;
        proc_control_B.modCoeffs[18] = 0.0;
        proc_control_B.modCoeffs[19] = -proc_control_B.t15;
        proc_control_B.modCoeffs[20] = proc_control_B.t14;
        proc_control_B.modCoeffs[21] = proc_control_B.constValues[3] -
          proc_control_B.constValues[33];
        proc_control_B.modCoeffs[22] = proc_control_B.constValues[6];
        proc_control_B.modCoeffs[23] = proc_control_B.constValues[9];
        proc_control_B.modCoeffs[24] = proc_control_B.t15;
        proc_control_B.modCoeffs[25] = 0.0;
        proc_control_B.modCoeffs[26] = -proc_control_B.t13;
        proc_control_B.modCoeffs[27] = proc_control_B.constValues[4];
        proc_control_B.modCoeffs[28] = proc_control_B.constValues[7] -
          proc_control_B.constValues[34];
        proc_control_B.modCoeffs[29] = proc_control_B.constValues[10];
        proc_control_B.modCoeffs[30] = -proc_control_B.t14;
        proc_control_B.modCoeffs[31] = proc_control_B.t13;
        proc_control_B.modCoeffs[32] = 0.0;
        proc_control_B.modCoeffs[33] = proc_control_B.constValues[5];
        proc_control_B.modCoeffs[34] = proc_control_B.constValues[8];
        proc_control_B.modCoeffs[35] = proc_control_B.constValues[11] -
          proc_control_B.constValues[35];

        // Sum: '<S145>/Diff' incorporates:
        //   Merge generated from: '<S7>/Merge'
        //   SampleTimeMath: '<S145>/TSamp'
        //   Selector: '<S73>/Selector'
        //   UnitDelay: '<S145>/UD'
        //
        //  About '<S145>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //    *
        //  Block description for '<S145>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S145>/UD':
        //
        //   Store in Global RAM

        for (proc_control_B.Ns = 0; proc_control_B.Ns <= 4; proc_control_B.Ns +=
             2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.TSamp[proc_control_B.Ns]);
          tmp_1 = _mm_loadu_pd(&proc_control_DW.UD_DSTATE[proc_control_B.Ns]);
          _mm_storeu_pd(&proc_control_B.rtb_TSamp_e[proc_control_B.Ns],
                        _mm_sub_pd(tmp_2, tmp_1));
        }

        // End of Sum: '<S145>/Diff'
        proc_control_B.dv10[0] = 0.0;
        proc_control_B.dv10[1] = 0.0;
        proc_control_B.dv10[2] = 0.0;
        proc_control_B.dv10[3] = -proc_control_B.dv25[1];
        proc_control_B.n_c = proc_control_B.t20 - proc_control_B.imvec[9];
        proc_control_B.dv10[4] = proc_control_B.n_c *
          proc_control_B.constValues[0] + proc_control_B.absxk;
        proc_control_B.dv10[5] = -proc_control_B.scale +
          proc_control_B.rtb_sincos_o2_idx_1;
        proc_control_B.dv10[6] = 0.0;
        proc_control_B.dv10[7] = 0.0;
        proc_control_B.dv10[8] = 0.0;
        proc_control_B.dv10[9] = -proc_control_B.absxk + proc_control_B.t57;
        proc_control_B.dv10[10] = -proc_control_B.dv25[0];
        proc_control_B.rtb_sincos_o2_idx_2 = proc_control_B.t24 -
          proc_control_B.imvec[7];
        proc_control_B.dv10[11] = proc_control_B.rtb_sincos_o2_idx_2 *
          proc_control_B.constValues[0] + proc_control_B.d_oi;
        proc_control_B.dv10[12] = 0.0;
        proc_control_B.dv10[13] = 0.0;
        proc_control_B.dv10[14] = 0.0;
        proc_control_B.q0_tmp = proc_control_B.t19 - proc_control_B.imvec[8];
        proc_control_B.dv10[15] = proc_control_B.q0_tmp *
          proc_control_B.constValues[0] + proc_control_B.scale;
        proc_control_B.dv10[16] = -proc_control_B.d_oi + proc_control_B.t56;
        proc_control_B.dv10[17] = -proc_control_B.rtb_sincos_o2_idx_0;
        proc_control_B.dv10[18] = proc_control_B.dv25[1];
        proc_control_B.dv10[19] = proc_control_B.absxk - proc_control_B.t57;
        proc_control_B.dv10[20] = proc_control_B.q0_tmp *
          -proc_control_B.constValues[0] - proc_control_B.scale;
        proc_control_B.dv10[21] = 0.0;
        proc_control_B.dv10[22] = ((-proc_control_B.residue -
          proc_control_B.Product1_hg) - proc_control_B.t10) + proc_control_B.t16;
        proc_control_B.dv10[23] = ((proc_control_B.linearScaling +
          proc_control_B.Product_o) + proc_control_B.oc) - proc_control_B.t12;
        proc_control_B.dv10[24] = proc_control_B.n_c *
          -proc_control_B.constValues[0] - proc_control_B.absxk;
        proc_control_B.dv10[25] = proc_control_B.dv25[0];
        proc_control_B.dv10[26] = proc_control_B.d_oi - proc_control_B.t56;
        proc_control_B.dv10[27] = ((proc_control_B.residue +
          proc_control_B.Product1_hg) + proc_control_B.t10) - proc_control_B.t16;
        proc_control_B.dv10[28] = 0.0;
        proc_control_B.dv10[29] = ((-proc_control_B.i -
          proc_control_B.Product3_h) - proc_control_B.Product2_j) +
          proc_control_B.t11;
        proc_control_B.dv10[30] = proc_control_B.scale -
          proc_control_B.rtb_sincos_o2_idx_1;
        proc_control_B.dv10[31] = proc_control_B.rtb_sincos_o2_idx_2 *
          -proc_control_B.constValues[0] - proc_control_B.d_oi;
        proc_control_B.dv10[32] = proc_control_B.rtb_sincos_o2_idx_0;
        proc_control_B.dv10[33] = ((-proc_control_B.linearScaling -
          proc_control_B.Product_o) - proc_control_B.oc) + proc_control_B.t12;
        proc_control_B.dv10[34] = ((proc_control_B.i + proc_control_B.Product3_h)
          + proc_control_B.Product2_j) - proc_control_B.t11;
        proc_control_B.dv10[35] = 0.0;
        proc_control_B.constValues_f[0] = proc_control_B.constValues[24] * fabs
          (proc_control_B.imvec[7]) + proc_control_B.constValues[18];
        proc_control_B.constValues_f[1] = 0.0;
        proc_control_B.constValues_f[2] = 0.0;
        proc_control_B.constValues_f[3] = 0.0;
        proc_control_B.constValues_f[4] = 0.0;
        proc_control_B.constValues_f[5] = 0.0;
        proc_control_B.constValues_f[6] = 0.0;
        proc_control_B.constValues_f[7] = proc_control_B.constValues[25] * fabs
          (proc_control_B.imvec[8]) + proc_control_B.constValues[19];
        proc_control_B.constValues_f[8] = 0.0;
        proc_control_B.constValues_f[9] = 0.0;
        proc_control_B.constValues_f[10] = 0.0;
        proc_control_B.constValues_f[11] = 0.0;
        proc_control_B.constValues_f[12] = 0.0;
        proc_control_B.constValues_f[13] = 0.0;
        proc_control_B.constValues_f[14] = proc_control_B.constValues[26] * fabs
          (proc_control_B.imvec[9]) + proc_control_B.constValues[20];
        proc_control_B.constValues_f[15] = 0.0;
        proc_control_B.constValues_f[16] = 0.0;
        proc_control_B.constValues_f[17] = 0.0;
        proc_control_B.constValues_f[18] = 0.0;
        proc_control_B.constValues_f[19] = 0.0;
        proc_control_B.constValues_f[20] = 0.0;
        proc_control_B.constValues_f[21] = proc_control_B.constValues[27] * fabs
          (proc_control_B.imvec[10]) + proc_control_B.constValues[21];
        proc_control_B.constValues_f[22] = 0.0;
        proc_control_B.constValues_f[23] = 0.0;
        proc_control_B.constValues_f[24] = 0.0;
        proc_control_B.constValues_f[25] = 0.0;
        proc_control_B.constValues_f[26] = 0.0;
        proc_control_B.constValues_f[27] = 0.0;
        proc_control_B.constValues_f[28] = proc_control_B.constValues[28] * fabs
          (proc_control_B.imvec[11]) + proc_control_B.constValues[22];
        proc_control_B.constValues_f[29] = 0.0;
        proc_control_B.constValues_f[30] = 0.0;
        proc_control_B.constValues_f[31] = 0.0;
        proc_control_B.constValues_f[32] = 0.0;
        proc_control_B.constValues_f[33] = 0.0;
        proc_control_B.constValues_f[34] = 0.0;
        proc_control_B.constValues_f[35] = proc_control_B.constValues[29] * fabs
          (proc_control_B.imvec[12]) + proc_control_B.constValues[23];
        for (proc_control_B.Ns = 0; proc_control_B.Ns <= 34; proc_control_B.Ns +=
             2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.dv10[proc_control_B.Ns]);
          tmp_1 = _mm_loadu_pd(&proc_control_B.constValues_f[proc_control_B.Ns]);
          _mm_storeu_pd(&proc_control_B.dv11[proc_control_B.Ns], _mm_add_pd
                        (tmp_2, tmp_1));
        }

        tmp_2 = _mm_set1_pd(proc_control_B.constValues[37]);
        tmp_1 = _mm_mul_pd(_mm_mul_pd(_mm_add_pd(_mm_mul_pd(_mm_loadu_pd
          (&proc_control_B.imvec[4]), _mm_set1_pd(proc_control_B.imvec[6])),
          _mm_mul_pd(_mm_mul_pd(_mm_set1_pd(proc_control_B.imvec[3]), _mm_set_pd
          (proc_control_B.imvec[4], proc_control_B.imvec[5])), _mm_set_pd(1.0,
          -1.0))), _mm_mul_pd(tmp_2, _mm_set1_pd(proc_control_B.t52))),
                           _mm_set1_pd(-2.0));
        _mm_storeu_pd(&proc_control_B.constValues_d[0], tmp_1);
        proc_control_B.constValues_d[2] = proc_control_B.constValues[37] *
          proc_control_B.t52 * proc_control_B.t70;
        tmp_1 = _mm_set_pd(proc_control_B.t70, proc_control_B.Product3_l);
        tmp = _mm_set_pd(proc_control_B.t, -proc_control_B.t);
        tmp_0 = _mm_set_pd(proc_control_B.t25, proc_control_B.t70);
        tmp_2 = _mm_add_pd(_mm_add_pd(_mm_add_pd(_mm_mul_pd(_mm_mul_pd(tmp_2,
          _mm_set_pd(-proc_control_B.t13, proc_control_B.t15)), tmp_1),
          _mm_mul_pd(_mm_mul_pd(tmp_2, _mm_set_pd(-proc_control_B.t15,
          proc_control_B.t14)), tmp_0)), _mm_mul_pd(_mm_mul_pd(_mm_mul_pd
          (_mm_set_pd(proc_control_B.constValues[15],
                      proc_control_B.constValues[17]), tmp_2), tmp), tmp_1)),
                           _mm_mul_pd(_mm_mul_pd(_mm_mul_pd(_mm_loadu_pd
          (&proc_control_B.constValues[16]), tmp_2), tmp), tmp_0));
        _mm_storeu_pd(&proc_control_B.constValues_d[3], tmp_2);
        proc_control_B.constValues_d[5] = ((proc_control_B.constValues[37] *
          proc_control_B.t14 * proc_control_B.t25 + proc_control_B.constValues
          [37] * -proc_control_B.t13 * proc_control_B.Product3_l) +
          proc_control_B.constValues[15] * proc_control_B.constValues[37] *
          proc_control_B.t * proc_control_B.Product3_l) +
          proc_control_B.constValues[16] * proc_control_B.constValues[37] *
          -proc_control_B.t * proc_control_B.t25;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.residue = 0.0;
          proc_control_B.n_c = 0.0;
          proc_control_B.nz = 0;
          proc_control_B.b_k = 0;
          for (proc_control_B.i_g = 0; proc_control_B.i_g < 6;
               proc_control_B.i_g++) {
            proc_control_B.base_index = proc_control_B.nz + proc_control_B.Ns;
            _mm_storeu_pd(&proc_control_B.dv25[0], _mm_add_pd(_mm_mul_pd
              (_mm_set_pd(proc_control_B.dv11[proc_control_B.base_index],
                          proc_control_B.modCoeffs[proc_control_B.base_index]),
               _mm_set_pd
               (proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.b_k
                + 70], proc_control_B.rtb_TSamp_e[proc_control_B.i_g])),
              _mm_set_pd(proc_control_B.n_c, proc_control_B.residue)));
            proc_control_B.residue = proc_control_B.dv25[0];
            proc_control_B.n_c = proc_control_B.dv25[1];
            proc_control_B.nz += 6;
            proc_control_B.b_k += 10;
          }

          proc_control_B.constValues_i[proc_control_B.Ns] =
            (proc_control_B.residue + proc_control_B.n_c) +
            proc_control_B.constValues_d[proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.residue = 0.0;
          proc_control_B.nz = 0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 6;
               proc_control_B.b_k++) {
            proc_control_B.residue +=
              proc_control_DW.obj_p.binv[proc_control_B.nz + proc_control_B.Ns] *
              proc_control_B.constValues_i[proc_control_B.b_k];
            proc_control_B.nz += 8;
          }

          proc_control_B.u_scale[proc_control_B.Ns] = proc_control_B.residue;
        }
        break;

       case 21U:
        //  Open loop matrice b invese directe
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.n_c = 0.0;
          proc_control_B.nz = 0;
          proc_control_B.b_k = 0;
          for (proc_control_B.i_g = 0; proc_control_B.i_g < 6;
               proc_control_B.i_g++) {
            proc_control_B.n_c += proc_control_DW.obj_p.binv[proc_control_B.nz +
              proc_control_B.Ns] *
              proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.b_k
              + 70];
            proc_control_B.nz += 8;
            proc_control_B.b_k += 10;
          }

          proc_control_B.u_scale[proc_control_B.Ns] = proc_control_B.n_c *
            proc_control_DW.obj_p.k;
        }
        break;

       default:
        memset(&proc_control_B.u_scale[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // Math: '<S70>/Transpose' incorporates:
      //   MATLABSystem: '<S73>/MATLAB System'
      //   Merge generated from: '<S68>/Merge'
      //   Reshape: '<S73>/Reshape'

      memcpy(&proc_control_B.Transpose_n[0], &proc_control_B.u_scale[0], sizeof
             (real_T) << 3U);

      // Merge generated from: '<S68>/Merge' incorporates:
      //   Constant: '<S73>/Constant1'
      //   SignalConversion generated from: '<S73>/Constant1'

      proc_control_B.alive = proc_control_P.Constant1_Value_g0;

      // Merge generated from: '<S68>/Merge' incorporates:
      //   Constant: '<S73>/Constant'
      //   SignalConversion generated from: '<S73>/Constant'

      proc_control_B.MpcStatus = proc_control_P.Constant_Value_m0;

      // Update for UnitDelay: '<S145>/UD' incorporates:
      //   SampleTimeMath: '<S145>/TSamp'
      //
      //  About '<S145>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //    *
      //  Block description for '<S145>/UD':
      //
      //   Store in Global RAM

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 6; proc_control_B.Ns_i
           ++) {
        proc_control_DW.UD_DSTATE[proc_control_B.Ns_i] =
          proc_control_B.TSamp[proc_control_B.Ns_i];
      }

      // End of Update for UnitDelay: '<S145>/UD'
      // End of Outputs for SubSystem: '<S68>/If Action Subsystem2'
      break;

     case 2:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S68>/If Action Subsystem1' incorporates:
        //   ActionPort: '<S72>/Action Port'

        // InitializeConditions for SwitchCase: '<S68>/Switch Case' incorporates:
        //   Delay: '<S72>/Delay1'
        //   DiscretePulseGenerator: '<S72>/Pulse Generator'
        //   Memory: '<S115>/Memory'
        //   UnitDelay: '<S115>/last_mv'

        memcpy(&proc_control_DW.Memory_PreviousInput[0],
               &proc_control_P.Memory_InitialCondition_n[0], 226U * sizeof
               (boolean_T));
        memcpy(&proc_control_DW.last_mv_DSTATE[0],
               &proc_control_P.last_mv_InitialCondition_k[0], sizeof(real_T) <<
               3U);
        memcpy(&proc_control_DW.Delay1_DSTATE[0],
               &proc_control_P.Delay1_InitialCondition[0], 88U * sizeof(real_T));
        proc_control_DW.clockTickCounter_n = 0;

        // End of InitializeConditions for SubSystem: '<S68>/If Action Subsystem1' 
      }

      // Outputs for IfAction SubSystem: '<S68>/If Action Subsystem1' incorporates:
      //   ActionPort: '<S72>/Action Port'

      // MATLAB Function: '<S72>/MATLAB Function' incorporates:
      //   Constant: '<S72>/Constant'
      //   Constant: '<S72>/Constant1'
      //   Delay: '<S72>/Delay1'
      //   Lookup_n-D: '<S70>/N to A'
      //   Lookup_n-D: '<S70>/n-D Lookup Table1'
      //   SignalConversion generated from: '<S114>/ SFunction '
      //   Trigonometry: '<S206>/sincos'

      proc_control_B.imvec[0] = proc_control_B.WorldPosition[0];
      proc_control_B.imvec[1] = proc_control_B.WorldPosition[1];
      proc_control_B.imvec[2] = proc_control_B.WorldPosition[2];
      proc_control_B.imvec[3] = proc_control_B.qS2W[0];
      proc_control_B.imvec[4] = proc_control_B.qS2W[1];
      proc_control_B.imvec[5] = proc_control_B.qS2W[2];
      proc_control_B.imvec[6] = proc_control_B.qS2W[3];
      proc_control_B.imvec[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.imvec[10] = proc_control_B.AngularRate[0];
      proc_control_B.imvec[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.imvec[11] = proc_control_B.AngularRate[1];
      proc_control_B.imvec[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.imvec[12] = proc_control_B.AngularRate[2];
      memset(&proc_control_B.A[0], 0, 1859U * sizeof(real_T));
      memset(&proc_control_B.A_h[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_h[38] = 0.0;
      proc_control_B.A_h[42] = 0.0;
      proc_control_B.A_h[56] = 0.0;
      proc_control_B.A_h[70] = 0.0;
      proc_control_B.A_h[84] = 0.0;
      proc_control_B.A_h[94] = 0.0;
      proc_control_B.A_h[95] = 0.0;
      proc_control_B.A_h[96] = 0.0;
      proc_control_B.A_h[97] = 0.0;
      proc_control_B.A_h[107] = 0.0;
      proc_control_B.A_h[108] = 0.0;
      proc_control_B.A_h[109] = 0.0;
      proc_control_B.A_h[110] = 0.0;
      proc_control_B.A_h[120] = 0.0;
      proc_control_B.A_h[121] = 0.0;
      proc_control_B.A_h[122] = 0.0;
      proc_control_B.A_h[123] = 0.0;
      proc_control_B.A_h[130] = 0.0;
      proc_control_B.A_h[131] = 0.0;
      proc_control_B.A_h[132] = 0.0;
      proc_control_B.A_h[143] = 0.0;
      proc_control_B.A_h[144] = 0.0;
      proc_control_B.A_h[145] = 0.0;
      proc_control_B.A_h[156] = 0.0;
      proc_control_B.A_h[157] = 0.0;
      proc_control_B.A_h[158] = 0.0;
      memset(&proc_control_B.y_m[0], 0, 38U * sizeof(real_T));
      proc_control_B.y_m[38] = 0.0;
      proc_control_B.y_m[42] = 0.0;
      proc_control_B.y_m[56] = 0.0;
      proc_control_B.y_m[70] = 0.0;
      proc_control_B.y_m[84] = 0.0;
      proc_control_B.y_m[94] = 0.0;
      proc_control_B.y_m[95] = 0.0;
      proc_control_B.y_m[96] = 0.0;
      proc_control_B.y_m[97] = 0.0;
      proc_control_B.y_m[107] = 0.0;
      proc_control_B.y_m[108] = 0.0;
      proc_control_B.y_m[109] = 0.0;
      proc_control_B.y_m[110] = 0.0;
      proc_control_B.y_m[120] = 0.0;
      proc_control_B.y_m[121] = 0.0;
      proc_control_B.y_m[122] = 0.0;
      proc_control_B.y_m[123] = 0.0;
      proc_control_B.y_m[130] = 0.0;
      proc_control_B.y_m[131] = 0.0;
      proc_control_B.y_m[132] = 0.0;
      proc_control_B.y_m[143] = 0.0;
      proc_control_B.y_m[144] = 0.0;
      proc_control_B.y_m[145] = 0.0;
      proc_control_B.y_m[156] = 0.0;
      proc_control_B.y_m[157] = 0.0;
      proc_control_B.y_m[158] = 0.0;
      proc_control_B.b_j = static_cast<int32_T>
        (proc_control_P.Constant1_Value_gt);
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 11;
           proc_control_B.Ns_i++) {
        memcpy(&proc_control_B.z_c[0], &proc_control_B.imvec[0], 13U * sizeof
               (real_T));
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.u_scale[proc_control_B.Ns] =
            proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
            proc_control_B.Ns_i];
        }

        proc_control_B.i = fabs(proc_control_B.imvec[10]);
        proc_control_B.linearScaling = fabs(proc_control_B.imvec[11]);
        proc_control_B.residue = fabs(proc_control_B.imvec[12]);
        proc_control_B.Product3_h = fabs(proc_control_B.imvec[7]);
        proc_control_B.Product_o = fabs(proc_control_B.imvec[8]);
        proc_control_B.Product1_hg = fabs(proc_control_B.imvec[9]);
        if (rtIsNaN(proc_control_B.imvec[10])) {
          proc_control_B.Product2_j = (rtNaN);
        } else if (proc_control_B.imvec[10] < 0.0) {
          proc_control_B.Product2_j = -1.0;
        } else {
          proc_control_B.Product2_j = (proc_control_B.imvec[10] > 0.0);
        }

        if (rtIsNaN(proc_control_B.imvec[11])) {
          proc_control_B.oc = (rtNaN);
        } else if (proc_control_B.imvec[11] < 0.0) {
          proc_control_B.oc = -1.0;
        } else {
          proc_control_B.oc = (proc_control_B.imvec[11] > 0.0);
        }

        if (rtIsNaN(proc_control_B.imvec[12])) {
          proc_control_B.t10 = (rtNaN);
        } else if (proc_control_B.imvec[12] < 0.0) {
          proc_control_B.t10 = -1.0;
        } else {
          proc_control_B.t10 = (proc_control_B.imvec[12] > 0.0);
        }

        if (rtIsNaN(proc_control_B.imvec[7])) {
          proc_control_B.t11 = (rtNaN);
        } else if (proc_control_B.imvec[7] < 0.0) {
          proc_control_B.t11 = -1.0;
        } else {
          proc_control_B.t11 = (proc_control_B.imvec[7] > 0.0);
        }

        if (rtIsNaN(proc_control_B.imvec[8])) {
          proc_control_B.t12 = (rtNaN);
        } else if (proc_control_B.imvec[8] < 0.0) {
          proc_control_B.t12 = -1.0;
        } else {
          proc_control_B.t12 = (proc_control_B.imvec[8] > 0.0);
        }

        if (rtIsNaN(proc_control_B.imvec[9])) {
          proc_control_B.t13 = (rtNaN);
        } else if (proc_control_B.imvec[9] < 0.0) {
          proc_control_B.t13 = -1.0;
        } else {
          proc_control_B.t13 = (proc_control_B.imvec[9] > 0.0);
        }

        proc_control_B.t17 = proc_control_B.imvec[4] * proc_control_B.imvec[5] *
          2.0;
        proc_control_B.t14 = proc_control_B.imvec[4] * proc_control_B.imvec[6] *
          2.0;
        proc_control_B.t19 = proc_control_B.imvec[5] * proc_control_B.imvec[6] *
          2.0;
        proc_control_B.t20 = proc_control_B.imvec[3] * proc_control_B.imvec[4] *
          2.0;
        proc_control_B.t21 = proc_control_B.imvec[3] * proc_control_B.imvec[5] *
          2.0;
        proc_control_B.t15 = proc_control_B.imvec[3] * proc_control_B.imvec[6] *
          2.0;
        proc_control_B.t16 = proc_control_B.imvec[4] * proc_control_B.imvec[7] *
          2.0;
        proc_control_B.t24_tmp = proc_control_B.imvec[5] * proc_control_B.imvec
          [7];
        proc_control_B.t24 = proc_control_B.t24_tmp * 2.0;
        proc_control_B.t25_tmp = proc_control_B.imvec[6] * proc_control_B.imvec
          [7];
        proc_control_B.t25 = proc_control_B.t25_tmp * 2.0;
        proc_control_B.d_oi = proc_control_B.imvec[3] * proc_control_B.imvec[7] *
          2.0;
        proc_control_B.scale_tmp = proc_control_B.imvec[4] *
          proc_control_B.imvec[8];
        proc_control_B.scale = proc_control_B.scale_tmp * 2.0;
        proc_control_B.absxk = proc_control_B.imvec[5] * proc_control_B.imvec[8]
          * 2.0;
        proc_control_B.t_tmp = proc_control_B.imvec[6] * proc_control_B.imvec[8];
        proc_control_B.t = proc_control_B.t_tmp * 2.0;
        proc_control_B.t52 = proc_control_B.imvec[3] * proc_control_B.imvec[8] *
          2.0;
        proc_control_B.t70_tmp = proc_control_B.imvec[4] * proc_control_B.imvec
          [9];
        proc_control_B.t70 = proc_control_B.t70_tmp * 2.0;
        proc_control_B.t32_tmp = proc_control_B.imvec[5] * proc_control_B.imvec
          [9];
        proc_control_B.t32 = proc_control_B.t32_tmp * 2.0;
        proc_control_B.t33 = proc_control_B.imvec[6] * proc_control_B.imvec[9] *
          2.0;
        proc_control_B.t34 = proc_control_B.imvec[3] * proc_control_B.imvec[9] *
          2.0;
        proc_control_B.t39 = proc_control_B.imvec[4] / 2.0;
        proc_control_B.t40 = proc_control_B.imvec[5] / 2.0;
        proc_control_B.t41 = proc_control_B.imvec[6] / 2.0;
        proc_control_B.t42 = proc_control_B.imvec[3] / 2.0;
        proc_control_B.t43 = proc_control_B.imvec[10] / 2.0;
        proc_control_B.t44 = proc_control_B.imvec[11] / 2.0;
        proc_control_B.t45 = proc_control_B.imvec[12] / 2.0;
        proc_control_B.t55 = proc_control_B.imvec[12] * 1.0571299073092789E-5;
        proc_control_B.t56 = proc_control_B.imvec[11] * 9.7602896722846373E-5;
        proc_control_B.t57 = proc_control_B.imvec[8] * 0.01129023503850542;
        proc_control_B.rtb_sincos_o2_idx_1 = proc_control_B.imvec[7] *
          0.00477039452928936;
        proc_control_B.t59 = proc_control_B.imvec[10] * 9.1703771260780813E-5;
        proc_control_B.t61 = proc_control_B.imvec[9] * 0.143523560675718;
        proc_control_B.rtb_sincos_o2_idx_0 = proc_control_B.imvec[7] *
          0.00568699616459184;
        proc_control_B.Product3_l = proc_control_B.imvec[9] *
          0.069014505171846527;
        proc_control_B.t68 = proc_control_B.imvec[8] * 0.0071670223909459834;
        proc_control_B.t35_tmp = proc_control_B.imvec[4] * proc_control_B.imvec
          [4] * 2.0;
        proc_control_B.t36_tmp = proc_control_B.imvec[5] * proc_control_B.imvec
          [5] * 2.0;
        proc_control_B.t37_tmp = proc_control_B.imvec[6] * proc_control_B.imvec
          [6] * 2.0;
        proc_control_B.t60 = -(proc_control_B.imvec[10] * 9.1703771260780813E-5);
        proc_control_B.n_c = -proc_control_B.t + proc_control_B.t32;
        proc_control_B.A_h[39] = proc_control_B.n_c;
        proc_control_B.rtb_sincos_o2_idx_2 = proc_control_B.t25 -
          proc_control_B.t70;
        proc_control_B.A_h[40] = proc_control_B.rtb_sincos_o2_idx_2;
        proc_control_B.q0_tmp = -proc_control_B.t24 + proc_control_B.scale;
        proc_control_B.A_h[41] = proc_control_B.q0_tmp;
        proc_control_B.A_h[43] = proc_control_B.t43;
        proc_control_B.A_h[44] = proc_control_B.t44;
        proc_control_B.A_h[45] = proc_control_B.t45;
        proc_control_B.d34 = proc_control_B.imvec[4] * -0.0013017970932508 +
          proc_control_B.imvec[5] * 0.4138016519122657;
        proc_control_B.A_h[46] = proc_control_B.d34;
        proc_control_B.d35 = proc_control_B.imvec[4] * -0.51979016069898065 +
          proc_control_B.imvec[5] * 0.00099202109956931486;
        proc_control_B.A_h[47] = proc_control_B.d35;
        proc_control_B.d36 = proc_control_B.imvec[4] * 0.033540735888224739 -
          proc_control_B.imvec[5] * 0.0058758415205803329;
        proc_control_B.A_h[48] = proc_control_B.d36;
        proc_control_B.d_h = proc_control_B.imvec[4] * -25.242114556122988 +
          proc_control_B.imvec[5] * 0.1138522338822895;
        proc_control_B.A_h[49] = proc_control_B.d_h;
        proc_control_B.d1 = proc_control_B.imvec[4] * 0.1184627304742461 -
          proc_control_B.imvec[5] * 8.6371397256799973;
        proc_control_B.A_h[50] = proc_control_B.d1;
        proc_control_B.d2 = proc_control_B.imvec[4] * 0.38451002147839958 +
          proc_control_B.imvec[5] * 0.65361132374006825;
        proc_control_B.A_h[51] = proc_control_B.d2;
        proc_control_B.d3 = proc_control_B.absxk + proc_control_B.t33;
        proc_control_B.A_h[52] = proc_control_B.d3;
        proc_control_B.t24 = (proc_control_B.t24 - proc_control_B.t34) -
          proc_control_B.scale_tmp * 4.0;
        proc_control_B.A_h[53] = proc_control_B.t24;
        proc_control_B.t25 = (proc_control_B.t25 + proc_control_B.t52) -
          proc_control_B.t70_tmp * 4.0;
        proc_control_B.A_h[54] = proc_control_B.t25;
        proc_control_B.A_h[55] = -proc_control_B.t43;
        proc_control_B.A_h[57] = -proc_control_B.t45;
        proc_control_B.A_h[58] = proc_control_B.t44;
        proc_control_B.t70_tmp = (proc_control_B.imvec[4] * -0.01263905936484723
          - proc_control_B.imvec[6] * 0.4138016519122657) -
          proc_control_B.imvec[3] * 0.0013017970932508;
        proc_control_B.A_h[59] = proc_control_B.t70_tmp;
        proc_control_B.scale_tmp = (proc_control_B.imvec[4] *
          -0.05386046241846134 - proc_control_B.imvec[6] *
          0.00099202109956931486) - proc_control_B.imvec[3] *
          0.51979016069898065;
        proc_control_B.A_h[60] = proc_control_B.scale_tmp;
        proc_control_B.d4 = (proc_control_B.imvec[4] * 0.37271497842704371 +
                             proc_control_B.imvec[6] * 0.0058758415205803329) +
          proc_control_B.imvec[3] * 0.033540735888224739;
        proc_control_B.A_h[61] = proc_control_B.d4;
        proc_control_B.d5 = (proc_control_B.imvec[4] * -4.2094140168137981 -
                             proc_control_B.imvec[6] * 0.1138522338822895) -
          proc_control_B.imvec[3] * 25.242114556122988;
        proc_control_B.A_h[62] = proc_control_B.d5;
        proc_control_B.d6 = (proc_control_B.imvec[4] * 0.73643595165049924 +
                             proc_control_B.imvec[6] * 8.6371397256799973) +
          proc_control_B.imvec[3] * 0.1184627304742461;
        proc_control_B.A_h[63] = proc_control_B.d6;
        proc_control_B.d7 = (proc_control_B.imvec[4] * 0.009785912146552939 -
                             proc_control_B.imvec[6] * 0.65361132374006825) +
          proc_control_B.imvec[3] * 0.38451002147839958;
        proc_control_B.A_h[64] = proc_control_B.d7;
        proc_control_B.scale = (proc_control_B.scale + proc_control_B.t34) -
          proc_control_B.t24_tmp * 4.0;
        proc_control_B.A_h[65] = proc_control_B.scale;
        proc_control_B.t33 += proc_control_B.t16;
        proc_control_B.A_h[66] = proc_control_B.t33;
        proc_control_B.t = (-proc_control_B.d_oi + proc_control_B.t) -
          proc_control_B.t32_tmp * 4.0;
        proc_control_B.A_h[67] = proc_control_B.t;
        proc_control_B.A_h[68] = -proc_control_B.t44;
        proc_control_B.A_h[69] = proc_control_B.t45;
        proc_control_B.A_h[71] = -proc_control_B.t43;
        proc_control_B.t32_tmp = (proc_control_B.imvec[5] * -0.01263905936484723
          - proc_control_B.imvec[6] * 0.0013017970932508) +
          proc_control_B.imvec[3] * 0.4138016519122657;
        proc_control_B.A_h[72] = proc_control_B.t32_tmp;
        proc_control_B.t24_tmp = (proc_control_B.imvec[5] * -0.05386046241846134
          - proc_control_B.imvec[6] * 0.51979016069898065) +
          proc_control_B.imvec[3] * 0.00099202109956931486;
        proc_control_B.A_h[73] = proc_control_B.t24_tmp;
        proc_control_B.t34 = (proc_control_B.imvec[5] * 0.37271497842704371 +
                              proc_control_B.imvec[6] * 0.033540735888224739) -
          proc_control_B.imvec[3] * 0.0058758415205803329;
        proc_control_B.A_h[74] = proc_control_B.t34;
        proc_control_B.d8 = (proc_control_B.imvec[5] * -4.2094140168137981 -
                             proc_control_B.imvec[6] * 25.242114556122988) +
          proc_control_B.imvec[3] * 0.1138522338822895;
        proc_control_B.A_h[75] = proc_control_B.d8;
        proc_control_B.d9 = (proc_control_B.imvec[5] * 0.73643595165049924 +
                             proc_control_B.imvec[6] * 0.1184627304742461) -
          proc_control_B.imvec[3] * 8.6371397256799973;
        proc_control_B.A_h[76] = proc_control_B.d9;
        proc_control_B.d10 = (proc_control_B.imvec[5] * 0.009785912146552939 +
                              proc_control_B.imvec[6] * 0.38451002147839958) +
          proc_control_B.imvec[3] * 0.65361132374006825;
        proc_control_B.A_h[77] = proc_control_B.d10;
        proc_control_B.t52 = (-proc_control_B.t52 + proc_control_B.t70) -
          proc_control_B.t25_tmp * 4.0;
        proc_control_B.A_h[78] = proc_control_B.t52;
        proc_control_B.d_oi = (proc_control_B.d_oi + proc_control_B.t32) -
          proc_control_B.t_tmp * 4.0;
        proc_control_B.A_h[79] = proc_control_B.d_oi;
        proc_control_B.absxk += proc_control_B.t16;
        proc_control_B.A_h[80] = proc_control_B.absxk;
        proc_control_B.A_h[81] = -proc_control_B.t45;
        proc_control_B.A_h[82] = -proc_control_B.t44;
        proc_control_B.A_h[83] = proc_control_B.t43;
        proc_control_B.t16 = proc_control_B.imvec[4] * -0.4138016519122657 -
          proc_control_B.imvec[5] * 0.0013017970932508;
        proc_control_B.A_h[85] = proc_control_B.t16;
        proc_control_B.t_tmp = proc_control_B.imvec[4] * -0.00099202109956931486
          - proc_control_B.imvec[5] * 0.51979016069898065;
        proc_control_B.A_h[86] = proc_control_B.t_tmp;
        proc_control_B.t32 = proc_control_B.imvec[4] * 0.0058758415205803329 +
          proc_control_B.imvec[5] * 0.033540735888224739;
        proc_control_B.A_h[87] = proc_control_B.t32;
        proc_control_B.t70 = proc_control_B.imvec[4] * -0.1138522338822895 -
          proc_control_B.imvec[5] * 25.242114556122988;
        proc_control_B.A_h[88] = proc_control_B.t70;
        proc_control_B.t25_tmp = proc_control_B.imvec[4] * 8.6371397256799973 +
          proc_control_B.imvec[5] * 0.1184627304742461;
        proc_control_B.A_h[89] = proc_control_B.t25_tmp;
        proc_control_B.d11 = proc_control_B.imvec[4] * -0.65361132374006825 +
          proc_control_B.imvec[5] * 0.38451002147839958;
        proc_control_B.A_h[90] = proc_control_B.d11;
        proc_control_B.A_tmp = (-proc_control_B.t36_tmp - proc_control_B.t37_tmp)
          + 1.0;
        proc_control_B.A_h[91] = proc_control_B.A_tmp;
        proc_control_B.d12 = proc_control_B.t17 + proc_control_B.t15;
        proc_control_B.A_h[92] = proc_control_B.d12;
        proc_control_B.d13 = proc_control_B.t14 - proc_control_B.t21;
        proc_control_B.A_h[93] = proc_control_B.d13;
        proc_control_B.t11 *= proc_control_B.imvec[7];
        proc_control_B.d14 = (((((proc_control_B.Product3_h *
          -0.036243063166504788 + proc_control_B.t55) + proc_control_B.t56) -
          proc_control_B.t57) - proc_control_B.t61) - proc_control_B.t11 *
                              0.036243063166504788) - 0.46465465598083061;
        proc_control_B.A_h[98] = proc_control_B.d14;
        proc_control_B.d15 = (((proc_control_B.imvec[8] * 0.00477039452928936 -
          proc_control_B.imvec[9] * 0.001468966557066211) - proc_control_B.t11 *
          1.109195745194835E-6) - 1.422045827172866E-5) +
          ((proc_control_B.imvec[11] * 0.00041592787873873338 -
            proc_control_B.imvec[12] * 0.74121409319149256) -
           proc_control_B.Product3_h * 1.109195745194835E-6);
        proc_control_B.A_h[99] = proc_control_B.d15;
        proc_control_B.d16 = (((proc_control_B.imvec[8] * -5.890830655932608E-5
          + proc_control_B.imvec[9] * 0.00568699616459184) + proc_control_B.t11 *
          7.9830677445685858E-6) + 0.0001023470223662639) +
          ((proc_control_B.imvec[11] * 0.69409782663856512 -
            proc_control_B.imvec[12] * 0.00032422410747795261) +
           proc_control_B.Product3_h * 7.9830677445685858E-6);
        proc_control_B.A_h[100] = proc_control_B.d16;
        proc_control_B.d17 = (((proc_control_B.imvec[11] * 0.032506453976272241
          + proc_control_B.imvec[12] * 0.24400486517334929) -
          proc_control_B.Product3_h * 0.0001525121428377004) +
                              ((proc_control_B.imvec[8] * 0.044446246736648841 -
          proc_control_B.imvec[9] * 0.1148218101592509) - proc_control_B.t11 *
          0.0001525121428377004)) - 0.0019552838825346208;
        proc_control_B.A_h[101] = proc_control_B.d17;
        proc_control_B.d18 = (((proc_control_B.imvec[8] * 1.7911420833141059E-5
          + proc_control_B.imvec[9] * 8.3502908029033716) + proc_control_B.t11 *
          0.011738978516892359) + 0.150499724575543) + ((proc_control_B.imvec[11]
          * -0.00568699616459184 - proc_control_B.imvec[12] *
          0.001145088836853196) + proc_control_B.Product3_h *
          0.011738978516892359);
        proc_control_B.A_h[102] = proc_control_B.d18;
        proc_control_B.t11 = (((proc_control_B.imvec[11] *
          -7.5569972812640509E-5 - proc_control_B.imvec[12] *
          0.00477039452928936) - proc_control_B.Product3_h *
          0.0011846302503005471) + ((proc_control_B.imvec[8] * -5.91169722427816
          - proc_control_B.imvec[9] * 2.2977499514997389E-5) -
          proc_control_B.t11 * 0.0011846302503005471)) - 0.015187567311545479;
        proc_control_B.A_h[103] = proc_control_B.t11;
        proc_control_B.Product3_h = proc_control_B.t17 - proc_control_B.t15;
        proc_control_B.A_h[104] = proc_control_B.Product3_h;
        proc_control_B.t37_tmp = (-proc_control_B.t35_tmp -
          proc_control_B.t37_tmp) + 1.0;
        proc_control_B.A_h[105] = proc_control_B.t37_tmp;
        proc_control_B.t15 = proc_control_B.t19 + proc_control_B.t20;
        proc_control_B.A_h[106] = proc_control_B.t15;
        proc_control_B.t12 *= proc_control_B.imvec[8];
        proc_control_B.t17 = (((proc_control_B.imvec[10] *
          -2.1519484922730651E-5 + proc_control_B.imvec[12] * 1.3454180758607359)
          - proc_control_B.Product_o * 7.7738505218783331E-7) -
                              proc_control_B.imvec[7] * 0.01129023503850542) +
          ((proc_control_B.imvec[9] * -0.00041111798914172931 -
            proc_control_B.t12 * 7.7738505218783331E-7) - 1.8960611028971542E-5);
        proc_control_B.A_h[111] = proc_control_B.t17;
        proc_control_B.t55 = (proc_control_B.Product_o * -0.01903042325061665 +
                              proc_control_B.t55) +
          proc_control_B.rtb_sincos_o2_idx_1;
        proc_control_B.d19 = proc_control_B.t12 * 0.01903042325061665;
        proc_control_B.A_h[112] = (((proc_control_B.t55 - proc_control_B.t59) -
          proc_control_B.Product3_l) - proc_control_B.d19) - 0.46415666464918648;
        proc_control_B.d20 = (((proc_control_B.imvec[7] * -5.890830655932608E-5
          + proc_control_B.imvec[9] * 0.0071670223909459834) +
          proc_control_B.t12 * 2.3842573459475649E-5) + 0.00058152618193843065)
          + ((proc_control_B.imvec[10] * -0.93255469429176219 -
              proc_control_B.imvec[12] * 7.6083411800115719E-5) +
             proc_control_B.Product_o * 2.3842573459475649E-5);
        proc_control_B.A_h[113] = proc_control_B.d20;
        proc_control_B.d21 = (((proc_control_B.imvec[10] *
          -0.0071670223909459834 + proc_control_B.imvec[12] *
          0.00145353196782447) - proc_control_B.Product_o * 0.017943464992838758)
                              + ((proc_control_B.imvec[7] * 0.044446246736648841
          - proc_control_B.imvec[9] * 5.3937622658585171) - proc_control_B.t12 *
          0.017943464992838758)) - 0.4376454876302136;
        proc_control_B.A_h[114] = proc_control_B.d21;
        proc_control_B.d22 = (((proc_control_B.imvec[10] * 0.0012538688125934979
          - proc_control_B.imvec[12] * 0.1118794885864644) +
          proc_control_B.Product_o * 8.4206769578830268E-5) +
                              proc_control_B.imvec[7] * 1.7911420833141059E-5) +
          ((proc_control_B.t12 * 8.4206769578830268E-5 + proc_control_B.imvec[9]
            * 0.025315910649035739) + 0.0020538236482641531);
        proc_control_B.A_h[115] = proc_control_B.d22;
        proc_control_B.t12 = (((proc_control_B.imvec[10] * 1.6661666253314429E-5
          + proc_control_B.imvec[12] * 0.01129023503850542) +
          proc_control_B.Product_o * 0.00035080205133418912) +
                              ((proc_control_B.imvec[7] * -5.91169722427816 +
          proc_control_B.imvec[9] * 0.01257120723021817) + proc_control_B.t12 *
          0.00035080205133418912)) + 0.0085561475935168052;
        proc_control_B.A_h[116] = proc_control_B.t12;
        proc_control_B.Product_o = proc_control_B.t14 + proc_control_B.t21;
        proc_control_B.A_h[117] = proc_control_B.Product_o;
        proc_control_B.t19 -= proc_control_B.t20;
        proc_control_B.A_h[118] = proc_control_B.t19;
        proc_control_B.t35_tmp = (-proc_control_B.t35_tmp -
          proc_control_B.t36_tmp) + 1.0;
        proc_control_B.A_h[119] = proc_control_B.t35_tmp;
        proc_control_B.t13 *= proc_control_B.imvec[9];
        proc_control_B.t20 = (((proc_control_B.imvec[10] * 2.989993556213668E-6
          - proc_control_B.imvec[11] * 1.4431163638272659) +
          proc_control_B.Product1_hg * 5.1582899272597018E-6) -
                              proc_control_B.imvec[7] * 0.143523560675718) +
          ((proc_control_B.t13 * 5.1582899272597018E-6 + proc_control_B.imvec[8]
            * -0.00041111798914172931) + 0.0001592064792364106);
        proc_control_B.A_h[124] = proc_control_B.t20;
        proc_control_B.t14 = (((proc_control_B.imvec[10] * 1.0731951852318531 -
          proc_control_B.imvec[11] * 1.356129262930646E-5) +
          proc_control_B.Product1_hg * 2.1981689677272681E-5) +
                              ((proc_control_B.imvec[7] * -0.001468966557066211
          - proc_control_B.imvec[8] * 0.069014505171846527) + proc_control_B.t13
          * 2.1981689677272681E-5)) + 0.00067844721226150231;
        proc_control_B.A_h[125] = proc_control_B.t14;
        proc_control_B.t56 += proc_control_B.Product1_hg * -0.01616685726098728;
        proc_control_B.t21 = proc_control_B.t13 * 0.01616685726098728;
        proc_control_B.A_h[126] = ((((proc_control_B.t56 - proc_control_B.t59) +
          proc_control_B.rtb_sincos_o2_idx_0) + proc_control_B.t68) -
          proc_control_B.t21) - 0.49897707595639768;
        proc_control_B.t59 = (((proc_control_B.imvec[10] * 0.069014505171846527
          - proc_control_B.imvec[11] * 0.0018646499569661989) +
          proc_control_B.Product1_hg * 0.00171795837774031) +
                              ((proc_control_B.imvec[7] * -0.1148218101592509 -
          proc_control_B.imvec[8] * 5.3937622658585171) + proc_control_B.t13 *
          0.00171795837774031)) + 0.053023406720379938;
        proc_control_B.A_h[127] = proc_control_B.t59;
        proc_control_B.t36_tmp = (((proc_control_B.imvec[10] *
          -0.00032387772021301561 + proc_control_B.imvec[11] * 0.143523560675718)
          - proc_control_B.Product1_hg * 0.00030055639757781919) +
          ((proc_control_B.imvec[7] * 8.3502908029033716 + proc_control_B.imvec
            [8] * 0.025315910649035739) - proc_control_B.t13 *
           0.00030055639757781919)) - 0.0092764320240067664;
        proc_control_B.A_h[128] = proc_control_B.t36_tmp;
        proc_control_B.t13 = (((proc_control_B.imvec[10] *
          -0.0013492616947596331 - proc_control_B.imvec[11] *
          0.01448357294143097) - proc_control_B.Product1_hg *
          3.993855127780116E-6) - proc_control_B.imvec[7] *
                              2.2977499514997389E-5) + ((proc_control_B.imvec[8]
          * 0.01257120723021817 - proc_control_B.t13 * 3.993855127780116E-6) -
          0.00012326713357346041);
        proc_control_B.A_h[129] = proc_control_B.t13;
        proc_control_B.A_h[133] = -proc_control_B.t39;
        proc_control_B.A_h[134] = proc_control_B.t42;
        proc_control_B.A_h[135] = proc_control_B.t41;
        proc_control_B.A_h[136] = -proc_control_B.t40;
        proc_control_B.Product1_hg = proc_control_B.imvec[10] *
          proc_control_B.Product2_j;
        proc_control_B.Product2_j = (((proc_control_B.imvec[10] *
          -0.00010396365424827521 - proc_control_B.imvec[11] *
          0.0030560301354578762) - proc_control_B.imvec[12] *
          0.030270009262121408) - proc_control_B.i * 2.1768827225552109E-5) +
          (((proc_control_B.imvec[8] * -2.1519484922730651E-5 +
             proc_control_B.imvec[9] * 2.989993556213668E-6) -
            proc_control_B.Product1_hg * 2.1768827225552109E-5) -
           0.00043450752945213789);
        proc_control_B.A_h[137] = proc_control_B.Product2_j;
        proc_control_B.d23 = ((((proc_control_B.imvec[10] * 0.0028513455484883 -
          proc_control_B.imvec[11] * 0.00032316342950661811) +
          proc_control_B.imvec[12] * 4.2079285691049859E-5) - proc_control_B.i *
          0.0036543398217122828) + ((proc_control_B.imvec[8] *
          -9.1703771260780813E-5 + proc_control_B.imvec[9] * 1.0731951852318531)
          - proc_control_B.Product1_hg * 0.0036543398217122828)) -
          0.072940914605035587;
        proc_control_B.A_h[138] = proc_control_B.d23;
        proc_control_B.d24 = (((proc_control_B.imvec[10] * 0.023864851221217471
          + proc_control_B.imvec[11] * 4.0426879502317728E-6) -
          proc_control_B.imvec[12] * 0.00016269010774240791) +
                              ((proc_control_B.i * 0.0003794960966701478 -
          proc_control_B.imvec[8] * 0.93255469429176219) - proc_control_B.imvec
          [9] * 9.1703771260780813E-5)) + (proc_control_B.Product1_hg *
          0.0003794960966701478 + 0.007574772388625705);
        proc_control_B.A_h[139] = proc_control_B.d24;
        proc_control_B.d25 = ((((proc_control_B.i * -0.28560141361437341 +
          proc_control_B.Product3_l) - proc_control_B.t68) -
          proc_control_B.Product1_hg * 0.28560141361437341) - 5.7006270182509668)
          + ((proc_control_B.imvec[10] * 0.00017692814721597281 -
              proc_control_B.imvec[11] * 0.00301187450220627) +
             proc_control_B.imvec[12] * 0.0032852614324183722);
        proc_control_B.A_h[140] = proc_control_B.d25;
        proc_control_B.d26 = (((proc_control_B.imvec[10] * 0.005100926963153893
          + proc_control_B.imvec[11] * 7.54282242443926E-5) +
          proc_control_B.imvec[12] * 0.76112100692746432) + ((proc_control_B.i *
          0.0013404854555911631 + proc_control_B.imvec[8] *
          0.0012538688125934979) - proc_control_B.imvec[9] *
          0.00032387772021301561)) + (proc_control_B.Product1_hg *
          0.0013404854555911631 + 0.026756196718386482);
        proc_control_B.A_h[141] = proc_control_B.d26;
        proc_control_B.Product1_hg = (((proc_control_B.imvec[10] *
          -0.0085297096290247246 - proc_control_B.imvec[11] *
          0.59953739020136265) - proc_control_B.imvec[12] *
          6.8948828938803766E-5) + ((proc_control_B.i * 0.00066564938883491385 +
          proc_control_B.imvec[8] * 1.6661666253314429E-5) -
          proc_control_B.imvec[9] * 0.0013492616947596331)) +
          (proc_control_B.Product1_hg * 0.00066564938883491385 +
           0.013286414946804669);
        proc_control_B.A_h[142] = proc_control_B.Product1_hg;
        proc_control_B.A_h[146] = -proc_control_B.t40;
        proc_control_B.A_h[147] = -proc_control_B.t41;
        proc_control_B.A_h[148] = proc_control_B.t42;
        proc_control_B.A_h[149] = proc_control_B.t39;
        proc_control_B.i = proc_control_B.imvec[11] * proc_control_B.oc;
        proc_control_B.oc = ((((proc_control_B.imvec[10] *
          -0.0030560301354578762 + proc_control_B.imvec[11] *
          0.001929418735906703) + proc_control_B.imvec[12] *
          6.2884941489263073E-5) + proc_control_B.linearScaling *
                              0.001003331497170287) + ((proc_control_B.imvec[7] *
          9.7602896722846373E-5 - proc_control_B.imvec[9] * 1.4431163638272659)
          + proc_control_B.i * 0.001003331497170287)) + 0.0234110682673067;
        proc_control_B.A_h[150] = proc_control_B.oc;
        proc_control_B.d27 = (((proc_control_B.imvec[10] *
          -0.00032316342950661811 + proc_control_B.imvec[11] *
          4.5292476302332957E-6) - proc_control_B.imvec[12] *
          0.016528998001422841) + proc_control_B.linearScaling *
                              1.026911824132076E-5) + (((proc_control_B.imvec[7]
          * 0.00041592787873873338 - proc_control_B.imvec[9] *
          1.356129262930646E-5) + proc_control_B.i * 1.026911824132076E-5) +
          0.00023961275896415121);
        proc_control_B.A_h[151] = proc_control_B.d27;
        proc_control_B.d28 = (((proc_control_B.imvec[10] * 4.0426879502317728E-6
          + proc_control_B.imvec[11] * 0.023860477346842442) -
          proc_control_B.imvec[12] * 0.000941018323416786) +
                              ((proc_control_B.linearScaling *
          -3.9756137245743291E-5 + proc_control_B.imvec[7] * 0.69409782663856512)
          + proc_control_B.imvec[9] * 9.7602896722846373E-5)) +
          (proc_control_B.i * -3.9756137245743291E-5 - 0.00092764320240067675);
        proc_control_B.A_h[152] = proc_control_B.d28;
        proc_control_B.d29 = (((proc_control_B.imvec[10] * -0.00301187450220627
          + proc_control_B.imvec[11] * 0.00082864946354184129) -
          proc_control_B.imvec[12] * 0.291807921220024) +
                              ((proc_control_B.linearScaling *
          0.00080268590155159437 + proc_control_B.imvec[7] *
          0.032506453976272241) - proc_control_B.imvec[9] *
          0.0018646499569661989)) + (proc_control_B.i * 0.00080268590155159437 +
          0.018729337702870542);
        proc_control_B.A_h[153] = proc_control_B.d29;
        proc_control_B.t61 = ((((proc_control_B.linearScaling *
          -0.058374455968341669 + proc_control_B.t61) -
          proc_control_B.rtb_sincos_o2_idx_0) - proc_control_B.i *
          0.058374455968341669) - 1.362070639261306) + ((proc_control_B.imvec[10]
          * 7.54282242443926E-5 - proc_control_B.imvec[11] *
          0.00019446645525741661) - proc_control_B.imvec[12] *
          0.003324115892995542);
        proc_control_B.A_h[154] = proc_control_B.t61;
        proc_control_B.i = ((((proc_control_B.linearScaling *
          1.6062902063655571E-7 - proc_control_B.imvec[7] *
          7.5569972812640509E-5) - proc_control_B.imvec[9] * 0.01448357294143097)
                             + proc_control_B.i * 1.6062902063655571E-7) +
                            ((proc_control_B.imvec[10] * -0.59953739020136265 +
                              proc_control_B.imvec[11] * 0.0085432434746820687)
                             + proc_control_B.imvec[12] * 0.0030111351640179931))
          + 3.7480104815196341E-6;
        proc_control_B.A_h[155] = proc_control_B.i;
        proc_control_B.A_h[159] = -proc_control_B.t41;
        proc_control_B.A_h[160] = proc_control_B.t40;
        proc_control_B.A_h[161] = -proc_control_B.t39;
        proc_control_B.A_h[162] = proc_control_B.t42;
        proc_control_B.linearScaling = proc_control_B.imvec[12] *
          proc_control_B.t10;
        proc_control_B.t10 = (((proc_control_B.imvec[10] * -0.030270009262121408
          + proc_control_B.imvec[11] * 6.2884941489263073E-5) +
          proc_control_B.imvec[12] * 0.0020006959490984312) -
                              proc_control_B.residue * 0.0001032754577185093) +
          (((proc_control_B.imvec[7] * 1.0571299073092789E-5 +
             proc_control_B.imvec[8] * 1.3454180758607359) -
            proc_control_B.linearScaling * 0.0001032754577185093) -
           0.0050625224371818262);
        proc_control_B.A_h[163] = proc_control_B.t10;
        proc_control_B.d30 = (((proc_control_B.imvec[10] * 4.2079285691049859E-5
          - proc_control_B.imvec[11] * 0.016528998001422841) +
          proc_control_B.imvec[12] * 0.00283488707941543) +
                              proc_control_B.residue * 4.3636352726935713E-5) +
          (((proc_control_B.imvec[7] * -0.74121409319149256 +
             proc_control_B.imvec[8] * 1.0571299073092789E-5) +
            proc_control_B.linearScaling * 4.3636352726935713E-5) +
           0.0021390368983792022);
        proc_control_B.A_h[164] = proc_control_B.d30;
        proc_control_B.d31 = ((((proc_control_B.residue * -5.3885346962112674E-7
          - proc_control_B.imvec[7] * 0.00032422410747795261) -
          proc_control_B.imvec[8] * 7.6083411800115719E-5) -
          proc_control_B.linearScaling * 5.3885346962112674E-7) +
                              ((proc_control_B.imvec[10] *
          -0.00016269010774240791 - proc_control_B.imvec[11] *
          0.000941018323416786) - proc_control_B.imvec[12] * 2.6641242336162E-6))
          - 2.6414385765741509E-5;
        proc_control_B.A_h[165] = proc_control_B.d31;
        proc_control_B.d32 = (((proc_control_B.imvec[10] * 0.0032852614324183722
          - proc_control_B.imvec[11] * 0.291807921220024) -
          proc_control_B.imvec[12] * 0.00063467747547131872) +
                              ((proc_control_B.residue * 0.00040656429737222281
          + proc_control_B.imvec[7] * 0.24400486517334929) +
          proc_control_B.imvec[8] * 0.00145353196782447)) +
          (proc_control_B.linearScaling * 0.00040656429737222281 +
           0.019929622420207);
        proc_control_B.A_h[166] = proc_control_B.d32;
        proc_control_B.d33 = ((((proc_control_B.residue * 1.6384160104928689E-7
          - proc_control_B.imvec[7] * 0.001145088836853196) -
          proc_control_B.imvec[8] * 0.1118794885864644) +
          proc_control_B.linearScaling * 1.6384160104928689E-7) +
                              ((proc_control_B.imvec[10] * 0.76112100692746432 -
          proc_control_B.imvec[11] * 0.003324115892995542) -
          proc_control_B.imvec[12] * 0.005288701994301117)) +
          8.0314510318277867E-6;
        proc_control_B.A_h[167] = proc_control_B.d33;
        proc_control_B.linearScaling = ((((proc_control_B.residue *
          -0.054076220260104418 + proc_control_B.t57) -
          proc_control_B.rtb_sincos_o2_idx_1) - proc_control_B.linearScaling *
          0.054076220260104418) - 2.6507951107894319) + ((proc_control_B.imvec
          [10] * -6.8948828938803766E-5 + proc_control_B.imvec[11] *
          0.0030111351640179931) + proc_control_B.imvec[12] *
          1.7711862430984169E-5);
        proc_control_B.A_h[168] = proc_control_B.linearScaling;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 169; proc_control_B.Ns++)
        {
          proc_control_B.C[proc_control_B.Ns + proc_control_B.Ns_i * 169] =
            c_1[proc_control_B.Ns];
          proc_control_B.dv1[proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.Ns] *
            proc_control_P.Constant_Value_ce;
        }

        proc_control_expm_l(proc_control_B.dv1, &proc_control_B.A[169 *
                            proc_control_B.Ns_i]);
        memset(&proc_control_B.modCoeffs[0], 0, 36U * sizeof(real_T));

        // Outputs for Enabled SubSystem: '<S6>/DVL Measurements' incorporates:
        //   EnablePort: '<S177>/Enable'

        // Outputs for Enabled SubSystem: '<S202>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S205>/Enable'

        proc_control_B.Ns = 0;

        // End of Outputs for SubSystem: '<S202>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S6>/DVL Measurements'
        for (proc_control_B.base_index = 0; proc_control_B.base_index < 6;
             proc_control_B.base_index++) {
          // Outputs for Enabled SubSystem: '<S6>/DVL Measurements' incorporates:
          //   EnablePort: '<S177>/Enable'

          // Outputs for Enabled SubSystem: '<S202>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S205>/Enable'

          proc_control_B.modCoeffs[proc_control_B.Ns] = 1.0;
          proc_control_B.Ns += 7;

          // End of Outputs for SubSystem: '<S202>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S6>/DVL Measurements'
        }

        proc_control_B.y_m[39] = proc_control_B.n_c;
        proc_control_B.y_m[40] = proc_control_B.rtb_sincos_o2_idx_2;
        proc_control_B.y_m[41] = proc_control_B.q0_tmp;
        proc_control_B.y_m[43] = proc_control_B.t43;
        proc_control_B.y_m[44] = proc_control_B.t44;
        proc_control_B.y_m[45] = proc_control_B.t45;
        proc_control_B.y_m[46] = proc_control_B.d34;
        proc_control_B.y_m[47] = proc_control_B.d35;
        proc_control_B.y_m[48] = proc_control_B.d36;
        proc_control_B.y_m[49] = proc_control_B.d_h;
        proc_control_B.y_m[50] = proc_control_B.d1;
        proc_control_B.y_m[51] = proc_control_B.d2;
        proc_control_B.y_m[52] = proc_control_B.d3;
        proc_control_B.y_m[53] = proc_control_B.t24;
        proc_control_B.y_m[54] = proc_control_B.t25;
        proc_control_B.y_m[55] = -proc_control_B.t43;
        proc_control_B.y_m[57] = -proc_control_B.t45;
        proc_control_B.y_m[58] = proc_control_B.t44;
        proc_control_B.y_m[59] = proc_control_B.t70_tmp;
        proc_control_B.y_m[60] = proc_control_B.scale_tmp;
        proc_control_B.y_m[61] = proc_control_B.d4;
        proc_control_B.y_m[62] = proc_control_B.d5;
        proc_control_B.y_m[63] = proc_control_B.d6;
        proc_control_B.y_m[64] = proc_control_B.d7;
        proc_control_B.y_m[65] = proc_control_B.scale;
        proc_control_B.y_m[66] = proc_control_B.t33;
        proc_control_B.y_m[67] = proc_control_B.t;
        proc_control_B.y_m[68] = -proc_control_B.t44;
        proc_control_B.y_m[69] = proc_control_B.t45;
        proc_control_B.y_m[71] = -proc_control_B.t43;
        proc_control_B.y_m[72] = proc_control_B.t32_tmp;
        proc_control_B.y_m[73] = proc_control_B.t24_tmp;
        proc_control_B.y_m[74] = proc_control_B.t34;
        proc_control_B.y_m[75] = proc_control_B.d8;
        proc_control_B.y_m[76] = proc_control_B.d9;
        proc_control_B.y_m[77] = proc_control_B.d10;
        proc_control_B.y_m[78] = proc_control_B.t52;
        proc_control_B.y_m[79] = proc_control_B.d_oi;
        proc_control_B.y_m[80] = proc_control_B.absxk;
        proc_control_B.y_m[81] = -proc_control_B.t45;
        proc_control_B.y_m[82] = -proc_control_B.t44;
        proc_control_B.y_m[83] = proc_control_B.t43;
        proc_control_B.y_m[85] = proc_control_B.t16;
        proc_control_B.y_m[86] = proc_control_B.t_tmp;
        proc_control_B.y_m[87] = proc_control_B.t32;
        proc_control_B.y_m[88] = proc_control_B.t70;
        proc_control_B.y_m[89] = proc_control_B.t25_tmp;
        proc_control_B.y_m[90] = proc_control_B.d11;
        proc_control_B.y_m[91] = proc_control_B.A_tmp;
        proc_control_B.y_m[92] = proc_control_B.d12;
        proc_control_B.y_m[93] = proc_control_B.d13;
        proc_control_B.y_m[98] = proc_control_B.d14;
        proc_control_B.y_m[99] = proc_control_B.d15;
        proc_control_B.y_m[100] = proc_control_B.d16;
        proc_control_B.y_m[101] = proc_control_B.d17;
        proc_control_B.y_m[102] = proc_control_B.d18;
        proc_control_B.y_m[103] = proc_control_B.t11;
        proc_control_B.y_m[104] = proc_control_B.Product3_h;
        proc_control_B.y_m[105] = proc_control_B.t37_tmp;
        proc_control_B.y_m[106] = proc_control_B.t15;
        proc_control_B.y_m[111] = proc_control_B.t17;
        proc_control_B.y_m[112] = (((proc_control_B.t55 + proc_control_B.t60) -
          proc_control_B.Product3_l) - proc_control_B.d19) - 0.46415666464918648;
        proc_control_B.y_m[113] = proc_control_B.d20;
        proc_control_B.y_m[114] = proc_control_B.d21;
        proc_control_B.y_m[115] = proc_control_B.d22;
        proc_control_B.y_m[116] = proc_control_B.t12;
        proc_control_B.y_m[117] = proc_control_B.Product_o;
        proc_control_B.y_m[118] = proc_control_B.t19;
        proc_control_B.y_m[119] = proc_control_B.t35_tmp;
        proc_control_B.y_m[124] = proc_control_B.t20;
        proc_control_B.y_m[125] = proc_control_B.t14;
        proc_control_B.y_m[126] = ((((proc_control_B.t56 + proc_control_B.t60) +
          proc_control_B.rtb_sincos_o2_idx_0) + proc_control_B.t68) -
          proc_control_B.t21) - 0.49897707595639768;
        proc_control_B.y_m[127] = proc_control_B.t59;
        proc_control_B.y_m[128] = proc_control_B.t36_tmp;
        proc_control_B.y_m[129] = proc_control_B.t13;
        proc_control_B.y_m[133] = -proc_control_B.t39;
        proc_control_B.y_m[134] = proc_control_B.t42;
        proc_control_B.y_m[135] = proc_control_B.t41;
        proc_control_B.y_m[136] = -proc_control_B.t40;
        proc_control_B.y_m[137] = proc_control_B.Product2_j;
        proc_control_B.y_m[138] = proc_control_B.d23;
        proc_control_B.y_m[139] = proc_control_B.d24;
        proc_control_B.y_m[140] = proc_control_B.d25;
        proc_control_B.y_m[141] = proc_control_B.d26;
        proc_control_B.y_m[142] = proc_control_B.Product1_hg;
        proc_control_B.y_m[146] = -proc_control_B.t40;
        proc_control_B.y_m[147] = -proc_control_B.t41;
        proc_control_B.y_m[148] = proc_control_B.t42;
        proc_control_B.y_m[149] = proc_control_B.t39;
        proc_control_B.y_m[150] = proc_control_B.oc;
        proc_control_B.y_m[151] = proc_control_B.d27;
        proc_control_B.y_m[152] = proc_control_B.d28;
        proc_control_B.y_m[153] = proc_control_B.d29;
        proc_control_B.y_m[154] = proc_control_B.t61;
        proc_control_B.y_m[155] = proc_control_B.i;
        proc_control_B.y_m[159] = -proc_control_B.t41;
        proc_control_B.y_m[160] = proc_control_B.t40;
        proc_control_B.y_m[161] = -proc_control_B.t39;
        proc_control_B.y_m[162] = proc_control_B.t42;
        proc_control_B.y_m[163] = proc_control_B.t10;
        proc_control_B.y_m[164] = proc_control_B.d30;
        proc_control_B.y_m[165] = proc_control_B.d31;
        proc_control_B.y_m[166] = proc_control_B.d32;
        proc_control_B.y_m[167] = proc_control_B.d33;
        proc_control_B.y_m[168] = proc_control_B.linearScaling;
        proc_control_B.Ns = 0;
        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k
             ++) {
          for (proc_control_B.i_g = 0; proc_control_B.i_g <= 4;
               proc_control_B.i_g += 2) {
            proc_control_B.base_index = (proc_control_B.i_g + proc_control_B.nz)
              + 98;
            tmp_2 = _mm_loadu_pd(&proc_control_B.A[proc_control_B.base_index]);
            proc_control_B.i_p = proc_control_B.i_g + proc_control_B.Ns;
            tmp_1 = _mm_loadu_pd(&proc_control_B.modCoeffs[proc_control_B.i_p]);
            _mm_storeu_pd(&proc_control_B.modCoeffs[proc_control_B.i_p],
                          _mm_sub_pd(tmp_2, tmp_1));
            tmp_2 = _mm_loadu_pd(&proc_control_B.y_m[proc_control_B.base_index]);
            _mm_storeu_pd(&proc_control_B.dv10[proc_control_B.i_p], tmp_2);
          }

          proc_control_B.Ns += 6;
          proc_control_B.nz += 13;
        }

        proc_control_mldivide_jo(proc_control_B.dv10, proc_control_B.modCoeffs);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.nz = 0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 8;
               proc_control_B.b_k++) {
            proc_control_B.residue = 0.0;
            proc_control_B.i_g = 0;
            for (proc_control_B.base_index = 0; proc_control_B.base_index < 6;
                 proc_control_B.base_index++) {
              proc_control_B.residue +=
                proc_control_B.modCoeffs[proc_control_B.i_g + proc_control_B.Ns]
                * c_b[proc_control_B.base_index + proc_control_B.nz];
              proc_control_B.i_g += 6;
            }

            proc_control_B.a__1_j[proc_control_B.nz + proc_control_B.Ns] =
              proc_control_B.residue;
            proc_control_B.nz += 6;
          }
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          for (proc_control_B.nz = 0; proc_control_B.nz < 7; proc_control_B.nz++)
          {
            proc_control_B.B[(proc_control_B.nz + 13 * proc_control_B.Ns) + 104 *
              proc_control_B.Ns_i] = 0.0;
          }

          for (proc_control_B.nz = 0; proc_control_B.nz < 6; proc_control_B.nz++)
          {
            proc_control_B.B[((proc_control_B.nz + 13 * proc_control_B.Ns) + 104
                              * proc_control_B.Ns_i) + 7] =
              proc_control_B.a__1_j[6 * proc_control_B.Ns + proc_control_B.nz];
          }
        }

        for (proc_control_B.nz = 0; proc_control_B.nz < proc_control_B.b_j;
             proc_control_B.nz++) {
          proc_control_B.i = proc_control_P.Constant_Value_ce /
            proc_control_P.Constant1_Value_gt;
          proc_control_AUV8QuatSimFcn(proc_control_B.imvec,
            proc_control_B.u_scale, proc_control_B.DataStoreRead);
          for (proc_control_B.Ns = 0; proc_control_B.Ns <= 10; proc_control_B.Ns
               += 2) {
            tmp_2 = _mm_loadu_pd(&proc_control_B.DataStoreRead[proc_control_B.Ns]);
            tmp_1 = _mm_loadu_pd(&proc_control_B.imvec[proc_control_B.Ns]);
            _mm_storeu_pd(&proc_control_B.imvec[proc_control_B.Ns], _mm_add_pd
                          (_mm_mul_pd(tmp_2, _mm_set1_pd(proc_control_B.i)),
                           tmp_1));
          }

          for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns
               ++) {
            proc_control_B.imvec[proc_control_B.Ns] +=
              proc_control_B.DataStoreRead[proc_control_B.Ns] * proc_control_B.i;
          }

          proc_control_B.d_oi = proc_control_norm_nti(&proc_control_B.imvec[3]);
          tmp_2 = _mm_set1_pd(proc_control_B.d_oi);
          tmp_1 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.imvec[3]), tmp_2);
          _mm_storeu_pd(&proc_control_B.imvec[3], tmp_1);
          tmp_2 = _mm_div_pd(_mm_loadu_pd(&proc_control_B.imvec[5]), tmp_2);
          _mm_storeu_pd(&proc_control_B.imvec[5], tmp_2);
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.U[proc_control_B.Ns + (proc_control_B.Ns_i << 3)] =
            proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
            proc_control_B.Ns_i];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns <= 10; proc_control_B.Ns +=
             2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.z_c[proc_control_B.Ns]);
          proc_control_B.nz = 13 * proc_control_B.Ns_i + proc_control_B.Ns;
          _mm_storeu_pd(&proc_control_B.Y[proc_control_B.nz], tmp_2);
          _mm_storeu_pd(&proc_control_B.X[proc_control_B.nz], tmp_2);
          tmp_1 = _mm_loadu_pd(&proc_control_B.imvec[proc_control_B.Ns]);
          _mm_storeu_pd(&proc_control_B.DX[proc_control_B.nz], _mm_sub_pd(tmp_1,
            tmp_2));
        }

        for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.residue = proc_control_B.z_c[proc_control_B.Ns];
          proc_control_B.base_index = 13 * proc_control_B.Ns_i +
            proc_control_B.Ns;
          proc_control_B.Y[proc_control_B.base_index] = proc_control_B.residue;
          proc_control_B.X[proc_control_B.base_index] = proc_control_B.residue;
          proc_control_B.DX[proc_control_B.base_index] =
            proc_control_B.imvec[proc_control_B.Ns] - proc_control_B.residue;
        }
      }

      // End of MATLAB Function: '<S72>/MATLAB Function'

      // MATLAB Function: '<S143>/FixedHorizonOptimizer'
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3003; proc_control_B.Ns++)
      {
        proc_control_B.b_C[proc_control_B.Ns] = c_0[proc_control_B.Ns];
      }

      memcpy(&proc_control_B.b_A[0], &d_1[0], 4851U * sizeof(real_T));
      memset(&proc_control_B.Bu_o[0], 0, 1848U * sizeof(real_T));
      memset(&proc_control_B.Bv_m[0], 0, 231U * sizeof(real_T));
      memset(&proc_control_B.Dv_e[0], 0, 143U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 21; proc_control_B.Ns++) {
        memcpy(&proc_control_B.b_A[proc_control_B.Ns * 21], &b[proc_control_B.Ns
               * 21], 21U * sizeof(real_T));
        for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++)
        {
          proc_control_B.Ns_i = 13 * proc_control_B.Ns + proc_control_B.nz;
          proc_control_B.b_C[proc_control_B.Ns_i] = d_0[proc_control_B.Ns_i];
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 4; proc_control_B.Ns += 4)
      {
        _mm_storeu_si128((__m128i *)&proc_control_B.iv1[proc_control_B.Ns],
                         _mm_add_epi32(_mm_add_epi32(_mm_set1_epi32
          (proc_control_B.Ns), _mm_loadu_si128((const __m128i *)&offsets_2[0])),
          _mm_set1_epi32(1)));
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 8; proc_control_B.Ns += 4)
      {
        _mm_storeu_si128((__m128i *)&proc_control_B.iv[proc_control_B.Ns],
                         _mm_add_epi32(_mm_add_epi32(_mm_set1_epi32
          (proc_control_B.Ns), _mm_loadu_si128((const __m128i *)&offsets_1[0])),
          _mm_set1_epi32(1)));
      }

      for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns++)
      {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv18[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.DataStoreRead[proc_control_B.Ns] = 1.0;
      }

      memcpy(&proc_control_B.rtb_B_p[0], &(*(real_T (*)[104])&proc_control_B.B[0])
             [0], 104U * sizeof(real_T));
      memcpy(&proc_control_B.b_B[0], &c[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S143>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S75>/Pulse Generator'
      //   MATLABSystem: '<S238>/MATLAB System'
      //   Merge generated from: '<S7>/Merge'
      //   SwitchCase: '<S7>/Switch Case'
      //
      proc_control_mpc_plantupdate(&proc_control_B.A[0], proc_control_B.rtb_B_p,
        &proc_control_B.C[0], &proc_control_B.b_A[0], proc_control_B.b_B,
        &proc_control_B.b_C[0], h_0, proc_control_B.iv1, proc_control_B.iv,
        proc_control_B.dv18, proc_control_B.DataStoreRead, &proc_control_B.Bu_o
        [0], &proc_control_B.Bv_m[0], proc_control_B.b_C_o,
        &proc_control_B.Dv_e[0], proc_control_B.z_c, proc_control_B.b_A_c,
        proc_control_B.y_m, proc_control_B.Nk);
      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 4; proc_control_B.Ns += 4)
      {
        _mm_storeu_si128((__m128i *)&proc_control_B.iv1[proc_control_B.Ns],
                         _mm_add_epi32(_mm_add_epi32(_mm_set1_epi32
          (proc_control_B.Ns), _mm_loadu_si128((const __m128i *)&offsets_0[0])),
          _mm_set1_epi32(1)));
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 8; proc_control_B.Ns += 4)
      {
        _mm_storeu_si128((__m128i *)&proc_control_B.iv[proc_control_B.Ns],
                         _mm_add_epi32(_mm_add_epi32(_mm_set1_epi32
          (proc_control_B.Ns), _mm_loadu_si128((const __m128i *)&offsets[0])),
          _mm_set1_epi32(1)));
      }

      for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns++)
      {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv18[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.DataStoreRead[proc_control_B.Ns] = 1.0;
      }

      proc_control_B.base_index = 0;
      proc_control_B.b_j = 0;
      proc_control_B.nz = 0;
      proc_control_B.b_k = 0;
      proc_control_B.i_g = 0;
      proc_control_B.i_p = 0;
      proc_control_B.i_h = 0;
      proc_control_B.i_d = 0;
      proc_control_B.i_f = 0;
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 10;
           proc_control_B.Ns_i++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 390; proc_control_B.Ns++)
        {
          proc_control_B.b_D[proc_control_B.Ns] = b_D[(proc_control_B.Ns +
            proc_control_B.i_f) + 390];
        }

        memcpy(&proc_control_B.rtb_B_p[0], &(*(real_T (*)[104])&
                proc_control_B.B[proc_control_B.b_j + 104])[0], 104U * sizeof
               (real_T));
        memcpy(&proc_control_B.b_B[0], &(*(real_T (*)[630])&
                b_B[proc_control_B.b_k + 630])[0], 630U * sizeof(real_T));
        proc_control_mpc_plantupdate(&proc_control_B.A[proc_control_B.base_index
          + 169], proc_control_B.rtb_B_p,
          &proc_control_B.C[proc_control_B.base_index + 169],
          &proc_control_B.b_A[proc_control_B.nz + 441], proc_control_B.b_B,
          &proc_control_B.b_C[proc_control_B.i_g + 273], proc_control_B.b_D,
          proc_control_B.iv1, proc_control_B.iv, proc_control_B.dv18,
          proc_control_B.DataStoreRead, &proc_control_B.Bu_o[proc_control_B.i_p
          + 168], &proc_control_B.Bv_m[proc_control_B.i_h + 21],
          proc_control_B.b_C_o, &proc_control_B.Dv_e[proc_control_B.i_d + 13],
          proc_control_B.imvec, proc_control_B.b_A_c, proc_control_B.y_m,
          proc_control_B.Nk);
        proc_control_B.base_index += 169;
        proc_control_B.b_j += 104;
        proc_control_B.nz += 441;
        proc_control_B.b_k += 630;
        proc_control_B.i_g += 273;
        proc_control_B.i_p += 168;
        proc_control_B.i_h += 21;
        proc_control_B.i_d += 13;
        proc_control_B.i_f += 390;
      }

      memcpy(&proc_control_B.b_Mlim_m[0], &e[0], 226U * sizeof(real_T));
      memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      memcpy(&proc_control_B.U_f1[0], &proc_control_B.U[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_B.z_c[0], &proc_control_B.Y[0], 13U * sizeof(real_T));
      memcpy(&proc_control_B.u_scale[0], &proc_control_B.U[0], sizeof(real_T) <<
             3U);
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 226;
           proc_control_B.Ns_i++) {
        proc_control_B.Ns = b_Mrows_0[proc_control_B.Ns_i];
        if (proc_control_B.Ns <= 130) {
          proc_control_B.Ns = (proc_control_B.Ns - (proc_control_B.Ns - 1) / 13 *
                               13) - 1;
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] +=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_c[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 260) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 131, 13) * 13) - 131;
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] -=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_c[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 340) {
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] += 0.0 -
            proc_control_B.U_f1[(proc_control_B.Ns - (((proc_control_B.Ns - 261)
            >> 3) << 3)) - 261];
        } else {
          proc_control_B.b_Mlim_m[proc_control_B.Ns_i] -= 0.0 -
            proc_control_B.U_f1[proc_control_B.Ns - 341];
        }
      }

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i
           ++) {
        proc_control_B.residue = proc_control_B.U_f1[proc_control_B.Ns_i];
        proc_control_B.Ns = 0;
        for (proc_control_B.nz = 0; proc_control_B.nz < 10; proc_control_B.nz++)
        {
          proc_control_B.b_j = proc_control_B.Ns + proc_control_B.Ns_i;
          proc_control_B.b_utarget[proc_control_B.b_j] -= proc_control_B.residue;
          proc_control_B.Ns += 8;
        }
      }

      memcpy(&proc_control_B.b_xoff[0], &proc_control_B.X[0], 13U * sizeof
             (real_T));
      memcpy(&proc_control_B.Bv_m[0], &proc_control_B.DX[0], 13U * sizeof(real_T));
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 10;
           proc_control_B.base_index++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns <= 10; proc_control_B.Ns +=
             2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.b_xoff[proc_control_B.Ns]);
          tmp_1 = _mm_loadu_pd(&proc_control_B.X[(proc_control_B.base_index + 1)
                               * 13 + proc_control_B.Ns]);
          _mm_storeu_pd(&proc_control_B.imvec[proc_control_B.Ns], _mm_sub_pd
                        (tmp_2, tmp_1));
        }

        for (proc_control_B.Ns = 12; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.imvec[proc_control_B.Ns] =
            proc_control_B.b_xoff[proc_control_B.Ns] - proc_control_B.X
            [(proc_control_B.base_index + 1) * 13 + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns <= 6; proc_control_B.Ns +=
             2) {
          tmp_2 = _mm_loadu_pd(&proc_control_B.u_scale[proc_control_B.Ns]);
          tmp_1 = _mm_loadu_pd(&proc_control_B.U[((proc_control_B.base_index + 1)
            << 3) + proc_control_B.Ns]);
          _mm_storeu_pd(&proc_control_B.U_f1[proc_control_B.Ns], _mm_sub_pd
                        (tmp_2, tmp_1));
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.n_c = 0.0;
          for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz
               ++) {
            proc_control_B.n_c += proc_control_B.b_A[(21 * proc_control_B.nz +
              proc_control_B.Ns) + (proc_control_B.base_index + 1) * 441] *
              proc_control_B.imvec[proc_control_B.nz];
          }

          proc_control_B.residue = 0.0;
          for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++)
          {
            proc_control_B.residue += proc_control_B.Bu_o[(21 *
              proc_control_B.nz + proc_control_B.Ns) +
              (proc_control_B.base_index + 1) * 168] *
              proc_control_B.U_f1[proc_control_B.nz];
          }

          proc_control_B.Ns_i = (proc_control_B.base_index + 1) * 13 +
            proc_control_B.Ns;
          proc_control_B.Bv_m[proc_control_B.Ns + 21 *
            (proc_control_B.base_index + 1)] =
            (((proc_control_B.DX[proc_control_B.Ns_i] +
               proc_control_B.X[proc_control_B.Ns_i]) -
              proc_control_B.b_xoff[proc_control_B.Ns]) + proc_control_B.n_c) +
            proc_control_B.residue;
          proc_control_B.n_c = 0.0;
          for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz
               ++) {
            proc_control_B.n_c += proc_control_B.b_C[(13 * proc_control_B.nz +
              proc_control_B.Ns) + (proc_control_B.base_index + 1) * 273] *
              proc_control_B.imvec[proc_control_B.nz];
          }

          proc_control_B.Dv_e[proc_control_B.Ns_i] =
            (proc_control_B.Y[proc_control_B.Ns_i] -
             proc_control_B.z_c[proc_control_B.Ns]) + proc_control_B.n_c;
        }
      }

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 11;
           proc_control_B.Ns_i++) {
        proc_control_B.vseq_c[proc_control_B.Ns_i] = 1.0;
      }

      proc_control_B.base_index = 0;
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 10;
           proc_control_B.Ns_i++) {
        // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
        //   ActionPort: '<S238>/Action Port'

        proc_control_B.Ns = 0;

        // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
        for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++)
        {
          // Outputs for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' incorporates:
          //   ActionPort: '<S238>/Action Port'

          proc_control_B.rseq_m[proc_control_B.nz + proc_control_B.base_index] =
            proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns +
            proc_control_B.Ns_i] - proc_control_B.z_c[proc_control_B.nz];
          proc_control_B.Ns += 10;

          // End of Outputs for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
        }

        proc_control_B.base_index += 13;
      }

      tmp_2 = _mm_sub_pd(_mm_loadu_pd(&proc_control_B.WorldPosition[0]),
                         _mm_loadu_pd(&proc_control_B.b_xoff[0]));
      _mm_storeu_pd(&proc_control_B.rtb_X_e_o[0], tmp_2);
      tmp_2 = _mm_sub_pd(_mm_set_pd(proc_control_B.qS2W[0],
        proc_control_B.WorldPosition[2]), _mm_loadu_pd(&proc_control_B.b_xoff[2]));
      _mm_storeu_pd(&proc_control_B.rtb_X_e_o[2], tmp_2);
      tmp_2 = _mm_sub_pd(_mm_loadu_pd(&proc_control_B.qS2W[1]), _mm_loadu_pd
                         (&proc_control_B.b_xoff[4]));
      _mm_storeu_pd(&proc_control_B.rtb_X_e_o[4], tmp_2);
      tmp_2 = _mm_sub_pd(_mm_set_pd(proc_control_B.BodyVelocity[0],
        proc_control_B.qS2W[3]), _mm_loadu_pd(&proc_control_B.b_xoff[6]));
      _mm_storeu_pd(&proc_control_B.rtb_X_e_o[6], tmp_2);
      _mm_storeu_pd(&proc_control_B.dv25[0], _mm_sub_pd(_mm_set_pd
        (proc_control_B.BodyVelocity[1], proc_control_B.AngularRate[0]),
        _mm_set_pd(proc_control_B.b_xoff[8], proc_control_B.b_xoff[10])));
      proc_control_B.rtb_X_e_o[10] = proc_control_B.dv25[0];
      proc_control_B.rtb_X_e_o[8] = proc_control_B.dv25[1];
      _mm_storeu_pd(&proc_control_B.dv25[0], _mm_sub_pd(_mm_set_pd
        (proc_control_B.BodyVelocity[2], proc_control_B.AngularRate[1]),
        _mm_set_pd(proc_control_B.b_xoff[9], proc_control_B.b_xoff[11])));
      proc_control_B.rtb_X_e_o[11] = proc_control_B.dv25[0];
      proc_control_B.rtb_X_e_o[9] = proc_control_B.dv25[1];

      // SignalConversion generated from: '<S144>/ SFunction ' incorporates:
      //   Constant: '<S72>/Constant2'
      //   MATLAB Function: '<S143>/FixedHorizonOptimizer'
      //   UnitDelay: '<S115>/last_mv'

      proc_control_B.rtb_X_e_o[12] = proc_control_B.AngularRate[2] -
        proc_control_B.b_xoff[12];
      for (proc_control_B.Ns = 0; proc_control_B.Ns <= 6; proc_control_B.Ns += 2)
      {
        tmp_2 = _mm_loadu_pd(&proc_control_B.b_xoff[proc_control_B.Ns + 13]);
        _mm_storeu_pd(&proc_control_B.rtb_X_e_o[proc_control_B.Ns + 13],
                      _mm_sub_pd(_mm_loadu_pd
          (&proc_control_P.Constant2_Value[proc_control_B.Ns]), tmp_2));
        tmp_2 = _mm_loadu_pd(&proc_control_DW.last_mv_DSTATE[proc_control_B.Ns]);
        tmp_1 = _mm_loadu_pd(&proc_control_B.u_scale[proc_control_B.Ns]);
        _mm_storeu_pd(&proc_control_B.dv18[proc_control_B.Ns], _mm_sub_pd(tmp_2,
          tmp_1));
      }

      // MATLAB Function: '<S143>/FixedHorizonOptimizer'
      memset(&proc_control_B.dv[0], 0, 2486U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv17[proc_control_B.Ns] = 1.0;
      }

      // Memory: '<S115>/Memory'
      memcpy(&proc_control_B.bv[0], &proc_control_DW.Memory_PreviousInput[0],
             226U * sizeof(boolean_T));
      memcpy(&proc_control_B.o[0], &o[0], 4746U * sizeof(real_T));
      memcpy(&proc_control_B.q[0], &q[0], 1808U * sizeof(real_T));
      memcpy(&proc_control_B.g[0], &g[0], 81U * sizeof(real_T));
      memcpy(&proc_control_B.h[0], &h[0], 2034U * sizeof(real_T));

      // Update for Memory: '<S115>/Memory' incorporates:
      //   MATLAB Function: '<S143>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S69>/MATLAB System'
      //   Math: '<S115>/Math Function'
      //   Math: '<S115>/Math Function1'
      //   Math: '<S115>/Math Function2'
      //   SignalConversion generated from: '<S69>/MATLAB System'
      //
      proc_control_mpcblock_optimizer(proc_control_B.rseq_m,
        proc_control_B.vseq_c, proc_control_B.mvmin, proc_control_B.mvmax,
        proc_control_B.rtb_X_e_o, proc_control_B.dv18, proc_control_B.bv,
        proc_control_B.b_Mlim_m, proc_control_B.o, proc_control_B.q,
        proc_control_B.dv, proc_control_B.b_utarget, proc_control_B.u_scale,
        proc_control_B.g, proc_control_B.h, proc_control_B.ywt,
        proc_control_B.mvwt, proc_control_B.dmwwt, u, v, proc_control_B.b_A,
        proc_control_B.Bu_o, proc_control_B.Bv_m, proc_control_B.b_C,
        proc_control_B.Dv_e, b_Mrows_0, proc_control_B.dv17, proc_control_B.U_f1,
        proc_control_B.U, &proc_control_B.i,
        proc_control_DW.Memory_PreviousInput);

      // DataTypeConversion: '<S72>/Data Type Conversion'
      proc_control_B.n_c = floor(proc_control_B.i);
      if (rtIsNaN(proc_control_B.n_c) || rtIsInf(proc_control_B.n_c)) {
        proc_control_B.n_c = 0.0;
      } else {
        proc_control_B.n_c = fmod(proc_control_B.n_c, 256.0);
      }

      if (proc_control_B.n_c < 0.0) {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.MpcStatus = static_cast<int8_T>(-static_cast<int8_T>(
          static_cast<uint8_T>(-proc_control_B.n_c)));
      } else {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.MpcStatus = static_cast<int8_T>(static_cast<uint8_T>
          (proc_control_B.n_c));
      }

      // End of DataTypeConversion: '<S72>/Data Type Conversion'

      // DiscretePulseGenerator: '<S72>/Pulse Generator'
      if ((proc_control_DW.clockTickCounter_n <
           proc_control_P.PulseGenerator_Duty_l) &&
          (proc_control_DW.clockTickCounter_n >= 0)) {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.alive = proc_control_P.PulseGenerator_Amp_a;
      } else {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.alive = 0.0;
      }

      if (proc_control_DW.clockTickCounter_n >=
          proc_control_P.PulseGenerator_Period_d - 1.0) {
        proc_control_DW.clockTickCounter_n = 0;
      } else {
        proc_control_DW.clockTickCounter_n++;
      }

      // End of DiscretePulseGenerator: '<S72>/Pulse Generator'
      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i <= 6;
           proc_control_B.Ns_i += 2) {
        // Gain: '<S115>/u_scale' incorporates:
        //   Math: '<S70>/Transpose'
        //   Merge generated from: '<S68>/Merge'

        tmp_2 = _mm_loadu_pd(&proc_control_B.U_f1[proc_control_B.Ns_i]);

        // Math: '<S70>/Transpose' incorporates:
        //   Gain: '<S115>/u_scale'
        //   Merge generated from: '<S68>/Merge'

        _mm_storeu_pd(&proc_control_B.Transpose_n[proc_control_B.Ns_i],
                      _mm_mul_pd(_mm_loadu_pd
          (&proc_control_P.u_scale_Gain_o[proc_control_B.Ns_i]), tmp_2));

        // Update for UnitDelay: '<S115>/last_mv' incorporates:
        //   Gain: '<S115>/u_scale'
        //   Math: '<S70>/Transpose'
        //   Merge generated from: '<S68>/Merge'

        _mm_storeu_pd(&proc_control_DW.last_mv_DSTATE[proc_control_B.Ns_i],
                      tmp_2);
      }

      // Update for Delay: '<S72>/Delay1' incorporates:
      //   Gain: '<S115>/useq_scale'

      for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i <= 86;
           proc_control_B.Ns_i += 2) {
        // Gain: '<S115>/useq_scale'
        tmp_2 = _mm_loadu_pd(&proc_control_B.U[proc_control_B.Ns_i]);
        _mm_storeu_pd(&proc_control_DW.Delay1_DSTATE[proc_control_B.Ns_i],
                      _mm_mul_pd(_mm_loadu_pd
          (&proc_control_P.useq_scale_Gain[proc_control_B.Ns_i]), tmp_2));
      }

      // End of Update for Delay: '<S72>/Delay1'
      // End of Outputs for SubSystem: '<S68>/If Action Subsystem1'
      break;

     case 3:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S75>/Action Port'

        // InitializeConditions for SwitchCase: '<S68>/Switch Case' incorporates:
        //   Delay: '<S149>/mv_Delay'
        //   Delay: '<S149>/slack_delay'
        //   Delay: '<S149>/x_Delay'
        //   Delay: '<S75>/Delay'
        //   DiscretePulseGenerator: '<S75>/Pulse Generator'

        memcpy(&proc_control_DW.Delay_DSTATE_pp[0],
               &proc_control_P.Delay_InitialCondition_a[0], sizeof(real_T) << 3U);
        proc_control_DW.icLoad = true;
        proc_control_DW.icLoad_g = true;
        proc_control_DW.icLoad_o = true;
        proc_control_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' 
      }

      // Outputs for IfAction SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S75>/Action Port'

      // Reshape: '<S148>/Reshape'
      proc_control_B.CostFcn_workspace_runtimedata.x[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[3] = proc_control_B.qS2W[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[4] = proc_control_B.qS2W[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[5] = proc_control_B.qS2W[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[6] = proc_control_B.qS2W[3];
      proc_control_B.CostFcn_workspace_runtimedata.x[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[12] =
        proc_control_B.AngularRate[2];

      // Delay: '<S149>/mv_Delay' incorporates:
      //   Constant: '<S149>/ones'
      //   Delay: '<S75>/Delay'
      //   Product: '<S149>/Product'

      if (proc_control_DW.icLoad) {
        proc_control_B.Ns = 0;
        for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++)
        {
          for (proc_control_B.b_k = 0; proc_control_B.b_k <= 8;
               proc_control_B.b_k += 2) {
            _mm_storeu_pd(&proc_control_DW.mv_Delay_DSTATE[proc_control_B.b_k +
                          proc_control_B.Ns], _mm_mul_pd(_mm_loadu_pd
              (&proc_control_P.ones_Value[proc_control_B.b_k]), _mm_set1_pd
              (proc_control_DW.Delay_DSTATE_pp[proc_control_B.nz])));
          }

          for (proc_control_B.b_k = 10; proc_control_B.b_k < 11;
               proc_control_B.b_k++) {
            proc_control_DW.mv_Delay_DSTATE[proc_control_B.b_k +
              proc_control_B.Ns] = proc_control_P.ones_Value[proc_control_B.b_k]
              * proc_control_DW.Delay_DSTATE_pp[proc_control_B.nz];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S149>/Selector1' incorporates:
      //   Constant: '<S149>/Constant1'
      //   Delay: '<S149>/mv_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++)
        {
          proc_control_B.Selector1_h[proc_control_B.nz + 9 * proc_control_B.Ns] =
            proc_control_DW.mv_Delay_DSTATE[(11 * proc_control_B.Ns +
            static_cast<int32_T>
            (proc_control_P.Constant1_Value_iz[proc_control_B.nz])) - 1];
        }
      }

      // End of Selector: '<S149>/Selector1'

      // Delay: '<S149>/x_Delay' incorporates:
      //   Constant: '<S149>/ones'
      //   Product: '<S149>/Product1'

      if (proc_control_DW.icLoad_g) {
        // Product: '<S149>/Product1' incorporates:
        //   Reshape: '<S149>/reshape_x'

        proc_control_B.DataStoreRead[0] = proc_control_B.WorldPosition[0];
        proc_control_B.DataStoreRead[1] = proc_control_B.WorldPosition[1];
        proc_control_B.DataStoreRead[2] = proc_control_B.WorldPosition[2];
        proc_control_B.DataStoreRead[3] = proc_control_B.qS2W[0];
        proc_control_B.DataStoreRead[4] = proc_control_B.qS2W[1];
        proc_control_B.DataStoreRead[5] = proc_control_B.qS2W[2];
        proc_control_B.DataStoreRead[6] = proc_control_B.qS2W[3];
        proc_control_B.DataStoreRead[7] = proc_control_B.BodyVelocity[0];
        proc_control_B.DataStoreRead[10] = proc_control_B.AngularRate[0];
        proc_control_B.DataStoreRead[8] = proc_control_B.BodyVelocity[1];
        proc_control_B.DataStoreRead[11] = proc_control_B.AngularRate[1];
        proc_control_B.DataStoreRead[9] = proc_control_B.BodyVelocity[2];
        proc_control_B.DataStoreRead[12] = proc_control_B.AngularRate[2];
        proc_control_B.Ns = 0;
        for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++)
        {
          for (proc_control_B.b_k = 0; proc_control_B.b_k <= 8;
               proc_control_B.b_k += 2) {
            _mm_storeu_pd(&proc_control_DW.x_Delay_DSTATE[proc_control_B.b_k +
                          proc_control_B.Ns], _mm_mul_pd(_mm_loadu_pd
              (&proc_control_P.ones_Value[proc_control_B.b_k]), _mm_set1_pd
              (proc_control_B.DataStoreRead[proc_control_B.nz])));
          }

          for (proc_control_B.b_k = 10; proc_control_B.b_k < 11;
               proc_control_B.b_k++) {
            proc_control_DW.x_Delay_DSTATE[proc_control_B.b_k +
              proc_control_B.Ns] = proc_control_P.ones_Value[proc_control_B.b_k]
              * proc_control_B.DataStoreRead[proc_control_B.nz];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S149>/Selector' incorporates:
      //   Constant: '<S149>/Constant'
      //   Delay: '<S149>/x_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++)
        {
          proc_control_B.Selector_m[proc_control_B.nz + 9 * proc_control_B.Ns] =
            proc_control_DW.x_Delay_DSTATE[(11 * proc_control_B.Ns +
            static_cast<int32_T>
            (proc_control_P.Constant_Value_ld[proc_control_B.nz])) - 1];
        }
      }

      // End of Selector: '<S149>/Selector'

      // Delay: '<S149>/slack_delay' incorporates:
      //   Constant: '<S147>/e.init_zero'

      if (proc_control_DW.icLoad_o) {
        proc_control_DW.slack_delay_DSTATE = proc_control_P.einit_zero_Value;
      }

      // MATLAB Function: '<S148>/NLMPC' incorporates:
      //   DataTypeConversion: '<S148>/mo or x Conversion1'
      //   DataTypeConversion: '<S148>/mo or x Conversion13'
      //   DataTypeConversion: '<S148>/mo or x Conversion14'
      //   DataTypeConversion: '<S148>/mo or x Conversion15'
      //   DataTypeConversion: '<S148>/mo or x Conversion5'
      //   DataTypeConversion: '<S148>/mo or x Conversion6'
      //   Delay: '<S149>/slack_delay'
      //   Delay: '<S75>/Delay'
      //   MATLABSystem: '<S69>/MATLAB System'
      //   Merge generated from: '<S7>/Merge'
      //   Reshape: '<S148>/Reshape'
      //   Selector: '<S149>/Selector'
      //   Selector: '<S149>/Selector1'
      //   SignalConversion generated from: '<S69>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[proc_control_B.Ns]
          = proc_control_B.ywt[proc_control_B.nz];
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 9; proc_control_B.b_k
             ++) {
          proc_control_B.CostFcn_workspace_runtimedata.OutputWeights
            [(proc_control_B.b_k + proc_control_B.Ns) + 1] =
            proc_control_B.ywt[proc_control_B.nz];
        }

        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.Ns]
          = proc_control_B.mvwt[proc_control_B.nz];
        proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.Ns]
          = proc_control_B.dmwwt[proc_control_B.nz];
        proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.mvmin[proc_control_B.nz];
        proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.mvmax[proc_control_B.nz];
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 9; proc_control_B.b_k
             ++) {
          proc_control_B.i_g = (proc_control_B.b_k + proc_control_B.Ns) + 1;
          proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.i_g]
            = proc_control_B.mvwt[proc_control_B.nz];
          proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.i_g]
            = proc_control_B.dmwwt[proc_control_B.nz];
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.i_g]
            = proc_control_B.mvmin[proc_control_B.nz];
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.i_g]
            = proc_control_B.mvmax[proc_control_B.nz];
        }

        proc_control_B.Ns += 10;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.b_utarget[proc_control_B.Ns] = (rtMinusInf);
        proc_control_B.dv6[proc_control_B.Ns] = (rtInf);
      }

      proc_control_getUBounds(proc_control_DW.Delay_DSTATE_pp,
        proc_control_B.CostFcn_workspace_runtimedata.MVMin,
        proc_control_B.CostFcn_workspace_runtimedata.MVMax,
        proc_control_B.b_utarget, proc_control_B.dv6, proc_control_B.A_data,
        proc_control_B.A_size, proc_control_B.B_data_i, proc_control_B.g_size);
      memcpy(&proc_control_B.CostFcn_workspace_runtimedata.lastMV[0],
             &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      proc_control_B.CostFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.StateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.StateMax[proc_control_B.Ns]
          = (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      memcpy(&proc_control_B.ConFcn_workspace_runtimedata.x[0],
             &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U * sizeof
             (real_T));
      memcpy(&proc_control_B.ConFcn_workspace_runtimedata.lastMV[0],
             &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_B.ConFcn_workspace_runtimedata.ref[0],
             &proc_control_B.CostFcn_workspace_runtimedata.ref[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_B.ConFcn_workspace_runtimedata.OutputWeights[0],
             &proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[0],
             130U * sizeof(real_T));
      memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVWeights[0],
             &proc_control_B.CostFcn_workspace_runtimedata.MVWeights[0], 80U *
             sizeof(real_T));
      memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVRateWeights[0],
             &proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[0], 80U
             * sizeof(real_T));
      proc_control_B.ConFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.ConFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.StateMin[proc_control_B.Ns] =
          (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.StateMax[proc_control_B.Ns] =
          (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.ConFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      proc_control_B.expl_temp.PassivityUsePredictedX = true;
      proc_control_B.expl_temp.OutputPassivityIndex = 0.1;
      proc_control_B.expl_temp.InputPassivityIndex = 0.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.expl_temp.MVIndex[proc_control_B.Ns] = static_cast<real_T>
          (proc_control_B.Ns) + 1.0;
      }

      proc_control_B.expl_temp.NumOfInputs = 8.0;
      proc_control_B.expl_temp.NumOfOutputs = 13.0;
      proc_control_B.expl_temp.NumOfStates = 13.0;
      proc_control_B.expl_temp.PredictionHorizon = 10.0;
      memset(&proc_control_B.expl_temp.MVTarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_B.expl_temp.References[0],
             &proc_control_B.CostFcn_workspace_runtimedata.ref[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_B.expl_temp.LastMV[0],
             &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_B.expl_temp.CurrentStates[0],
             &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U * sizeof
             (real_T));
      proc_control_B.expl_temp.Ts = 0.1;
      proc_control_B.expl_temp_l.PassivityUsePredictedX = true;
      proc_control_B.expl_temp_l.OutputPassivityIndex = 0.1;
      proc_control_B.expl_temp_l.InputPassivityIndex = 0.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.expl_temp_l.MVIndex[proc_control_B.Ns] =
          static_cast<real_T>(proc_control_B.Ns) + 1.0;
      }

      proc_control_B.expl_temp_l.NumOfInputs = 8.0;
      proc_control_B.expl_temp_l.NumOfOutputs = 13.0;
      proc_control_B.expl_temp_l.NumOfStates = 13.0;
      proc_control_B.expl_temp_l.PredictionHorizon = 10.0;
      memset(&proc_control_B.expl_temp_l.MVTarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_B.expl_temp_l.References[0],
             &proc_control_B.CostFcn_workspace_runtimedata.ref[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_B.expl_temp_l.LastMV[0],
             &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_B.expl_temp_l.CurrentStates[0],
             &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U * sizeof
             (real_T));
      proc_control_B.expl_temp_l.Ts = 0.1;
      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 9; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 13; proc_control_B.i_g
             ++) {
          proc_control_B.rseq_m[proc_control_B.i_g + proc_control_B.Ns] =
            proc_control_B.Selector_m[proc_control_B.b_k + proc_control_B.nz];
          proc_control_B.b_k += 9;
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 13; proc_control_B.nz++) {
        proc_control_B.rseq_m[proc_control_B.nz + 117] =
          proc_control_B.Selector_m[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_g = 0; proc_control_B.i_g < 9; proc_control_B.i_g
             ++) {
          proc_control_B.b_utarget[proc_control_B.b_k + proc_control_B.nz] =
            proc_control_B.Selector1_h[proc_control_B.i_g + proc_control_B.Ns];
          proc_control_B.b_k += 8;
        }

        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++) {
        proc_control_B.b_utarget[proc_control_B.nz + 72] =
          proc_control_B.Selector1_h[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.residue = 0.0;
        proc_control_B.nz = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 80; proc_control_B.b_k
             ++) {
          proc_control_B.residue += static_cast<real_T>(a[proc_control_B.nz +
            proc_control_B.Ns]) * proc_control_B.b_utarget[proc_control_B.b_k];
          proc_control_B.nz += 8;
        }

        proc_control_B.u_scale[proc_control_B.Ns] = proc_control_B.residue;
      }

      memcpy(&proc_control_B.rtb_Selector_m_p[0], &proc_control_B.rseq_m[0],
             130U * sizeof(real_T));
      memcpy(&proc_control_B.rtb_Selector_m_p[130], &proc_control_B.u_scale[0],
             sizeof(real_T) << 3U);
      proc_control_B.rtb_Selector_m_p[138] = proc_control_DW.slack_delay_DSTATE;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.dv4[proc_control_B.Ns] = (rtMinusInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv4[proc_control_B.Ns + 130] = (rtMinusInf);
      }

      proc_control_B.dv4[138] = 0.0;
      proc_control_fmincon(&proc_control_B.CostFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp,
                           proc_control_B.rtb_Selector_m_p,
                           proc_control_B.A_data, proc_control_B.B_data_i,
                           proc_control_B.g_size, proc_control_B.dv4,
                           &proc_control_B.ConFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp_l, proc_control_B.z,
                           &proc_control_B.i, &proc_control_B.oc,
                           &proc_control_B.linearScaling,
                           &proc_control_B.residue, proc_control_B.expl_temp_d,
                           &proc_control_B.Product3_h, &proc_control_B.Product_o,
                           &proc_control_B.Product1_hg,
                           &proc_control_B.Product2_j);
      if ((proc_control_B.oc == 0.0) && (proc_control_B.Product3_h > 0.02)) {
        proc_control_B.oc = -2.0;
      }

      // Update for Delay: '<S149>/slack_delay' incorporates:
      //   MATLAB Function: '<S148>/NLMPC'
      //   Reshape: '<S148>/Reshape'

      proc_control_getXUe(proc_control_B.z,
                          proc_control_B.CostFcn_workspace_runtimedata.x,
                          proc_control_B.Y, proc_control_B.U,
                          &proc_control_DW.slack_delay_DSTATE);

      // MATLAB Function: '<S148>/NLMPC' incorporates:
      //   Delay: '<S75>/Delay'

      if (proc_control_B.oc > 0.0) {
        proc_control_B.Ns = 0;
        for (proc_control_B.nz = 0; proc_control_B.nz < 8; proc_control_B.nz++)
        {
          proc_control_B.u_scale[proc_control_B.nz] =
            proc_control_B.U[proc_control_B.Ns];
          proc_control_B.Ns += 11;
        }
      } else {
        memcpy(&proc_control_B.u_scale[0], &proc_control_DW.Delay_DSTATE_pp[0],
               sizeof(real_T) << 3U);
      }

      // DataTypeConversion: '<S75>/Data Type Conversion' incorporates:
      //   MATLAB Function: '<S148>/NLMPC'

      proc_control_B.n_c = floor(proc_control_B.oc);
      if (rtIsNaN(proc_control_B.n_c) || rtIsInf(proc_control_B.n_c)) {
        proc_control_B.n_c = 0.0;
      } else {
        proc_control_B.n_c = fmod(proc_control_B.n_c, 256.0);
      }

      if (proc_control_B.n_c < 0.0) {
        // Merge generated from: '<S68>/Merge' incorporates:
        //   SignalConversion generated from: '<S75>/Out'

        proc_control_B.MpcStatus = static_cast<int8_T>(-static_cast<int8_T>(
          static_cast<uint8_T>(-proc_control_B.n_c)));
      } else {
        // Merge generated from: '<S68>/Merge' incorporates:
        //   SignalConversion generated from: '<S75>/Out'

        proc_control_B.MpcStatus = static_cast<int8_T>(static_cast<uint8_T>
          (proc_control_B.n_c));
      }

      // End of DataTypeConversion: '<S75>/Data Type Conversion'

      // DiscretePulseGenerator: '<S75>/Pulse Generator'
      if ((proc_control_DW.clockTickCounter <
           proc_control_P.PulseGenerator_Duty_c) &&
          (proc_control_DW.clockTickCounter >= 0)) {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.alive = proc_control_P.PulseGenerator_Amp_n;
      } else {
        // Merge generated from: '<S68>/Merge'
        proc_control_B.alive = 0.0;
      }

      if (proc_control_DW.clockTickCounter >=
          proc_control_P.PulseGenerator_Period_f - 1.0) {
        proc_control_DW.clockTickCounter = 0;
      } else {
        proc_control_DW.clockTickCounter++;
      }

      // End of DiscretePulseGenerator: '<S75>/Pulse Generator'

      // Math: '<S70>/Transpose' incorporates:
      //   Merge generated from: '<S68>/Merge'
      //   SignalConversion generated from: '<S75>/Out'

      memcpy(&proc_control_B.Transpose_n[0], &proc_control_B.u_scale[0], sizeof
             (real_T) << 3U);

      // Update for Delay: '<S75>/Delay' incorporates:
      //   Math: '<S70>/Transpose'
      //   Merge generated from: '<S68>/Merge'
      //   SignalConversion generated from: '<S75>/Out'

      memcpy(&proc_control_DW.Delay_DSTATE_pp[0], &proc_control_B.u_scale[0],
             sizeof(real_T) << 3U);

      // Update for Delay: '<S149>/mv_Delay' incorporates:
      //   MATLAB Function: '<S148>/NLMPC'

      proc_control_DW.icLoad = false;
      memcpy(&proc_control_DW.mv_Delay_DSTATE[0], &proc_control_B.U[0], 88U *
             sizeof(real_T));

      // Update for Delay: '<S149>/x_Delay' incorporates:
      //   MATLAB Function: '<S148>/NLMPC'

      proc_control_DW.icLoad_g = false;
      memcpy(&proc_control_DW.x_Delay_DSTATE[0], &proc_control_B.Y[0], 143U *
             sizeof(real_T));

      // Update for Delay: '<S149>/slack_delay'
      proc_control_DW.icLoad_o = false;

      // End of Outputs for SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     default:
      // Outputs for IfAction SubSystem: '<S68>/If Action Subsystem3' incorporates:
      //   ActionPort: '<S74>/Action Port'

      // Merge generated from: '<S68>/Merge' incorporates:
      //   Constant: '<S74>/Constant1'
      //   SignalConversion generated from: '<S74>/Constant1'

      proc_control_B.MpcStatus = proc_control_P.Constant1_Value_j;

      // Merge generated from: '<S68>/Merge' incorporates:
      //   Constant: '<S74>/Constant2'
      //   SignalConversion generated from: '<S74>/Constant2'

      proc_control_B.alive = proc_control_P.Constant2_Value_n;

      // Math: '<S70>/Transpose' incorporates:
      //   Constant: '<S74>/Constant'
      //   Merge generated from: '<S68>/Merge'
      //   SignalConversion generated from: '<S74>/Constant'

      memcpy(&proc_control_B.Transpose_n[0], &proc_control_P.Constant_Value_g3b
             [0], sizeof(real_T) << 3U);

      // End of Outputs for SubSystem: '<S68>/If Action Subsystem3'
      break;
    }
  }

  // Switch: '<S175>/Switch2' incorporates:
  //   MATLABSystem: '<S69>/MATLAB System'
  //   Math: '<S70>/Transpose'
  //   RelationalOperator: '<S175>/LowerRelop1'

  for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i++)
  {
    // RelationalOperator: '<S175>/LowerRelop1' incorporates:
    //   MATLABSystem: '<S69>/MATLAB System'
    //   Math: '<S70>/Transpose'

    proc_control_B.residue = proc_control_B.Transpose_n[proc_control_B.Ns_i];
    proc_control_B.linearScaling = proc_control_B.mvmax[proc_control_B.Ns_i];
    if (proc_control_B.residue > proc_control_B.linearScaling) {
      proc_control_B.u_scale[proc_control_B.Ns_i] = proc_control_B.linearScaling;
    } else {
      // RelationalOperator: '<S175>/UpperRelop' incorporates:
      //   MATLABSystem: '<S69>/MATLAB System'

      proc_control_B.linearScaling = proc_control_B.mvmin[proc_control_B.Ns_i];

      // Switch: '<S175>/Switch' incorporates:
      //   MATLABSystem: '<S69>/MATLAB System'
      //   RelationalOperator: '<S175>/UpperRelop'
      //   Switch: '<S175>/Switch2'

      if (proc_control_B.residue < proc_control_B.linearScaling) {
        proc_control_B.u_scale[proc_control_B.Ns_i] =
          proc_control_B.linearScaling;
      } else {
        proc_control_B.u_scale[proc_control_B.Ns_i] = proc_control_B.residue;
      }

      // End of Switch: '<S175>/Switch'
    }
  }

  // End of Switch: '<S175>/Switch2'

  // Lookup_n-D: '<S70>/n-D Lookup Table1' incorporates:
  //   Switch: '<S175>/Switch2'

  for (proc_control_B.base_index = 0; proc_control_B.base_index < 8;
       proc_control_B.base_index++) {
    proc_control_B.len = plook_u32d_binckpang
      (proc_control_B.u_scale[proc_control_B.base_index], proc_control_P.N, 200U,
       &proc_control_DW.m_bpIndex[proc_control_B.base_index]);
    proc_control_B.pwm[proc_control_B.base_index] =
      proc_control_P.PWM[proc_control_B.len];
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // DataTypeConversion: '<S70>/Data Type Conversion' incorporates:
    //   Delay: '<S70>/Delay'
    //   Sum: '<S70>/Sum'

    proc_control_B.isMpcAlive = (proc_control_DW.Delay_DSTATE_p -
      proc_control_B.alive != 0.0);
  }

  // Outputs for Enabled SubSystem: '<Root>/Enabled Subsystem1' incorporates:
  //   EnablePort: '<S2>/Enable'

  // Start for MATLABSystem: '<S45>/MATLAB System' incorporates:
  //   Constant: '<S21>/Constant'
  //   Constant: '<S21>/Constant1'
  //   Constant: '<S21>/Constant3'
  //   Constant: '<S21>/Constant4'

  if (proc_control_DW.obj_i.m_notDryRun > 0.0) {
    // BusCreator: '<S2>/Bus Creator' incorporates:
    //   MATLAB Function: '<S2>/MATLAB Function'

    proc_control_MATLABFunction(proc_control_B.pwm,
      &proc_control_B.BusCreator_g.motor1, &proc_control_B.BusCreator_g.motor2,
      &proc_control_B.BusCreator_g.motor3, &proc_control_B.BusCreator_g.motor4,
      &proc_control_B.BusCreator_g.motor5, &proc_control_B.BusCreator_g.motor6,
      &proc_control_B.BusCreator_g.motor7, &proc_control_B.BusCreator_g.motor8);

    // MATLABSystem: '<S19>/SinkBlock'
    Pub_proc_control_1380.publish(&proc_control_B.BusCreator_g);

    // DataTypeConversion: '<S2>/Data Type Conversion' incorporates:
    //   Switch: '<S175>/Switch2'

    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i++)
    {
      proc_control_B.n_c = floor(proc_control_B.u_scale[proc_control_B.Ns_i]);
      if (rtIsNaN(proc_control_B.n_c) || rtIsInf(proc_control_B.n_c)) {
        proc_control_B.n_c = 0.0;
      } else {
        proc_control_B.n_c = fmod(proc_control_B.n_c, 65536.0);
      }

      if (proc_control_B.n_c < 0.0) {
        proc_control_B.pwm[proc_control_B.Ns_i] = static_cast<uint16_T>(-
          static_cast<int16_T>(static_cast<uint16_T>(-proc_control_B.n_c)));
      } else {
        proc_control_B.pwm[proc_control_B.Ns_i] = static_cast<uint16_T>
          (proc_control_B.n_c);
      }
    }

    // End of DataTypeConversion: '<S2>/Data Type Conversion'

    // BusCreator: '<S2>/Bus Creator1' incorporates:
    //   MATLAB Function: '<S2>/MATLAB Function1'

    proc_control_MATLABFunction(proc_control_B.pwm,
      &proc_control_B.BusCreator1_g.motor1, &proc_control_B.BusCreator1_g.motor2,
      &proc_control_B.BusCreator1_g.motor3, &proc_control_B.BusCreator1_g.motor4,
      &proc_control_B.BusCreator1_g.motor5, &proc_control_B.BusCreator1_g.motor6,
      &proc_control_B.BusCreator1_g.motor7, &proc_control_B.BusCreator1_g.motor8);

    // MATLABSystem: '<S20>/SinkBlock'
    Pub_proc_control_1386.publish(&proc_control_B.BusCreator1_g);

    // BusAssignment: '<S21>/Bus Assignment' incorporates:
    //   Constant: '<S22>/Constant'

    proc_control_B.BusAssignment = proc_control_P.Constant_Value_k;

    // DataTypeConversion: '<S21>/Data Type Conversion2' incorporates:
    //   SignalConversion generated from: '<S69>/MATLAB System'

    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i++)
    {
      proc_control_B.VectorConcatenate[proc_control_B.Ns_i] =
        proc_control_B.thrustersStatus[proc_control_B.Ns_i];
    }

    // End of DataTypeConversion: '<S21>/Data Type Conversion2'
    memcpy(&proc_control_B.VectorConcatenate[8],
           &proc_control_P.Constant_Value_e2[0], 120U * sizeof(real_T));

    // SignalConversion generated from: '<S21>/Vector Concatenate1' incorporates:
    //   Constant: '<S21>/Constant'
    //   SignalConversion generated from: '<S69>/MATLAB System'

    memcpy(&proc_control_B.VectorConcatenate1[0], &proc_control_B.ywt[0], 13U *
           sizeof(real_T));
    memcpy(&proc_control_B.VectorConcatenate1[13],
           &proc_control_P.Constant1_Value_h[0], 115U * sizeof(real_T));

    // SignalConversion generated from: '<S21>/Vector Concatenate2' incorporates:
    //   Constant: '<S21>/Constant1'
    //   SignalConversion generated from: '<S69>/MATLAB System'

    memcpy(&proc_control_B.VectorConcatenate2[0], &proc_control_B.mvwt[0],
           sizeof(real_T) << 3U);
    memcpy(&proc_control_B.VectorConcatenate2[8],
           &proc_control_P.Constant3_Value[0], 120U * sizeof(real_T));

    // SignalConversion generated from: '<S21>/Vector Concatenate3' incorporates:
    //   Constant: '<S21>/Constant3'
    //   SignalConversion generated from: '<S69>/MATLAB System'

    memcpy(&proc_control_B.VectorConcatenate3[0], &proc_control_B.dmwwt[0],
           sizeof(real_T) << 3U);
    memcpy(&proc_control_B.VectorConcatenate3[8],
           &proc_control_P.Constant4_Value[0], 120U * sizeof(real_T));

    // BusAssignment: '<S21>/Bus Assignment' incorporates:
    //   Concatenate: '<S21>/Vector Concatenate'
    //   Constant: '<S21>/Constant2'
    //   Constant: '<S21>/Constant4'
    //   Constant: '<S21>/Constant5'
    //   Constant: '<S21>/Constant6'
    //   Constant: '<S21>/Constant7'
    //   DataTypeConversion: '<S21>/Data Type Conversion'

    proc_control_B.BusAssignment.target_reached = proc_control_B.Reset;
    proc_control_B.BusAssignment.is_trajectory_done = proc_control_B.NewDvlMsg;
    proc_control_B.BusAssignment.mpc_mode = proc_control_B.mode;
    proc_control_B.BusAssignment.is_mpc_alive = proc_control_B.isMpcAlive;
    proc_control_B.BusAssignment.thrusters_status_SL_Info.CurrentLength =
      proc_control_P.Constant2_Value_l;
    proc_control_B.BusAssignment.mpc_status = proc_control_B.MpcStatus;
    proc_control_B.BusAssignment.current_gains.ov_SL_Info.CurrentLength =
      proc_control_P.Constant5_Value;
    proc_control_B.BusAssignment.current_gains.mv_SL_Info.CurrentLength =
      proc_control_P.Constant6_Value;
    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 128; proc_control_B.Ns_i
         ++) {
      proc_control_B.BusAssignment.thrusters_status[proc_control_B.Ns_i] =
        (proc_control_B.VectorConcatenate[proc_control_B.Ns_i] != 0.0);
      proc_control_B.BusAssignment.current_gains.ov[proc_control_B.Ns_i] =
        proc_control_B.VectorConcatenate1[proc_control_B.Ns_i];
      proc_control_B.BusAssignment.current_gains.mv[proc_control_B.Ns_i] =
        proc_control_B.VectorConcatenate2[proc_control_B.Ns_i];
      proc_control_B.BusAssignment.current_gains.mvr[proc_control_B.Ns_i] =
        proc_control_B.VectorConcatenate3[proc_control_B.Ns_i];
    }

    proc_control_B.BusAssignment.current_gains.mvr_SL_Info.CurrentLength =
      proc_control_P.Constant7_Value;

    // MATLABSystem: '<S23>/SinkBlock'
    Pub_proc_control_1430.publish(&proc_control_B.BusAssignment);

    // SignalConversion generated from: '<S2>/thrust' incorporates:
    //   Switch: '<S175>/Switch2'

    memcpy(&proc_control_B.BufferToMakeInportVirtual_Inser[0],
           &proc_control_B.u_scale[0], sizeof(real_T) << 3U);
  }

  // End of Outputs for SubSystem: '<Root>/Enabled Subsystem1'

  // Lookup_n-D: '<S70>/N to A' incorporates:
  //   Switch: '<S175>/Switch2'

  for (proc_control_B.base_index = 0; proc_control_B.base_index < 8;
       proc_control_B.base_index++) {
    proc_control_B.len = plook_u32d_binckpang
      (proc_control_B.u_scale[proc_control_B.base_index], proc_control_P.N, 200U,
       &proc_control_DW.m_bpIndex_p[proc_control_B.base_index]);
    proc_control_B.current[proc_control_B.base_index] =
      proc_control_P.A[proc_control_B.len];
  }

  // MATLAB Function: '<S234>/MATLAB Function' incorporates:
  //   Merge generated from: '<S7>/Merge'

  proc_control_B.BusCreator_i.position.x =
    proc_control_B.TmpSignalConversionAtMATLAB[0];
  proc_control_B.BusCreator_i.position.y =
    proc_control_B.TmpSignalConversionAtMATLAB[1];
  proc_control_B.BusCreator_i.position.z =
    proc_control_B.TmpSignalConversionAtMATLAB[2];
  proc_control_B.BusCreator_i.orientation.x =
    proc_control_B.TmpSignalConversionAtMATLAB[4];
  proc_control_B.BusCreator_i.orientation.y =
    proc_control_B.TmpSignalConversionAtMATLAB[5];
  proc_control_B.BusCreator_i.orientation.z =
    proc_control_B.TmpSignalConversionAtMATLAB[6];
  proc_control_B.BusCreator_i.orientation.w =
    proc_control_B.TmpSignalConversionAtMATLAB[3];

  // ZeroOrderHold: '<S234>/Zero-Order Hold'
  if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
    // MATLABSystem: '<S243>/SinkBlock'
    Pub_proc_control_671.publish(&proc_control_B.BusCreator_i);
  }

  // End of ZeroOrderHold: '<S234>/Zero-Order Hold'

  // Update for Delay: '<S181>/Delay' incorporates:
  //   SignalConversion generated from: '<S2>/thrust'

  memcpy(&proc_control_DW.Delay_DSTATE[0],
         &proc_control_B.BufferToMakeInportVirtual_Inser[0], sizeof(real_T) <<
         3U);

  // Update for Delay: '<S45>/Delay'
  proc_control_DW.Delay_DSTATE_j = proc_control_B.y;

  // Update for Delay: '<S3>/Delay'
  proc_control_DW.Delay_DSTATE_m = proc_control_B.y;
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Delay: '<S5>/Delay' incorporates:
    //   Lookup_n-D: '<S70>/N to A'

    for (proc_control_B.Ns_i = 0; proc_control_B.Ns_i < 8; proc_control_B.Ns_i++)
    {
      proc_control_DW.Delay_DSTATE_m0[proc_control_B.Ns_i] =
        proc_control_B.current[proc_control_B.Ns_i];
    }

    // End of Update for Delay: '<S5>/Delay'

    // Update for Delay: '<S70>/Delay'
    proc_control_DW.Delay_DSTATE_p = proc_control_B.alive;
  }

  rate_scheduler((&proc_control_M));
}

// Model initialize function
void proc_control::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  {
    static const char_T prmName[19] = "proc_control.mpc.p";
    static const char_T prmName_0[19] = "proc_control.mpc.m";
    static const char_T prmName_1[34] = "proc_control.mpc.gains.default.ov";
    static const real_T varargin_1[13] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_2[34] = "proc_control.mpc.gains.default.mv";
    static const real_T varargin_1_0[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_3[35] = "proc_control.mpc.gains.default.mvr";
    static const real_T varargin_1_1[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_4[30] = "proc_control.mpc.gains.c10.ov";
    static const real_T varargin_1_2[13] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_5[30] = "proc_control.mpc.gains.c10.mv";
    static const real_T varargin_1_3[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_6[31] = "proc_control.mpc.gains.c10.mvr";
    static const real_T varargin_1_4[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_7[30] = "proc_control.mpc.gains.c11.ov";
    static const real_T varargin_1_5[13] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_8[30] = "proc_control.mpc.gains.c11.mv";
    static const real_T varargin_1_6[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_9[31] = "proc_control.mpc.gains.c11.mvr";
    static const real_T varargin_1_7[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_a[30] = "proc_control.mpc.gains.c19.ov";
    static const real_T varargin_1_8[13] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_b[30] = "proc_control.mpc.gains.c19.mv";
    static const real_T varargin_1_9[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_c[31] = "proc_control.mpc.gains.c19.mvr";
    static const real_T varargin_1_a[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_d[32] = "proc_control.mpc.gains.noDvl.mv";
    static const real_T varargin_1_b[8] = { 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_e[22] = "proc_control.mpc.tmax";
    static const char_T prmName_f[22] = "proc_control.mpc.tmin";
    static const char_T prmName_g[45] =
      "proc_control.target_reached.linear_tolerance";
    static const char_T prmName_h[46] =
      "proc_control.target_reached.angular_tolerance";
    static const char_T prmName_i[46] =
      "proc_control.target_reached.time_in_tolerance";
    static const char_T prmName_j[25] = "proc_control.physics.rho";
    static const char_T prmName_k[23] = "proc_control.physics.g";
    static const char_T prmName_l[26] = "proc_control.physics.mass";
    static const char_T prmName_m[28] = "proc_control.physics.volume";
    static const char_T prmName_n[32] = "proc_control.physics.sub_height";
    static const char_T prmName_o[24] = "proc_control.physics.rg";
    static const real_T varargin_1_c[3] = { 0.0028, 0.0001, 0.0222 };

    static const char_T prmName_p[24] = "proc_control.physics.rb";
    static const real_T varargin_1_d[3] = { 0.003, -0.0002, 0.021 };

    static const char_T prmName_q[25] = "proc_control.physics.cdl";
    static const real_T varargin_1_e[6] = { 15.0, 20.0, 23.3, 3.33, 2.33, 5.0 };

    static const char_T prmName_r[25] = "proc_control.physics.cdq";
    static const real_T varargin_1_f[6] = { 1.17, 0.82, 0.756, 0.167, 0.1, 0.102
    };

    static const char_T prmName_s[32] = "proc_control.physics.added_mass";
    static const real_T varargin_1_g[6] = { -1.4648, -6.6156, -15.7695, -0.1164,
      -0.3493, -0.3493 };

    static const char_T prmName_t[23] = "proc_control.physics.I";
    static const real_T varargin_1_h[9] = { 0.502, -0.0013, -0.0094, -0.0013,
      1.5266, -0.0021, -0.0094, -0.0021, 1.6682 };

    static const char_T prmName_u[32] = "proc_control.physics.depth_pose";
    static const real_T varargin_1_i[3] = { 0.0, -0.136, 0.178 };

    static const char_T prmName_v[32] = "proc_control.physics.hydro_pose";
    static const real_T varargin_1_j[3] = { 0.16, 0.0, 0.155 };

    static const char_T prmName_w[32] = "proc_control.physics.sonar_pose";
    static const real_T varargin_1_k[3] = { 0.2, 0.0, -0.155 };

    static const char_T prmName_x[34] = "proc_control.physics.dvl_rotation";
    static const real_T varargin_1_l[3] = { 0.0, 3.1415926535897931,
      1.5707963267948966 };

    static const char_T prmName_y[31] = "proc_control.physics.thrusters";
    static const real_T varargin_1_m[48] = { 0.292, 0.173, 0.082, -45.0, -90.0,
      0.0, -0.292, 0.173, 0.082, 45.0, -90.0, 0.0, -0.292, -0.173, 0.082, -45.0,
      -90.0, 0.0, 0.292, -0.173, 0.082, 45.0, -90.0, 0.0, 0.181, 0.159, 0.082,
      0.0, 0.0, 0.0, -0.181, 0.159, 0.082, 0.0, 180.0, 0.0, -0.181, -0.159,
      0.082, 0.0, 0.0, 0.0, 0.181, -0.159, 0.082, 0.0, 180.0, 0.0 };

    static const char_T prmName_z[39] = "proc_control.physics.dvl_lost_override";
    rmw_qos_profile_t qos_profile;
    int32_T i;
    int32_T i_0;
    char_T b_zeroDelimTopic_0[34];
    char_T b_zeroDelimTopic[21];
    static const char_T b_zeroDelimTopic_1[21] = "/proc_nav/auv_states";
    static const real_T tmp[33] = { 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0, 0.0,
      0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0, 0.0,
      0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const int8_T tmp_0[9] = { 0, 0, 0, 1, 0, 0, 0, 0, 0 };

    static const int8_T tmp_1[7] = { 0, 0, 0, 1, 0, 0, 0 };

    static const char_T b_zeroDelimTopic_2[34] =
      "/proc_control/measurment_residual";

    // Start for Probe: '<S181>/Probe'
    proc_control_B.Probe_o1 = 8.0;

    // Start for If: '<S5>/If'
    proc_control_DW.If_ActiveSubsystem_b = -1;

    // Start for SwitchCase: '<S7>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem = -1;

    // Start for SwitchCase: '<S68>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem_p = -1;
    proc_control_PrevZCX.ResettableSubsystem_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S45>/Delay'
    proc_control_DW.Delay_DSTATE_j = proc_control_P.Delay_InitialCondition_at;

    // InitializeConditions for Delay: '<S3>/Delay'
    proc_control_DW.Delay_DSTATE_m = proc_control_P.Delay_InitialCondition_fl;

    // InitializeConditions for Delay: '<S181>/Delay'
    memcpy(&proc_control_DW.Delay_DSTATE[0],
           &proc_control_P.Delay_InitialCondition_fy[0], sizeof(real_T) << 3U);
    for (i = 0; i < 8; i++) {
      // InitializeConditions for Delay: '<S5>/Delay'
      proc_control_DW.Delay_DSTATE_m0[i] =
        proc_control_P.Delay_InitialCondition_e[i];
    }

    // End of InitializeConditions for Delay: '<S181>/Delay'

    // InitializeConditions for Delay: '<S70>/Delay'
    proc_control_DW.Delay_DSTATE_p = proc_control_P.Delay_InitialCondition_c;

    // SystemInitialize for Enabled SubSystem: '<S56>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S62>/In1' incorporates:
    //   Outport: '<S62>/Out1'

    proc_control_B.In1_me = proc_control_P.Out1_Y0_fy;

    // End of SystemInitialize for SubSystem: '<S56>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S57>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S63>/In1' incorporates:
    //   Outport: '<S63>/Out1'

    proc_control_B.In1_lz = proc_control_P.Out1_Y0_o;

    // End of SystemInitialize for SubSystem: '<S57>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S58>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S64>/In1' incorporates:
    //   Outport: '<S64>/Out1'

    proc_control_B.In1_gs = proc_control_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S58>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S59>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S65>/In1' incorporates:
    //   Outport: '<S65>/Out1'

    proc_control_B.In1_gf = proc_control_P.Out1_Y0_e;

    // End of SystemInitialize for SubSystem: '<S59>/Enabled Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S4>/Get_ROS_param'
    // Start for MATLABSystem: '<S48>/Get Parameter'
    proc_control_DW.obj_f0.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_f0.isInitialized = 1;
    ParamGet_proc_control_140.initParam(&prmName[0]);
    ParamGet_proc_control_140.setInitialValue(10L);
    proc_control_DW.obj_f0.isSetupComplete = true;

    // Start for MATLABSystem: '<S48>/Get Parameter1'
    proc_control_DW.obj_dx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dx.isInitialized = 1;
    ParamGet_proc_control_143.initParam(&prmName_0[0]);
    ParamGet_proc_control_143.setInitialValue(1L);
    proc_control_DW.obj_dx.isSetupComplete = true;

    // Start for MATLABSystem: '<S50>/Get Parameter'
    proc_control_DW.obj_fk.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fk.isInitialized = 1;
    ParamGet_proc_control_66.initParam(&prmName_1[0]);
    ParamGet_proc_control_66.setInitialValue(&varargin_1[0], 13U);
    proc_control_DW.obj_fk.isSetupComplete = true;

    // Start for MATLABSystem: '<S50>/Get Parameter1'
    proc_control_DW.obj_iw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_iw.isInitialized = 1;
    ParamGet_proc_control_72.initParam(&prmName_2[0]);
    ParamGet_proc_control_72.setInitialValue(&varargin_1_0[0], 8U);
    proc_control_DW.obj_iw.isSetupComplete = true;

    // Start for MATLABSystem: '<S50>/Get Parameter2'
    proc_control_DW.obj_bn.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bn.isInitialized = 1;
    ParamGet_proc_control_74.initParam(&prmName_3[0]);
    ParamGet_proc_control_74.setInitialValue(&varargin_1_1[0], 8U);
    proc_control_DW.obj_bn.isSetupComplete = true;

    // Start for MATLABSystem: '<S51>/Get Parameter'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_j1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_j1.isInitialized = 1;
    ParamGet_proc_control_97.initParam(&prmName_4[0]);
    ParamGet_proc_control_97.setInitialValue(&varargin_1_2[0], 13U);
    proc_control_DW.obj_j1.isSetupComplete = true;

    // Start for MATLABSystem: '<S51>/Get Parameter1'
    proc_control_DW.obj_f2.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_f2.isInitialized = 1;
    ParamGet_proc_control_98.initParam(&prmName_5[0]);
    ParamGet_proc_control_98.setInitialValue(&varargin_1_3[0], 8U);
    proc_control_DW.obj_f2.isSetupComplete = true;

    // Start for MATLABSystem: '<S51>/Get Parameter2'
    proc_control_DW.obj_pzf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pzf.isInitialized = 1;
    ParamGet_proc_control_99.initParam(&prmName_6[0]);
    ParamGet_proc_control_99.setInitialValue(&varargin_1_4[0], 8U);
    proc_control_DW.obj_pzf.isSetupComplete = true;

    // Start for MATLABSystem: '<S52>/Get Parameter'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_nl.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nl.isInitialized = 1;
    ParamGet_proc_control_106.initParam(&prmName_7[0]);
    ParamGet_proc_control_106.setInitialValue(&varargin_1_5[0], 13U);
    proc_control_DW.obj_nl.isSetupComplete = true;

    // Start for MATLABSystem: '<S52>/Get Parameter1'
    proc_control_DW.obj_nr.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nr.isInitialized = 1;
    ParamGet_proc_control_107.initParam(&prmName_8[0]);
    ParamGet_proc_control_107.setInitialValue(&varargin_1_6[0], 8U);
    proc_control_DW.obj_nr.isSetupComplete = true;

    // Start for MATLABSystem: '<S52>/Get Parameter2'
    proc_control_DW.obj_as.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_as.isInitialized = 1;
    ParamGet_proc_control_108.initParam(&prmName_9[0]);
    ParamGet_proc_control_108.setInitialValue(&varargin_1_7[0], 8U);
    proc_control_DW.obj_as.isSetupComplete = true;

    // Start for MATLABSystem: '<S53>/Get Parameter'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_fs.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fs.isInitialized = 1;
    ParamGet_proc_control_115.initParam(&prmName_a[0]);
    ParamGet_proc_control_115.setInitialValue(&varargin_1_8[0], 13U);
    proc_control_DW.obj_fs.isSetupComplete = true;

    // Start for MATLABSystem: '<S53>/Get Parameter1'
    proc_control_DW.obj_pz.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pz.isInitialized = 1;
    ParamGet_proc_control_116.initParam(&prmName_b[0]);
    ParamGet_proc_control_116.setInitialValue(&varargin_1_9[0], 8U);
    proc_control_DW.obj_pz.isSetupComplete = true;

    // Start for MATLABSystem: '<S53>/Get Parameter2'
    proc_control_DW.obj_hq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hq.isInitialized = 1;
    ParamGet_proc_control_117.initParam(&prmName_c[0]);
    ParamGet_proc_control_117.setInitialValue(&varargin_1_a[0], 8U);
    proc_control_DW.obj_hq.isSetupComplete = true;

    // Start for MATLABSystem: '<S54>/Get Parameter'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_nb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nb.isInitialized = 1;
    ParamGet_proc_control_133.initParam(&prmName_d[0]);
    ParamGet_proc_control_133.setInitialValue(&varargin_1_b[0], 8U);
    proc_control_DW.obj_nb.isSetupComplete = true;

    // Start for MATLABSystem: '<S48>/Get Parameter2'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_cm.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cm.isInitialized = 1;
    ParamGet_proc_control_144.initParam(&prmName_e[0]);
    ParamGet_proc_control_144.setInitialValue(20.0);
    proc_control_DW.obj_cm.isSetupComplete = true;

    // Start for MATLABSystem: '<S48>/Get Parameter3'
    proc_control_DW.obj_pu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pu.isInitialized = 1;
    ParamGet_proc_control_145.initParam(&prmName_f[0]);
    ParamGet_proc_control_145.setInitialValue(-15.0);
    proc_control_DW.obj_pu.isSetupComplete = true;

    // Start for MATLABSystem: '<S49>/Get Parameter'
    proc_control_DW.obj_dc.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dc.isInitialized = 1;
    ParamGet_proc_control_150.initParam(&prmName_g[0]);
    ParamGet_proc_control_150.setInitialValue(0.2);
    proc_control_DW.obj_dc.isSetupComplete = true;

    // Start for MATLABSystem: '<S49>/Get Parameter1'
    proc_control_DW.obj_eug.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eug.isInitialized = 1;
    ParamGet_proc_control_151.initParam(&prmName_h[0]);
    ParamGet_proc_control_151.setInitialValue(0.1);
    proc_control_DW.obj_eug.isSetupComplete = true;

    // Start for MATLABSystem: '<S49>/Get Parameter2'
    proc_control_DW.obj_do.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_do.isInitialized = 1;
    ParamGet_proc_control_152.initParam(&prmName_i[0]);
    ParamGet_proc_control_152.setInitialValue(3.0);
    proc_control_DW.obj_do.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/Rho'
    proc_control_DW.obj_pp.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pp.isInitialized = 1;
    ParamGet_proc_control_166.initParam(&prmName_j[0]);
    ParamGet_proc_control_166.setInitialValue(998.0);
    proc_control_DW.obj_pp.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/g'
    proc_control_DW.obj_axm.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_axm.isInitialized = 1;
    ParamGet_proc_control_167.initParam(&prmName_k[0]);
    ParamGet_proc_control_167.setInitialValue(9.81);
    proc_control_DW.obj_axm.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/mass'
    proc_control_DW.obj_jq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jq.isInitialized = 1;
    ParamGet_proc_control_168.initParam(&prmName_l[0]);
    ParamGet_proc_control_168.setInitialValue(35.42);
    proc_control_DW.obj_jq.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/volume'
    proc_control_DW.obj_ju.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ju.isInitialized = 1;
    ParamGet_proc_control_169.initParam(&prmName_m[0]);
    ParamGet_proc_control_169.setInitialValue(0.0365);
    proc_control_DW.obj_ju.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/sub height'
    proc_control_DW.obj_e5.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e5.isInitialized = 1;
    ParamGet_proc_control_170.initParam(&prmName_n[0]);
    ParamGet_proc_control_170.setInitialValue(0.3);
    proc_control_DW.obj_e5.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/rg'
    proc_control_DW.obj_e1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e1.isInitialized = 1;
    ParamGet_proc_control_171.initParam(&prmName_o[0]);
    ParamGet_proc_control_171.setInitialValue(&varargin_1_c[0], 3U);
    proc_control_DW.obj_e1.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/rb'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_h.isInitialized = 1;
    ParamGet_proc_control_173.initParam(&prmName_p[0]);
    ParamGet_proc_control_173.setInitialValue(&varargin_1_d[0], 3U);
    proc_control_DW.obj_h.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/cdl'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_fg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fg.isInitialized = 1;
    ParamGet_proc_control_175.initParam(&prmName_q[0]);
    ParamGet_proc_control_175.setInitialValue(&varargin_1_e[0], 6U);
    proc_control_DW.obj_fg.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/cdq'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_kb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kb.isInitialized = 1;
    ParamGet_proc_control_177.initParam(&prmName_r[0]);
    ParamGet_proc_control_177.setInitialValue(&varargin_1_f[0], 6U);
    proc_control_DW.obj_kb.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/added mass'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_ps.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ps.isInitialized = 1;
    ParamGet_proc_control_180.initParam(&prmName_s[0]);
    ParamGet_proc_control_180.setInitialValue(&varargin_1_g[0], 6U);
    proc_control_DW.obj_ps.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/I'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_hn.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hn.isInitialized = 1;
    ParamGet_proc_control_182.initParam(&prmName_t[0]);
    ParamGet_proc_control_182.setInitialValue(&varargin_1_h[0], 9U);
    proc_control_DW.obj_hn.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/depth pose'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_lq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lq.isInitialized = 1;
    ParamGet_proc_control_184.initParam(&prmName_u[0]);
    ParamGet_proc_control_184.setInitialValue(&varargin_1_i[0], 3U);
    proc_control_DW.obj_lq.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/hydro pose'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_c4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_c4.isInitialized = 1;
    ParamGet_proc_control_186.initParam(&prmName_v[0]);
    ParamGet_proc_control_186.setInitialValue(&varargin_1_j[0], 3U);
    proc_control_DW.obj_c4.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/sonar pose'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_eu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eu.isInitialized = 1;
    ParamGet_proc_control_190.initParam(&prmName_w[0]);
    ParamGet_proc_control_190.setInitialValue(&varargin_1_k[0], 3U);
    proc_control_DW.obj_eu.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/dvl rotation'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_mh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_mh.isInitialized = 1;
    ParamGet_proc_control_192.initParam(&prmName_x[0]);
    ParamGet_proc_control_192.setInitialValue(&varargin_1_l[0], 3U);
    proc_control_DW.obj_mh.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/thrusters'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_l4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_l4.isInitialized = 1;
    ParamGet_proc_control_194.initParam(&prmName_y[0]);
    ParamGet_proc_control_194.setInitialValue(&varargin_1_m[0], 48U);
    proc_control_DW.obj_l4.isSetupComplete = true;

    // Start for MATLABSystem: '<S47>/dvl lost override'
    proc_control_DW.obj_jk.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jk.isInitialized = 1;
    ParamGet_proc_control_196.initParam(&prmName_z[0]);
    ParamGet_proc_control_196.setInitialValue(true);
    proc_control_DW.obj_jk.isSetupComplete = true;

    // SystemInitialize for MATLABSystem: '<S50>/MATLAB System3' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.OV_d[0],
           &proc_control_P.mpcParams_Y0.gains.predefined.OV[0], 13U * sizeof
           (real_T));

    // SystemInitialize for MATLABSystem: '<S50>/MATLAB System4' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MV_p[0],
           &proc_control_P.mpcParams_Y0.gains.predefined.MV[0], sizeof(real_T) <<
           3U);

    // SystemInitialize for MATLABSystem: '<S50>/MATLAB System1' incorporates:
    //   MATLABSystem: '<S50>/MATLAB System4'
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MVR_cn[0],
           &proc_control_P.mpcParams_Y0.gains.predefined.MVR[0], sizeof(real_T) <<
           3U);

    // SystemInitialize for MATLABSystem: '<S51>/MATLAB System4' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.OV_c[0], &proc_control_P.mpcParams_Y0.gains.c10.OV[0],
           13U * sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S51>/MATLAB System5' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MV_j[0], &proc_control_P.mpcParams_Y0.gains.c10.MV[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S51>/MATLAB System3' incorporates:
    //   MATLABSystem: '<S51>/MATLAB System5'
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MVR_a[0], &proc_control_P.mpcParams_Y0.gains.c10.MVR
           [0], sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S52>/MATLAB System4' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.OV_l[0], &proc_control_P.mpcParams_Y0.gains.c11.OV[0],
           13U * sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S52>/MATLAB System5' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MV_l[0], &proc_control_P.mpcParams_Y0.gains.c11.MV[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S52>/MATLAB System3' incorporates:
    //   MATLABSystem: '<S52>/MATLAB System5'
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MVR_c[0], &proc_control_P.mpcParams_Y0.gains.c11.MVR
           [0], sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S53>/MATLAB System4' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.OV[0], &proc_control_P.mpcParams_Y0.gains.c19.OV[0],
           13U * sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S53>/MATLAB System5' incorporates:
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MV_c[0], &proc_control_P.mpcParams_Y0.gains.c19.MV[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S53>/MATLAB System3' incorporates:
    //   MATLABSystem: '<S53>/MATLAB System5'
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MVR[0], &proc_control_P.mpcParams_Y0.gains.c19.MVR[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S54>/MATLAB System5' incorporates:
    //   MATLABSystem: '<S53>/MATLAB System5'
    //   Outport: '<S44>/mpcParams'

    memcpy(&proc_control_B.MV[0], &proc_control_P.mpcParams_Y0.gains.noDvl.MV[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for DataTypeConversion: '<S48>/Data Type Conversion' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.p_h = proc_control_P.mpcParams_Y0.gains.p;

    // SystemInitialize for DataTypeConversion: '<S48>/Data Type Conversion1' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.m_a = proc_control_P.mpcParams_Y0.gains.m;

    // SystemInitialize for MATLABSystem: '<S48>/Get Parameter2' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.tmax = proc_control_P.mpcParams_Y0.gains.tmax;

    // SystemInitialize for MATLABSystem: '<S48>/Get Parameter3' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.tmin = proc_control_P.mpcParams_Y0.gains.tmin;

    // SystemInitialize for MATLABSystem: '<S49>/Get Parameter' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.linearTol =
      proc_control_P.mpcParams_Y0.targetReached.linearTol;

    // SystemInitialize for MATLABSystem: '<S49>/Get Parameter1' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.angularTol =
      proc_control_P.mpcParams_Y0.targetReached.angularTol;

    // SystemInitialize for MATLABSystem: '<S49>/Get Parameter2' incorporates:
    //   Outport: '<S44>/mpcParams'

    proc_control_B.timeInTol =
      proc_control_P.mpcParams_Y0.targetReached.timeInTol;

    // SystemInitialize for BusCreator: '<S47>/Bus Creator' incorporates:
    //   Outport: '<S44>/physicsConstants'

    proc_control_B.BusCreator = proc_control_P.physicsConstants_Y0;

    // End of SystemInitialize for SubSystem: '<S4>/Get_ROS_param'

    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Enabled SubSystem: '<S38>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S41>/In1' incorporates:
    //   Outport: '<S41>/Out1'

    proc_control_B.In1_g = proc_control_P.Out1_Y0_no;

    // End of SystemInitialize for SubSystem: '<S38>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S39>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S42>/In1' incorporates:
    //   Outport: '<S42>/Out1'

    proc_control_B.In1_iq = proc_control_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S39>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S40>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S43>/In1' incorporates:
    //   Outport: '<S43>/Out1'

    proc_control_B.In1_hb = proc_control_P.Out1_Y0_oo;

    // End of SystemInitialize for SubSystem: '<S40>/Enabled Subsystem'

    // Start for MATLABSystem: '<S38>/SourceBlock'
    proc_control_DW.obj_fe.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fe.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fe.isSetupComplete = false;
    proc_control_DW.obj_fe.isInitialized = 1;
    proc_contr_Subscriber_setupImpl(&proc_control_DW.obj_fe);
    proc_control_DW.obj_fe.isSetupComplete = true;

    // Start for MATLABSystem: '<S39>/SourceBlock'
    proc_control_DW.obj_fka.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fka.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fka.isSetupComplete = false;
    proc_control_DW.obj_fka.isInitialized = 1;
    proc_con_Subscriber_setupImpl_p(&proc_control_DW.obj_fka);
    proc_control_DW.obj_fka.isSetupComplete = true;

    // Start for MATLABSystem: '<S40>/SourceBlock'
    proc_control_DW.obj_na.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_na.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_na.isSetupComplete = false;
    proc_control_DW.obj_na.isInitialized = 1;
    proc_co_Subscriber_setupImpl_pr(&proc_control_DW.obj_na);
    proc_control_DW.obj_na.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/AUV'
    // SystemInitialize for Enabled SubSystem: '<S27>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S30>/In1' incorporates:
    //   Outport: '<S30>/Out1'

    proc_control_B.In1_e = proc_control_P.Out1_Y0_c;

    // End of SystemInitialize for SubSystem: '<S27>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S28>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S31>/In1' incorporates:
    //   Outport: '<S31>/Out1'

    proc_control_B.In1_m = proc_control_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S28>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S29>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S32>/In1' incorporates:
    //   Outport: '<S32>/Out1'

    proc_control_B.In1_b = proc_control_P.Out1_Y0_bc;

    // End of SystemInitialize for SubSystem: '<S29>/Enabled Subsystem'

    // Start for MATLABSystem: '<S27>/SourceBlock'
    proc_control_DW.obj_du.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_du.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_du.isSetupComplete = false;
    proc_control_DW.obj_du.isInitialized = 1;
    proc_c_Subscriber_setupImpl_pr3(&proc_control_DW.obj_du);
    proc_control_DW.obj_du.isSetupComplete = true;

    // Start for MATLABSystem: '<S28>/SourceBlock'
    proc_control_DW.obj_n5.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_n5.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_n5.isSetupComplete = false;
    proc_control_DW.obj_n5.isInitialized = 1;
    proc__Subscriber_setupImpl_pr35(&proc_control_DW.obj_n5);
    proc_control_DW.obj_n5.isSetupComplete = true;

    // Start for MATLABSystem: '<S29>/SourceBlock'
    proc_control_DW.obj_ak.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ak.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ak.isSetupComplete = false;
    proc_control_DW.obj_ak.isInitialized = 1;
    proc_Subscriber_setupImpl_pr351(&proc_control_DW.obj_ak);
    proc_control_DW.obj_ak.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S3>/AUV'

    // SystemInitialize for Enabled SubSystem: '<S6>/DVL Measurements'
    // InitializeConditions for Delay: '<S202>/Delay'
    proc_control_DW.Delay_DSTATE_i = proc_control_P.Delay_InitialCondition_f;

    // SystemInitialize for Enabled SubSystem: '<S202>/Enabled Subsystem'
    // SystemInitialize for Fcn: '<S206>/q0' incorporates:
    //   Outport: '<S205>/Quat'

    proc_control_B.q0 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S206>/q1' incorporates:
    //   Outport: '<S205>/Quat'

    proc_control_B.q1 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S206>/q2' incorporates:
    //   Outport: '<S205>/Quat'

    proc_control_B.q2 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S206>/q3' incorporates:
    //   Outport: '<S205>/Quat'

    proc_control_B.q3 = proc_control_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S202>/Enabled Subsystem'

    // SystemInitialize for Outport: '<S177>/DVL Measurements'
    proc_control_B.enable_i = proc_control_P.DVLMeasurements_Y0.enable;

    // End of SystemInitialize for SubSystem: '<S6>/DVL Measurements'

    // SystemInitialize for Enabled SubSystem: '<S6>/Depth Measurements'
    // SystemInitialize for Sum: '<S178>/Sum' incorporates:
    //   Outport: '<S178>/Depth Measurements'

    proc_control_B.zposition = proc_control_P.DepthMeasurements_Y0;

    // End of SystemInitialize for SubSystem: '<S6>/Depth Measurements'

    // SystemInitialize for Enabled SubSystem: '<S3>/Enabled Subsystem'
    // InitializeConditions for Memory: '<S36>/Memory'
    proc_control_DW.Memory_PreviousInput_e =
      proc_control_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S37>/Memory'
    proc_control_DW.Memory_PreviousInput_n =
      proc_control_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S25>/y'
    proc_control_B.y = proc_control_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S6>/Enabled Subsystem'
    // Start for DataStoreMemory: '<S221>/DataStoreMemory - P'
    memcpy(&proc_control_DW.P[0], &proc_control_P.DataStoreMemoryP_InitialValue
           [0], 169U * sizeof(real_T));

    // SystemInitialize for Enabled SubSystem: '<S221>/Correct1'
    // SystemInitialize for MATLABSystem: '<S222>/MATLAB System' incorporates:
    //   Outport: '<S222>/yBlockOrdering'

    proc_control_B.MATLABSystem_o3_k = proc_control_P.yBlockOrdering_Y0;

    // End of SystemInitialize for SubSystem: '<S221>/Correct1'

    // Start for DataStoreMemory: '<S221>/DataStoreMemory - x'
    memcpy(&proc_control_DW.x[0], &proc_control_P.DataStoreMemoryx_InitialValue
           [0], 13U * sizeof(real_T));

    // End of SystemInitialize for SubSystem: '<S6>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Enabled Subsystem'
    // SystemInitialize for Atomic SubSystem: '<S9>/Header Assignment'
    // Start for MATLABSystem: '<S13>/Current Time'
    proc_control_DW.obj_haq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_haq.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S9>/Header Assignment'

    // Start for MATLABSystem: '<S15>/SinkBlock'
    proc_control_DW.obj_ez.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ez.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ez.isInitialized = 1;
    qos_profile = rmw_qos_profile_default;
    pr_ROS2PubSubBase_setQOSProfile(qos_profile, 1.0, (rtInf), 5.0, 5.0, false);
    for (i = 0; i < 21; i++) {
      b_zeroDelimTopic[i] = b_zeroDelimTopic_1[i];
    }

    Pub_proc_control_478.createPublisher(&b_zeroDelimTopic[0], qos_profile);
    proc_control_DW.obj_ez.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S15>/SinkBlock'

    // Start for MATLABSystem: '<S11>/SinkBlock'
    proc_control_DW.obj_dv.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_dv.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dv.isSetupComplete = false;
    proc_control_DW.obj_dv.isInitialized = 1;
    proc_contro_Publisher_setupImpl(&proc_control_DW.obj_dv);
    proc_control_DW.obj_dv.isSetupComplete = true;

    // SystemInitialize for SignalConversion generated from: '<S1>/Output' incorporates:
    //   Outport: '<S1>/Output'

    proc_control_B.WorldPosition[0] = proc_control_P.Output_Y0.WorldPosition[0];
    proc_control_B.WorldPosition[1] = proc_control_P.Output_Y0.WorldPosition[1];
    proc_control_B.WorldPosition[2] = proc_control_P.Output_Y0.WorldPosition[2];

    // SystemInitialize for SignalConversion generated from: '<S1>/Output' incorporates:
    //   Outport: '<S1>/Output'

    proc_control_B.qS2W[0] = proc_control_P.Output_Y0.qS2W[0];
    proc_control_B.qS2W[1] = proc_control_P.Output_Y0.qS2W[1];
    proc_control_B.qS2W[2] = proc_control_P.Output_Y0.qS2W[2];
    proc_control_B.qS2W[3] = proc_control_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Enabled Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S5>/If Action Subsystem'
    // SystemInitialize for Enabled SubSystem: '<S171>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S173>/In1' incorporates:
    //   Outport: '<S173>/Out1'

    proc_control_B.In1_j = proc_control_P.Out1_Y0_b;

    // End of SystemInitialize for SubSystem: '<S171>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S172>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S174>/In1' incorporates:
    //   Outport: '<S174>/Out1'

    proc_control_B.In1 = proc_control_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S172>/Enabled Subsystem'

    // Start for MATLABSystem: '<S171>/SourceBlock'
    proc_control_DW.obj_no.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_no.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_no.isSetupComplete = false;
    proc_control_DW.obj_no.isInitialized = 1;
    Subscriber_setupIm_pr351ewpk3k4(&proc_control_DW.obj_no);
    proc_control_DW.obj_no.isSetupComplete = true;

    // Start for MATLABSystem: '<S172>/SourceBlock'
    proc_control_DW.obj_if.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_if.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_if.isSetupComplete = false;
    proc_control_DW.obj_if.isInitialized = 1;
    Subscriber_setupI_pr351ewpk3k4u(&proc_control_DW.obj_if);
    proc_control_DW.obj_if.isSetupComplete = true;

    // Start for MATLABSystem: '<S69>/MATLAB System'
    proc_control_DW.obj_k.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S69>/MATLAB System'
    //         %% Fonction execute a chaque iteration
    //  Perform one-time calculations, such as computing constants
    proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_k);

    // SystemInitialize for MATLABSystem: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    memcpy(&proc_control_B.mvmin[0], &proc_control_P.MPCparam_Y0.mvmin[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    memcpy(&proc_control_B.mvmax[0], &proc_control_P.MPCparam_Y0.mvmax[0],
           sizeof(real_T) << 3U);

    // SystemInitialize for SignalConversion generated from: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    memcpy(&proc_control_B.ywt[0], &proc_control_P.MPCparam_Y0.ywt[0], 13U *
           sizeof(real_T));

    // SystemInitialize for SignalConversion generated from: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    memcpy(&proc_control_B.mvwt[0], &proc_control_P.MPCparam_Y0.mvwt[0], sizeof
           (real_T) << 3U);

    // SystemInitialize for SignalConversion generated from: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    memcpy(&proc_control_B.dmwwt[0], &proc_control_P.MPCparam_Y0.dmwwt[0],
           sizeof(real_T) << 3U);
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S69>/MATLAB System' incorporates:
      //   Outport: '<S69>/MPC param'

      proc_control_B.thrustersStatus[i] =
        proc_control_P.MPCparam_Y0.thrustersStatus[i];
    }

    // SystemInitialize for SignalConversion generated from: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    proc_control_B.p = proc_control_P.MPCparam_Y0.p;

    // SystemInitialize for SignalConversion generated from: '<S69>/MATLAB System' incorporates:
    //   Outport: '<S69>/MPC param'

    proc_control_B.m = proc_control_P.MPCparam_Y0.m;

    // End of SystemInitialize for SubSystem: '<S5>/If Action Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S245>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S246>/In1' incorporates:
    //   Outport: '<S246>/Out1'

    proc_control_B.In1_l = proc_control_P.Out1_Y0_f;

    // End of SystemInitialize for SubSystem: '<S245>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S247>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S248>/In1' incorporates:
    //   Outport: '<S248>/Out1'

    proc_control_B.In1_i = proc_control_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S247>/Enabled Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S7>/ProcPlanner Trajectory'
    // InitializeConditions for UnitDelay: '<S240>/Delay Input1'
    //
    //  Block description for '<S240>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = proc_control_P.DetectRisePositive_vinit;

    // Start for MATLABSystem: '<S233>/MATLAB System'
    proc_control_DW.obj_l.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S233>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj_l.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj_l.emptyArray[i] = 999.0;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj_l.targetReachedCount = 0.0;
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_l.initialPose[i] = 0.0;
    }

    //  Buffer trajectoire
    for (i = 0; i < 78000; i++) {
      proc_control_DW.obj_l.poseBuffer[i] = 999.0;
    }

    proc_control_DW.obj_l.bufferCount = 0.0;
    proc_control_DW.obj_l.done = false;
    proc_control_DW.obj_l.init = false;

    // End of InitializeConditions for MATLABSystem: '<S233>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S7>/ProcPlanner Trajectory'

    // SystemInitialize for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
    // InitializeConditions for Delay: '<S238>/Delay'
    proc_control_DW.Delay_DSTATE_g = proc_control_P.Delay_InitialCondition_az;

    // SystemInitialize for Enabled SubSystem: '<S238>/Enabled Subsystem'
    // SystemInitialize for DataTypeConversion: '<S249>/Data Type Conversion1' incorporates:
    //   Outport: '<S249>/Out1'

    proc_control_B.DataTypeConversion1[0] = proc_control_P.Out1_Y0_j3;
    proc_control_B.DataTypeConversion1[1] = proc_control_P.Out1_Y0_j3;

    // SystemInitialize for DataTypeConversion: '<S249>/Data Type Conversion2' incorporates:
    //   Outport: '<S249>/Out1'

    proc_control_B.DataTypeConversion2 = proc_control_P.Out1_Y0_j3;

    // SystemInitialize for Enabled SubSystem: '<S238>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S249>/Data Type Conversion' incorporates:
      //   Outport: '<S249>/Out1'

      proc_control_B.DataTypeConversion[i] = proc_control_P.Out1_Y0_j3;

      // SystemInitialize for Selector: '<S250>/Selector' incorporates:
      //   DataTypeConversion: '<S249>/Data Type Conversion'
      //   Outport: '<S249>/Out1'
      //   Outport: '<S250>/linWpts'

      proc_control_B.Selector[i] = proc_control_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S238>/Enabled Subsystem'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S250>/Selector1' incorporates:
      //   Outport: '<S250>/RotWpts'

      proc_control_B.Selector1[i] = proc_control_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S250>/Matrix Concatenate' incorporates:
    //   Outport: '<S250>/time'

    proc_control_B.MatrixConcatenate[0] = proc_control_P.time_Y0;
    proc_control_B.MatrixConcatenate[1] = proc_control_P.time_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S250>/Selector4' incorporates:
      //   Outport: '<S250>/target'

      proc_control_B.Selector4[i] = proc_control_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S238>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S238>/Resettable Subsystem'
    // InitializeConditions for DiscreteIntegrator: '<S251>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S251>/Rotation Trajectory'
    memcpy(&proc_control_DW.obj_p3.TimeScaling[0], &tmp[0], 33U * sizeof(real_T));
    proc_control_DW.obj_p3.isInitialized = 1;
    proc_control_DW.obj_p3.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    memset(&proc_control_DW.obj_m.AccelerationBoundaryCondition[0], 0, 10U *
           sizeof(real_T));
    for (i = 0; i < 5; i++) {
      proc_control_DW.obj_m.tunablePropertyChanged[i] = false;
    }

    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_m.VelocityBoundaryCondition[i] =
        proc_control_P.PolynomialTrajectory_VelocityBo[i];
    }

    proc_control_DW.obj_m.isInitialized = 1;
    proc_cont_PolyTrajSys_setupImpl(&proc_control_DW.obj_m);
    proc_control_DW.obj_m.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S254>/Polynomial Trajectory'
    // End of SystemInitialize for SubSystem: '<S238>/Resettable Subsystem'

    // Start for MATLABSystem: '<S252>/SourceBlock'
    proc_control_DW.obj_ha.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ha.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ha.isSetupComplete = false;
    proc_control_DW.obj_ha.isInitialized = 1;
    proc_con_Subscriber_setupImpl_n(&proc_control_DW.obj_ha);
    proc_control_DW.obj_ha.isSetupComplete = true;

    // InitializeConditions for MATLABSystem: '<S238>/MATLAB System'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 18; i++) {
      proc_control_DW.obj_f.poseList[i] = 999.0;
    }

    i = 0;
    for (i_0 = 0; i_0 < 9; i_0++) {
      proc_control_DW.obj_f.poseList[i] = tmp_0[i_0];
      i += 2;
    }

    // initCond(1,1:7);
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_f.initcond[i] = tmp_1[i];
    }

    proc_control_DW.obj_f.i = 2.0;

    // End of InitializeConditions for MATLABSystem: '<S238>/MATLAB System'

    // Start for MATLABSystem: '<S238>/MATLAB System1'
    proc_control_DW.obj.linearConvergence =
      proc_control_P.MATLABSystem1_linearConvergence;
    proc_control_DW.obj.quaternionConvergence =
      proc_control_P.MATLABSystem1_quaternionConverg;
    proc_control_DW.obj.TargetThreshold =
      proc_control_P.MATLABSystem1_TargetThreshold;
    proc_control_DW.obj.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj.generationNumber = 0.0;
    proc_control_DW.obj.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj.emptyArray[i] = 999.0;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj.targetReachedCount = 0.0;

    //  Buffer trajectoire
    for (i = 0; i < 78013; i++) {
      proc_control_DW.obj.poseBuffer[i] = 999.0;
    }

    proc_control_DW.obj.bufferCount = 0.0;
    proc_control_DW.obj.done = false;
    proc_control_DW.obj.init = 0.0;

    // End of Start for MATLABSystem: '<S238>/MATLAB System1'
    // End of SystemInitialize for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 

    // SystemInitialize for IfAction SubSystem: '<S68>/If Action Subsystem'
    // InitializeConditions for Delay: '<S71>/Delay'
    memcpy(&proc_control_DW.Delay_DSTATE_a[0],
           &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) << 3U);

    // InitializeConditions for Memory: '<S79>/Memory'
    memcpy(&proc_control_DW.Memory_PreviousInput_l[0],
           &proc_control_P.Memory_InitialCondition[0], 226U * sizeof(boolean_T));

    // InitializeConditions for UnitDelay: '<S79>/last_mv'
    memcpy(&proc_control_DW.last_mv_DSTATE_j[0],
           &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) << 3U);

    // SystemInitialize for Atomic SubSystem: '<S78>/Header Assignment'
    // Start for MATLABSystem: '<S110>/Current Time'
    proc_control_DW.obj_o3.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_o3.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S78>/Header Assignment'

    // Start for MATLABSystem: '<S71>/MATLAB System'
    proc_control_DW.obj_b.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S71>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_contro_TrimPlant_resetImpl(&proc_control_DW.obj_b);

    // Start for MATLABSystem: '<S111>/SinkBlock'
    proc_control_DW.obj_ni.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ni.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ni.isInitialized = 1;
    qos_profile = rmw_qos_profile_default;
    pr_ROS2PubSubBase_setQOSProfile(qos_profile, 1.0, (rtInf), (rtInf), (rtInf),
      false);
    for (i = 0; i < 34; i++) {
      b_zeroDelimTopic_0[i] = b_zeroDelimTopic_2[i];
    }

    Pub_proc_control_913.createPublisher(&b_zeroDelimTopic_0[0], qos_profile);
    proc_control_DW.obj_ni.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S111>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S68>/If Action Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S68>/If Action Subsystem2'
    // InitializeConditions for UnitDelay: '<S145>/UD'
    //
    //  Block description for '<S145>/UD':
    //
    //   Store in Global RAM

    for (i = 0; i < 6; i++) {
      proc_control_DW.UD_DSTATE[i] =
        proc_control_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S145>/UD'

    // Start for MATLABSystem: '<S73>/MATLAB System'
    proc_control_DW.obj_p.k = proc_control_P.MATLABSystem_k;
    memcpy(&proc_control_DW.obj_p.binv[0], &proc_control_P.binv[0], 48U * sizeof
           (real_T));
    proc_control_DW.obj_p.mass = proc_control_P.physics.mass;
    proc_control_DW.obj_p.volume = proc_control_P.physics.volume;
    proc_control_DW.obj_p.height = proc_control_P.physics.height;
    memcpy(&proc_control_DW.obj_p.I[0], &proc_control_P.physics.I[0], 9U *
           sizeof(real_T));
    proc_control_DW.obj_p.RG[0] = proc_control_P.physics.RG[0];
    proc_control_DW.obj_p.RB[0] = proc_control_P.physics.RB[0];
    proc_control_DW.obj_p.RG[1] = proc_control_P.physics.RG[1];
    proc_control_DW.obj_p.RB[1] = proc_control_P.physics.RB[1];
    proc_control_DW.obj_p.RG[2] = proc_control_P.physics.RG[2];
    proc_control_DW.obj_p.RB[2] = proc_control_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_p.AddedMass[i] = proc_control_P.physics.AddedMass[i];
      proc_control_DW.obj_p.CDL[i] = proc_control_P.physics.CDL[i];
      proc_control_DW.obj_p.CDQ[i] = proc_control_P.physics.CDQ[i];
    }

    proc_control_DW.obj_p.AF[0] = proc_control_P.physics.AF[0];
    proc_control_DW.obj_p.AF[1] = proc_control_P.physics.AF[1];
    proc_control_DW.obj_p.AF[2] = proc_control_P.physics.AF[2];
    proc_control_DW.obj_p.g = proc_control_P.physics.g;
    proc_control_DW.obj_p.rho = proc_control_P.physics.rho;
    proc_control_DW.obj_p.isInitialized = 1;

    // End of Start for MATLABSystem: '<S73>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S68>/If Action Subsystem2'

    // SystemInitialize for IfAction SubSystem: '<S68>/If Action Subsystem1'
    // InitializeConditions for Memory: '<S115>/Memory'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    memcpy(&proc_control_DW.Memory_PreviousInput[0],
           &proc_control_P.Memory_InitialCondition_n[0], 226U * sizeof(boolean_T));

    // InitializeConditions for UnitDelay: '<S115>/last_mv'
    memcpy(&proc_control_DW.last_mv_DSTATE[0],
           &proc_control_P.last_mv_InitialCondition_k[0], sizeof(real_T) << 3U);

    // InitializeConditions for Delay: '<S72>/Delay1'
    memcpy(&proc_control_DW.Delay1_DSTATE[0],
           &proc_control_P.Delay1_InitialCondition[0], 88U * sizeof(real_T));

    // End of SystemInitialize for SubSystem: '<S68>/If Action Subsystem1'

    // SystemInitialize for IfAction SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S75>/Delay'
    memcpy(&proc_control_DW.Delay_DSTATE_pp[0],
           &proc_control_P.Delay_InitialCondition_a[0], sizeof(real_T) << 3U);

    // InitializeConditions for Delay: '<S149>/mv_Delay'
    proc_control_DW.icLoad = true;

    // InitializeConditions for Delay: '<S149>/x_Delay'
    proc_control_DW.icLoad_g = true;

    // InitializeConditions for Delay: '<S149>/slack_delay'
    proc_control_DW.icLoad_o = true;

    // End of SystemInitialize for SubSystem: '<S68>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for Merge generated from: '<S68>/Merge'
    proc_control_B.MpcStatus = proc_control_P.Merge_2_InitialOutput_i;

    // SystemInitialize for Merge generated from: '<S68>/Merge'
    proc_control_B.alive = proc_control_P.Merge_3_InitialOutput;

    // SystemInitialize for Enabled SubSystem: '<Root>/Enabled Subsystem1'
    // Start for MATLABSystem: '<S19>/SinkBlock'
    proc_control_DW.obj_oa.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_oa.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oa.isSetupComplete = false;
    proc_control_DW.obj_oa.isInitialized = 1;
    proc_cont_Publisher_setupImpl_p(&proc_control_DW.obj_oa);
    proc_control_DW.obj_oa.isSetupComplete = true;

    // Start for MATLABSystem: '<S20>/SinkBlock'
    proc_control_DW.obj_fd.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fd.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fd.isSetupComplete = false;
    proc_control_DW.obj_fd.isInitialized = 1;
    proc_con_Publisher_setupImpl_pr(&proc_control_DW.obj_fd);
    proc_control_DW.obj_fd.isSetupComplete = true;

    // Start for MATLABSystem: '<S23>/SinkBlock'
    proc_control_DW.obj_clf.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_clf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_clf.isSetupComplete = false;
    proc_control_DW.obj_clf.isInitialized = 1;
    proc_co_Publisher_setupImpl_pr3(&proc_control_DW.obj_clf);
    proc_control_DW.obj_clf.isSetupComplete = true;
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S2>/thrust' incorporates:
      //   Outport: '<S2>/thrust'

      proc_control_B.BufferToMakeInportVirtual_Inser[i] =
        proc_control_P.thrust_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Enabled Subsystem1'

    // Start for MATLABSystem: '<S56>/SourceBlock'
    proc_control_DW.obj_nf.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_nf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nf.isSetupComplete = false;
    proc_control_DW.obj_nf.isInitialized = 1;
    pro_Subscriber_setupImpl_pr351e(&proc_control_DW.obj_nf);
    proc_control_DW.obj_nf.isSetupComplete = true;

    // Start for MATLABSystem: '<S61>/SourceBlock'
    proc_control_DW.obj_i3.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_i3.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i3.isSetupComplete = false;
    proc_control_DW.obj_i3.isInitialized = 1;
    Subscriber_setupImp_pr351ewpk3k(&proc_control_DW.obj_i3);
    proc_control_DW.obj_i3.isSetupComplete = true;

    // Start for MATLABSystem: '<S57>/SourceBlock'
    proc_control_DW.obj_lt.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_lt.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lt.isSetupComplete = false;
    proc_control_DW.obj_lt.isInitialized = 1;
    pr_Subscriber_setupImpl_pr351ew(&proc_control_DW.obj_lt);
    proc_control_DW.obj_lt.isSetupComplete = true;

    // Start for MATLABSystem: '<S58>/SourceBlock'
    proc_control_DW.obj_fw.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fw.isSetupComplete = false;
    proc_control_DW.obj_fw.isInitialized = 1;
    p_Subscriber_setupImpl_pr351ewp(&proc_control_DW.obj_fw);
    proc_control_DW.obj_fw.isSetupComplete = true;

    // Start for MATLABSystem: '<S59>/SourceBlock'
    proc_control_DW.obj_cg.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_cg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cg.isSetupComplete = false;
    proc_control_DW.obj_cg.isInitialized = 1;
    Subscriber_setupImpl_pr351ewpk(&proc_control_DW.obj_cg);
    proc_control_DW.obj_cg.isSetupComplete = true;

    // Start for MATLABSystem: '<S60>/SourceBlock'
    proc_control_DW.obj_ppy.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ppy.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ppy.isSetupComplete = false;
    proc_control_DW.obj_ppy.isInitialized = 1;
    Subscriber_setupImpl_pr351ewpk3(&proc_control_DW.obj_ppy);
    proc_control_DW.obj_ppy.isSetupComplete = true;

    // Start for MATLABSystem: '<S45>/MATLAB System'
    proc_control_DW.obj_i.initial_mode = proc_control_P.mode.init;
    proc_control_DW.obj_i.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S45>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_i.m_initCond[i] = 0.0;
    }

    proc_control_DW.obj_i.m_mode = proc_control_DW.obj_i.initial_mode;
    proc_control_DW.obj_i.m_killStatus = 0.0;
    proc_control_DW.obj_i.m_simulation = 0.0;
    proc_control_DW.obj_i.m_reset = 0.0;
    proc_control_DW.obj_i.m_trajClear = 0.0;
    proc_control_DW.obj_i.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S45>/MATLAB System'

    // Start for MATLABSystem: '<S245>/SourceBlock'
    proc_control_DW.obj_jb.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_jb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jb.isSetupComplete = false;
    proc_control_DW.obj_jb.isInitialized = 1;
    Subscriber_setup_pr351ewpk3k4u0(&proc_control_DW.obj_jb);
    proc_control_DW.obj_jb.isSetupComplete = true;

    // Start for MATLABSystem: '<S247>/SourceBlock'
    proc_control_DW.obj_eh.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_eh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eh.isSetupComplete = false;
    proc_control_DW.obj_eh.isInitialized = 1;
    Subscriber_setu_pr351ewpk3k4u0o(&proc_control_DW.obj_eh);
    proc_control_DW.obj_eh.isSetupComplete = true;

    // Start for MATLABSystem: '<S243>/SinkBlock'
    proc_control_DW.obj_oe.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_oe.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oe.isSetupComplete = false;
    proc_control_DW.obj_oe.isInitialized = 1;
    proc_c_Publisher_setupImpl_pr35(&proc_control_DW.obj_oe);
    proc_control_DW.obj_oe.isSetupComplete = true;
  }
}

// Model terminate function
void proc_control::terminate()
{
  // Terminate for MATLABSystem: '<S56>/SourceBlock'
  if (!proc_control_DW.obj_nf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S56>/SourceBlock'

  // Terminate for MATLABSystem: '<S61>/SourceBlock'
  if (!proc_control_DW.obj_i3.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i3.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S61>/SourceBlock'

  // Terminate for MATLABSystem: '<S57>/SourceBlock'
  if (!proc_control_DW.obj_lt.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S57>/SourceBlock'

  // Terminate for MATLABSystem: '<S58>/SourceBlock'
  if (!proc_control_DW.obj_fw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S58>/SourceBlock'

  // Terminate for MATLABSystem: '<S59>/SourceBlock'
  if (!proc_control_DW.obj_cg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S59>/SourceBlock'

  // Terminate for MATLABSystem: '<S60>/SourceBlock'
  if (!proc_control_DW.obj_ppy.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ppy.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S60>/SourceBlock'

  // Terminate for IfAction SubSystem: '<S4>/Get_ROS_param'
  // Terminate for MATLABSystem: '<S48>/Get Parameter'
  if (!proc_control_DW.obj_f0.matlabCodegenIsDeleted) {
    proc_control_DW.obj_f0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S48>/Get Parameter'

  // Terminate for MATLABSystem: '<S48>/Get Parameter1'
  if (!proc_control_DW.obj_dx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S48>/Get Parameter1'

  // Terminate for MATLABSystem: '<S50>/Get Parameter'
  if (!proc_control_DW.obj_fk.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fk.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S50>/Get Parameter'

  // Terminate for MATLABSystem: '<S50>/Get Parameter1'
  if (!proc_control_DW.obj_iw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_iw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S50>/Get Parameter1'

  // Terminate for MATLABSystem: '<S50>/Get Parameter2'
  if (!proc_control_DW.obj_bn.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bn.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S50>/Get Parameter2'

  // Terminate for MATLABSystem: '<S51>/Get Parameter'
  if (!proc_control_DW.obj_j1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_j1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S51>/Get Parameter'

  // Terminate for MATLABSystem: '<S51>/Get Parameter1'
  if (!proc_control_DW.obj_f2.matlabCodegenIsDeleted) {
    proc_control_DW.obj_f2.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S51>/Get Parameter1'

  // Terminate for MATLABSystem: '<S51>/Get Parameter2'
  if (!proc_control_DW.obj_pzf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pzf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S51>/Get Parameter2'

  // Terminate for MATLABSystem: '<S52>/Get Parameter'
  if (!proc_control_DW.obj_nl.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nl.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S52>/Get Parameter'

  // Terminate for MATLABSystem: '<S52>/Get Parameter1'
  if (!proc_control_DW.obj_nr.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nr.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S52>/Get Parameter1'

  // Terminate for MATLABSystem: '<S52>/Get Parameter2'
  if (!proc_control_DW.obj_as.matlabCodegenIsDeleted) {
    proc_control_DW.obj_as.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S52>/Get Parameter2'

  // Terminate for MATLABSystem: '<S53>/Get Parameter'
  if (!proc_control_DW.obj_fs.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S53>/Get Parameter'

  // Terminate for MATLABSystem: '<S53>/Get Parameter1'
  if (!proc_control_DW.obj_pz.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S53>/Get Parameter1'

  // Terminate for MATLABSystem: '<S53>/Get Parameter2'
  if (!proc_control_DW.obj_hq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S53>/Get Parameter2'

  // Terminate for MATLABSystem: '<S54>/Get Parameter'
  if (!proc_control_DW.obj_nb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S54>/Get Parameter'

  // Terminate for MATLABSystem: '<S48>/Get Parameter2'
  if (!proc_control_DW.obj_cm.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S48>/Get Parameter2'

  // Terminate for MATLABSystem: '<S48>/Get Parameter3'
  if (!proc_control_DW.obj_pu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S48>/Get Parameter3'

  // Terminate for MATLABSystem: '<S49>/Get Parameter'
  if (!proc_control_DW.obj_dc.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dc.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S49>/Get Parameter'

  // Terminate for MATLABSystem: '<S49>/Get Parameter1'
  if (!proc_control_DW.obj_eug.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eug.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S49>/Get Parameter1'

  // Terminate for MATLABSystem: '<S49>/Get Parameter2'
  if (!proc_control_DW.obj_do.matlabCodegenIsDeleted) {
    proc_control_DW.obj_do.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S49>/Get Parameter2'

  // Terminate for MATLABSystem: '<S47>/Rho'
  if (!proc_control_DW.obj_pp.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pp.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/Rho'

  // Terminate for MATLABSystem: '<S47>/g'
  if (!proc_control_DW.obj_axm.matlabCodegenIsDeleted) {
    proc_control_DW.obj_axm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/g'

  // Terminate for MATLABSystem: '<S47>/mass'
  if (!proc_control_DW.obj_jq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/mass'

  // Terminate for MATLABSystem: '<S47>/volume'
  if (!proc_control_DW.obj_ju.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ju.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/volume'

  // Terminate for MATLABSystem: '<S47>/sub height'
  if (!proc_control_DW.obj_e5.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/sub height'

  // Terminate for MATLABSystem: '<S47>/rg'
  if (!proc_control_DW.obj_e1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/rg'

  // Terminate for MATLABSystem: '<S47>/rb'
  if (!proc_control_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/rb'

  // Terminate for MATLABSystem: '<S47>/cdl'
  if (!proc_control_DW.obj_fg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/cdl'

  // Terminate for MATLABSystem: '<S47>/cdq'
  if (!proc_control_DW.obj_kb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/cdq'

  // Terminate for MATLABSystem: '<S47>/added mass'
  if (!proc_control_DW.obj_ps.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ps.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/added mass'

  // Terminate for MATLABSystem: '<S47>/I'
  if (!proc_control_DW.obj_hn.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hn.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/I'

  // Terminate for MATLABSystem: '<S47>/depth pose'
  if (!proc_control_DW.obj_lq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/depth pose'

  // Terminate for MATLABSystem: '<S47>/hydro pose'
  if (!proc_control_DW.obj_c4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_c4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/hydro pose'

  // Terminate for MATLABSystem: '<S47>/sonar pose'
  if (!proc_control_DW.obj_eu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/sonar pose'

  // Terminate for MATLABSystem: '<S47>/dvl rotation'
  if (!proc_control_DW.obj_mh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_mh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/dvl rotation'

  // Terminate for MATLABSystem: '<S47>/thrusters'
  if (!proc_control_DW.obj_l4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_l4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/thrusters'

  // Terminate for MATLABSystem: '<S47>/dvl lost override'
  if (!proc_control_DW.obj_jk.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jk.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S47>/dvl lost override'
  // End of Terminate for SubSystem: '<S4>/Get_ROS_param'

  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for MATLABSystem: '<S38>/SourceBlock'
  if (!proc_control_DW.obj_fe.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fe.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S38>/SourceBlock'

  // Terminate for MATLABSystem: '<S39>/SourceBlock'
  if (!proc_control_DW.obj_fka.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fka.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S39>/SourceBlock'

  // Terminate for MATLABSystem: '<S40>/SourceBlock'
  if (!proc_control_DW.obj_na.matlabCodegenIsDeleted) {
    proc_control_DW.obj_na.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S40>/SourceBlock'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/AUV'
  // Terminate for MATLABSystem: '<S27>/SourceBlock'
  if (!proc_control_DW.obj_du.matlabCodegenIsDeleted) {
    proc_control_DW.obj_du.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S27>/SourceBlock'

  // Terminate for MATLABSystem: '<S28>/SourceBlock'
  if (!proc_control_DW.obj_n5.matlabCodegenIsDeleted) {
    proc_control_DW.obj_n5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S28>/SourceBlock'

  // Terminate for MATLABSystem: '<S29>/SourceBlock'
  if (!proc_control_DW.obj_ak.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ak.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S29>/SourceBlock'
  // End of Terminate for SubSystem: '<S3>/AUV'

  // Terminate for Enabled SubSystem: '<Root>/Enabled Subsystem'
  // Terminate for Atomic SubSystem: '<S9>/Header Assignment'
  // Terminate for MATLABSystem: '<S13>/Current Time'
  if (!proc_control_DW.obj_haq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_haq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S13>/Current Time'
  // End of Terminate for SubSystem: '<S9>/Header Assignment'

  // Terminate for MATLABSystem: '<S15>/SinkBlock'
  if (!proc_control_DW.obj_ez.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ez.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S15>/SinkBlock'

  // Terminate for MATLABSystem: '<S11>/SinkBlock'
  if (!proc_control_DW.obj_dv.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dv.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S11>/SinkBlock'
  // End of Terminate for SubSystem: '<Root>/Enabled Subsystem'

  // Terminate for IfAction SubSystem: '<S5>/If Action Subsystem'
  // Terminate for MATLABSystem: '<S171>/SourceBlock'
  if (!proc_control_DW.obj_no.matlabCodegenIsDeleted) {
    proc_control_DW.obj_no.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S171>/SourceBlock'

  // Terminate for MATLABSystem: '<S172>/SourceBlock'
  if (!proc_control_DW.obj_if.matlabCodegenIsDeleted) {
    proc_control_DW.obj_if.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S172>/SourceBlock'
  // End of Terminate for SubSystem: '<S5>/If Action Subsystem'

  // Terminate for MATLABSystem: '<S245>/SourceBlock'
  if (!proc_control_DW.obj_jb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S245>/SourceBlock'

  // Terminate for MATLABSystem: '<S247>/SourceBlock'
  if (!proc_control_DW.obj_eh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S247>/SourceBlock'

  // Terminate for IfAction SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 
  // Terminate for MATLABSystem: '<S252>/SourceBlock'
  if (!proc_control_DW.obj_ha.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ha.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S252>/SourceBlock'
  // End of Terminate for SubSystem: '<S7>/singleWpts Trajectory Control DEBUG only' 

  // Terminate for IfAction SubSystem: '<S68>/If Action Subsystem'
  // Terminate for Atomic SubSystem: '<S78>/Header Assignment'
  // Terminate for MATLABSystem: '<S110>/Current Time'
  if (!proc_control_DW.obj_o3.matlabCodegenIsDeleted) {
    proc_control_DW.obj_o3.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S110>/Current Time'
  // End of Terminate for SubSystem: '<S78>/Header Assignment'

  // Terminate for MATLABSystem: '<S111>/SinkBlock'
  if (!proc_control_DW.obj_ni.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ni.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S111>/SinkBlock'
  // End of Terminate for SubSystem: '<S68>/If Action Subsystem'

  // Terminate for Enabled SubSystem: '<Root>/Enabled Subsystem1'
  // Terminate for MATLABSystem: '<S19>/SinkBlock'
  if (!proc_control_DW.obj_oa.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oa.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S19>/SinkBlock'

  // Terminate for MATLABSystem: '<S20>/SinkBlock'
  if (!proc_control_DW.obj_fd.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S20>/SinkBlock'

  // Terminate for MATLABSystem: '<S23>/SinkBlock'
  if (!proc_control_DW.obj_clf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_clf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S23>/SinkBlock'
  // End of Terminate for SubSystem: '<Root>/Enabled Subsystem1'

  // Terminate for MATLABSystem: '<S243>/SinkBlock'
  if (!proc_control_DW.obj_oe.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oe.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S243>/SinkBlock'
}

// Constructor
proc_control::proc_control() :
  proc_control_B(),
  proc_control_DW(),
  proc_control_PrevZCX(),
  proc_control_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control::~proc_control()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
RT_MODEL_proc_control_T * proc_control::getRTM()
{
  return (&proc_control_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
