//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control.cpp
//
// Code generated for Simulink model 'proc_control'.
//
// Model version                  : 1.178
// Simulink Coder version         : 24.1 (R2024a) 19-Nov-2023
// C/C++ source code generated on : Tue Feb 11 21:47:52 2025
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control.h"
#include "proc_control_types.h"
#include "rmw/qos_profiles.h"
#include "rtwtypes.h"
#include "coder_array.h"
#include <cmath>
#include <cstring>
#include <string>
#include "proc_control_private.h"
#include <stddef.h>
#include "cmath"
#include "zero_crossing_types.h"
#include "rt_defines.h"

// Named constants for MATLAB Function: '<S176>/VariableHorizonOptimizer'
const int32_T proc_control_p{ 10 };

static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M);
uint32_T plook_u32d_binckpang(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'on'

  if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T plook_u32u16_binckan(uint16_T u, const uint16_T bp[], uint32_T maxIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'off'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32u16(u, bp, maxIndex >> 1U, maxIndex);
    if ((bpIndex < maxIndex) && (static_cast<uint16_T>(static_cast<uint32_T>
          (bp[bpIndex + 1U]) - u) <= static_cast<uint16_T>(static_cast<uint32_T>
          (u) - bp[bpIndex]))) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  return bpIndex;
}

uint32_T plook_u32d_binckpan(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

uint32_T binsearch_u32u16(uint16_T u, const uint16_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIdx;
  uint32_T bpIndex;
  uint32_T iRght;

  // Binary Search
  bpIdx = startIndex;
  bpIndex = 0U;
  iRght = maxIndex;
  while (iRght - bpIndex > 1U) {
    if (u < bp[bpIdx]) {
      iRght = bpIdx;
    } else {
      bpIndex = bpIdx;
    }

    bpIdx = (iRght + bpIndex) >> 1U;
  }

  return bpIndex;
}

int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
           0) ? -1 : 0) + numerator / denominator;
}

//
//         This function updates active task flag for each subrate.
//         The function is called at model base rate, hence the
//         generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_M->Timing.TaskCounters.TID[1])++;
  if ((proc_control_M->Timing.TaskCounters.TID[1]) > 1) {// Sample time: [0.04s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[1] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_M->Timing.TaskCounters.TID[2]) > 4) {// Sample time: [0.1s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_M->Timing.TaskCounters.TID[3]) > 49) {// Sample time: [1.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_M->Timing.TaskCounters.TID[4]) > 99) {// Sample time: [2.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_M->Timing.TaskCounters.TID[5]) > 249) {// Sample time: [5.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[5] = 0;
  }
}

// System initialize for atomic system:
void proc_control::proc_control_CurrentTime_Init(DW_CurrentTime_proc_control_T
  *localDW)
{
  // Start for MATLABSystem: '<S16>/Current Time'
  localDW->obj.matlabCodegenIsDeleted = false;
  localDW->objisempty = true;
  localDW->obj.isSetupComplete = true;
}

// Output and update for atomic system:
void proc_control::proc_control_CurrentTime(B_CurrentTime_proc_control_T *localB)
{
  // MATLABSystem: '<S16>/Current Time'
  currentROS2TimeBus(&localB->CurrentTime);
}

// Termination for atomic system:
void proc_control::proc_control_CurrentTime_Term(DW_CurrentTime_proc_control_T
  *localDW)
{
  // Terminate for MATLABSystem: '<S16>/Current Time'
  if (!localDW->obj.matlabCodegenIsDeleted) {
    localDW->obj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S16>/Current Time'
}

real_T proc_control::proc_control_xnrm2_pr(int32_T n, const real_T x[140],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S291>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_g = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_oe = std::abs(x[k - 1]);
        if (proc_control_B.absxk_oe > proc_control_B.scale_g) {
          proc_control_B.t_a = proc_control_B.scale_g / proc_control_B.absxk_oe;
          y = y * proc_control_B.t_a * proc_control_B.t_a + 1.0;
          proc_control_B.scale_g = proc_control_B.absxk_oe;
        } else {
          proc_control_B.t_a = proc_control_B.absxk_oe / proc_control_B.scale_g;
          y += proc_control_B.t_a * proc_control_B.t_a;
        }
      }

      y = proc_control_B.scale_g * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S291>/MATLAB System'
  return y;
}

real_T proc_control::proc_control_rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T b;
  real_T y;
  proc_control_B.a_g = std::abs(u0);
  b = std::abs(u1);
  if (proc_control_B.a_g < b) {
    proc_control_B.a_g /= b;
    y = std::sqrt(proc_control_B.a_g * proc_control_B.a_g + 1.0) * b;
  } else if (proc_control_B.a_g > b) {
    b /= proc_control_B.a_g;
    y = std::sqrt(b * b + 1.0) * proc_control_B.a_g;
  } else if (std::isnan(b)) {
    y = (rtNaN);
  } else {
    y = proc_control_B.a_g * 1.4142135623730951;
  }

  return y;
}

void proc_control::proc_control_qr(const real_T A[140], real_T Q[140], real_T R
  [49])
{
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T iac;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  boolean_T exitg2;
  for (i = 0; i < 7; i++) {
    // Start for MATLABSystem: '<S291>/MATLAB System'
    proc_control_B.b_tau_f[i] = 0.0;
  }

  // Start for MATLABSystem: '<S291>/MATLAB System'
  std::memcpy(&Q[0], &A[0], 140U * sizeof(real_T));
  for (i = 0; i < 7; i++) {
    proc_control_B.work_j[i] = 0.0;
  }

  // Start for MATLABSystem: '<S291>/MATLAB System'
  for (itau = 0; itau < 7; itau++) {
    ii = itau * 20 + itau;
    ix0 = ii + 2;
    proc_control_B.b_atmp_a = Q[ii];
    proc_control_B.b_tau_f[itau] = 0.0;
    proc_control_B.beta1_jl = proc_control_xnrm2_pr(19 - itau, Q, ii + 2);
    if (proc_control_B.beta1_jl != 0.0) {
      proc_control_B.c_A_a = Q[ii];
      proc_control_B.beta1_jl = proc_control_rt_hypotd_snf(proc_control_B.c_A_a,
        proc_control_B.beta1_jl);
      if (proc_control_B.c_A_a >= 0.0) {
        proc_control_B.beta1_jl = -proc_control_B.beta1_jl;
      }

      if (std::abs(proc_control_B.beta1_jl) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          for (lastv = ix0; lastv <= i + 20; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_jl *= 9.9792015476736E+291;
          proc_control_B.b_atmp_a *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_jl) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.beta1_jl = proc_control_rt_hypotd_snf
          (proc_control_B.b_atmp_a, proc_control_xnrm2_pr(19 - itau, Q, ii + 2));
        if (proc_control_B.b_atmp_a >= 0.0) {
          proc_control_B.beta1_jl = -proc_control_B.beta1_jl;
        }

        proc_control_B.b_tau_f[itau] = (proc_control_B.beta1_jl -
          proc_control_B.b_atmp_a) / proc_control_B.beta1_jl;
        proc_control_B.b_atmp_a = 1.0 / (proc_control_B.b_atmp_a -
          proc_control_B.beta1_jl);
        for (lastv = ix0; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_a;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          proc_control_B.beta1_jl *= 1.0020841800044864E-292;
        }

        proc_control_B.b_atmp_a = proc_control_B.beta1_jl;
      } else {
        proc_control_B.b_tau_f[itau] = (proc_control_B.beta1_jl -
          proc_control_B.c_A_a) / proc_control_B.beta1_jl;
        proc_control_B.b_atmp_a = 1.0 / (proc_control_B.c_A_a -
          proc_control_B.beta1_jl);
        i = ii - itau;
        for (lastv = ix0; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_a;
        }

        proc_control_B.b_atmp_a = proc_control_B.beta1_jl;
      }
    }

    Q[ii] = proc_control_B.b_atmp_a;
    if (itau + 1 < 7) {
      Q[ii] = 1.0;
      ix0 = ii + 21;
      if (proc_control_B.b_tau_f[itau] != 0.0) {
        lastv = 20 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 19] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 5 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          ia = i + 21;
          do {
            exitg1 = 0;
            if (ia <= (i + lastv) + 20) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_j[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 21;
          for (iac = ix0; iac <= i; iac += 20) {
            proc_control_B.beta1_jl = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_jl += Q[(ii + ia) - iac] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 21, 20);
            proc_control_B.work_j[ia] += proc_control_B.beta1_jl;
          }
        }

        if (!(-proc_control_B.b_tau_f[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_jl = proc_control_B.work_j[ia];
            if (proc_control_B.beta1_jl != 0.0) {
              proc_control_B.beta1_jl *= -proc_control_B.b_tau_f[itau];
              i = jA + 21;
              ix0 = (lastv + jA) + 20;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 21] *
                  proc_control_B.beta1_jl;
              }
            }

            jA += 20;
          }
        }
      }

      Q[ii] = proc_control_B.b_atmp_a;
    }
  }

  for (ii = 0; ii < 7; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S291>/MATLAB System'
      R[itau + 7 * ii] = Q[20 * ii + itau];
    }

    for (itau = ii + 2; itau < 8; itau++) {
      R[(itau + 7 * ii) - 1] = 0.0;
    }

    proc_control_B.work_j[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S291>/MATLAB System'
  for (itau = 6; itau >= 0; itau--) {
    ii = (itau * 20 + itau) + 20;
    if (itau + 1 < 7) {
      Q[ii - 20] = 1.0;
      ix0 = ii + 1;
      if (proc_control_B.b_tau_f[itau] != 0.0) {
        lastv = 20 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 5 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          ia = i + 1;
          do {
            exitg1 = 0;
            if (ia <= i + lastv) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_j[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 1;
          for (iac = ix0; iac <= i; iac += 20) {
            proc_control_B.beta1_jl = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_jl += Q[((ii + ia) - iac) - 20] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 1, 20);
            proc_control_B.work_j[ia] += proc_control_B.beta1_jl;
          }
        }

        if (!(-proc_control_B.b_tau_f[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_jl = proc_control_B.work_j[ia];
            if (proc_control_B.beta1_jl != 0.0) {
              proc_control_B.beta1_jl *= -proc_control_B.b_tau_f[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 21] *
                  proc_control_B.beta1_jl;
              }
            }

            jA += 20;
          }
        }
      }
    }

    i = ii - itau;
    for (lastv = ii - 18; lastv <= i; lastv++) {
      Q[lastv - 1] *= -proc_control_B.b_tau_f[itau];
    }

    Q[ii - 20] = 1.0 - proc_control_B.b_tau_f[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 21] = 0.0;
    }
  }
}

void proc_control::proc_control_trisolve_p(const real_T A[49], real_T B[91])
{
  // Start for MATLABSystem: '<S291>/MATLAB System'
  for (int32_T b_j{0}; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 7 * b_j - 1;
    for (int32_T b_k{0}; b_k < 7; b_k++) {
      real_T B_0;
      int32_T B_tmp;
      int32_T k;
      int32_T kAcol;
      k = b_k + 1;
      kAcol = b_k * 7 - 1;
      B_tmp = (b_k + jBcol) + 1;
      B_0 = B[B_tmp];
      if (B_0 != 0.0) {
        B[B_tmp] = B_0 / A[(b_k + kAcol) + 1];
        for (int32_T i{k + 1}; i < 8; i++) {
          int32_T tmp;
          tmp = i + jBcol;
          B[tmp] -= A[i + kAcol] * B[B_tmp];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S291>/MATLAB System'
}

void proc_control::proc_control_trisolve_pr(const real_T A[49], real_T B[91])
{
  // Start for MATLABSystem: '<S291>/MATLAB System'
  for (int32_T b_j{0}; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 7 * b_j;
    for (int32_T k{6}; k >= 0; k--) {
      real_T tmp;
      int32_T kAcol;
      int32_T tmp_0;
      kAcol = 7 * k;
      tmp_0 = k + jBcol;
      tmp = B[tmp_0];
      if (tmp != 0.0) {
        int32_T b;
        B[tmp_0] = tmp / A[k + kAcol];
        b = k - 1;
        for (int32_T b_i{0}; b_i <= b; b_i++) {
          int32_T tmp_1;
          tmp_1 = b_i + jBcol;
          B[tmp_1] -= A[b_i + kAcol] * B[tmp_0];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S291>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr3(int32_T n, const real_T x[260],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S291>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_aj = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_e = std::abs(x[k - 1]);
        if (proc_control_B.absxk_e > proc_control_B.scale_aj) {
          proc_control_B.t_o = proc_control_B.scale_aj / proc_control_B.absxk_e;
          y = y * proc_control_B.t_o * proc_control_B.t_o + 1.0;
          proc_control_B.scale_aj = proc_control_B.absxk_e;
        } else {
          proc_control_B.t_o = proc_control_B.absxk_e / proc_control_B.scale_aj;
          y += proc_control_B.t_o * proc_control_B.t_o;
        }
      }

      y = proc_control_B.scale_aj * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S291>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_p(const real_T A[260], real_T Q[260], real_T
  R[169])
{
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T iac;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S291>/MATLAB System'
  std::memset(&proc_control_B.b_tau_p[0], 0, 13U * sizeof(real_T));
  std::memcpy(&Q[0], &A[0], 260U * sizeof(real_T));
  std::memset(&proc_control_B.work_dk[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S291>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = itau * 20 + itau;
    ix0 = ii + 2;
    proc_control_B.b_atmp_g = Q[ii];
    proc_control_B.b_tau_p[itau] = 0.0;
    proc_control_B.beta1_d = proc_control_xnrm2_pr3(19 - itau, Q, ii + 2);
    if (proc_control_B.beta1_d != 0.0) {
      proc_control_B.c_A_o = Q[ii];
      proc_control_B.beta1_d = proc_control_rt_hypotd_snf(proc_control_B.c_A_o,
        proc_control_B.beta1_d);
      if (proc_control_B.c_A_o >= 0.0) {
        proc_control_B.beta1_d = -proc_control_B.beta1_d;
      }

      if (std::abs(proc_control_B.beta1_d) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          for (lastv = ix0; lastv <= i + 20; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_d *= 9.9792015476736E+291;
          proc_control_B.b_atmp_g *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_d) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.beta1_d = proc_control_rt_hypotd_snf
          (proc_control_B.b_atmp_g, proc_control_xnrm2_pr3(19 - itau, Q, ii + 2));
        if (proc_control_B.b_atmp_g >= 0.0) {
          proc_control_B.beta1_d = -proc_control_B.beta1_d;
        }

        proc_control_B.b_tau_p[itau] = (proc_control_B.beta1_d -
          proc_control_B.b_atmp_g) / proc_control_B.beta1_d;
        proc_control_B.b_atmp_g = 1.0 / (proc_control_B.b_atmp_g -
          proc_control_B.beta1_d);
        for (lastv = ix0; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_g;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          proc_control_B.beta1_d *= 1.0020841800044864E-292;
        }

        proc_control_B.b_atmp_g = proc_control_B.beta1_d;
      } else {
        proc_control_B.b_tau_p[itau] = (proc_control_B.beta1_d -
          proc_control_B.c_A_o) / proc_control_B.beta1_d;
        proc_control_B.b_atmp_g = 1.0 / (proc_control_B.c_A_o -
          proc_control_B.beta1_d);
        i = ii - itau;
        for (lastv = ix0; lastv <= i + 20; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_g;
        }

        proc_control_B.b_atmp_g = proc_control_B.beta1_d;
      }
    }

    Q[ii] = proc_control_B.b_atmp_g;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 21;
      if (proc_control_B.b_tau_p[itau] != 0.0) {
        lastv = 20 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 19] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          ia = i + 21;
          do {
            exitg1 = 0;
            if (ia <= (i + lastv) + 20) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_dk[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 21;
          for (iac = ix0; iac <= i; iac += 20) {
            proc_control_B.beta1_d = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_d += Q[(ii + ia) - iac] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 21, 20);
            proc_control_B.work_dk[ia] += proc_control_B.beta1_d;
          }
        }

        if (!(-proc_control_B.b_tau_p[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_d = proc_control_B.work_dk[ia];
            if (proc_control_B.beta1_d != 0.0) {
              proc_control_B.beta1_d *= -proc_control_B.b_tau_p[itau];
              i = jA + 21;
              ix0 = (lastv + jA) + 20;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 21] * proc_control_B.beta1_d;
              }
            }

            jA += 20;
          }
        }
      }

      Q[ii] = proc_control_B.b_atmp_g;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S291>/MATLAB System'
      R[itau + 13 * ii] = Q[20 * ii + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    proc_control_B.work_dk[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S291>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = (itau * 20 + itau) + 20;
    if (itau + 1 < 13) {
      Q[ii - 20] = 1.0;
      ix0 = ii + 1;
      if (proc_control_B.b_tau_p[itau] != 0.0) {
        lastv = 20 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 20 + ii;
          ia = i + 1;
          do {
            exitg1 = 0;
            if (ia <= i + lastv) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_dk[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (20 * knt + ii) + 1;
          for (iac = ix0; iac <= i; iac += 20) {
            proc_control_B.beta1_d = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_d += Q[((ii + ia) - iac) - 20] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 1, 20);
            proc_control_B.work_dk[ia] += proc_control_B.beta1_d;
          }
        }

        if (!(-proc_control_B.b_tau_p[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_d = proc_control_B.work_dk[ia];
            if (proc_control_B.beta1_d != 0.0) {
              proc_control_B.beta1_d *= -proc_control_B.b_tau_p[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 21] * proc_control_B.beta1_d;
              }
            }

            jA += 20;
          }
        }
      }
    }

    i = ii - itau;
    for (lastv = ii - 18; lastv <= i; lastv++) {
      Q[lastv - 1] *= -proc_control_B.b_tau_p[itau];
    }

    Q[ii - 20] = 1.0 - proc_control_B.b_tau_p[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 21] = 0.0;
    }
  }
}

real_T proc_control::proc_control_xnrm2_pr35(int32_T n, const real_T x[48],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S292>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_f = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_jn = std::abs(x[k - 1]);
        if (proc_control_B.absxk_jn > proc_control_B.scale_f) {
          proc_control_B.t_i = proc_control_B.scale_f / proc_control_B.absxk_jn;
          y = y * proc_control_B.t_i * proc_control_B.t_i + 1.0;
          proc_control_B.scale_f = proc_control_B.absxk_jn;
        } else {
          proc_control_B.t_i = proc_control_B.absxk_jn / proc_control_B.scale_f;
          y += proc_control_B.t_i * proc_control_B.t_i;
        }
      }

      y = proc_control_B.scale_f * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S292>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr(const real_T A[48], real_T Q[48], real_T
  R[9])
{
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T iac;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S292>/MATLAB System'
  proc_control_B.b_tau_fn[0] = 0.0;
  proc_control_B.b_tau_fn[1] = 0.0;
  proc_control_B.b_tau_fn[2] = 0.0;
  std::memcpy(&Q[0], &A[0], 48U * sizeof(real_T));
  proc_control_B.work_iv[0] = 0.0;
  proc_control_B.work_iv[1] = 0.0;
  proc_control_B.work_iv[2] = 0.0;

  // Start for MATLABSystem: '<S292>/MATLAB System'
  for (itau = 0; itau < 3; itau++) {
    ii = (itau << 4) + itau;
    ix0 = ii + 2;
    proc_control_B.b_atmp_i = Q[ii];
    proc_control_B.b_tau_fn[itau] = 0.0;
    proc_control_B.beta1_k1 = proc_control_xnrm2_pr35(15 - itau, Q, ii + 2);
    if (proc_control_B.beta1_k1 != 0.0) {
      proc_control_B.c_A_c = Q[ii];
      proc_control_B.beta1_k1 = proc_control_rt_hypotd_snf(proc_control_B.c_A_c,
        proc_control_B.beta1_k1);
      if (proc_control_B.c_A_c >= 0.0) {
        proc_control_B.beta1_k1 = -proc_control_B.beta1_k1;
      }

      if (std::abs(proc_control_B.beta1_k1) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          for (lastv = ix0; lastv <= i + 16; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_k1 *= 9.9792015476736E+291;
          proc_control_B.b_atmp_i *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_k1) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.beta1_k1 = proc_control_rt_hypotd_snf
          (proc_control_B.b_atmp_i, proc_control_xnrm2_pr35(15 - itau, Q, ii + 2));
        if (proc_control_B.b_atmp_i >= 0.0) {
          proc_control_B.beta1_k1 = -proc_control_B.beta1_k1;
        }

        proc_control_B.b_tau_fn[itau] = (proc_control_B.beta1_k1 -
          proc_control_B.b_atmp_i) / proc_control_B.beta1_k1;
        proc_control_B.b_atmp_i = 1.0 / (proc_control_B.b_atmp_i -
          proc_control_B.beta1_k1);
        for (lastv = ix0; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_i;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          proc_control_B.beta1_k1 *= 1.0020841800044864E-292;
        }

        proc_control_B.b_atmp_i = proc_control_B.beta1_k1;
      } else {
        proc_control_B.b_tau_fn[itau] = (proc_control_B.beta1_k1 -
          proc_control_B.c_A_c) / proc_control_B.beta1_k1;
        proc_control_B.b_atmp_i = 1.0 / (proc_control_B.c_A_c -
          proc_control_B.beta1_k1);
        i = ii - itau;
        for (lastv = ix0; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_i;
        }

        proc_control_B.b_atmp_i = proc_control_B.beta1_k1;
      }
    }

    Q[ii] = proc_control_B.b_atmp_i;
    if (itau + 1 < 3) {
      Q[ii] = 1.0;
      ix0 = ii + 17;
      if (proc_control_B.b_tau_fn[itau] != 0.0) {
        lastv = 16 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 15] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 1 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          ia = i + 17;
          do {
            exitg1 = 0;
            if (ia <= (i + lastv) + 16) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_iv[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 17;
          for (iac = ix0; iac <= i; iac += 16) {
            proc_control_B.beta1_k1 = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_k1 += Q[(ii + ia) - iac] * Q[ia - 1];
            }

            ia = ((iac - ii) - 17) >> 4;
            proc_control_B.work_iv[ia] += proc_control_B.beta1_k1;
          }
        }

        if (!(-proc_control_B.b_tau_fn[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_k1 = proc_control_B.work_iv[ia];
            if (proc_control_B.beta1_k1 != 0.0) {
              proc_control_B.beta1_k1 *= -proc_control_B.b_tau_fn[itau];
              i = jA + 17;
              ix0 = (lastv + jA) + 16;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 17] *
                  proc_control_B.beta1_k1;
              }
            }

            jA += 16;
          }
        }
      }

      Q[ii] = proc_control_B.b_atmp_i;
    }
  }

  for (ii = 0; ii < 3; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S292>/MATLAB System'
      R[itau + 3 * ii] = Q[(ii << 4) + itau];
    }

    for (itau = ii + 2; itau < 4; itau++) {
      R[(itau + 3 * ii) - 1] = 0.0;
    }

    proc_control_B.work_iv[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S292>/MATLAB System'
  for (itau = 2; itau >= 0; itau--) {
    ii = ((itau << 4) + itau) + 16;
    if (itau + 1 < 3) {
      Q[ii - 16] = 1.0;
      ix0 = ii + 1;
      if (proc_control_B.b_tau_fn[itau] != 0.0) {
        lastv = 16 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 1 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          ia = i + 1;
          do {
            exitg1 = 0;
            if (ia <= i + lastv) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_iv[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 1;
          for (iac = ix0; iac <= i; iac += 16) {
            proc_control_B.beta1_k1 = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_k1 += Q[((ii + ia) - iac) - 16] * Q[ia - 1];
            }

            ia = ((iac - ii) - 1) >> 4;
            proc_control_B.work_iv[ia] += proc_control_B.beta1_k1;
          }
        }

        if (!(-proc_control_B.b_tau_fn[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_k1 = proc_control_B.work_iv[ia];
            if (proc_control_B.beta1_k1 != 0.0) {
              proc_control_B.beta1_k1 *= -proc_control_B.b_tau_fn[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 17] *
                  proc_control_B.beta1_k1;
              }
            }

            jA += 16;
          }
        }
      }
    }

    i = ii - itau;
    for (lastv = ii - 14; lastv <= i; lastv++) {
      Q[lastv - 1] *= -proc_control_B.b_tau_fn[itau];
    }

    Q[ii - 16] = 1.0 - proc_control_B.b_tau_fn[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 17] = 0.0;
    }
  }
}

void proc_control::proc_control_trisolve_pr3(const real_T A[9], real_T B[39])
{
  // Start for MATLABSystem: '<S292>/MATLAB System'
  for (int32_T b_j{0}; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 3 * b_j - 1;
    for (int32_T b_k{0}; b_k < 3; b_k++) {
      real_T B_0;
      int32_T B_tmp;
      int32_T k;
      int32_T kAcol;
      k = b_k + 1;
      kAcol = b_k * 3 - 1;
      B_tmp = (b_k + jBcol) + 1;
      B_0 = B[B_tmp];
      if (B_0 != 0.0) {
        B[B_tmp] = B_0 / A[(b_k + kAcol) + 1];
        for (int32_T i{k + 1}; i < 4; i++) {
          int32_T tmp;
          tmp = i + jBcol;
          B[tmp] -= A[i + kAcol] * B[B_tmp];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S292>/MATLAB System'
}

void proc_control::proc_control_trisolve_pr35(const real_T A[9], real_T B[39])
{
  // Start for MATLABSystem: '<S292>/MATLAB System'
  for (int32_T b_j{0}; b_j < 13; b_j++) {
    int32_T jBcol;
    jBcol = 3 * b_j;
    for (int32_T k{2}; k >= 0; k--) {
      real_T tmp;
      int32_T kAcol;
      int32_T tmp_0;
      kAcol = 3 * k;
      tmp_0 = k + jBcol;
      tmp = B[tmp_0];
      if (tmp != 0.0) {
        int32_T b;
        B[tmp_0] = tmp / A[k + kAcol];
        b = k - 1;
        for (int32_T b_i{0}; b_i <= b; b_i++) {
          int32_T tmp_1;
          tmp_1 = b_i + jBcol;
          B[tmp_1] -= A[b_i + kAcol] * B[tmp_0];
        }
      }
    }
  }

  // End of Start for MATLABSystem: '<S292>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr351(int32_T n, const real_T x[208],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S292>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_lt = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_je = std::abs(x[k - 1]);
        if (proc_control_B.absxk_je > proc_control_B.scale_lt) {
          proc_control_B.t_n3 = proc_control_B.scale_lt /
            proc_control_B.absxk_je;
          y = y * proc_control_B.t_n3 * proc_control_B.t_n3 + 1.0;
          proc_control_B.scale_lt = proc_control_B.absxk_je;
        } else {
          proc_control_B.t_n3 = proc_control_B.absxk_je /
            proc_control_B.scale_lt;
          y += proc_control_B.t_n3 * proc_control_B.t_n3;
        }
      }

      y = proc_control_B.scale_lt * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S292>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr3(const real_T A[208], real_T Q[208],
  real_T R[169])
{
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T iac;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S292>/MATLAB System'
  std::memset(&proc_control_B.b_tau_c[0], 0, 13U * sizeof(real_T));
  std::memcpy(&Q[0], &A[0], 208U * sizeof(real_T));
  std::memset(&proc_control_B.work_n[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S292>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = (itau << 4) + itau;
    ix0 = ii + 2;
    proc_control_B.b_atmp_j = Q[ii];
    proc_control_B.b_tau_c[itau] = 0.0;
    proc_control_B.beta1_k = proc_control_xnrm2_pr351(15 - itau, Q, ii + 2);
    if (proc_control_B.beta1_k != 0.0) {
      proc_control_B.c_A_b = Q[ii];
      proc_control_B.beta1_k = proc_control_rt_hypotd_snf(proc_control_B.c_A_b,
        proc_control_B.beta1_k);
      if (proc_control_B.c_A_b >= 0.0) {
        proc_control_B.beta1_k = -proc_control_B.beta1_k;
      }

      if (std::abs(proc_control_B.beta1_k) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          for (lastv = ix0; lastv <= i + 16; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_k *= 9.9792015476736E+291;
          proc_control_B.b_atmp_j *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_k) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.beta1_k = proc_control_rt_hypotd_snf
          (proc_control_B.b_atmp_j, proc_control_xnrm2_pr351(15 - itau, Q, ii +
            2));
        if (proc_control_B.b_atmp_j >= 0.0) {
          proc_control_B.beta1_k = -proc_control_B.beta1_k;
        }

        proc_control_B.b_tau_c[itau] = (proc_control_B.beta1_k -
          proc_control_B.b_atmp_j) / proc_control_B.beta1_k;
        proc_control_B.b_atmp_j = 1.0 / (proc_control_B.b_atmp_j -
          proc_control_B.beta1_k);
        for (lastv = ix0; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_j;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          proc_control_B.beta1_k *= 1.0020841800044864E-292;
        }

        proc_control_B.b_atmp_j = proc_control_B.beta1_k;
      } else {
        proc_control_B.b_tau_c[itau] = (proc_control_B.beta1_k -
          proc_control_B.c_A_b) / proc_control_B.beta1_k;
        proc_control_B.b_atmp_j = 1.0 / (proc_control_B.c_A_b -
          proc_control_B.beta1_k);
        i = ii - itau;
        for (lastv = ix0; lastv <= i + 16; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_j;
        }

        proc_control_B.b_atmp_j = proc_control_B.beta1_k;
      }
    }

    Q[ii] = proc_control_B.b_atmp_j;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 17;
      if (proc_control_B.b_tau_c[itau] != 0.0) {
        lastv = 16 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 15] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          ia = i + 17;
          do {
            exitg1 = 0;
            if (ia <= (i + lastv) + 16) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_n[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 17;
          for (iac = ix0; iac <= i; iac += 16) {
            proc_control_B.beta1_k = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_k += Q[(ii + ia) - iac] * Q[ia - 1];
            }

            ia = ((iac - ii) - 17) >> 4;
            proc_control_B.work_n[ia] += proc_control_B.beta1_k;
          }
        }

        if (!(-proc_control_B.b_tau_c[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_k = proc_control_B.work_n[ia];
            if (proc_control_B.beta1_k != 0.0) {
              proc_control_B.beta1_k *= -proc_control_B.b_tau_c[itau];
              i = jA + 17;
              ix0 = (lastv + jA) + 16;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 17] * proc_control_B.beta1_k;
              }
            }

            jA += 16;
          }
        }
      }

      Q[ii] = proc_control_B.b_atmp_j;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S292>/MATLAB System'
      R[itau + 13 * ii] = Q[(ii << 4) + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    proc_control_B.work_n[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S292>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = ((itau << 4) + itau) + 16;
    if (itau + 1 < 13) {
      Q[ii - 16] = 1.0;
      ix0 = ii + 1;
      if (proc_control_B.b_tau_c[itau] != 0.0) {
        lastv = 16 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = (knt << 4) + ii;
          ia = i + 1;
          do {
            exitg1 = 0;
            if (ia <= i + lastv) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_n[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = ((knt << 4) + ii) + 1;
          for (iac = ix0; iac <= i; iac += 16) {
            proc_control_B.beta1_k = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_k += Q[((ii + ia) - iac) - 16] * Q[ia - 1];
            }

            ia = ((iac - ii) - 1) >> 4;
            proc_control_B.work_n[ia] += proc_control_B.beta1_k;
          }
        }

        if (!(-proc_control_B.b_tau_c[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_k = proc_control_B.work_n[ia];
            if (proc_control_B.beta1_k != 0.0) {
              proc_control_B.beta1_k *= -proc_control_B.b_tau_c[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 17] * proc_control_B.beta1_k;
              }
            }

            jA += 16;
          }
        }
      }
    }

    i = ii - itau;
    for (lastv = ii - 14; lastv <= i; lastv++) {
      Q[lastv - 1] *= -proc_control_B.b_tau_c[itau];
    }

    Q[ii - 16] = 1.0 - proc_control_B.b_tau_c[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 17] = 0.0;
    }
  }
}

real_T proc_control::proc_control_xnrm2_pr351e(int32_T n, const real_T x[14],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S293>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_c = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_c) {
          real_T t;
          t = proc_control_B.scale_c / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_c = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_c;
          y += t * t;
        }
      }

      y = proc_control_B.scale_c * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S293>/MATLAB System'
  return y;
}

void proc_control::EKFCorrectorAdditive_getMeasure(real_T Rs, const real_T x[13],
  const real_T S[169], real_T *zEstimated, real_T Pxy[13], real_T *Sy, real_T
  dHdx[13], real_T *Rsqrt)
{
  int32_T b_j;
  int32_T i;
  int32_T i_0;
  int32_T lastv;
  int32_T tmp;

  // Start for MATLABSystem: '<S293>/MATLAB System'
  // EKFNAVDEPTH Summary of this function goes here
  //    Detailed explanation goes here
  *Rsqrt = Rs;

  // EKFNAVDEPTH Summary of this function goes here
  //    Detailed explanation goes here
  *zEstimated = x[2];
  for (b_j = 0; b_j < 13; b_j++) {
    proc_control_B.epsilon = std::fmax(1.4901161193847656E-8,
      1.4901161193847656E-8 * std::abs(x[b_j]));

    // EKFNAVDEPTH Summary of this function goes here
    //    Detailed explanation goes here
    lastv = 0;
    for (i = 0; i < 13; i++) {
      proc_control_B.imvec_b[i] = x[i];
      proc_control_B.beta1_a = 0.0;
      tmp = 0;
      for (i_0 = 0; i_0 < 13; i_0++) {
        proc_control_B.beta1_a += S[tmp + b_j] * S[tmp + i];
        tmp += 13;
      }

      proc_control_B.S[lastv + b_j] = proc_control_B.beta1_a;
      lastv += 13;
    }

    proc_control_B.imvec_b[b_j] = x[b_j] + proc_control_B.epsilon;
    dHdx[b_j] = (proc_control_B.imvec_b[2] - x[2]) / proc_control_B.epsilon;
  }

  for (b_j = 0; b_j < 13; b_j++) {
    // Start for MATLABSystem: '<S293>/MATLAB System'
    i = b_j * 13 - 1;
    proc_control_B.epsilon = 0.0;
    proc_control_B.beta1_a = 0.0;

    // Start for MATLABSystem: '<S293>/MATLAB System'
    for (lastv = 0; lastv < 13; lastv++) {
      proc_control_B.dHdx = dHdx[lastv];
      proc_control_B.beta1_a += proc_control_B.S[13 * lastv + b_j] *
        proc_control_B.dHdx;
      proc_control_B.epsilon += S[(i + lastv) + 1] * proc_control_B.dHdx;
    }

    Pxy[b_j] = proc_control_B.beta1_a;
    proc_control_B.M[b_j] = proc_control_B.epsilon;
  }

  // Start for MATLABSystem: '<S293>/MATLAB System'
  proc_control_B.M[13] = Rs;
  for (b_j = 0; b_j < 1; b_j++) {
    proc_control_B.epsilon = proc_control_B.M[0];
    proc_control_B.beta1_a = proc_control_xnrm2_pr351e(13, proc_control_B.M, 2);
    if (proc_control_B.beta1_a != 0.0) {
      proc_control_B.beta1_a = proc_control_rt_hypotd_snf(proc_control_B.M[0],
        proc_control_B.beta1_a);
      if (proc_control_B.M[0] >= 0.0) {
        proc_control_B.beta1_a = -proc_control_B.beta1_a;
      }

      if (std::abs(proc_control_B.beta1_a) < 1.0020841800044864E-292) {
        i = -1;
        do {
          i++;
          for (lastv = 2; lastv < 15; lastv++) {
            proc_control_B.M[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_a *= 9.9792015476736E+291;
          proc_control_B.epsilon *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_a) < 1.0020841800044864E-292) &&
                 (i + 1 < 20));

        proc_control_B.beta1_a = proc_control_rt_hypotd_snf
          (proc_control_B.epsilon, proc_control_xnrm2_pr351e(13,
            proc_control_B.M, 2));
        if (proc_control_B.epsilon >= 0.0) {
          proc_control_B.beta1_a = -proc_control_B.beta1_a;
        }

        proc_control_B.epsilon = 1.0 / (proc_control_B.epsilon -
          proc_control_B.beta1_a);
        for (lastv = 2; lastv < 15; lastv++) {
          proc_control_B.M[lastv - 1] *= proc_control_B.epsilon;
        }

        for (lastv = 0; lastv <= i; lastv++) {
          proc_control_B.beta1_a *= 1.0020841800044864E-292;
        }

        proc_control_B.epsilon = proc_control_B.beta1_a;
      } else {
        proc_control_B.epsilon = 1.0 / (proc_control_B.M[0] -
          proc_control_B.beta1_a);
        for (lastv = 2; lastv < 15; lastv++) {
          proc_control_B.M[lastv - 1] *= proc_control_B.epsilon;
        }

        proc_control_B.epsilon = proc_control_B.beta1_a;
      }
    }

    proc_control_B.M[0] = proc_control_B.epsilon;
  }

  *Sy = proc_control_B.M[0];
}

void proc_control::proc_control_trisolve_pr351(real_T A, real_T B[13])
{
  // Start for MATLABSystem: '<S293>/MATLAB System'
  for (int32_T b_j{0}; b_j < 13; b_j++) {
    real_T B_0;
    B_0 = B[b_j];
    if (B_0 != 0.0) {
      B[b_j] = B_0 / A;
    }
  }

  // End of Start for MATLABSystem: '<S293>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr351ew(int32_T n, const real_T x[182],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S293>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_n = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_jc = std::abs(x[k - 1]);
        if (proc_control_B.absxk_jc > proc_control_B.scale_n) {
          proc_control_B.t_dx = proc_control_B.scale_n / proc_control_B.absxk_jc;
          y = y * proc_control_B.t_dx * proc_control_B.t_dx + 1.0;
          proc_control_B.scale_n = proc_control_B.absxk_jc;
        } else {
          proc_control_B.t_dx = proc_control_B.absxk_jc / proc_control_B.scale_n;
          y += proc_control_B.t_dx * proc_control_B.t_dx;
        }
      }

      y = proc_control_B.scale_n * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S293>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr35(const real_T A[182], real_T Q[182],
  real_T R[169])
{
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T iac;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S293>/MATLAB System'
  std::memset(&proc_control_B.b_tau_n[0], 0, 13U * sizeof(real_T));
  std::memcpy(&Q[0], &A[0], 182U * sizeof(real_T));
  std::memset(&proc_control_B.work_l[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S293>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = itau * 14 + itau;
    ix0 = ii + 2;
    proc_control_B.b_atmp_m = Q[ii];
    proc_control_B.b_tau_n[itau] = 0.0;
    proc_control_B.beta1_j = proc_control_xnrm2_pr351ew(13 - itau, Q, ii + 2);
    if (proc_control_B.beta1_j != 0.0) {
      proc_control_B.c_A_h = Q[ii];
      proc_control_B.beta1_j = proc_control_rt_hypotd_snf(proc_control_B.c_A_h,
        proc_control_B.beta1_j);
      if (proc_control_B.c_A_h >= 0.0) {
        proc_control_B.beta1_j = -proc_control_B.beta1_j;
      }

      if (std::abs(proc_control_B.beta1_j) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          for (lastv = ix0; lastv <= i + 14; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_j *= 9.9792015476736E+291;
          proc_control_B.b_atmp_m *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_j) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.beta1_j = proc_control_rt_hypotd_snf
          (proc_control_B.b_atmp_m, proc_control_xnrm2_pr351ew(13 - itau, Q, ii
            + 2));
        if (proc_control_B.b_atmp_m >= 0.0) {
          proc_control_B.beta1_j = -proc_control_B.beta1_j;
        }

        proc_control_B.b_tau_n[itau] = (proc_control_B.beta1_j -
          proc_control_B.b_atmp_m) / proc_control_B.beta1_j;
        proc_control_B.b_atmp_m = 1.0 / (proc_control_B.b_atmp_m -
          proc_control_B.beta1_j);
        for (lastv = ix0; lastv <= i + 14; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_m;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          proc_control_B.beta1_j *= 1.0020841800044864E-292;
        }

        proc_control_B.b_atmp_m = proc_control_B.beta1_j;
      } else {
        proc_control_B.b_tau_n[itau] = (proc_control_B.beta1_j -
          proc_control_B.c_A_h) / proc_control_B.beta1_j;
        proc_control_B.b_atmp_m = 1.0 / (proc_control_B.c_A_h -
          proc_control_B.beta1_j);
        i = ii - itau;
        for (lastv = ix0; lastv <= i + 14; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_m;
        }

        proc_control_B.b_atmp_m = proc_control_B.beta1_j;
      }
    }

    Q[ii] = proc_control_B.b_atmp_m;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 15;
      if (proc_control_B.b_tau_n[itau] != 0.0) {
        lastv = 14 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 13] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 14 + ii;
          ia = i + 15;
          do {
            exitg1 = 0;
            if (ia <= (i + lastv) + 14) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_l[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (14 * knt + ii) + 15;
          for (iac = ix0; iac <= i; iac += 14) {
            proc_control_B.beta1_j = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_j += Q[(ii + ia) - iac] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 15, 14);
            proc_control_B.work_l[ia] += proc_control_B.beta1_j;
          }
        }

        if (!(-proc_control_B.b_tau_n[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_j = proc_control_B.work_l[ia];
            if (proc_control_B.beta1_j != 0.0) {
              proc_control_B.beta1_j *= -proc_control_B.b_tau_n[itau];
              i = jA + 15;
              ix0 = (lastv + jA) + 14;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 15] * proc_control_B.beta1_j;
              }
            }

            jA += 14;
          }
        }
      }

      Q[ii] = proc_control_B.b_atmp_m;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S293>/MATLAB System'
      R[itau + 13 * ii] = Q[14 * ii + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    proc_control_B.work_l[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S293>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = (itau * 14 + itau) + 14;
    if (itau + 1 < 13) {
      Q[ii - 14] = 1.0;
      ix0 = ii + 1;
      if (proc_control_B.b_tau_n[itau] != 0.0) {
        lastv = 14 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 14 + ii;
          ia = i + 1;
          do {
            exitg1 = 0;
            if (ia <= i + lastv) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_l[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (14 * knt + ii) + 1;
          for (iac = ix0; iac <= i; iac += 14) {
            proc_control_B.beta1_j = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_j += Q[((ii + ia) - iac) - 14] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 1, 14);
            proc_control_B.work_l[ia] += proc_control_B.beta1_j;
          }
        }

        if (!(-proc_control_B.b_tau_n[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_j = proc_control_B.work_l[ia];
            if (proc_control_B.beta1_j != 0.0) {
              proc_control_B.beta1_j *= -proc_control_B.b_tau_n[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 15] * proc_control_B.beta1_j;
              }
            }

            jA += 14;
          }
        }
      }
    }

    i = ii - itau;
    for (lastv = ii - 12; lastv <= i; lastv++) {
      Q[lastv - 1] *= -proc_control_B.b_tau_n[itau];
    }

    Q[ii - 14] = 1.0 - proc_control_B.b_tau_n[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 15] = 0.0;
    }
  }
}

void proc_control::proc_control_mldivide_pr35(const real_T A[36], real_T B[48])
{
  int32_T c;
  int32_T ijA;
  int32_T iy;
  int32_T jA;
  int32_T jj;
  int32_T jp1j;
  int32_T kAcol;

  // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
  //   MATLABSystem: '<S295>/MATLAB System'

  std::memcpy(&proc_control_B.c_A_p[0], &A[0], 36U * sizeof(real_T));
  for (jj = 0; jj < 6; jj++) {
    proc_control_B.b_ipiv_m[jj] = static_cast<int8_T>(jj + 1);
  }

  for (int32_T b_j{0}; b_j < 5; b_j++) {
    // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
    //   MATLABSystem: '<S295>/MATLAB System'

    c = b_j * 7 + 2;
    jj = b_j * 7;
    kAcol = 6 - b_j;
    iy = 1;
    proc_control_B.smax_b1 = std::abs(proc_control_B.c_A_p[jj]);
    for (jA = 2; jA <= kAcol; jA++) {
      proc_control_B.s_e = std::abs(proc_control_B.c_A_p[(c + jA) - 3]);
      if (proc_control_B.s_e > proc_control_B.smax_b1) {
        iy = jA;
        proc_control_B.smax_b1 = proc_control_B.s_e;
      }
    }

    if (proc_control_B.c_A_p[(c + iy) - 3] != 0.0) {
      if (iy - 1 != 0) {
        iy += b_j;
        proc_control_B.b_ipiv_m[b_j] = static_cast<int8_T>(iy);
        for (jA = 0; jA < 6; jA++) {
          kAcol = jA * 6 + b_j;
          proc_control_B.smax_b1 = proc_control_B.c_A_p[kAcol];
          jp1j = (jA * 6 + iy) - 1;
          proc_control_B.c_A_p[kAcol] = proc_control_B.c_A_p[jp1j];
          proc_control_B.c_A_p[jp1j] = proc_control_B.smax_b1;
        }
      }

      iy = c - b_j;
      for (jA = c; jA <= iy + 4; jA++) {
        proc_control_B.c_A_p[jA - 1] /= proc_control_B.c_A_p[jj];
      }
    }

    kAcol = 4 - b_j;
    jA = jj;
    jj += 6;
    for (jp1j = 0; jp1j <= kAcol; jp1j++) {
      proc_control_B.smax_b1 = proc_control_B.c_A_p[jp1j * 6 + jj];
      if (proc_control_B.smax_b1 != 0.0) {
        int32_T c_0;
        iy = jA + 8;
        c_0 = (jA - b_j) + 12;
        for (ijA = iy; ijA <= c_0; ijA++) {
          proc_control_B.c_A_p[ijA - 1] += proc_control_B.c_A_p[((c + ijA) - jA)
            - 9] * -proc_control_B.smax_b1;
        }
      }

      jA += 6;
    }
  }

  for (c = 0; c < 5; c++) {
    int8_T b_ipiv;

    // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
    //   MATLABSystem: '<S295>/MATLAB System'

    b_ipiv = proc_control_B.b_ipiv_m[c];
    if (c + 1 != b_ipiv) {
      for (int32_T b_j{0}; b_j < 8; b_j++) {
        kAcol = 6 * b_j + c;
        proc_control_B.smax_b1 = B[kAcol];
        jj = (6 * b_j + b_ipiv) - 1;
        B[kAcol] = B[jj];
        B[jj] = proc_control_B.smax_b1;
      }
    }
  }

  for (int32_T b_j{0}; b_j < 8; b_j++) {
    // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
    //   MATLABSystem: '<S295>/MATLAB System'

    jp1j = 6 * b_j - 1;
    for (c = 0; c < 6; c++) {
      // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
      //   MATLABSystem: '<S295>/MATLAB System'

      kAcol = 6 * c - 1;
      jj = (c + jp1j) + 1;
      if (B[jj] != 0.0) {
        // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
        //   MATLABSystem: '<S295>/MATLAB System'

        for (jA = c + 2; jA < 7; jA++) {
          ijA = jA + jp1j;
          B[ijA] -= proc_control_B.c_A_p[jA + kAcol] * B[jj];
        }
      }
    }
  }

  for (int32_T b_j{0}; b_j < 8; b_j++) {
    // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
    //   MATLABSystem: '<S295>/MATLAB System'

    jp1j = 6 * b_j;
    for (jA = 5; jA >= 0; jA--) {
      kAcol = 6 * jA;
      jj = jA + jp1j;
      proc_control_B.smax_b1 = B[jj];
      if (proc_control_B.smax_b1 != 0.0) {
        B[jj] = proc_control_B.smax_b1 / proc_control_B.c_A_p[jA + kAcol];
        iy = jA - 1;
        for (c = 0; c <= iy; c++) {
          ijA = c + jp1j;
          B[ijA] -= proc_control_B.c_A_p[c + kAcol] * B[jj];
        }
      }
    }
  }
}

real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = (rtNaN);
  } else {
    real_T tmp;
    real_T tmp_0;
    tmp = std::abs(u0);
    tmp_0 = std::abs(u1);
    if (std::isinf(u1)) {
      if (tmp == 1.0) {
        y = 1.0;
      } else if (tmp > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = (rtNaN);
    } else {
      y = std::pow(u0, u1);
    }
  }

  return y;
}

real_T proc_control::proc_control_erf(real_T x)
{
  real_T R;
  real_T s;
  real_T y;
  int32_T b_e;

  // Start for MATLABSystem: '<S3>/MATLAB System' incorporates:
  //   MATLABSystem: '<S295>/MATLAB System'

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_B.absx_m = std::abs(x);
  if (std::isnan(x)) {
    y = (rtNaN);
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_B.absx_m < 0.84375) {
    if (proc_control_B.absx_m < 3.7252902984619141E-9) {
      if (proc_control_B.absx_m < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_B.z_l = x * x;
      y = ((((proc_control_B.z_l * -2.3763016656650163E-5 -
              0.0057702702964894416) * proc_control_B.z_l - 0.02848174957559851)
            * proc_control_B.z_l - 0.3250421072470015) * proc_control_B.z_l +
           0.12837916709551256) / (((((proc_control_B.z_l *
        -3.9602282787753681E-6 + 0.00013249473800432164) * proc_control_B.z_l +
        0.0050813062818757656) * proc_control_B.z_l + 0.0650222499887673) *
        proc_control_B.z_l + 0.39791722395915535) * proc_control_B.z_l + 1.0) *
        x + x;
    }
  } else if (proc_control_B.absx_m < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_B.absx_m - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_B.absx_m - 1.0) -
               0.11089469428239668) * (proc_control_B.absx_m - 1.0) +
              0.31834661990116175) * (proc_control_B.absx_m - 1.0) -
             0.37220787603570132) * (proc_control_B.absx_m - 1.0) +
            0.41485611868374833) * (proc_control_B.absx_m - 1.0) -
           0.0023621185607526594) / (((((((proc_control_B.absx_m - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx_m -
        1.0) + 0.12617121980876164) * (proc_control_B.absx_m - 1.0) +
        0.071828654414196266) * (proc_control_B.absx_m - 1.0) +
        0.540397917702171) * (proc_control_B.absx_m - 1.0) + 0.10642088040084423)
        * (proc_control_B.absx_m - 1.0) + 1.0) + 0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_B.absx_m - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) * (proc_control_B.absx_m
        - 1.0) - 0.11089469428239668) * (proc_control_B.absx_m - 1.0) +
        0.31834661990116175) * (proc_control_B.absx_m - 1.0) -
        0.37220787603570132) * (proc_control_B.absx_m - 1.0) +
        0.41485611868374833) * (proc_control_B.absx_m - 1.0) -
        0.0023621185607526594) / (((((((proc_control_B.absx_m - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx_m -
        1.0) + 0.12617121980876164) * (proc_control_B.absx_m - 1.0) +
        0.071828654414196266) * (proc_control_B.absx_m - 1.0) +
        0.540397917702171) * (proc_control_B.absx_m - 1.0) + 0.10642088040084423)
        * (proc_control_B.absx_m - 1.0) + 1.0);
    }
  } else if (proc_control_B.absx_m > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    s = 1.0 / (proc_control_B.absx_m * proc_control_B.absx_m);
    if (proc_control_B.absx_m < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 - 81.2874355063066) * s -
               184.60509290671104) * s - 162.39666946257347) * s -
             62.375332450326006) * s - 10.558626225323291) * s -
           0.69385857270718176) * s - 0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 - 1025.0951316110772) * s -
              637.56644336838963) * s - 160.63638485582192) * s -
            17.757954917754752) * s - 0.799283237680523) * s -
        0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!std::isnan(proc_control_B.absx_m)) {
      proc_control_B.z_l = std::frexp(proc_control_B.absx_m, &b_e);
    } else {
      proc_control_B.z_l = (rtNaN);
      b_e = 0;
    }

    proc_control_B.z_l = std::floor(proc_control_B.z_l * 2.097152E+6) /
      2.097152E+6 * rt_powd_snf(2.0, static_cast<real_T>(b_e));
    if (x < 0.0) {
      y = std::exp((proc_control_B.z_l - proc_control_B.absx_m) *
                   (proc_control_B.z_l + proc_control_B.absx_m) + R / s) * std::
        exp(-proc_control_B.z_l * proc_control_B.z_l - 0.5625) /
        proc_control_B.absx_m - 1.0;
    } else {
      y = 1.0 - std::exp((proc_control_B.z_l - proc_control_B.absx_m) *
                         (proc_control_B.z_l + proc_control_B.absx_m) + R / s) *
        std::exp(-proc_control_B.z_l * proc_control_B.z_l - 0.5625) /
        proc_control_B.absx_m;
    }
  }

  // End of Start for MATLABSystem: '<S3>/MATLAB System'
  return y;
}

void proc_control::proc_control_ft_3_pr(const real_T ct[1016], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T t1524;
  real_T tmp;
  real_T tmp_0;

  // Start for MATLABSystem: '<S295>/MATLAB System'
  proc_control_B.t1463 = ct[482] + ct[914];
  proc_control_B.t1464 = ct[493] + ct[924];
  proc_control_B.t1465 = ct[504] + ct[921];
  proc_control_B.t1524 = (ct[344] * ct[1014] * -0.5 + ct[864]) * ct[35];
  proc_control_B.t1546_tmp = ct[23] * ct[515];
  proc_control_B.t1546_tmp_b = ct[24] * ct[531];
  proc_control_B.t1546 = ct[25] * ct[549];
  tmp =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[309] + ct[323]) + ct
    [331]) + ct[351]) + ct[353]) + ct[355]) + ct[357]) + ct[359]) + ct[383]) +
    ct[414]) + ct[415]) + ct[416]) + ct[417]) + ct[418]) + ct[419]) + ct[420]) +
    ct[421]) + ct[422]) + ct[423]) + ct[424]) + ct[425]) + ct[426]) + ct[427]) +
    ct[428]) + ct[429]) + ct[430]) + ct[431]) + ct[432]) + ct[433]) + ct[434]) +
    ct[435]) + ct[436]) + ct[437]) + ct[438]) + ct[439]) + ct[440]) + ct[441]) +
    ct[442]) + ct[443]) + ct[448]) + ct[449]) + ct[454]) + ct[460]) + ct[508]) +
    ct[511]) + ct[514]) + ct[529]) + ct[530]) + ct[532]) + ct[533]) + ct[534]) +
    ct[535]) + ct[536]) + ct[537]) + ct[539]) + ct[540]) + ct[545]) + ct[546]) +
    ct[551]) + ct[552]) + ct[555]) + ct[557]) + ct[559]) + ct[560]) + ct[561]) +
    ct[563]) + ct[564]) + ct[567]) + ct[571]) + ct[572]) + ct[573]) + ct[574]) +
    ct[577]) + ct[579]) + ct[583]) + ct[585]) + ct[627]) + ct[640]) + ct[648]) +
    ct[701]) + ct[702]) + ct[703]) + ct[705]) + ct[707]) + ct[709]) + ct[717]) +
    ct[718]) + ct[719]) + ct[720]) + ct[721]) + ct[722]) + ct[723]) + ct[724]) +
    ct[725]) + ct[726]) + ct[727]) + ct[728]) + ct[729]) + ct[730]) + ct[731]) +
    ct[732]) + ct[733]) + ct[734]) + ct[735]) + ct[736]) + ct[737]) + ct[739]) +
    ct[740]) + ct[741]) + ct[742]) + ct[743]) + ct[744]) + ct[745]) + ct[746]) +
                  ct[747]) + ct[748]) + ct[751]) + ct[754]) + ct[757]) + ct[760])
            + ct[763]) + ct[766]) + ct[768]) + ct[770]) + ct[772]) + ct[774]) +
      ct[776]) + ct[778]) + ct[780];
  tmp_0 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[992] + ct[993]) + ct
    [994]) + ct[995]) + ct[996]) + ct[1000]) + ct[1001]) + ct[1005]) + ct[1008])
    + ct[46]) + ct[47]) + ct[48]) + ct[49]) + ct[50]) + ct[51]) + ct[52]) + ct
    [53]) + ct[54]) + ct[56]) + ct[57]) + ct[58]) + ct[62]) + ct[65]) + ct[68])
    + ct[73]) + ct[76]) + ct[79]) + ct[83]) + ct[85]) + ct[86]) + ct[88]) + ct
    [89]) + ct[90]) + ct[91]) + ct[105]) + ct[106]) + ct[107]) + ct[120]) + ct
    [133]) + ct[158]) + ct[159]) + ct[160]) + ct[161]) + ct[162]) + ct[163]) +
    ct[166]) + ct[169]) + ct[172]) + ct[173]) + ct[174]) + ct[175]) + ct[176]) +
    ct[177]) + ct[178]) + ct[179]) + ct[180]) + ct[181]) - ct[750]) - ct[753]) -
    ct[756]) - ct[759]) - ct[762]) - ct[765]) - ct[791]) - ct[792]) - ct[793]) -
    ct[794]) - ct[848]) - ct[849]) + ct[201]) + ct[202]) + ct[203]) + ct[204]) +
    ct[205]) + ct[206]) + ct[207]) + ct[209]) + ct[211]) + ct[212]) + ct[213]) +
    ct[215]) + ct[216]) + ct[217]) + ct[218]) + ct[219]) + ct[221]) + ct[222]) +
    ct[223]) + ct[226]) + ct[227]) + ct[228]) + ct[229]) + ct[233]) + ct[234]) +
    ct[235]) + ct[236]) + ct[244]) + ct[246]) + ct[250]) + ct[251]) + ct[255]) +
    ct[256]) + ct[257]) + ct[258]) + ct[259]) + ct[260]) + ct[261]) + ct[262]) +
    ct[263]) + ct[264]) + ct[265]) + ct[267]) + ct[268]) + ct[269]) + ct[270]) +
                 ct[271]) + ct[272]) + ct[273]) + ct[274]) + ct[275]) + ct[276])
           + ct[278]) + ct[279]) + ct[280]) + ct[281]) + ct[282]) + ct[283]) +
     ct[284]) + ct[285];
  proc_control_B.t1546 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp
    + ct[782]) + ct[784]) + ct[786]) + ct[788]) + ct[790]) + ct[804]) + ct[805])
    + ct[811]) + ct[812]) + ct[818]) + ct[819]) + ct[829]) + ct[830]) + ct[836])
    + ct[837]) + ct[845]) + ct[846]) + ct[877]) + ct[883]) + ct[886]) + ct[895])
    + ct[896]) + ct[897]) + ct[898]) + ct[900]) + ct[902]) + ct[903]) + ct[905])
    + ct[907]) + ct[908]) + ct[909]) + ct[911]) + ct[938]) + ct[939]) + ct[940])
    + ct[942]) + ct[943]) + ct[944]) + ct[945]) + ct[946]) + ct[947]) + ct[948])
    + ct[949]) + ct[950]) + ct[954]) + ct[955]) + ct[956]) + ct[957]) + ct[958])
    + ct[959]) + ct[960]) + ct[961]) + ct[962]) + ct[963]) + ct[964]) + ct[965])
                    + ct[967]) + ct[971]) + ct[972]) + ct[976]) + ct[978]) + ct
               [981]) + ct[982]) + ct[984]) + ct[985]) + ct[986]) + ct[987]) +
         ct[988]) + ct[989]) + ct[990]) + ct[991]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_0 + ct
    [286]) + ct[287]) + ct[288]) + ct[289]) + ct[290]) + ct[291]) + ct[292]) +
    ct[293]) + ct[294]) + ct[295]) + ct[296]) + ct[297]) + ct[298]) + ct[299]) +
    ct[300]) + ct[301]) + ct[302]) + ct[303]) + ct[304]) + ct[305]) + ct[306]) -
    ct[93]) - ct[95]) - ct[99]) - ct[102]) - ct[111]) - ct[113]) - ct[115]) -
    ct[119]) - ct[124]) - ct[128]) - ct[130]) - ct[132]) + ct[312]) + ct[313]) +
    ct[314]) + ct[315]) + ct[316]) + ct[317]) - ct[164]) - ct[165]) - ct[167]) -
    ct[168]) - ct[170]) - ct[171]) + ct[318]) + ct[319]) + ct[320]) + ct[321]) +
                   ct[322]) + ct[324]) + ct[328]) + ct[329]) + ct[330]) + ct[332])
             + ct[333]) + ct[334]) + proc_control_B.t1546_tmp * ct[952]) +
          proc_control_B.t1546_tmp * ct[953]) + proc_control_B.t1546_tmp_b * ct
         [951]) + proc_control_B.t1546_tmp_b * ct[953]) + proc_control_B.t1546 *
       ct[951]) + proc_control_B.t1546 * ct[952]));
  proc_control_B.t1526 = ct[31] - proc_control_B.t1524;
  proc_control_B.t1543_tmp = ct[18] * ct[30];
  proc_control_B.t1543_tmp_g = ct[19] * ct[30];
  proc_control_B.t1542_tmp = ct[17] * ct[30];
  proc_control_B.t1542 = (((((((((ct[4] + ct[151]) + ct[155]) + ct[325]) +
    proc_control_B.t1464 * ct[1012]) - ct[21] * ct[30] * ct[31] * ct[45]) + ct
    [345]) - ct[338]) - ct[347]) + proc_control_B.t1543_tmp * ct[45] *
    proc_control_B.t1524) + proc_control_B.t1542_tmp * ct[894] *
    -proc_control_B.t1524;
  t1524 = (((((((ct[22] * ct[30] * ct[31] * ct[45] + ((ct[3] + ct[152]) + ct[154]))
                + proc_control_B.t1463 * ct[1015]) + ct[342]) + ct[349]) - ct
             [341]) - ct[346]) + proc_control_B.t1543_tmp_g * ct[45] *
           -proc_control_B.t1524) + proc_control_B.t1542_tmp * ct[327] *
    -proc_control_B.t1524;
  proc_control_B.t1464 = ((((ct[0] + ct[156]) + ct[311]) - ct[34] *
    proc_control_B.t1464) + ct[339]) + ct[30] * ct[893] * proc_control_B.t1526 *
    2.0;
  proc_control_B.t1463 = ((((ct[694] + ct[738]) + ct[149]) + ct[33] *
    proc_control_B.t1463) - ct[335]) + ct[30] * ct[327] * proc_control_B.t1526;
  out1[0] = (((ct[816] + ct[826]) - 1.0) * -ct[1012] + (ct[646] + ct[676]) * ct
             [1015]) + (ct[636] - ct[687]) * ct[1013];
  out1[1] = ((ct[636] + ct[687]) * ct[1012] - ((ct[806] + ct[826]) - 1.0) * ct
             [1013]) + (ct[654] - ct[665]) * ct[1015];
  out1[2] = (ct[45] * ct[1012] + ct[894] * ct[1013]) - ct[327] * ct[1015];
  out1[3] = (ct[26] * ct[32] * -0.5 - ct[27] * ct[33] / 2.0) - ct[28] * ct[34] /
    2.0;
  out1[4] = (ct[29] * ct[32] / 2.0 - ct[28] * ct[33] / 2.0) + ct[27] * ct[34] /
    2.0;
  out1[5] = (ct[28] * ct[32] / 2.0 + ct[29] * ct[33] / 2.0) - ct[26] * ct[34] /
    2.0;
  out1[6] = (ct[27] * ct[32] * -0.5 + ct[26] * ct[33] / 2.0) + ct[29] * ct[34] /
    2.0;
  proc_control_B.t1542_tmp = ct[9] * ct[13];
  proc_control_B.out1_tmp = ct[10] * ct[12];
  proc_control_B.out1_tmp_f = ct[13] * ct[15];
  proc_control_B.out1_tmp_c = ct[9] * ct[16];
  proc_control_B.out1_tmp_p = ct[15] * ct[16];
  proc_control_B.out1_tmp_a = ct[5] * ct[9];
  proc_control_B.out1_tmp_n = ct[6] * ct[8];
  proc_control_B.out1_tmp_h = ct[5] * ct[13];
  proc_control_B.out1_tmp_m = ct[7] * ct[11];
  proc_control_B.out1_tmp_f5 = ct[9] * ct[14];
  proc_control_B.out1_tmp_b = ct[5] * ct[15];
  proc_control_B.out1_tmp_e = ct[14] * ct[15];
  proc_control_B.out1_tmp_nz = ct[6] * ct[10];
  proc_control_B.out1_tmp_p4 = ct[7] * ct[9];
  proc_control_B.out1_tmp_i = ct[8] * ct[13];
  proc_control_B.out1_tmp_j = ct[10] * ct[11];
  proc_control_B.out1_tmp_l = ct[8] * ct[16];
  proc_control_B.out1_tmp_ce = ct[5] * ct[10];
  proc_control_B.out1_tmp_g = ct[7] * ct[8];
  proc_control_B.out1_tmp_c5 = ct[8] * ct[12];
  proc_control_B.out1_tmp_ly = ct[9] * ct[11];
  proc_control_B.out1_tmp_ev = ct[11] * ct[15];
  proc_control_B.out1_tmp_d = proc_control_B.out1_tmp_c5 * ct[21];
  proc_control_B.out1_tmp_my = proc_control_B.out1_tmp_ly * ct[21];
  proc_control_B.out1_tmp_fi = proc_control_B.out1_tmp_ev * ct[21];
  proc_control_B.out1_tmp_tmp_lw = proc_control_B.out1_tmp_i * ct[22];
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_tmp_lw * ct[24];
  proc_control_B.out1_tmp_tmp_h = proc_control_B.out1_tmp_j * ct[22];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_tmp_h * ct[24];
  proc_control_B.out1_tmp_tmp_ln = proc_control_B.out1_tmp_l * ct[22];
  proc_control_B.out1_tmp_en = proc_control_B.out1_tmp_tmp_ln * ct[24];
  proc_control_B.out1_tmp_mp = ct[5] * ct[12];
  proc_control_B.out1_tmp_ch = ct[6] * ct[11];
  proc_control_B.out1_tmp_g4 = ct[12] * ct[14];
  proc_control_B.out1_tmp_bn = proc_control_B.out1_tmp_mp * ct[21];
  proc_control_B.out1_tmp_po = proc_control_B.out1_tmp_ch * ct[21];
  proc_control_B.out1_tmp_p2 = proc_control_B.out1_tmp_g4 * ct[21];
  proc_control_B.out1_tmp_ap = ct[11] * ct[20];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_bn * ct[24];
  proc_control_B.out1_tmp_gr = proc_control_B.out1_tmp_po * ct[24];
  proc_control_B.out1_tmp_b0 = ct[10] * ct[14];
  proc_control_B.out1_tmp_k = proc_control_B.out1_tmp_ce * ct[22];
  proc_control_B.out1_tmp_k1 = proc_control_B.out1_tmp_g * ct[22];
  proc_control_B.out1_tmp_bw = proc_control_B.out1_tmp_b0 * ct[22];
  proc_control_B.out1_tmp_ix = ct[8] * ct[20];
  proc_control_B.out1_tmp_nj = proc_control_B.out1_tmp_k * ct[24];
  proc_control_B.out1_tmp_hx = proc_control_B.out1_tmp_k1 * ct[24];
  proc_control_B.out1_tmp_ni = proc_control_B.out1_tmp_a * ct[25];
  proc_control_B.out1_tmp_mm = proc_control_B.out1_tmp_n * ct[25];
  proc_control_B.out1_tmp_gu = ct[13] * ct[14];
  proc_control_B.out1_tmp_jb = proc_control_B.out1_tmp_f5 * ct[25];
  proc_control_B.out1_tmp_f0 = ct[5] * ct[16];
  proc_control_B.out1_tmp_ng = proc_control_B.out1_tmp_b * ct[25];
  proc_control_B.out1_tmp_gt = ct[14] * ct[16];
  proc_control_B.out1_tmp_d1 = proc_control_B.out1_tmp_e * ct[25];
  proc_control_B.out1_tmp_cj = proc_control_B.out1_tmp_a * ct[13];
  proc_control_B.out1_tmp_myu = proc_control_B.out1_tmp_ce * ct[12];
  proc_control_B.out1_tmp_dk = proc_control_B.out1_tmp_n * ct[13];
  proc_control_B.out1_tmp_n4 = proc_control_B.out1_tmp_nz * ct[11];
  proc_control_B.out1_tmp_bwe = proc_control_B.out1_tmp_g * ct[12];
  proc_control_B.out1_tmp_p2x = proc_control_B.out1_tmp_p4 * ct[11];
  proc_control_B.out1_tmp_kg = proc_control_B.t1542_tmp * ct[14];
  proc_control_B.out1_tmp_cl = proc_control_B.out1_tmp * ct[14];
  proc_control_B.out1_tmp_n2 = proc_control_B.out1_tmp_h * ct[15];
  proc_control_B.out1_tmp_nm = proc_control_B.out1_tmp_m * ct[15];
  proc_control_B.out1_tmp_cd = proc_control_B.out1_tmp_a * ct[16];
  proc_control_B.out1_tmp_dkf = proc_control_B.out1_tmp_n * ct[16];
  proc_control_B.out1_tmp_nq = proc_control_B.out1_tmp_gu * ct[15];
  proc_control_B.out1_tmp_guh = proc_control_B.out1_tmp_f5 * ct[16];
  proc_control_B.out1_tmp_lx = proc_control_B.out1_tmp_b * ct[16];
  proc_control_B.out1_tmp_ge = proc_control_B.out1_tmp_e * ct[16];
  proc_control_B.out1_tmp_tmp = ct[6] * ct[13];
  proc_control_B.out1_tmp_tmp_k = proc_control_B.out1_tmp_tmp * ct[20];
  proc_control_B.out1_tmp_pv = proc_control_B.out1_tmp_tmp_k * ct[21];
  proc_control_B.out1_tmp_tmp_d = ct[7] * ct[12];
  proc_control_B.out1_tmp_tmp_n = proc_control_B.out1_tmp_tmp_d * ct[20];
  proc_control_B.out1_tmp_ko = proc_control_B.out1_tmp_tmp_n * ct[21];
  proc_control_B.out1_tmp_tmp_g = proc_control_B.out1_tmp_i * ct[20];
  proc_control_B.out1_tmp_l1 = proc_control_B.out1_tmp_tmp_g * ct[21];
  proc_control_B.out1_tmp_tmp_e = proc_control_B.out1_tmp_j * ct[20];
  proc_control_B.out1_tmp_bf = proc_control_B.out1_tmp_tmp_e * ct[21];
  proc_control_B.out1_tmp_tmp_l = ct[6] * ct[16];
  proc_control_B.out1_tmp_tmp_i = proc_control_B.out1_tmp_tmp_l * ct[20];
  proc_control_B.out1_tmp_cx = proc_control_B.out1_tmp_tmp_i * ct[21];
  proc_control_B.out1_tmp_tmp_eq = proc_control_B.out1_tmp_l * ct[20];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_tmp_eq * ct[21];
  proc_control_B.t1526 = (((((ct[1] + ct[157]) + ct[310]) + ct[336]) - ct[32] *
    proc_control_B.t1465) + ct[30] * ct[478] * proc_control_B.t1526 * 2.0) *
    proc_control_B.t1546;
  proc_control_B.out1_tmp_oo = ((((((((((((((((((((ct[541] + ct[565]) + ct[575])
    + ct[799]) + ct[821]) + ct[906]) + ct[912]) + ct[968]) + ct[1002]) + ct[64])
    + ct[72]) + ct[75]) + ct[78]) + ct[80]) - ct[854]) - ct[858]) + ct[214]) +
    ct[225]) + ct[231]) + ct[245]) + ct[249]) - ct[87];
  proc_control_B.out1_tmp_ls = proc_control_B.out1_tmp_mp * ct[20];
  proc_control_B.out1_tmp_dr = proc_control_B.out1_tmp_ch * ct[20];
  proc_control_B.out1_tmp_ku = proc_control_B.out1_tmp_g4 * ct[20];
  proc_control_B.out1_tmp_fo = ct[7] * ct[15];
  proc_control_B.out1_tmp_p3 = proc_control_B.t1464 * proc_control_B.t1546;
  proc_control_B.out1_tmp_k1y = proc_control_B.out1_tmp_c5 * ct[20];
  proc_control_B.out1_tmp_k4 = proc_control_B.out1_tmp_ly * ct[20];
  proc_control_B.out1_tmp_iv = proc_control_B.out1_tmp_ev * ct[20];
  proc_control_B.out1_tmp_ew = ct[12] * ct[21];
  proc_control_B.t1465 = ((((((((((ct[2] + ct[150]) + ct[153]) +
    proc_control_B.t1465 * ct[1013]) - ct[326]) + ct[348]) - ct[340]) - ct[343])
    - ct[350]) + proc_control_B.t1543_tmp_g * ct[894] * proc_control_B.t1524) +
    proc_control_B.t1543_tmp * ct[327] * proc_control_B.t1524) *
    proc_control_B.t1546;
  proc_control_B.t1524 = ct[11] * ct[21];
  proc_control_B.t1543_tmp = ct[12] * ct[20];
  t1524 *= proc_control_B.t1546;
  proc_control_B.t1543_tmp_g = ct[6] * ct[21];
  proc_control_B.out1_tmp_ft = proc_control_B.t1542 * proc_control_B.t1546;
  proc_control_B.out1_tmp_im = -proc_control_B.t1463 * proc_control_B.t1546;
  proc_control_B.out1_tmp_iu = proc_control_B.out1_tmp_ce * ct[20];
  proc_control_B.out1_tmp_gy = proc_control_B.out1_tmp_g * ct[20];
  proc_control_B.out1_tmp_cv = proc_control_B.out1_tmp_b0 * ct[20];
  proc_control_B.out1_tmp_a5 = ct[8] * ct[22];
  proc_control_B.out1_tmp_hq = ct[10] * ct[20];
  proc_control_B.out1_tmp_gk = ct[7] * ct[22];
  proc_control_B.out1_tmp_dz = (ct[904] + ct[910]) + ct[920];
  proc_control_B.out1_tmp_p2p = ct[10] * ct[21];
  proc_control_B.out1_tmp_bi = proc_control_B.out1_tmp_h * ct[24];
  proc_control_B.out1_tmp_jv = proc_control_B.out1_tmp_m * ct[24];
  proc_control_B.out1_tmp_fbc = proc_control_B.out1_tmp_f0 * ct[24];
  proc_control_B.out1_tmp_fs = proc_control_B.out1_tmp_gt * ct[24];
  proc_control_B.out1_tmp_tmp_df = proc_control_B.out1_tmp_p4 * ct[20];
  proc_control_B.out1_tmp_g3 = proc_control_B.out1_tmp_tmp_df * ct[22];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_k1y * ct[22];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_k4 * ct[22];
  proc_control_B.out1_tmp_tmp_p = proc_control_B.out1_tmp_fo * ct[20];
  proc_control_B.out1_tmp_jbr = proc_control_B.out1_tmp_tmp_p * ct[22];
  proc_control_B.out1_tmp_nx = proc_control_B.out1_tmp_iv * ct[22];
  proc_control_B.out1_tmp_ju = ((((((((((((((((((((ct[548] + ct[569]) + ct[581])
    + ct[802]) + ct[842]) + ct[901]) + ct[913]) + ct[974]) + ct[1006]) + ct[61])
    + ct[67]) + ct[69]) + ct[70]) + ct[77]) - ct[855]) - ct[865]) + ct[210]) +
    ct[220]) + ct[232]) + ct[248]) + ct[253]) - ct[84];
  proc_control_B.out1_tmp_aw = proc_control_B.out1_tmp_nz * ct[20];
  proc_control_B.out1_tmp_pb = proc_control_B.t1542_tmp * ct[24];
  proc_control_B.out1_tmp_i1 = proc_control_B.out1_tmp * ct[24];
  proc_control_B.out1_tmp_b3 = proc_control_B.t1542_tmp * ct[25];
  proc_control_B.out1_tmp_gn = proc_control_B.out1_tmp * ct[25];
  proc_control_B.out1_tmp_oq = proc_control_B.out1_tmp_p2p * ct[22];
  proc_control_B.out1_tmp_b1 = proc_control_B.out1_tmp_ew * ct[22];
  proc_control_B.out1_tmp_ewq = proc_control_B.out1_tmp_f * ct[24];
  proc_control_B.out1_tmp_e1 = proc_control_B.out1_tmp_c * ct[24];
  proc_control_B.out1_tmp_lg = proc_control_B.out1_tmp_f * ct[25];
  proc_control_B.out1_tmp_cf = proc_control_B.out1_tmp_c * ct[25];
  proc_control_B.out1_tmp_e5 = proc_control_B.out1_tmp_p * ct[24];
  proc_control_B.out1_tmp_dwl = proc_control_B.out1_tmp_p * ct[25];
  proc_control_B.out1_tmp_c5w = proc_control_B.out1_tmp_a5 * ct[25];
  proc_control_B.out1_tmp_lt = ct[10] * ct[25];
  proc_control_B.out1_tmp_iy = -ct[10] * ct[14];
  proc_control_B.out1_tmp_az = proc_control_B.out1_tmp_i * ct[25];
  proc_control_B.out1_tmp_ixq = proc_control_B.out1_tmp_j * ct[25];
  proc_control_B.out1_tmp_c3 = proc_control_B.out1_tmp_l * ct[25];
  proc_control_B.out1_tmp_is = proc_control_B.out1_tmp_i * ct[21];
  proc_control_B.out1_tmp_ci = proc_control_B.out1_tmp_j * ct[21];
  proc_control_B.out1_tmp_gl = proc_control_B.out1_tmp_l * ct[21];
  proc_control_B.out1_tmp_iuw = ct[11] * ct[22];
  proc_control_B.out1_tmp_b11 = ((((((((((((((ct[371] - ct[372]) - ct[389]) -
    ct[397]) + ct[405]) + ct[457]) - ct[458]) - ct[464]) - ct[471]) + ct[476]) -
    ct[513]) + ct[521]) - ct[603]) + ct[604]) - ct[613]) + ct[614];
  proc_control_B.out1_tmp_by = ((((((((((((((ct[362] - ct[364]) - ct[385]) - ct
    [391]) + ct[403]) + ct[455]) - ct[456]) - ct[463]) - ct[469]) + ct[474]) -
    ct[510]) + ct[519]) - ct[597]) + ct[599]) - ct[611]) + ct[612];
  proc_control_B.out1_tmp_o1 = -ct[12] * ct[14];
  proc_control_B.out1_tmp_jc = proc_control_B.t1524 * ct[24];
  proc_control_B.out1_tmp_il = ct[12] * ct[24];
  proc_control_B.out1_tmp_jf = proc_control_B.out1_tmp_c5 * ct[24];
  proc_control_B.out1_tmp_geq = proc_control_B.out1_tmp_ly * ct[24];
  proc_control_B.out1_tmp_ltq = ct[8] * ct[21];
  proc_control_B.out1_tmp_kt = proc_control_B.out1_tmp_ev * ct[24];
  out1[7] =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((proc_control_B.out1_tmp_dz + ct[933]) + ct[941]) +
    ct[966]) + ct[997]) + ct[37]) + ct[55]) + ct[71]) + ct[81]) + ct[101]) + ct
    [191]) + ct[199]) + ct[277]) + ct[307]) + ct[308]) + ct[337]) + ct[352]) +
    ct[354]) + ct[356]) + ct[358]) + ct[382]) + ct[479]) + ct[480]) + ct[481]) +
    ct[483]) + ct[484]) + ct[485]) + ct[487]) + ct[489]) + ct[491]) + ct[492]) +
    ct[494]) + ct[496]) + ct[498]) + ct[499]) + ct[500]) + ct[502]) + ct[503]) +
    ct[505]) + ct[542]) + ct[550]) + ct[553]) + ct[554]) + ct[576]) + ct[578]) +
    ct[582]) + ct[584]) + ct[698]) + ct[699]) + ct[700]) + ct[704]) + ct[706]) +
    ct[708]) + ct[716]) + ct[749]) + ct[755]) + ct[761]) + ct[764]) + ct[767]) +
    ct[771]) + ct[775]) + ct[779]) + ct[781]) + ct[783]) + ct[787]) + ct[789]) +
    ct[970]) + ct[975]) + ct[979]) + ct[980]) + ct[182]) + ct[184]) + ct[187]) +
    ct[188]) + ct[189]) + ct[192]) + ct[198]) + ct[200]) + ct[509] * ct[515]) +
    ct[512] * ct[515]) - ct[515] * ct[518]) - ct[515] * ct[520]) + ct[5] * ct
    [538] * ct[616]) - ct[14] * ct[538] * ct[616]) + proc_control_B.t1543_tmp_g *
                      ct[523] * ct[616]) + proc_control_B.out1_tmp_gk * ct[523] *
                     ct[616]) + proc_control_B.out1_tmp_ltq * ct[523] * ct[616])
                   + proc_control_B.out1_tmp_iuw * ct[523] * ct[616]) +
                  proc_control_B.out1_tmp_bi * ct[515] * ct[598]) -
                 proc_control_B.out1_tmp_jv * ct[515] * ct[598]) +
                proc_control_B.out1_tmp_pb * ct[531] * ct[598]) -
               proc_control_B.out1_tmp_i1 * ct[531] * ct[598]) +
              proc_control_B.out1_tmp_ni * ct[515] * ct[598]) -
             proc_control_B.out1_tmp_mm * ct[515] * ct[598]) +
            proc_control_B.out1_tmp_b3 * ct[549] * ct[598]) -
           proc_control_B.out1_tmp_gn * ct[549] * ct[598]) +
          proc_control_B.out1_tmp_oq * ct[515] * ct[616]) +
         proc_control_B.out1_tmp_b1 * ct[515] * ct[616]) +
        (((((((((((((((((((((((((((-ct[13] * ct[14] * ct[24] * ct[515] * ct[598]
    - proc_control_B.out1_tmp_jb * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_ewq * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_ng * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_fbc * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_e1 * ct[531] * ct[598]) - proc_control_B.out1_tmp_lg
    * ct[549] * ct[598]) - proc_control_B.out1_tmp_cf * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_d1 * ct[515] * ct[598]) + proc_control_B.out1_tmp_fs
    * ct[515] * ct[598]) + proc_control_B.out1_tmp_e5 * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_dwl * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_cj * ct[24] * ct[25]) - proc_control_B.out1_tmp_myu *
                       ct[24] * ct[25]) - proc_control_B.out1_tmp_dk * ct[24] *
                      ct[25]) + proc_control_B.out1_tmp_n4 * ct[24] * ct[25]) +
                    proc_control_B.out1_tmp_bwe * ct[24] * ct[25]) -
                   proc_control_B.out1_tmp_p2x * ct[24] * ct[25]) -
                  proc_control_B.out1_tmp_kg * ct[24] * ct[25]) +
                 proc_control_B.out1_tmp_cl * ct[24] * ct[25]) -
                proc_control_B.out1_tmp_n2 * ct[24] * ct[25]) +
               proc_control_B.out1_tmp_nm * ct[24] * ct[25]) -
              proc_control_B.out1_tmp_cd * ct[24] * ct[25]) +
             proc_control_B.out1_tmp_dkf * ct[24] * ct[25]) +
            proc_control_B.out1_tmp_nq * ct[24] * ct[25]) +
           proc_control_B.out1_tmp_guh * ct[24] * ct[25]) +
          proc_control_B.out1_tmp_lx * ct[24] * ct[25]) -
         proc_control_B.out1_tmp_ge * ct[24] * ct[25])) +
       (((((((((((proc_control_B.out1_tmp_pv * ct[24] * ct[598] -
                  proc_control_B.out1_tmp_ko * ct[24] * ct[598]) +
                 proc_control_B.out1_tmp_l1 * ct[24] * ct[598]) -
                proc_control_B.out1_tmp_bf * ct[24] * ct[598]) -
               proc_control_B.out1_tmp_aw * ct[22] * ct[25] * ct[598]) +
              proc_control_B.out1_tmp_g3 * ct[25] * ct[598]) -
             proc_control_B.out1_tmp_ma * ct[25] * ct[598]) +
            proc_control_B.out1_tmp_dv * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_cx * ct[24] * ct[598]) -
          proc_control_B.out1_tmp_jbr * ct[25] * ct[598]) -
         proc_control_B.out1_tmp_fb * ct[24] * ct[598]) -
        proc_control_B.out1_tmp_nx * ct[25] * ct[598])) *
      proc_control_B.out1_tmp_p3 + ((((((((((((((((((proc_control_B.out1_tmp_oo
    - ct[22] * ct[363]) + ct[22] * ct[365]) + ct[22] * ct[375]) + ct[22] * ct
    [386]) + ct[22] * ct[393]) + ct[22] * ct[713]) + proc_control_B.out1_tmp_i *
    ct[549] * ct[607]) - proc_control_B.out1_tmp_j * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_l * ct[549] * ct[607]) - proc_control_B.out1_tmp_az *
    ct[549] * ct[598]) + proc_control_B.out1_tmp_ixq * ct[549] * ct[598]) +
             proc_control_B.out1_tmp_c3 * ct[549] * ct[598]) +
            proc_control_B.out1_tmp_iu * ct[22] * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_gy * ct[22] * ct[25] * ct[598]) -
          proc_control_B.out1_tmp_d * ct[22] * ct[25] * ct[598]) +
         proc_control_B.out1_tmp_my * ct[22] * ct[25] * ct[598]) -
        proc_control_B.out1_tmp_cv * ct[22] * ct[25] * ct[598]) -
       proc_control_B.out1_tmp_fi * ct[22] * ct[25] * ct[598]) *
      proc_control_B.t1526) + ((((((((((((((((((proc_control_B.out1_tmp_ju - ct
    [21] * ct[367]) + ct[21] * ct[368]) - ct[21] * ct[376]) + ct[21] * ct[378])
    + ct[21] * ct[387]) + ct[21] * ct[399]) - proc_control_B.out1_tmp_c5 * ct
    [531] * ct[607]) + proc_control_B.out1_tmp_ly * ct[531] * ct[607]) -
    proc_control_B.out1_tmp_ev * ct[531] * ct[607]) + proc_control_B.out1_tmp_jf
              * ct[531] * ct[598]) - proc_control_B.out1_tmp_geq * ct[531] * ct
             [598]) + proc_control_B.out1_tmp_kt * ct[531] * ct[598]) +
           proc_control_B.out1_tmp_ls * ct[21] * ct[24] * ct[598]) -
          proc_control_B.out1_tmp_dr * ct[21] * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_is * ct[22] * ct[24] * ct[598]) -
        proc_control_B.out1_tmp_ci * ct[22] * ct[24] * ct[598]) -
       proc_control_B.out1_tmp_ku * ct[21] * ct[24] * ct[598]) -
      proc_control_B.out1_tmp_gl * ct[22] * ct[24] * ct[598]) *
     proc_control_B.out1_tmp_im) + (((((((((((((((((((((((((((((((((((((((((ct
    [375] + ct[376]) - ct[378]) + ct[393]) - ct[399]) + ct[605]) - ct[618]) +
    ct[619]) + ct[635]) + ct[664]) + ct[667]) + ct[713]) + ct[831]) + ct[834]) +
    ct[927]) + ct[930]) + ct[1004]) + ct[1009]) + ct[38]) + ct[40]) + ct[195]) +
    ct[196]) + ct[238]) + ct[243]) - proc_control_B.out1_tmp_nl * ct[598]) +
    proc_control_B.out1_tmp_o * ct[598]) - proc_control_B.out1_tmp_d * ct[25] *
    ct[598]) + proc_control_B.out1_tmp_my * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_en * ct[598]) - proc_control_B.out1_tmp_fi * ct[25] *
    ct[598]) - proc_control_B.out1_tmp_jc * ct[515] * ct[607]) -
    proc_control_B.t1543_tmp * ct[24] * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_c5w * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_hq * ct[25] * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_d * ct[24] * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_my * ct[24] * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_nl * ct[25] * ct[31]) - proc_control_B.out1_tmp_o *
    ct[25] * ct[31]) + proc_control_B.out1_tmp_fi * ct[24] * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_en * ct[25] * ct[31]) * proc_control_B.t1465 -
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b11 - ct[629])
    + ct[639]) + ct[647]) + ct[658]) + ct[662]) - ct[674]) - ct[680]) - ct[798])
    - ct[808]) - ct[832]) - ct[838]) - ct[844]) + ct[853]) + ct[867]) + ct[874])
    - ct[885]) + ct[925]) + ct[118]) + ct[122]) + ct[123]) + ct[129]) + ct[131])
    - ct[139]) - ct[145]) - ct[12] * ct[544] * ct[616]) +
                   proc_control_B.out1_tmp_bn * ct[607]) -
                  proc_control_B.out1_tmp_po * ct[607]) -
                 proc_control_B.out1_tmp_p2 * ct[607]) -
                proc_control_B.out1_tmp_ap * ct[531] * ct[616]) +
               proc_control_B.out1_tmp_il * ct[544] * ct[607]) -
              proc_control_B.out1_tmp_fm * ct[598]) + proc_control_B.out1_tmp_gr
             * ct[598]) - proc_control_B.out1_tmp_bn * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_po * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_p2 * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_p2 * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_ap * ct[24] * ct[531] * ct[607]) +
       proc_control_B.out1_tmp_fm * ct[25] * ct[31]) -
      proc_control_B.out1_tmp_gr * ct[25] * ct[31]) + proc_control_B.out1_tmp_o1
     * ct[21] * ct[24] * ct[25] * ct[31]) * t1524) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_by - ct[630])
    + ct[637]) + ct[645]) + ct[650]) + ct[657]) - ct[669]) - ct[673]) - ct[796])
    - ct[800]) - ct[813]) - ct[823]) - ct[828]) + ct[851]) + ct[859]) + ct[872])
    - ct[882]) + ct[922]) + ct[109]) + ct[110]) + ct[112]) + ct[114]) + ct[125])
                      - ct[135]) - ct[142]) - ct[10] * ct[562] * ct[616]) +
                   proc_control_B.out1_tmp_k * ct[607]) -
                  proc_control_B.out1_tmp_k1 * ct[607]) -
                 proc_control_B.out1_tmp_bw * ct[607]) -
                proc_control_B.out1_tmp_ix * ct[549] * ct[616]) +
               proc_control_B.out1_tmp_lt * ct[562] * ct[607]) -
              proc_control_B.out1_tmp_nj * ct[598]) + proc_control_B.out1_tmp_hx
             * ct[598]) - proc_control_B.out1_tmp_k * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_k1 * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_bw * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_bw * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_ix * ct[25] * ct[549] * ct[607]) +
       proc_control_B.out1_tmp_nj * ct[25] * ct[31]) -
      proc_control_B.out1_tmp_hx * ct[25] * ct[31]) + proc_control_B.out1_tmp_iy
     * ct[22] * ct[24] * ct[25] * ct[31]) * proc_control_B.out1_tmp_ft);
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_k1y * ct[23];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_k4 * ct[23];
  proc_control_B.out1_tmp_tmp_ie = proc_control_B.out1_tmp_tmp * ct[22];
  proc_control_B.out1_tmp_en = proc_control_B.out1_tmp_tmp_ie * ct[23];
  proc_control_B.out1_tmp_tmp_m = proc_control_B.out1_tmp_tmp_d * ct[22];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_tmp_m * ct[23];
  proc_control_B.out1_tmp_tmp_c = proc_control_B.out1_tmp_tmp_l * ct[22];
  proc_control_B.out1_tmp_gr = proc_control_B.out1_tmp_tmp_c * ct[23];
  proc_control_B.out1_tmp_k = proc_control_B.out1_tmp_nz * ct[22];
  proc_control_B.out1_tmp_k1 = proc_control_B.out1_tmp_p4 * ct[22];
  proc_control_B.out1_tmp_bw = proc_control_B.out1_tmp_fo * ct[22];
  proc_control_B.out1_tmp_nj = proc_control_B.out1_tmp_k * ct[23];
  proc_control_B.out1_tmp_hx = proc_control_B.out1_tmp_k1 * ct[23];
  proc_control_B.out1_tmp_o2 = proc_control_B.out1_tmp_nz * ct[21];
  proc_control_B.out1_tmp_dn = proc_control_B.out1_tmp_p4 * ct[21];
  proc_control_B.out1_tmp_ee = proc_control_B.out1_tmp_fo * ct[21];
  proc_control_B.out1_tmp_ef = ct[6] * ct[22];
  proc_control_B.out1_tmp_dw = ct[7] * ct[21];
  proc_control_B.out1_tmp_gm = ct[10] * ct[22];
  proc_control_B.out1_tmp_n1 = ct[7] * ct[20];
  proc_control_B.out1_tmp_bs = proc_control_B.t1542_tmp * ct[23];
  proc_control_B.out1_tmp_iw = proc_control_B.out1_tmp * ct[23];
  proc_control_B.out1_tmp_gz = ct[6] * ct[20];
  proc_control_B.out1_tmp_nly = proc_control_B.out1_tmp_f * ct[23];
  proc_control_B.out1_tmp_p40 = proc_control_B.out1_tmp_c * ct[23];
  proc_control_B.out1_tmp_aa = proc_control_B.out1_tmp_p * ct[23];
  proc_control_B.out1_tmp_cj *= ct[23];
  proc_control_B.out1_tmp_myu *= ct[23];
  proc_control_B.out1_tmp_dk *= ct[23];
  proc_control_B.out1_tmp_n4 *= ct[23];
  proc_control_B.out1_tmp_bwe *= ct[23];
  proc_control_B.out1_tmp_p2x *= ct[23];
  proc_control_B.out1_tmp_kg *= ct[23];
  proc_control_B.out1_tmp_cl *= ct[23];
  proc_control_B.out1_tmp_n2 *= ct[23];
  proc_control_B.out1_tmp_nm *= ct[23];
  proc_control_B.out1_tmp_cd *= ct[23];
  proc_control_B.out1_tmp_dkf *= ct[23];
  proc_control_B.out1_tmp_nq *= ct[23];
  proc_control_B.out1_tmp_guh *= ct[23];
  proc_control_B.out1_tmp_lx *= ct[23];
  proc_control_B.out1_tmp_ge *= ct[23];
  proc_control_B.out1_tmp_tmp_na = proc_control_B.out1_tmp_ce * ct[21];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_tmp_na * ct[22];
  proc_control_B.out1_tmp_tmp_pn = proc_control_B.out1_tmp_g * ct[21];
  proc_control_B.out1_tmp_ey = proc_control_B.out1_tmp_tmp_pn * ct[22];
  proc_control_B.out1_tmp_bn *= ct[22];
  proc_control_B.out1_tmp_po *= ct[22];
  proc_control_B.out1_tmp_tmp_o = proc_control_B.out1_tmp_b0 * ct[21];
  proc_control_B.out1_tmp_dl = proc_control_B.out1_tmp_tmp_o * ct[22];
  proc_control_B.out1_tmp_p2 *= ct[22];
  proc_control_B.out1_tmp_pm = ((((((((((((((((((((ct[558] + ct[580]) + ct[586])
    + ct[825]) + ct[847]) + ct[899]) + ct[919]) + ct[983]) + ct[1011]) + ct[59])
    + ct[60]) + ct[63]) + ct[66]) + ct[74]) - ct[861]) - ct[868]) + ct[208]) +
    ct[224]) + ct[230]) + ct[252]) + ct[254]) - ct[82];
  proc_control_B.out1_tmp_d2 = ct[12] * ct[22];
  proc_control_B.out1_tmp_pq = ct[7] * ct[25];
  proc_control_B.out1_tmp_fp = -ct[7] * ct[15];
  proc_control_B.out1_tmp_gen = proc_control_B.out1_tmp_tmp * ct[25];
  proc_control_B.out1_tmp_dp = proc_control_B.out1_tmp_tmp_d * ct[25];
  proc_control_B.out1_tmp_hg = proc_control_B.out1_tmp_tmp_l * ct[25];
  proc_control_B.out1_tmp_lv = proc_control_B.out1_tmp_ef * ct[25];
  proc_control_B.out1_tmp_oe = ((((((((((((((ct[380] - ct[381]) - ct[395]) - ct
    [401]) + ct[410]) + ct[452]) - ct[453]) - ct[468]) - ct[470]) + ct[477]) -
    ct[513]) + ct[521]) - ct[595]) + ct[596]) - ct[620]) + ct[621];
  proc_control_B.out1_tmp_chb = proc_control_B.out1_tmp_h * ct[23];
  proc_control_B.out1_tmp_na = proc_control_B.out1_tmp_m * ct[23];
  proc_control_B.out1_tmp_hk = proc_control_B.out1_tmp_h * ct[25];
  proc_control_B.out1_tmp_iut = proc_control_B.out1_tmp_m * ct[25];
  proc_control_B.out1_tmp_ef2 = proc_control_B.out1_tmp_gu * ct[23];
  proc_control_B.out1_tmp_pc = proc_control_B.out1_tmp_n1 * ct[22];
  proc_control_B.out1_tmp_kov = proc_control_B.out1_tmp_ap * ct[22];
  proc_control_B.out1_tmp_nlp = proc_control_B.out1_tmp_gu * ct[25];
  proc_control_B.out1_tmp_ob = proc_control_B.out1_tmp_f0 * ct[23];
  proc_control_B.out1_tmp_lc = proc_control_B.out1_tmp_f0 * ct[25];
  proc_control_B.out1_tmp_pr = proc_control_B.out1_tmp_gt * ct[23];
  proc_control_B.out1_tmp_br = proc_control_B.out1_tmp_gt * ct[25];
  proc_control_B.out1_tmp_cm = proc_control_B.t1543_tmp * ct[23];
  proc_control_B.out1_tmp_ei = proc_control_B.out1_tmp_ls * ct[23];
  proc_control_B.out1_tmp_pw = proc_control_B.out1_tmp_dr * ct[23];
  proc_control_B.out1_tmp_np = proc_control_B.out1_tmp_ku * ct[23];
  proc_control_B.out1_tmp_oec = proc_control_B.out1_tmp_mp * ct[23];
  proc_control_B.out1_tmp_d5 = proc_control_B.out1_tmp_ch * ct[23];
  proc_control_B.out1_tmp_gq = proc_control_B.out1_tmp_g4 * ct[23];
  proc_control_B.out1_tmp_px = ct[11] * ct[23];
  out1_tmp = -ct[11] * ct[15];
  out1_tmp_0 = (((((((((((((((ct[360] - ct[361]) - ct[384]) - ct[390]) + ct[402])
    + ct[450]) - ct[451]) - ct[461]) - ct[465]) + ct[472]) - ct[507]) + ct[517])
                   - ct[587]) + ct[588]) - ct[609]) + ct[610]) + ct[622];
  out1[8] =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((ct[933] + ct[941]) + ct[966]) + ct[977]) + ct[1007])
    + ct[37]) + ct[43]) + ct[81]) + ct[101]) + ct[185]) + ct[199]) + ct[240]) +
    ct[247]) + ct[266]) + ct[277]) + ct[307]) + ct[308]) + ct[337]) + ct[352]) +
    ct[354]) + ct[356]) + ct[358]) + ct[382]) + ct[483]) + ct[484]) + ct[485]) +
    ct[486]) + ct[488]) + ct[489]) + ct[490]) + ct[494]) + ct[495]) + ct[496]) +
    ct[497]) + ct[500]) + ct[501]) + ct[502]) + ct[505]) + ct[543]) + ct[547]) +
    ct[550]) + ct[554]) + ct[566]) + ct[568]) + ct[582]) + ct[584]) + ct[695]) +
    ct[696]) + ct[697]) + ct[698]) + ct[699]) + ct[700]) + ct[704]) + ct[706]) +
    ct[708]) + ct[716]) + ct[752]) + ct[755]) + ct[758]) + ct[761]) + ct[769]) +
    ct[771]) + ct[773]) + ct[777]) + ct[779]) + ct[783]) + ct[785]) + ct[787]) +
    ct[969]) + ct[973]) + ct[975]) + ct[979]) + ct[183]) + ct[184]) + ct[186]) +
    ct[187]) + ct[190]) + ct[192]) + ct[193]) + ct[198]) + ct[506] * ct[531]) +
    ct[512] * ct[531]) - ct[516] * ct[531]) - ct[520] * ct[531]) + ct[9] * ct
    [556] * ct[616]) - ct[15] * ct[556] * ct[616]) + proc_control_B.out1_tmp_gz *
                      ct[544] * ct[616]) + proc_control_B.out1_tmp_ix * ct[544] *
                     ct[616]) + proc_control_B.out1_tmp_gm * ct[544] * ct[616])
                   + proc_control_B.out1_tmp_d2 * ct[544] * ct[616]) +
                  proc_control_B.out1_tmp_chb * ct[515] * ct[598]) -
                 proc_control_B.out1_tmp_na * ct[515] * ct[598]) +
                proc_control_B.out1_tmp_bs * ct[531] * ct[598]) -
               proc_control_B.out1_tmp_iw * ct[531] * ct[598]) +
              proc_control_B.out1_tmp_ni * ct[531] * ct[598]) -
             proc_control_B.out1_tmp_mm * ct[531] * ct[598]) +
            proc_control_B.out1_tmp_hk * ct[549] * ct[598]) -
           proc_control_B.out1_tmp_iut * ct[549] * ct[598]) -
          proc_control_B.out1_tmp_ef2 * ct[515] * ct[598]) +
         proc_control_B.out1_tmp_pc * ct[531] * ct[616]) +
        (((((((((((((((((((((((((((proc_control_B.out1_tmp_kov * ct[531] * ct
    [616] - proc_control_B.out1_tmp_nly * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_jb * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_nlp * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_ob * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_p40 * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_ng * ct[531] * ct[598]) - proc_control_B.out1_tmp_lc
    * ct[549] * ct[598]) + proc_control_B.out1_tmp_pr * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_d1 * ct[531] * ct[598]) + proc_control_B.out1_tmp_aa
    * ct[531] * ct[598]) + proc_control_B.out1_tmp_br * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_cj * ct[25]) - proc_control_B.out1_tmp_myu * ct[25])
                      - proc_control_B.out1_tmp_dk * ct[25]) +
                     proc_control_B.out1_tmp_n4 * ct[25]) +
                    proc_control_B.out1_tmp_bwe * ct[25]) -
                   proc_control_B.out1_tmp_p2x * ct[25]) -
                  proc_control_B.out1_tmp_kg * ct[25]) +
                 proc_control_B.out1_tmp_cl * ct[25]) -
                proc_control_B.out1_tmp_n2 * ct[25]) +
               proc_control_B.out1_tmp_nm * ct[25]) - proc_control_B.out1_tmp_cd
              * ct[25]) + proc_control_B.out1_tmp_dkf * ct[25]) +
            proc_control_B.out1_tmp_nq * ct[25]) + proc_control_B.out1_tmp_guh *
           ct[25]) + proc_control_B.out1_tmp_lx * ct[25]) -
         proc_control_B.out1_tmp_ge * ct[25])) +
       (((((((((((proc_control_B.out1_tmp_pv * ct[23] * ct[598] -
                  proc_control_B.out1_tmp_ko * ct[23] * ct[598]) +
                 proc_control_B.out1_tmp_l1 * ct[23] * ct[598]) -
                proc_control_B.out1_tmp_bf * ct[23] * ct[598]) +
               proc_control_B.out1_tmp_efd * ct[25] * ct[598]) -
              proc_control_B.out1_tmp_ey * ct[25] * ct[598]) +
             proc_control_B.out1_tmp_bn * ct[25] * ct[598]) -
            proc_control_B.out1_tmp_po * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_dl * ct[25] * ct[598]) -
          proc_control_B.out1_tmp_p2 * ct[25] * ct[598]) -
         proc_control_B.out1_tmp_cx * ct[23] * ct[598]) -
        proc_control_B.out1_tmp_fb * ct[23] * ct[598])) * proc_control_B.t1526 +
      ((((((((((((((((((ct[22] * ct[366] + proc_control_B.out1_tmp_oo) - ct[22] *
                       ct[367]) + ct[22] * ct[368]) + ct[22] * ct[387]) + ct[22]
                    * ct[392]) + ct[22] * ct[711]) + proc_control_B.out1_tmp_tmp
                  * ct[549] * ct[607]) - proc_control_B.out1_tmp_tmp_d * ct[549]
                 * ct[607]) - proc_control_B.out1_tmp_tmp_l * ct[549] * ct[607])
               - proc_control_B.out1_tmp_gen * ct[549] * ct[598]) +
              proc_control_B.out1_tmp_dp * ct[549] * ct[598]) +
             proc_control_B.out1_tmp_hg * ct[549] * ct[598]) -
            proc_control_B.out1_tmp_o2 * ct[22] * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_dn * ct[22] * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_ls * ct[22] * ct[25] * ct[598]) -
         proc_control_B.out1_tmp_dr * ct[22] * ct[25] * ct[598]) -
        proc_control_B.out1_tmp_ku * ct[22] * ct[25] * ct[598]) -
       proc_control_B.out1_tmp_ee * ct[22] * ct[25] * ct[598]) *
      proc_control_B.out1_tmp_p3) +
     ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_oe - ct
    [631]) + ct[643]) + ct[652]) + ct[660]) + ct[666]) - ct[679]) - ct[686]) -
    ct[824]) - ct[827]) - ct[832]) - ct[838]) - ct[841]) + ct[860]) + ct[863]) +
    ct[874]) - ct[885]) + ct[926]) + ct[104]) + ct[126]) + ct[127]) + ct[129]) +
    ct[131]) - ct[141]) - ct[143]) - ct[11] * ct[523] * ct[616]) -
                      proc_control_B.out1_tmp_k1y * ct[607]) +
                     proc_control_B.out1_tmp_k4 * ct[607]) -
                    proc_control_B.out1_tmp_iv * ct[607]) -
                   proc_control_B.out1_tmp_ew * ct[515] * ct[616]) +
                  proc_control_B.out1_tmp_px * ct[523] * ct[607]) +
                 proc_control_B.out1_tmp_nl * ct[598]) -
                proc_control_B.out1_tmp_o * ct[598]) +
               proc_control_B.out1_tmp_k1y * ct[25] * ct[598]) -
              proc_control_B.out1_tmp_k4 * ct[25] * ct[598]) +
             proc_control_B.out1_tmp_iv * ct[23] * ct[598]) +
            proc_control_B.out1_tmp_iv * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_ew * ct[23] * ct[515] * ct[607]) -
          proc_control_B.out1_tmp_nl * ct[25] * ct[31]) +
         proc_control_B.out1_tmp_o * ct[25] * ct[31]) + out1_tmp * ct[20] * ct
        [23] * ct[25] * ct[31]) * proc_control_B.t1465 +
       (((((((((((((((((((((((((((((((((((((((ct[367] - ct[373]) + ct[374]) +
    ct[398]) + ct[590]) + ct[615]) - ct[617]) + ct[624]) + ct[628]) - ct[663]) +
    ct[670]) + ct[712]) + ct[715]) + ct[807]) + ct[810]) - ct[831]) - ct[834]) +
    ct[918]) + ct[929]) + ct[999]) + ct[1010]) + ct[39]) + ct[239]) + ct[242]) +
                       proc_control_B.out1_tmp_en * ct[598]) -
                      proc_control_B.out1_tmp_fm * ct[598]) -
                     proc_control_B.out1_tmp_ls * ct[25] * ct[598]) +
                    proc_control_B.out1_tmp_dr * ct[25] * ct[598]) +
                   proc_control_B.out1_tmp_ku * ct[25] * ct[598]) -
                  proc_control_B.out1_tmp_gr * ct[598]) + proc_control_B.t1524 *
                 ct[23] * ct[515] * ct[607]) + proc_control_B.out1_tmp_cm * ct
                [531] * ct[607]) - proc_control_B.out1_tmp_lv * ct[531] * ct[607])
              - proc_control_B.out1_tmp_dw * ct[25] * ct[549] * ct[607]) +
             proc_control_B.out1_tmp_ei * ct[25] * ct[31]) -
            proc_control_B.out1_tmp_pw * ct[25] * ct[31]) -
           proc_control_B.out1_tmp_en * ct[25] * ct[31]) +
          proc_control_B.out1_tmp_fm * ct[25] * ct[31]) -
         proc_control_B.out1_tmp_np * ct[25] * ct[31]) +
        proc_control_B.out1_tmp_gr * ct[25] * ct[31]) * t1524) -
      (((((((((((((((((((((((((((((((((((((((out1_tmp_0 - ct[632]) + ct[641]) +
    ct[644]) + ct[655]) - ct[661]) - ct[671]) - ct[797]) - ct[801]) - ct[809]) -
    ct[814]) - ct[815]) + ct[852]) + ct[856]) + ct[870]) - ct[876]) + ct[916]) +
    ct[92]) + ct[94]) + ct[96]) + ct[97]) + ct[121]) - ct[136]) - ct[138]) - ct
                      [7] * ct[562] * ct[616]) - proc_control_B.out1_tmp_k * ct
                     [607]) + proc_control_B.out1_tmp_k1 * ct[607]) -
                   proc_control_B.out1_tmp_bw * ct[607]) -
                  proc_control_B.t1543_tmp_g * ct[549] * ct[616]) +
                 proc_control_B.out1_tmp_pq * ct[562] * ct[607]) +
                proc_control_B.out1_tmp_nj * ct[598]) -
               proc_control_B.out1_tmp_hx * ct[598]) + proc_control_B.out1_tmp_k
              * ct[25] * ct[598]) - proc_control_B.out1_tmp_k1 * ct[25] * ct[598])
            + proc_control_B.out1_tmp_bw * ct[23] * ct[598]) +
           proc_control_B.out1_tmp_bw * ct[25] * ct[598]) +
          proc_control_B.t1543_tmp_g * ct[25] * ct[549] * ct[607]) -
         proc_control_B.out1_tmp_nj * ct[25] * ct[31]) +
        proc_control_B.out1_tmp_hx * ct[25] * ct[31]) +
       proc_control_B.out1_tmp_fp * ct[22] * ct[23] * ct[25] * ct[31]) *
      proc_control_B.out1_tmp_ft)) +
    ((((((((((((((((((proc_control_B.out1_tmp_pm - ct[20] * ct[373]) + ct[20] *
                     ct[374]) + ct[20] * ct[375]) + ct[20] * ct[393]) + ct[20] *
                  ct[398]) + ct[20] * ct[713]) + proc_control_B.out1_tmp_mp *
                ct[515] * ct[607]) - proc_control_B.out1_tmp_ch * ct[515] * ct
               [607]) - proc_control_B.out1_tmp_g4 * ct[515] * ct[607]) -
             proc_control_B.out1_tmp_oec * ct[515] * ct[598]) +
            proc_control_B.out1_tmp_d5 * ct[515] * ct[598]) +
           proc_control_B.out1_tmp_gq * ct[515] * ct[598]) +
          proc_control_B.out1_tmp_tmp_k * ct[22] * ct[23] * ct[598]) -
         proc_control_B.out1_tmp_tmp_n * ct[22] * ct[23] * ct[598]) -
        proc_control_B.out1_tmp_k1y * ct[21] * ct[23] * ct[598]) +
       proc_control_B.out1_tmp_k4 * ct[21] * ct[23] * ct[598]) -
      proc_control_B.out1_tmp_iv * ct[21] * ct[23] * ct[598]) -
     proc_control_B.out1_tmp_tmp_i * ct[22] * ct[23] * ct[598]) *
    proc_control_B.out1_tmp_im;
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_o2 * ct[23];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_dn * ct[23];
  proc_control_B.out1_tmp_en = proc_control_B.out1_tmp_ee * ct[23];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_tmp_g * ct[23];
  proc_control_B.out1_tmp_gr = proc_control_B.out1_tmp_tmp_e * ct[23];
  proc_control_B.out1_tmp_k = proc_control_B.out1_tmp_tmp * ct[21];
  proc_control_B.out1_tmp_k1 = proc_control_B.out1_tmp_tmp_d * ct[21];
  proc_control_B.out1_tmp_bw = proc_control_B.out1_tmp_tmp_l * ct[21];
  proc_control_B.out1_tmp_nj = proc_control_B.out1_tmp_k * ct[23];
  proc_control_B.out1_tmp_hx = proc_control_B.out1_tmp_k1 * ct[23];
  proc_control_B.out1_tmp_pv = ((((((((((((((ct[377] - ct[379]) - ct[394]) - ct
    [400]) + ct[409]) + ct[446]) - ct[447]) - ct[462]) - ct[467]) + ct[475]) -
    ct[510]) + ct[519]) - ct[593]) + ct[594]) - ct[606]) + ct[608];
  proc_control_B.out1_tmp_ko = -ct[6] * ct[16];
  proc_control_B.out1_tmp_l1 = proc_control_B.t1463 * proc_control_B.t1546;
  proc_control_B.out1_tmp_bf = proc_control_B.out1_tmp_nz * ct[24];
  proc_control_B.out1_tmp_cx = proc_control_B.out1_tmp_p4 * ct[24];
  proc_control_B.out1_tmp_fb = proc_control_B.out1_tmp_fo * ct[24];
  proc_control_B.out1_tmp_oo = -proc_control_B.t1542 * proc_control_B.t1546;
  proc_control_B.out1_tmp_k1y = ct[6] * ct[24];
  proc_control_B.out1_tmp_k4 = proc_control_B.out1_tmp_dw * ct[24];
  proc_control_B.out1_tmp_iv = proc_control_B.out1_tmp_hq * ct[23];
  proc_control_B.out1_tmp_im = proc_control_B.out1_tmp_iu * ct[23];
  proc_control_B.t1463 = proc_control_B.out1_tmp_gy * ct[23];
  proc_control_B.t1542 = proc_control_B.out1_tmp_cv * ct[23];
  proc_control_B.out1_tmp_cxz = proc_control_B.out1_tmp_ce * ct[23];
  proc_control_B.out1_tmp_ag = proc_control_B.out1_tmp_g * ct[23];
  proc_control_B.out1_tmp_i2 = proc_control_B.out1_tmp_b0 * ct[23];
  proc_control_B.out1_tmp_mb = ct[8] * ct[23];
  proc_control_B.out1_tmp_nn = -ct[8] * ct[16];
  proc_control_B.out1_tmp_i3 = proc_control_B.out1_tmp_gu * ct[24];
  proc_control_B.out1_tmp_fy = (((((((((((((((ct[369] - ct[370]) - ct[388]) -
    ct[396]) + ct[404]) + ct[444]) - ct[445]) - ct[459]) - ct[466]) + ct[473]) -
    ct[507]) + ct[517]) - ct[591]) + ct[592]) - ct[601]) + ct[602]) + ct[625];
  proc_control_B.out1_tmp_ih = proc_control_B.out1_tmp_a * ct[23];
  proc_control_B.out1_tmp_cc = proc_control_B.out1_tmp_n * ct[23];
  proc_control_B.out1_tmp_bv = proc_control_B.out1_tmp_a * ct[24];
  proc_control_B.out1_tmp_gh = proc_control_B.out1_tmp_n * ct[24];
  proc_control_B.out1_tmp_df = proc_control_B.out1_tmp_f5 * ct[23];
  proc_control_B.out1_tmp_fn = proc_control_B.out1_tmp_gz * ct[21];
  proc_control_B.out1_tmp_j1 = proc_control_B.out1_tmp_ix * ct[21];
  proc_control_B.out1_tmp_eq = proc_control_B.out1_tmp_f5 * ct[24];
  proc_control_B.out1_tmp_pc2 = proc_control_B.out1_tmp_b * ct[23];
  proc_control_B.out1_tmp_dd = proc_control_B.out1_tmp_b * ct[24];
  proc_control_B.out1_tmp_fmm = proc_control_B.out1_tmp_e * ct[23];
  proc_control_B.out1_tmp_n5 = proc_control_B.out1_tmp_e * ct[24];
  out1[9] = (((((((((((((((((((((((((((((((((((((((((((ct[363] + ct[366]) + ct
    [392]) + ct[589]) + ct[600]) + ct[623]) + ct[628]) + ct[667]) + ct[710]) +
    ct[711]) + ct[714]) + ct[807]) + ct[810]) + ct[915]) + ct[928]) + ct[998]) +
    ct[1003]) + ct[1009]) + ct[36]) + ct[39]) + ct[195]) + ct[196]) + ct[237]) +
    ct[241]) - proc_control_B.out1_tmp_nl * ct[598]) + proc_control_B.out1_tmp_o
    * ct[598]) - proc_control_B.out1_tmp_iu * ct[24] * ct[598]) +
    proc_control_B.out1_tmp_gy * ct[24] * ct[598]) + proc_control_B.out1_tmp_cv *
    ct[24] * ct[598]) - proc_control_B.out1_tmp_en * ct[598]) +
    proc_control_B.out1_tmp_a5 * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_iv * ct[549] * ct[607]) - proc_control_B.out1_tmp_ef
                        * ct[24] * ct[531] * ct[607]) -
                       proc_control_B.out1_tmp_k4 * ct[549] * ct[607]) +
                      proc_control_B.out1_tmp_im * ct[24] * ct[31]) -
                     proc_control_B.t1463 * ct[24] * ct[31]) +
                    proc_control_B.out1_tmp_nl * ct[24] * ct[31]) -
                   proc_control_B.out1_tmp_o * ct[24] * ct[31]) -
                  proc_control_B.t1542 * ct[24] * ct[31]) +
                 proc_control_B.out1_tmp_en * ct[24] * ct[31]) *
                proc_control_B.out1_tmp_oo -
                ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_pv
    - ct[633]) + ct[642]) + ct[651]) + ct[653]) + ct[659]) - ct[678]) - ct[683])
    - ct[813]) - ct[817]) - ct[828]) - ct[839]) - ct[843]) + ct[857]) + ct[866])
    + ct[872]) - ct[882]) + ct[923]) + ct[98]) + ct[112]) + ct[114]) + ct[116])
    + ct[117]) - ct[137]) - ct[144]) - ct[8] * ct[523] * ct[616]) +
    proc_control_B.out1_tmp_tmp_g * ct[607]) - proc_control_B.out1_tmp_tmp_e *
    ct[607]) - proc_control_B.out1_tmp_tmp_eq * ct[607]) -
    proc_control_B.out1_tmp_gm * ct[515] * ct[616]) + proc_control_B.out1_tmp_mb
    * ct[523] * ct[607]) - proc_control_B.out1_tmp_fm * ct[598]) +
    proc_control_B.out1_tmp_gr * ct[598]) - proc_control_B.out1_tmp_tmp_g * ct
                        [24] * ct[598]) + proc_control_B.out1_tmp_tmp_e * ct[24]
                       * ct[598]) + proc_control_B.out1_tmp_tmp_eq * ct[23] *
                      ct[598]) + proc_control_B.out1_tmp_tmp_eq * ct[24] * ct
                     [598]) + proc_control_B.out1_tmp_gm * ct[23] * ct[515] *
                    ct[607]) + proc_control_B.out1_tmp_fm * ct[24] * ct[31]) -
                  proc_control_B.out1_tmp_gr * ct[24] * ct[31]) +
                 proc_control_B.out1_tmp_nn * ct[20] * ct[23] * ct[24] * ct[31])
                * proc_control_B.t1465) +
               (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_fy
    - ct[634]) + ct[638]) + ct[649]) + ct[656]) - ct[668]) - ct[672]) - ct[795])
    - ct[801]) - ct[809]) - ct[833]) - ct[840]) + ct[850]) + ct[862]) + ct[870])
    - ct[876]) + ct[917]) + ct[92]) + ct[94]) + ct[100]) + ct[103]) + ct[108]) -
    ct[134]) - ct[140]) - ct[6] * ct[544] * ct[616]) + proc_control_B.out1_tmp_k
    * ct[607]) - proc_control_B.out1_tmp_k1 * ct[607]) -
    proc_control_B.out1_tmp_bw * ct[607]) - proc_control_B.out1_tmp_gk * ct[531]
    * ct[616]) + proc_control_B.out1_tmp_k1y * ct[544] * ct[607]) -
    proc_control_B.out1_tmp_nj * ct[598]) + proc_control_B.out1_tmp_hx * ct[598])
                       - proc_control_B.out1_tmp_k * ct[24] * ct[598]) +
                      proc_control_B.out1_tmp_k1 * ct[24] * ct[598]) +
                     proc_control_B.out1_tmp_bw * ct[23] * ct[598]) +
                    proc_control_B.out1_tmp_bw * ct[24] * ct[598]) +
                   proc_control_B.out1_tmp_gk * ct[24] * ct[531] * ct[607]) +
                  proc_control_B.out1_tmp_nj * ct[24] * ct[31]) -
                 proc_control_B.out1_tmp_hx * ct[24] * ct[31]) +
                proc_control_B.out1_tmp_ko * ct[21] * ct[23] * ct[24] * ct[31]) *
               t1524) -
              (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_dz + ct[977]) + ct
    [997]) + ct[1007]) + ct[43]) + ct[55]) + ct[71]) + ct[185]) + ct[191]) + ct
    [240]) + ct[247]) + ct[266]) + ct[277]) + ct[307]) + ct[308]) + ct[337]) +
    ct[352]) + ct[354]) + ct[356]) + ct[358]) + ct[382]) + ct[479]) + ct[480]) +
    ct[481]) + ct[486]) + ct[487]) + ct[488]) + ct[490]) + ct[491]) + ct[492]) +
    ct[495]) + ct[497]) + ct[498]) + ct[499]) + ct[501]) + ct[503]) + ct[542]) +
    ct[543]) + ct[547]) + ct[553]) + ct[566]) + ct[568]) + ct[576]) + ct[578]) +
    ct[695]) + ct[696]) + ct[697]) + ct[698]) + ct[699]) + ct[700]) + ct[704]) +
    ct[706]) + ct[708]) + ct[716]) + ct[749]) + ct[752]) + ct[758]) + ct[764]) +
    ct[767]) + ct[769]) + ct[773]) + ct[775]) + ct[777]) + ct[781]) + ct[785]) +
    ct[789]) + ct[969]) + ct[970]) + ct[973]) + ct[980]) + ct[182]) + ct[183]) +
    ct[186]) + ct[188]) + ct[189]) + ct[190]) + ct[193]) + ct[200]) + ct[506] *
    ct[549]) + ct[509] * ct[549]) - ct[516] * ct[549]) - ct[518] * ct[549]) +
    ct[13] * ct[570] * ct[616]) - ct[16] * ct[570] * ct[616]) +
    proc_control_B.out1_tmp_n1 * ct[562] * ct[616]) +
    proc_control_B.out1_tmp_p2p * ct[562] * ct[616]) +
    proc_control_B.out1_tmp_ap * ct[562] * ct[616]) + proc_control_B.out1_tmp_ew
    * ct[562] * ct[616]) + proc_control_B.out1_tmp_ih * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_cc * ct[515] * ct[598]) + proc_control_B.out1_tmp_bs
                        * ct[549] * ct[598]) - proc_control_B.out1_tmp_iw * ct
                       [549] * ct[598]) + proc_control_B.out1_tmp_bv * ct[531] *
                      ct[598]) - proc_control_B.out1_tmp_gh * ct[531] * ct[598])
                    + proc_control_B.out1_tmp_bi * ct[549] * ct[598]) -
                   proc_control_B.out1_tmp_jv * ct[549] * ct[598]) -
                  proc_control_B.out1_tmp_df * ct[515] * ct[598]) +
                 proc_control_B.out1_tmp_fn * ct[549] * ct[616]) +
                (((((((((((((((((((((((((((proc_control_B.out1_tmp_j1 * ct[549] *
    ct[616] - proc_control_B.out1_tmp_eq * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_i3 * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_pc2 * ct[515] * ct[598]) -
    proc_control_B.out1_tmp_nly * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_dd * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_p40 * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_fbc * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_fmm * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_n5 * ct[531] * ct[598]) + proc_control_B.out1_tmp_fs
    * ct[549] * ct[598]) + proc_control_B.out1_tmp_aa * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_cj * ct[24]) - proc_control_B.out1_tmp_myu * ct[24])
    - proc_control_B.out1_tmp_dk * ct[24]) + proc_control_B.out1_tmp_n4 * ct[24])
    + proc_control_B.out1_tmp_bwe * ct[24]) - proc_control_B.out1_tmp_p2x * ct
    [24]) - proc_control_B.out1_tmp_kg * ct[24]) + proc_control_B.out1_tmp_cl *
    ct[24]) - proc_control_B.out1_tmp_n2 * ct[24]) + proc_control_B.out1_tmp_nm *
                       ct[24]) - proc_control_B.out1_tmp_cd * ct[24]) +
                     proc_control_B.out1_tmp_dkf * ct[24]) +
                    proc_control_B.out1_tmp_nq * ct[24]) +
                   proc_control_B.out1_tmp_guh * ct[24]) +
                  proc_control_B.out1_tmp_lx * ct[24]) -
                 proc_control_B.out1_tmp_ge * ct[24])) + (((((((((((-ct[6] * ct
    [10] * ct[20] * ct[22] * ct[23] * ct[598] + proc_control_B.out1_tmp_g3 * ct
    [23] * ct[598]) - proc_control_B.out1_tmp_ma * ct[23] * ct[598]) +
    proc_control_B.out1_tmp_dv * ct[23] * ct[598]) + proc_control_B.out1_tmp_efd
    * ct[24] * ct[598]) - proc_control_B.out1_tmp_ey * ct[24] * ct[598]) +
    proc_control_B.out1_tmp_bn * ct[24] * ct[598]) - proc_control_B.out1_tmp_po *
    ct[24] * ct[598]) - proc_control_B.out1_tmp_dl * ct[24] * ct[598]) -
    proc_control_B.out1_tmp_p2 * ct[24] * ct[598]) - proc_control_B.out1_tmp_jbr
    * ct[23] * ct[598]) - proc_control_B.out1_tmp_nx * ct[23] * ct[598])) *
              proc_control_B.out1_tmp_l1) +
             ((((((((((((((((((proc_control_B.out1_tmp_ju - ct[21] * ct[363]) +
    ct[21] * ct[365]) - ct[21] * ct[373]) + ct[21] * ct[374]) + ct[21] * ct[386])
    + ct[21] * ct[398]) - proc_control_B.out1_tmp_nz * ct[531] * ct[607]) +
                        proc_control_B.out1_tmp_p4 * ct[531] * ct[607]) -
                       proc_control_B.out1_tmp_fo * ct[531] * ct[607]) +
                      proc_control_B.out1_tmp_bf * ct[531] * ct[598]) -
                     proc_control_B.out1_tmp_cx * ct[531] * ct[598]) +
                    proc_control_B.out1_tmp_fb * ct[531] * ct[598]) +
                   proc_control_B.out1_tmp_iu * ct[21] * ct[24] * ct[598]) -
                  proc_control_B.out1_tmp_gy * ct[21] * ct[24] * ct[598]) +
                 proc_control_B.out1_tmp_k * ct[22] * ct[24] * ct[598]) -
                proc_control_B.out1_tmp_k1 * ct[22] * ct[24] * ct[598]) -
               proc_control_B.out1_tmp_cv * ct[21] * ct[24] * ct[598]) -
              proc_control_B.out1_tmp_bw * ct[22] * ct[24] * ct[598]) *
             proc_control_B.out1_tmp_p3) + ((((((((((((((((((ct[20] * ct[366] +
    proc_control_B.out1_tmp_pm) - ct[20] * ct[376]) + ct[20] * ct[378]) + ct[20]
    * ct[392]) + ct[20] * ct[399]) + ct[20] * ct[711]) +
    proc_control_B.out1_tmp_ce * ct[515] * ct[607]) - proc_control_B.out1_tmp_g *
    ct[515] * ct[607]) - proc_control_B.out1_tmp_b0 * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_cxz * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_ag * ct[515] * ct[598]) + proc_control_B.out1_tmp_i2
    * ct[515] * ct[598]) - proc_control_B.out1_tmp_aw * ct[21] * ct[23] * ct[598])
    + proc_control_B.out1_tmp_tmp_df * ct[21] * ct[23] * ct[598]) +
    proc_control_B.out1_tmp_tmp_g * ct[22] * ct[23] * ct[598]) -
    proc_control_B.out1_tmp_tmp_e * ct[22] * ct[23] * ct[598]) -
    proc_control_B.out1_tmp_tmp_p * ct[21] * ct[23] * ct[598]) -
    proc_control_B.out1_tmp_tmp_eq * ct[22] * ct[23] * ct[598]) *
    proc_control_B.t1526;
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_tmp_k * ct[23];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_tmp_n * ct[23];
  proc_control_B.out1_tmp_en = ct[7] * ct[24];
  proc_control_B.out1_tmp_bn = proc_control_B.out1_tmp_fo * ct[23];
  proc_control_B.out1_tmp_po = proc_control_B.out1_tmp_nz * ct[23];
  proc_control_B.out1_tmp_p2 = proc_control_B.out1_tmp_p4 * ct[23];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_hq * ct[21];
  proc_control_B.out1_tmp_gr = proc_control_B.t1543_tmp_g * ct[22];
  proc_control_B.out1_tmp_k = ct[7] * ct[23];
  proc_control_B.out1_tmp_k1 = proc_control_B.out1_tmp_po * ct[24];
  proc_control_B.out1_tmp_bw = proc_control_B.out1_tmp_p2 * ct[24];
  proc_control_B.out1_tmp_nj = proc_control_B.out1_tmp_fm * ct[23];
  proc_control_B.out1_tmp_hx = proc_control_B.out1_tmp_gr * ct[24];
  proc_control_B.out1_tmp_cj = ct[6] * ct[23];
  proc_control_B.out1_tmp_myu = ct[6] * ct[25];
  proc_control_B.out1_tmp_dk = proc_control_B.out1_tmp_tmp_l * ct[23];
  proc_control_B.out1_tmp_n4 = proc_control_B.out1_tmp_tmp * ct[23];
  proc_control_B.out1_tmp_bwe = proc_control_B.out1_tmp_tmp_d * ct[23];
  proc_control_B.out1_tmp_p2x = proc_control_B.out1_tmp_tmp * ct[24];
  proc_control_B.out1_tmp_kg = proc_control_B.out1_tmp_tmp_d * ct[24];
  proc_control_B.out1_tmp_cl = proc_control_B.out1_tmp_tmp_l * ct[24];
  proc_control_B.out1_tmp_n2 = proc_control_B.t1543_tmp * ct[22];
  proc_control_B.out1_tmp_nm = proc_control_B.out1_tmp_dw * ct[22];
  proc_control_B.out1_tmp_cd = proc_control_B.out1_tmp_n4 * ct[24];
  proc_control_B.out1_tmp_dkf = proc_control_B.out1_tmp_bwe * ct[24];
  proc_control_B.out1_tmp_nq = proc_control_B.out1_tmp_n2 * ct[23];
  proc_control_B.out1_tmp_guh = proc_control_B.out1_tmp_nm * ct[24];
  proc_control_B.out1_tmp_lx = proc_control_B.out1_tmp_tmp_ie * ct[24];
  proc_control_B.out1_tmp_ge = proc_control_B.out1_tmp_tmp_m * ct[24];
  proc_control_B.out1_tmp_ew = proc_control_B.out1_tmp_tmp_c * ct[24];
  proc_control_B.t1543_tmp_g = ct[13] * ct[24];
  proc_control_B.out1_tmp_gk = ct[9] * ct[25];
  proc_control_B.out1_tmp_dz = ct[15] * ct[25];
  proc_control_B.out1_tmp_g3 = ct[16] * ct[24];
  proc_control_B.out1_tmp_ma = proc_control_B.out1_tmp_nly * ct[24];
  proc_control_B.out1_tmp_dv = proc_control_B.out1_tmp_p40 * ct[24];
  proc_control_B.out1_tmp_jbr = proc_control_B.out1_tmp_aa * ct[24];
  proc_control_B.out1_tmp_nx = ct[13] * ct[23];
  proc_control_B.out1_tmp_ju = ct[15] * ct[23];
  proc_control_B.out1_tmp_gm = ct[16] * ct[23];
  proc_control_B.out1_tmp_efd = proc_control_B.out1_tmp_bs * ct[24];
  proc_control_B.out1_tmp_ey = proc_control_B.out1_tmp_iw * ct[24];
  proc_control_B.out1_tmp_dl = proc_control_B.out1_tmp_oq * ct[24];
  proc_control_B.out1_tmp_pm = proc_control_B.out1_tmp_b1 * ct[24];
  proc_control_B.out1_tmp_tmp_g = proc_control_B.out1_tmp_aw * ct[23];
  proc_control_B.out1_tmp_tmp_e = proc_control_B.out1_tmp_tmp_df * ct[23];
  proc_control_B.out1_tmp_tmp_eq = ((((((((((((ct[408] - ct[413]) - ct[522]) -
    ct[524]) - ct[677]) - ct[682]) + ct[691]) + ct[692]) - ct[878]) + ct[887]) +
    ct[889]) + ct[931]) - ct[936]) + ct[148];
  proc_control_B.out1_tmp_tmp_ie = proc_control_B.out1_tmp_nx * ct[24];
  proc_control_B.out1_tmp_tmp_m = proc_control_B.out1_tmp_gm * ct[24];
  proc_control_B.out1_tmp_tmp_c = -ct[9] * ct[23];
  proc_control_B.out1_tmp_o5 = ct[9] * ct[23];
  proc_control_B.out1_tmp_du = proc_control_B.out1_tmp_o5 * ct[25];
  proc_control_B.out1_tmp_lm = proc_control_B.out1_tmp_ju * ct[25];
  proc_control_B.out1_tmp_fu = ((((((((((((ct[407] - ct[412]) - ct[525]) - ct
    [526]) - ct[675]) - ct[685]) + ct[689]) + ct[693]) - ct[879]) + ct[888]) +
    ct[891]) + ct[932]) - ct[937]) + ct[147];
  out1[10] =
    ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_pv - ct
    [630]) + ct[642]) + ct[651]) + ct[653]) + ct[659]) - ct[678]) - ct[683]) -
    ct[800]) - ct[817]) - ct[828]) - ct[839]) - ct[843]) + ct[857]) + ct[866]) +
    ct[872]) - ct[882]) + ct[922]) + ct[98]) + ct[110]) + ct[114]) + ct[116]) +
    ct[117]) - ct[137]) - ct[144]) - ct[6] * ct[523] * ct[616]) +
                     proc_control_B.out1_tmp_tmp_k * ct[607]) -
                    proc_control_B.out1_tmp_tmp_n * ct[607]) -
                   proc_control_B.out1_tmp_tmp_i * ct[607]) -
                  proc_control_B.out1_tmp_d2 * ct[515] * ct[616]) +
                 proc_control_B.out1_tmp_cj * ct[523] * ct[607]) -
                proc_control_B.out1_tmp_nl * ct[598]) +
               proc_control_B.out1_tmp_o * ct[598]) -
              proc_control_B.out1_tmp_tmp_k * ct[24] * ct[598]) +
             proc_control_B.out1_tmp_tmp_n * ct[24] * ct[598]) +
            proc_control_B.out1_tmp_tmp_i * ct[23] * ct[598]) +
           proc_control_B.out1_tmp_tmp_i * ct[24] * ct[598]) +
          proc_control_B.out1_tmp_d2 * ct[23] * ct[515] * ct[607]) +
         proc_control_B.out1_tmp_nl * ct[24] * ct[31]) -
        proc_control_B.out1_tmp_o * ct[24] * ct[31]) +
       proc_control_B.out1_tmp_ko * ct[20] * ct[23] * ct[24] * ct[31]) *
      proc_control_B.out1_tmp_l1 + ((((((((((((((((((((((((((((((((((((((((ct
    [366] + ct[373]) - ct[374]) + ct[392]) - ct[398]) + ct[600]) - ct[615]) +
    ct[617]) + ct[635]) + ct[663]) + ct[667]) + ct[711]) + ct[803]) + ct[822]) +
    ct[927]) + ct[930]) + ct[1003]) + ct[1009]) + ct[36]) + ct[40]) + ct[194]) +
    ct[197]) + ct[238]) + ct[243]) - proc_control_B.out1_tmp_lx * ct[598]) +
    proc_control_B.out1_tmp_ge * ct[598]) - proc_control_B.out1_tmp_o2 * ct[25] *
    ct[598]) + proc_control_B.out1_tmp_dn * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_ew * ct[598]) - proc_control_B.out1_tmp_ee * ct[25] *
    ct[598]) - proc_control_B.out1_tmp_k4 * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_hq * ct[24] * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_lv * ct[515] * ct[607]) + proc_control_B.t1543_tmp *
              ct[25] * ct[549] * ct[607]) + proc_control_B.out1_tmp_o2 * ct[24] *
             ct[25] * ct[31]) - proc_control_B.out1_tmp_dn * ct[24] * ct[25] *
            ct[31]) + proc_control_B.out1_tmp_lx * ct[25] * ct[31]) -
          proc_control_B.out1_tmp_ge * ct[25] * ct[31]) +
         proc_control_B.out1_tmp_ee * ct[24] * ct[25] * ct[31]) -
        proc_control_B.out1_tmp_ew * ct[25] * ct[31]) *
       proc_control_B.out1_tmp_p3 +
       (((((((((((((((((((((((((((((proc_control_B.out1_tmp_fu -
    proc_control_B.out1_tmp_nz * ct[607]) + proc_control_B.out1_tmp_p4 * ct[607])
    - proc_control_B.out1_tmp_fo * ct[607]) - ct[7] * ct[515] * ct[616]) - ct[7]
    * ct[549] * ct[616]) + proc_control_B.out1_tmp_po * ct[598]) -
    proc_control_B.out1_tmp_p2 * ct[598]) + proc_control_B.out1_tmp_bf * ct[598])
    - proc_control_B.out1_tmp_cx * ct[598]) + proc_control_B.out1_tmp_nz * ct[25]
    * ct[598]) - proc_control_B.out1_tmp_p4 * ct[25] * ct[598]) -
    proc_control_B.out1_tmp_gr * ct[616]) - proc_control_B.out1_tmp_fm * ct[616])
                       + proc_control_B.out1_tmp_bn * ct[598]) +
                      proc_control_B.out1_tmp_fb * ct[598]) +
                     proc_control_B.out1_tmp_fo * ct[25] * ct[598]) +
                    proc_control_B.out1_tmp_k * ct[515] * ct[607]) +
                   proc_control_B.out1_tmp_en * ct[515] * ct[607]) +
                  proc_control_B.out1_tmp_en * ct[549] * ct[607]) +
                 proc_control_B.out1_tmp_pq * ct[549] * ct[607]) +
                proc_control_B.out1_tmp_bn * ct[24] * ct[25]) -
               proc_control_B.out1_tmp_k1 * ct[31]) + proc_control_B.out1_tmp_bw
              * ct[31]) - proc_control_B.out1_tmp_po * ct[25] * ct[31]) +
            proc_control_B.out1_tmp_p2 * ct[25] * ct[31]) -
           proc_control_B.out1_tmp_bf * ct[25] * ct[31]) +
          proc_control_B.out1_tmp_cx * ct[25] * ct[31]) +
         ((((((((((((proc_control_B.out1_tmp_fp * ct[23] * ct[24] * ct[31] -
                     proc_control_B.out1_tmp_bn * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_fb * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_nj * ct[607]) +
                  proc_control_B.out1_tmp_hx * ct[607]) +
                 proc_control_B.out1_tmp_fm * ct[24] * ct[607]) +
                proc_control_B.out1_tmp_gr * ct[25] * ct[607]) -
               proc_control_B.out1_tmp_k * ct[24] * ct[515] * ct[598]) -
              proc_control_B.out1_tmp_en * ct[25] * ct[549] * ct[598]) +
             proc_control_B.out1_tmp_k1 * ct[25]) - proc_control_B.out1_tmp_bw *
            ct[25]) - proc_control_B.out1_tmp_nj * ct[24] * ct[598]) -
          proc_control_B.out1_tmp_hx * ct[25] * ct[598])) *
        proc_control_B.out1_tmp_oo -
        ((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp * ct[607] +
    proc_control_B.out1_tmp_tmp_eq) - proc_control_B.out1_tmp_tmp_d * ct[607]) -
    proc_control_B.out1_tmp_tmp_l * ct[607]) - ct[6] * ct[515] * ct[616]) - ct[6]
    * ct[531] * ct[616]) - proc_control_B.out1_tmp_n4 * ct[598]) +
    proc_control_B.out1_tmp_bwe * ct[598]) - proc_control_B.out1_tmp_p2x * ct
    [598]) + proc_control_B.out1_tmp_kg * ct[598]) - proc_control_B.out1_tmp_gen
    * ct[598]) + proc_control_B.out1_tmp_dp * ct[598]) -
    proc_control_B.out1_tmp_nm * ct[616]) - proc_control_B.out1_tmp_n2 * ct[616])
                       + proc_control_B.out1_tmp_dk * ct[598]) +
                      proc_control_B.out1_tmp_cl * ct[598]) +
                     proc_control_B.out1_tmp_hg * ct[598]) +
                    proc_control_B.out1_tmp_cj * ct[515] * ct[607]) +
                   proc_control_B.out1_tmp_k1y * ct[531] * ct[607]) +
                  proc_control_B.out1_tmp_myu * ct[515] * ct[607]) +
                 proc_control_B.out1_tmp_myu * ct[531] * ct[607]) +
                proc_control_B.out1_tmp_dk * ct[24] * ct[25]) +
               proc_control_B.out1_tmp_cd * ct[31]) -
              proc_control_B.out1_tmp_dkf * ct[31]) + proc_control_B.out1_tmp_n4
             * ct[25] * ct[31]) - proc_control_B.out1_tmp_bwe * ct[25] * ct[31])
           + proc_control_B.out1_tmp_p2x * ct[25] * ct[31]) -
          proc_control_B.out1_tmp_kg * ct[25] * ct[31]) +
         ((((((((((((proc_control_B.out1_tmp_ko * ct[23] * ct[24] * ct[31] -
                     proc_control_B.out1_tmp_dk * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_cl * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_nq * ct[607]) +
                  proc_control_B.out1_tmp_guh * ct[607]) +
                 proc_control_B.out1_tmp_nm * ct[25] * ct[607]) +
                proc_control_B.out1_tmp_n2 * ct[25] * ct[607]) -
               proc_control_B.out1_tmp_cj * ct[25] * ct[515] * ct[598]) -
              proc_control_B.out1_tmp_k1y * ct[25] * ct[531] * ct[598]) -
             proc_control_B.out1_tmp_cd * ct[25]) + proc_control_B.out1_tmp_dkf *
            ct[25]) - proc_control_B.out1_tmp_nq * ct[25] * ct[598]) -
          proc_control_B.out1_tmp_guh * ct[25] * ct[598])) * t1524))) -
     (((((((((((((((((((((((((((((((((((((((((ct[509] + ct[512]) - ct[518]) -
    ct[520]) - ct[871]) - ct[873]) + ct[881]) + ct[884]) - ct[41]) - ct[42]) -
    ct[538] * ct[626]) - proc_control_B.t1542_tmp * ct[607]) +
    proc_control_B.out1_tmp * ct[607]) + proc_control_B.out1_tmp_f * ct[607]) +
    proc_control_B.out1_tmp_c * ct[607]) - proc_control_B.out1_tmp_p * ct[607])
    + ct[9] * ct[515] * ct[616]) + ct[13] * ct[515] * ct[616]) - ct[15] * ct[515]
    * ct[616]) - ct[16] * ct[515] * ct[616]) + ct[23] * ct[538] * ct[616]) + ct
    [24] * ct[515] * ct[531] * ct[616]) + ct[25] * ct[515] * ct[549] * ct[616])
    + proc_control_B.out1_tmp_bs * ct[598]) - proc_control_B.out1_tmp_iw * ct
                       [598]) + proc_control_B.out1_tmp_pb * ct[598]) -
                     proc_control_B.out1_tmp_i1 * ct[598]) +
                    proc_control_B.out1_tmp_b3 * ct[598]) -
                   proc_control_B.out1_tmp_gn * ct[598]) +
                  proc_control_B.out1_tmp_oq * ct[616]) +
                 proc_control_B.out1_tmp_b1 * ct[616]) -
                proc_control_B.out1_tmp_nly * ct[598]) -
               proc_control_B.out1_tmp_p40 * ct[598]) -
              proc_control_B.out1_tmp_ewq * ct[598]) -
             proc_control_B.out1_tmp_e1 * ct[598]) - proc_control_B.out1_tmp_lg *
            ct[598]) - proc_control_B.out1_tmp_cf * ct[598]) +
          proc_control_B.out1_tmp_aa * ct[598]) + proc_control_B.out1_tmp_e5 *
         ct[598]) + proc_control_B.out1_tmp_dwl * ct[598]) +
       (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_c * ct[515] *
    ct[607] - proc_control_B.out1_tmp_nx * ct[515] * ct[607]) -
    proc_control_B.t1543_tmp_g * ct[515] * ct[607]) - proc_control_B.t1543_tmp_g
    * ct[549] * ct[607]) - proc_control_B.out1_tmp_gk * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_gk * ct[531] * ct[607]) + proc_control_B.out1_tmp_ju
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_gm * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_dz * ct[515] * ct[607]) + proc_control_B.out1_tmp_g3
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_dz * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_g3 * ct[549] * ct[607]) - proc_control_B.out1_tmp_ma
    * ct[25]) - proc_control_B.out1_tmp_dv * ct[25]) +
                       proc_control_B.out1_tmp_jbr * ct[25]) -
                      proc_control_B.out1_tmp_efd * ct[31]) +
                     proc_control_B.out1_tmp_ey * ct[31]) -
                    proc_control_B.out1_tmp_bs * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_iw * ct[25] * ct[31]) -
                  proc_control_B.out1_tmp_pb * ct[25] * ct[31]) +
                 proc_control_B.out1_tmp_i1 * ct[25] * ct[31]) +
                proc_control_B.out1_tmp_ma * ct[31]) +
               proc_control_B.out1_tmp_dv * ct[31]) +
              proc_control_B.out1_tmp_nly * ct[25] * ct[31]) +
             proc_control_B.out1_tmp_p40 * ct[25] * ct[31]) +
            proc_control_B.out1_tmp_ewq * ct[25] * ct[31]) +
           proc_control_B.out1_tmp_e1 * ct[25] * ct[31]) -
          proc_control_B.out1_tmp_jbr * ct[31]) - proc_control_B.out1_tmp_dl *
         ct[607]) - proc_control_B.out1_tmp_pm * ct[607])) + (((((((((((((((-ct
    [15] * ct[16] * ct[23] * ct[25] * ct[31] - proc_control_B.out1_tmp_oq * ct
    [25] * ct[607]) - proc_control_B.out1_tmp_b1 * ct[25] * ct[607]) -
    proc_control_B.out1_tmp_e5 * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_tmp_ie * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_du * ct[515] * ct[598]) + ct[9] * ct[24] * ct[25] *
    ct[531] * ct[598]) + proc_control_B.t1543_tmp_g * ct[25] * ct[549] * ct[598])
              - proc_control_B.out1_tmp_lm * ct[515] * ct[598]) -
             proc_control_B.out1_tmp_tmp_m * ct[515] * ct[598]) - ct[15] * ct[24]
            * ct[25] * ct[531] * ct[598]) - proc_control_B.out1_tmp_g3 * ct[25] *
           ct[549] * ct[598]) + proc_control_B.out1_tmp_efd * ct[25]) -
         proc_control_B.out1_tmp_ey * ct[25]) + proc_control_B.out1_tmp_dl * ct
        [25] * ct[598]) + proc_control_B.out1_tmp_pm * ct[25] * ct[598])) *
     proc_control_B.t1465) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_oe - ct[629])
    + ct[643]) + ct[652]) + ct[660]) + ct[666]) - ct[679]) - ct[686]) - ct[808])
    - ct[824]) - ct[827]) - ct[838]) - ct[841]) + ct[860]) + ct[863]) + ct[874])
    - ct[885]) + ct[925]) + ct[104]) + ct[123]) + ct[126]) + ct[127]) + ct[131])
                      - ct[141]) - ct[143]) - ct[7] * ct[523] * ct[616]) -
                   proc_control_B.out1_tmp_aw * ct[607]) +
                  proc_control_B.out1_tmp_tmp_df * ct[607]) -
                 proc_control_B.out1_tmp_tmp_p * ct[607]) -
                proc_control_B.out1_tmp_p2p * ct[515] * ct[616]) +
               proc_control_B.out1_tmp_k * ct[523] * ct[607]) +
              proc_control_B.out1_tmp_tmp_g * ct[598]) -
             proc_control_B.out1_tmp_tmp_e * ct[598]) +
            proc_control_B.out1_tmp_aw * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_tmp_df * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_tmp_p * ct[23] * ct[598]) +
         proc_control_B.out1_tmp_tmp_p * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_p2p * ct[23] * ct[515] * ct[607]) -
       proc_control_B.out1_tmp_tmp_g * ct[25] * ct[31]) +
      proc_control_B.out1_tmp_tmp_e * ct[25] * ct[31]) +
     proc_control_B.out1_tmp_fp * ct[20] * ct[23] * ct[25] * ct[31]) *
    proc_control_B.t1526;
  proc_control_B.t1542_tmp = proc_control_B.out1_tmp_tmp_lw * ct[23];
  proc_control_B.out1_tmp = proc_control_B.out1_tmp_tmp_h * ct[23];
  proc_control_B.out1_tmp_f = proc_control_B.out1_tmp_tmp_ln * ct[23];
  proc_control_B.out1_tmp_c = ct[10] * ct[23];
  proc_control_B.out1_tmp_p = proc_control_B.out1_tmp_ce * ct[24];
  proc_control_B.out1_tmp_nz = proc_control_B.out1_tmp_g * ct[24];
  proc_control_B.out1_tmp_p4 = proc_control_B.out1_tmp_b0 * ct[24];
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_n1 * ct[21];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_ix * ct[22];
  proc_control_B.out1_tmp_en = proc_control_B.out1_tmp_cxz * ct[24];
  proc_control_B.out1_tmp_bn = proc_control_B.out1_tmp_ag * ct[24];
  proc_control_B.out1_tmp_po = proc_control_B.out1_tmp_i2 * ct[24];
  proc_control_B.out1_tmp_p2 = proc_control_B.out1_tmp_nl * ct[23];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_o * ct[23];
  proc_control_B.out1_tmp_gr = ct[8] * ct[25];
  proc_control_B.out1_tmp_k = proc_control_B.out1_tmp_l * ct[23];
  proc_control_B.out1_tmp_k1 = proc_control_B.out1_tmp_i * ct[23];
  proc_control_B.out1_tmp_bw = proc_control_B.out1_tmp_j * ct[23];
  proc_control_B.out1_tmp_ix = proc_control_B.out1_tmp_i * ct[24];
  proc_control_B.out1_tmp_nj = proc_control_B.out1_tmp_j * ct[24];
  proc_control_B.out1_tmp_hx = proc_control_B.out1_tmp_l * ct[24];
  proc_control_B.out1_tmp_cj = proc_control_B.out1_tmp_hq * ct[22];
  proc_control_B.out1_tmp_myu = proc_control_B.t1524 * ct[22];
  proc_control_B.out1_tmp_dk = ct[8] * ct[24];
  proc_control_B.out1_tmp_n4 = proc_control_B.out1_tmp_k1 * ct[24];
  proc_control_B.out1_tmp_bwe = proc_control_B.out1_tmp_bw * ct[24];
  proc_control_B.out1_tmp_p2x = proc_control_B.out1_tmp_cj * ct[23];
  proc_control_B.out1_tmp_kg = proc_control_B.out1_tmp_myu * ct[24];
  proc_control_B.out1_tmp_cl = ct[5] * ct[25];
  proc_control_B.out1_tmp_n2 = ct[14] * ct[25];
  proc_control_B.out1_tmp_nm = proc_control_B.out1_tmp_ob * ct[24];
  proc_control_B.out1_tmp_cd = proc_control_B.out1_tmp_pr * ct[24];
  proc_control_B.out1_tmp_dkf = ct[5] * ct[24];
  proc_control_B.out1_tmp_nq = ct[14] * ct[24];
  proc_control_B.out1_tmp_guh = proc_control_B.out1_tmp_chb * ct[24];
  proc_control_B.out1_tmp_lx = proc_control_B.out1_tmp_na * ct[24];
  proc_control_B.out1_tmp_ge = proc_control_B.out1_tmp_ef2 * ct[24];
  proc_control_B.out1_tmp_pv = proc_control_B.out1_tmp_pc * ct[23];
  proc_control_B.out1_tmp_ko = proc_control_B.out1_tmp_kov * ct[23];
  proc_control_B.out1_tmp_bf = proc_control_B.out1_tmp_is * ct[23];
  proc_control_B.out1_tmp_cx = proc_control_B.out1_tmp_ci * ct[23];
  proc_control_B.out1_tmp_fb = ct[10] * ct[24];
  proc_control_B.out1_tmp_oo = proc_control_B.out1_tmp_tmp_na * ct[24];
  proc_control_B.out1_tmp_fo = proc_control_B.out1_tmp_tmp_pn * ct[24];
  proc_control_B.out1_tmp_k1y = ((((((((((((ct[406] - ct[411]) - ct[527]) - ct
    [528]) - ct[681]) - ct[684]) + ct[688]) + ct[690]) - ct[880]) + ct[890]) +
    ct[892]) + ct[934]) - ct[935]) + ct[146];
  proc_control_B.out1_tmp_k4 = ct[5] * ct[23];
  proc_control_B.out1_tmp_ew = proc_control_B.out1_tmp_dkf * ct[25];
  proc_control_B.out1_tmp_hq = ct[14] * ct[23];
  proc_control_B.out1_tmp_p2p = proc_control_B.out1_tmp_nq * ct[25];
  out1[11] = (((((((((((((((((((((((((((((((((((((((((((ct[363] - ct[376]) + ct
    [378]) + ct[399]) + ct[589]) + ct[618]) - ct[619]) + ct[623]) + ct[628]) -
    ct[664]) + ct[670]) + ct[710]) + ct[714]) - ct[803]) + ct[820]) - ct[822]) +
    ct[835]) + ct[918]) + ct[929]) + ct[998]) + ct[1010]) + ct[39]) + ct[239]) +
    ct[242]) + proc_control_B.t1542_tmp * ct[598]) - proc_control_B.out1_tmp *
    ct[598]) - proc_control_B.out1_tmp_iu * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_gy * ct[25] * ct[598]) + proc_control_B.out1_tmp_cv *
    ct[25] * ct[598]) - proc_control_B.out1_tmp_f * ct[598]) +
    proc_control_B.out1_tmp_dw * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_iv * ct[531] * ct[607]) -
    proc_control_B.out1_tmp_c5w * ct[531] * ct[607]) - proc_control_B.t1524 *
                        ct[25] * ct[549] * ct[607]) + proc_control_B.out1_tmp_im
                       * ct[25] * ct[31]) - proc_control_B.t1463 * ct[25] * ct
                      [31]) - proc_control_B.t1542_tmp * ct[25] * ct[31]) +
                    proc_control_B.out1_tmp * ct[25] * ct[31]) -
                   proc_control_B.t1542 * ct[25] * ct[31]) +
                  proc_control_B.out1_tmp_f * ct[25] * ct[31]) *
                 proc_control_B.t1526 -
                 ((((((((((((((((((((((((((((proc_control_B.out1_tmp_ce * ct[607]
    + proc_control_B.out1_tmp_k1y) - proc_control_B.out1_tmp_g * ct[607]) -
    proc_control_B.out1_tmp_b0 * ct[607]) - ct[10] * ct[531] * ct[616]) - ct[10]
    * ct[549] * ct[616]) - proc_control_B.out1_tmp_cxz * ct[598]) +
    proc_control_B.out1_tmp_ag * ct[598]) - proc_control_B.out1_tmp_p * ct[598])
    + proc_control_B.out1_tmp_nz * ct[598]) - proc_control_B.out1_tmp_ce * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_g * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_i2 * ct[598]) - proc_control_B.out1_tmp_nl * ct[616])
    - proc_control_B.out1_tmp_o * ct[616]) + proc_control_B.out1_tmp_p4 * ct[598])
    + proc_control_B.out1_tmp_b0 * ct[25] * ct[598]) + proc_control_B.out1_tmp_c
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_c * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_fb * ct[531] * ct[607]) + proc_control_B.out1_tmp_lt
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_en * ct[31]) -
                        proc_control_B.out1_tmp_bn * ct[31]) +
                       proc_control_B.out1_tmp_cxz * ct[25] * ct[31]) -
                      proc_control_B.out1_tmp_ag * ct[25] * ct[31]) +
                     proc_control_B.out1_tmp_p * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_nz * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_po * ct[31]) +
                  ((((((((((((proc_control_B.out1_tmp_iy * ct[23] * ct[25] * ct
    [31] - proc_control_B.out1_tmp_p4 * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_p2 * ct[607]) + proc_control_B.out1_tmp_fm * ct[607])
    + proc_control_B.out1_tmp_nl * ct[24] * ct[607]) + proc_control_B.out1_tmp_o
    * ct[25] * ct[607]) - proc_control_B.out1_tmp_c * ct[24] * ct[531] * ct[598])
                        - proc_control_B.out1_tmp_c * ct[25] * ct[549] * ct[598])
                       - proc_control_B.out1_tmp_en * ct[25]) +
                      proc_control_B.out1_tmp_bn * ct[25]) +
                     proc_control_B.out1_tmp_po * ct[25]) -
                    proc_control_B.out1_tmp_p2 * ct[24] * ct[598]) -
                   proc_control_B.out1_tmp_fm * ct[25] * ct[598])) *
                 proc_control_B.out1_tmp_ft) -
                ((((((((((((((((((((((((((((proc_control_B.out1_tmp_i * ct[607]
    + proc_control_B.out1_tmp_tmp_eq) - proc_control_B.out1_tmp_j * ct[607]) -
    proc_control_B.out1_tmp_l * ct[607]) - ct[8] * ct[515] * ct[616]) - ct[8] *
    ct[531] * ct[616]) - proc_control_B.out1_tmp_k1 * ct[598]) +
    proc_control_B.out1_tmp_bw * ct[598]) - proc_control_B.out1_tmp_ix * ct[598])
    + proc_control_B.out1_tmp_nj * ct[598]) - proc_control_B.out1_tmp_az * ct
    [598]) + proc_control_B.out1_tmp_ixq * ct[598]) - proc_control_B.out1_tmp_cj
    * ct[616]) - proc_control_B.out1_tmp_myu * ct[616]) +
    proc_control_B.out1_tmp_k * ct[598]) + proc_control_B.out1_tmp_hx * ct[598])
    + proc_control_B.out1_tmp_c3 * ct[598]) + proc_control_B.out1_tmp_mb * ct
    [515] * ct[607]) + proc_control_B.out1_tmp_dk * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_gr * ct[515] * ct[607]) + proc_control_B.out1_tmp_gr
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_k * ct[24] * ct[25]) +
                       proc_control_B.out1_tmp_n4 * ct[31]) -
                      proc_control_B.out1_tmp_bwe * ct[31]) +
                     proc_control_B.out1_tmp_k1 * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_bw * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_ix * ct[25] * ct[31]) -
                  proc_control_B.out1_tmp_nj * ct[25] * ct[31]) +
                 ((((((((((((proc_control_B.out1_tmp_nn * ct[23] * ct[24] * ct
    [31] - proc_control_B.out1_tmp_k * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_hx * ct[25] * ct[31]) + proc_control_B.out1_tmp_p2x *
    ct[607]) + proc_control_B.out1_tmp_kg * ct[607]) +
    proc_control_B.out1_tmp_cj * ct[25] * ct[607]) + proc_control_B.out1_tmp_myu
                        * ct[25] * ct[607]) - proc_control_B.out1_tmp_mb * ct[25]
                       * ct[515] * ct[598]) - proc_control_B.out1_tmp_dk * ct[25]
                      * ct[531] * ct[598]) - proc_control_B.out1_tmp_n4 * ct[25])
                    + proc_control_B.out1_tmp_bwe * ct[25]) -
                   proc_control_B.out1_tmp_p2x * ct[25] * ct[598]) -
                  proc_control_B.out1_tmp_kg * ct[25] * ct[598])) *
                proc_control_B.t1465) -
               (((((((((((((((((((((((((((((((((((((((((ct[506] + ct[512]) - ct
    [516]) - ct[520]) - ct[869]) - ct[873]) + ct[875]) + ct[884]) - ct[41]) -
    ct[44]) - ct[556] * ct[626]) - proc_control_B.out1_tmp_h * ct[607]) +
    proc_control_B.out1_tmp_m * ct[607]) + proc_control_B.out1_tmp_gu * ct[607])
    + proc_control_B.out1_tmp_f0 * ct[607]) - proc_control_B.out1_tmp_gt * ct
    [607]) + ct[5] * ct[531] * ct[616]) + ct[13] * ct[531] * ct[616]) - ct[14] *
    ct[531] * ct[616]) - ct[16] * ct[531] * ct[616]) + ct[24] * ct[556] * ct[616])
    + proc_control_B.t1546_tmp * ct[531] * ct[616]) + ct[25] * ct[531] * ct[549]
    * ct[616]) + proc_control_B.out1_tmp_chb * ct[598]) -
    proc_control_B.out1_tmp_na * ct[598]) + proc_control_B.out1_tmp_bi * ct[598])
    - proc_control_B.out1_tmp_jv * ct[598]) + proc_control_B.out1_tmp_hk * ct
    [598]) - proc_control_B.out1_tmp_iut * ct[598]) -
    proc_control_B.out1_tmp_ef2 * ct[598]) + proc_control_B.out1_tmp_pc * ct[616])
    + proc_control_B.out1_tmp_kov * ct[616]) - proc_control_B.out1_tmp_i3 * ct
    [598]) - proc_control_B.out1_tmp_nlp * ct[598]) - proc_control_B.out1_tmp_ob
                       * ct[598]) - proc_control_B.out1_tmp_fbc * ct[598]) -
                     proc_control_B.out1_tmp_lc * ct[598]) +
                    proc_control_B.out1_tmp_pr * ct[598]) +
                   proc_control_B.out1_tmp_fs * ct[598]) +
                  proc_control_B.out1_tmp_br * ct[598]) +
                 (((((((((((((((((((((((((((((-ct[13] * ct[23] * ct[531] * ct
    [607] - proc_control_B.out1_tmp_nx * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_dkf * ct[531] * ct[607]) -
    proc_control_B.t1543_tmp_g * ct[531] * ct[607]) - proc_control_B.out1_tmp_cl
    * ct[515] * ct[607]) - proc_control_B.out1_tmp_cl * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_nq * ct[531] * ct[607]) + proc_control_B.out1_tmp_n2
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_n2 * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_gm * ct[531] * ct[607]) + proc_control_B.out1_tmp_gm
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_g3 * ct[531] * ct[607]) -
    proc_control_B.out1_tmp_nm * ct[25]) + proc_control_B.out1_tmp_cd * ct[25])
    - proc_control_B.out1_tmp_guh * ct[31]) + proc_control_B.out1_tmp_lx * ct[31])
    - proc_control_B.out1_tmp_chb * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_na * ct[25] * ct[31]) - proc_control_B.out1_tmp_bi *
    ct[25] * ct[31]) + proc_control_B.out1_tmp_jv * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_ge * ct[31]) + proc_control_B.out1_tmp_ef2 * ct[25] *
    ct[31]) + proc_control_B.out1_tmp_i3 * ct[25] * ct[31]) +
                        proc_control_B.out1_tmp_nm * ct[31]) +
                       proc_control_B.out1_tmp_ob * ct[25] * ct[31]) +
                      proc_control_B.out1_tmp_fbc * ct[25] * ct[31]) -
                     proc_control_B.out1_tmp_cd * ct[31]) -
                    proc_control_B.out1_tmp_pr * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_pv * ct[607]) -
                  proc_control_B.out1_tmp_ko * ct[607])) + (((((((((((((((-ct[14]
    * ct[16] * ct[24] * ct[25] * ct[31] - proc_control_B.out1_tmp_pc * ct[25] *
    ct[607]) - proc_control_B.out1_tmp_kov * ct[25] * ct[607]) +
    proc_control_B.out1_tmp_tmp_ie * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_k4 * ct[25] * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_nx * ct[25] * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_ew * ct[531] * ct[598]) - proc_control_B.out1_tmp_hq
    * ct[25] * ct[515] * ct[598]) - proc_control_B.out1_tmp_p2p * ct[531] * ct
    [598]) - proc_control_B.out1_tmp_tmp_m * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_gm * ct[25] * ct[549] * ct[598]) +
    proc_control_B.out1_tmp_guh * ct[25]) - proc_control_B.out1_tmp_lx * ct[25])
    - proc_control_B.out1_tmp_ge * ct[25]) + proc_control_B.out1_tmp_pv * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_ko * ct[25] * ct[598])) * t1524) -
              (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_fy
    - ct[632]) + ct[638]) + ct[649]) + ct[656]) - ct[668]) - ct[672]) - ct[795])
    - ct[809]) - ct[814]) - ct[833]) - ct[840]) + ct[850]) + ct[862]) + ct[870])
    - ct[876]) + ct[916]) + ct[94]) + ct[96]) + ct[100]) + ct[103]) + ct[108]) -
    ct[134]) - ct[140]) - ct[8] * ct[544] * ct[616]) +
    proc_control_B.out1_tmp_is * ct[607]) - proc_control_B.out1_tmp_ci * ct[607])
    - proc_control_B.out1_tmp_gl * ct[607]) - proc_control_B.out1_tmp_iuw * ct
    [531] * ct[616]) + proc_control_B.out1_tmp_dk * ct[544] * ct[607]) -
                        proc_control_B.out1_tmp_bf * ct[598]) +
                       proc_control_B.out1_tmp_cx * ct[598]) -
                      proc_control_B.out1_tmp_is * ct[24] * ct[598]) +
                     proc_control_B.out1_tmp_ci * ct[24] * ct[598]) +
                    proc_control_B.out1_tmp_gl * ct[23] * ct[598]) +
                   proc_control_B.out1_tmp_gl * ct[24] * ct[598]) +
                  proc_control_B.out1_tmp_iuw * ct[24] * ct[531] * ct[607]) +
                 proc_control_B.out1_tmp_bf * ct[24] * ct[31]) -
                proc_control_B.out1_tmp_cx * ct[24] * ct[31]) +
               proc_control_B.out1_tmp_nn * ct[21] * ct[23] * ct[24] * ct[31]) *
              proc_control_B.out1_tmp_l1) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b11 - ct[631])
    + ct[639]) + ct[647]) + ct[658]) + ct[662]) - ct[674]) - ct[680]) - ct[798])
    - ct[808]) - ct[827]) - ct[832]) - ct[844]) + ct[853]) + ct[867]) + ct[874])
    - ct[885]) + ct[926]) + ct[118]) + ct[122]) + ct[123]) + ct[127]) + ct[129])
                      - ct[139]) - ct[145]) - ct[10] * ct[544] * ct[616]) +
                   proc_control_B.out1_tmp_tmp_na * ct[607]) -
                  proc_control_B.out1_tmp_tmp_pn * ct[607]) -
                 proc_control_B.out1_tmp_tmp_o * ct[607]) -
                proc_control_B.out1_tmp_n1 * ct[531] * ct[616]) +
               proc_control_B.out1_tmp_fb * ct[544] * ct[607]) -
              proc_control_B.out1_tmp_oo * ct[598]) + proc_control_B.out1_tmp_fo
             * ct[598]) - proc_control_B.out1_tmp_tmp_na * ct[25] * ct[598]) +
           proc_control_B.out1_tmp_tmp_pn * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_tmp_o * ct[24] * ct[598]) +
         proc_control_B.out1_tmp_tmp_o * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_n1 * ct[24] * ct[531] * ct[607]) +
       proc_control_B.out1_tmp_oo * ct[25] * ct[31]) -
      proc_control_B.out1_tmp_fo * ct[25] * ct[31]) + proc_control_B.out1_tmp_iy
     * ct[21] * ct[24] * ct[25] * ct[31]) * (-proc_control_B.t1464 *
    proc_control_B.t1546);
  proc_control_B.t1542_tmp = proc_control_B.out1_tmp_mp * ct[22];
  proc_control_B.out1_tmp = proc_control_B.out1_tmp_ch * ct[22];
  proc_control_B.out1_tmp_f = proc_control_B.out1_tmp_g4 * ct[22];
  proc_control_B.out1_tmp_c = proc_control_B.t1542_tmp * ct[24];
  proc_control_B.out1_tmp_p = proc_control_B.out1_tmp * ct[24];
  proc_control_B.out1_tmp_h = proc_control_B.out1_tmp_d * ct[23];
  proc_control_B.out1_tmp_m = proc_control_B.out1_tmp_my * ct[23];
  proc_control_B.out1_tmp_nz = proc_control_B.out1_tmp_fi * ct[23];
  proc_control_B.out1_tmp_p4 = ct[12] * ct[23];
  proc_control_B.out1_tmp_i = ct[12] * ct[25];
  proc_control_B.out1_tmp_j = proc_control_B.out1_tmp_mp * ct[24];
  proc_control_B.out1_tmp_l = proc_control_B.out1_tmp_ch * ct[24];
  proc_control_B.out1_tmp_ce = proc_control_B.out1_tmp_g4 * ct[24];
  proc_control_B.out1_tmp_g = proc_control_B.out1_tmp_gz * ct[22];
  proc_control_B.out1_tmp_d = proc_control_B.out1_tmp_ap * ct[21];
  proc_control_B.out1_tmp_my = proc_control_B.out1_tmp_oec * ct[24];
  proc_control_B.out1_tmp_fi = proc_control_B.out1_tmp_d5 * ct[24];
  proc_control_B.out1_tmp_nl = proc_control_B.out1_tmp_gq * ct[24];
  proc_control_B.out1_tmp_o = proc_control_B.out1_tmp_d * ct[23];
  proc_control_B.out1_tmp_en = proc_control_B.out1_tmp_g * ct[23];
  proc_control_B.out1_tmp_bn = proc_control_B.out1_tmp_pc2 * ct[24];
  proc_control_B.out1_tmp_po = proc_control_B.out1_tmp_fmm * ct[24];
  proc_control_B.out1_tmp_p2 = proc_control_B.out1_tmp_ih * ct[24];
  proc_control_B.out1_tmp_ap = proc_control_B.out1_tmp_cc * ct[24];
  proc_control_B.out1_tmp_fm = proc_control_B.out1_tmp_df * ct[24];
  proc_control_B.out1_tmp_gr = proc_control_B.out1_tmp_fn * ct[23];
  proc_control_B.out1_tmp_b0 = ct[11] * ct[24];
  proc_control_B.out1_tmp_k = proc_control_B.out1_tmp_ev * ct[23];
  proc_control_B.out1_tmp_k1 = proc_control_B.out1_tmp_c5 * ct[23];
  proc_control_B.out1_tmp_bw = proc_control_B.out1_tmp_ly * ct[23];
  proc_control_B.out1_tmp_ix = proc_control_B.t1543_tmp * ct[21];
  proc_control_B.out1_tmp_nj = proc_control_B.out1_tmp_ltq * ct[22];
  proc_control_B.out1_tmp_hx = proc_control_B.out1_tmp_k1 * ct[24];
  proc_control_B.out1_tmp_gu = proc_control_B.out1_tmp_bw * ct[24];
  proc_control_B.out1_tmp_f0 = proc_control_B.out1_tmp_ix * ct[23];
  proc_control_B.out1_tmp_gt = proc_control_B.out1_tmp_nj * ct[24];
  proc_control_B.out1_tmp_cj = ct[11] * ct[25];
  proc_control_B.out1_tmp_myu = proc_control_B.out1_tmp_c5 * ct[22];
  proc_control_B.out1_tmp_dk = proc_control_B.out1_tmp_ly * ct[22];
  proc_control_B.out1_tmp_n4 = proc_control_B.out1_tmp_ev * ct[22];
  proc_control_B.out1_tmp_bwe = proc_control_B.out1_tmp_myu * ct[23];
  proc_control_B.out1_tmp_p2x = proc_control_B.out1_tmp_dk * ct[23];
  out1[12] = (((((((((((((((((((((((((((((((((((((((((((ct[367] + ct[375]) + ct
    [393]) + ct[590]) + ct[605]) + ct[624]) + ct[628]) + ct[667]) + ct[712]) +
    ct[713]) + ct[715]) + ct[820]) + ct[835]) + ct[915]) + ct[928]) + ct[999]) +
    ct[1004]) + ct[1009]) + ct[38]) + ct[39]) + ct[194]) + ct[197]) + ct[237]) +
    ct[241]) - proc_control_B.out1_tmp_h * ct[598]) + proc_control_B.out1_tmp_m *
    ct[598]) - proc_control_B.out1_tmp_ls * ct[24] * ct[598]) +
    proc_control_B.out1_tmp_dr * ct[24] * ct[598]) + proc_control_B.out1_tmp_ku *
    ct[24] * ct[598]) - proc_control_B.out1_tmp_nz * ct[598]) +
    proc_control_B.out1_tmp_ef * ct[23] * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_cm * ct[549] * ct[607]) - proc_control_B.out1_tmp_a5
    * ct[24] * ct[531] * ct[607]) - proc_control_B.out1_tmp_jc * ct[549] * ct
                        [607]) + proc_control_B.out1_tmp_ei * ct[24] * ct[31]) -
                      proc_control_B.out1_tmp_pw * ct[24] * ct[31]) +
                     proc_control_B.out1_tmp_h * ct[24] * ct[31]) -
                    proc_control_B.out1_tmp_m * ct[24] * ct[31]) -
                   proc_control_B.out1_tmp_np * ct[24] * ct[31]) +
                  proc_control_B.out1_tmp_nz * ct[24] * ct[31]) *
                 proc_control_B.out1_tmp_l1 -
                 ((((((((((((((((((((((((((((proc_control_B.out1_tmp_mp * ct[607]
    + proc_control_B.out1_tmp_k1y) - proc_control_B.out1_tmp_ch * ct[607]) -
    proc_control_B.out1_tmp_g4 * ct[607]) - ct[12] * ct[531] * ct[616]) - ct[12]
    * ct[549] * ct[616]) - proc_control_B.out1_tmp_oec * ct[598]) +
    proc_control_B.out1_tmp_d5 * ct[598]) - proc_control_B.out1_tmp_j * ct[598])
    + proc_control_B.out1_tmp_l * ct[598]) - proc_control_B.out1_tmp_mp * ct[25]
    * ct[598]) + proc_control_B.out1_tmp_ch * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_gq * ct[598]) - proc_control_B.out1_tmp_g * ct[616])
    - proc_control_B.out1_tmp_d * ct[616]) + proc_control_B.out1_tmp_ce * ct[598])
    + proc_control_B.out1_tmp_g4 * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_p4 * ct[531] * ct[607]) + proc_control_B.out1_tmp_p4
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_il * ct[531] * ct[607]) +
    proc_control_B.out1_tmp_i * ct[549] * ct[607]) + proc_control_B.out1_tmp_my *
    ct[31]) - proc_control_B.out1_tmp_fi * ct[31]) + proc_control_B.out1_tmp_oec
                       * ct[25] * ct[31]) - proc_control_B.out1_tmp_d5 * ct[25] *
                      ct[31]) + proc_control_B.out1_tmp_j * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_l * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_nl * ct[31]) +
                  ((((((((((((proc_control_B.out1_tmp_o1 * ct[23] * ct[25] * ct
    [31] - proc_control_B.out1_tmp_ce * ct[25] * ct[31]) +
    proc_control_B.out1_tmp_en * ct[607]) + proc_control_B.out1_tmp_o * ct[607])
    + proc_control_B.out1_tmp_d * ct[24] * ct[607]) + proc_control_B.out1_tmp_g *
    ct[25] * ct[607]) - proc_control_B.out1_tmp_p4 * ct[24] * ct[531] * ct[598])
                        - proc_control_B.out1_tmp_p4 * ct[25] * ct[549] * ct[598])
                       - proc_control_B.out1_tmp_my * ct[25]) +
                      proc_control_B.out1_tmp_fi * ct[25]) +
                     proc_control_B.out1_tmp_nl * ct[25]) -
                    proc_control_B.out1_tmp_o * ct[24] * ct[598]) -
                   proc_control_B.out1_tmp_en * ct[25] * ct[598])) * t1524) -
                (((((((((((((((((((((((((((((((((((((((((ct[506] + ct[509]) -
    ct[516]) - ct[518]) - ct[869]) - ct[871]) + ct[875]) + ct[881]) - ct[42]) -
    ct[44]) - ct[570] * ct[626]) - proc_control_B.out1_tmp_a * ct[607]) +
    proc_control_B.out1_tmp_n * ct[607]) + proc_control_B.out1_tmp_f5 * ct[607])
    + proc_control_B.out1_tmp_b * ct[607]) - proc_control_B.out1_tmp_e * ct[607])
    + ct[5] * ct[549] * ct[616]) + ct[9] * ct[549] * ct[616]) - ct[14] * ct[549]
    * ct[616]) - ct[15] * ct[549] * ct[616]) + ct[25] * ct[570] * ct[616]) +
    proc_control_B.t1546_tmp * ct[549] * ct[616]) + proc_control_B.t1546_tmp_b *
    ct[549] * ct[616]) + proc_control_B.out1_tmp_ih * ct[598]) -
    proc_control_B.out1_tmp_cc * ct[598]) + proc_control_B.out1_tmp_bv * ct[598])
    - proc_control_B.out1_tmp_gh * ct[598]) + proc_control_B.out1_tmp_ni * ct
    [598]) - proc_control_B.out1_tmp_mm * ct[598]) - proc_control_B.out1_tmp_df *
    ct[598]) + proc_control_B.out1_tmp_fn * ct[616]) +
    proc_control_B.out1_tmp_j1 * ct[616]) - proc_control_B.out1_tmp_eq * ct[598])
    - proc_control_B.out1_tmp_pc2 * ct[598]) - proc_control_B.out1_tmp_jb * ct
                        [598]) - proc_control_B.out1_tmp_dd * ct[598]) -
                      proc_control_B.out1_tmp_ng * ct[598]) +
                     proc_control_B.out1_tmp_fmm * ct[598]) +
                    proc_control_B.out1_tmp_n5 * ct[598]) +
                   proc_control_B.out1_tmp_d1 * ct[598]) +
                  (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_c *
    ct[531] * ct[607] - proc_control_B.out1_tmp_o5 * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_dkf * ct[515] * ct[607]) -
    proc_control_B.out1_tmp_dkf * ct[549] * ct[607]) -
    proc_control_B.out1_tmp_cl * ct[549] * ct[607]) - proc_control_B.out1_tmp_gk
    * ct[549] * ct[607]) + proc_control_B.out1_tmp_nq * ct[515] * ct[607]) +
    proc_control_B.out1_tmp_nq * ct[549] * ct[607]) + proc_control_B.out1_tmp_ju
    * ct[531] * ct[607]) + proc_control_B.out1_tmp_ju * ct[549] * ct[607]) +
    proc_control_B.out1_tmp_n2 * ct[549] * ct[607]) + proc_control_B.out1_tmp_dz
    * ct[549] * ct[607]) - proc_control_B.out1_tmp_bn * ct[25]) +
    proc_control_B.out1_tmp_po * ct[25]) - proc_control_B.out1_tmp_p2 * ct[31])
    + proc_control_B.out1_tmp_ap * ct[31]) - proc_control_B.out1_tmp_ih * ct[25]
    * ct[31]) + proc_control_B.out1_tmp_cc * ct[25] * ct[31]) -
    proc_control_B.out1_tmp_bv * ct[25] * ct[31]) + proc_control_B.out1_tmp_gh *
    ct[25] * ct[31]) + proc_control_B.out1_tmp_fm * ct[31]) +
    proc_control_B.out1_tmp_df * ct[25] * ct[31]) + proc_control_B.out1_tmp_bn *
    ct[31]) + proc_control_B.out1_tmp_eq * ct[25] * ct[31]) +
                        proc_control_B.out1_tmp_pc2 * ct[25] * ct[31]) +
                       proc_control_B.out1_tmp_dd * ct[25] * ct[31]) -
                      proc_control_B.out1_tmp_po * ct[31]) -
                     proc_control_B.out1_tmp_fmm * ct[25] * ct[31]) -
                    proc_control_B.out1_tmp_n5 * ct[25] * ct[31]) -
                   proc_control_B.out1_tmp_gr * ct[607])) + (((((((((((((((-ct[8]
    * ct[20] * ct[21] * ct[23] * ct[607] - proc_control_B.out1_tmp_fn * ct[24] *
    ct[607]) - proc_control_B.out1_tmp_j1 * ct[24] * ct[607]) +
    proc_control_B.out1_tmp_k4 * ct[24] * ct[515] * ct[598]) +
    proc_control_B.out1_tmp_o5 * ct[24] * ct[531] * ct[598]) +
    proc_control_B.out1_tmp_du * ct[549] * ct[598]) + proc_control_B.out1_tmp_ew
    * ct[549] * ct[598]) - proc_control_B.out1_tmp_hq * ct[24] * ct[515] * ct
    [598]) - proc_control_B.out1_tmp_ju * ct[24] * ct[531] * ct[598]) -
    proc_control_B.out1_tmp_p2p * ct[549] * ct[598]) -
    proc_control_B.out1_tmp_lm * ct[549] * ct[598]) + proc_control_B.out1_tmp_p2
    * ct[25]) - proc_control_B.out1_tmp_ap * ct[25]) -
    proc_control_B.out1_tmp_fm * ct[25]) + proc_control_B.out1_tmp_gr * ct[24] *
    ct[598]) + proc_control_B.out1_tmp_j1 * ct[23] * ct[24] * ct[598])) *
                proc_control_B.out1_tmp_ft) -
               ((((((((((((((((((((((((((((proc_control_B.out1_tmp_fu -
    proc_control_B.out1_tmp_c5 * ct[607]) + proc_control_B.out1_tmp_ly * ct[607])
    - proc_control_B.out1_tmp_ev * ct[607]) - ct[11] * ct[515] * ct[616]) - ct
    [11] * ct[549] * ct[616]) + proc_control_B.out1_tmp_k1 * ct[598]) -
    proc_control_B.out1_tmp_bw * ct[598]) + proc_control_B.out1_tmp_jf * ct[598])
    - proc_control_B.out1_tmp_geq * ct[598]) + proc_control_B.out1_tmp_c5 * ct
    [25] * ct[598]) - proc_control_B.out1_tmp_ly * ct[25] * ct[598]) -
    proc_control_B.out1_tmp_nj * ct[616]) - proc_control_B.out1_tmp_ix * ct[616])
    + proc_control_B.out1_tmp_k * ct[598]) + proc_control_B.out1_tmp_kt * ct[598])
    + proc_control_B.out1_tmp_ev * ct[25] * ct[598]) +
    proc_control_B.out1_tmp_px * ct[515] * ct[607]) + proc_control_B.out1_tmp_b0
    * ct[515] * ct[607]) + proc_control_B.out1_tmp_b0 * ct[549] * ct[607]) +
                        proc_control_B.out1_tmp_cj * ct[549] * ct[607]) +
                       proc_control_B.out1_tmp_k * ct[24] * ct[25]) -
                      proc_control_B.out1_tmp_hx * ct[31]) +
                     proc_control_B.out1_tmp_gu * ct[31]) -
                    proc_control_B.out1_tmp_k1 * ct[25] * ct[31]) +
                   proc_control_B.out1_tmp_bw * ct[25] * ct[31]) -
                  proc_control_B.out1_tmp_jf * ct[25] * ct[31]) +
                 proc_control_B.out1_tmp_geq * ct[25] * ct[31]) +
                ((((((((((((out1_tmp * ct[23] * ct[24] * ct[31] -
    proc_control_B.out1_tmp_k * ct[25] * ct[31]) - proc_control_B.out1_tmp_kt *
    ct[25] * ct[31]) + proc_control_B.out1_tmp_f0 * ct[607]) +
    proc_control_B.out1_tmp_gt * ct[607]) + proc_control_B.out1_tmp_ix * ct[24] *
                        ct[607]) + proc_control_B.out1_tmp_nj * ct[25] * ct[607])
                      - proc_control_B.out1_tmp_px * ct[24] * ct[515] * ct[598])
                     - proc_control_B.out1_tmp_b0 * ct[25] * ct[549] * ct[598])
                    + proc_control_B.out1_tmp_hx * ct[25]) -
                   proc_control_B.out1_tmp_gu * ct[25]) -
                  proc_control_B.out1_tmp_f0 * ct[24] * ct[598]) -
                 proc_control_B.out1_tmp_gt * ct[25] * ct[598])) *
               proc_control_B.t1465) +
              ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_by
    - ct[633]) + ct[637]) + ct[645]) + ct[650]) + ct[657]) - ct[669]) - ct[673])
    - ct[796]) - ct[800]) - ct[813]) - ct[823]) - ct[839]) + ct[851]) + ct[859])
    + ct[872]) - ct[882]) + ct[923]) + ct[109]) + ct[110]) + ct[112]) + ct[116])
    + ct[125]) - ct[135]) - ct[142]) - ct[12] * ct[562] * ct[616]) +
    proc_control_B.t1542_tmp * ct[607]) - proc_control_B.out1_tmp * ct[607]) -
    proc_control_B.out1_tmp_f * ct[607]) - proc_control_B.out1_tmp_gz * ct[549] *
    ct[616]) + proc_control_B.out1_tmp_i * ct[562] * ct[607]) -
                        proc_control_B.out1_tmp_c * ct[598]) +
                       proc_control_B.out1_tmp_p * ct[598]) -
                      proc_control_B.t1542_tmp * ct[25] * ct[598]) +
                     proc_control_B.out1_tmp * ct[25] * ct[598]) +
                    proc_control_B.out1_tmp_f * ct[24] * ct[598]) +
                   proc_control_B.out1_tmp_f * ct[25] * ct[598]) +
                  proc_control_B.out1_tmp_gz * ct[25] * ct[549] * ct[607]) +
                 proc_control_B.out1_tmp_c * ct[25] * ct[31]) -
                proc_control_B.out1_tmp_p * ct[25] * ct[31]) +
               proc_control_B.out1_tmp_o1 * ct[22] * ct[24] * ct[25] * ct[31]) *
              proc_control_B.out1_tmp_p3) -
    (((((((((((((((((((((((((((((((((((((((out1_tmp_0 - ct[634]) + ct[641]) +
    ct[644]) + ct[655]) - ct[661]) - ct[671]) - ct[797]) - ct[801]) - ct[814]) -
    ct[815]) - ct[833]) + ct[852]) + ct[856]) + ct[870]) - ct[876]) + ct[917]) +
    ct[92]) + ct[96]) + ct[97]) + ct[100]) + ct[121]) - ct[136]) - ct[138]) -
                    ct[11] * ct[562] * ct[616]) - proc_control_B.out1_tmp_myu *
                   ct[607]) + proc_control_B.out1_tmp_dk * ct[607]) -
                 proc_control_B.out1_tmp_n4 * ct[607]) -
                proc_control_B.out1_tmp_ltq * ct[549] * ct[616]) +
               proc_control_B.out1_tmp_cj * ct[562] * ct[607]) +
              proc_control_B.out1_tmp_bwe * ct[598]) -
             proc_control_B.out1_tmp_p2x * ct[598]) +
            proc_control_B.out1_tmp_myu * ct[25] * ct[598]) -
           proc_control_B.out1_tmp_dk * ct[25] * ct[598]) +
          proc_control_B.out1_tmp_n4 * ct[23] * ct[598]) +
         proc_control_B.out1_tmp_n4 * ct[25] * ct[598]) +
        proc_control_B.out1_tmp_ltq * ct[25] * ct[549] * ct[607]) -
       proc_control_B.out1_tmp_bwe * ct[25] * ct[31]) +
      proc_control_B.out1_tmp_p2x * ct[25] * ct[31]) + out1_tmp * ct[22] * ct[23]
     * ct[25] * ct[31]) * proc_control_B.t1526;
}

void proc_control::proc_control_ft_2_pr(const real_T ct[812], real_T out1[13])
{
  // Start for MATLABSystem: '<S295>/MATLAB System'
  proc_control_B.t1164 = ct[21] * ct[22] * ct[23] * ct[311] * ct[440];
  proc_control_B.t1165 = ct[20] * ct[22] * ct[24] * ct[333] * ct[440];
  proc_control_B.t1166 = ct[20] * ct[21] * ct[25] * ct[360] * ct[440];
  proc_control_B.t1466 = (ct[618] + ct[628]) - 1.0;
  proc_control_B.t1488 = ct[126] + ct[278];
  proc_control_B.t1489 = ct[125] + ct[289];
  proc_control_B.t1490 = ct[127] + ct[300];
  proc_control_B.t1491 = ((ct[45] + ct[671]) + ct[132]) + ct[579];
  proc_control_B.t1492 = ((ct[99] + ct[769]) + ct[138]) + ct[588];
  proc_control_B.t1493 = ((ct[36] + ct[123]) + ct[144]) + ct[595];
  proc_control_B.t519 = ct[22] * ct[198];
  proc_control_B.t554 = ct[22] * ct[203];
  std::memcpy(&proc_control_B.ct_o[0], &ct[0], 36U * sizeof(real_T));
  proc_control_B.ct_o[36] = -ct[475];
  proc_control_B.ct_o[37] = ct[37];
  proc_control_B.ct_o[38] = -ct[478];
  proc_control_B.ct_o[39] = -(ct[20] * ct[201]);
  proc_control_B.ct_o[40] = -proc_control_B.t554;
  proc_control_B.ct_o[41] = ct[38];
  proc_control_B.ct_o[42] = ct[39];
  proc_control_B.ct_o[43] = ct[40];
  proc_control_B.ct_o[44] = ct[41];
  proc_control_B.ct_o[45] = ct[470] + ct[654];
  proc_control_B.ct_o[46] = ct[23] * ct[573];
  proc_control_B.ct_o[47] = ct[23] * ct[580];
  proc_control_B.ct_o[48] = ct[23] * ct[586];
  proc_control_B.ct_o[49] = ct[23] * ct[589];
  proc_control_B.ct_o[50] = ct[24] * ct[575];
  proc_control_B.ct_o[51] = ct[24] * ct[580];
  proc_control_B.ct_o[52] = ct[24] * ct[583];
  proc_control_B.ct_o[53] = ct[24] * ct[586];
  proc_control_B.ct_o[54] = ct[25] * ct[573];
  proc_control_B.ct_o[55] = ct[42];
  proc_control_B.ct_o[56] = ct[25] * ct[575];
  proc_control_B.ct_o[57] = ct[25] * ct[583];
  proc_control_B.ct_o[58] = ct[25] * ct[589];
  proc_control_B.ct_o[59] = ct[196] * ct[311];
  proc_control_B.ct_o[60] = ct[22] * ct[612];
  proc_control_B.ct_o[61] = ct[22] * ct[613];
  proc_control_B.ct_o[62] = ct[6] * ct[678];
  proc_control_B.ct_o[63] = ct[21] * ct[620];
  proc_control_B.ct_o[64] = ct[22] * ct[615];
  proc_control_B.ct_o[65] = ct[7] * ct[679];
  proc_control_B.ct_o[66] = ct[22] * ct[625];
  proc_control_B.ct_o[67] = ct[22] * ct[626];
  proc_control_B.ct_o[68] = ct[8] * ct[678];
  proc_control_B.ct_o[69] = ct[197] * ct[333];
  proc_control_B.ct_o[70] = ct[21] * ct[635];
  proc_control_B.ct_o[71] = ct[43];
  proc_control_B.ct_o[72] = ct[22] * ct[633];
  proc_control_B.ct_o[73] = ct[10] * ct[680];
  proc_control_B.ct_o[74] = ct[21] * ct[642];
  proc_control_B.ct_o[75] = ct[22] * ct[641];
  proc_control_B.ct_o[76] = ct[11] * ct[679];
  proc_control_B.ct_o[77] = ct[21] * ct[646];
  proc_control_B.ct_o[78] = ct[22] * ct[644];
  proc_control_B.ct_o[79] = ct[12] * ct[680];
  proc_control_B.ct_o[80] = ct[198] * ct[360];
  proc_control_B.ct_o[81] = ct[44];
  proc_control_B.ct_o[82] = ct[201] * ct[311];
  proc_control_B.ct_o[83] = ct[23] * ct[606];
  proc_control_B.ct_o[84] = ct[202] * ct[333];
  proc_control_B.ct_o[85] = ct[23] * ct[608];
  proc_control_B.ct_o[86] = ct[24] * ct[607];
  proc_control_B.ct_o[87] = ct[203] * ct[360];
  proc_control_B.ct_o[88] = ct[25] * ct[606];
  proc_control_B.ct_o[89] = ct[24] * ct[608];
  proc_control_B.ct_o[90] = ct[25] * ct[607];
  proc_control_B.ct_o[91] = ct[24] * ct[609];
  proc_control_B.ct_o[92] = ct[46];
  proc_control_B.ct_o[93] = ct[6] * ct[687];
  proc_control_B.ct_o[94] = ct[47];
  proc_control_B.ct_o[95] = ct[7] * ct[688];
  proc_control_B.ct_o[96] = ct[48];
  proc_control_B.ct_o[97] = ct[49];
  proc_control_B.ct_o[98] = ct[50];
  proc_control_B.ct_o[99] = ct[8] * ct[687];
  proc_control_B.ct_o[100] = ct[51];
  proc_control_B.ct_o[101] = ct[52];
  proc_control_B.ct_o[102] = ct[11] * ct[688];
  proc_control_B.ct_o[103] = ct[53];
  proc_control_B.ct_o[104] = ct[54];
  proc_control_B.ct_o[105] = ct[23] * ct[656];
  proc_control_B.ct_o[106] = ct[23] * ct[657];
  proc_control_B.ct_o[107] = ct[25] * ct[609];
  proc_control_B.ct_o[108] = ct[55];
  proc_control_B.ct_o[109] = ct[56];
  proc_control_B.ct_o[110] = ct[57];
  proc_control_B.ct_o[111] = ct[6] * ct[689];
  proc_control_B.ct_o[112] = ct[58];
  proc_control_B.ct_o[113] = ct[8] * ct[689];
  proc_control_B.ct_o[114] = ct[59];
  proc_control_B.ct_o[115] = ct[10] * ct[690];
  proc_control_B.ct_o[116] = ct[60];
  proc_control_B.ct_o[117] = ct[61];
  proc_control_B.ct_o[118] = ct[62];
  proc_control_B.ct_o[119] = ct[12] * ct[690];
  proc_control_B.ct_o[120] = ct[24] * ct[656];
  proc_control_B.ct_o[121] = ct[63];
  proc_control_B.ct_o[122] = ct[64];
  proc_control_B.ct_o[123] = ct[65];
  proc_control_B.ct_o[124] = ct[7] * ct[691];
  proc_control_B.ct_o[125] = ct[66];
  proc_control_B.ct_o[126] = ct[67];
  proc_control_B.ct_o[127] = ct[68];
  proc_control_B.ct_o[128] = ct[10] * ct[692];
  proc_control_B.ct_o[129] = ct[69];
  proc_control_B.ct_o[130] = ct[11] * ct[691];
  proc_control_B.ct_o[131] = ct[70];
  proc_control_B.ct_o[132] = ct[12] * ct[692];
  proc_control_B.ct_o[133] = ct[25] * ct[657];
  std::memcpy(&proc_control_B.ct_o[134], &ct[71], 12U * sizeof(real_T));
  proc_control_B.ct_o[146] = proc_control_B.t1164;
  proc_control_B.ct_o[147] = proc_control_B.t1165;
  proc_control_B.ct_o[148] = proc_control_B.t1166;
  proc_control_B.ct_o[149] = ct[31] * ct[34] * ct[268];
  proc_control_B.ct_o[150] = -(ct[32] * ct[118]);
  proc_control_B.ct_o[151] = ct[31] * ct[268] * ct[811];
  proc_control_B.ct_o[152] = ct[31] * ct[269] * ct[809];
  proc_control_B.ct_o[153] = ct[31] * ct[270] * ct[808];
  proc_control_B.ct_o[154] = -(ct[33] * ct[119]);
  proc_control_B.ct_o[155] = -(ct[34] * ct[120]);
  proc_control_B.ct_o[156] = -(ct[121] * ct[808]);
  proc_control_B.ct_o[157] = -(ct[122] * ct[809]);
  proc_control_B.ct_o[158] = ct[85];
  proc_control_B.ct_o[159] = ct[87];
  proc_control_B.ct_o[160] = ct[89];
  proc_control_B.ct_o[161] = ct[91];
  proc_control_B.ct_o[162] = ct[93];
  proc_control_B.ct_o[163] = ct[95];
  proc_control_B.ct_o[164] = ct[10] * proc_control_B.t1164;
  proc_control_B.ct_o[165] = ct[12] * proc_control_B.t1164;
  proc_control_B.ct_o[166] = ct[96];
  proc_control_B.ct_o[167] = ct[7] * proc_control_B.t1165;
  proc_control_B.ct_o[168] = ct[11] * proc_control_B.t1165;
  proc_control_B.ct_o[169] = ct[97];
  proc_control_B.ct_o[170] = ct[6] * proc_control_B.t1166;
  proc_control_B.ct_o[171] = ct[8] * proc_control_B.t1166;
  proc_control_B.ct_o[172] = ct[98];
  std::memcpy(&proc_control_B.ct_o[173], &ct[100], 9U * sizeof(real_T));
  proc_control_B.ct_o[182] = -ct[573];
  proc_control_B.ct_o[183] = -ct[575];
  proc_control_B.ct_o[184] = -ct[580];
  proc_control_B.ct_o[185] = ct[115];
  proc_control_B.ct_o[186] = -ct[583];
  proc_control_B.ct_o[187] = -ct[586];
  proc_control_B.ct_o[188] = -ct[589];
  proc_control_B.ct_o[189] = -ct[606];
  proc_control_B.ct_o[190] = -ct[607];
  proc_control_B.ct_o[191] = ct[116];
  proc_control_B.ct_o[192] = -ct[608];
  proc_control_B.ct_o[193] = -ct[609];
  proc_control_B.ct_o[194] = -ct[614];
  proc_control_B.ct_o[195] = -ct[627];
  proc_control_B.ct_o[196] = -ct[635];
  proc_control_B.ct_o[197] = -ct[646];
  proc_control_B.ct_o[198] = -ct[656];
  proc_control_B.ct_o[199] = ct[117];
  proc_control_B.ct_o[200] = -ct[657];
  proc_control_B.ct_o[201] = -ct[667];
  proc_control_B.ct_o[202] = -ct[670];
  proc_control_B.ct_o[203] = -ct[674];
  proc_control_B.ct_o[204] = -ct[695];
  proc_control_B.ct_o[205] = -ct[698];
  proc_control_B.ct_o[206] = -ct[699];
  proc_control_B.ct_o[207] = -ct[702];
  proc_control_B.ct_o[208] = -ct[704];
  proc_control_B.ct_o[209] = -ct[706];
  proc_control_B.ct_o[210] = -ct[708];
  proc_control_B.ct_o[211] = -ct[710];
  proc_control_B.ct_o[212] = -ct[713];
  proc_control_B.ct_o[213] = -ct[715];
  proc_control_B.ct_o[214] = -ct[717];
  proc_control_B.ct_o[215] = -ct[719];
  proc_control_B.ct_o[216] = -ct[720];
  proc_control_B.ct_o[217] = -ct[724];
  proc_control_B.ct_o[218] = -ct[725];
  proc_control_B.ct_o[219] = -ct[727];
  proc_control_B.ct_o[220] = -ct[728];
  proc_control_B.ct_o[221] = -ct[729];
  proc_control_B.ct_o[222] = -ct[730];
  proc_control_B.ct_o[223] = -ct[731];
  proc_control_B.ct_o[224] = -ct[732];
  proc_control_B.ct_o[225] = -ct[733];
  proc_control_B.ct_o[226] = -ct[734];
  proc_control_B.ct_o[227] = -ct[735];
  proc_control_B.ct_o[228] = -ct[736];
  proc_control_B.ct_o[229] = -ct[737];
  proc_control_B.ct_o[230] = -ct[738];
  proc_control_B.ct_o[231] = -ct[739];
  proc_control_B.ct_o[232] = -ct[740];
  proc_control_B.ct_o[233] = -ct[741];
  proc_control_B.ct_o[234] = -ct[742];
  proc_control_B.ct_o[235] = -ct[743];
  proc_control_B.ct_o[236] = -ct[744];
  proc_control_B.ct_o[237] = -ct[753];
  proc_control_B.ct_o[238] = -ct[756];
  proc_control_B.ct_o[239] = -ct[757];
  proc_control_B.ct_o[240] = ct[128];
  proc_control_B.ct_o[241] = -ct[762];
  proc_control_B.ct_o[242] = -ct[764];
  proc_control_B.ct_o[243] = -ct[765];
  proc_control_B.ct_o[244] = ct[5] * ct[38];
  proc_control_B.ct_o[245] = ct[6] * ct[311] * ct[333] * ct[440];
  proc_control_B.ct_o[246] = ct[5] * ct[39];
  proc_control_B.ct_o[247] = ct[129];
  proc_control_B.ct_o[248] = ct[7] * ct[311] * ct[360] * ct[440];
  proc_control_B.ct_o[249] = ct[8] * ct[311] * ct[333] * ct[440];
  proc_control_B.ct_o[250] = ct[9] * ct[38];
  proc_control_B.ct_o[251] = ct[9] * ct[41];
  proc_control_B.ct_o[252] = ct[10] * ct[333] * ct[360] * ct[440];
  proc_control_B.ct_o[253] = ct[11] * ct[311] * ct[360] * ct[440];
  proc_control_B.ct_o[254] = ct[12] * ct[333] * ct[360] * ct[440];
  proc_control_B.ct_o[255] = ct[13] * ct[39];
  proc_control_B.ct_o[256] = ct[13] * ct[41];
  proc_control_B.ct_o[257] = -ct[775];
  proc_control_B.ct_o[258] = -ct[777];
  proc_control_B.ct_o[259] = -ct[780];
  proc_control_B.ct_o[260] = -ct[783];
  proc_control_B.ct_o[261] = -ct[784];
  proc_control_B.ct_o[262] = -ct[786];
  proc_control_B.t1164 = ct[24] * ct[333];
  proc_control_B.ct_o[263] = proc_control_B.t1164 * ct[312];
  proc_control_B.t1165 = ct[23] * ct[311];
  proc_control_B.ct_o[264] = proc_control_B.t1165 * ct[315];
  proc_control_B.t1166 = ct[25] * ct[360];
  proc_control_B.ct_o[265] = proc_control_B.t1166 * ct[312];
  proc_control_B.ct_o[266] = ct[130];
  proc_control_B.ct_o[267] = proc_control_B.t1165 * ct[318];
  proc_control_B.ct_o[268] = proc_control_B.t1166 * ct[315];
  proc_control_B.ct_o[269] = proc_control_B.t1164 * ct[318];
  proc_control_B.ct_o[270] = -(ct[23] * ct[574]);
  proc_control_B.ct_o[271] = -(ct[23] * ct[581]);
  proc_control_B.ct_o[272] = -(ct[23] * ct[587]);
  proc_control_B.ct_o[273] = -(ct[23] * ct[591]);
  proc_control_B.ct_o[274] = -(ct[24] * ct[577]);
  proc_control_B.ct_o[275] = -(ct[24] * ct[581]);
  proc_control_B.ct_o[276] = -(ct[24] * ct[584]);
  proc_control_B.ct_o[277] = ct[131];
  proc_control_B.ct_o[278] = -(ct[24] * ct[587]);
  proc_control_B.ct_o[279] = -(ct[25] * ct[574]);
  proc_control_B.ct_o[280] = -(ct[25] * ct[577]);
  proc_control_B.ct_o[281] = -(ct[25] * ct[584]);
  proc_control_B.ct_o[282] = -(ct[25] * ct[591]);
  proc_control_B.ct_o[283] = -(ct[23] * ct[593]);
  proc_control_B.ct_o[284] = -(ct[23] * ct[596]);
  proc_control_B.ct_o[285] = -(ct[24] * ct[594]);
  proc_control_B.ct_o[286] = -(ct[24] * ct[596]);
  proc_control_B.ct_o[287] = -(ct[24] * ct[597]);
  proc_control_B.ct_o[288] = -(ct[23] * ct[598]);
  proc_control_B.ct_o[289] = -(ct[23] * ct[600]);
  proc_control_B.ct_o[290] = -(ct[23] * ct[601]);
  proc_control_B.ct_o[291] = -(ct[25] * ct[593]);
  proc_control_B.ct_o[292] = -(ct[25] * ct[594]);
  proc_control_B.ct_o[293] = -(ct[25] * ct[597]);
  proc_control_B.ct_o[294] = -(ct[23] * ct[602]);
  proc_control_B.ct_o[295] = -(ct[24] * ct[599]);
  proc_control_B.ct_o[296] = -(ct[23] * ct[604]);
  proc_control_B.ct_o[297] = -(ct[23] * ct[605]);
  proc_control_B.ct_o[298] = -(ct[24] * ct[600]);
  proc_control_B.ct_o[299] = -(ct[25] * ct[598]);
  proc_control_B.ct_o[300] = -(ct[24] * ct[602]);
  proc_control_B.ct_o[301] = -(ct[25] * ct[599]);
  proc_control_B.ct_o[302] = -(ct[24] * ct[603]);
  proc_control_B.ct_o[303] = -(ct[24] * ct[604]);
  proc_control_B.ct_o[304] = -(ct[25] * ct[601]);
  proc_control_B.ct_o[305] = -(ct[25] * ct[603]);
  proc_control_B.ct_o[306] = -(ct[25] * ct[605]);
  proc_control_B.ct_o[307] = ct[133];
  proc_control_B.ct_o[308] = ct[134];
  proc_control_B.ct_o[309] = ct[135];
  proc_control_B.ct_o[310] = -(ct[31] * ct[33] * ct[269]);
  proc_control_B.ct_o[311] = -(ct[31] * ct[32] * ct[270]);
  proc_control_B.ct_o[312] = -ct[84];
  proc_control_B.ct_o[313] = -ct[86];
  proc_control_B.ct_o[314] = -ct[88];
  proc_control_B.ct_o[315] = -ct[90];
  proc_control_B.ct_o[316] = -ct[92];
  proc_control_B.ct_o[317] = -ct[94];
  proc_control_B.ct_o[318] = -ct[109];
  proc_control_B.ct_o[319] = -ct[110];
  proc_control_B.ct_o[320] = -ct[111];
  proc_control_B.ct_o[321] = -ct[112];
  proc_control_B.ct_o[322] = -ct[113];
  proc_control_B.ct_o[323] = ct[136];
  proc_control_B.ct_o[324] = -ct[114];
  proc_control_B.t1164 = ct[20] * ct[30] * ct[31];
  proc_control_B.ct_o[325] = proc_control_B.t1164 * ct[694];
  proc_control_B.ct_o[326] = ct[22] * ct[30] * ct[31] * ct[694];
  proc_control_B.ct_o[327] = proc_control_B.t1466;
  proc_control_B.ct_o[328] = -(ct[14] * ct[38]);
  proc_control_B.ct_o[329] = -(ct[14] * ct[39]);
  proc_control_B.ct_o[330] = -(ct[15] * ct[38]);
  proc_control_B.ct_o[331] = ct[137];
  proc_control_B.ct_o[332] = -(ct[15] * ct[41]);
  proc_control_B.ct_o[333] = -(ct[16] * ct[39]);
  proc_control_B.ct_o[334] = -(ct[16] * ct[41]);
  proc_control_B.ct_o[335] = ct[32] * proc_control_B.t1489;
  proc_control_B.ct_o[336] = ct[34] * proc_control_B.t1488;
  proc_control_B.ct_o[337] = ct[139];
  proc_control_B.ct_o[338] = proc_control_B.t1488 * ct[809];
  proc_control_B.ct_o[339] = ct[33] * proc_control_B.t1490;
  proc_control_B.ct_o[340] = proc_control_B.t1489 * ct[811];
  proc_control_B.ct_o[341] = proc_control_B.t1490 * ct[808];
  proc_control_B.ct_o[342] = proc_control_B.t1164 * proc_control_B.t1466;
  proc_control_B.ct_o[343] = ct[21] * ct[30] * ct[31] * proc_control_B.t1466;
  proc_control_B.ct_o[344] = proc_control_erf(ct[83] * ct[569] * 4.0);
  proc_control_B.ct_o[345] = ct[33] * proc_control_B.t1491;
  proc_control_B.ct_o[346] = ct[34] * proc_control_B.t1491;
  proc_control_B.ct_o[347] = ct[32] * proc_control_B.t1492;
  proc_control_B.ct_o[348] = ct[34] * proc_control_B.t1492;
  proc_control_B.ct_o[349] = ct[32] * proc_control_B.t1493;
  proc_control_B.ct_o[350] = ct[33] * proc_control_B.t1493;
  proc_control_B.ct_o[351] = ct[140];
  proc_control_B.ct_o[352] = ct[141];
  proc_control_B.ct_o[353] = ct[142];
  proc_control_B.ct_o[354] = ct[143];
  std::memcpy(&proc_control_B.ct_o[355], &ct[145], 123U * sizeof(real_T));
  proc_control_B.ct_o[478] = ct[271];
  std::memcpy(&proc_control_B.ct_o[479], &ct[275], 38U * sizeof(real_T));
  proc_control_B.ct_o[517] = ct[313];
  proc_control_B.ct_o[518] = ct[315];
  proc_control_B.ct_o[519] = ct[316];
  proc_control_B.ct_o[520] = ct[318];
  proc_control_B.ct_o[521] = ct[319];
  proc_control_B.ct_o[522] = ct[321];
  proc_control_B.ct_o[523] = ct[322];
  proc_control_B.ct_o[524] = ct[323];
  proc_control_B.ct_o[525] = ct[324];
  proc_control_B.ct_o[526] = ct[325];
  proc_control_B.ct_o[527] = ct[326];
  proc_control_B.ct_o[528] = ct[327];
  proc_control_B.ct_o[529] = ct[329];
  proc_control_B.ct_o[530] = ct[330];
  proc_control_B.ct_o[531] = ct[333];
  proc_control_B.ct_o[532] = ct[334];
  proc_control_B.ct_o[533] = ct[336];
  proc_control_B.ct_o[534] = ct[337];
  proc_control_B.ct_o[535] = ct[340];
  proc_control_B.ct_o[536] = ct[342];
  proc_control_B.ct_o[537] = ct[343];
  proc_control_B.ct_o[538] = ct[344];
  proc_control_B.ct_o[539] = ct[347];
  proc_control_B.ct_o[540] = ct[348];
  proc_control_B.ct_o[541] = ct[351];
  proc_control_B.ct_o[542] = ct[352];
  proc_control_B.ct_o[543] = ct[353];
  proc_control_B.ct_o[544] = ct[354];
  proc_control_B.ct_o[545] = ct[355];
  proc_control_B.ct_o[546] = ct[356];
  std::memcpy(&proc_control_B.ct_o[547], &ct[358], 10U * sizeof(real_T));
  proc_control_B.ct_o[557] = ct[368];
  proc_control_B.ct_o[558] = ct[370];
  proc_control_B.ct_o[559] = ct[371];
  proc_control_B.ct_o[560] = ct[373];
  proc_control_B.ct_o[561] = ct[375];
  proc_control_B.ct_o[562] = ct[376];
  proc_control_B.ct_o[563] = ct[378];
  proc_control_B.ct_o[564] = ct[380];
  proc_control_B.ct_o[565] = ct[382];
  proc_control_B.ct_o[566] = ct[383];
  proc_control_B.ct_o[567] = ct[10] * ct[201];
  proc_control_B.ct_o[568] = ct[384];
  proc_control_B.ct_o[569] = ct[385];
  proc_control_B.ct_o[570] = ct[386];
  proc_control_B.ct_o[571] = ct[12] * ct[201];
  proc_control_B.ct_o[572] = ct[387];
  proc_control_B.ct_o[573] = ct[389];
  proc_control_B.ct_o[574] = ct[392];
  proc_control_B.ct_o[575] = ct[394];
  proc_control_B.ct_o[576] = ct[395];
  proc_control_B.ct_o[577] = ct[7] * ct[202];
  proc_control_B.ct_o[578] = ct[396];
  proc_control_B.ct_o[579] = ct[11] * ct[202];
  proc_control_B.ct_o[580] = ct[397];
  proc_control_B.ct_o[581] = ct[400];
  proc_control_B.ct_o[582] = ct[401];
  proc_control_B.ct_o[583] = ct[6] * ct[203];
  proc_control_B.ct_o[584] = ct[402];
  proc_control_B.ct_o[585] = ct[8] * ct[203];
  proc_control_B.ct_o[586] = ct[403];
  std::memcpy(&proc_control_B.ct_o[587], &ct[406], 9U * sizeof(real_T));
  proc_control_B.ct_o[596] = ct[415];
  std::memcpy(&proc_control_B.ct_o[597], &ct[419], 11U * sizeof(real_T));
  proc_control_B.ct_o[608] = ct[430];
  std::memcpy(&proc_control_B.ct_o[609], &ct[433], sizeof(real_T) << 4U);
  proc_control_B.ct_o[625] = ct[449];
  proc_control_B.ct_o[626] = ct[451];
  proc_control_B.ct_o[627] = ct[452];
  proc_control_B.ct_o[628] = ct[20] * ct[196];
  proc_control_B.ct_o[629] = ct[453];
  proc_control_B.ct_o[630] = ct[454];
  proc_control_B.ct_o[631] = ct[455];
  proc_control_B.ct_o[632] = ct[456];
  proc_control_B.ct_o[633] = ct[457];
  proc_control_B.ct_o[634] = ct[458];
  proc_control_B.ct_o[635] = proc_control_B.t519;
  proc_control_B.ct_o[636] = ct[459];
  proc_control_B.ct_o[637] = ct[460];
  proc_control_B.ct_o[638] = ct[461];
  proc_control_B.ct_o[639] = ct[462];
  std::memcpy(&proc_control_B.ct_o[640], &ct[464], 10U * sizeof(real_T));
  proc_control_B.ct_o[650] = ct[474];
  proc_control_B.ct_o[651] = ct[476];
  proc_control_B.ct_o[652] = ct[477];
  std::memcpy(&proc_control_B.ct_o[653], &ct[479], 14U * sizeof(real_T));
  proc_control_B.ct_o[667] = ct[21] * ct[202];
  proc_control_B.ct_o[668] = ct[493];
  proc_control_B.ct_o[669] = ct[494];
  proc_control_B.ct_o[670] = proc_control_B.t554;
  std::memcpy(&proc_control_B.ct_o[671], &ct[495], 23U * sizeof(real_T));
  proc_control_B.ct_o[694] = ct[124] * ct[811];
  std::memcpy(&proc_control_B.ct_o[695], &ct[518], 50U * sizeof(real_T));
  proc_control_B.ct_o[745] = ct[568];
  proc_control_B.ct_o[746] = ct[570];
  proc_control_B.ct_o[747] = ct[571];
  proc_control_B.ct_o[748] = ct[572];
  proc_control_B.ct_o[749] = ct[574];
  proc_control_B.ct_o[750] = ct[9] * ct[302];
  proc_control_B.ct_o[751] = ct[576];
  proc_control_B.ct_o[752] = ct[577];
  proc_control_B.ct_o[753] = ct[5] * ct[305];
  proc_control_B.ct_o[754] = ct[578];
  proc_control_B.ct_o[755] = ct[581];
  proc_control_B.ct_o[756] = ct[13] * ct[302];
  proc_control_B.ct_o[757] = ct[582];
  proc_control_B.ct_o[758] = ct[584];
  proc_control_B.ct_o[759] = ct[5] * ct[308];
  proc_control_B.ct_o[760] = ct[585];
  proc_control_B.ct_o[761] = ct[587];
  proc_control_B.ct_o[762] = ct[13] * ct[305];
  proc_control_B.ct_o[763] = ct[590];
  proc_control_B.ct_o[764] = ct[591];
  proc_control_B.ct_o[765] = ct[9] * ct[308];
  proc_control_B.ct_o[766] = ct[592];
  proc_control_B.ct_o[767] = ct[593];
  proc_control_B.ct_o[768] = ct[9] * ct[312];
  proc_control_B.ct_o[769] = ct[594];
  proc_control_B.ct_o[770] = ct[14] * ct[305];
  proc_control_B.ct_o[771] = ct[596];
  proc_control_B.ct_o[772] = ct[13] * ct[312];
  proc_control_B.ct_o[773] = ct[597];
  proc_control_B.ct_o[774] = ct[14] * ct[308];
  proc_control_B.ct_o[775] = ct[598];
  proc_control_B.ct_o[776] = ct[15] * ct[302];
  proc_control_B.ct_o[777] = ct[599];
  proc_control_B.ct_o[778] = ct[5] * ct[315];
  proc_control_B.ct_o[779] = ct[600];
  proc_control_B.ct_o[780] = ct[13] * ct[315];
  proc_control_B.ct_o[781] = ct[601];
  proc_control_B.ct_o[782] = ct[15] * ct[308];
  proc_control_B.ct_o[783] = ct[602];
  proc_control_B.ct_o[784] = ct[16] * ct[302];
  proc_control_B.ct_o[785] = ct[603];
  proc_control_B.ct_o[786] = ct[5] * ct[318];
  proc_control_B.ct_o[787] = ct[604];
  proc_control_B.ct_o[788] = ct[16] * ct[305];
  proc_control_B.ct_o[789] = ct[605];
  proc_control_B.ct_o[790] = ct[9] * ct[318];
  proc_control_B.ct_o[791] = ct[15] * ct[312];
  proc_control_B.ct_o[792] = ct[14] * ct[315];
  proc_control_B.ct_o[793] = ct[16] * ct[312];
  proc_control_B.ct_o[794] = ct[14] * ct[318];
  proc_control_B.ct_o[795] = ct[610];
  proc_control_B.ct_o[796] = ct[21] * ct[302];
  proc_control_B.ct_o[797] = ct[611];
  proc_control_B.ct_o[798] = ct[22] * ct[302];
  proc_control_B.ct_o[799] = ct[21] * ct[303];
  proc_control_B.ct_o[800] = ct[612];
  proc_control_B.ct_o[801] = ct[613];
  proc_control_B.ct_o[802] = ct[22] * ct[303];
  std::memcpy(&proc_control_B.ct_o[803], &ct[615], 12U * sizeof(real_T));
  proc_control_B.ct_o[815] = ct[20] * ct[305];
  proc_control_B.ct_o[816] = ct[628];
  proc_control_B.ct_o[817] = ct[629];
  proc_control_B.ct_o[818] = ct[630];
  proc_control_B.ct_o[819] = ct[631];
  proc_control_B.ct_o[820] = ct[632];
  proc_control_B.ct_o[821] = ct[20] * ct[306];
  proc_control_B.ct_o[822] = ct[633];
  proc_control_B.ct_o[823] = ct[634];
  proc_control_B.ct_o[824] = ct[22] * ct[305];
  proc_control_B.ct_o[825] = ct[22] * ct[306];
  std::memcpy(&proc_control_B.ct_o[826], &ct[636], 9U * sizeof(real_T));
  proc_control_B.ct_o[835] = ct[645];
  proc_control_B.ct_o[836] = ct[647];
  proc_control_B.ct_o[837] = ct[648];
  proc_control_B.ct_o[838] = ct[649];
  proc_control_B.ct_o[839] = ct[650];
  proc_control_B.ct_o[840] = ct[20] * ct[308];
  proc_control_B.ct_o[841] = ct[651];
  proc_control_B.ct_o[842] = ct[20] * ct[309];
  proc_control_B.ct_o[843] = ct[21] * ct[308];
  proc_control_B.ct_o[844] = ct[652];
  proc_control_B.ct_o[845] = ct[653];
  proc_control_B.ct_o[846] = ct[655];
  proc_control_B.ct_o[847] = ct[21] * ct[309];
  proc_control_B.ct_o[848] = ct[16] * ct[315];
  proc_control_B.ct_o[849] = ct[15] * ct[318];
  proc_control_B.ct_o[850] = ct[658];
  proc_control_B.ct_o[851] = ct[21] * ct[312];
  proc_control_B.ct_o[852] = ct[659];
  proc_control_B.ct_o[853] = ct[22] * ct[312];
  proc_control_B.ct_o[854] = ct[21] * ct[313];
  proc_control_B.ct_o[855] = ct[22] * ct[313];
  proc_control_B.ct_o[856] = ct[20] * ct[315];
  proc_control_B.ct_o[857] = ct[660];
  proc_control_B.ct_o[858] = ct[20] * ct[316];
  proc_control_B.ct_o[859] = ct[661];
  proc_control_B.ct_o[860] = ct[22] * ct[315];
  proc_control_B.ct_o[861] = ct[22] * ct[316];
  proc_control_B.ct_o[862] = ct[20] * ct[318];
  proc_control_B.ct_o[863] = ct[662];
  proc_control_B.ct_o[864] = ct[663];
  proc_control_B.ct_o[865] = ct[20] * ct[319];
  proc_control_B.ct_o[866] = ct[21] * ct[318];
  proc_control_B.ct_o[867] = ct[664];
  proc_control_B.ct_o[868] = ct[21] * ct[319];
  proc_control_B.ct_o[869] = ct[665];
  proc_control_B.ct_o[870] = ct[666];
  proc_control_B.ct_o[871] = ct[668];
  proc_control_B.ct_o[872] = ct[669];
  proc_control_B.ct_o[873] = ct[672];
  proc_control_B.ct_o[874] = ct[673];
  std::memcpy(&proc_control_B.ct_o[875], &ct[675], 19U * sizeof(real_T));
  proc_control_B.ct_o[894] = ct[694];
  proc_control_B.ct_o[895] = ct[696];
  proc_control_B.ct_o[896] = ct[697];
  proc_control_B.ct_o[897] = ct[700];
  proc_control_B.ct_o[898] = ct[701];
  proc_control_B.ct_o[899] = ct[703];
  proc_control_B.ct_o[900] = ct[705];
  proc_control_B.ct_o[901] = ct[707];
  proc_control_B.ct_o[902] = ct[709];
  proc_control_B.ct_o[903] = ct[711];
  proc_control_B.ct_o[904] = ct[712];
  proc_control_B.ct_o[905] = ct[714];
  proc_control_B.ct_o[906] = ct[716];
  proc_control_B.ct_o[907] = ct[718];
  proc_control_B.ct_o[908] = ct[721];
  proc_control_B.ct_o[909] = ct[722];
  proc_control_B.ct_o[910] = ct[723];
  proc_control_B.ct_o[911] = ct[726];
  proc_control_B.ct_o[912] = ct[745];
  proc_control_B.ct_o[913] = ct[746];
  proc_control_B.ct_o[914] = -ct[272];
  proc_control_B.ct_o[915] = ct[747];
  proc_control_B.ct_o[916] = ct[748];
  proc_control_B.ct_o[917] = ct[749];
  proc_control_B.ct_o[918] = ct[750];
  proc_control_B.ct_o[919] = ct[751];
  proc_control_B.ct_o[920] = ct[752];
  proc_control_B.ct_o[921] = -ct[273];
  proc_control_B.ct_o[922] = ct[754];
  proc_control_B.ct_o[923] = ct[755];
  proc_control_B.ct_o[924] = -ct[274];
  proc_control_B.ct_o[925] = ct[758];
  proc_control_B.ct_o[926] = ct[759];
  proc_control_B.ct_o[927] = ct[760];
  proc_control_B.ct_o[928] = ct[761];
  proc_control_B.ct_o[929] = ct[763];
  proc_control_B.ct_o[930] = ct[766];
  proc_control_B.ct_o[931] = ct[767];
  proc_control_B.ct_o[932] = ct[768];
  proc_control_B.ct_o[933] = ct[770];
  proc_control_B.ct_o[934] = ct[771];
  proc_control_B.ct_o[935] = ct[772];
  proc_control_B.ct_o[936] = ct[773];
  proc_control_B.ct_o[937] = ct[774];
  proc_control_B.ct_o[938] = ct[776];
  proc_control_B.ct_o[939] = ct[778];
  proc_control_B.ct_o[940] = ct[779];
  proc_control_B.ct_o[941] = ct[781];
  proc_control_B.ct_o[942] = ct[782];
  proc_control_B.ct_o[943] = ct[785];
  proc_control_B.ct_o[944] = ct[787];
  proc_control_B.ct_o[945] = ct[788];
  proc_control_B.ct_o[946] = ct[789];
  proc_control_B.ct_o[947] = ct[790];
  proc_control_B.ct_o[948] = ct[791];
  proc_control_B.ct_o[949] = ct[792];
  proc_control_B.ct_o[950] = ct[793];
  proc_control_B.ct_o[951] = -ct[302];
  proc_control_B.ct_o[952] = -ct[305];
  proc_control_B.ct_o[953] = -ct[308];
  proc_control_B.ct_o[954] = -ct[314];
  proc_control_B.ct_o[955] = -ct[317];
  proc_control_B.ct_o[956] = -ct[320];
  proc_control_B.ct_o[957] = -ct[328];
  proc_control_B.ct_o[958] = -ct[331];
  proc_control_B.ct_o[959] = -ct[332];
  proc_control_B.ct_o[960] = -ct[335];
  proc_control_B.ct_o[961] = -ct[338];
  proc_control_B.ct_o[962] = -ct[339];
  proc_control_B.ct_o[963] = -ct[341];
  proc_control_B.ct_o[964] = -ct[345];
  proc_control_B.ct_o[965] = -ct[346];
  proc_control_B.ct_o[966] = ct[794];
  proc_control_B.ct_o[967] = -ct[349];
  proc_control_B.ct_o[968] = -ct[350];
  proc_control_B.ct_o[969] = ct[795];
  proc_control_B.ct_o[970] = ct[796];
  proc_control_B.ct_o[971] = -(ct[10] * ct[196]);
  proc_control_B.ct_o[972] = -(ct[7] * ct[197]);
  proc_control_B.ct_o[973] = ct[797];
  proc_control_B.ct_o[974] = -ct[357];
  proc_control_B.ct_o[975] = ct[798];
  proc_control_B.ct_o[976] = -(ct[12] * ct[196]);
  proc_control_B.ct_o[977] = ct[799];
  proc_control_B.ct_o[978] = -(ct[6] * ct[198]);
  proc_control_B.ct_o[979] = ct[800];
  proc_control_B.ct_o[980] = ct[801];
  proc_control_B.ct_o[981] = -(ct[8] * ct[198]);
  proc_control_B.ct_o[982] = -(ct[11] * ct[197]);
  proc_control_B.ct_o[983] = -ct[369];
  proc_control_B.ct_o[984] = -ct[372];
  proc_control_B.ct_o[985] = -ct[374];
  proc_control_B.ct_o[986] = -ct[377];
  proc_control_B.ct_o[987] = -ct[379];
  proc_control_B.ct_o[988] = -ct[381];
  proc_control_B.ct_o[989] = -ct[388];
  proc_control_B.ct_o[990] = -ct[390];
  proc_control_B.ct_o[991] = -ct[391];
  proc_control_B.ct_o[992] = -ct[393];
  proc_control_B.ct_o[993] = -ct[398];
  proc_control_B.ct_o[994] = -ct[399];
  proc_control_B.ct_o[995] = -ct[404];
  proc_control_B.ct_o[996] = -ct[405];
  proc_control_B.ct_o[997] = ct[802];
  proc_control_B.ct_o[998] = ct[803];
  proc_control_B.ct_o[999] = ct[804];
  proc_control_B.ct_o[1000] = -ct[416];
  proc_control_B.ct_o[1001] = -ct[417];
  proc_control_B.ct_o[1002] = -ct[418];
  proc_control_B.ct_o[1003] = ct[805];
  proc_control_B.ct_o[1004] = ct[806];
  proc_control_B.ct_o[1005] = -ct[431];
  proc_control_B.ct_o[1006] = -ct[432];
  proc_control_B.ct_o[1007] = ct[807];
  proc_control_B.ct_o[1008] = -ct[450];
  proc_control_B.ct_o[1009] = -(ct[21] * ct[197]);
  proc_control_B.ct_o[1010] = -proc_control_B.t519;
  proc_control_B.ct_o[1011] = -ct[463];
  proc_control_B.ct_o[1012] = ct[808];
  proc_control_B.ct_o[1013] = ct[809];
  proc_control_B.ct_o[1014] = ct[810];
  proc_control_B.ct_o[1015] = ct[811];
  proc_control_ft_3_pr(proc_control_B.ct_o, out1);
}

void proc_control::proc_control_ft_1_pr(const real_T ct[445], real_T out1[13])
{
  // Start for MATLABSystem: '<S295>/MATLAB System'
  proc_control_B.t898_tmp = ct[19] * ct[26];
  proc_control_B.t898_tmp_i = proc_control_B.t898_tmp * ct[27];
  proc_control_B.t898 = proc_control_B.t898_tmp_i * ct[29] * ct[30] * ct[318];
  proc_control_B.t899_tmp = ct[15] * ct[26];
  proc_control_B.t899_tmp_i = proc_control_B.t899_tmp * ct[28];
  proc_control_B.t899 = proc_control_B.t899_tmp_i * ct[29] * ct[31] * ct[318];
  proc_control_B.t900_tmp = ct[11] * ct[27];
  proc_control_B.t900_tmp_a = proc_control_B.t900_tmp * ct[28];
  proc_control_B.t900 = proc_control_B.t900_tmp_a * ct[30] * ct[31] * ct[318];
  proc_control_B.t901_tmp = ct[20] * ct[27];
  proc_control_B.t901_tmp_l = proc_control_B.t901_tmp * ct[28];
  proc_control_B.t901 = proc_control_B.t901_tmp_l * ct[30] * ct[31] * ct[318];
  proc_control_B.t902_tmp = ct[22] * ct[26];
  proc_control_B.t902_tmp_p = proc_control_B.t902_tmp * ct[27];
  proc_control_B.t902 = proc_control_B.t902_tmp_p * ct[29] * ct[30] * ct[318];
  proc_control_B.t903_tmp = ct[21] * ct[26];
  proc_control_B.t903_tmp_o = proc_control_B.t903_tmp * ct[28];
  proc_control_B.t903 = proc_control_B.t903_tmp_o * ct[29] * ct[31] * ct[318];
  std::memcpy(&proc_control_B.ct_n[0], &ct[6], 38U * sizeof(real_T));
  proc_control_B.ct_n[38] = ct[272] * ct[280] * ct[348];
  proc_control_B.ct_n[39] = ct[272] * ct[290] * ct[348];
  proc_control_B.ct_n[40] = ct[44];
  proc_control_B.ct_n[41] = ct[280] * ct[290] * ct[348];
  proc_control_B.ct_n[42] = ct[45];
  proc_control_B.ct_n[43] = ct[46];
  proc_control_B.ct_n[44] = ct[47];
  proc_control_B.ct_n[45] = ct[48];
  proc_control_B.ct_tmp_c1 = ct[12] * ct[27];
  proc_control_B.ct_n[46] = proc_control_B.ct_tmp_c1 * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_tmp_ok = ct[13] * ct[28];
  proc_control_B.ct_n[47] = proc_control_B.ct_tmp_ok * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_tmp_g = ct[14] * ct[27];
  proc_control_B.ct_n[48] = proc_control_B.ct_tmp_g * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_n[49] = proc_control_B.t899_tmp * ct[29] * ct[280] * ct[329];
  proc_control_B.t899_tmp = ct[15] * ct[27];
  proc_control_B.ct_n[50] = proc_control_B.t899_tmp * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_tmp_gy = ct[17] * ct[28];
  proc_control_B.ct_n[51] = proc_control_B.ct_tmp_gy * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_n[52] = ct[49];
  proc_control_B.ct_n[53] = proc_control_B.t898_tmp * ct[29] * ct[290] * ct[329];
  proc_control_B.t898_tmp = ct[19] * ct[28];
  proc_control_B.ct_n[54] = proc_control_B.t898_tmp * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_tmp = ct[11] * ct[26];
  proc_control_B.ct_n[55] = proc_control_B.ct_tmp * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_n[56] = proc_control_B.t900_tmp * ct[30] * ct[272] * ct[329];
  proc_control_B.t900_tmp = ct[12] * ct[26];
  proc_control_B.ct_n[57] = proc_control_B.t900_tmp * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_tmp_cm = ct[14] * ct[26];
  proc_control_B.ct_n[58] = proc_control_B.ct_tmp_cm * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_tmp_ad = ct[16] * ct[28];
  proc_control_B.ct_n[59] = proc_control_B.ct_tmp_ad * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_tmp_ca = ct[18] * ct[28];
  proc_control_B.ct_n[60] = proc_control_B.ct_tmp_ca * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_n[61] = ct[19] * ct[27] * ct[30] * ct[290] * ct[329];
  proc_control_B.ct_n[62] = proc_control_B.t898_tmp * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_n[63] = proc_control_B.ct_tmp * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_n[64] = ct[11] * ct[28] * ct[31] * ct[272] * ct[329];
  proc_control_B.ct_tmp_om = ct[13] * ct[26];
  proc_control_B.ct_n[65] = proc_control_B.ct_tmp_om * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_n[66] = proc_control_B.t899_tmp * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_n[67] = ct[15] * ct[28] * ct[31] * ct[280] * ct[329];
  proc_control_B.ct_tmp_gf = ct[16] * ct[27];
  proc_control_B.ct_n[68] = proc_control_B.ct_tmp_gf * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_tmp_oc = ct[17] * ct[26];
  proc_control_B.ct_n[69] = proc_control_B.ct_tmp_oc * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_tmp_kn = ct[18] * ct[27];
  proc_control_B.ct_n[70] = proc_control_B.ct_tmp_kn * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_tmp_a = ct[20] * ct[26];
  proc_control_B.ct_n[71] = proc_control_B.ct_tmp_a * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_n[72] = proc_control_B.t901_tmp * ct[30] * ct[272] * ct[329];
  proc_control_B.ct_n[73] = proc_control_B.t903_tmp * ct[29] * ct[280] * ct[329];
  proc_control_B.t901_tmp = ct[21] * ct[27];
  proc_control_B.ct_n[74] = proc_control_B.t901_tmp * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_n[75] = proc_control_B.ct_tmp_a * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_n[76] = ct[20] * ct[28] * ct[31] * ct[272] * ct[329];
  proc_control_B.ct_n[77] = proc_control_B.t902_tmp * ct[29] * ct[290] * ct[329];
  proc_control_B.t902_tmp = ct[22] * ct[28];
  proc_control_B.ct_n[78] = proc_control_B.t902_tmp * ct[29] * ct[272] * ct[329];
  proc_control_B.ct_n[79] = proc_control_B.t901_tmp * ct[31] * ct[290] * ct[329];
  proc_control_B.ct_n[80] = ct[21] * ct[28] * ct[31] * ct[280] * ct[329];
  proc_control_B.ct_n[81] = ct[22] * ct[27] * ct[30] * ct[290] * ct[329];
  proc_control_B.ct_n[82] = proc_control_B.t902_tmp * ct[30] * ct[280] * ct[329];
  proc_control_B.ct_n[83] = ct[414] + ct[425];
  proc_control_B.t903_tmp = ct[11] * ct[19];
  proc_control_B.ct_n[84] = proc_control_B.t903_tmp * ct[29] * ct[30] * ct[272] *
    ct[318];
  proc_control_B.ct_tmp_l = ct[13] * ct[17];
  proc_control_B.ct_n[85] = proc_control_B.ct_tmp_l * ct[29] * ct[30] * ct[272] *
    ct[318];
  proc_control_B.ct_tmp_tmp = ct[15] * ct[19];
  proc_control_B.ct_tmp_f = proc_control_B.ct_tmp_tmp * ct[29];
  proc_control_B.ct_n[86] = proc_control_B.ct_tmp_f * ct[30] * ct[280] * ct[318];
  proc_control_B.ct_tmp_tmp_h = ct[16] * ct[18];
  proc_control_B.ct_tmp_k = proc_control_B.ct_tmp_tmp_h * ct[29];
  proc_control_B.ct_n[87] = proc_control_B.ct_tmp_k * ct[30] * ct[280] * ct[318];
  proc_control_B.ct_tmp_c = ct[11] * ct[15];
  proc_control_B.ct_n[88] = proc_control_B.ct_tmp_c * ct[29] * ct[31] * ct[272] *
    ct[318];
  proc_control_B.ct_tmp_j = ct[12] * ct[14];
  proc_control_B.ct_n[89] = proc_control_B.ct_tmp_j * ct[29] * ct[31] * ct[272] *
    ct[318];
  proc_control_B.ct_n[90] = proc_control_B.ct_tmp_f * ct[31] * ct[290] * ct[318];
  proc_control_B.ct_n[91] = proc_control_B.ct_tmp_k * ct[31] * ct[290] * ct[318];
  proc_control_B.ct_n[92] = proc_control_B.ct_tmp_c * ct[30] * ct[31] * ct[280] *
    ct[318];
  proc_control_B.ct_n[93] = proc_control_B.ct_tmp_j * ct[30] * ct[31] * ct[280] *
    ct[318];
  proc_control_B.ct_n[94] = proc_control_B.t903_tmp * ct[30] * ct[31] * ct[290] *
    ct[318];
  proc_control_B.ct_n[95] = proc_control_B.ct_tmp_l * ct[30] * ct[31] * ct[290] *
    ct[318];
  proc_control_B.ct_tmp_f = ct[19] * ct[20];
  proc_control_B.ct_n[96] = proc_control_B.ct_tmp_f * ct[29] * ct[30] * ct[272] *
    ct[318];
  proc_control_B.ct_tmp_k = ct[15] * ct[20];
  proc_control_B.ct_n[97] = proc_control_B.ct_tmp_k * ct[29] * ct[31] * ct[272] *
    ct[318];
  proc_control_B.ct_tmp_tmp_i = ct[19] * ct[21];
  proc_control_B.ct_tmp_ai = proc_control_B.ct_tmp_tmp_i * ct[29];
  proc_control_B.ct_n[98] = proc_control_B.ct_tmp_ai * ct[30] * ct[280] * ct[318];
  proc_control_B.ct_n[99] = ct[50];
  proc_control_B.ct_n[100] = proc_control_B.ct_tmp_k * ct[30] * ct[31] * ct[280]
    * ct[318];
  proc_control_B.ct_n[101] = proc_control_B.ct_tmp_f * ct[30] * ct[31] * ct[290]
    * ct[318];
  proc_control_B.ct_tmp_i = ct[11] * ct[21];
  proc_control_B.ct_n[102] = proc_control_B.ct_tmp_i * ct[29] * ct[31] * ct[272]
    * ct[318];
  proc_control_B.ct_tmp_b = ct[11] * ct[22];
  proc_control_B.ct_n[103] = proc_control_B.ct_tmp_b * ct[29] * ct[30] * ct[272]
    * ct[318];
  proc_control_B.ct_tmp_tmp_g = ct[15] * ct[22];
  proc_control_B.ct_tmp_o = proc_control_B.ct_tmp_tmp_g * ct[29];
  proc_control_B.ct_n[104] = proc_control_B.ct_tmp_o * ct[30] * ct[280] * ct[318];
  proc_control_B.ct_n[105] = proc_control_B.ct_tmp_ai * ct[31] * ct[290] * ct
    [318];
  proc_control_B.ct_n[106] = proc_control_B.ct_tmp_i * ct[30] * ct[31] * ct[280]
    * ct[318];
  proc_control_B.ct_n[107] = proc_control_B.ct_tmp_o * ct[31] * ct[290] * ct[318];
  proc_control_B.ct_n[108] = proc_control_B.ct_tmp_b * ct[30] * ct[31] * ct[290]
    * ct[318];
  proc_control_B.ct_tmp_ai = ct[20] * ct[21];
  proc_control_B.ct_n[109] = proc_control_B.ct_tmp_ai * ct[29] * ct[31] * ct[272]
    * ct[318];
  proc_control_B.ct_tmp_o = ct[20] * ct[22];
  proc_control_B.ct_n[110] = proc_control_B.ct_tmp_o * ct[29] * ct[30] * ct[272]
    * ct[318];
  proc_control_B.ct_n[111] = proc_control_B.ct_tmp_ai * ct[30] * ct[31] * ct[280]
    * ct[318];
  proc_control_B.ct_tmp_tmp_j = ct[21] * ct[22];
  proc_control_B.ct_tmp_an = proc_control_B.ct_tmp_tmp_j * ct[29];
  proc_control_B.ct_n[112] = proc_control_B.ct_tmp_an * ct[30] * ct[280] * ct
    [318];
  proc_control_B.ct_n[113] = proc_control_B.ct_tmp_o * ct[30] * ct[31] * ct[290]
    * ct[318];
  proc_control_B.ct_n[114] = proc_control_B.ct_tmp_an * ct[31] * ct[290] * ct
    [318];
  proc_control_B.ct_n[115] = ct[51];
  proc_control_B.ct_n[116] = ct[52];
  proc_control_B.ct_n[117] = ct[53];
  proc_control_B.ct_n[118] = ct[3] + ct[405];
  proc_control_B.ct_n[119] = ct[4] + ct[407];
  proc_control_B.ct_n[120] = ct[5] + ct[408];
  proc_control_B.ct_n[121] = ct[0] + ct[409];
  proc_control_B.ct_n[122] = ct[1] + ct[410];
  proc_control_B.ct_n[123] = ct[54];
  proc_control_B.ct_n[124] = ct[2] + ct[411];
  proc_control_B.ct_n[125] = (ct[143] - ct[442]) * ct[37];
  proc_control_B.ct_n[126] = (ct[192] - ct[441]) * ct[37];
  proc_control_B.ct_n[127] = (ct[151] - ct[444]) * ct[37];
  proc_control_B.ct_n[128] = ct[55];
  proc_control_B.ct_n[129] = ct[56];
  proc_control_B.ct_n[130] = ct[59];
  proc_control_B.ct_n[131] = ct[60];
  proc_control_B.ct_n[132] = ct[63];
  proc_control_B.ct_n[133] = ct[64];
  proc_control_B.ct_n[134] = ct[65];
  proc_control_B.ct_n[135] = ct[67];
  proc_control_B.ct_n[136] = ct[70];
  proc_control_B.ct_n[137] = ct[71];
  proc_control_B.ct_n[138] = ct[74];
  proc_control_B.ct_n[139] = ct[75];
  proc_control_B.ct_n[140] = ct[77];
  proc_control_B.ct_n[141] = ct[79];
  proc_control_B.ct_n[142] = ct[81];
  proc_control_B.ct_n[143] = ct[83];
  std::memcpy(&proc_control_B.ct_n[144], &ct[85], 12U * sizeof(real_T));
  proc_control_B.ct_n[156] = ct[97];
  std::memcpy(&proc_control_B.ct_n[157], &ct[99], sizeof(real_T) << 3U);
  proc_control_B.ct_n[165] = ct[107];
  std::memcpy(&proc_control_B.ct_n[166], &ct[109], 13U * sizeof(real_T));
  proc_control_B.ct_n[179] = ct[122];
  std::memcpy(&proc_control_B.ct_n[180], &ct[125], sizeof(real_T) << 4U);
  proc_control_B.ct_n[196] = proc_control_B.t900_tmp_a * ct[338];
  proc_control_B.ct_n[197] = proc_control_B.t899_tmp_i * ct[338];
  proc_control_B.ct_n[198] = proc_control_B.t898_tmp_i * ct[338];
  proc_control_B.ct_n[199] = ct[141];
  proc_control_B.ct_n[200] = ct[142];
  proc_control_B.ct_n[201] = proc_control_B.t901_tmp_l * ct[338];
  proc_control_B.ct_n[202] = proc_control_B.t903_tmp_o * ct[338];
  proc_control_B.ct_n[203] = proc_control_B.t902_tmp_p * ct[338];
  proc_control_B.ct_n[204] = ct[145];
  proc_control_B.ct_n[205] = ct[146];
  proc_control_B.ct_n[206] = ct[149];
  proc_control_B.ct_n[207] = ct[150];
  proc_control_B.ct_n[208] = ct[153];
  proc_control_B.ct_n[209] = ct[155];
  proc_control_B.ct_n[210] = ct[160];
  proc_control_B.ct_n[211] = ct[161];
  proc_control_B.ct_n[212] = ct[164];
  proc_control_B.ct_n[213] = ct[165];
  proc_control_B.ct_n[214] = ct[167];
  proc_control_B.ct_n[215] = ct[170];
  proc_control_B.ct_n[216] = ct[171];
  proc_control_B.ct_n[217] = ct[173];
  proc_control_B.ct_n[218] = ct[176];
  proc_control_B.ct_n[219] = ct[177];
  proc_control_B.ct_n[220] = ct[180];
  proc_control_B.ct_n[221] = ct[182];
  proc_control_B.ct_n[222] = ct[184];
  proc_control_B.ct_n[223] = ct[186];
  proc_control_B.ct_n[224] = ct[188];
  proc_control_B.ct_n[225] = ct[190];
  proc_control_B.ct_n[226] = ct[193];
  proc_control_B.ct_n[227] = ct[195];
  proc_control_B.ct_n[228] = ct[196];
  std::memcpy(&proc_control_B.ct_n[229], &ct[198], 14U * sizeof(real_T));
  proc_control_B.ct_n[243] = ct[212];
  proc_control_B.ct_n[244] = ct[214];
  proc_control_B.ct_n[245] = ct[215];
  proc_control_B.ct_n[246] = ct[216];
  proc_control_B.ct_n[247] = ct[217];
  proc_control_B.ct_n[248] = ct[218];
  proc_control_B.ct_n[249] = ct[219];
  proc_control_B.ct_n[250] = ct[220];
  proc_control_B.ct_n[251] = ct[222];
  proc_control_B.ct_n[252] = ct[224];
  proc_control_B.ct_n[253] = ct[225];
  proc_control_B.ct_n[254] = ct[226];
  std::memcpy(&proc_control_B.ct_n[255], &ct[228], 17U * sizeof(real_T));
  proc_control_B.ct_n[272] = ct[37] * ct[428];
  proc_control_B.ct_n[273] = ct[37] * ct[429];
  proc_control_B.ct_n[274] = ct[37] * ct[430];
  std::memcpy(&proc_control_B.ct_n[275], &ct[245], 27U * sizeof(real_T));
  proc_control_B.ct_n[302] = ct[11] * ct[272] * ct[338];
  proc_control_B.ct_n[303] = ct[11] * ct[274] * ct[338];
  proc_control_B.ct_n[304] = ct[11] * ct[281] * ct[348];
  proc_control_B.ct_n[305] = ct[15] * ct[280] * ct[338];
  proc_control_B.ct_n[306] = ct[15] * ct[285] * ct[338];
  proc_control_B.ct_n[307] = ct[15] * ct[296] * ct[348];
  proc_control_B.ct_n[308] = ct[19] * ct[290] * ct[338];
  proc_control_B.ct_n[309] = ct[19] * ct[297] * ct[338];
  proc_control_B.ct_n[310] = ct[19] * ct[300] * ct[348];
  proc_control_B.ct_n[311] = ct[272];
  proc_control_B.ct_n[312] = ct[20] * ct[272] * ct[338];
  proc_control_B.ct_n[313] = ct[20] * ct[274] * ct[338];
  proc_control_B.ct_n[314] = ct[20] * ct[281] * ct[348];
  proc_control_B.ct_n[315] = ct[21] * ct[280] * ct[338];
  proc_control_B.ct_n[316] = ct[21] * ct[285] * ct[338];
  proc_control_B.ct_n[317] = ct[21] * ct[296] * ct[348];
  proc_control_B.ct_n[318] = ct[22] * ct[290] * ct[338];
  proc_control_B.ct_n[319] = ct[22] * ct[297] * ct[338];
  proc_control_B.ct_n[320] = ct[22] * ct[300] * ct[348];
  proc_control_B.ct_n[321] = ct[273];
  proc_control_B.ct_n[322] = ct[274];
  proc_control_B.ct_n[323] = ct[275];
  proc_control_B.ct_n[324] = ct[276];
  proc_control_B.ct_n[325] = ct[277];
  proc_control_B.ct_n[326] = ct[278];
  proc_control_B.ct_n[327] = ct[279];
  proc_control_B.ct_n[328] = ct[29] * ct[60];
  proc_control_B.ct_n[329] = ct[29] * ct[61];
  proc_control_B.ct_n[330] = ct[29] * ct[62];
  proc_control_B.ct_n[331] = ct[29] * ct[64];
  proc_control_B.ct_n[332] = ct[29] * ct[65];
  proc_control_B.ct_n[333] = ct[280];
  proc_control_B.ct_n[334] = ct[29] * ct[66];
  proc_control_B.ct_n[335] = ct[30] * ct[60];
  proc_control_B.ct_n[336] = ct[30] * ct[61];
  proc_control_B.ct_n[337] = ct[30] * ct[62];
  proc_control_B.ct_n[338] = ct[30] * ct[64];
  proc_control_B.ct_n[339] = ct[30] * ct[65];
  proc_control_B.ct_n[340] = ct[30] * ct[66];
  proc_control_B.ct_n[341] = ct[31] * ct[60];
  proc_control_B.ct_n[342] = ct[31] * ct[61];
  proc_control_B.ct_n[343] = ct[31] * ct[62];
  proc_control_B.ct_n[344] = ct[281];
  proc_control_B.ct_n[345] = ct[31] * ct[64];
  proc_control_B.ct_n[346] = ct[31] * ct[65];
  proc_control_B.ct_n[347] = ct[31] * ct[66];
  proc_control_B.ct_n[348] = ct[29] * ct[73];
  proc_control_B.ct_n[349] = ct[29] * ct[75];
  proc_control_B.ct_n[350] = ct[27] * ct[91];
  proc_control_B.ct_n[351] = ct[27] * ct[92];
  proc_control_B.ct_n[352] = ct[283];
  proc_control_B.ct_n[353] = ct[284];
  proc_control_B.ct_n[354] = ct[285];
  proc_control_B.ct_tmp_an = ct[12] * ct[16] * ct[26] * ct[28];
  proc_control_B.ct_n[355] = proc_control_B.ct_tmp_an * ct[338];
  proc_control_B.t898_tmp_i = ct[13] * ct[14] * ct[27] * ct[28];
  proc_control_B.ct_n[356] = proc_control_B.t898_tmp_i * ct[338];
  proc_control_B.ct_n[357] = ct[28] * ct[101];
  proc_control_B.ct_n[358] = ct[288];
  proc_control_B.ct_n[359] = ct[28] * ct[102];
  proc_control_B.ct_n[360] = ct[290];
  proc_control_B.ct_n[361] = ct[291];
  proc_control_B.t899_tmp_i = ct[12] * ct[17] * ct[27] * ct[28];
  proc_control_B.ct_n[362] = proc_control_B.t899_tmp_i * ct[338];
  proc_control_B.t900_tmp_a = ct[13] * ct[18] * ct[26] * ct[27];
  proc_control_B.ct_n[363] = proc_control_B.t900_tmp_a * ct[338];
  proc_control_B.ct_n[364] = ct[292];
  proc_control_B.ct_n[365] = ct[295];
  proc_control_B.t901_tmp_l = ct[14] * ct[18] * ct[26] * ct[28];
  proc_control_B.ct_n[366] = proc_control_B.t901_tmp_l * ct[338];
  proc_control_B.ct_n[367] = ct[296];
  proc_control_B.t902_tmp_p = ct[16] * ct[17] * ct[26] * ct[27];
  proc_control_B.ct_n[368] = proc_control_B.t902_tmp_p * ct[338];
  proc_control_B.ct_n[369] = ct[28] * ct[110];
  proc_control_B.ct_n[370] = ct[28] * ct[112];
  proc_control_B.ct_n[371] = ct[30] * ct[73];
  proc_control_B.ct_n[372] = ct[30] * ct[75];
  proc_control_B.ct_n[373] = ct[29] * ct[78];
  proc_control_B.ct_n[374] = ct[29] * ct[79];
  proc_control_B.ct_n[375] = ct[31] * ct[73];
  proc_control_B.ct_n[376] = ct[297];
  proc_control_B.ct_n[377] = ct[31] * ct[75];
  proc_control_B.ct_n[378] = ct[29] * ct[82];
  proc_control_B.ct_n[379] = ct[29] * ct[83];
  proc_control_B.ct_n[380] = ct[30] * ct[78];
  proc_control_B.ct_n[381] = ct[30] * ct[79];
  proc_control_B.ct_n[382] = ct[27] * ct[117];
  proc_control_B.ct_n[383] = ct[298];
  proc_control_B.ct_n[384] = ct[299];
  proc_control_B.ct_n[385] = ct[28] * ct[121];
  proc_control_B.ct_n[386] = ct[300];
  proc_control_B.ct_n[387] = ct[30] * ct[82];
  proc_control_B.ct_n[388] = ct[30] * ct[83];
  proc_control_B.ct_n[389] = ct[31] * ct[78];
  proc_control_B.ct_n[390] = ct[31] * ct[79];
  proc_control_B.ct_n[391] = ct[29] * ct[87];
  proc_control_B.ct_n[392] = ct[31] * ct[82];
  proc_control_B.ct_n[393] = ct[31] * ct[83];
  proc_control_B.ct_n[394] = ct[27] * ct[125];
  proc_control_B.ct_n[395] = ct[301];
  proc_control_B.ct_n[396] = ct[302];
  proc_control_B.ct_n[397] = ct[28] * ct[129];
  proc_control_B.ct_n[398] = ct[29] * ct[89];
  proc_control_B.ct_n[399] = ct[30] * ct[87];
  proc_control_B.ct_n[400] = ct[28] * ct[131];
  proc_control_B.ct_n[401] = ct[303];
  proc_control_B.ct_n[402] = ct[304];
  proc_control_B.ct_n[403] = ct[28] * ct[135];
  proc_control_B.ct_n[404] = ct[30] * ct[89];
  proc_control_B.ct_n[405] = ct[31] * ct[87];
  proc_control_B.ct_n[406] = ct[305];
  proc_control_B.ct_n[407] = ct[306];
  proc_control_B.ct_n[408] = ct[308];
  proc_control_B.ct_n[409] = ct[310];
  proc_control_B.ct_n[410] = ct[311];
  proc_control_B.ct_n[411] = ct[312];
  proc_control_B.ct_n[412] = ct[313];
  proc_control_B.ct_n[413] = ct[314];
  proc_control_B.ct_n[414] = ct[315];
  proc_control_B.ct_n[415] = ct[316];
  proc_control_B.ct_n[416] = ct[29] * ct[115];
  proc_control_B.ct_n[417] = ct[31] * ct[89];
  proc_control_B.ct_n[418] = ct[27] * ct[137];
  proc_control_B.ct_n[419] = ct[317];
  proc_control_B.ct_n[420] = ct[318];
  proc_control_B.ct_n[421] = ct[319];
  proc_control_B.ct_n[422] = ct[321];
  proc_control_B.ct_n[423] = ct[322];
  proc_control_B.ct_n[424] = ct[323];
  proc_control_B.ct_n[425] = ct[324];
  proc_control_B.ct_n[426] = ct[325];
  proc_control_B.ct_n[427] = ct[327];
  proc_control_B.ct_n[428] = ct[328];
  proc_control_B.ct_n[429] = ct[329];
  proc_control_B.ct_n[430] = ct[330];
  proc_control_B.ct_n[431] = ct[30] * ct[115];
  proc_control_B.ct_n[432] = ct[28] * ct[139];
  std::memcpy(&proc_control_B.ct_n[433], &ct[331], 17U * sizeof(real_T));
  proc_control_B.ct_n[450] = ct[31] * ct[115];
  proc_control_B.ct_n[451] = ct[348];
  proc_control_B.ct_n[452] = ct[29] * ct[123];
  proc_control_B.t903_tmp_o = proc_control_B.t900_tmp * ct[27] * ct[28];
  proc_control_B.ct_n[453] = proc_control_B.t903_tmp_o * ct[338];
  proc_control_B.ct_tmp_cx = proc_control_B.ct_tmp_om * ct[27] * ct[28];
  proc_control_B.ct_n[454] = proc_control_B.ct_tmp_cx * ct[338];
  proc_control_B.ct_tmp_a2 = proc_control_B.ct_tmp_cm * ct[27] * ct[28];
  proc_control_B.ct_n[455] = proc_control_B.ct_tmp_a2 * ct[338];
  proc_control_B.ct_tmp_o2 = ct[16] * ct[26];
  proc_control_B.ct_tmp_al = proc_control_B.ct_tmp_o2 * ct[27] * ct[28];
  proc_control_B.ct_n[456] = proc_control_B.ct_tmp_al * ct[338];
  proc_control_B.ct_tmp_d0 = proc_control_B.ct_tmp_oc * ct[27] * ct[28];
  proc_control_B.ct_n[457] = proc_control_B.ct_tmp_d0 * ct[338];
  proc_control_B.ct_tmp_bp = ct[18] * ct[26];
  proc_control_B.ct_tmp_d = proc_control_B.ct_tmp_bp * ct[27] * ct[28];
  proc_control_B.ct_n[458] = proc_control_B.ct_tmp_d * ct[338];
  proc_control_B.ct_n[459] = ct[349];
  proc_control_B.ct_n[460] = ct[350];
  proc_control_B.ct_n[461] = ct[351];
  proc_control_B.ct_n[462] = ct[352];
  proc_control_B.ct_n[463] = ct[28] * ct[141];
  proc_control_B.ct_n[464] = ct[30] * ct[123];
  proc_control_B.ct_n[465] = ct[353];
  proc_control_B.ct_n[466] = ct[354];
  proc_control_B.ct_n[467] = ct[355];
  proc_control_B.ct_n[468] = ct[356];
  proc_control_B.ct_n[469] = ct[357];
  proc_control_B.ct_n[470] = ct[358];
  proc_control_B.ct_n[471] = ct[359];
  proc_control_B.ct_n[472] = ct[31] * ct[123];
  std::memcpy(&proc_control_B.ct_n[473], &ct[360], 44U * sizeof(real_T));
  proc_control_B.ct_n[517] = ct[404];
  proc_control_B.ct_n[518] = ct[406];
  proc_control_B.ct_n[519] = -ct[57];
  proc_control_B.ct_n[520] = -ct[58];
  proc_control_B.ct_n[521] = -ct[61];
  proc_control_B.ct_n[522] = -ct[62];
  proc_control_B.ct_n[523] = -ct[66];
  proc_control_B.ct_n[524] = -ct[68];
  proc_control_B.ct_n[525] = -ct[69];
  proc_control_B.ct_n[526] = -ct[72];
  proc_control_B.ct_n[527] = -ct[73];
  proc_control_B.ct_n[528] = -ct[76];
  proc_control_B.ct_n[529] = -ct[78];
  proc_control_B.ct_n[530] = -ct[80];
  proc_control_B.ct_n[531] = -ct[82];
  proc_control_B.ct_n[532] = -ct[84];
  proc_control_B.ct_n[533] = -ct[96];
  proc_control_B.ct_n[534] = -ct[98];
  proc_control_B.ct_n[535] = -ct[100];
  proc_control_B.ct_n[536] = -ct[108];
  proc_control_B.ct_n[537] = -ct[119];
  proc_control_B.ct_n[538] = -ct[120];
  proc_control_B.ct_n[539] = -ct[123];
  proc_control_B.ct_n[540] = -ct[124];
  proc_control_B.ct_n[541] = -ct[144];
  proc_control_B.ct_n[542] = -ct[147];
  proc_control_B.ct_n[543] = -ct[148];
  proc_control_B.ct_n[544] = -ct[152];
  proc_control_B.ct_n[545] = -ct[154];
  proc_control_B.ct_n[546] = -ct[156];
  proc_control_B.ct_n[547] = -ct[157];
  proc_control_B.ct_n[548] = -ct[158];
  proc_control_B.ct_n[549] = -ct[159];
  proc_control_B.ct_n[550] = -ct[162];
  proc_control_B.ct_n[551] = -ct[163];
  proc_control_B.ct_n[552] = -ct[166];
  proc_control_B.ct_n[553] = -ct[168];
  proc_control_B.ct_n[554] = -ct[169];
  proc_control_B.ct_n[555] = -ct[172];
  proc_control_B.ct_n[556] = -ct[174];
  proc_control_B.ct_n[557] = -ct[175];
  proc_control_B.ct_n[558] = -ct[178];
  proc_control_B.ct_n[559] = -ct[179];
  proc_control_B.ct_n[560] = -ct[181];
  proc_control_B.ct_n[561] = ct[412];
  proc_control_B.ct_n[562] = -ct[183];
  proc_control_B.ct_n[563] = -ct[185];
  proc_control_B.ct_n[564] = -ct[187];
  proc_control_B.ct_n[565] = -ct[189];
  proc_control_B.ct_n[566] = -ct[191];
  proc_control_B.ct_n[567] = -ct[194];
  proc_control_B.ct_n[568] = -ct[197];
  proc_control_B.ct_n[569] = ct[413];
  proc_control_B.ct_n[570] = -ct[221];
  proc_control_B.ct_n[571] = -ct[223];
  proc_control_B.ct_n[572] = -ct[227];
  proc_control_B.ct_n[573] = proc_control_B.ct_tmp_c * ct[272] * ct[329];
  proc_control_B.ct_tmp_ol = proc_control_B.ct_tmp_j * ct[272];
  proc_control_B.ct_n[574] = proc_control_B.ct_tmp_ol * ct[329];
  proc_control_B.ct_n[575] = proc_control_B.ct_tmp_c * ct[280] * ct[329];
  proc_control_B.ct_n[576] = proc_control_B.ct_tmp_ol * ct[338];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_j * ct[280];
  proc_control_B.ct_n[577] = proc_control_B.ct_tmp_c * ct[329];
  proc_control_B.ct_n[578] = proc_control_B.ct_tmp_c * ct[338];
  proc_control_B.ct_n[579] = ct[415];
  proc_control_B.ct_n[580] = proc_control_B.t903_tmp * ct[272] * ct[329];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_l * ct[272];
  proc_control_B.ct_n[581] = proc_control_B.ct_tmp_c * ct[329];
  proc_control_B.ct_n[582] = proc_control_B.ct_tmp_c * ct[338];
  proc_control_B.ct_n[583] = proc_control_B.t903_tmp * ct[290] * ct[329];
  proc_control_B.t903_tmp = proc_control_B.ct_tmp_l * ct[290];
  proc_control_B.ct_n[584] = proc_control_B.t903_tmp * ct[329];
  proc_control_B.ct_n[585] = proc_control_B.t903_tmp * ct[338];
  proc_control_B.ct_n[586] = proc_control_B.ct_tmp_tmp * ct[280] * ct[329];
  proc_control_B.t903_tmp = proc_control_B.ct_tmp_tmp_h * ct[280];
  proc_control_B.ct_n[587] = proc_control_B.t903_tmp * ct[329];
  proc_control_B.ct_n[588] = ct[416];
  proc_control_B.ct_n[589] = proc_control_B.ct_tmp_tmp * ct[290] * ct[329];
  proc_control_B.ct_n[590] = proc_control_B.t903_tmp * ct[338];
  proc_control_B.t903_tmp = proc_control_B.ct_tmp_tmp_h * ct[290];
  proc_control_B.ct_n[591] = proc_control_B.t903_tmp * ct[329];
  proc_control_B.ct_n[592] = proc_control_B.t903_tmp * ct[338];
  proc_control_B.ct_n[593] = proc_control_B.ct_tmp_k * ct[272] * ct[329];
  proc_control_B.ct_n[594] = proc_control_B.ct_tmp_k * ct[280] * ct[329];
  proc_control_B.ct_n[595] = ct[417];
  proc_control_B.ct_n[596] = proc_control_B.ct_tmp_f * ct[272] * ct[329];
  proc_control_B.ct_n[597] = proc_control_B.ct_tmp_f * ct[290] * ct[329];
  proc_control_B.ct_n[598] = proc_control_B.ct_tmp_i * ct[272] * ct[329];
  proc_control_B.ct_n[599] = proc_control_B.ct_tmp_i * ct[280] * ct[329];
  proc_control_B.ct_n[600] = proc_control_B.ct_tmp_tmp_i * ct[280] * ct[329];
  proc_control_B.ct_n[601] = proc_control_B.ct_tmp_tmp_i * ct[290] * ct[329];
  proc_control_B.ct_n[602] = proc_control_B.ct_tmp_b * ct[272] * ct[329];
  proc_control_B.ct_n[603] = proc_control_B.ct_tmp_b * ct[290] * ct[329];
  proc_control_B.ct_n[604] = proc_control_B.ct_tmp_tmp_g * ct[280] * ct[329];
  proc_control_B.ct_n[605] = proc_control_B.ct_tmp_tmp_g * ct[290] * ct[329];
  proc_control_B.ct_n[606] = proc_control_B.ct_tmp_ai * ct[272] * ct[329];
  proc_control_B.ct_n[607] = proc_control_B.ct_tmp_ai * ct[280] * ct[329];
  proc_control_B.ct_n[608] = proc_control_B.ct_tmp_o * ct[272] * ct[329];
  proc_control_B.ct_n[609] = proc_control_B.ct_tmp_o * ct[290] * ct[329];
  proc_control_B.ct_n[610] = proc_control_B.ct_tmp * ct[280] * ct[338];
  proc_control_B.ct_n[611] = proc_control_B.ct_tmp * ct[290] * ct[338];
  proc_control_B.ct_n[612] = proc_control_B.t900_tmp * ct[280] * ct[338];
  proc_control_B.ct_n[613] = proc_control_B.ct_tmp_c1 * ct[272] * ct[338];
  proc_control_B.ct_tmp_c1 = ct[12] * ct[28];
  proc_control_B.ct_n[614] = proc_control_B.ct_tmp_c1 * ct[272] * ct[338];
  proc_control_B.ct_tmp = ct[13] * ct[27];
  proc_control_B.ct_n[615] = proc_control_B.ct_tmp * ct[272] * ct[338];
  proc_control_B.ct_n[616] = ct[12] * ct[273];
  proc_control_B.ct_n[617] = ct[12] * ct[275];
  proc_control_B.ct_n[618] = ct[421];
  proc_control_B.ct_n[619] = proc_control_B.ct_tmp_c1 * ct[280] * ct[338];
  proc_control_B.ct_n[620] = proc_control_B.ct_tmp_om * ct[290] * ct[338];
  proc_control_B.ct_n[621] = proc_control_B.ct_tmp_ok * ct[272] * ct[338];
  proc_control_B.ct_n[622] = proc_control_B.ct_tmp * ct[290] * ct[338];
  proc_control_B.ct_n[623] = ct[13] * ct[276];
  proc_control_B.ct_n[624] = ct[13] * ct[277];
  proc_control_B.ct_n[625] = proc_control_B.ct_tmp_cm * ct[280] * ct[338];
  proc_control_B.ct_n[626] = proc_control_B.ct_tmp_g * ct[272] * ct[338];
  proc_control_B.ct_tmp_c1 = ct[14] * ct[28];
  proc_control_B.ct_n[627] = proc_control_B.ct_tmp_c1 * ct[272] * ct[338];
  proc_control_B.ct_n[628] = ct[422];
  proc_control_B.ct_n[629] = proc_control_B.t899_tmp * ct[272] * ct[338];
  proc_control_B.ct_n[630] = ct[14] * ct[273];
  proc_control_B.ct_n[631] = ct[14] * ct[275];
  proc_control_B.ct_n[632] = proc_control_B.ct_tmp_c1 * ct[280] * ct[338];
  proc_control_B.ct_n[633] = proc_control_B.ct_tmp_o2 * ct[280] * ct[338];
  proc_control_B.ct_n[634] = proc_control_B.t899_tmp * ct[290] * ct[338];
  proc_control_B.ct_n[635] = proc_control_B.ct_tmp_o2 * ct[290] * ct[338];
  proc_control_B.ct_n[636] = ct[423];
  proc_control_B.ct_n[637] = proc_control_B.ct_tmp_gf * ct[290] * ct[338];
  proc_control_B.ct_n[638] = proc_control_B.ct_tmp_ad * ct[280] * ct[338];
  proc_control_B.ct_n[639] = ct[16] * ct[278];
  proc_control_B.ct_n[640] = ct[16] * ct[279];
  proc_control_B.ct_tmp_c1 = ct[17] * ct[27];
  proc_control_B.ct_n[641] = proc_control_B.ct_tmp_c1 * ct[272] * ct[338];
  proc_control_B.ct_n[642] = proc_control_B.ct_tmp_oc * ct[290] * ct[338];
  proc_control_B.ct_n[643] = proc_control_B.ct_tmp_gy * ct[272] * ct[338];
  proc_control_B.ct_n[644] = proc_control_B.ct_tmp_bp * ct[280] * ct[338];
  proc_control_B.ct_n[645] = proc_control_B.ct_tmp_c1 * ct[290] * ct[338];
  proc_control_B.ct_n[646] = proc_control_B.ct_tmp_bp * ct[290] * ct[338];
  proc_control_B.ct_n[647] = ct[17] * ct[276];
  proc_control_B.ct_n[648] = ct[17] * ct[277];
  proc_control_B.ct_n[649] = proc_control_B.ct_tmp_kn * ct[290] * ct[338];
  proc_control_B.ct_n[650] = proc_control_B.ct_tmp_ca * ct[280] * ct[338];
  proc_control_B.ct_n[651] = proc_control_B.t898_tmp * ct[272] * ct[338];
  proc_control_B.ct_n[652] = proc_control_B.t898_tmp * ct[280] * ct[338];
  proc_control_B.ct_n[653] = ct[18] * ct[278];
  proc_control_B.ct_n[654] = -ct[387];
  proc_control_B.ct_n[655] = ct[18] * ct[279];
  proc_control_B.ct_n[656] = proc_control_B.ct_tmp_tmp_j * ct[280] * ct[329];
  proc_control_B.ct_n[657] = proc_control_B.ct_tmp_tmp_j * ct[290] * ct[329];
  proc_control_B.ct_n[658] = proc_control_B.ct_tmp_a * ct[280] * ct[338];
  proc_control_B.ct_n[659] = proc_control_B.ct_tmp_a * ct[290] * ct[338];
  proc_control_B.ct_n[660] = proc_control_B.t901_tmp * ct[272] * ct[338];
  proc_control_B.ct_n[661] = proc_control_B.t901_tmp * ct[290] * ct[338];
  proc_control_B.ct_n[662] = proc_control_B.t902_tmp * ct[272] * ct[338];
  proc_control_B.ct_n[663] = ct[426];
  proc_control_B.ct_n[664] = proc_control_B.t902_tmp * ct[280] * ct[338];
  proc_control_B.ct_tmp_c1 = ct[11] * ct[29];
  proc_control_B.ct_n[665] = proc_control_B.ct_tmp_c1 * ct[272] * ct[329];
  proc_control_B.ct_n[666] = proc_control_B.ct_tmp_c1 * ct[274] * ct[329];
  proc_control_B.ct_n[667] = proc_control_B.ct_tmp_c1 * ct[281] * ct[338];
  proc_control_B.ct_tmp_c1 = ct[15] * ct[30];
  proc_control_B.ct_n[668] = proc_control_B.ct_tmp_c1 * ct[280] * ct[329];
  proc_control_B.ct_n[669] = proc_control_B.ct_tmp_c1 * ct[285] * ct[329];
  proc_control_B.ct_n[670] = proc_control_B.ct_tmp_c1 * ct[296] * ct[338];
  proc_control_B.ct_n[671] = ct[427];
  proc_control_B.ct_tmp_c1 = ct[19] * ct[31];
  proc_control_B.ct_n[672] = proc_control_B.ct_tmp_c1 * ct[290] * ct[329];
  proc_control_B.ct_n[673] = proc_control_B.ct_tmp_c1 * ct[297] * ct[329];
  proc_control_B.ct_n[674] = proc_control_B.ct_tmp_c1 * ct[300] * ct[338];
  proc_control_B.ct_tmp_c1 = ct[20] * ct[29];
  proc_control_B.ct_n[675] = proc_control_B.ct_tmp_c1 * ct[272] * ct[329];
  proc_control_B.ct_n[676] = proc_control_B.ct_tmp_c1 * ct[274] * ct[329];
  proc_control_B.ct_n[677] = proc_control_B.ct_tmp_c1 * ct[281] * ct[338];
  proc_control_B.ct_n[678] = ct[26] * ct[27] * ct[290] * ct[348];
  proc_control_B.ct_n[679] = ct[26] * ct[28] * ct[280] * ct[348];
  proc_control_B.ct_n[680] = ct[27] * ct[28] * ct[272] * ct[348];
  proc_control_B.ct_tmp_c1 = ct[21] * ct[30];
  proc_control_B.ct_n[681] = proc_control_B.ct_tmp_c1 * ct[280] * ct[329];
  proc_control_B.ct_n[682] = proc_control_B.ct_tmp_c1 * ct[285] * ct[329];
  proc_control_B.ct_n[683] = proc_control_B.ct_tmp_c1 * ct[296] * ct[338];
  proc_control_B.ct_tmp_c1 = ct[22] * ct[31];
  proc_control_B.ct_n[684] = proc_control_B.ct_tmp_c1 * ct[290] * ct[329];
  proc_control_B.ct_n[685] = proc_control_B.ct_tmp_c1 * ct[297] * ct[329];
  proc_control_B.ct_n[686] = proc_control_B.ct_tmp_c1 * ct[300] * ct[338];
  proc_control_B.ct_n[687] = ct[27] * ct[29] * ct[274] * ct[338];
  proc_control_B.ct_n[688] = ct[28] * ct[29] * ct[274] * ct[338];
  proc_control_B.ct_n[689] = ct[26] * ct[30] * ct[285] * ct[338];
  proc_control_B.ct_n[690] = ct[28] * ct[30] * ct[285] * ct[338];
  proc_control_B.ct_n[691] = ct[26] * ct[31] * ct[297] * ct[338];
  proc_control_B.ct_n[692] = ct[27] * ct[31] * ct[297] * ct[338];
  proc_control_B.ct_n[693] = ct[213] + ct[424];
  proc_control_B.ct_n[694] = ct[367] + ct[378];
  proc_control_B.ct_n[695] = ct[29] * ct[283];
  proc_control_B.ct_n[696] = ct[29] * ct[286];
  proc_control_B.ct_n[697] = ct[29] * ct[289];
  proc_control_B.ct_n[698] = ct[29] * ct[291];
  proc_control_B.ct_n[699] = ct[29] * ct[292];
  proc_control_B.ct_n[700] = ct[29] * ct[293];
  proc_control_B.ct_n[701] = ct[29] * ct[294];
  proc_control_B.ct_n[702] = ct[29] * ct[295];
  proc_control_B.ct_n[703] = ct[28] * ct[313];
  proc_control_B.ct_n[704] = ct[28] * ct[314];
  proc_control_B.ct_n[705] = ct[30] * ct[282];
  proc_control_B.ct_n[706] = ct[30] * ct[284];
  proc_control_B.ct_n[707] = ct[28] * ct[322];
  proc_control_B.ct_n[708] = ct[28] * ct[323];
  proc_control_B.ct_n[709] = ct[30] * ct[287];
  proc_control_B.ct_n[710] = ct[30] * ct[288];
  proc_control_B.ct_n[711] = ct[30] * ct[289];
  proc_control_B.ct_n[712] = ct[431];
  proc_control_B.ct_n[713] = ct[30] * ct[291];
  proc_control_B.ct_n[714] = ct[30] * ct[293];
  proc_control_B.ct_n[715] = ct[30] * ct[295];
  proc_control_B.ct_n[716] = ct[27] * ct[331];
  proc_control_B.ct_n[717] = ct[27] * ct[332];
  proc_control_B.ct_n[718] = ct[31] * ct[282];
  proc_control_B.ct_n[719] = ct[31] * ct[283];
  proc_control_B.ct_n[720] = ct[31] * ct[284];
  proc_control_B.ct_n[721] = ct[31] * ct[286];
  proc_control_B.ct_n[722] = ct[31] * ct[287];
  proc_control_B.ct_n[723] = ct[432];
  proc_control_B.ct_n[724] = ct[31] * ct[288];
  proc_control_B.ct_n[725] = ct[31] * ct[292];
  proc_control_B.ct_n[726] = ct[31] * ct[294];
  proc_control_B.ct_n[727] = ct[30] * ct[298];
  proc_control_B.ct_n[728] = ct[28] * ct[351];
  proc_control_B.ct_n[729] = ct[30] * ct[299];
  proc_control_B.ct_n[730] = ct[29] * ct[301];
  proc_control_B.ct_n[731] = ct[29] * ct[302];
  proc_control_B.ct_n[732] = ct[28] * ct[354];
  proc_control_B.ct_n[733] = ct[27] * ct[356];
  proc_control_B.ct_n[734] = ct[31] * ct[298];
  proc_control_B.ct_n[735] = ct[31] * ct[299];
  proc_control_B.ct_n[736] = ct[29] * ct[303];
  proc_control_B.ct_n[737] = ct[29] * ct[304];
  proc_control_B.ct_n[738] = ct[28] * ct[363];
  proc_control_B.ct_n[739] = ct[27] * ct[368];
  proc_control_B.ct_n[740] = ct[28] * ct[369];
  proc_control_B.ct_n[741] = ct[30] * ct[303];
  proc_control_B.ct_n[742] = ct[31] * ct[301];
  proc_control_B.ct_n[743] = ct[30] * ct[304];
  proc_control_B.ct_n[744] = ct[31] * ct[302];
  proc_control_B.ct_n[745] = ct[27] * ct[382];
  proc_control_B.ct_n[746] = ct[28] * ct[383];
  proc_control_B.ct_n[747] = ct[27] * ct[386];
  proc_control_B.ct_n[748] = proc_control_B.ct_tmp_al * ct[29] * ct[329];
  proc_control_B.ct_n[749] = proc_control_B.ct_tmp_d * ct[29] * ct[329];
  proc_control_B.ct_n[750] = ct[28] * ct[388];
  proc_control_B.ct_n[751] = ct[28] * ct[389];
  proc_control_B.ct_n[752] = ct[433];
  proc_control_B.ct_n[753] = ct[26] * ct[392];
  proc_control_B.ct_n[754] = proc_control_B.ct_tmp_cx * ct[30] * ct[329];
  proc_control_B.ct_n[755] = proc_control_B.ct_tmp_d0 * ct[30] * ct[329];
  proc_control_B.ct_n[756] = ct[28] * ct[393];
  proc_control_B.ct_n[757] = ct[26] * ct[395];
  proc_control_B.ct_n[758] = proc_control_B.t903_tmp_o * ct[31] * ct[329];
  proc_control_B.ct_n[759] = proc_control_B.ct_tmp_a2 * ct[31] * ct[329];
  proc_control_B.ct_n[760] = ct[27] * ct[396];
  proc_control_B.ct_n[761] = ct[26] * ct[399];
  proc_control_B.ct_n[762] = ct[27] * ct[400];
  proc_control_B.ct_n[763] = ct[26] * ct[401];
  proc_control_B.ct_n[764] = ct[28] * ct[402];
  proc_control_B.ct_n[765] = ct[27] * ct[404];
  proc_control_B.ct_n[766] = ct[28] * ct[403];
  proc_control_B.ct_n[767] = proc_control_B.t898;
  proc_control_B.ct_n[768] = proc_control_B.t899;
  proc_control_B.ct_n[769] = ct[434];
  proc_control_B.ct_n[770] = ct[435];
  proc_control_B.ct_n[771] = proc_control_B.t900;
  proc_control_B.ct_n[772] = proc_control_B.t901;
  proc_control_B.ct_n[773] = proc_control_B.t902;
  proc_control_B.ct_n[774] = proc_control_B.t903;
  proc_control_B.ct_n[775] = ct[12] * proc_control_B.t898;
  proc_control_B.ct_n[776] = proc_control_B.t900_tmp_a * ct[29] * ct[30] * ct
    [318];
  proc_control_B.ct_n[777] = ct[14] * proc_control_B.t898;
  proc_control_B.ct_n[778] = proc_control_B.t902_tmp_p * ct[29] * ct[30] * ct
    [318];
  proc_control_B.ct_n[779] = proc_control_B.ct_tmp_an * ct[29] * ct[31] * ct[318];
  proc_control_B.ct_n[780] = ct[13] * proc_control_B.t899;
  proc_control_B.ct_n[781] = ct[436];
  proc_control_B.ct_n[782] = proc_control_B.t901_tmp_l * ct[29] * ct[31] * ct
    [318];
  proc_control_B.ct_n[783] = ct[17] * proc_control_B.t899;
  proc_control_B.ct_n[784] = ct[16] * proc_control_B.t900;
  proc_control_B.ct_n[785] = proc_control_B.t898_tmp_i * ct[30] * ct[31] * ct
    [318];
  proc_control_B.ct_n[786] = ct[18] * proc_control_B.t900;
  proc_control_B.ct_n[787] = proc_control_B.t899_tmp_i * ct[30] * ct[31] * ct
    [318];
  proc_control_B.ct_n[788] = ct[16] * proc_control_B.t901;
  proc_control_B.ct_n[789] = ct[18] * proc_control_B.t901;
  proc_control_B.ct_n[790] = ct[12] * proc_control_B.t902;
  proc_control_B.ct_n[791] = ct[13] * proc_control_B.t903;
  proc_control_B.ct_n[792] = ct[14] * proc_control_B.t902;
  proc_control_B.ct_n[793] = ct[17] * proc_control_B.t903;
  proc_control_B.ct_n[794] = ct[437];
  proc_control_B.ct_n[795] = -ct[282];
  proc_control_B.ct_n[796] = -ct[286];
  proc_control_B.ct_n[797] = -ct[287];
  proc_control_B.ct_n[798] = -ct[289];
  proc_control_B.ct_n[799] = ct[438];
  proc_control_B.ct_n[800] = -ct[293];
  proc_control_B.ct_n[801] = -ct[294];
  proc_control_B.ct_n[802] = ct[439];
  proc_control_B.ct_n[803] = -ct[307];
  proc_control_B.ct_n[804] = -ct[309];
  proc_control_B.ct_n[805] = -ct[320];
  proc_control_B.ct_n[806] = -ct[326];
  proc_control_B.ct_n[807] = ct[440];
  proc_control_B.ct_n[808] = ct[441];
  proc_control_B.ct_n[809] = ct[442];
  proc_control_B.ct_n[810] = ct[443];
  proc_control_B.ct_n[811] = ct[444];
  proc_control_ft_2_pr(proc_control_B.ct_n, out1);
}

void proc_control::proc_con_AUVQuatPerturbedSimFcn(const real_T in1[13], const
  real_T in2[6], const real_T in4[38], real_T out1[13])
{
  // Start for MATLABSystem: '<S295>/MATLAB System'
  // AUVQuatPerturbedSimFcn
  //     OUT1 = AUVQuatPerturbedSimFcn(IN1,IN2,IN3,IN4)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     17-Jul-2022 14:58:45
  proc_control_B.t20_k = in1[10] * in4[12];
  proc_control_B.t22 = in1[10] * in4[14];
  proc_control_B.t23 = in1[11] * in4[12];
  proc_control_B.t24_a = in1[11] * in4[13];
  proc_control_B.t27 = in1[12] * in4[13];
  proc_control_B.t28 = in1[12] * in4[14];
  proc_control_B.t29 = in1[4] * in1[6];
  proc_control_B.t30 = in1[5] * in1[6];
  proc_control_B.t31 = in1[3] * in1[4];
  proc_control_B.t32_f = in1[3] * in1[5];
  proc_control_B.t36 = in4[12] * in4[12];
  proc_control_B.t37 = rt_powd_snf(in4[12], 3.0);
  proc_control_B.t38 = in4[13] * in4[13];
  proc_control_B.t40_c = rt_powd_snf(in4[13], 3.0);
  proc_control_B.t41_j = in4[14] * in4[14];
  proc_control_B.t43_k = rt_powd_snf(in4[14], 3.0);
  proc_control_B.t48 = in4[0] * in4[0];
  proc_control_B.t49 = rt_powd_snf(in4[0], 3.0);
  proc_control_B.t51 = rt_powd_snf(in4[0], 5.0);
  proc_control_B.t83_tmp_tmp = in4[3] * in4[7];
  proc_control_B.t83_tmp = proc_control_B.t83_tmp_tmp * in4[11];
  proc_control_B.t83 = proc_control_B.t83_tmp * in4[31] * in4[0];
  proc_control_B.t84_tmp_tmp = in4[3] * in4[8];
  proc_control_B.t84_tmp = proc_control_B.t84_tmp_tmp * in4[10];
  proc_control_B.t84 = proc_control_B.t84_tmp * in4[31] * in4[0];
  proc_control_B.t85_tmp_tmp = in4[4] * in4[6];
  proc_control_B.t85_tmp = proc_control_B.t85_tmp_tmp * in4[11];
  proc_control_B.t85 = proc_control_B.t85_tmp * in4[31] * in4[0];
  proc_control_B.t86_tmp_tmp = in4[4] * in4[8];
  proc_control_B.t86_tmp = proc_control_B.t86_tmp_tmp * in4[9];
  proc_control_B.t86 = proc_control_B.t86_tmp * in4[31] * in4[0];
  proc_control_B.t87_tmp_tmp = in4[5] * in4[6];
  proc_control_B.t87_tmp = proc_control_B.t87_tmp_tmp * in4[10];
  proc_control_B.t87 = proc_control_B.t87_tmp * in4[31] * in4[0];
  proc_control_B.t88_tmp_tmp = in4[5] * in4[7];
  proc_control_B.t88_tmp = proc_control_B.t88_tmp_tmp * in4[9];
  proc_control_B.t88 = proc_control_B.t88_tmp * in4[31] * in4[0];
  proc_control_B.t89 = proc_control_B.t83_tmp * in4[32] * in4[0];
  proc_control_B.t90 = proc_control_B.t84_tmp * in4[32] * in4[0];
  proc_control_B.t91 = proc_control_B.t85_tmp * in4[32] * in4[0];
  proc_control_B.t92 = proc_control_B.t86_tmp * in4[32] * in4[0];
  proc_control_B.t93 = proc_control_B.t87_tmp * in4[32] * in4[0];
  proc_control_B.t94 = proc_control_B.t88_tmp * in4[32] * in4[0];
  proc_control_B.t95_tmp_tmp = in4[7] * in4[11];
  proc_control_B.t95_tmp = proc_control_B.t95_tmp_tmp * in4[33];
  proc_control_B.t95_tmp_l = proc_control_B.t95_tmp * in4[30];
  proc_control_B.t95 = proc_control_B.t95_tmp_l * in4[0];
  proc_control_B.t96_tmp_tmp = in4[8] * in4[10];
  proc_control_B.t96_tmp = proc_control_B.t96_tmp_tmp * in4[33];
  proc_control_B.t96_tmp_h = proc_control_B.t96_tmp * in4[30];
  proc_control_B.t96 = proc_control_B.t96_tmp_h * in4[0];
  proc_control_B.t97 = proc_control_B.t95_tmp * in4[31] * in4[0];
  proc_control_B.t98 = proc_control_B.t96_tmp * in4[31] * in4[0];
  proc_control_B.t99_tmp_tmp = in4[3] * in4[11];
  proc_control_B.t99_tmp = proc_control_B.t99_tmp_tmp * in4[34];
  proc_control_B.t99_tmp_c = proc_control_B.t99_tmp * in4[30];
  proc_control_B.t99 = proc_control_B.t99_tmp_c * in4[0];
  proc_control_B.t100_tmp_tmp = in4[5] * in4[9];
  proc_control_B.t100_tmp = proc_control_B.t100_tmp_tmp * in4[34];
  proc_control_B.t100_tmp_g = proc_control_B.t100_tmp * in4[30];
  proc_control_B.t100 = proc_control_B.t100_tmp_g * in4[0];
  proc_control_B.t103_tmp = proc_control_B.t83_tmp_tmp * in4[35];
  proc_control_B.t103_tmp_e = proc_control_B.t103_tmp * in4[30];
  proc_control_B.t103 = proc_control_B.t103_tmp_e * in4[0];
  proc_control_B.t104_tmp = proc_control_B.t85_tmp_tmp * in4[35];
  proc_control_B.t104_tmp_n = proc_control_B.t104_tmp * in4[30];
  proc_control_B.t104 = proc_control_B.t104_tmp_n * in4[0];
  proc_control_B.t105 = proc_control_B.t99_tmp * in4[31] * in4[0];
  proc_control_B.t106 = proc_control_B.t100_tmp * in4[31] * in4[0];
  proc_control_B.t107 = proc_control_B.t103_tmp * in4[31] * in4[0];
  proc_control_B.t108 = proc_control_B.t104_tmp * in4[31] * in4[0];
  proc_control_B.t111_tmp_tmp = in4[11] * in4[33];
  proc_control_B.t111_tmp = proc_control_B.t111_tmp_tmp * in4[34];
  proc_control_B.t111_tmp_f = proc_control_B.t111_tmp * in4[30];
  proc_control_B.t111 = proc_control_B.t111_tmp_f * in4[0];
  proc_control_B.t114_tmp_tmp = in4[7] * in4[33];
  proc_control_B.t114_tmp = proc_control_B.t114_tmp_tmp * in4[35];
  proc_control_B.t114_tmp_n = proc_control_B.t114_tmp * in4[30];
  proc_control_B.t114 = proc_control_B.t114_tmp_n * in4[0];
  proc_control_B.t115 = proc_control_B.t111_tmp * in4[31] * in4[0];
  proc_control_B.t116 = proc_control_B.t114_tmp * in4[31] * in4[0];
  proc_control_B.t118_tmp_tmp = in4[3] * in4[34];
  proc_control_B.t118_tmp = proc_control_B.t118_tmp_tmp * in4[35];
  proc_control_B.t118_tmp_e = proc_control_B.t118_tmp * in4[30];
  proc_control_B.t118 = proc_control_B.t118_tmp_e * in4[0];
  proc_control_B.t120 = proc_control_B.t118_tmp * in4[31] * in4[0];
  proc_control_B.t122_tmp_tmp = in4[33] * in4[34];
  proc_control_B.t122_tmp = proc_control_B.t122_tmp_tmp * in4[35];
  proc_control_B.t122_tmp_b = proc_control_B.t122_tmp * in4[30];
  proc_control_B.t122 = proc_control_B.t122_tmp_b * in4[0];
  proc_control_B.t123 = proc_control_B.t122_tmp * in4[31] * in4[0];
  proc_control_B.in4[0] = in4[18];
  proc_control_B.in4[1] = in4[19];
  proc_control_B.in4[2] = in4[20];
  proc_control_B.in4[3] = in4[21];
  proc_control_B.in4[4] = in4[22];
  proc_control_B.in4[5] = in4[23];
  proc_control_B.in4[6] = in2[0];
  proc_control_B.in4[7] = in2[1];
  proc_control_B.in4[8] = in2[3];
  proc_control_B.in4[9] = in2[4];
  proc_control_B.in4[10] = in2[5];
  std::memcpy(&proc_control_B.in4[11], &in4[3], sizeof(real_T) << 3U);
  proc_control_B.in4[19] = in4[11];
  proc_control_B.in4[20] = in4[33];
  proc_control_B.in4[21] = in4[34];
  proc_control_B.in4[22] = in4[35];
  proc_control_B.in4[23] = in4[15];
  proc_control_B.in4[24] = in4[16];
  proc_control_B.in4[25] = in4[17];
  proc_control_B.in4[26] = in4[12];
  proc_control_B.in4[27] = in4[13];
  proc_control_B.in4[28] = in4[14];
  proc_control_B.in4[29] = in4[30];
  proc_control_B.in4[30] = in4[31];
  proc_control_B.in4[31] = in4[32];
  proc_control_B.in4[32] = in1[4];
  proc_control_B.in4[33] = in1[5];
  proc_control_B.in4[34] = in1[6];
  proc_control_B.in4[35] = in1[3];
  proc_control_B.in4[36] = in4[37];
  proc_control_B.in4[37] = in4[0];
  proc_control_B.in4[38] = in1[10];
  proc_control_B.in4[39] = in1[11];
  proc_control_B.in4[40] = in1[12];
  proc_control_B.in4[41] = in4[36];
  proc_control_B.in4[42] = in4[9] * in1[10];
  proc_control_B.in4[43] = proc_control_B.t95_tmp * in4[32] * in4[0];
  proc_control_B.in4[44] = proc_control_B.t103;
  proc_control_B.in4[45] = proc_control_B.t105;
  proc_control_B.in4[46] = proc_control_B.t107;
  proc_control_B.in4[47] = proc_control_B.t99_tmp * in4[32] * in4[0];
  proc_control_B.in4[48] = in4[4] * in1[11];
  proc_control_B.in4[49] = proc_control_B.t103_tmp * in4[32] * in4[0];
  proc_control_B.in4[50] = in4[7] * in1[11];
  proc_control_B.in4[51] = proc_control_B.t122;
  proc_control_B.in4[52] = proc_control_B.t123;
  proc_control_B.in4[53] = proc_control_B.t122_tmp * in4[32] * in4[0];
  proc_control_B.in4[54] = in4[10] * in1[11];
  proc_control_B.in4_tmp_j0 = proc_control_B.t84_tmp * in4[30];
  proc_control_B.in4[55] = proc_control_B.in4_tmp_j0 * in4[0];
  proc_control_B.in4_tmp_l = proc_control_B.t85_tmp * in4[30];
  proc_control_B.in4[56] = proc_control_B.in4_tmp_l * in4[0];
  proc_control_B.in4_tmp_p = proc_control_B.t86_tmp * in4[30];
  proc_control_B.in4[57] = proc_control_B.in4_tmp_p * in4[0];
  proc_control_B.in4_tmp_po = proc_control_B.t87_tmp * in4[30];
  proc_control_B.in4[58] = proc_control_B.in4_tmp_po * in4[0];
  proc_control_B.in4_tmp_ly = proc_control_B.t88_tmp * in4[30];
  proc_control_B.in4[59] = proc_control_B.in4_tmp_ly * in4[0];
  proc_control_B.in4[60] = proc_control_B.t83_tmp * proc_control_B.t48;
  proc_control_B.in4[61] = proc_control_B.t84_tmp * proc_control_B.t48;
  proc_control_B.in4[62] = proc_control_B.t85_tmp * proc_control_B.t48;
  proc_control_B.in4[63] = in4[5] * in1[12];
  proc_control_B.in4[64] = proc_control_B.t86_tmp * proc_control_B.t48;
  proc_control_B.in4[65] = proc_control_B.t87_tmp * proc_control_B.t48;
  proc_control_B.in4[66] = proc_control_B.t88_tmp * proc_control_B.t48;
  proc_control_B.in4[67] = proc_control_B.t83_tmp * proc_control_B.t49;
  proc_control_B.in4[68] = proc_control_B.t84_tmp * proc_control_B.t49;
  proc_control_B.in4[69] = proc_control_B.t85_tmp * proc_control_B.t49;
  proc_control_B.in4[70] = proc_control_B.t86_tmp * proc_control_B.t49;
  proc_control_B.in4[71] = proc_control_B.t87_tmp * proc_control_B.t49;
  proc_control_B.in4[72] = proc_control_B.t88_tmp * proc_control_B.t49;
  proc_control_B.in4[73] = proc_control_B.t95_tmp * proc_control_B.t48;
  proc_control_B.in4[74] = in4[8] * in1[12];
  proc_control_B.in4[75] = proc_control_B.t96_tmp * proc_control_B.t48;
  proc_control_B.in4[76] = proc_control_B.t95_tmp * proc_control_B.t49;
  proc_control_B.in4[77] = proc_control_B.t96_tmp * proc_control_B.t49;
  proc_control_B.in4[78] = proc_control_B.t99_tmp * proc_control_B.t48;
  proc_control_B.in4[79] = proc_control_B.t100_tmp * proc_control_B.t48;
  proc_control_B.in4[80] = proc_control_B.t99_tmp * proc_control_B.t49;
  proc_control_B.in4[81] = proc_control_B.t100_tmp * proc_control_B.t49;
  proc_control_B.in4[82] = proc_control_B.t103_tmp * proc_control_B.t48;
  proc_control_B.in4[83] = proc_control_B.t104_tmp * proc_control_B.t48;
  proc_control_B.in4[84] = proc_control_B.t103_tmp * proc_control_B.t49;
  proc_control_B.in4[85] = in4[11] * in1[12];
  proc_control_B.in4[86] = proc_control_B.t104_tmp * proc_control_B.t49;
  proc_control_B.in4[87] = proc_control_B.t111_tmp * proc_control_B.t48;
  proc_control_B.in4[88] = proc_control_B.t111_tmp * proc_control_B.t49;
  proc_control_B.in4[89] = proc_control_B.t114_tmp * proc_control_B.t48;
  proc_control_B.in4[90] = proc_control_B.t114_tmp * proc_control_B.t49;
  proc_control_B.t84_tmp = proc_control_B.t83_tmp_tmp * in4[12];
  proc_control_B.in4[91] = proc_control_B.t84_tmp * proc_control_B.t49;
  proc_control_B.t85_tmp = proc_control_B.t85_tmp_tmp * in4[12];
  proc_control_B.in4[92] = proc_control_B.t85_tmp * proc_control_B.t49;
  proc_control_B.t83_tmp_tmp *= in4[13];
  proc_control_B.in4[93] = proc_control_B.t83_tmp_tmp * proc_control_B.t49;
  proc_control_B.t86_tmp = proc_control_B.t84_tmp_tmp * in4[12];
  proc_control_B.in4[94] = proc_control_B.t86_tmp * proc_control_B.t49;
  proc_control_B.t85_tmp_tmp *= in4[13];
  proc_control_B.in4[95] = proc_control_B.t85_tmp_tmp * proc_control_B.t49;
  proc_control_B.t87_tmp = proc_control_B.t87_tmp_tmp * in4[12];
  proc_control_B.in4[96] = proc_control_B.t87_tmp * proc_control_B.t49;
  proc_control_B.t88_tmp = proc_control_B.t86_tmp_tmp * in4[13];
  proc_control_B.in4[97] = proc_control_B.t88_tmp * proc_control_B.t49;
  proc_control_B.t95_tmp = proc_control_B.t88_tmp_tmp * in4[13];
  proc_control_B.in4[98] = proc_control_B.t95_tmp * proc_control_B.t49;
  proc_control_B.t99_tmp = in4[3] * in4[10];
  proc_control_B.t103_tmp = proc_control_B.t99_tmp * in4[12];
  proc_control_B.in4[99] = proc_control_B.t103_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_m = in4[4] * in4[9];
  proc_control_B.in4_tmp_e = proc_control_B.in4_tmp_m * in4[12];
  proc_control_B.in4[100] = proc_control_B.in4_tmp_e * proc_control_B.t49;
  proc_control_B.in4_tmp_a = proc_control_B.t99_tmp_tmp * in4[12];
  proc_control_B.in4[101] = proc_control_B.in4_tmp_a * proc_control_B.t49;
  proc_control_B.in4_tmp_i = proc_control_B.t100_tmp_tmp * in4[12];
  proc_control_B.in4[102] = proc_control_B.in4_tmp_i * proc_control_B.t49;
  proc_control_B.t99_tmp_tmp *= in4[14];
  proc_control_B.in4[103] = proc_control_B.t99_tmp_tmp * proc_control_B.t49;
  proc_control_B.t100_tmp_tmp *= in4[14];
  proc_control_B.in4[104] = proc_control_B.t100_tmp_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_g = in4[4] * in4[11];
  proc_control_B.in4_tmp_is = proc_control_B.in4_tmp_g * in4[14];
  proc_control_B.in4[105] = proc_control_B.in4_tmp_is * proc_control_B.t49;
  proc_control_B.in4_tmp_nh = in4[5] * in4[10];
  proc_control_B.in4_tmp_m5 = proc_control_B.in4_tmp_nh * in4[14];
  proc_control_B.in4[106] = proc_control_B.in4_tmp_m5 * proc_control_B.t49;
  proc_control_B.in4_tmp_c = in4[6] * in4[10];
  proc_control_B.in4_tmp_in = proc_control_B.in4_tmp_c * in4[13];
  proc_control_B.in4[107] = proc_control_B.in4_tmp_in * proc_control_B.t49;
  proc_control_B.in4_tmp_ky = in4[7] * in4[9];
  proc_control_B.in4_tmp_eb = proc_control_B.in4_tmp_ky * in4[13];
  proc_control_B.in4[108] = proc_control_B.in4_tmp_eb * proc_control_B.t49;
  proc_control_B.in4_tmp_d4 = in4[6] * in4[11];
  proc_control_B.in4_tmp_dl = proc_control_B.in4_tmp_d4 * in4[14];
  proc_control_B.in4[109] = proc_control_B.in4_tmp_dl * proc_control_B.t49;
  proc_control_B.in4_tmp_nq = proc_control_B.t95_tmp_tmp * in4[13];
  proc_control_B.in4[110] = proc_control_B.in4_tmp_nq * proc_control_B.t49;
  proc_control_B.in4_tmp_cl = in4[8] * in4[9];
  proc_control_B.in4_tmp_j4 = proc_control_B.in4_tmp_cl * in4[14];
  proc_control_B.in4[111] = proc_control_B.in4_tmp_j4 * proc_control_B.t49;
  proc_control_B.in4_tmp_f = proc_control_B.t96_tmp_tmp * in4[13];
  proc_control_B.in4[112] = proc_control_B.in4_tmp_f * proc_control_B.t49;
  proc_control_B.t95_tmp_tmp *= in4[14];
  proc_control_B.in4[113] = proc_control_B.t95_tmp_tmp * proc_control_B.t49;
  proc_control_B.t96_tmp_tmp *= in4[14];
  proc_control_B.in4[114] = proc_control_B.t96_tmp_tmp * proc_control_B.t49;
  proc_control_B.in4[115] = proc_control_B.t118_tmp * proc_control_B.t48;
  proc_control_B.in4[116] = proc_control_B.t118_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_k = proc_control_B.t114_tmp_tmp * in4[12];
  proc_control_B.in4[117] = proc_control_B.in4_tmp_k * proc_control_B.t49;
  proc_control_B.t114_tmp_tmp *= in4[13];
  proc_control_B.in4[118] = proc_control_B.t114_tmp_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_jd = in4[8] * in4[33];
  proc_control_B.in4_tmp_pe = proc_control_B.in4_tmp_jd * in4[12];
  proc_control_B.in4[119] = proc_control_B.in4_tmp_pe * proc_control_B.t49;
  proc_control_B.in4_tmp_mt = in4[10] * in4[33];
  proc_control_B.in4_tmp_b4 = proc_control_B.in4_tmp_mt * in4[12];
  proc_control_B.in4[120] = proc_control_B.in4_tmp_b4 * proc_control_B.t49;
  proc_control_B.in4_tmp_i4 = proc_control_B.t111_tmp_tmp * in4[12];
  proc_control_B.in4[121] = proc_control_B.in4_tmp_i4 * proc_control_B.t49;
  proc_control_B.t111_tmp_tmp *= in4[14];
  proc_control_B.in4[122] = proc_control_B.t111_tmp_tmp * proc_control_B.t49;
  proc_control_B.in4[123] = proc_control_B.t122_tmp * proc_control_B.t48;
  proc_control_B.in4[124] = proc_control_B.t122_tmp * proc_control_B.t49;
  proc_control_B.t122_tmp = proc_control_B.t118_tmp_tmp * in4[12];
  proc_control_B.in4[125] = proc_control_B.t122_tmp * proc_control_B.t49;
  proc_control_B.t118_tmp_tmp *= in4[13];
  proc_control_B.in4[126] = proc_control_B.t118_tmp_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_ie = in4[5] * in4[34];
  proc_control_B.in4_tmp_ce = proc_control_B.in4_tmp_ie * in4[13];
  proc_control_B.in4[127] = proc_control_B.in4_tmp_ce * proc_control_B.t49;
  proc_control_B.in4_tmp_bj = in4[9] * in4[34];
  proc_control_B.in4_tmp_daj = proc_control_B.in4_tmp_bj * in4[13];
  proc_control_B.in4[128] = proc_control_B.in4_tmp_daj * proc_control_B.t49;
  proc_control_B.in4_tmp = in4[11] * in4[34];
  proc_control_B.in4_tmp_b = proc_control_B.in4_tmp * in4[13];
  proc_control_B.in4[129] = proc_control_B.in4_tmp_b * proc_control_B.t49;
  proc_control_B.in4_tmp *= in4[14];
  proc_control_B.in4[130] = proc_control_B.in4_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_h = in4[3] * in4[35];
  proc_control_B.in4_tmp_da = proc_control_B.in4_tmp_h * in4[12];
  proc_control_B.in4[131] = proc_control_B.in4_tmp_da * proc_control_B.t49;
  proc_control_B.in4_tmp_h *= in4[14];
  proc_control_B.in4[132] = proc_control_B.in4_tmp_h * proc_control_B.t49;
  proc_control_B.in4_tmp_o = in4[4] * in4[35];
  proc_control_B.in4_tmp_bi = proc_control_B.in4_tmp_o * in4[14];
  proc_control_B.in4[133] = proc_control_B.in4_tmp_bi * proc_control_B.t49;
  proc_control_B.in4_tmp_gs = in4[6] * in4[35];
  proc_control_B.in4_tmp_bt = proc_control_B.in4_tmp_gs * in4[14];
  proc_control_B.in4[134] = proc_control_B.in4_tmp_bt * proc_control_B.t49;
  proc_control_B.in4_tmp_d = in4[7] * in4[35];
  proc_control_B.in4_tmp_hs = proc_control_B.in4_tmp_d * in4[13];
  proc_control_B.in4[135] = proc_control_B.in4_tmp_hs * proc_control_B.t49;
  proc_control_B.in4_tmp_d *= in4[14];
  proc_control_B.in4[136] = proc_control_B.in4_tmp_d * proc_control_B.t49;
  proc_control_B.in4_tmp_nl = proc_control_B.t122_tmp_tmp * in4[12];
  proc_control_B.in4[137] = proc_control_B.in4_tmp_nl * proc_control_B.t49;
  proc_control_B.t122_tmp_tmp *= in4[13];
  proc_control_B.in4[138] = proc_control_B.t122_tmp_tmp * proc_control_B.t49;
  proc_control_B.in4_tmp_j = in4[33] * in4[35];
  proc_control_B.in4_tmp_fj = proc_control_B.in4_tmp_j * in4[12];
  proc_control_B.in4[139] = proc_control_B.in4_tmp_fj * proc_control_B.t49;
  proc_control_B.in4_tmp_j *= in4[14];
  proc_control_B.in4[140] = proc_control_B.in4_tmp_j * proc_control_B.t49;
  proc_control_B.in4_tmp_n = in4[34] * in4[35];
  proc_control_B.in4_tmp_ay = proc_control_B.in4_tmp_n * in4[13];
  proc_control_B.in4[141] = proc_control_B.in4_tmp_ay * proc_control_B.t49;
  proc_control_B.in4_tmp_n *= in4[14];
  proc_control_B.in4[142] = proc_control_B.in4_tmp_n * proc_control_B.t49;
  proc_control_B.in4[143] = proc_control_B.t22;
  proc_control_B.t83_tmp *= in4[30];
  proc_control_B.in4[144] = proc_control_B.t83_tmp * in4[31] * in4[32];
  proc_control_B.in4[145] = proc_control_B.in4_tmp_j0 * in4[31] * in4[32];
  proc_control_B.in4[146] = proc_control_B.in4_tmp_l * in4[31] * in4[32];
  proc_control_B.in4[147] = proc_control_B.in4_tmp_p * in4[31] * in4[32];
  proc_control_B.in4[148] = proc_control_B.in4_tmp_po * in4[31] * in4[32];
  proc_control_B.in4[149] = proc_control_B.in4_tmp_ly * in4[31] * in4[32];
  proc_control_B.in4[150] = proc_control_B.t95_tmp_l * in4[31] * in4[32];
  proc_control_B.in4[151] = proc_control_B.t23;
  proc_control_B.in4[152] = proc_control_B.t96_tmp_h * in4[31] * in4[32];
  proc_control_B.in4[153] = proc_control_B.t99_tmp_c * in4[31] * in4[32];
  proc_control_B.in4[154] = proc_control_B.t100_tmp_g * in4[31] * in4[32];
  proc_control_B.in4[155] = proc_control_B.t103_tmp_e * in4[31] * in4[32];
  proc_control_B.in4[156] = proc_control_B.t104_tmp_n * in4[31] * in4[32];
  proc_control_B.in4[157] = proc_control_B.t111_tmp_f * in4[31] * in4[32];
  proc_control_B.in4[158] = proc_control_B.t114_tmp_n * in4[31] * in4[32];
  proc_control_B.in4[159] = proc_control_B.t118_tmp_e * in4[31] * in4[32];
  proc_control_B.in4[160] = proc_control_B.t122_tmp_b * in4[31] * in4[32];
  proc_control_B.in4[161] = in4[30] * proc_control_B.t83;
  proc_control_B.in4[162] = in4[30] * proc_control_B.t84;
  proc_control_B.in4[163] = in4[30] * proc_control_B.t85;
  proc_control_B.in4[164] = in4[30] * proc_control_B.t86;
  proc_control_B.in4[165] = in4[30] * proc_control_B.t87;
  proc_control_B.in4[166] = in4[30] * proc_control_B.t88;
  proc_control_B.in4[167] = in4[30] * proc_control_B.t89;
  proc_control_B.in4[168] = in4[30] * proc_control_B.t90;
  proc_control_B.in4[169] = in4[30] * proc_control_B.t91;
  proc_control_B.in4[170] = in4[30] * proc_control_B.t92;
  proc_control_B.in4[171] = in4[30] * proc_control_B.t93;
  proc_control_B.in4[172] = in4[30] * proc_control_B.t94;
  proc_control_B.in4[173] = in4[32] * proc_control_B.t83;
  proc_control_B.in4[174] = in4[32] * proc_control_B.t84;
  proc_control_B.in4[175] = in4[32] * proc_control_B.t85;
  proc_control_B.in4[176] = in4[32] * proc_control_B.t86;
  proc_control_B.in4[177] = in4[32] * proc_control_B.t87;
  proc_control_B.in4[178] = in4[32] * proc_control_B.t88;
  proc_control_B.in4[179] = in4[31] * proc_control_B.t95;
  proc_control_B.in4[180] = in4[31] * proc_control_B.t96;
  proc_control_B.in4[181] = in4[32] * proc_control_B.t95;
  proc_control_B.in4[182] = in4[32] * proc_control_B.t96;
  proc_control_B.in4[183] = in4[31] * proc_control_B.t99;
  proc_control_B.in4[184] = in4[31] * proc_control_B.t100;
  proc_control_B.in4[185] = in4[32] * proc_control_B.t97;
  proc_control_B.in4[186] = in4[32] * proc_control_B.t98;
  proc_control_B.in4[187] = in4[31] * proc_control_B.t103;
  proc_control_B.in4[188] = in4[31] * proc_control_B.t104;
  proc_control_B.in4[189] = in4[32] * proc_control_B.t99;
  proc_control_B.in4[190] = in4[32] * proc_control_B.t100;
  proc_control_B.in4[191] = in4[32] * proc_control_B.t103;
  proc_control_B.in4[192] = proc_control_B.t27;
  proc_control_B.in4[193] = in4[32] * proc_control_B.t104;
  proc_control_B.in4[194] = in4[32] * proc_control_B.t105;
  proc_control_B.in4[195] = in4[32] * proc_control_B.t106;
  proc_control_B.in4[196] = in4[31] * proc_control_B.t111;
  proc_control_B.in4[197] = in4[32] * proc_control_B.t107;
  proc_control_B.in4[198] = in4[32] * proc_control_B.t108;
  proc_control_B.in4[199] = in4[31] * proc_control_B.t114;
  proc_control_B.in4[200] = in4[32] * proc_control_B.t111;
  proc_control_B.in4[201] = in4[32] * proc_control_B.t114;
  proc_control_B.in4[202] = in4[32] * proc_control_B.t115;
  proc_control_B.in4_tmp_j0 = proc_control_B.in4_tmp_a * in4[30];
  proc_control_B.in4[203] = proc_control_B.in4_tmp_j0 * in4[31] * in4[0];
  proc_control_B.in4_tmp_l = proc_control_B.in4_tmp_i * in4[30];
  proc_control_B.in4[204] = proc_control_B.in4_tmp_l * in4[31] * in4[0];
  proc_control_B.in4_tmp_p = proc_control_B.in4_tmp_nq * in4[30];
  proc_control_B.in4[205] = proc_control_B.in4_tmp_p * in4[31] * in4[0];
  proc_control_B.in4_tmp_po = proc_control_B.in4_tmp_f * in4[30];
  proc_control_B.in4[206] = proc_control_B.in4_tmp_po * in4[31] * in4[0];
  proc_control_B.in4[207] = in4[31] * proc_control_B.t118;
  proc_control_B.in4[208] = in4[32] * proc_control_B.t116;
  proc_control_B.in4_tmp_ly = proc_control_B.t84_tmp * in4[30];
  proc_control_B.in4[209] = proc_control_B.in4_tmp_ly * in4[32] * in4[0];
  proc_control_B.t95_tmp_l = proc_control_B.t85_tmp * in4[30];
  proc_control_B.in4[210] = proc_control_B.t95_tmp_l * in4[32] * in4[0];
  proc_control_B.t96_tmp_h = proc_control_B.t95_tmp_tmp * in4[30];
  proc_control_B.in4[211] = proc_control_B.t96_tmp_h * in4[32] * in4[0];
  proc_control_B.t99_tmp_c = proc_control_B.t96_tmp_tmp * in4[30];
  proc_control_B.in4[212] = proc_control_B.t99_tmp_c * in4[32] * in4[0];
  proc_control_B.in4[213] = proc_control_B.t29;
  proc_control_B.in4[214] = in4[32] * proc_control_B.t118;
  proc_control_B.t100_tmp_g = proc_control_B.t83_tmp_tmp * in4[31];
  proc_control_B.in4[215] = proc_control_B.t100_tmp_g * in4[32] * in4[0];
  proc_control_B.t103_tmp_e = proc_control_B.t85_tmp_tmp * in4[31];
  proc_control_B.in4[216] = proc_control_B.t103_tmp_e * in4[32] * in4[0];
  proc_control_B.t103 = proc_control_B.t99_tmp_tmp * in4[31];
  proc_control_B.in4[217] = proc_control_B.t103 * in4[32] * in4[0];
  proc_control_B.t104_tmp_n = proc_control_B.t100_tmp_tmp * in4[31];
  proc_control_B.in4[218] = proc_control_B.t104_tmp_n * in4[32] * in4[0];
  proc_control_B.t105 = proc_control_B.in4_tmp_i4 * in4[30];
  proc_control_B.in4[219] = proc_control_B.t105 * in4[31] * in4[0];
  proc_control_B.in4[220] = in4[32] * proc_control_B.t120;
  proc_control_B.in4[221] = in4[31] * proc_control_B.t122;
  proc_control_B.t107 = proc_control_B.in4_tmp_k * in4[30];
  proc_control_B.in4[222] = proc_control_B.t107 * in4[32] * in4[0];
  proc_control_B.in4[223] = in4[32] * proc_control_B.t122;
  proc_control_B.t122 = proc_control_B.in4_tmp_b * in4[30];
  proc_control_B.in4[224] = proc_control_B.t122 * in4[31] * in4[0];
  proc_control_B.t111_tmp_f = proc_control_B.t114_tmp_tmp * in4[31];
  proc_control_B.in4[225] = proc_control_B.t111_tmp_f * in4[32] * in4[0];
  proc_control_B.t114_tmp_n = proc_control_B.t111_tmp_tmp * in4[31];
  proc_control_B.in4[226] = proc_control_B.t114_tmp_n * in4[32] * in4[0];
  proc_control_B.in4[227] = in4[32] * proc_control_B.t123;
  proc_control_B.t123 = proc_control_B.t122_tmp * in4[30];
  proc_control_B.in4[228] = proc_control_B.t123 * in4[32] * in4[0];
  proc_control_B.t118_tmp_e = proc_control_B.in4_tmp_da * in4[30];
  proc_control_B.in4[229] = proc_control_B.t118_tmp_e * in4[31] * in4[0];
  proc_control_B.t122_tmp_b = proc_control_B.in4_tmp_hs * in4[30];
  proc_control_B.in4[230] = proc_control_B.t122_tmp_b * in4[31] * in4[0];
  proc_control_B.in4_tmp_pn = proc_control_B.in4_tmp * in4[30];
  proc_control_B.in4[231] = proc_control_B.in4_tmp_pn * in4[32] * in4[0];
  proc_control_B.in4_tmp_nm = proc_control_B.t118_tmp_tmp * in4[31];
  proc_control_B.in4[232] = proc_control_B.in4_tmp_nm * in4[32] * in4[0];
  proc_control_B.in4_tmp_nhy = proc_control_B.in4_tmp_d * in4[30];
  proc_control_B.in4[233] = proc_control_B.in4_tmp_nhy * in4[32] * in4[0];
  proc_control_B.in4_tmp_ih = proc_control_B.in4_tmp_h * in4[31];
  proc_control_B.in4[234] = proc_control_B.in4_tmp_ih * in4[32] * in4[0];
  proc_control_B.in4_tmp_no = proc_control_B.in4_tmp_nl * in4[30];
  proc_control_B.in4[235] = proc_control_B.in4_tmp_no * in4[32] * in4[0];
  proc_control_B.in4_tmp_jk = proc_control_B.in4_tmp_fj * in4[30];
  proc_control_B.in4[236] = proc_control_B.in4_tmp_jk * in4[31] * in4[0];
  proc_control_B.in4_tmp_n0 = proc_control_B.t122_tmp_tmp * in4[31];
  proc_control_B.in4[237] = proc_control_B.in4_tmp_n0 * in4[32] * in4[0];
  proc_control_B.in4_tmp_eu = proc_control_B.in4_tmp_ay * in4[30];
  proc_control_B.in4[238] = proc_control_B.in4_tmp_eu * in4[31] * in4[0];
  proc_control_B.in4_tmp_fa = proc_control_B.in4_tmp_j * in4[31];
  proc_control_B.in4[239] = proc_control_B.in4_tmp_fa * in4[32] * in4[0];
  proc_control_B.in4_tmp_inq = proc_control_B.in4_tmp_n * in4[30];
  proc_control_B.in4[240] = proc_control_B.in4_tmp_inq * in4[32] * in4[0];
  proc_control_B.in4[241] = proc_control_B.t20_k + proc_control_B.t24_a;
  proc_control_B.in4[242] = proc_control_B.t20_k + proc_control_B.t28;
  proc_control_B.in4[243] = proc_control_B.t24_a + proc_control_B.t28;
  proc_control_B.in4[244] = proc_control_B.t30 + proc_control_B.t31;
  proc_control_B.in4[245] = -proc_control_B.t83;
  proc_control_B.in4[246] = -proc_control_B.t86;
  proc_control_B.in4[247] = -proc_control_B.t87;
  proc_control_B.in4[248] = in1[7] * in4[30];
  proc_control_B.in4[249] = -proc_control_B.t89;
  proc_control_B.in4[250] = -proc_control_B.t92;
  proc_control_B.in4[251] = -proc_control_B.t93;
  proc_control_B.in4[252] = -proc_control_B.t96;
  proc_control_B.in4[253] = -proc_control_B.t98;
  proc_control_B.in4[254] = -proc_control_B.t100;
  proc_control_B.in4[255] = -(proc_control_B.t96_tmp * in4[32] * in4[0]);
  proc_control_B.in4[256] = -proc_control_B.t104;
  proc_control_B.in4[257] = -proc_control_B.t106;
  proc_control_B.in4[258] = -proc_control_B.t108;
  proc_control_B.in4[259] = in1[8] * in4[31];
  proc_control_B.in4[260] = -(proc_control_B.t100_tmp * in4[32] * in4[0]);
  proc_control_B.in4[261] = -proc_control_B.t111;
  proc_control_B.in4[262] = -(proc_control_B.t104_tmp * in4[32] * in4[0]);
  proc_control_B.in4[263] = -proc_control_B.t114;
  proc_control_B.in4[264] = -proc_control_B.t115;
  proc_control_B.in4[265] = -proc_control_B.t116;
  proc_control_B.in4[266] = -(proc_control_B.t111_tmp * in4[32] * in4[0]);
  proc_control_B.in4[267] = -proc_control_B.t118;
  proc_control_B.in4[268] = -(proc_control_B.t114_tmp * in4[32] * in4[0]);
  proc_control_B.in4[269] = -proc_control_B.t120;
  proc_control_B.in4[270] = in1[9] * in4[32];
  proc_control_B.in4[271] = -(proc_control_B.t118_tmp * in4[32] * in4[0]);
  proc_control_B.in4[272] = proc_control_B.t36;
  proc_control_B.in4[273] = in4[12] * proc_control_B.t40_c * proc_control_B.t51;
  proc_control_B.in4[274] = proc_control_B.t37;
  proc_control_B.in4[275] = in4[13] * proc_control_B.t37 * proc_control_B.t51;
  proc_control_B.in4[276] = in4[12] * proc_control_B.t43_k * proc_control_B.t51;
  proc_control_B.in4[277] = in4[14] * proc_control_B.t37 * proc_control_B.t51;
  proc_control_B.in4[278] = in4[13] * proc_control_B.t43_k * proc_control_B.t51;
  proc_control_B.in4[279] = in4[14] * proc_control_B.t40_c * proc_control_B.t51;
  proc_control_B.in4[280] = proc_control_B.t38;
  proc_control_B.in4[281] = proc_control_B.t36 * proc_control_B.t36;
  proc_control_B.in4[282] = proc_control_B.t84_tmp_tmp * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[283] = proc_control_B.t86_tmp_tmp * in4[12] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[284] = proc_control_B.t87_tmp_tmp * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[285] = proc_control_B.t40_c;
  proc_control_B.in4[286] = proc_control_B.t88_tmp_tmp * in4[12] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[287] = proc_control_B.t99_tmp * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[288] = proc_control_B.in4_tmp_m * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[289] = proc_control_B.in4_tmp_g * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[290] = proc_control_B.t41_j;
  proc_control_B.in4[291] = proc_control_B.in4_tmp_nh * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[292] = proc_control_B.in4_tmp_c * in4[12] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[293] = proc_control_B.in4_tmp_d4 * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[294] = proc_control_B.in4_tmp_ky * in4[12] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[295] = proc_control_B.in4_tmp_cl * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[296] = proc_control_B.t38 * proc_control_B.t38;
  proc_control_B.in4[297] = proc_control_B.t43_k;
  proc_control_B.in4[298] = proc_control_B.in4_tmp_jd * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[299] = proc_control_B.in4_tmp_mt * in4[13] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[300] = proc_control_B.t41_j * proc_control_B.t41_j;
  proc_control_B.in4[301] = proc_control_B.in4_tmp_ie * in4[12] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[302] = proc_control_B.in4_tmp_bj * in4[12] * in4[14] *
    proc_control_B.t49;
  proc_control_B.in4[303] = proc_control_B.in4_tmp_o * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[304] = proc_control_B.in4_tmp_gs * in4[12] * in4[13] *
    proc_control_B.t49;
  proc_control_B.in4[305] = proc_control_B.in4_tmp_ly * proc_control_B.t48;
  proc_control_B.in4[306] = proc_control_B.t95_tmp_l * proc_control_B.t48;
  proc_control_B.in4[307] = proc_control_B.t86_tmp * in4[30] *
    proc_control_B.t48;
  proc_control_B.in4[308] = proc_control_B.t87_tmp * in4[30] *
    proc_control_B.t48;
  proc_control_B.in4[309] = proc_control_B.t103_tmp * in4[30] *
    proc_control_B.t48;
  proc_control_B.in4[310] = proc_control_B.in4_tmp_e * in4[30] *
    proc_control_B.t48;
  proc_control_B.in4[311] = proc_control_B.in4_tmp_j0 * proc_control_B.t48;
  proc_control_B.in4[312] = proc_control_B.in4_tmp_l * proc_control_B.t48;
  proc_control_B.in4[313] = proc_control_B.in4_tmp_p * proc_control_B.t48;
  proc_control_B.in4[314] = proc_control_B.in4_tmp_po * proc_control_B.t48;
  proc_control_B.in4[315] = proc_control_B.t96_tmp_h * proc_control_B.t48;
  proc_control_B.in4[316] = proc_control_B.t99_tmp_c * proc_control_B.t48;
  proc_control_B.in4[317] = proc_control_B.t100_tmp_g * proc_control_B.t48;
  proc_control_B.in4[318] = proc_control_B.t48;
  proc_control_B.in4[319] = proc_control_B.t103_tmp_e * proc_control_B.t48;
  proc_control_B.in4[320] = proc_control_B.t88_tmp * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[321] = proc_control_B.t95_tmp * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[322] = proc_control_B.in4_tmp_a * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[323] = proc_control_B.in4_tmp_i * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[324] = proc_control_B.t103 * proc_control_B.t48;
  proc_control_B.in4[325] = proc_control_B.t104_tmp_n * proc_control_B.t48;
  proc_control_B.in4[326] = proc_control_B.in4_tmp_in * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[327] = proc_control_B.in4_tmp_eb * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[328] = proc_control_B.in4_tmp_nq * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[329] = proc_control_B.t49;
  proc_control_B.in4[330] = proc_control_B.in4_tmp_f * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[331] = proc_control_B.t84_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[332] = proc_control_B.t85_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[333] = proc_control_B.t83_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[334] = proc_control_B.t85_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[335] = proc_control_B.t99_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[336] = proc_control_B.t100_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[337] = proc_control_B.in4_tmp_is * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[338] = proc_control_B.t48 * proc_control_B.t48;
  proc_control_B.in4[339] = proc_control_B.in4_tmp_m5 * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[340] = proc_control_B.in4_tmp_dl * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[341] = proc_control_B.in4_tmp_j4 * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[342] = proc_control_B.t95_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[343] = proc_control_B.t96_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[344] = proc_control_B.t107 * proc_control_B.t48;
  proc_control_B.in4[345] = proc_control_B.in4_tmp_pe * in4[30] *
    proc_control_B.t48;
  proc_control_B.in4[346] = proc_control_B.in4_tmp_b4 * in4[30] *
    proc_control_B.t48;
  proc_control_B.in4[347] = proc_control_B.t105 * proc_control_B.t48;
  proc_control_B.in4[348] = proc_control_B.t51;
  proc_control_B.in4[349] = in1[4] * in1[5] * 2.0;
  proc_control_B.in4[350] = proc_control_B.t111_tmp_f * proc_control_B.t48;
  proc_control_B.in4[351] = proc_control_B.in4_tmp_i4 * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[352] = proc_control_B.t114_tmp_n * proc_control_B.t48;
  proc_control_B.in4[353] = proc_control_B.t123 * proc_control_B.t48;
  proc_control_B.in4[354] = proc_control_B.t122 * proc_control_B.t48;
  proc_control_B.in4[355] = proc_control_B.in4_tmp_pn * proc_control_B.t48;
  proc_control_B.in4[356] = proc_control_B.in4_tmp_k * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[357] = proc_control_B.t114_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[358] = proc_control_B.t29 * 2.0;
  proc_control_B.in4[359] = proc_control_B.t111_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[360] = proc_control_B.t118_tmp_e * proc_control_B.t48;
  proc_control_B.in4[361] = proc_control_B.in4_tmp_nm * proc_control_B.t48;
  proc_control_B.in4[362] = proc_control_B.in4_tmp_ce * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[363] = proc_control_B.t122_tmp_b * proc_control_B.t48;
  proc_control_B.in4[364] = proc_control_B.in4_tmp_nhy * proc_control_B.t48;
  proc_control_B.in4[365] = proc_control_B.in4_tmp_daj * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[366] = proc_control_B.in4_tmp_b * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[367] = proc_control_B.t30 * 2.0;
  proc_control_B.in4[368] = proc_control_B.t122_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[369] = proc_control_B.in4_tmp_da * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[370] = proc_control_B.t118_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[371] = proc_control_B.in4_tmp_ih * proc_control_B.t48;
  proc_control_B.in4[372] = proc_control_B.in4_tmp_hs * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[373] = proc_control_B.in4_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[374] = proc_control_B.in4_tmp_no * proc_control_B.t48;
  proc_control_B.in4[375] = proc_control_B.in4_tmp_h * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[376] = proc_control_B.in4_tmp_bi * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[377] = proc_control_B.in4_tmp_bt * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[378] = proc_control_B.t31 * 2.0;
  proc_control_B.in4[379] = proc_control_B.in4_tmp_d * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[380] = proc_control_B.in4_tmp_jk * proc_control_B.t48;
  proc_control_B.in4[381] = proc_control_B.in4_tmp_n0 * proc_control_B.t48;
  proc_control_B.in4[382] = proc_control_B.in4_tmp_nl * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[383] = proc_control_B.in4_tmp_fj * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[384] = proc_control_B.t122_tmp_tmp * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[385] = proc_control_B.in4_tmp_fa * proc_control_B.t48;
  proc_control_B.in4_tmp_j0 = in4[7] * in4[12] * in4[14];
  proc_control_B.in4[386] = proc_control_B.in4_tmp_j0 * in4[30] *
    proc_control_B.t49;
  proc_control_B.in4[387] = proc_control_B.t32_f * 2.0;
  proc_control_B.in4_tmp_l = in4[11] * in4[12] * in4[13];
  proc_control_B.in4[388] = proc_control_B.in4_tmp_l * in4[30] *
    proc_control_B.t49;
  proc_control_B.in4[389] = proc_control_B.in4_tmp_eu * proc_control_B.t48;
  proc_control_B.in4[390] = proc_control_B.in4_tmp_inq * proc_control_B.t48;
  proc_control_B.in4[391] = proc_control_B.in4_tmp_j * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4_tmp_p = in4[3] * in4[13] * in4[14];
  proc_control_B.in4[392] = proc_control_B.in4_tmp_p * in4[31] *
    proc_control_B.t49;
  proc_control_B.in4[393] = proc_control_B.in4_tmp_l * in4[31] *
    proc_control_B.t49;
  proc_control_B.in4[394] = proc_control_B.in4_tmp_ay * in4[31] *
    proc_control_B.t48;
  proc_control_B.in4[395] = proc_control_B.in4_tmp_p * in4[32] *
    proc_control_B.t49;
  proc_control_B.in4[396] = proc_control_B.in4_tmp_j0 * in4[32] *
    proc_control_B.t49;
  proc_control_B.in4[397] = proc_control_B.in4_tmp_n * in4[32] *
    proc_control_B.t48;
  proc_control_B.in4[398] = in1[3] * in1[6] * 2.0;
  proc_control_B.in4_tmp_j0 = in4[13] * in4[33] * in4[14];
  proc_control_B.in4[399] = proc_control_B.in4_tmp_j0 * in4[31] *
    proc_control_B.t49;
  proc_control_B.in4_tmp_l = in4[12] * in4[34] * in4[14];
  proc_control_B.in4[400] = proc_control_B.in4_tmp_l * in4[30] *
    proc_control_B.t49;
  proc_control_B.in4[401] = proc_control_B.in4_tmp_j0 * in4[32] *
    proc_control_B.t49;
  proc_control_B.in4_tmp_j0 = in4[12] * in4[35] * in4[13];
  proc_control_B.in4[402] = proc_control_B.in4_tmp_j0 * in4[30] *
    proc_control_B.t49;
  proc_control_B.in4[403] = proc_control_B.in4_tmp_j0 * in4[31] *
    proc_control_B.t49;
  proc_control_B.in4[404] = proc_control_B.in4_tmp_l * in4[32] *
    proc_control_B.t49;
  proc_control_B.in4[405] = in4[27] * std::abs(in1[10]);
  proc_control_B.in4[406] = -(proc_control_B.t83_tmp * in4[0]);
  proc_control_B.in4[407] = in4[28] * std::abs(in1[11]);
  proc_control_B.in4[408] = in4[29] * std::abs(in1[12]);
  proc_control_B.in4[409] = in4[24] * std::abs(in1[7]);
  proc_control_B.in4[410] = in4[25] * std::abs(in1[8]);
  proc_control_B.in4[411] = in4[26] * std::abs(in1[9]);
  proc_control_B.in4[412] = -in2[2];
  proc_control_B.in4[413] = 1.0 / in4[2];
  proc_control_B.in4[414] = -in1[2];
  proc_control_B.in4[415] = -(in1[10] * in4[33]);
  proc_control_B.in4[416] = -(in1[11] * in4[34]);
  proc_control_B.in4[417] = -(in1[12] * in4[35]);
  proc_control_B.in4[418] = -proc_control_B.t22;
  proc_control_B.in4[419] = -proc_control_B.t23;
  proc_control_B.in4[420] = -proc_control_B.t27;
  proc_control_B.in4[421] = in1[4] * in1[4] * 2.0;
  proc_control_B.in4[422] = in1[5] * in1[5] * 2.0;
  proc_control_B.in4[423] = in1[6] * in1[6] * 2.0;
  proc_control_B.in4[424] = -proc_control_B.t32_f;
  proc_control_B.in4[425] = in4[2] / 2.0;
  proc_control_B.in4[426] = in4[1] / 2.0;
  proc_control_B.in4[427] = in4[3] * in1[10];
  proc_control_B.in4[428] = in1[11] * in4[14] + in1[7];
  proc_control_B.in4[429] = in1[10] * in4[13] + in1[9];
  proc_control_B.in4[430] = in4[12] * in1[12] + in1[8];
  proc_control_B.in4[431] = proc_control_B.t84;
  proc_control_B.in4[432] = proc_control_B.t85;
  proc_control_B.in4[433] = proc_control_B.t88;
  proc_control_B.in4[434] = in4[6] * in1[10];
  proc_control_B.in4[435] = proc_control_B.t90;
  proc_control_B.in4[436] = proc_control_B.t91;
  proc_control_B.in4[437] = proc_control_B.t94;
  proc_control_B.in4[438] = proc_control_B.t95;
  proc_control_B.in4[439] = proc_control_B.t97;
  proc_control_B.in4[440] = proc_control_B.t99;
  proc_control_B.in4[441] = in1[7];
  proc_control_B.in4[442] = in1[8];
  proc_control_B.in4[443] = in4[1];
  proc_control_B.in4[444] = in1[9];
  proc_control_ft_1_pr(proc_control_B.in4, out1);
}

void proc_control::proc_control_EkfNavStatesEq(real_T x[13], const real_T
  inputs[95])
{
  int32_T b_i;
  int32_T i;

  // Start for MATLABSystem: '<S295>/MATLAB System'
  //  Split u vector and constMec from inputs
  //  Crée la matrice thrusters
  b_i = 0;
  for (proc_control_B.i13 = 0; proc_control_B.i13 < 6; proc_control_B.i13++) {
    proc_control_B.T_n[b_i] = inputs[proc_control_B.i13 + 47];
    proc_control_B.T_n[b_i + 1] = inputs[proc_control_B.i13 + 53];
    proc_control_B.T_n[b_i + 2] = inputs[proc_control_B.i13 + 59];
    proc_control_B.T_n[b_i + 3] = inputs[proc_control_B.i13 + 65];
    proc_control_B.T_n[b_i + 4] = inputs[proc_control_B.i13 + 71];
    proc_control_B.T_n[b_i + 5] = inputs[proc_control_B.i13 + 77];
    proc_control_B.T_n[b_i + 6] = inputs[proc_control_B.i13 + 83];
    proc_control_B.T_n[b_i + 7] = inputs[proc_control_B.i13 + 89];
    b_i += 8;
  }

  proc_control_B.inputs_p = inputs[21];
  proc_control_B.inputs_p5 = inputs[22];
  proc_control_B.inputs_m = inputs[23];
  b_i = 0;
  for (proc_control_B.b_i_i = 0; proc_control_B.b_i_i < 8; proc_control_B.b_i_i
       ++) {
    proc_control_B.qt_idx_0 = proc_control_B.T_n[proc_control_B.b_i_i + 24] *
      0.017453292519943295 / 2.0;
    proc_control_B.s_idx_0 = proc_control_B.qt_idx_0;
    proc_control_B.c_idx_0_k = proc_control_B.qt_idx_0;
    proc_control_B.qt_idx_0 = proc_control_B.T_n[proc_control_B.b_i_i + 32] *
      0.017453292519943295 / 2.0;
    proc_control_B.s_idx_1 = proc_control_B.qt_idx_0;
    proc_control_B.c_idx_1 = proc_control_B.qt_idx_0;
    proc_control_B.qt_idx_0 = proc_control_B.T_n[proc_control_B.b_i_i + 40] *
      0.017453292519943295 / 2.0;
    proc_control_B.c_idx_0_k = std::cos(proc_control_B.c_idx_0_k);
    proc_control_B.s_idx_0 = std::sin(proc_control_B.s_idx_0);
    proc_control_B.c_idx_1 = std::cos(proc_control_B.c_idx_1);
    proc_control_B.s_idx_1 = std::sin(proc_control_B.s_idx_1);
    proc_control_B.c_idx_2 = std::cos(proc_control_B.qt_idx_0);
    proc_control_B.s_idx_2 = std::sin(proc_control_B.qt_idx_0);
    proc_control_B.qt_idx_1 = proc_control_B.c_idx_0_k * proc_control_B.c_idx_1;
    proc_control_B.qt_idx_3 = proc_control_B.s_idx_0 * proc_control_B.s_idx_1;
    proc_control_B.qt_idx_0 = proc_control_B.qt_idx_1 * proc_control_B.c_idx_2 +
      proc_control_B.qt_idx_3 * proc_control_B.s_idx_2;
    proc_control_B.qt_idx_1 = proc_control_B.qt_idx_1 * proc_control_B.s_idx_2 -
      proc_control_B.qt_idx_3 * proc_control_B.c_idx_2;
    proc_control_B.s_idx_0 *= proc_control_B.c_idx_1;
    proc_control_B.s_idx_1 *= proc_control_B.c_idx_0_k;
    proc_control_B.c_idx_0_k = proc_control_B.s_idx_1 * proc_control_B.c_idx_2 +
      proc_control_B.s_idx_0 * proc_control_B.s_idx_2;
    proc_control_B.qt_idx_3 = proc_control_B.s_idx_0 * proc_control_B.c_idx_2 -
      proc_control_B.s_idx_1 * proc_control_B.s_idx_2;

    //  convertir les angle d'euler en quaternion
    // ThrusterVector
    //     Tt = ThrusterVector(IN1,IN2,IN3)
    //     This function was generated by the Symbolic Math Toolbox version 9.1. 
    //     12-Jul-2022 16:58:54
    proc_control_B.c_idx_2 = proc_control_B.c_idx_0_k * proc_control_B.qt_idx_3 *
      2.0;
    proc_control_B.s_idx_2 = proc_control_B.qt_idx_0 * proc_control_B.qt_idx_1 *
      2.0;
    proc_control_B.s_idx_1 = proc_control_B.inputs_p -
      proc_control_B.T_n[proc_control_B.b_i_i];
    proc_control_B.s_idx_0 = proc_control_B.inputs_p5 -
      proc_control_B.T_n[proc_control_B.b_i_i + 8];
    proc_control_B.c_idx_1 = proc_control_B.inputs_m -
      proc_control_B.T_n[proc_control_B.b_i_i + 16];
    proc_control_B.qt_idx_0 = proc_control_B.qt_idx_1 * proc_control_B.qt_idx_3 *
      2.0 + proc_control_B.qt_idx_0 * proc_control_B.c_idx_0_k * 2.0;
    proc_control_B.qt_idx_3 = proc_control_B.c_idx_2 - proc_control_B.s_idx_2;
    proc_control_B.qt_idx_1 = (proc_control_B.qt_idx_1 * proc_control_B.qt_idx_1
      * 2.0 + proc_control_B.c_idx_0_k * proc_control_B.c_idx_0_k * 2.0) - 1.0;
    proc_control_B.Tm_k[b_i] = -proc_control_B.qt_idx_0;
    proc_control_B.Tm_k[b_i + 1] = -proc_control_B.c_idx_2 +
      proc_control_B.s_idx_2;
    proc_control_B.Tm_k[b_i + 2] = proc_control_B.qt_idx_1;
    proc_control_B.Tm_k[b_i + 3] = -proc_control_B.s_idx_0 *
      proc_control_B.qt_idx_1 - proc_control_B.c_idx_1 * proc_control_B.qt_idx_3;
    proc_control_B.Tm_k[b_i + 4] = proc_control_B.s_idx_1 *
      proc_control_B.qt_idx_1 + proc_control_B.c_idx_1 * proc_control_B.qt_idx_0;
    proc_control_B.Tm_k[b_i + 5] = proc_control_B.s_idx_1 *
      proc_control_B.qt_idx_3 - proc_control_B.s_idx_0 * proc_control_B.qt_idx_0;

    //  Calculer le vecteur thrusters
    b_i += 6;
  }

  //  prendre la matrice M
  // AUVModelMatrices
  //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     12-Jul-2022 16:58:53
  proc_control_B.c_idx_2 = inputs[9] * inputs[21];
  proc_control_B.s_idx_1 = inputs[9] * inputs[22];
  proc_control_B.s_idx_0 = inputs[9] * inputs[23];

  //  M inverse * Tm
  proc_control_B.inputs[0] = -inputs[39] + inputs[9];
  proc_control_B.inputs[1] = 0.0;
  proc_control_B.inputs[2] = 0.0;
  proc_control_B.inputs[3] = 0.0;
  proc_control_B.inputs[4] = proc_control_B.s_idx_0;
  proc_control_B.inputs[5] = -proc_control_B.s_idx_1;
  proc_control_B.inputs[6] = 0.0;
  proc_control_B.inputs[7] = -inputs[40] + inputs[9];
  proc_control_B.inputs[8] = 0.0;
  proc_control_B.inputs[9] = -proc_control_B.s_idx_0;
  proc_control_B.inputs[10] = 0.0;
  proc_control_B.inputs[11] = proc_control_B.c_idx_2;
  proc_control_B.inputs[12] = 0.0;
  proc_control_B.inputs[13] = 0.0;
  proc_control_B.inputs[14] = -inputs[41] + inputs[9];
  proc_control_B.inputs[15] = proc_control_B.s_idx_1;
  proc_control_B.inputs[16] = -proc_control_B.c_idx_2;
  proc_control_B.inputs[17] = 0.0;
  proc_control_B.inputs[18] = 0.0;
  proc_control_B.inputs[19] = -proc_control_B.s_idx_0;
  proc_control_B.inputs[20] = proc_control_B.s_idx_1;
  proc_control_B.inputs[21] = inputs[12] - inputs[42];
  proc_control_B.inputs[22] = inputs[15];
  proc_control_B.inputs[23] = inputs[18];
  proc_control_B.inputs[24] = proc_control_B.s_idx_0;
  proc_control_B.inputs[25] = 0.0;
  proc_control_B.inputs[26] = -proc_control_B.c_idx_2;
  proc_control_B.inputs[27] = inputs[13];
  proc_control_B.inputs[28] = inputs[16] - inputs[43];
  proc_control_B.inputs[29] = inputs[19];
  proc_control_B.inputs[30] = -proc_control_B.s_idx_1;
  proc_control_B.inputs[31] = proc_control_B.c_idx_2;
  proc_control_B.inputs[32] = 0.0;
  proc_control_B.inputs[33] = inputs[14];
  proc_control_B.inputs[34] = inputs[17];
  proc_control_B.inputs[35] = inputs[20] - inputs[44];
  proc_control_mldivide_pr35(proc_control_B.inputs, proc_control_B.Tm_k);
  for (b_i = 0; b_i < 8; b_i++) {
    for (proc_control_B.i13 = 0; proc_control_B.i13 < 7; proc_control_B.i13++) {
      proc_control_B.Bc_i[proc_control_B.i13 + 13 * b_i] = 0.0;
    }

    for (proc_control_B.i13 = 0; proc_control_B.i13 < 6; proc_control_B.i13++) {
      proc_control_B.Bc_i[(proc_control_B.i13 + 13 * b_i) + 7] =
        proc_control_B.Tm_k[6 * b_i + proc_control_B.i13];
    }
  }

  //  Préparer estimation
  for (b_i = 0; b_i < 6; b_i++) {
    proc_control_B.dv22[b_i] = 0.0;
  }

  for (proc_control_B.b_i_i = 0; proc_control_B.b_i_i < 2; proc_control_B.b_i_i
       ++) {
    //      % X(k+1) = A(xk)*xk + B*xk
    //      x_dot_k =  AUVQuatPerturbedSimFcn(xk,zeros(6,1),constValues) + Bc*u.' ; 
    //      % Intégration trapezoidale
    //      xk = xk + ((x_dot_k + x_dot_kk)*(Ts))/2;
    //      x_dot_kk = x_dot_k;
    proc_con_AUVQuatPerturbedSimFcn(x, proc_control_B.dv22, &inputs[9],
      proc_control_B.dv15);
    for (b_i = 0; b_i < 13; b_i++) {
      proc_control_B.inputs_p = 0.0;
      proc_control_B.i13 = 0;
      for (i = 0; i < 8; i++) {
        proc_control_B.inputs_p += proc_control_B.Bc_i[proc_control_B.i13 + b_i]
          * inputs[i + 1];
        proc_control_B.i13 += 13;
      }

      x[b_i] += (proc_control_B.dv15[b_i] + proc_control_B.inputs_p) * 0.01;
    }

    //  correct Quaternion
    // =================================================================
    //  Fonction qui normalise un quaternion.
    //  quatnormalize de matlab demande areospace block set pour etre compilable. 
    //  Fossen(2021) eq 2.86 p.37
    proc_control_B.s_idx_0 = 3.3121686421112381E-170;
    proc_control_B.c_idx_2 = std::abs(x[3]);
    if (proc_control_B.c_idx_2 > 3.3121686421112381E-170) {
      proc_control_B.s_idx_1 = 1.0;
      proc_control_B.s_idx_0 = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / 3.3121686421112381E-170;
      proc_control_B.s_idx_1 = proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.c_idx_2 = std::abs(x[4]);
    if (proc_control_B.c_idx_2 > proc_control_B.s_idx_0) {
      proc_control_B.s_idx_2 = proc_control_B.s_idx_0 / proc_control_B.c_idx_2;
      proc_control_B.s_idx_1 = proc_control_B.s_idx_1 * proc_control_B.s_idx_2 *
        proc_control_B.s_idx_2 + 1.0;
      proc_control_B.s_idx_0 = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / proc_control_B.s_idx_0;
      proc_control_B.s_idx_1 += proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.c_idx_2 = std::abs(x[5]);
    if (proc_control_B.c_idx_2 > proc_control_B.s_idx_0) {
      proc_control_B.s_idx_2 = proc_control_B.s_idx_0 / proc_control_B.c_idx_2;
      proc_control_B.s_idx_1 = proc_control_B.s_idx_1 * proc_control_B.s_idx_2 *
        proc_control_B.s_idx_2 + 1.0;
      proc_control_B.s_idx_0 = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / proc_control_B.s_idx_0;
      proc_control_B.s_idx_1 += proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.c_idx_2 = std::abs(x[6]);
    if (proc_control_B.c_idx_2 > proc_control_B.s_idx_0) {
      proc_control_B.s_idx_2 = proc_control_B.s_idx_0 / proc_control_B.c_idx_2;
      proc_control_B.s_idx_1 = proc_control_B.s_idx_1 * proc_control_B.s_idx_2 *
        proc_control_B.s_idx_2 + 1.0;
      proc_control_B.s_idx_0 = proc_control_B.c_idx_2;
    } else {
      proc_control_B.s_idx_2 = proc_control_B.c_idx_2 / proc_control_B.s_idx_0;
      proc_control_B.s_idx_1 += proc_control_B.s_idx_2 * proc_control_B.s_idx_2;
    }

    proc_control_B.s_idx_1 = proc_control_B.s_idx_0 * std::sqrt
      (proc_control_B.s_idx_1);
    x[3] /= proc_control_B.s_idx_1;
    x[4] /= proc_control_B.s_idx_1;
    x[5] /= proc_control_B.s_idx_1;
    x[6] /= proc_control_B.s_idx_1;
  }

  // End of Start for MATLABSystem: '<S295>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_pr351ewp(int32_T n, const real_T x[338],
  int32_T ix0)
{
  real_T y;

  // Start for MATLABSystem: '<S295>/MATLAB System'
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_me = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_o = std::abs(x[k - 1]);
        if (proc_control_B.absxk_o > proc_control_B.scale_me) {
          proc_control_B.t_eh = proc_control_B.scale_me / proc_control_B.absxk_o;
          y = y * proc_control_B.t_eh * proc_control_B.t_eh + 1.0;
          proc_control_B.scale_me = proc_control_B.absxk_o;
        } else {
          proc_control_B.t_eh = proc_control_B.absxk_o / proc_control_B.scale_me;
          y += proc_control_B.t_eh * proc_control_B.t_eh;
        }
      }

      y = proc_control_B.scale_me * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S295>/MATLAB System'
  return y;
}

void proc_control::proc_control_qr_pr351(const real_T A[338], real_T Q[338],
  real_T R[169])
{
  int32_T exitg1;
  int32_T i;
  int32_T ia;
  int32_T iac;
  int32_T ii;
  int32_T itau;
  int32_T ix0;
  int32_T jA;
  int32_T knt;
  int32_T lastv;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S295>/MATLAB System'
  std::memset(&proc_control_B.b_tau[0], 0, 13U * sizeof(real_T));
  std::memcpy(&Q[0], &A[0], 338U * sizeof(real_T));
  std::memset(&proc_control_B.work_g[0], 0, 13U * sizeof(real_T));

  // Start for MATLABSystem: '<S295>/MATLAB System'
  for (itau = 0; itau < 13; itau++) {
    ii = itau * 26 + itau;
    ix0 = ii + 2;
    proc_control_B.b_atmp_o = Q[ii];
    proc_control_B.b_tau[itau] = 0.0;
    proc_control_B.beta1_l = proc_control_xnrm2_pr351ewp(25 - itau, Q, ii + 2);
    if (proc_control_B.beta1_l != 0.0) {
      proc_control_B.c_A_e = Q[ii];
      proc_control_B.beta1_l = proc_control_rt_hypotd_snf(proc_control_B.c_A_e,
        proc_control_B.beta1_l);
      if (proc_control_B.c_A_e >= 0.0) {
        proc_control_B.beta1_l = -proc_control_B.beta1_l;
      }

      if (std::abs(proc_control_B.beta1_l) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          i = ii - itau;
          for (lastv = ix0; lastv <= i + 26; lastv++) {
            Q[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.beta1_l *= 9.9792015476736E+291;
          proc_control_B.b_atmp_o *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.beta1_l) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.beta1_l = proc_control_rt_hypotd_snf
          (proc_control_B.b_atmp_o, proc_control_xnrm2_pr351ewp(25 - itau, Q, ii
            + 2));
        if (proc_control_B.b_atmp_o >= 0.0) {
          proc_control_B.beta1_l = -proc_control_B.beta1_l;
        }

        proc_control_B.b_tau[itau] = (proc_control_B.beta1_l -
          proc_control_B.b_atmp_o) / proc_control_B.beta1_l;
        proc_control_B.b_atmp_o = 1.0 / (proc_control_B.b_atmp_o -
          proc_control_B.beta1_l);
        for (lastv = ix0; lastv <= i + 26; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_o;
        }

        for (lastv = 0; lastv <= knt; lastv++) {
          proc_control_B.beta1_l *= 1.0020841800044864E-292;
        }

        proc_control_B.b_atmp_o = proc_control_B.beta1_l;
      } else {
        proc_control_B.b_tau[itau] = (proc_control_B.beta1_l -
          proc_control_B.c_A_e) / proc_control_B.beta1_l;
        proc_control_B.b_atmp_o = 1.0 / (proc_control_B.c_A_e -
          proc_control_B.beta1_l);
        i = ii - itau;
        for (lastv = ix0; lastv <= i + 26; lastv++) {
          Q[lastv - 1] *= proc_control_B.b_atmp_o;
        }

        proc_control_B.b_atmp_o = proc_control_B.beta1_l;
      }
    }

    Q[ii] = proc_control_B.b_atmp_o;
    if (itau + 1 < 13) {
      Q[ii] = 1.0;
      ix0 = ii + 27;
      if (proc_control_B.b_tau[itau] != 0.0) {
        lastv = 26 - itau;
        i = ii - itau;
        while ((lastv > 0) && (Q[i + 25] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 26 + ii;
          ia = i + 27;
          do {
            exitg1 = 0;
            if (ia <= (i + lastv) + 26) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_g[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (26 * knt + ii) + 27;
          for (iac = ix0; iac <= i; iac += 26) {
            proc_control_B.beta1_l = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_l += Q[(ii + ia) - iac] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 27, 26);
            proc_control_B.work_g[ia] += proc_control_B.beta1_l;
          }
        }

        if (!(-proc_control_B.b_tau[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_l = proc_control_B.work_g[ia];
            if (proc_control_B.beta1_l != 0.0) {
              proc_control_B.beta1_l *= -proc_control_B.b_tau[itau];
              i = jA + 27;
              ix0 = (lastv + jA) + 26;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 27] * proc_control_B.beta1_l;
              }
            }

            jA += 26;
          }
        }
      }

      Q[ii] = proc_control_B.b_atmp_o;
    }
  }

  for (ii = 0; ii < 13; ii++) {
    for (itau = 0; itau <= ii; itau++) {
      // Start for MATLABSystem: '<S295>/MATLAB System'
      R[itau + 13 * ii] = Q[26 * ii + itau];
    }

    for (itau = ii + 2; itau < 14; itau++) {
      R[(itau + 13 * ii) - 1] = 0.0;
    }

    proc_control_B.work_g[ii] = 0.0;
  }

  // Start for MATLABSystem: '<S295>/MATLAB System'
  for (itau = 12; itau >= 0; itau--) {
    ii = (itau * 26 + itau) + 26;
    if (itau + 1 < 13) {
      Q[ii - 26] = 1.0;
      ix0 = ii + 1;
      if (proc_control_B.b_tau[itau] != 0.0) {
        lastv = 26 - itau;
        i = (ii - itau) - 1;
        while ((lastv > 0) && (Q[i] == 0.0)) {
          lastv--;
          i--;
        }

        knt = 11 - itau;
        exitg2 = false;
        while ((!exitg2) && (knt + 1 > 0)) {
          i = knt * 26 + ii;
          ia = i + 1;
          do {
            exitg1 = 0;
            if (ia <= i + lastv) {
              if (Q[ia - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        lastv = 0;
        knt = -1;
      }

      if (lastv > 0) {
        if (knt + 1 != 0) {
          if (knt >= 0) {
            std::memset(&proc_control_B.work_g[0], 0, static_cast<uint32_T>(knt
              + 1) * sizeof(real_T));
          }

          i = (26 * knt + ii) + 1;
          for (iac = ix0; iac <= i; iac += 26) {
            proc_control_B.beta1_l = 0.0;
            jA = iac + lastv;
            for (ia = iac; ia < jA; ia++) {
              proc_control_B.beta1_l += Q[((ii + ia) - iac) - 26] * Q[ia - 1];
            }

            ia = div_nde_s32_floor((iac - ii) - 1, 26);
            proc_control_B.work_g[ia] += proc_control_B.beta1_l;
          }
        }

        if (!(-proc_control_B.b_tau[itau] == 0.0)) {
          jA = ii;
          for (ia = 0; ia <= knt; ia++) {
            proc_control_B.beta1_l = proc_control_B.work_g[ia];
            if (proc_control_B.beta1_l != 0.0) {
              proc_control_B.beta1_l *= -proc_control_B.b_tau[itau];
              i = jA + 1;
              ix0 = lastv + jA;
              for (iac = i; iac <= ix0; iac++) {
                Q[iac - 1] += Q[((ii + iac) - jA) - 27] * proc_control_B.beta1_l;
              }
            }

            jA += 26;
          }
        }
      }
    }

    i = ii - itau;
    for (lastv = ii - 24; lastv <= i; lastv++) {
      Q[lastv - 1] *= -proc_control_B.b_tau[itau];
    }

    Q[ii - 26] = 1.0 - proc_control_B.b_tau[itau];
    jA = itau - 1;
    for (i = 0; i <= jA; i++) {
      Q[(ii - i) - 27] = 0.0;
    }
  }
}

void proc_control::pr_ProcPlannerManager_resetImpl
  (ProcPlannerManager_proc_contr_T *b_this)
{
  int32_T i;

  //  Perform one-time calculations, such as computing constants
  b_this->dummy = 999.0;

  //  Chiffre NULL
  for (i = 0; i < 13; i++) {
    // Start for MATLABSystem: '<S302>/MATLAB System'
    b_this->emptyArray[i] = b_this->dummy;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;
  for (i = 0; i < 7; i++) {
    // Start for MATLABSystem: '<S302>/MATLAB System'
    b_this->initialPose[i] = 0.0;
  }

  // Start for MATLABSystem: '<S302>/MATLAB System'
  //  Buffer trajectoire
  i = 0;
  for (int32_T i_1{0}; i_1 < 13; i_1++) {
    for (int32_T i_0{0}; i_0 < 6000; i_0++) {
      // Start for MATLABSystem: '<S302>/MATLAB System'
      b_this->poseBuffer[i_0 + i] = b_this->dummy;
    }

    // Start for MATLABSystem: '<S302>/MATLAB System'
    i += 6000;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = false;
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = (rtNaN);
  } else if (std::isinf(u0) && std::isinf(u1)) {
    int32_T tmp;
    int32_T tmp_0;
    if (u0 > 0.0) {
      tmp = 1;
    } else {
      tmp = -1;
    }

    if (u1 > 0.0) {
      tmp_0 = 1;
    } else {
      tmp_0 = -1;
    }

    y = std::atan2(static_cast<real_T>(tmp), static_cast<real_T>(tmp_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = std::atan2(u0, u1);
  }

  return y;
}

void proc_control::proc_control_expand_atan2(const real_T a_data[], const
  int32_T a_size[1], const real_T b_data[], const int32_T b_size[1], real_T
  c_data[], int32_T c_size[1])
{
  int32_T csz_idx_0;

  // Start for MATLABSystem: '<S138>/MATLAB System' incorporates:
  //   MATLABSystem: '<S302>/MATLAB System'
  //   MATLABSystem: '<S307>/MATLAB System'

  if (b_size[0] == 1) {
    csz_idx_0 = a_size[0];
  } else {
    csz_idx_0 = 0;
  }

  c_size[0] = csz_idx_0;
  if (csz_idx_0 != 0) {
    c_size[0] = 1;
    c_data[0] = rt_atan2d_snf(a_data[0], b_data[0]);
  }

  // End of Start for MATLABSystem: '<S138>/MATLAB System'
}

void proc_control::proc_control_binary_expand_op_9(real_T in1[3], const int32_T
  in2_data[], const int32_T in2_size[1], const real_T in3_data[], const real_T
  in4_data[])
{
  int32_T in2_idx_0;

  // Start for MATLABSystem: '<S302>/MATLAB System'
  in2_idx_0 = in2_size[0];
  for (int32_T i{0}; i < in2_idx_0; i++) {
    in1[in2_data[0] + 2] = in3_data[0] * in4_data[0];
  }
}

real_T proc_control::proc_control_norm_pr3(const real_T x[3])
{
  real_T y;
  proc_control_B.scale_e = 3.3121686421112381E-170;

  // Start for MATLABSystem: '<S302>/MATLAB System' incorporates:
  //   MATLABSystem: '<S307>/MATLAB System1'

  proc_control_B.absxk_gi = std::abs(x[0]);
  if (proc_control_B.absxk_gi > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_B.scale_e = proc_control_B.absxk_gi;
  } else {
    proc_control_B.t_c = proc_control_B.absxk_gi / 3.3121686421112381E-170;
    y = proc_control_B.t_c * proc_control_B.t_c;
  }

  // Start for MATLABSystem: '<S302>/MATLAB System' incorporates:
  //   MATLABSystem: '<S307>/MATLAB System1'

  proc_control_B.absxk_gi = std::abs(x[1]);
  if (proc_control_B.absxk_gi > proc_control_B.scale_e) {
    proc_control_B.t_c = proc_control_B.scale_e / proc_control_B.absxk_gi;
    y = y * proc_control_B.t_c * proc_control_B.t_c + 1.0;
    proc_control_B.scale_e = proc_control_B.absxk_gi;
  } else {
    proc_control_B.t_c = proc_control_B.absxk_gi / proc_control_B.scale_e;
    y += proc_control_B.t_c * proc_control_B.t_c;
  }

  // Start for MATLABSystem: '<S302>/MATLAB System' incorporates:
  //   MATLABSystem: '<S307>/MATLAB System1'

  proc_control_B.absxk_gi = std::abs(x[2]);
  if (proc_control_B.absxk_gi > proc_control_B.scale_e) {
    proc_control_B.t_c = proc_control_B.scale_e / proc_control_B.absxk_gi;
    y = y * proc_control_B.t_c * proc_control_B.t_c + 1.0;
    proc_control_B.scale_e = proc_control_B.absxk_gi;
  } else {
    proc_control_B.t_c = proc_control_B.absxk_gi / proc_control_B.scale_e;
    y += proc_control_B.t_c * proc_control_B.t_c;
  }

  return proc_control_B.scale_e * std::sqrt(y);
}

void proc_control::pro_ProcPlannerManager_stepImpl
  (ProcPlannerManager_proc_contr_T *b_this, boolean_T isNew, const
   SL_Bus_geometry_msgs_Transform trajMsg_transforms[16], uint32_T
   trajMsg_transforms_SL_Info_Rece, const SL_Bus_geometry_msgs_Twist
   trajMsg_velocities[16], real_T reset, const real_T mesuredPose[13], real_T
   mpcParams_targetReached_linearT, real_T mpcParams_targetReached_angular,
   real_T mpcParams_targetReached_timeInT, real_T currentPose[130], boolean_T
   *isReached, boolean_T *isTrajDone, real_T initWpt[7])
{
  int32_T g_size[1];
  int32_T j_size[1];
  int32_T y_size[1];
  int32_T y_size_0[1];
  int32_T h_size_idx_0;
  int32_T i;
  int32_T partialTrueCount;
  int32_T trueCount;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T mask1;
  boolean_T mask2;

  // Start for MATLABSystem: '<S302>/MATLAB System' incorporates:
  //   MATLABSystem: '<S138>/MATLAB System'
  //   MATLABSystem: '<S307>/MATLAB System'

  //         %% ================================================================ 
  //  Main execute a chaque iteration.
  if ((reset != 0.0) || (!b_this->init)) {
    pr_ProcPlannerManager_resetImpl(b_this);
    std::memcpy(&proc_control_B.tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

    // =================================================================
    //  Fonction qui reset la trajectoire
    //  remove roll and pitch from initial condition
    proc_control_B.aSinInput = 1.0 / std::sqrt(((mesuredPose[3] * mesuredPose[3]
      + mesuredPose[4] * mesuredPose[4]) + mesuredPose[5] * mesuredPose[5]) +
      mesuredPose[6] * mesuredPose[6]);
    proc_control_B.c_idx_1_l = mesuredPose[3] * proc_control_B.aSinInput;
    proc_control_B.c_idx_2_j = mesuredPose[4] * proc_control_B.aSinInput;
    proc_control_B.c_idx_0_kf = mesuredPose[5] * proc_control_B.aSinInput;
    proc_control_B.y_idx_3 = mesuredPose[6] * proc_control_B.aSinInput;
    proc_control_B.aSinInput = (proc_control_B.c_idx_2_j *
      proc_control_B.y_idx_3 + proc_control_B.c_idx_1_l *
      proc_control_B.c_idx_0_kf) * 2.0;
    mask1 = (proc_control_B.aSinInput >= 0.99999999999999778);
    proc_control_B.b_idx_0 = proc_control_B.aSinInput;
    if (mask1) {
      proc_control_B.b_idx_0 = 1.0;
    }

    if (proc_control_B.aSinInput <= -0.99999999999999778) {
      proc_control_B.b_idx_0 = -1.0;
    }

    mask1 = (mask1 || (proc_control_B.aSinInput <= -0.99999999999999778));
    proc_control_B.aSinInput = proc_control_B.c_idx_1_l *
      proc_control_B.c_idx_1_l;
    proc_control_B.s_tmp = proc_control_B.c_idx_2_j * proc_control_B.c_idx_2_j;
    proc_control_B.s_tmp_h = proc_control_B.c_idx_0_kf *
      proc_control_B.c_idx_0_kf;
    proc_control_B.s_tmp_k = proc_control_B.y_idx_3 * proc_control_B.y_idx_3;
    proc_control_B.s[0] = rt_atan2d_snf((proc_control_B.c_idx_0_kf *
      proc_control_B.y_idx_3 - proc_control_B.c_idx_1_l *
      proc_control_B.c_idx_2_j) * -2.0, ((proc_control_B.aSinInput -
      proc_control_B.s_tmp) - proc_control_B.s_tmp_h) + proc_control_B.s_tmp_k);
    proc_control_B.s[1] = std::asin(proc_control_B.b_idx_0);
    proc_control_B.s[2] = rt_atan2d_snf((proc_control_B.c_idx_2_j *
      proc_control_B.c_idx_0_kf - proc_control_B.c_idx_1_l *
      proc_control_B.y_idx_3) * -2.0, ((proc_control_B.aSinInput +
      proc_control_B.s_tmp) - proc_control_B.s_tmp_h) - proc_control_B.s_tmp_k);
    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    if (trueCount - 1 >= 0) {
      proc_control_B.s[0] = 0.0;
    }

    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    g_size[0] = trueCount;
    partialTrueCount = 0;
    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        proc_control_B.g_data[partialTrueCount] = 0;
        partialTrueCount++;
      }

      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    h_size_idx_0 = trueCount;
    trueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        trueCount++;
      }
    }

    if (trueCount - 1 >= 0) {
      proc_control_B.b_x_data_d = proc_control_B.b_idx_0;
    }

    partialTrueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        partialTrueCount++;
      }
    }

    partialTrueCount--;
    for (proc_control_B.k_a = 0; proc_control_B.k_a <= partialTrueCount;
         proc_control_B.k_a++) {
      if (std::isnan(proc_control_B.b_x_data_d)) {
        proc_control_B.b_x_data_d = (rtNaN);
      } else if (proc_control_B.b_x_data_d < 0.0) {
        proc_control_B.b_x_data_d = -1.0;
      } else {
        proc_control_B.b_x_data_d = (proc_control_B.b_x_data_d > 0.0);
      }
    }

    for (i = 0; i < trueCount; i++) {
      proc_control_B.b_x_data_d *= 2.0;
    }

    if (g_size[0] == h_size_idx_0) {
      j_size[0] = g_size[0];
      if (g_size[0] - 1 >= 0) {
        proc_control_B.j_data_d = rt_atan2d_snf(proc_control_B.c_idx_2_j,
          proc_control_B.c_idx_1_l);
      }
    } else {
      partialTrueCount = 0;
      if (mask1) {
        for (i = 0; i < 1; i++) {
          partialTrueCount++;
        }
      }

      y_size[0] = partialTrueCount;
      y_size_0[0] = partialTrueCount;
      if (partialTrueCount - 1 >= 0) {
        proc_control_B.y_data_eh = proc_control_B.c_idx_2_j;
        proc_control_B.y_data_l = proc_control_B.c_idx_1_l;
      }

      proc_control_expand_atan2(&proc_control_B.y_data_eh, y_size,
        &proc_control_B.y_data_l, y_size_0, &proc_control_B.j_data_d, j_size);
    }

    partialTrueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        partialTrueCount++;
      }
    }

    g_size[0] = partialTrueCount;
    partialTrueCount = 0;
    if (mask1) {
      for (i = 0; i < 1; i++) {
        proc_control_B.g_data[partialTrueCount] = 0;
        partialTrueCount++;
      }
    }

    if (trueCount == j_size[0]) {
      if (g_size[0] - 1 >= 0) {
        proc_control_B.s[2] = proc_control_B.b_x_data_d *
          proc_control_B.j_data_d;
      }
    } else {
      proc_control_binary_expand_op_9(proc_control_B.s, proc_control_B.g_data,
        g_size, &proc_control_B.b_x_data_d, &proc_control_B.j_data_d);
    }

    //  Retransformer en quaternion
    proc_control_B.y_idx_3 = proc_control_B.s[0] * 0.0 / 2.0;
    proc_control_B.s[0] = proc_control_B.y_idx_3;
    proc_control_B.c_idx_0_kf = proc_control_B.y_idx_3;
    proc_control_B.y_idx_3 = proc_control_B.s[1] * 0.0 / 2.0;
    proc_control_B.s[1] = proc_control_B.y_idx_3;
    proc_control_B.c_idx_1_l = proc_control_B.y_idx_3;
    proc_control_B.y_idx_3 = proc_control_B.s[2] / 2.0;
    proc_control_B.c_idx_0_kf = std::cos(proc_control_B.c_idx_0_kf);
    proc_control_B.s[0] = std::sin(proc_control_B.s[0]);
    proc_control_B.c_idx_1_l = std::cos(proc_control_B.c_idx_1_l);
    proc_control_B.s[1] = std::sin(proc_control_B.s[1]);
    proc_control_B.c_idx_2_j = std::cos(proc_control_B.y_idx_3);
    proc_control_B.s[2] = std::sin(proc_control_B.y_idx_3);
    proc_control_B.y_idx_3 = proc_control_B.c_idx_0_kf *
      proc_control_B.c_idx_1_l;
    proc_control_B.aSinInput = proc_control_B.s[0] * proc_control_B.s[1];
    proc_control_B.tamp[3] = proc_control_B.y_idx_3 * proc_control_B.c_idx_2_j -
      proc_control_B.aSinInput * proc_control_B.s[2];
    proc_control_B.c_idx_0_kf *= proc_control_B.s[1];
    proc_control_B.tamp[4] = proc_control_B.s[0] * proc_control_B.c_idx_1_l *
      proc_control_B.c_idx_2_j + proc_control_B.c_idx_0_kf * proc_control_B.s[2];
    proc_control_B.tamp[5] = -proc_control_B.s[0] * proc_control_B.c_idx_1_l *
      proc_control_B.s[2] + proc_control_B.c_idx_0_kf * proc_control_B.c_idx_2_j;
    proc_control_B.tamp[6] = proc_control_B.y_idx_3 * proc_control_B.s[2] +
      proc_control_B.aSinInput * proc_control_B.c_idx_2_j;

    //  Mettre les vitesse à 0;
    for (i = 0; i < 6; i++) {
      proc_control_B.tamp[i + 7] = 0.0;
    }

    //  definir les conditions initiaux
    i = 0;
    for (partialTrueCount = 0; partialTrueCount < 13; partialTrueCount++) {
      b_this->poseBuffer[i] = proc_control_B.tamp[partialTrueCount];
      i += 6000;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    for (i = 0; i < 7; i++) {
      b_this->initialPose[i] = proc_control_B.tamp[i];
    }

    b_this->init = true;
    isNew = false;
  }

  //  Add new pose if new arrive
  //         %% ================================================================ 
  //  Fonction qui traites les nouveau poses.
  //  Si il y a des noiveau points
  if (isNew) {
    //  nombre de points recu.
    //  si il y a asser de place dans le buffer.
    if (static_cast<real_T>(trajMsg_transforms_SL_Info_Rece) +
        b_this->bufferCount < 6000.0) {
      std::memset(&proc_control_B.tamp[0], 0, 13U * sizeof(real_T));

      //  Remplire le tampon
      partialTrueCount = static_cast<int32_T>(trajMsg_transforms_SL_Info_Rece) -
        1;
      for (proc_control_B.k_a = 0; proc_control_B.k_a <= partialTrueCount;
           proc_control_B.k_a++) {
        proc_control_B.tamp[0] = trajMsg_transforms[proc_control_B.k_a].
          translation.x;
        proc_control_B.tamp[1] = trajMsg_transforms[proc_control_B.k_a].
          translation.y;
        proc_control_B.tamp[2] = trajMsg_transforms[proc_control_B.k_a].
          translation.z;
        proc_control_B.tamp[3] = trajMsg_transforms[proc_control_B.k_a].
          rotation.w;
        proc_control_B.tamp[4] = trajMsg_transforms[proc_control_B.k_a].
          rotation.x;
        proc_control_B.tamp[5] = trajMsg_transforms[proc_control_B.k_a].
          rotation.y;
        proc_control_B.tamp[6] = trajMsg_transforms[proc_control_B.k_a].
          rotation.z;
        proc_control_B.tamp[7] = trajMsg_velocities[proc_control_B.k_a].linear.x;
        proc_control_B.tamp[8] = trajMsg_velocities[proc_control_B.k_a].linear.y;
        proc_control_B.tamp[9] = trajMsg_velocities[proc_control_B.k_a].linear.z;
        proc_control_B.tamp[10] = trajMsg_velocities[proc_control_B.k_a].
          angular.x;
        proc_control_B.tamp[11] = trajMsg_velocities[proc_control_B.k_a].
          angular.y;
        proc_control_B.tamp[12] = trajMsg_velocities[proc_control_B.k_a].
          angular.z;
        b_this->bufferCount++;
        for (i = 0; i < 13; i++) {
          b_this->poseBuffer[(static_cast<int32_T>(b_this->bufferCount) + 6000 *
                              i) - 1] = proc_control_B.tamp[i];
        }
      }

      //  Definir le pose initial pour la prochaine trajectoire
      for (i = 0; i < 7; i++) {
        b_this->initialPose[i] = proc_control_B.tamp[i];
      }
    } else {
      std::printf("WARNING : proc control : trajectory buffer overflow.");
      std::fflush(stdout);
    }
  }

  //         %% ================================================================ 
  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  proc_control_B.aSinInput = 2.0;
  mask1 = false;

  //  Vérifier s'il reste au moins mpc.p points dans les buffers
  proc_control_B.k_a = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.k_a < 9)) {
    proc_control_B.aSinInput = static_cast<real_T>(proc_control_B.k_a) + 2.0;
    for (i = 0; i < 13; i++) {
      proc_control_B.x_c[i] = (b_this->poseBuffer[(6000 * i + proc_control_B.k_a)
        + 1] == b_this->emptyArray[i]);
    }

    mask2 = true;
    partialTrueCount = 0;
    exitg2 = false;
    while ((!exitg2) && (partialTrueCount < 13)) {
      if (!proc_control_B.x_c[partialTrueCount]) {
        mask2 = false;
        exitg2 = true;
      } else {
        partialTrueCount++;
      }
    }

    if (mask2) {
      mask1 = true;
      exitg1 = true;
    } else {
      proc_control_B.k_a++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));

  // Start for MATLABSystem: '<S302>/MATLAB System'
  trueCount = static_cast<int32_T>(proc_control_B.aSinInput);
  i = 0;
  partialTrueCount = 0;
  for (proc_control_B.k_a = 0; proc_control_B.k_a < 13; proc_control_B.k_a++) {
    // Start for MATLABSystem: '<S302>/MATLAB System'
    for (h_size_idx_0 = 0; h_size_idx_0 < trueCount; h_size_idx_0++) {
      currentPose[h_size_idx_0 + i] = b_this->poseBuffer[h_size_idx_0 +
        partialTrueCount];
    }

    i += 10;
    partialTrueCount += 6000;
  }

  //  S'il ya moins de mpc.p points, padder avec le dernier points
  if (mask1) {
    proc_control_B.k_a = 10 - trueCount;
    for (partialTrueCount = 0; partialTrueCount <= proc_control_B.k_a;
         partialTrueCount++) {
      // Start for MATLABSystem: '<S302>/MATLAB System'
      h_size_idx_0 = trueCount + partialTrueCount;
      for (i = 0; i < 13; i++) {
        proc_control_B.tamp[i] = currentPose[(10 * i + trueCount) - 2];
      }

      for (i = 0; i < 13; i++) {
        currentPose[(h_size_idx_0 + 10 * i) - 1] = proc_control_B.tamp[i];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  i = 0;
  for (partialTrueCount = 0; partialTrueCount < 13; partialTrueCount++) {
    // Start for MATLABSystem: '<S302>/MATLAB System'
    proc_control_B.x_c[partialTrueCount] = !(b_this->poseBuffer[i + 1] ==
      b_this->emptyArray[partialTrueCount]);
    i += 6000;
  }

  mask2 = true;
  partialTrueCount = 0;
  exitg1 = false;
  while ((!exitg1) && (partialTrueCount < 13)) {
    if (!proc_control_B.x_c[partialTrueCount]) {
      mask2 = false;
      exitg1 = true;
    } else {
      partialTrueCount++;
    }
  }

  if (mask2) {
    // this.prediction+1
    i = 0;
    for (partialTrueCount = 0; partialTrueCount < 13; partialTrueCount++) {
      // Start for MATLABSystem: '<S302>/MATLAB System'
      std::memcpy(&proc_control_B.b_this_m[i], &b_this->poseBuffer[i + 1], 5999U
                  * sizeof(real_T));
      proc_control_B.b_this_m[i + 5999] = b_this->emptyArray[partialTrueCount];
      i += 6000;
    }

    // Start for MATLABSystem: '<S302>/MATLAB System'
    std::memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this_m[0], 78000U *
                sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    // Start for MATLABSystem: '<S302>/MATLAB System'
    b_this->done = true;
  }

  // Start for MATLABSystem: '<S302>/MATLAB System'
  std::memcpy(&proc_control_B.tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

  //         %% ================================================================ 
  //  Fonction qui verifie le target reached
  *isReached = false;

  // Start for MATLABSystem: '<S302>/MATLAB System'
  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  prendre le target
    //  check flip (exemple ne pas comparer 0deg avec 360deg)
    proc_control_B.c_idx_1_l = mesuredPose[3];
    proc_control_B.c_idx_2_j = mesuredPose[4];
    proc_control_B.c_idx_0_kf = mesuredPose[5];
    proc_control_B.y_idx_3 = mesuredPose[6];

    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    if (((mesuredPose[3] * b_this->poseBuffer[18000] + mesuredPose[4] *
          b_this->poseBuffer[24000]) + mesuredPose[5] * b_this->poseBuffer[30000])
        + mesuredPose[6] * b_this->poseBuffer[36000] < 0.0) {
      proc_control_B.c_idx_1_l = -mesuredPose[3];
      proc_control_B.c_idx_2_j = -mesuredPose[4];
      proc_control_B.c_idx_0_kf = -mesuredPose[5];
      proc_control_B.y_idx_3 = -mesuredPose[6];
    }

    //  calculer l'erreur angulaire.
    // =================================================================
    //  Fonction qui calcule l'angle entre 2 quaternion
    proc_control_B.qRel[0] = ((b_this->poseBuffer[18000] *
      proc_control_B.c_idx_1_l - -b_this->poseBuffer[24000] *
      proc_control_B.c_idx_2_j) - -b_this->poseBuffer[30000] *
      proc_control_B.c_idx_0_kf) - -b_this->poseBuffer[36000] *
      proc_control_B.y_idx_3;
    proc_control_B.qRel[1] = (b_this->poseBuffer[18000] *
      proc_control_B.c_idx_2_j + -b_this->poseBuffer[24000] *
      proc_control_B.c_idx_1_l) + (-b_this->poseBuffer[30000] *
      proc_control_B.y_idx_3 - -b_this->poseBuffer[36000] *
      proc_control_B.c_idx_0_kf);
    proc_control_B.qRel[2] = (b_this->poseBuffer[18000] *
      proc_control_B.c_idx_0_kf + -b_this->poseBuffer[30000] *
      proc_control_B.c_idx_1_l) + (-b_this->poseBuffer[36000] *
      proc_control_B.c_idx_2_j - -b_this->poseBuffer[24000] *
      proc_control_B.y_idx_3);
    proc_control_B.qRel[3] = (b_this->poseBuffer[18000] * proc_control_B.y_idx_3
      + proc_control_B.c_idx_1_l * -b_this->poseBuffer[36000]) +
      (-b_this->poseBuffer[24000] * proc_control_B.c_idx_0_kf -
       -b_this->poseBuffer[30000] * proc_control_B.c_idx_2_j);
    proc_control_B.aSinInput = std::abs(2.0 * rt_atan2d_snf
      (proc_control_norm_pr3(&proc_control_B.qRel[1]), proc_control_B.qRel[0]));

    //  Ramener l'erreur de 0 à pi
    if (proc_control_B.aSinInput > 6.2831853071795862) {
      proc_control_B.aSinInput = 6.2831853071795862 - proc_control_B.aSinInput;
    }

    //  calculer l'erreur lineaire
    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.s[0] = b_this->poseBuffer[0] - proc_control_B.tamp[0];
    proc_control_B.s[1] = b_this->poseBuffer[6000] - proc_control_B.tamp[1];
    proc_control_B.s[2] = b_this->poseBuffer[12000] - proc_control_B.tamp[2];
    if ((proc_control_norm_pr3(proc_control_B.s) <
         mpcParams_targetReached_linearT) && (proc_control_B.aSinInput <
         mpcParams_targetReached_angular)) {
      //  incrementer le nombre de sample en target reached
      b_this->targetReachedCount++;

      //  si le sub est dans la zone de convergence depuis le temps demander
      *isReached = (b_this->targetReachedCount * 0.1 >=
                    mpcParams_targetReached_timeInT);
    } else {
      //  Remettre le compteur a 0 si le sub n'est pas dans la zone
      b_this->targetReachedCount = 0.0;
    }
  } else {
    b_this->targetReachedCount = 0.0;
  }

  *isTrajDone = b_this->done;
  for (i = 0; i < 7; i++) {
    initWpt[i] = b_this->initialPose[i];
  }
}

void proc_control::proc_control_binary_expand_op_2(real_T in1[3], const int32_T
  in2_size[1], const real_T in3_data[], const real_T in4_data[])
{
  int32_T in2_idx_0;

  // Outputs for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' incorporates:
  //   ActionPort: '<S307>/Action Port'

  // SwitchCase: '<S10>/Switch Case' incorporates:
  //   MATLABSystem: '<S307>/MATLAB System'
  //
  in2_idx_0 = in2_size[0];
  for (int32_T i{0}; i < in2_idx_0; i++) {
    in1[2] = in3_data[0] * in4_data[0];
  }

  // End of SwitchCase: '<S10>/Switch Case'
  // End of Outputs for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
}

void proc_control::proc__quaternion_parenReference(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, boolean_T varargin_1, real_T o_a_data[], int32_T
  o_a_size[2], real_T o_b_data[], int32_T o_b_size[2], real_T o_c_data[],
  int32_T o_c_size[2], real_T o_d_data[], int32_T o_d_size[2])
{
  int32_T trueCount;
  int32_T trueCount_0;
  int32_T trueCount_1;
  int32_T trueCount_2;
  trueCount = 0;
  trueCount_0 = 0;
  if (varargin_1) {
    for (int32_T i{0}; i < 1; i++) {
      trueCount++;
    }
  }

  trueCount_1 = 0;
  if (varargin_1) {
    for (int32_T i{0}; i < 1; i++) {
      trueCount_0++;
    }
  }

  trueCount_2 = 0;
  if (varargin_1) {
    for (int32_T i{0}; i < 1; i++) {
      trueCount_1++;
    }

    for (int32_T i{0}; i < 1; i++) {
      trueCount_2++;
    }
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  o_a_size[0] = 1;
  o_a_size[1] = trueCount;
  if (trueCount - 1 >= 0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    o_a_data[0] = obj_a;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  o_b_size[0] = 1;
  o_b_size[1] = trueCount_0;
  if (trueCount_0 - 1 >= 0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    o_b_data[0] = obj_b;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  o_c_size[0] = 1;
  o_c_size[1] = trueCount_1;
  if (trueCount_1 - 1 >= 0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    o_c_data[0] = obj_c;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  o_d_size[0] = 1;
  o_d_size[1] = trueCount_2;
  if (trueCount_2 - 1 >= 0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    o_d_data[0] = obj_d;
  }
}

void proc_control::proc_con_quaternion_parenAssign(quaternion_proc_control_T
  *obj, const real_T rhs_a_data[], const real_T rhs_b_data[], const real_T
  rhs_c_data[], const real_T rhs_d_data[], boolean_T varargin_1)
{
  real_T c_idx_0;

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  c_idx_0 = obj->a;
  if (varargin_1) {
    c_idx_0 = rhs_a_data[0];
  }

  obj->a = c_idx_0;
  c_idx_0 = obj->b;
  if (varargin_1) {
    c_idx_0 = rhs_b_data[0];
  }

  obj->b = c_idx_0;
  c_idx_0 = obj->c;
  if (varargin_1) {
    c_idx_0 = rhs_c_data[0];
  }

  obj->c = c_idx_0;
  c_idx_0 = obj->d;
  if (varargin_1) {
    c_idx_0 = rhs_d_data[0];
  }

  obj->d = c_idx_0;

  // End of Start for MATLABSystem: '<S320>/Rotation Trajectory'
}

quaternion_proc_control_T proc_control::proc_contr_quaternionBase_slerp(real_T
  q1_a, real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T
  q2_c, real_T q2_d)
{
  quaternion_proc_control_T qo;
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.n_a = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp_e = q1_a / proc_control_B.n_a;
  proc_control_B.dp_h = q1_b / proc_control_B.n_a;
  proc_control_B.oa_f = q1_c / proc_control_B.n_a;
  proc_control_B.ob_l = q1_d / proc_control_B.n_a;
  proc_control_B.oa_ee = ((proc_control_B.od_tmp_e - proc_control_B.dp_h * 0.0)
    - proc_control_B.oa_f * 0.0) - proc_control_B.ob_l * 0.0;
  proc_control_B.ob_ir = ((proc_control_B.od_tmp_e * 0.0 + proc_control_B.dp_h)
    + proc_control_B.oa_f * 0.0) - proc_control_B.ob_l * 0.0;
  proc_control_B.oc_h = ((proc_control_B.od_tmp_e * 0.0 - proc_control_B.dp_h *
    0.0) + proc_control_B.oa_f) + proc_control_B.ob_l * 0.0;
  proc_control_B.od_k = ((proc_control_B.od_tmp_e * 0.0 + proc_control_B.dp_h *
    0.0) - proc_control_B.oa_f * 0.0) + proc_control_B.ob_l;
  proc_control_B.n_a = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp_e = q2_a / proc_control_B.n_a;
  proc_control_B.dp_h = q2_b / proc_control_B.n_a;
  proc_control_B.oa_f = q2_c / proc_control_B.n_a;
  proc_control_B.ob_l = q2_d / proc_control_B.n_a;
  proc_control_B.n_a = ((proc_control_B.od_tmp_e - proc_control_B.dp_h * 0.0) -
                        proc_control_B.oa_f * 0.0) - proc_control_B.ob_l * 0.0;
  proc_control_B.ob_tmp_j = ((proc_control_B.od_tmp_e * 0.0 +
    proc_control_B.dp_h) + proc_control_B.oa_f * 0.0) - proc_control_B.ob_l *
    0.0;
  proc_control_B.oc_tmp_o = ((proc_control_B.od_tmp_e * 0.0 -
    proc_control_B.dp_h * 0.0) + proc_control_B.oa_f) + proc_control_B.ob_l *
    0.0;
  proc_control_B.od_tmp_e = ((proc_control_B.od_tmp_e * 0.0 +
    proc_control_B.dp_h * 0.0) - proc_control_B.oa_f * 0.0) +
    proc_control_B.ob_l;
  proc_control_B.dp_h = ((proc_control_B.oa_ee * proc_control_B.n_a +
    proc_control_B.ob_ir * proc_control_B.ob_tmp_j) + proc_control_B.oc_h *
    proc_control_B.oc_tmp_o) + proc_control_B.od_k * proc_control_B.od_tmp_e;
  if (proc_control_B.dp_h < 0.0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.n_a = -proc_control_B.n_a;
    proc_control_B.ob_tmp_j = -proc_control_B.ob_tmp_j;
    proc_control_B.oc_tmp_o = -proc_control_B.oc_tmp_o;
    proc_control_B.od_tmp_e = -proc_control_B.od_tmp_e;
    proc_control_B.dp_h = -proc_control_B.dp_h;
  }

  if (proc_control_B.dp_h > 1.0) {
    proc_control_B.dp_h = 1.0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.dp_h = std::acos(proc_control_B.dp_h);
  proc_control_B.oa_f = std::sin(proc_control_B.dp_h);
  proc_control_B.ob_l = 1.0 / proc_control_B.oa_f;
  proc_control_B.dp_h = std::sin(0.0 * proc_control_B.dp_h);
  qo.a = (proc_control_B.oa_f * proc_control_B.oa_ee + proc_control_B.dp_h *
          proc_control_B.n_a) * proc_control_B.ob_l;
  qo.b = (proc_control_B.oa_f * proc_control_B.ob_ir + proc_control_B.dp_h *
          proc_control_B.ob_tmp_j) * proc_control_B.ob_l;
  qo.c = (proc_control_B.oa_f * proc_control_B.oc_h + proc_control_B.dp_h *
          proc_control_B.oc_tmp_o) * proc_control_B.ob_l;
  qo.d = (proc_control_B.oa_f * proc_control_B.od_k + proc_control_B.dp_h *
          proc_control_B.od_tmp_e) * proc_control_B.ob_l;
  if (std::isinf(proc_control_B.ob_l)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data_o, proc_control_B.assign_temp_a_size_a,
      &proc_control_B.assign_temp_b_data_l, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data_d, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data_a, assign_temp_d_size);
    proc_con_quaternion_parenAssign(&qo, &proc_control_B.assign_temp_a_data_o,
      &proc_control_B.assign_temp_b_data_l, &proc_control_B.assign_temp_c_data_d,
      &proc_control_B.assign_temp_d_data_a, true);
  }

  proc_control_B.n_a = std::sqrt(((qo.a * qo.a + qo.b * qo.b) + qo.c * qo.c) +
    qo.d * qo.d);
  qo.a /= proc_control_B.n_a;
  qo.b /= proc_control_B.n_a;
  qo.c /= proc_control_B.n_a;
  qo.d /= proc_control_B.n_a;
  return qo;
}

quaternion_proc_control_T proc_control::proc_con_quaternionBase_slerp_p(real_T
  q1_a, real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T
  q2_c, real_T q2_d)
{
  quaternion_proc_control_T qo;
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.n_k = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp_g = q1_a / proc_control_B.n_k;
  proc_control_B.dp_j = q1_b / proc_control_B.n_k;
  proc_control_B.oa_e = q1_c / proc_control_B.n_k;
  proc_control_B.ob_i = q1_d / proc_control_B.n_k;
  proc_control_B.oa_dy = ((proc_control_B.od_tmp_g - proc_control_B.dp_j * 0.0)
    - proc_control_B.oa_e * 0.0) - proc_control_B.ob_i * 0.0;
  proc_control_B.ob_c = ((proc_control_B.od_tmp_g * 0.0 + proc_control_B.dp_j) +
    proc_control_B.oa_e * 0.0) - proc_control_B.ob_i * 0.0;
  proc_control_B.oc_k = ((proc_control_B.od_tmp_g * 0.0 - proc_control_B.dp_j *
    0.0) + proc_control_B.oa_e) + proc_control_B.ob_i * 0.0;
  proc_control_B.od_p = ((proc_control_B.od_tmp_g * 0.0 + proc_control_B.dp_j *
    0.0) - proc_control_B.oa_e * 0.0) + proc_control_B.ob_i;
  proc_control_B.n_k = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp_g = q2_a / proc_control_B.n_k;
  proc_control_B.dp_j = q2_b / proc_control_B.n_k;
  proc_control_B.oa_e = q2_c / proc_control_B.n_k;
  proc_control_B.ob_i = q2_d / proc_control_B.n_k;
  proc_control_B.n_k = ((proc_control_B.od_tmp_g - proc_control_B.dp_j * 0.0) -
                        proc_control_B.oa_e * 0.0) - proc_control_B.ob_i * 0.0;
  proc_control_B.ob_tmp_g = ((proc_control_B.od_tmp_g * 0.0 +
    proc_control_B.dp_j) + proc_control_B.oa_e * 0.0) - proc_control_B.ob_i *
    0.0;
  proc_control_B.oc_tmp_m = ((proc_control_B.od_tmp_g * 0.0 -
    proc_control_B.dp_j * 0.0) + proc_control_B.oa_e) + proc_control_B.ob_i *
    0.0;
  proc_control_B.od_tmp_g = ((proc_control_B.od_tmp_g * 0.0 +
    proc_control_B.dp_j * 0.0) - proc_control_B.oa_e * 0.0) +
    proc_control_B.ob_i;
  proc_control_B.dp_j = ((proc_control_B.oa_dy * proc_control_B.n_k +
    proc_control_B.ob_c * proc_control_B.ob_tmp_g) + proc_control_B.oc_k *
    proc_control_B.oc_tmp_m) + proc_control_B.od_p * proc_control_B.od_tmp_g;
  if (proc_control_B.dp_j < 0.0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.n_k = -proc_control_B.n_k;
    proc_control_B.ob_tmp_g = -proc_control_B.ob_tmp_g;
    proc_control_B.oc_tmp_m = -proc_control_B.oc_tmp_m;
    proc_control_B.od_tmp_g = -proc_control_B.od_tmp_g;
    proc_control_B.dp_j = -proc_control_B.dp_j;
  }

  if (proc_control_B.dp_j > 1.0) {
    proc_control_B.dp_j = 1.0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.dp_j = std::acos(proc_control_B.dp_j);
  proc_control_B.oa_e = std::sin(proc_control_B.dp_j);
  proc_control_B.ob_i = 1.0 / proc_control_B.oa_e;
  proc_control_B.dp_j = std::sin(0.0 * proc_control_B.dp_j);
  qo.a = (proc_control_B.dp_j * proc_control_B.oa_dy + proc_control_B.oa_e *
          proc_control_B.n_k) * proc_control_B.ob_i;
  qo.b = (proc_control_B.dp_j * proc_control_B.ob_c + proc_control_B.oa_e *
          proc_control_B.ob_tmp_g) * proc_control_B.ob_i;
  qo.c = (proc_control_B.dp_j * proc_control_B.oc_k + proc_control_B.oa_e *
          proc_control_B.oc_tmp_m) * proc_control_B.ob_i;
  qo.d = (proc_control_B.dp_j * proc_control_B.od_p + proc_control_B.oa_e *
          proc_control_B.od_tmp_g) * proc_control_B.ob_i;
  if (std::isinf(proc_control_B.ob_i)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data_b, proc_control_B.assign_temp_a_size_d,
      &proc_control_B.assign_temp_b_data_i, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data_h, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data_d, assign_temp_d_size);
    proc_con_quaternion_parenAssign(&qo, &proc_control_B.assign_temp_a_data_b,
      &proc_control_B.assign_temp_b_data_i, &proc_control_B.assign_temp_c_data_h,
      &proc_control_B.assign_temp_d_data_d, true);
  }

  proc_control_B.n_k = std::sqrt(((qo.a * qo.a + qo.b * qo.b) + qo.c * qo.c) +
    qo.d * qo.d);
  qo.a /= proc_control_B.n_k;
  qo.b /= proc_control_B.n_k;
  qo.c /= proc_control_B.n_k;
  qo.d /= proc_control_B.n_k;
  return qo;
}

quaternion_proc_control_T proc_control::proc_co_quaternionBase_slerp_pr(real_T
  q1_a, real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T
  q2_c, real_T q2_d, real_T t)
{
  quaternion_proc_control_T qo;
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.n_c = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp = q1_a / proc_control_B.n_c;
  proc_control_B.dp = q1_b / proc_control_B.n_c;
  proc_control_B.oa_l = q1_c / proc_control_B.n_c;
  proc_control_B.ob_dz = q1_d / proc_control_B.n_c;
  proc_control_B.oa_d = ((proc_control_B.od_tmp - proc_control_B.dp * 0.0) -
    proc_control_B.oa_l * 0.0) - proc_control_B.ob_dz * 0.0;
  proc_control_B.ob_d = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp) +
    proc_control_B.oa_l * 0.0) - proc_control_B.ob_dz * 0.0;
  proc_control_B.oc = ((proc_control_B.od_tmp * 0.0 - proc_control_B.dp * 0.0) +
                       proc_control_B.oa_l) + proc_control_B.ob_dz * 0.0;
  proc_control_B.od = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp * 0.0) -
                       proc_control_B.oa_l * 0.0) + proc_control_B.ob_dz;
  proc_control_B.n_c = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp = q2_a / proc_control_B.n_c;
  proc_control_B.dp = q2_b / proc_control_B.n_c;
  proc_control_B.oa_l = q2_c / proc_control_B.n_c;
  proc_control_B.ob_dz = q2_d / proc_control_B.n_c;
  proc_control_B.n_c = ((proc_control_B.od_tmp - proc_control_B.dp * 0.0) -
                        proc_control_B.oa_l * 0.0) - proc_control_B.ob_dz * 0.0;
  proc_control_B.ob_tmp = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp) +
    proc_control_B.oa_l * 0.0) - proc_control_B.ob_dz * 0.0;
  proc_control_B.oc_tmp = ((proc_control_B.od_tmp * 0.0 - proc_control_B.dp *
    0.0) + proc_control_B.oa_l) + proc_control_B.ob_dz * 0.0;
  proc_control_B.od_tmp = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp *
    0.0) - proc_control_B.oa_l * 0.0) + proc_control_B.ob_dz;
  proc_control_B.dp = ((proc_control_B.oa_d * proc_control_B.n_c +
                        proc_control_B.ob_d * proc_control_B.ob_tmp) +
                       proc_control_B.oc * proc_control_B.oc_tmp) +
    proc_control_B.od * proc_control_B.od_tmp;
  if (proc_control_B.dp < 0.0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.n_c = -proc_control_B.n_c;
    proc_control_B.ob_tmp = -proc_control_B.ob_tmp;
    proc_control_B.oc_tmp = -proc_control_B.oc_tmp;
    proc_control_B.od_tmp = -proc_control_B.od_tmp;
    proc_control_B.dp = -proc_control_B.dp;
  }

  if (proc_control_B.dp > 1.0) {
    proc_control_B.dp = 1.0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.dp = std::acos(proc_control_B.dp);
  proc_control_B.oa_l = 1.0 / std::sin(proc_control_B.dp);
  proc_control_B.ob_dz = std::sin((1.0 - t) * proc_control_B.dp);
  proc_control_B.dp = std::sin(t * proc_control_B.dp);
  qo.a = (proc_control_B.ob_dz * proc_control_B.oa_d + proc_control_B.dp *
          proc_control_B.n_c) * proc_control_B.oa_l;
  qo.b = (proc_control_B.ob_dz * proc_control_B.ob_d + proc_control_B.dp *
          proc_control_B.ob_tmp) * proc_control_B.oa_l;
  qo.c = (proc_control_B.ob_dz * proc_control_B.oc + proc_control_B.dp *
          proc_control_B.oc_tmp) * proc_control_B.oa_l;
  qo.d = (proc_control_B.ob_dz * proc_control_B.od + proc_control_B.dp *
          proc_control_B.od_tmp) * proc_control_B.oa_l;
  if (std::isinf(proc_control_B.oa_l)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data, proc_control_B.assign_temp_a_size,
      &proc_control_B.assign_temp_b_data, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data, assign_temp_d_size);
    proc_con_quaternion_parenAssign(&qo, &proc_control_B.assign_temp_a_data,
      &proc_control_B.assign_temp_b_data, &proc_control_B.assign_temp_c_data,
      &proc_control_B.assign_temp_d_data, true);
  }

  proc_control_B.n_c = std::sqrt(((qo.a * qo.a + qo.b * qo.b) + qo.c * qo.c) +
    qo.d * qo.d);
  qo.a /= proc_control_B.n_c;
  qo.b /= proc_control_B.n_c;
  qo.c /= proc_control_B.n_c;
  qo.d /= proc_control_B.n_c;
  return qo;
}

void proc_control::proc_contro_binary_expand_op_13(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  int32_T loop_ub;
  int32_T stride_0_1;

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  loop_ub = in3 == 1 ? in1_size[1] : in3;
  stride_0_1 = (in1_size[1] != 1);
  for (int32_T i{0}; i < loop_ub; i++) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.in1_data_d = in1_data[i * stride_0_1] / in2;
  }

  in1_size[0] = 1;
  in1_size[1] = loop_ub;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1_data[0] = proc_control_B.in1_data_d;
  }
}

void proc_control::proc_contro_binary_expand_op_10(real_T *in1, const int32_T
  in2_size[2], real_T in3, const real_T in4_data[], const int32_T in4_size[2])
{
  int32_T loop_ub;

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  loop_ub = in4_size[1] == 1 ? in2_size[1] : in4_size[1];
  for (int32_T i{0}; i < loop_ub; i++) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    *in1 = in3 * in4_data[0];
  }
}

void proc_control::proc_control_quaternionBase_log(real_T q_a, real_T q_b,
  real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T
  *b_q_d)
{
  int32_T tmp_data[1];
  int32_T tmp_data_0[1];
  int32_T tmp_data_1[1];
  int32_T b_tmp;
  int32_T i;
  int32_T trueCount;
  int32_T vscale_data_tmp;
  boolean_T tmp;

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.vnorm = std::sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_B.qnorm = std::sqrt(q_a * q_a + proc_control_B.vnorm *
    proc_control_B.vnorm);
  trueCount = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  if (trueCount - 1 >= 0) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.vscale_data = q_a / proc_control_B.qnorm;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.vscale_size[0] = 1;
  proc_control_B.vscale_size[1] = trueCount;
  b_tmp = trueCount - 1;
  for (i = 0; i <= b_tmp; i++) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.vscale_data = std::acos(proc_control_B.vscale_data);
  }

  vscale_data_tmp = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      vscale_data_tmp++;
    }
  }

  if (trueCount == vscale_data_tmp) {
    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.vscale_size[0] = 1;
    for (trueCount = 0; trueCount <= b_tmp; trueCount++) {
      // Start for MATLABSystem: '<S320>/Rotation Trajectory'
      proc_control_B.vscale_data /= proc_control_B.vnorm;
    }
  } else {
    proc_contro_binary_expand_op_13(&proc_control_B.vscale_data,
      proc_control_B.vscale_size, proc_control_B.vnorm, vscale_data_tmp);
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.l = q_b;
  trueCount = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  proc_control_B.tmp_size_h[0] = 1;
  proc_control_B.tmp_size_h[1] = trueCount;
  if (proc_control_B.vnorm != 0.0) {
    tmp_data[0] = 0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  if (trueCount == proc_control_B.vscale_size[1]) {
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      proc_control_B.l = q_b * proc_control_B.vscale_data;
    }
  } else {
    proc_contro_binary_expand_op_10(&proc_control_B.l, proc_control_B.tmp_size_h,
      q_b, &proc_control_B.vscale_data, proc_control_B.vscale_size);
  }

  *b_q_b = proc_control_B.l;
  tmp = !(proc_control_B.vnorm != 0.0);
  if (tmp) {
    *b_q_b = 0.0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.t_c3 = q_c;
  trueCount = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  proc_control_B.tmp_size_b[0] = 1;
  proc_control_B.tmp_size_b[1] = trueCount;
  if (proc_control_B.vnorm != 0.0) {
    tmp_data_0[0] = 0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  if (trueCount == proc_control_B.vscale_size[1]) {
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      proc_control_B.t_c3 = q_c * proc_control_B.vscale_data;
    }
  } else {
    proc_contro_binary_expand_op_10(&proc_control_B.t_c3,
      proc_control_B.tmp_size_b, q_c, &proc_control_B.vscale_data,
      proc_control_B.vscale_size);
  }

  *b_q_c = proc_control_B.t_c3;
  if (tmp) {
    *b_q_c = 0.0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  proc_control_B.bb = q_d;
  trueCount = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  proc_control_B.tmp_size_i4[0] = 1;
  proc_control_B.tmp_size_i4[1] = trueCount;
  if (proc_control_B.vnorm != 0.0) {
    tmp_data_1[0] = 0;
  }

  if (trueCount == proc_control_B.vscale_size[1]) {
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      // Start for MATLABSystem: '<S320>/Rotation Trajectory'
      proc_control_B.bb = q_d * proc_control_B.vscale_data;
    }
  } else {
    proc_contro_binary_expand_op_10(&proc_control_B.bb,
      proc_control_B.tmp_size_i4, q_d, &proc_control_B.vscale_data,
      proc_control_B.vscale_size);
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  *b_q_d = proc_control_B.bb;
  if (tmp) {
    *b_q_d = 0.0;
  }

  // Start for MATLABSystem: '<S320>/Rotation Trajectory'
  *b_q_a = std::log(proc_control_B.qnorm);
}

void proc_control::proc_contro_generateCubicCoeffs(const real_T posPts[2], const
  real_T velPts[2], real_T finalTime, real_T coeffVec[4])
{
  real_T coeffVec_tmp;
  real_T posPts_idx_0;
  real_T posPts_idx_1;

  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  posPts_idx_0 = posPts[1] - (finalTime * velPts[0] + posPts[0]);
  posPts_idx_1 = velPts[1] - (0.0 * posPts[0] + velPts[0]);
  coeffVec_tmp = finalTime * finalTime;
  coeffVec[0] = 1.0 / coeffVec_tmp * posPts_idx_1 + -2.0 / rt_powd_snf(finalTime,
    3.0) * posPts_idx_0;
  coeffVec[3] = posPts[0];
  coeffVec[1] = 3.0 / coeffVec_tmp * posPts_idx_0 + -1.0 / finalTime *
    posPts_idx_1;
  coeffVec[2] = velPts[0];
}

void proc_control::pr_addFlatSegmentsToPPFormParts(const real_T oldbreaks[2],
  const real_T oldCoeffs[12], real_T newBreaks[4], real_T newCoefs[36])
{
  real_T evalPointVector_idx_1;
  real_T evalPointVector_idx_2;
  int32_T i;
  int32_T i_0;
  int32_T tmp;
  std::memset(&proc_control_B.newSegmentCoeffs[0], 0, 12U * sizeof(real_T));
  for (i = 0; i < 3; i++) {
    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_B.newSegmentCoeffs[i + 9] = ((oldCoeffs[i + 3] * 0.0 +
      oldCoeffs[i] * 0.0) + oldCoeffs[i + 6] * 0.0) + oldCoeffs[i + 9];
  }

  std::memset(&proc_control_B.coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
  i = 0;
  tmp = 0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    proc_control_B.coefsWithFlatStart[i] = proc_control_B.newSegmentCoeffs[tmp];

    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_B.coefsWithFlatStart[i + 3] = oldCoeffs[tmp];
    proc_control_B.coefsWithFlatStart[i + 1] =
      proc_control_B.newSegmentCoeffs[tmp + 1];

    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_B.coefsWithFlatStart[i + 4] = oldCoeffs[tmp + 1];
    proc_control_B.coefsWithFlatStart[i + 2] =
      proc_control_B.newSegmentCoeffs[tmp + 2];

    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_B.coefsWithFlatStart[i + 5] = oldCoeffs[tmp + 2];
    i += 6;
    tmp += 3;
  }

  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  proc_control_B.holdPoint = oldbreaks[1] - oldbreaks[0];
  proc_control_B.evalPointVector_idx_0 = rt_powd_snf(proc_control_B.holdPoint,
    3.0);
  evalPointVector_idx_1 = rt_powd_snf(proc_control_B.holdPoint, 2.0);
  evalPointVector_idx_2 = rt_powd_snf(proc_control_B.holdPoint, 1.0);
  proc_control_B.holdPoint = rt_powd_snf(proc_control_B.holdPoint, 0.0);
  std::memset(&proc_control_B.newSegmentCoeffs[0], 0, 12U * sizeof(real_T));
  for (i = 0; i < 3; i++) {
    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_B.newSegmentCoeffs[i + 9] =
      ((proc_control_B.coefsWithFlatStart[i + 3] *
        proc_control_B.evalPointVector_idx_0 +
        proc_control_B.coefsWithFlatStart[i + 9] * evalPointVector_idx_1) +
       proc_control_B.coefsWithFlatStart[i + 15] * evalPointVector_idx_2) +
      proc_control_B.coefsWithFlatStart[i + 21] * proc_control_B.holdPoint;
  }

  std::memset(&newCoefs[0], 0, 36U * sizeof(real_T));
  for (i = 0; i < 6; i++) {
    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    newCoefs[i] = proc_control_B.coefsWithFlatStart[i];
    newCoefs[i + 9] = proc_control_B.coefsWithFlatStart[i + 6];
    newCoefs[i + 18] = proc_control_B.coefsWithFlatStart[i + 12];
    newCoefs[i + 27] = proc_control_B.coefsWithFlatStart[i + 18];
  }

  i = 0;
  tmp = 0;
  for (i_0 = 0; i_0 < 4; i_0++) {
    newCoefs[i + 6] = proc_control_B.newSegmentCoeffs[tmp];
    newCoefs[i + 7] = proc_control_B.newSegmentCoeffs[tmp + 1];
    newCoefs[i + 8] = proc_control_B.newSegmentCoeffs[tmp + 2];
    i += 9;
    tmp += 3;
  }

  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  newBreaks[0] = oldbreaks[0] - 1.0;
  newBreaks[1] = oldbreaks[0];
  newBreaks[2] = oldbreaks[1];
  newBreaks[3] = oldbreaks[1] + 1.0;
}

void proc_control::PolyTrajSys_updateStoredPPForms
  (robotics_slcore_internal_bl_p_T *obj, const real_T pp_breaks[4], const real_T
   pp_coefs[36])
{
  int32_T b_i_0;
  int32_T tmp;
  std::memset(&obj->PPDStruct.coefs[0], 0, 36U * sizeof(real_T));
  b_i_0 = 0;
  for (int32_T b_i{0}; b_i < 3; b_i++) {
    for (int32_T i{0}; i < 9; i++) {
      // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
      tmp = i + b_i_0;
      obj->PPDStruct.coefs[tmp + 9] = (3.0 - static_cast<real_T>(b_i)) *
        pp_coefs[tmp];
    }

    b_i_0 += 9;
  }

  std::memset(&obj->PPDDStruct.coefs[0], 0, 36U * sizeof(real_T));
  b_i_0 = 0;
  for (int32_T b_i{0}; b_i < 3; b_i++) {
    for (int32_T i{0}; i < 9; i++) {
      // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
      tmp = i + b_i_0;
      obj->PPDDStruct.coefs[tmp + 9] = (3.0 - static_cast<real_T>(b_i)) *
        obj->PPDStruct.coefs[tmp];
    }

    b_i_0 += 9;
  }

  obj->PPStruct.breaks[0] = pp_breaks[0];
  obj->PPStruct.breaks[1] = pp_breaks[1];
  obj->PPStruct.breaks[2] = pp_breaks[2];
  obj->PPStruct.breaks[3] = pp_breaks[3];
  std::memcpy(&obj->PPStruct.coefs[0], &pp_coefs[0], 36U * sizeof(real_T));

  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  obj->PPDStruct.breaks[0] = pp_breaks[0];
  obj->PPDDStruct.breaks[0] = pp_breaks[0];
  obj->PPDStruct.breaks[1] = pp_breaks[1];
  obj->PPDDStruct.breaks[1] = pp_breaks[1];
  obj->PPDStruct.breaks[2] = pp_breaks[2];
  obj->PPDDStruct.breaks[2] = pp_breaks[2];
  obj->PPDStruct.breaks[3] = pp_breaks[3];
  obj->PPDDStruct.breaks[3] = pp_breaks[3];
}

void proc_control::proc_control_ppval(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3])
{
  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  if (std::isnan(x)) {
    v[0] = (rtNaN);
    v[1] = (rtNaN);
    v[2] = (rtNaN);
  } else {
    real_T v_0;
    real_T v_1;
    real_T v_2;
    int32_T high_i;
    int32_T ic0;
    int32_T low_i;
    int32_T low_ip1;
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    proc_control_B.xloc = x - pp_breaks[low_i];
    v_0 = pp_coefs[low_ip1];
    v_1 = pp_coefs[low_ip1 + 1];
    v_2 = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v_0 = proc_control_B.xloc * v_0 + pp_coefs[ic0 + 1];
      v_1 = proc_control_B.xloc * v_1 + pp_coefs[ic0 + 2];
      v_2 = proc_control_B.xloc * v_2 + pp_coefs[ic0 + 3];
    }

    v[2] = v_2;
    v[1] = v_1;
    v[0] = v_0;
  }

  // End of Start for MATLABSystem: '<S322>/Polynomial Trajectory'
}

void proc_control::proc_TrajectoryManager_stepImpl
  (TrajectoryManager_proc_contro_T *b_this, real_T reset, const real_T poses[13],
   const real_T target[7], const real_T x0[7], const real_T mesuredPose[13],
   real_T currentPose[130], boolean_T *isReached)
{
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_itilerow;
  int32_T b_jcol;
  int32_T b_jcol_0;
  boolean_T x[13];
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T isempty;
  boolean_T y;

  //  Main execute a chaque iteration.
  //  Implement algorithm. Calculate y as a function of input u and
  for (b_jcol_0 = 0; b_jcol_0 < 7; b_jcol_0++) {
    proc_control_B.mp[b_jcol_0] = mesuredPose[b_jcol_0];
  }

  if (reset == 1.0) {
    b_this->init = 0.0;
  }

  if (b_this->init == 0.0) {
    //  Conditions Initiales
    for (b_jcol_0 = 0; b_jcol_0 < 7; b_jcol_0++) {
      proc_control_B.a_i[b_jcol_0] = x0[b_jcol_0];
    }

    proc_control_B.a_i[7] = 0.0;
    proc_control_B.a_i[8] = 0.0;
    proc_control_B.a_i[9] = 0.0;
    proc_control_B.a_i[10] = 0.0;
    proc_control_B.a_i[11] = 0.0;
    proc_control_B.a_i[12] = 0.0;
    b_jcol_0 = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      for (b_itilerow = 0; b_itilerow < 10; b_itilerow++) {
        b_this->poseBuffer[b_itilerow + b_jcol_0] = proc_control_B.a_i[b_jcol];
      }

      b_jcol_0 += 6001;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    b_this->init = 1.0;
  }

  // Start for MATLABSystem: '<S307>/MATLAB System1'
  // this.BufferReset(reset,mp);
  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  // if new == this.generationNumber %new>
  if (b_this->bufferCount + 1.0 < 6001.0) {
    for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
      b_this->poseBuffer[(static_cast<int32_T>(b_this->bufferCount + 1.0) + 6001
                          * b_jcol_0) - 1] = poses[b_jcol_0];
    }

    // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
    b_this->bufferCount++;
    b_this->generationNumber++;
  } else {
    std::printf("%s\n", "Problem");
    std::fflush(stdout);
  }

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_itilerow = 0;
  exitg1 = false;
  while ((!exitg1) && (b_itilerow < 9)) {
    b_index = b_itilerow + 2;
    for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
      x[b_jcol_0] = (b_this->poseBuffer[(6001 * b_jcol_0 + b_itilerow) + 1] ==
                     b_this->emptyArray[b_jcol_0]);
    }

    y = true;
    b_jcol = 0;
    exitg2 = false;
    while ((!exitg2) && (b_jcol < 13)) {
      if (!x[b_jcol]) {
        y = false;
        exitg2 = true;
      } else {
        b_jcol++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_itilerow++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  b_jcol_0 = 0;
  b_jcol = 0;
  for (b_itilerow = 0; b_itilerow < 13; b_itilerow++) {
    // Start for MATLABSystem: '<S307>/MATLAB System1'
    for (b_index_0 = 0; b_index_0 < b_index; b_index_0++) {
      currentPose[b_index_0 + b_jcol_0] = b_this->poseBuffer[b_index_0 + b_jcol];
    }

    b_jcol_0 += 10;
    b_jcol += 6001;
  }

  if (isempty) {
    b_itilerow = 10 - b_index;
    for (b_jcol = 0; b_jcol <= b_itilerow; b_jcol++) {
      // Start for MATLABSystem: '<S307>/MATLAB System1'
      b_index_0 = b_index + b_jcol;
      for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
        proc_control_B.a_i[b_jcol_0] = currentPose[(10 * b_jcol_0 + b_index) - 2];
      }

      for (b_jcol_0 = 0; b_jcol_0 < 13; b_jcol_0++) {
        currentPose[(b_index_0 + 10 * b_jcol_0) - 1] =
          proc_control_B.a_i[b_jcol_0];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  b_jcol_0 = 0;
  for (b_jcol = 0; b_jcol < 13; b_jcol++) {
    // Start for MATLABSystem: '<S307>/MATLAB System1'
    x[b_jcol] = !(b_this->poseBuffer[b_jcol_0 + 10] == b_this->emptyArray[b_jcol]);
    b_jcol_0 += 6001;
  }

  y = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 13)) {
    if (!x[b_jcol]) {
      y = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  if (y) {
    b_jcol_0 = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      // Start for MATLABSystem: '<S307>/MATLAB System1'
      std::memcpy(&proc_control_B.b_this[b_jcol_0], &b_this->poseBuffer[b_jcol_0
                  + 1], 6000U * sizeof(real_T));
      proc_control_B.b_this[b_jcol_0 + 6000] = b_this->emptyArray[b_jcol];
      b_jcol_0 += 6001;
    }

    // Start for MATLABSystem: '<S307>/MATLAB System1'
    std::memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this[0], 78013U *
                sizeof(real_T));
    b_this->bufferCount--;
  }

  //  Fonction qui verifie le target reached
  //  vérifier si la trajectoire est fini
  for (b_jcol_0 = 0; b_jcol_0 < 7; b_jcol_0++) {
    // Start for MATLABSystem: '<S307>/MATLAB System1'
    proc_control_B.y_il[b_jcol_0] = std::abs(poses[b_jcol_0] - target[b_jcol_0]);
  }

  // Start for MATLABSystem: '<S307>/MATLAB System1'
  b_this->done = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 7)) {
    if (!(proc_control_B.y_il[b_jcol] < 0.001)) {
      b_this->done = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  *isReached = false;

  // Start for MATLABSystem: '<S307>/MATLAB System1'
  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  check flip
    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    proc_control_B.mp[3] = mesuredPose[3];
    proc_control_B.mp[4] = mesuredPose[4];
    proc_control_B.mp[5] = mesuredPose[5];
    proc_control_B.mp[6] = mesuredPose[6];
    if (((target[3] * mesuredPose[3] + target[4] * mesuredPose[4]) + target[5] *
         mesuredPose[5]) + target[6] * mesuredPose[6] < 0.0) {
      proc_control_B.mp[3] = -mesuredPose[3];
      proc_control_B.mp[4] = -mesuredPose[4];
      proc_control_B.mp[5] = -mesuredPose[5];
      proc_control_B.mp[6] = -mesuredPose[6];
    }

    //  calculer l'erreur angulaire.
    // =================================================================
    //  Fonction qui calcule l'angle entre 2 quaternion
    proc_control_B.qRel_k[0] = ((target[3] * proc_control_B.mp[3] - -target[4] *
      proc_control_B.mp[4]) - -target[5] * proc_control_B.mp[5]) - -target[6] *
      proc_control_B.mp[6];
    proc_control_B.qRel_k[1] = (target[3] * proc_control_B.mp[4] + -target[4] *
      proc_control_B.mp[3]) + (-target[5] * proc_control_B.mp[6] - -target[6] *
      proc_control_B.mp[5]);
    proc_control_B.qRel_k[2] = (target[3] * proc_control_B.mp[5] + -target[5] *
      proc_control_B.mp[3]) + (-target[6] * proc_control_B.mp[4] - -target[4] *
      proc_control_B.mp[6]);
    proc_control_B.qRel_k[3] = (target[3] * proc_control_B.mp[6] +
      proc_control_B.mp[3] * -target[6]) + (-target[4] * proc_control_B.mp[5] -
      -target[5] * proc_control_B.mp[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.target[0] = target[0] - proc_control_B.mp[0];
    proc_control_B.target[1] = target[1] - proc_control_B.mp[1];
    proc_control_B.target[2] = target[2] - proc_control_B.mp[2];
    if ((proc_control_norm_pr3(proc_control_B.target) <
         b_this->linearConvergence) && (2.0 * rt_atan2d_snf
         (proc_control_norm_pr3(&proc_control_B.qRel_k[1]),
          proc_control_B.qRel_k[0]) < b_this->quaternionConvergence)) {
      b_this->targetReachedCount++;
      *isReached = (b_this->targetReachedCount * 0.1 >= b_this->TargetThreshold);
    } else {
      b_this->targetReachedCount = 0.0;
    }
  }
}

void proc_control::proc_contr_mpcManager_resetImpl(mpcManager_proc_control_T
  *b_this)
{
  static const int8_T tmp[13]{ 30, 30, 30, 45, 45, 45, 45, 0, 0, 0, 0, 0, 0 };

  static const real_T tmp_0[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  //         %% Fonction Reset
  //  Initialize discrete state
  b_this->init = 0.0;

  // Start for MATLABSystem: '<S138>/MATLAB System'
  std::memset(&b_this->currentFaultCount[0], 0, sizeof(real_T) << 3U);
  for (int32_T i{0}; i < 8; i++) {
    // Start for MATLABSystem: '<S138>/MATLAB System'
    b_this->isThrusterFault[i] = false;
  }

  // Start for MATLABSystem: '<S138>/MATLAB System'
  std::memset(&b_this->gainsList[0], 0, 600U * sizeof(real_T));

  // initialiser les gains debug
  for (int32_T i{0}; i < 13; i++) {
    // Start for MATLABSystem: '<S138>/MATLAB System'
    b_this->rosOV[i] = tmp[i];
  }

  for (int32_T i{0}; i < 8; i++) {
    // Start for MATLABSystem: '<S138>/MATLAB System'
    b_this->rosMV[i] = 0.2;
    b_this->rosMVR[i] = tmp_0[i];
  }
}

void proc_control::proc_control_binary_expand_op_1(real_T in1[3], const int32_T
  in2_size[1], const real_T in3_data[], const real_T in4_data[])
{
  int32_T in2_idx_0;

  // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
  //   ActionPort: '<S138>/Action Port'

  // If: '<S8>/If' incorporates:
  //   MATLABSystem: '<S138>/MATLAB System'
  //
  in2_idx_0 = in2_size[0];
  for (int32_T i{0}; i < in2_idx_0; i++) {
    in1[0] = in3_data[0] * in4_data[0];
  }

  // End of If: '<S8>/If'
  // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
  // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
}

void proc_control::proc_contro_TrimPlant_resetImpl(TrimPlant_proc_control_T
  *b_this)
{
  static const real_T tmp[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0 };

  static const int8_T tmp_0[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  // Start for MATLABSystem: '<S140>/MATLAB System'
  //  reset  fonction
  // ------------------------------------------------------------------------------ 
  //  Initialize / reset discrete-state properties
  b_this->qkm[0] = 1.0;
  b_this->qkt[0] = 1.0;
  b_this->qkm[1] = 0.0;
  b_this->qkt[1] = 0.0;
  b_this->qkm[2] = 0.0;
  b_this->qkt[2] = 0.0;
  b_this->qkm[3] = 0.0;
  b_this->qkt[3] = 0.0;
  std::memcpy(&b_this->xl[0], &tmp[0], 13U * sizeof(real_T));
  std::memset(&b_this->constValues[0], 0, 38U * sizeof(real_T));
  b_this->init = false;

  //  initialize matrix size
  for (int32_T i{0}; i < 169; i++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    b_this->C[i] = tmp_0[i];
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memset(&b_this->D[0], 0, 104U * sizeof(real_T));
  std::memset(&b_this->Bc[0], 0, 104U * sizeof(real_T));
}

void proc_control::proc_control_eul2quat(const real_T eul[3], real_T q[4])
{
  real_T q_tmp;
  real_T q_tmp_0;
  real_T s_idx_0;
  real_T s_idx_1;
  real_T s_idx_2;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  s_idx_2 = eul[0] / 2.0;
  s_idx_0 = s_idx_2;
  proc_control_B.c_idx_0_m = s_idx_2;
  s_idx_2 = eul[1] / 2.0;
  s_idx_1 = s_idx_2;
  proc_control_B.c_idx_1_c = s_idx_2;
  s_idx_2 = eul[2] / 2.0;
  proc_control_B.c_idx_0_m = std::cos(proc_control_B.c_idx_0_m);
  s_idx_0 = std::sin(s_idx_0);
  proc_control_B.c_idx_1_c = std::cos(proc_control_B.c_idx_1_c);
  s_idx_1 = std::sin(s_idx_1);
  proc_control_B.c_idx_2_a = std::cos(s_idx_2);
  s_idx_2 = std::sin(s_idx_2);
  q_tmp = proc_control_B.c_idx_0_m * proc_control_B.c_idx_1_c;
  q_tmp_0 = s_idx_0 * s_idx_1;
  q[0] = q_tmp * proc_control_B.c_idx_2_a + q_tmp_0 * s_idx_2;
  q[1] = q_tmp * s_idx_2 - q_tmp_0 * proc_control_B.c_idx_2_a;
  q_tmp = s_idx_0 * proc_control_B.c_idx_1_c;
  q_tmp_0 = proc_control_B.c_idx_0_m * s_idx_1;
  q[2] = q_tmp_0 * proc_control_B.c_idx_2_a + q_tmp * s_idx_2;
  q[3] = q_tmp * proc_control_B.c_idx_2_a - q_tmp_0 * s_idx_2;
}

void proc_control::proc_control_xgetrf_p(real_T A[36], int32_T ipiv[6], int32_T *
  info)
{
  int32_T ix;
  for (ix = 0; ix < 6; ix++) {
    ipiv[ix] = ix + 1;
  }

  *info = 0;
  for (int32_T b_j{0}; b_j < 5; b_j++) {
    int32_T c;
    int32_T ipiv_tmp;
    int32_T iy;
    int32_T jj;
    int32_T jp1j;
    int32_T k;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    c = b_j * 7 + 2;
    jj = b_j * 7;
    iy = 6 - b_j;
    ix = 1;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.smax_g = std::abs(A[jj]);
    for (k = 2; k <= iy; k++) {
      proc_control_B.s_m4 = std::abs(A[(c + k) - 3]);
      if (proc_control_B.s_m4 > proc_control_B.smax_g) {
        ix = k;
        proc_control_B.smax_g = proc_control_B.s_m4;
      }
    }

    if (A[(c + ix) - 3] != 0.0) {
      if (ix - 1 != 0) {
        ipiv_tmp = b_j + ix;
        ipiv[b_j] = ipiv_tmp;
        for (k = 0; k < 6; k++) {
          iy = k * 6 + b_j;
          proc_control_B.smax_g = A[iy];
          ix = (k * 6 + ipiv_tmp) - 1;
          A[iy] = A[ix];
          A[ix] = proc_control_B.smax_g;
        }
      }

      k = c - b_j;
      for (ix = c; ix <= k + 4; ix++) {
        A[ix - 1] /= A[jj];
      }
    } else {
      *info = b_j + 1;
    }

    jp1j = jj;
    jj += 6;
    k = 5 - b_j;
    for (ix = 0; ix < k; ix++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.smax_g = A[ix * 6 + jj];
      if (proc_control_B.smax_g != 0.0) {
        int32_T d;

        // Start for MATLABSystem: '<S140>/MATLAB System'
        iy = jp1j + 8;
        d = (jp1j - b_j) + 12;
        for (ipiv_tmp = iy; ipiv_tmp <= d; ipiv_tmp++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          A[ipiv_tmp - 1] += A[((c + ipiv_tmp) - jp1j) - 9] *
            -proc_control_B.smax_g;
        }
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jp1j += 6;
    }
  }

  if ((*info == 0) && (!(A[35] != 0.0))) {
    *info = 6;
  }
}

void proc_control::proc_control_mldivide_pr351(const real_T A[36], real_T B[48])
{
  int32_T tmp;
  int32_T tmp_0;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memcpy(&proc_control_B.c_A_m[0], &A[0], 36U * sizeof(real_T));
  proc_control_xgetrf_p(proc_control_B.c_A_m, proc_control_B.ipiv_f,
                        &proc_control_B.b_info_d);
  for (proc_control_B.b_i_c = 0; proc_control_B.b_i_c < 5; proc_control_B.b_i_c
       ++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.ip_a = proc_control_B.ipiv_f[proc_control_B.b_i_c];
    if (proc_control_B.b_i_c + 1 != proc_control_B.ip_a) {
      for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 8;
           proc_control_B.b_j_c++) {
        proc_control_B.kAcol_i = 6 * proc_control_B.b_j_c + proc_control_B.b_i_c;
        proc_control_B.temp_o = B[proc_control_B.kAcol_i];
        tmp = (6 * proc_control_B.b_j_c + proc_control_B.ip_a) - 1;
        B[proc_control_B.kAcol_i] = B[tmp];
        B[tmp] = proc_control_B.temp_o;
      }
    }
  }

  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 8; proc_control_B.b_j_c
       ++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.ip_a = 6 * proc_control_B.b_j_c - 1;
    for (proc_control_B.b_i_c = 0; proc_control_B.b_i_c < 6;
         proc_control_B.b_i_c++) {
      proc_control_B.kAcol_i = 6 * proc_control_B.b_i_c - 1;
      tmp = (proc_control_B.b_i_c + proc_control_B.ip_a) + 1;
      if (B[tmp] != 0.0) {
        for (proc_control_B.b_info_d = proc_control_B.b_i_c + 2;
             proc_control_B.b_info_d < 7; proc_control_B.b_info_d++) {
          tmp_0 = proc_control_B.b_info_d + proc_control_B.ip_a;

          // Start for MATLABSystem: '<S140>/MATLAB System'
          B[tmp_0] -= proc_control_B.c_A_m[proc_control_B.b_info_d +
            proc_control_B.kAcol_i] * B[tmp];
        }
      }
    }
  }

  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 8; proc_control_B.b_j_c
       ++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.ip_a = 6 * proc_control_B.b_j_c;
    for (proc_control_B.b_info_d = 5; proc_control_B.b_info_d >= 0;
         proc_control_B.b_info_d--) {
      proc_control_B.kAcol_i = 6 * proc_control_B.b_info_d;
      tmp = proc_control_B.b_info_d + proc_control_B.ip_a;
      proc_control_B.temp_o = B[tmp];
      if (proc_control_B.temp_o != 0.0) {
        B[tmp] = proc_control_B.temp_o /
          proc_control_B.c_A_m[proc_control_B.b_info_d + proc_control_B.kAcol_i];
        proc_control_B.b_e = proc_control_B.b_info_d - 1;
        for (proc_control_B.b_i_c = 0; proc_control_B.b_i_c <=
             proc_control_B.b_e; proc_control_B.b_i_c++) {
          tmp_0 = proc_control_B.b_i_c + proc_control_B.ip_a;
          B[tmp_0] -= proc_control_B.c_A_m[proc_control_B.b_i_c +
            proc_control_B.kAcol_i] * B[tmp];
        }
      }
    }
  }
}

void proc_control::proc_control_quatmultiply(const real_T q[4], const real_T r[4],
  real_T qout[4])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  qout[0] = ((q[0] * r[0] - q[1] * r[1]) - q[2] * r[2]) - q[3] * r[3];
  qout[1] = (q[0] * r[1] + r[0] * q[1]) + (q[2] * r[3] - r[2] * q[3]);
  qout[2] = (q[0] * r[2] + r[0] * q[2]) + (r[1] * q[3] - q[1] * r[3]);
  qout[3] = (q[0] * r[3] + r[0] * q[3]) + (q[1] * r[2] - r[1] * q[2]);
}

void proc_control::proc_control_ft_6(const real_T ct[2166], real_T Anq[169])
{
  real_T Anq_tmp;
  real_T Anq_tmp_0;
  real_T Anq_tmp_1;
  real_T Anq_tmp_2;
  real_T Anq_tmp_tmp;
  real_T tmp;
  real_T tmp_0;
  real_T tmp_1;
  real_T tmp_2;
  real_T tmp_3;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.t3179 = ct[144] + ct[1693];
  proc_control_B.t3180 = ct[148] + ct[1697];
  proc_control_B.t3181 = (ct[202] + ct[2041]) + ct[40];
  proc_control_B.t3182 = (ct[208] + ct[2043]) + ct[37];
  proc_control_B.t3183 = (ct[214] + ct[2042]) + ct[41];
  proc_control_B.t3190 = (ct[1729] + ct[2129]) + ct[1565];
  proc_control_B.t3184 = proc_control_B.t3190 + ct[820];
  proc_control_B.t3191 = (ct[1736] + ct[2093]) + ct[1576];
  proc_control_B.t3185 = proc_control_B.t3191 + ct[828];
  proc_control_B.t3192 = (ct[1744] + ct[2104]) + ct[1554];
  proc_control_B.t3186 = proc_control_B.t3192 + ct[825];
  proc_control_B.t3190 += ct[1445];
  proc_control_B.t3191 += ct[1442];
  proc_control_B.t3192 += ct[1451];
  proc_control_B.t3196 = ((ct[1688] + ct[1692]) + ct[139]) + ct[143];
  proc_control_B.t3197 = ((ct[1689] + ct[2014]) + ct[2047]) + ct[140];
  proc_control_B.t3198 = ((ct[1690] + ct[1699]) + ct[141]) + ct[150];
  proc_control_B.t3199 = ((ct[1698] + ct[1699]) + ct[149]) + ct[150];
  proc_control_B.t3200 = ((ct[1691] + ct[1700]) + ct[142]) + ct[151];
  proc_control_B.t3201 = ((ct[1696] + ct[2016]) + ct[2048]) + ct[147];
  proc_control_B.t3202 = ((ct[1694] + ct[2017]) + ct[2049]) + ct[145];
  proc_control_B.t3203 = ((ct[1695] + ct[1701]) + ct[146]) + ct[152];
  proc_control_B.t3204 = ((((ct[283] + ct[1150]) + ct[1887]) + ct[46]) + ct[153])
    + ct[856];
  proc_control_B.t3205 = ((((ct[382] + ct[845]) + ct[1913]) + ct[2155]) + ct[163])
    + ct[869];
  proc_control_B.t3206 = ((((ct[1012] + ct[1369]) + ct[1880]) + ct[21]) + ct[168])
    + ct[855];
  proc_control_B.t3207 = ((((ct[283] + ct[730]) + ct[1904]) + ct[153]) + ct[1595])
    + ct[857];
  proc_control_B.t3208 = ((((ct[845] + ct[1277]) + ct[1871]) + ct[163]) + ct
    [1605]) + ct[854];
  proc_control_B.t3209 = ((((ct[583] + ct[1369]) + ct[1895]) + ct[168]) + ct
    [1587]) + ct[868];
  proc_control_B.t3224 = ((((((((((((((((((((((((((((((((((((((((((((((((((((ct
    [788] + ct[894]) + ct[1066]) + ct[1189]) + ct[1264]) + ct[1328]) + ct[1638])
    + ct[1675]) + ct[1733]) + ct[1831]) + ct[1845]) + ct[1860]) + ct[1878]) +
    ct[1883]) + ct[1922]) + ct[2056]) + ct[2083]) + ct[2092]) + ct[2102]) + ct
    [2134]) + ct[2138]) + ct[33]) + ct[34]) + ct[269]) + ct[295]) + ct[310]) +
    ct[347]) + ct[409]) + ct[421]) + ct[433]) + ct[446]) + ct[455]) + ct[461]) +
    ct[465]) + ct[735]) + ct[834]) + ct[844]) + ct[852]) + ct[1046]) + ct[1052])
    + ct[1056]) + ct[1061]) + ct[1070]) + ct[1074]) + ct[1218]) + ct[1229]) +
    ct[1325]) + ct[1337]) + ct[1340]) + ct[1352]) + ct[1388]) + ct[1391]) + ct
    [1463]) - ct[1234];
  proc_control_B.t3225 = ((((((((((((((((((((((((((((((((((((((((((((((((((((ct
    [826] + ct[960]) + ct[1118]) + ct[1197]) + ct[1285]) + ct[1359]) + ct[1669])
    + ct[1676]) + ct[1740]) + ct[1837]) + ct[1852]) + ct[1866]) + ct[1882]) +
    ct[1886]) + ct[1922]) + ct[2057]) + ct[2087]) + ct[2097]) + ct[2107]) + ct
    [2151]) + ct[2153]) + ct[33]) + ct[34]) + ct[269]) + ct[295]) + ct[314]) +
    ct[352]) + ct[413]) + ct[426]) + ct[437]) + ct[446]) + ct[457]) + ct[463]) +
    ct[468]) + ct[735]) + ct[836]) + ct[848]) + ct[852]) + ct[1049]) + ct[1054])
    + ct[1058]) + ct[1064]) + ct[1070]) + ct[1074]) + ct[1220]) + ct[1231]) +
    ct[1332]) + ct[1346]) + ct[1347]) + ct[1358]) + ct[1388]) + ct[1391]) + ct
    [1463]) - ct[1234];
  proc_control_B.t3228 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1780] + ct[1784]) +
    ct[1804]) + ct[1818]) + ct[1821]) + ct[1964]) + ct[1966]) + ct[2000]) + ct
    [2019]) + ct[2021]) + ct[2128]) + ct[2136]) + ct[172]) + ct[174]) + ct[191])
    + ct[195]) + ct[236]) + ct[256]) + ct[260]) + ct[385]) + ct[389]) + ct[429])
    + ct[513]) + ct[515]) + ct[552]) + ct[610]) + ct[616]) + ct[629]) + ct[634])
    + ct[667]) + ct[680]) + ct[732]) + ct[870]) + ct[916]) + ct[919]) + ct[940])
                       + ct[944]) + ct[976]) + ct[983]) + ct[1005]) + ct[1008])
                  + ct[1021]) + ct[1026]) + ct[1206]) + ct[1212]) + ct[1303]) +
             ct[1315]) + ct[1322]) + ct[1338]) + ct[1444]) + ct[1590]) + ct[1591])
       + ct[1598]) + ct[1601]) + ct[1603]) + ct[1611];
  proc_control_B.t3229 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1780] + ct[1792]) +
    ct[1804]) + ct[1818]) + ct[1824]) + ct[1964]) + ct[1970]) + ct[2000]) + ct
    [2019]) + ct[2026]) + ct[2128]) + ct[2143]) + ct[172]) + ct[179]) + ct[191])
    + ct[199]) + ct[234]) + ct[256]) + ct[260]) + ct[385]) + ct[395]) + ct[429])
    + ct[513]) + ct[518]) + ct[552]) + ct[610]) + ct[629]) + ct[638]) + ct[667])
    + ct[673]) + ct[680]) + ct[732]) + ct[870]) + ct[916]) + ct[925]) + ct[940])
                       + ct[948]) + ct[976]) + ct[983]) + ct[1005]) + ct[1013])
                  + ct[1021]) + ct[1031]) + ct[1206]) + ct[1212]) + ct[1303]) +
             ct[1315]) + ct[1322]) + ct[1342]) + ct[1443]) + ct[1591]) + ct[1592])
       + ct[1598]) + ct[1601]) + ct[1603]) + ct[1621];
  proc_control_B.t3230 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1769] + ct[1777]) +
    ct[1799]) + ct[1807]) + ct[1811]) + ct[1975]) + ct[1978]) + ct[2002]) + ct
    [2018]) + ct[2024]) + ct[2128]) + ct[2139]) + ct[165]) + ct[170]) + ct[203])
    + ct[211]) + ct[234]) + ct[252]) + ct[259]) + ct[373]) + ct[380]) + ct[417])
    + ct[520]) + ct[524]) + ct[551]) + ct[612]) + ct[616]) + ct[625]) + ct[629])
    + ct[638]) + ct[643]) + ct[732]) + ct[870]) + ct[910]) + ct[914]) + ct[954])
                       + ct[962]) + ct[975]) + ct[987]) + ct[991]) + ct[997]) +
                  ct[1020]) + ct[1029]) + ct[1208]) + ct[1210]) + ct[1305]) +
             ct[1309]) + ct[1322]) + ct[1353]) + ct[1443]) + ct[1590]) + ct[1591])
       + ct[1592]) + ct[1593]) - ct[1186]) + ct[1625];
  proc_control_B.t3231 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1769] + ct[1791]) +
    ct[1799]) + ct[1807]) + ct[1814]) + ct[1975]) + ct[1983]) + ct[2002]) + ct
    [2018]) + ct[2029]) + ct[2128]) + ct[2156]) + ct[165]) + ct[180]) + ct[203])
    + ct[221]) + ct[236]) + ct[252]) + ct[259]) + ct[373]) + ct[396]) + ct[417])
    + ct[520]) + ct[528]) + ct[551]) + ct[612]) + ct[616]) + ct[638]) + ct[643])
    + ct[646]) + ct[667]) + ct[732]) + ct[870]) + ct[910]) + ct[924]) + ct[954])
                       + ct[971]) + ct[975]) + ct[987]) + ct[994]) + ct[997]) +
                  ct[1020]) + ct[1035]) + ct[1208]) + ct[1210]) + ct[1305]) +
             ct[1309]) + ct[1322]) + ct[1360]) + ct[1444]) + ct[1590]) + ct[1592])
       + ct[1593]) + ct[1598]) - ct[1186]) + ct[1628];
  proc_control_B.t3232 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1772] + ct[1776]) +
    ct[1800]) + ct[1802]) + ct[1808]) + ct[1988]) + ct[1991]) + ct[2007]) + ct
    [2009]) + ct[2031]) + ct[2144]) + ct[2150]) + ct[184]) + ct[187]) + ct[204])
    + ct[209]) + ct[231]) + ct[257]) + ct[261]) + ct[374]) + ct[378]) + ct[418])
    + ct[531]) + ct[534]) + ct[554]) + ct[611]) + ct[615]) + ct[637]) + ct[640])
    + ct[652]) + ct[659]) + ct[737]) + ct[873]) + ct[933]) + ct[936]) + ct[956])
                       + ct[961]) + ct[978]) + ct[981]) + ct[998]) + ct[1000]) +
                  ct[1006]) + ct[1022]) + ct[1207]) + ct[1214]) + ct[1304]) +
             ct[1312]) + ct[1343]) + ct[1357]) + ct[1447]) + ct[1604]) + ct[1606])
       + ct[1612]) + ct[1616]) + ct[1627]) - ct[1195];
  proc_control_B.t3233 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1772] + ct[1781]) +
    ct[1800]) + ct[1805]) + ct[1808]) + ct[1988]) + ct[1994]) + ct[2007]) + ct
    [2011]) + ct[2031]) + ct[2144]) + ct[2159]) + ct[184]) + ct[192]) + ct[204])
    + ct[215]) + ct[235]) + ct[257]) + ct[261]) + ct[374]) + ct[386]) + ct[418])
    + ct[531]) + ct[537]) + ct[554]) + ct[611]) + ct[615]) + ct[619]) + ct[637])
    + ct[652]) + ct[679]) + ct[737]) + ct[873]) + ct[933]) + ct[941]) + ct[956])
                       + ct[965]) + ct[978]) + ct[984]) + ct[998]) + ct[1003]) +
                  ct[1006]) + ct[1022]) + ct[1207]) + ct[1214]) + ct[1304]) +
             ct[1312]) + ct[1343]) + ct[1362]) + ct[1448]) + ct[1604]) + ct[1606])
       + ct[1612]) + ct[1622]) + ct[1624]) - ct[1195];
  proc_control_B.t3234 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1782] + ct[1795]) +
    ct[1815]) + ct[1819]) + ct[1826]) + ct[1965]) + ct[1971]) + ct[2006]) + ct
    [2020]) + ct[2027]) + ct[2132]) + ct[2144]) + ct[173]) + ct[182]) + ct[193])
    + ct[200]) + ct[231]) + ct[275]) + ct[289]) + ct[387]) + ct[398]) + ct[453])
    + ct[514]) + ct[519]) + ct[555]) + ct[615]) + ct[644]) + ct[659]) + ct[675])
    + ct[679]) + ct[686]) + ct[737]) + ct[873]) + ct[918]) + ct[927]) + ct[942])
                       + ct[951]) + ct[995]) + ct[1007]) + ct[1015]) + ct[1018])
                  + ct[1024]) + ct[1032]) + ct[1209]) + ct[1216]) + ct[1310]) +
             ct[1319]) + ct[1324]) + ct[1343]) + ct[1447]) + ct[1594]) + ct[1600])
       + ct[1606]) + ct[1616]) + ct[1622]) + ct[1623];
  proc_control_B.t3235 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1790] + ct[1795]) +
    ct[1815]) + ct[1823]) + ct[1826]) + ct[1969]) + ct[1971]) + ct[2006]) + ct
    [2025]) + ct[2027]) + ct[2141]) + ct[2144]) + ct[177]) + ct[182]) + ct[197])
    + ct[200]) + ct[235]) + ct[275]) + ct[289]) + ct[393]) + ct[398]) + ct[453])
    + ct[516]) + ct[519]) + ct[555]) + ct[637]) + ct[644]) + ct[656]) + ct[659])
    + ct[679]) + ct[686]) + ct[737]) + ct[873]) + ct[923]) + ct[927]) + ct[947])
                       + ct[951]) + ct[995]) + ct[1011]) + ct[1015]) + ct[1018])
                  + ct[1030]) + ct[1032]) + ct[1209]) + ct[1216]) + ct[1310]) +
             ct[1319]) + ct[1329]) + ct[1343]) + ct[1448]) + ct[1594]) + ct[1597])
       + ct[1612]) + ct[1616]) + ct[1622]) + ct[1623];
  proc_control_B.t3236 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1774] + ct[1783]) +
    ct[1801]) + ct[1806]) + ct[1820]) + ct[1989]) + ct[1995]) + ct[2008]) + ct
    [2012]) + ct[2037]) + ct[2147]) + ct[2160]) + ct[186]) + ct[194]) + ct[206])
    + ct[216]) + ct[232]) + ct[262]) + ct[277]) + ct[376]) + ct[388]) + ct[430])
    + ct[533]) + ct[538]) + ct[556]) + ct[613]) + ct[622]) + ct[628]) + ct[658])
    + ct[666]) + ct[687]) + ct[740]) + ct[876]) + ct[934]) + ct[943]) + ct[958])
                       + ct[966]) + ct[980]) + ct[985]) + ct[999]) + ct[1004]) +
                  ct[1025]) + ct[1037]) + ct[1211]) + ct[1217]) + ct[1306]) +
             ct[1320]) + ct[1345]) + ct[1363]) + ct[1454]) + ct[1607]) - ct[1183])
       - ct[1187]) - ct[1191]) - ct[1199]) - ct[1200];
  proc_control_B.t3237 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1779] + ct[1783]) +
    ct[1803]) + ct[1806]) + ct[1820]) + ct[1992]) + ct[1995]) + ct[2010]) + ct
    [2012]) + ct[2037]) + ct[2157]) + ct[2160]) + ct[190]) + ct[194]) + ct[213])
    + ct[216]) + ct[230]) + ct[262]) + ct[277]) + ct[384]) + ct[388]) + ct[430])
    + ct[536]) + ct[538]) + ct[556]) + ct[613]) + ct[628]) + ct[664]) + ct[666])
    + ct[678]) + ct[687]) + ct[740]) + ct[876]) + ct[939]) + ct[943]) + ct[964])
                       + ct[966]) + ct[982]) + ct[985]) + ct[1002]) + ct[1004])
                  + ct[1025]) + ct[1037]) + ct[1211]) + ct[1217]) + ct[1306]) +
             ct[1320]) + ct[1349]) + ct[1363]) + ct[1453]) + ct[1617]) - ct[1183])
       - ct[1187]) - ct[1191]) - ct[1200]) - ct[1203];
  proc_control_B.t3238 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1773] + ct[1796]) +
    ct[1809]) + ct[1816]) + ct[1827]) + ct[1977]) + ct[1985]) + ct[2022]) + ct
    [2030]) + ct[2035]) + ct[2137]) + ct[2160]) + ct[167]) + ct[183]) + ct[207])
    + ct[224]) + ct[230]) + ct[276]) + ct[302]) + ct[377]) + ct[400]) + ct[454])
    + ct[523]) + ct[530]) + ct[557]) + ct[628]) + ct[651]) + ct[654]) + ct[658])
    + ct[678]) + ct[681]) + ct[740]) + ct[876]) + ct[912]) + ct[928]) + ct[957])
                       + ct[974]) + ct[988]) + ct[996]) + ct[1016]) + ct[1027])
                  + ct[1036]) + ct[1040]) + ct[1213]) + ct[1215]) + ct[1313]) +
             ct[1316]) + ct[1326]) + ct[1363]) + ct[1453]) + ct[1596]) + ct[1602])
       - ct[1191]) - ct[1196]) - ct[1199]) - ct[1203];
  proc_control_B.t3239 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1788] + ct[1796]) +
    ct[1812]) + ct[1816]) + ct[1827]) + ct[1982]) + ct[1985]) + ct[2028]) + ct
    [2030]) + ct[2035]) + ct[2152]) + ct[2160]) + ct[176]) + ct[183]) + ct[219])
    + ct[224]) + ct[232]) + ct[276]) + ct[302]) + ct[392]) + ct[400]) + ct[454])
    + ct[527]) + ct[530]) + ct[557]) + ct[654]) + ct[658]) + ct[666]) + ct[669])
    + ct[678]) + ct[681]) + ct[740]) + ct[876]) + ct[921]) + ct[928]) + ct[969])
                       + ct[974]) + ct[992]) + ct[996]) + ct[1016]) + ct[1033])
                  + ct[1036]) + ct[1040]) + ct[1213]) + ct[1215]) + ct[1313]) +
             ct[1316]) + ct[1333]) + ct[1363]) + ct[1454]) + ct[1599]) + ct[1602])
       - ct[1196]) - ct[1199]) - ct[1200]) - ct[1203];
  proc_control_B.t3240 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[425] + ct[757]) + ct[858]) + ct[1023]) + ct[1380]) + ct[1395]) +
    ct[1416]) + ct[1614]) + ct[1679]) + ct[1730]) + ct[1748]) + ct[1828]) + ct
    [1842]) + ct[1857]) + ct[1870]) + ct[1891]) + ct[1896]) + ct[1898]) + ct
    [1902]) + ct[1910]) + ct[2046]) + ct[2064]) + ct[2081]) + ct[2090]) + ct
    [2100]) + ct[2110]) + ct[2112]) + ct[2114]) + ct[2116]) + ct[2118]) + ct
    [2122]) + ct[22]) + ct[24]) + ct[26]) + ct[27]) + ct[263]) + ct[267]) + ct
    [278]) + ct[282]) + ct[307]) + ct[317]) + ct[320]) + ct[345]) + ct[407]) +
    ct[419]) + ct[431]) + ct[442]) + ct[445]) + ct[469]) + ct[472]) + ct[474]) +
    ct[691]) + ct[696]) + ct[697]) + ct[705]) + ct[707]) + ct[710]) + ct[720]) +
    ct[726]) + ct[859]) + ct[861]) + ct[863]) + ct[864]) + ct[882]) + ct[1076])
    + ct[1077]) + ct[1233]) + ct[1237]) + ct[1239]) + ct[1243]) + ct[1364]) +
                  ct[1365]) + ct[1367]) + ct[1370]) + ct[1371]) + ct[1374]) +
             ct[1376]) + ct[1384]) + ct[1458]) + ct[1459]) + ct[1630]) + ct[1631])
       + ct[1636]) + ct[1640]) - ct[1496]) - ct[1499];
  proc_control_B.t3241 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[488] + ct[812]) + ct[917]) + ct[1095]) + ct[1405]) + ct[1427]) +
    ct[1449]) + ct[1663]) + ct[1683]) + ct[1737]) + ct[1751]) + ct[1834]) + ct
    [1849]) + ct[1863]) + ct[1874]) + ct[1894]) + ct[1901]) + ct[1903]) + ct
    [1911]) + ct[1917]) + ct[2045]) + ct[2067]) + ct[2085]) + ct[2095]) + ct
    [2105]) + ct[2111]) + ct[2113]) + ct[2117]) + ct[2119]) + ct[2123]) + ct
    [2126]) + ct[22]) + ct[23]) + ct[29]) + ct[30]) + ct[266]) + ct[272]) + ct
    [292]) + ct[298]) + ct[312]) + ct[318]) + ct[322]) + ct[349]) + ct[411]) +
    ct[423]) + ct[435]) + ct[444]) + ct[448]) + ct[473]) + ct[475]) + ct[477]) +
    ct[691]) + ct[703]) + ct[704]) + ct[706]) + ct[715]) + ct[717]) + ct[718]) +
    ct[729]) + ct[859]) + ct[860]) + ct[866]) + ct[867]) + ct[881]) + ct[1075])
    + ct[1077]) + ct[1235]) + ct[1238]) + ct[1242]) + ct[1245]) + ct[1364]) +
                  ct[1366]) + ct[1372]) + ct[1373]) + ct[1377]) + ct[1378]) +
             ct[1383]) + ct[1386]) + ct[1462]) + ct[1464]) + ct[1633]) + ct[1634])
       + ct[1637]) + ct[1639]) - ct[1495]) - ct[1501];
  proc_control_B.t3242 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[456] + ct[521]) + ct[853]) + ct[1001]) + ct[1145]) + ct[1438]) +
    ct[1460]) + ct[1471]) + ct[1672]) + ct[1684]) + ct[1743]) + ct[1840]) + ct
    [1855]) + ct[1869]) + ct[1897]) + ct[1907]) + ct[1908]) + ct[1915]) + ct
    [1916]) + ct[1920]) + ct[2044]) + ct[2072]) + ct[2089]) + ct[2099]) + ct
    [2109]) + ct[2115]) + ct[2120]) + ct[2121]) + ct[2124]) + ct[2125]) + ct
    [2127]) + ct[25]) + ct[26]) + ct[28]) + ct[30]) + ct[284]) + ct[288]) + ct
    [297]) + ct[301]) + ct[316]) + ct[321]) + ct[323]) + ct[354]) + ct[416]) +
    ct[428]) + ct[439]) + ct[447]) + ct[450]) + ct[476]) + ct[478]) + ct[479]) +
    ct[695]) + ct[701]) + ct[710]) + ct[714]) + ct[716]) + ct[724]) + ct[725]) +
    ct[729]) + ct[862]) + ct[863]) + ct[865]) + ct[867]) + ct[880]) + ct[1075])
    + ct[1076]) + ct[1240]) + ct[1241]) + ct[1244]) + ct[1246]) + ct[1368]) +
                  ct[1375]) + ct[1376]) + ct[1379]) + ct[1381]) + ct[1382]) +
             ct[1385]) + ct[1386]) + ct[1466]) + ct[1467]) + ct[1632]) + ct[1635])
       + ct[1641]) + ct[1642]) - ct[1497]) - ct[1500];
  proc_control_B.t3210 = ((((((((((((((((((((((((((((((((((((((ct[1771] + ct
    [1775]) + ct[1810]) + ct[1960]) + ct[1961]) + ct[2003]) + ct[166]) + ct[169])
    + ct[185]) + ct[188]) + ct[225]) + ct[229]) + ct[239]) + ct[255]) + ct[375])
    + ct[379]) + ct[401]) + ct[509]) + ct[511]) + ct[542]) + ct[627]) + ct[631])
    + ct[821]) + ct[830]) + ct[911]) + ct[913]) + ct[932]) + ct[935]) - ct[233])
    + ct[989]) + ct[1010]) + ct[1019]) + ct[1169]) + ct[1171]) - ct[641]) - ct
    [655]) + ct[1446]) + ct[1455]) + ct[1609]) + ct[1610];
  proc_control_B.t3211 = ((((((((((((((((((((((((((((((((((((((ct[1778] + ct
    [1789]) + ct[1813]) + ct[1963]) + ct[1967]) + ct[2005]) + ct[171]) + ct[178])
    + ct[189]) + ct[198]) + ct[226]) + ct[229]) + ct[240]) + ct[255]) + ct[381])
    + ct[394]) + ct[402]) + ct[512]) + ct[517]) + ct[543]) + ct[648]) + ct[671])
    + ct[821]) + ct[830]) + ct[915]) + ct[922]) + ct[937]) + ct[946]) - ct[233])
    + ct[993]) + ct[1017]) + ct[1019]) + ct[1167]) + ct[1174]) - ct[620]) - ct
    [674]) + ct[1446]) + ct[1455]) + ct[1613]) + ct[1620];
  proc_control_B.t3212 = ((((((((((((((((((((((((((((((((((((((ct[1771] + ct
    [1794]) + ct[1825]) + ct[1976]) + ct[1984]) + ct[2034]) + ct[166]) + ct[181])
    + ct[205]) + ct[222]) + ct[225]) + ct[229]) + ct[244]) + ct[258]) + ct[375])
    + ct[397]) + ct[401]) + ct[522]) + ct[529]) + ct[545]) + ct[648]) + ct[671])
    + ct[822]) + ct[831]) + ct[911]) + ct[926]) + ct[955]) + ct[973]) - ct[238])
    + ct[1014]) + ct[1019]) + ct[1039]) + ct[1168]) + ct[1170]) - ct[623]) - ct
    [650]) + ct[1452]) + ct[1456]) - ct[1194]) - ct[1201];
  proc_control_B.t3213 = ((((((((((((((((((((((((((((((((((((((ct[1778] + ct
    [1786]) + ct[1822]) + ct[1979]) + ct[1981]) + ct[2032]) + ct[171]) + ct[175])
    + ct[212]) + ct[217]) + ct[226]) + ct[229]) + ct[245]) + ct[258]) + ct[381])
    + ct[390]) + ct[402]) + ct[525]) + ct[526]) + ct[546]) + ct[627]) + ct[631])
    + ct[822]) + ct[831]) + ct[915]) + ct[920]) + ct[963]) + ct[968]) - ct[238])
    + ct[1009]) + ct[1019]) + ct[1038]) + ct[1172]) + ct[1173]) - ct[665]) - ct
    [668]) + ct[1452]) + ct[1456]) - ct[1190]) - ct[1192];
  proc_control_B.t3214 = ((((((((((((((((((((((((((((((((((((((ct[1775] + ct
    [1785]) + ct[1810]) + ct[1990]) + ct[1996]) + ct[2033]) + ct[188]) + ct[196])
    + ct[210]) + ct[218]) + ct[238]) + ct[250]) + ct[253]) + ct[255]) + ct[379])
    + ct[391]) + ct[405]) + ct[535]) + ct[539]) + ct[549]) + ct[623]) + ct[650])
    + ct[829]) + ct[832]) + ct[935]) + ct[945]) + ct[959]) + ct[967]) - ct[233])
    + ct[1010]) + ct[1028]) + ct[1041]) + ct[1188]) + ct[1202]) - ct[620]) - ct
    [674]) + ct[1450]) + ct[1457]) + ct[1608]) + ct[1615];
  proc_control_B.t3215 = ((((((((((((((((((((((((((((((((((((((ct[1789] + ct
    [1793]) + ct[1813]) + ct[1997]) + ct[1998]) + ct[2036]) + ct[198]) + ct[201])
    + ct[220]) + ct[223]) + ct[238]) + ct[251]) + ct[254]) + ct[255]) + ct[394])
    + ct[399]) + ct[406]) + ct[540]) + ct[541]) + ct[550]) + ct[665]) + ct[668])
    + ct[829]) + ct[832]) + ct[946]) + ct[950]) + ct[970]) + ct[972]) - ct[233])
    + ct[1017]) + ct[1034]) + ct[1041]) + ct[1193]) + ct[1198]) - ct[641]) - ct
    [655]) + ct[1450]) + ct[1457]) + ct[1618]) + ct[1619];
  proc_control_B.t3216 = ((((((((((((((((((((((((((((((((((((((ct[59] + ct[106])
    + ct[110]) + ct[130]) + ct[138]) + ct[161]) + ct[164]) + ct[560]) + ct[657])
    + ct[690]) + ct[748]) + ct[763]) + ct[765]) + ct[823]) - ct[62]) - ct[102])
    - ct[109]) + ct[986]) + ct[1080]) + ct[1113]) + ct[1115]) + ct[1117]) + ct
    [1121]) + ct[1126]) + ct[1134]) + ct[1273]) + ct[1284]) + ct[1314]) + ct
    [1321]) - ct[747]) - ct[764]) - ct[766]) + ct[1403]) + ct[1410]) + ct[1424])
    + ct[1425]) + ct[1480]) + ct[1483]) + ct[1503]) + ct[1569];
  proc_control_B.t3217 = ((((((((((((((((((((((((((((((((((((((ct[89] + ct[93])
    + ct[110]) + ct[134]) + ct[138]) + ct[157]) + ct[164]) + ct[566]) + ct[657])
    + ct[690]) + ct[754]) + ct[758]) + ct[765]) + ct[823]) - ct[87]) - ct[94]) -
    ct[109]) + ct[986]) + ct[1081]) + ct[1114]) + ct[1115]) + ct[1117]) + ct
    [1121]) + ct[1126]) + ct[1134]) + ct[1275]) + ct[1286]) + ct[1314]) + ct
    [1321]) - ct[755]) - ct[756]) - ct[766]) + ct[1407]) + ct[1410]) + ct[1421])
    + ct[1425]) + ct[1480]) + ct[1483]) + ct[1505]) + ct[1569];
  proc_control_B.t3218 = ((((((((((((((((((((((((((((((((((((((ct[57] + ct[82])
    + ct[91]) + ct[117]) + ct[124]) + ct[154]) + ct[158]) + ct[565]) + ct[617])
    + ct[685]) + ct[767]) + ct[775]) + ct[781]) + ct[817]) - ct[56]) - ct[78]) -
    ct[90]) + ct[953]) + ct[1092]) + ct[1119]) + ct[1127]) + ct[1129]) + ct[1130])
    + ct[1138]) + ct[1146]) + ct[1274]) + ct[1287]) + ct[1308]) + ct[1317]) -
    ct[768]) - ct[778]) - ct[782]) + ct[1396]) + ct[1401]) + ct[1428]) + ct[1431])
    + ct[1474]) + ct[1481]) + ct[1514]) + ct[1588];
  proc_control_B.t3219 = ((((((((((((((((((((((((((((((((((((((ct[74] + ct[82])
    + ct[108]) + ct[121]) + ct[124]) + ct[154]) + ct[162]) + ct[575]) + ct[617])
    + ct[685]) + ct[771]) + ct[775]) + ct[785]) + ct[817]) - ct[73]) - ct[78]) -
    ct[107]) + ct[953]) + ct[1098]) + ct[1119]) + ct[1127]) + ct[1129]) + ct
    [1130]) + ct[1138]) + ct[1147]) + ct[1280]) + ct[1288]) + ct[1308]) + ct
    [1317]) - ct[773]) - ct[778]) - ct[786]) + ct[1399]) + ct[1401]) + ct[1428])
    + ct[1437]) + ct[1474]) + ct[1481]) + ct[1519]) + ct[1588];
  proc_control_B.t3220 = ((((((((((((((((((((((((((((((((((((((ct[55] + ct[69])
    + ct[76]) + ct[116]) + ct[122]) + ct[129]) + ct[133]) + ct[573]) + ct[614])
    + ct[649]) + ct[787]) + ct[797]) + ct[798]) + ct[816]) - ct[54]) - ct[72]) -
    ct[75]) + ct[931]) + ct[1108]) + ct[1123]) + ct[1131]) + ct[1136]) + ct[1140])
    + ct[1143]) + ct[1152]) + ct[1279]) + ct[1289]) + ct[1307]) + ct[1311]) -
    ct[789]) - ct[796]) - ct[799]) + ct[1411]) + ct[1415]) + ct[1426]) + ct[1434])
    + ct[1472]) + ct[1475]) + ct[1528]) + ct[1589];
  proc_control_B.t3221 = ((((((((((((((((((((((((((((((((((((((ct[55] + ct[61])
    + ct[100]) + ct[116]) + ct[118]) + ct[129]) + ct[137]) + ct[576]) + ct[614])
    + ct[649]) + ct[787]) + ct[790]) + ct[806]) + ct[816]) - ct[54]) - ct[58]) -
    ct[104]) + ct[931]) + ct[1109]) + ct[1123]) + ct[1131]) + ct[1136]) + ct
    [1140]) + ct[1143]) + ct[1153]) + ct[1282]) + ct[1290]) + ct[1307]) + ct
    [1311]) - ct[789]) - ct[791]) - ct[805]) + ct[1411]) + ct[1412]) + ct[1426])
    + ct[1441]) + ct[1472]) + ct[1475]) + ct[1530]) + ct[1589];
  proc_control_B.t3245 = (ct[308] + ct[319]) + ct[350];
  tmp =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.t3245 + ct
    [467]) + ct[532]) + ct[553]) + ct[592]) + ct[609]) + ct[632]) + ct[738]) +
    ct[741]) + ct[1702]) + ct[1703]) + ct[1704]) + ct[1711]) + ct[1713]) + ct
    [1715]) + ct[1719]) + ct[1721]) + ct[1725]) + ct[1745]) + ct[1746]) + ct
    [1747]) + ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct[1761]) + ct
    [1763]) + ct[1765]) + ct[1767]) + ct[1797]) + ct[2050]) + ct[2051]) + ct
    [2052]) + ct[2058]) + ct[2061]) + ct[2062]) + ct[2065]) + ct[2066]) + ct
    [2068]) + ct[2070]) + ct[2073]) + ct[2074]) + ct[2075]) + ct[2077]) + ct
    [2079]) + ct[2161]) + ct[64]) + ct[65]) + ct[79]) + ct[95]) + ct[119]) + ct
    [123]) + ct[131]) + ct[135]) + ct[324]) + ct[325]) + ct[326]) + ct[333]) +
    ct[335]) + ct[337]) + ct[342]) + ct[355]) + ct[356]) + ct[357]) + ct[360]) +
    ct[361]) + ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) + ct[558]) +
    ct[562]) + ct[571]) + ct[580]) + ct[584]) + ct[586]) + ct[590]) + ct[593]) +
    ct[595]) + ct[599]) + ct[603]) + ct[607]) + ct[630]) + ct[660]) + ct[670]) +
    ct[682]) + ct[751]) + ct[761]) + ct[769]) + ct[774]) + ct[877]) - ct[63]) -
    ct[66]) - ct[77]) - ct[97]) + ct[1078]) + ct[1087]) + ct[1090]) + ct[1096])
    + ct[1116]) + ct[1125]) + ct[1148]) + ct[1155]) + ct[1165]) + ct[1178]) +
    ct[1271]) + ct[1272]) + ct[1278]) + ct[1283]) + ct[1291]) + ct[1293]) + ct
                    [1297]) + ct[1301]) - ct[749]) - ct[759]) - ct[770]) - ct
               [776]) + ct[1397]) + ct[1400]) + ct[1404]) + ct[1408]) + ct[1470])
         + ct[1478]) + ct[1502]) + ct[1510]) + ct[1512]) + ct[1517]) + ct[1534];
  proc_control_B.t3243 = ((((((((tmp + ct[1538]) + ct[1542]) + ct[1545]) + ct
    [1549]) + ct[1559]) + ct[1564]) + ct[1577]) + ct[1652]) + ct[1657];
  tmp_0 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[371] + ct[383]) + ct
    [414]) + ct[467]) + ct[553]) + ct[568]) + ct[592]) + ct[653]) + ct[684]) +
    ct[738]) + ct[750]) + ct[1705]) + ct[1706]) + ct[1707]) + ct[1712]) + ct
    [1716]) + ct[1717]) + ct[1722]) + ct[1723]) + ct[1727]) + ct[1745]) + ct
    [1746]) + ct[1747]) + ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct
    [1761]) + ct[1763]) + ct[1765]) + ct[1767]) + ct[1797]) + ct[2053]) + ct
    [2054]) + ct[2055]) + ct[2058]) + ct[2062]) + ct[2063]) + ct[2065]) + ct
    [2069]) + ct[2070]) + ct[2071]) + ct[2073]) + ct[2076]) + ct[2077]) + ct
    [2078]) + ct[2080]) + ct[2146]) + ct[65]) + ct[79]) + ct[83]) + ct[98]) +
    ct[119]) + ct[123]) + ct[155]) + ct[159]) + ct[327]) + ct[328]) + ct[329]) +
    ct[334]) + ct[338]) + ct[339]) + ct[343]) + ct[355]) + ct[356]) + ct[357]) +
    ct[360]) + ct[361]) + ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) +
    ct[562]) + ct[567]) + ct[571]) + ct[577]) + ct[586]) + ct[588]) + ct[590]) +
    ct[595]) + ct[597]) + ct[601]) + ct[603]) + ct[605]) + ct[618]) + ct[639]) +
    ct[661]) + ct[683]) + ct[752]) + ct[760]) + ct[792]) + ct[800]) + ct[874]) -
    ct[63]) - ct[77]) - ct[80]) - ct[96]) + ct[1082]) + ct[1085]) + ct[1103]) +
    ct[1105]) + ct[1122]) + ct[1135]) + ct[1154]) + ct[1162]) + ct[1176]) + ct
    [1180]) + ct[1272]) + ct[1276]) + ct[1278]) + ct[1281]) + ct[1293]) + ct
                   [1295]) + ct[1297]) + ct[1299]) - ct[753]) - ct[762]) - ct
              [794]) - ct[801]) + ct[1413]) + ct[1417]) + ct[1419]) + ct[1422])
        + ct[1468]) + ct[1486]) + ct[1506]) + ct[1508]) + ct[1525];
  proc_control_B.t3244 = ((((((((((tmp_0 + ct[1527]) + ct[1536]) + ct[1547]) +
    ct[1553]) + ct[1556]) + ct[1558]) + ct[1562]) + ct[1573]) + ct[1583]) + ct
    [1650]) + ct[1661];
  tmp_1 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.t3245 + ct
    [371]) + ct[383]) + ct[414]) + ct[532]) + ct[568]) + ct[609]) + ct[632]) +
    ct[653]) + ct[684]) + ct[741]) + ct[750]) + ct[1708]) + ct[1709]) + ct[1710])
    + ct[1714]) + ct[1718]) + ct[1720]) + ct[1724]) + ct[1726]) + ct[1728]) +
    ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct[1761]) + ct[1763]) + ct
    [1765]) + ct[1767]) + ct[1797]) + ct[2050]) + ct[2051]) + ct[2052]) + ct
    [2053]) + ct[2054]) + ct[2055]) + ct[2061]) + ct[2063]) + ct[2066]) + ct
    [2068]) + ct[2069]) + ct[2071]) + ct[2074]) + ct[2075]) + ct[2076]) + ct
    [2078]) + ct[2079]) + ct[2080]) + ct[2131]) + ct[64]) + ct[83]) + ct[95]) +
    ct[98]) + ct[131]) + ct[135]) + ct[155]) + ct[159]) + ct[330]) + ct[331]) +
    ct[332]) + ct[336]) + ct[340]) + ct[341]) + ct[344]) + ct[360]) + ct[361]) +
    ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) + ct[558]) + ct[567]) +
    ct[577]) + ct[580]) + ct[584]) + ct[588]) + ct[593]) + ct[597]) + ct[599]) +
    ct[601]) + ct[605]) + ct[607]) + ct[621]) + ct[633]) + ct[642]) + ct[672]) +
    ct[777]) + ct[783]) + ct[795]) + ct[804]) + ct[871]) - ct[66]) - ct[80]) -
    ct[96]) - ct[97]) + ct[1093]) + ct[1099]) + ct[1101]) + ct[1110]) + ct[1132])
    + ct[1141]) + ct[1159]) + ct[1160]) + ct[1184]) + ct[1204]) + ct[1271]) +
    ct[1276]) + ct[1281]) + ct[1283]) + ct[1291]) + ct[1295]) + ct[1299]) + ct
                   [1301]) - ct[779]) - ct[784]) - ct[793]) - ct[802]) + ct[1429])
             + ct[1432]) + ct[1435]) + ct[1439]) + ct[1476]) + ct[1484]) + ct
        [1515]) + ct[1520]) + ct[1523]) + ct[1531]) + ct[1540];
  proc_control_B.t3245 = ((((((((tmp_1 + ct[1551]) + ct[1567]) + ct[1570]) + ct
    [1571]) + ct[1579]) + ct[1581]) + ct[1585]) + ct[1654]) + ct[1659];
  proc_control_B.t3247 = ct[11] * ct[1787];
  proc_control_B.t3247_tmp = ct[9] * ct[1757];
  proc_control_B.t3247_tmp_m = ct[10] * ct[1770];
  tmp_2 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[1755] + ct[1756]) + ct
    [1758]) + ct[1760]) + ct[1762]) + ct[1764]) + ct[1766]) + ct[1768]) + ct
    [1798]) + ct[1925]) + ct[1926]) + ct[1927]) + ct[1928]) + ct[1929]) + ct
    [1931]) + ct[1932]) + ct[1933]) + ct[1934]) + ct[1936]) + ct[1937]) + ct
    [1938]) + ct[1939]) + ct[1940]) + ct[1942]) + ct[1943]) + ct[1944]) + ct
    [1945]) + ct[1946]) + ct[1948]) + ct[1949]) + ct[1950]) + ct[1951]) + ct
    [1952]) + ct[1954]) + ct[1955]) + ct[1956]) + ct[1957]) + ct[1958]) + ct
    [1959]) + ct[1972]) + ct[1973]) + ct[1986]) + ct[2001]) + ct[2135]) + ct
    [2149]) + ct[2162]) + ct[43]) + ct[44]) + ct[45]) + ct[47]) + ct[48]) + ct
    [49]) + ct[50]) + ct[51]) + ct[52]) + ct[53]) + ct[68]) + ct[70]) + ct[85])
    + ct[88]) + ct[99]) + ct[105]) + ct[111]) + ct[112]) + ct[113]) + ct[114]) +
    ct[115]) + ct[120]) + ct[125]) + ct[126]) + ct[127]) + ct[128]) + ct[132]) +
    ct[136]) + ct[156]) + ct[160]) + ct[228]) + ct[242]) + ct[247]) + ct[363]) +
    ct[364]) + ct[365]) + ct[367]) + ct[369]) + ct[372]) + ct[404]) + ct[480]) +
    ct[481]) + ct[482]) + ct[483]) + ct[484]) + ct[485]) + ct[486]) + ct[487]) +
    ct[489]) + ct[490]) + ct[491]) + ct[492]) + ct[493]) + ct[494]) + ct[495]) +
    ct[496]) + ct[497]) + ct[498]) + ct[500]) + ct[501]) + ct[502]) + ct[503]) +
    ct[504]) + ct[505]) + ct[506]) + ct[507]) + ct[508]) + ct[544]) + ct[547]) +
                 ct[548]) + ct[561]) + ct[564]) + ct[570]) + ct[574]) + ct[579])
           + ct[582]) + ct[585]) + ct[587]) + ct[589]) + ct[591]) + ct[594]) +
     ct[596]) + ct[598];
  tmp_3 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[904] + ct[905]) + ct
    [907]) + ct[908]) + ct[909]) + ct[929]) + ct[930]) + ct[952]) + ct[977]) +
    ct[1079]) + ct[1084]) + ct[1086]) + ct[1088]) + ct[1091]) + ct[1094]) + ct
    [1097]) + ct[1100]) + ct[1102]) + ct[1104]) + ct[1107]) + ct[1111]) + ct
    [1120]) + ct[1124]) + ct[1128]) + ct[1133]) + ct[1137]) + ct[1142]) + ct
    [1149]) + ct[1156]) + ct[1157]) + ct[1161]) + ct[1163]) + ct[1164]) + ct
    [1166]) + ct[1177]) + ct[1179]) + ct[1181]) + ct[1185]) + ct[1205]) + ct
    [1249]) + ct[1250]) + ct[1252]) + ct[1253]) + ct[1254]) + ct[1255]) + ct
    [1256]) + ct[1258]) + ct[1259]) + ct[1260]) + ct[1261]) + ct[1262]) + ct
    [1263]) + ct[1265]) + ct[1266]) + ct[1267]) + ct[1268]) + ct[1269]) - ct[559])
    - ct[563]) - ct[569]) - ct[572]) - ct[578]) - ct[581]) + ct[1292]) + ct[1294])
    + ct[1296]) + ct[1298]) + ct[1300]) + ct[1302]) - ct[693]) - ct[712]) - ct
    [731]) - ct[9] * ct[64]) - ct[9] * ct[83]) - ct[9] * ct[95]) - ct[9] * ct[98])
    - ct[10] * ct[65]) - ct[10] * ct[79]) - ct[10] * ct[83]) - ct[10] * ct[98])
    - ct[11] * ct[64]) - ct[11] * ct[65]) - ct[11] * ct[79]) - ct[11] * ct[95])
    + ct[1398]) + ct[1402]) + ct[1406]) + ct[1409]) + ct[1414]) + ct[1418]) +
    ct[1420]) + ct[1423]) + ct[1430]) + ct[1433]) + ct[1436]) + ct[1440]) + ct
    [1469]) + ct[1473]) + ct[1477]) + ct[1479]) + ct[1485]) + ct[1487]) - ct[10]
    * ct[752]) - ct[10] * ct[760]) - ct[11] * ct[751]) - ct[11] * ct[761]) - ct
    [11] * ct[769]) - ct[11] * ct[774]) + ct[10] * ct[1488]) + ct[9] * ct[1490])
                      + ct[11] * ct[1489]) + ct[9] * ct[1493]) + ct[11] * ct
                    [1492]) + ct[10] * ct[1494]) + ct[1504]) + ct[1507]) + ct
                [1509]) + ct[1511]) + ct[1513]) + ct[1516]) + ct[1518]) + ct
           [1522]) + ct[1524]) + ct[1526]) + ct[1529]) + ct[1533]) + ct[1535]) +
     ct[1537]) + ct[1539];
  proc_control_B.t3247 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_2
    + ct[600]) + ct[602]) + ct[604]) + ct[606]) + ct[608]) + ct[624]) + ct[626])
    + ct[635]) + ct[636]) + ct[645]) + ct[647]) + ct[662]) + ct[663]) + ct[676])
    + ct[677]) + ct[688]) + ct[689]) + ct[733]) + ct[739]) + ct[742]) + ct[9] *
    ct[66]) + ct[9] * ct[80]) + ct[9] * ct[96]) + ct[9] * ct[97]) + ct[10] * ct
    [63]) + ct[10] * ct[77]) + ct[10] * ct[80]) + ct[10] * ct[96]) + ct[11] *
    ct[63]) + ct[11] * ct[66]) + ct[11] * ct[77]) + ct[11] * ct[97]) + ct[10] *
    ct[753]) + ct[10] * ct[762]) + ct[11] * ct[749]) + ct[11] * ct[759]) + ct[11]
    * ct[770]) + ct[11] * ct[776]) + ct[11] * ct[807]) + ct[11] * ct[808]) + ct
    [10] * ct[813]) + ct[11] * ct[810]) + ct[10] * ct[814]) + ct[11] * ct[811])
    + ct[872]) + ct[875]) + ct[878]) + ct[883]) + ct[884]) + ct[885]) + ct[886])
    + ct[887]) + ct[888]) + ct[889]) + ct[891]) + ct[892]) + ct[893]) - ct[67])
                  - ct[71]) - ct[84]) - ct[86]) - ct[101]) - ct[103]) + ct[896])
            + ct[897]) + ct[898]) + ct[899]) + ct[900]) + ct[901]) + ct[902]) +
      ct[903]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_3 + ct
    [1541]) + ct[1544]) + ct[1546]) + ct[1548]) + ct[1550]) + ct[1552]) + ct
    [1555]) + ct[1557]) + ct[1560]) + ct[1561]) + ct[1563]) + ct[1566]) + ct
    [1568]) + ct[1572]) + ct[1574]) + ct[1575]) + ct[1578]) + ct[1580]) + ct
    [1582]) + ct[1584]) + ct[1586]) - ct[9] * ct[621]) - ct[9] * ct[633]) - ct[9]
    * ct[642]) - ct[9] * ct[672]) - ct[10] * ct[618]) - ct[10] * ct[639]) - ct
    [10] * ct[661]) - ct[10] * ct[683]) - ct[11] * ct[630]) - ct[11] * ct[660])
    - ct[11] * ct[670]) - ct[11] * ct[682]) + ct[10] * ct[1757] * ct[411]) +
    proc_control_B.t3247_tmp_m * ct[416]) + ct[11] * ct[1757] * ct[407]) +
    proc_control_B.t3247 * ct[416]) + ct[11] * ct[1770] * ct[419]) +
    proc_control_B.t3247 * ct[423]) + proc_control_B.t3247_tmp * ct[447]) +
    proc_control_B.t3247_tmp * ct[450]) + proc_control_B.t3247_tmp_m * ct[444])
    + proc_control_B.t3247_tmp_m * ct[448]) + proc_control_B.t3247 * ct[442]) +
    proc_control_B.t3247 * ct[445]) + ct[1643]) + ct[1645]) + ct[1646]) + ct
                    [1647]) + ct[1648]) + ct[1649]) + ct[1651]) + ct[1653]) +
               ct[1656]) + ct[1658]) + ct[1660]) + ct[1662]) + ct[9] * ct[1770] *
           ct[862]) + ct[9] * ct[1787] * ct[865]) + proc_control_B.t3247_tmp_m *
         ct[859]) + ct[10] * ct[1787] * ct[866]) + proc_control_B.t3247 * ct[859])
      + proc_control_B.t3247 * ct[863]));
  std::memset(&Anq[0], 0, 39U * sizeof(real_T));
  Anq[39] = -ct[1993] + ct[2013];
  Anq[40] = ct[1968] - ct[2004];
  Anq[41] = -ct[1962] + ct[1980];
  Anq[42] = 0.0;
  Anq[43] = ct[246];
  Anq[44] = ct[248];
  Anq[45] = ct[249];
  proc_control_B.t3247_tmp = ct[13] * ct[16] * ct[1817];
  proc_control_B.t3247_tmp_m = ct[12] * ct[16] * ct[1817];
  Anq[46] = (((-proc_control_B.t3179 * proc_control_B.t3215 *
               proc_control_B.t3247 - proc_control_B.t3180 *
               proc_control_B.t3237 * proc_control_B.t3247) -
              proc_control_B.t3196 * proc_control_B.t3232 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_m * proc_control_B.t3221 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3245 * proc_control_B.t3247 * 2.0;
  Anq[47] = (((-proc_control_B.t3180 * proc_control_B.t3213 *
               proc_control_B.t3247 + proc_control_B.t3179 *
               proc_control_B.t3239 * proc_control_B.t3247) +
              proc_control_B.t3196 * proc_control_B.t3230 * proc_control_B.t3247)
             - proc_control_B.t3247_tmp * proc_control_B.t3220 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_m *
    proc_control_B.t3244 * proc_control_B.t3247 * 2.0;
  Anq[48] = (((-proc_control_B.t3196 * proc_control_B.t3210 *
               proc_control_B.t3247 + proc_control_B.t3180 *
               proc_control_B.t3228 * proc_control_B.t3247) -
              proc_control_B.t3179 * proc_control_B.t3235 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_m * proc_control_B.t3216 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_tmp = ct[1] * ct[5];
  proc_control_B.Anq_tmp = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_j = ct[0] * ct[9];
  proc_control_B.Anq_tmp_h = ct[6] * ct[7];
  proc_control_B.Anq_tmp_n = proc_control_B.Anq_tmp_h * ct[1856] * ct[81];
  proc_control_B.Anq_tmp_h = proc_control_B.Anq_tmp_h * ct[9] * ct[10] * ct[1841]
    * ct[81];
  Anq_tmp_2 = proc_control_B.t3180 * proc_control_B.t3247;
  proc_control_B.Anq_tmp =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[499] + ct[815]) + ct
    [938]) + ct[1106]) + ct[1664]) - ct[1668]) - ct[1738]) + ct[1739]) - ct[1835])
    + ct[1836]) - ct[1850]) + ct[1851]) - ct[1864]) + ct[1865]) - ct[1879]) -
    ct[1889]) + ct[1890]) + ct[1905]) + ct[1912]) + ct[1918]) - ct[2130]) - ct
    [2133]) - ct[31]) - ct[32]) + ct[273]) - ct[274]) + ct[281]) - ct[287]) +
    ct[293]) + ct[300]) + ct[305]) + ct[306]) + ct[692]) + ct[708]) + ct[719]) +
                      ct[721]) - ct[734]) + ct[743]) + ct[744]) + ct[838]) - ct
                 [842]) - ct[847]) - ct[1223]) - ct[1228]) + ct[1236]) + ct[0] *
            ct[1848] * ct[81]) + proc_control_B.Anq_tmp_n) +
          proc_control_B.Anq_tmp * ct[10] * ct[92]) + proc_control_B.Anq_tmp *
         ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct[92])
       + proc_control_B.Anq_tmp_j * ct[10] * ct[17] * ct[81]) +
      proc_control_B.Anq_tmp_j * ct[11] * ct[17] * ct[81]) + ct[0] * ct[10] *
     ct[11] * ct[17] * ct[81]) + proc_control_B.Anq_tmp_h;
  Anq[49] = (((proc_control_B.t3196 * proc_control_B.t3224 *
               proc_control_B.t3247 - proc_control_B.t3179 *
               proc_control_B.t3242 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp * Anq_tmp_2) - proc_control_B.t3247_tmp *
             proc_control_B.t3214 * proc_control_B.t3247 * 2.0) -
    proc_control_B.t3247_tmp_m * proc_control_B.t3238 * proc_control_B.t3247 *
    2.0;
  proc_control_B.Anq_tmp_tmp = ct[1] * ct[2];
  proc_control_B.Anq_tmp_j = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_c = ct[3] * ct[9];
  proc_control_B.Anq_tmp_m = ct[7] * ct[8];
  Anq_tmp_tmp = ct[3] * ct[4];
  Anq_tmp = Anq_tmp_tmp * ct[9];
  Anq_tmp_0 = ct[2] * ct[9];
  Anq_tmp_1 = proc_control_B.Anq_tmp_m * ct[1856] * ct[60];
  proc_control_B.Anq_tmp_m = proc_control_B.Anq_tmp_m * ct[10] * ct[11] * ct
    [1841] * ct[60];
  proc_control_B.Anq_tmp_j =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[772] + ct[879]) + ct
    [1044]) + ct[1626]) - ct[1629]) - ct[1731]) + ct[1732]) + ct[1749]) - ct
    [1829]) + ct[1830]) - ct[1843]) + ct[1844]) - ct[1858]) + ct[1859]) + ct
    [1872]) + ct[1875]) - ct[1877]) - ct[1881]) + ct[1892]) + ct[1899]) - ct
    [2145]) - ct[2148]) - ct[35]) - ct[36]) + ct[265]) + ct[268]) - ct[279]) +
    ct[280]) - ct[290]) + ct[294]) + ct[303]) + ct[304]) + ct[698]) + ct[699]) +
                       ct[711]) + ct[727]) - ct[736]) + ct[745]) + ct[746]) -
                  ct[833]) - ct[840]) + ct[843]) - ct[1219]) - ct[1225]) + ct
             [1232]) + ct[3] * ct[1848] * ct[60]) + Anq_tmp_1) +
          proc_control_B.Anq_tmp_j * ct[10] * ct[92]) + proc_control_B.Anq_tmp_j
         * ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct
        [92]) + proc_control_B.Anq_tmp_c * ct[10] * ct[17] * ct[60]) +
      proc_control_B.Anq_tmp_c * ct[11] * ct[17] * ct[60]) + ct[3] * ct[10] *
     ct[11] * ct[17] * ct[60]) + proc_control_B.Anq_tmp_m;
  proc_control_B.Anq_tmp_h +=
    (((((((((((((((((((((((((((((((((((((((((((((((((((ct[510] + ct[837]) + ct
    [979]) + ct[1139]) + ct[1670]) - ct[1671]) - ct[1741]) + ct[1742]) - ct[1838])
    + ct[1839]) - ct[1853]) + ct[1854]) - ct[1867]) + ct[1868]) - ct[1884]) -
    ct[1888]) + ct[1890]) + ct[1906]) + ct[1914]) + ct[1919]) - ct[2140]) - ct
    [2142]) - ct[31]) - ct[32]) + ct[270]) - ct[274]) + ct[286]) - ct[287]) +
    ct[296]) + ct[299]) + ct[305]) + ct[306]) + ct[694]) + ct[709]) + ct[722]) +
                     ct[723]) - ct[734]) + ct[743]) + ct[744]) + ct[838]) - ct
                [841]) - ct[849]) - ct[1224]) - ct[1230]) + ct[1236]) + ct[2] *
           ct[1848] * ct[81]) + proc_control_B.Anq_tmp_n) + Anq_tmp * ct[10] *
         ct[92]) + Anq_tmp * ct[11] * ct[92]) + Anq_tmp_tmp * ct[10] * ct[11] *
       ct[92]) + Anq_tmp_0 * ct[10] * ct[17] * ct[81]) + Anq_tmp_0 * ct[11] *
     ct[17] * ct[81]) + ct[2] * ct[10] * ct[11] * ct[17] * ct[81];
  proc_control_B.Anq_tmp_n = proc_control_B.t3179 * proc_control_B.t3247;
  Anq[50] = ((proc_control_B.t3247_tmp_m * proc_control_B.t3212 *
              proc_control_B.t3247 * 2.0 + -proc_control_B.t3196 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_j) -
             proc_control_B.t3247_tmp * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (-proc_control_B.t3180 *
    proc_control_B.t3241 * proc_control_B.t3247 + proc_control_B.Anq_tmp_h *
    proc_control_B.Anq_tmp_n);
  proc_control_B.Anq_tmp_tmp = ct[0] * ct[4];
  proc_control_B.Anq_tmp_c = proc_control_B.Anq_tmp_tmp * ct[9];
  Anq_tmp = ct[5] * ct[9];
  proc_control_B.Anq_tmp_c =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[803] + ct[895]) + ct
    [1083]) + ct[1644]) - ct[1655]) - ct[1734]) + ct[1735]) + ct[1750]) - ct
    [1832]) + ct[1833]) - ct[1846]) + ct[1847]) - ct[1861]) + ct[1862]) + ct
    [1873]) + ct[1875]) - ct[1876]) - ct[1885]) + ct[1893]) + ct[1900]) - ct
    [2154]) - ct[2158]) - ct[35]) - ct[36]) + ct[264]) + ct[271]) - ct[279]) +
    ct[285]) - ct[290]) + ct[291]) + ct[303]) + ct[304]) + ct[700]) + ct[702]) +
                       ct[713]) + ct[728]) - ct[736]) + ct[745]) + ct[746]) -
                  ct[835]) - ct[839]) + ct[843]) - ct[1221]) - ct[1226]) + ct
             [1232]) + ct[5] * ct[1848] * ct[60]) + Anq_tmp_1) +
          proc_control_B.Anq_tmp_c * ct[10] * ct[92]) + proc_control_B.Anq_tmp_c
         * ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct
        [92]) + Anq_tmp * ct[10] * ct[17] * ct[60]) + Anq_tmp * ct[11] * ct[17] *
      ct[60]) + ct[5] * ct[10] * ct[11] * ct[17] * ct[60]) +
    proc_control_B.Anq_tmp_m;
  Anq[51] = (((-proc_control_B.t3179 * proc_control_B.t3225 *
               proc_control_B.t3247 + proc_control_B.t3196 *
               proc_control_B.t3240 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_c * Anq_tmp_2) + proc_control_B.t3247_tmp_m
             * proc_control_B.t3231 * proc_control_B.t3247 * 2.0) +
    proc_control_B.t3247_tmp * proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[52] = ct[1987] + ct[2015];
  Anq[53] = (ct[1962] - ct[2023]) - ct[12] * ct[2164] * 4.0;
  Anq[54] = (ct[1968] + ct[1999]) - ct[12] * ct[2165] * 4.0;
  Anq[55] = ct[1685];
  Anq[56] = 0.0;
  Anq[57] = ct[1687];
  Anq[58] = ct[248];
  proc_control_B.Anq_tmp_m = ct[14] * ct[16] * ct[1817];
  Anq_tmp = ct[15] * ct[16] * ct[1817];
  Anq[59] = ((((-proc_control_B.t3203 * proc_control_B.t3215 *
                proc_control_B.t3247 + proc_control_B.t3201 *
                proc_control_B.t3232 * proc_control_B.t3247) +
               proc_control_B.t3198 * proc_control_B.t3237 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp_m *
              proc_control_B.t3219 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_m * proc_control_B.t3245 *
             proc_control_B.t3247 * 2.0) + Anq_tmp * proc_control_B.t3221 *
    proc_control_B.t3247 * 2.0;
  Anq[60] = ((((proc_control_B.t3198 * proc_control_B.t3213 *
                proc_control_B.t3247 - proc_control_B.t3201 *
                proc_control_B.t3230 * proc_control_B.t3247) +
               proc_control_B.t3203 * proc_control_B.t3239 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp_m *
              proc_control_B.t3217 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_m * proc_control_B.t3220 *
             proc_control_B.t3247 * 2.0) + Anq_tmp * proc_control_B.t3244 *
    proc_control_B.t3247 * 2.0;
  Anq[61] = ((((proc_control_B.t3201 * proc_control_B.t3210 *
                proc_control_B.t3247 - proc_control_B.t3198 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3203 * proc_control_B.t3235 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_m *
              proc_control_B.t3218 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp_m * proc_control_B.t3243 *
             proc_control_B.t3247 * 4.0) + Anq_tmp * proc_control_B.t3216 *
    proc_control_B.t3247 * 2.0;
  Anq_tmp_0 = proc_control_B.t3198 * proc_control_B.t3247;
  Anq[62] = ((((-proc_control_B.t3201 * proc_control_B.t3224 *
                proc_control_B.t3247 - proc_control_B.t3203 *
                proc_control_B.t3242 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp * Anq_tmp_0) + proc_control_B.Anq_tmp_m *
              proc_control_B.t3214 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp_m * proc_control_B.t3234 *
             proc_control_B.t3247 * 4.0) - Anq_tmp * proc_control_B.t3238 *
    proc_control_B.t3247 * 2.0;
  Anq[63] = (((proc_control_B.t3247_tmp_m * proc_control_B.t3229 *
               proc_control_B.t3247 * 4.0 + proc_control_B.t3201 *
               proc_control_B.t3247 * proc_control_B.Anq_tmp_j) +
              proc_control_B.Anq_tmp_m * proc_control_B.t3236 *
              proc_control_B.t3247 * 2.0) + Anq_tmp * proc_control_B.t3212 *
             proc_control_B.t3247 * 2.0) + (proc_control_B.t3203 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_h + proc_control_B.t3198 *
    proc_control_B.t3241 * proc_control_B.t3247);
  Anq[64] = ((((-proc_control_B.t3203 * proc_control_B.t3225 *
                proc_control_B.t3247 - proc_control_B.t3201 *
                proc_control_B.t3240 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_c * Anq_tmp_0) +
              proc_control_B.t3247_tmp_m * proc_control_B.t3211 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_m *
             proc_control_B.t3233 * proc_control_B.t3247 * 2.0) + Anq_tmp *
    proc_control_B.t3231 * proc_control_B.t3247 * 2.0;
  Anq[65] = (ct[1980] + ct[2023]) - ct[13] * ct[2163] * 4.0;
  Anq[66] = ct[1953] + ct[2015];
  Anq[67] = (-ct[1974] + ct[1993]) - ct[13] * ct[2165] * 4.0;
  Anq[68] = ct[1686];
  Anq[69] = ct[249];
  Anq[70] = 0.0;
  Anq[71] = ct[1685];
  Anq[72] = ((((-proc_control_B.t3199 * proc_control_B.t3215 *
                proc_control_B.t3247 - proc_control_B.t3200 *
                proc_control_B.t3232 * proc_control_B.t3247) +
               proc_control_B.t3202 * proc_control_B.t3237 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp *
              proc_control_B.t3219 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_m * proc_control_B.t3221 *
             proc_control_B.t3247 * 2.0) - Anq_tmp * proc_control_B.t3245 *
    proc_control_B.t3247 * 2.0;
  Anq[73] = ((((proc_control_B.t3202 * proc_control_B.t3213 *
                proc_control_B.t3247 + proc_control_B.t3200 *
                proc_control_B.t3230 * proc_control_B.t3247) +
               proc_control_B.t3199 * proc_control_B.t3239 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp *
              proc_control_B.t3217 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_m * proc_control_B.t3244 *
             proc_control_B.t3247 * 2.0) - Anq_tmp * proc_control_B.t3220 *
    proc_control_B.t3247 * 2.0;
  Anq[74] = ((((-proc_control_B.t3200 * proc_control_B.t3210 *
                proc_control_B.t3247 - proc_control_B.t3202 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3199 * proc_control_B.t3235 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_m *
              proc_control_B.t3216 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp * proc_control_B.t3243 *
             proc_control_B.t3247 * 4.0) - Anq_tmp * proc_control_B.t3218 *
    proc_control_B.t3247 * 2.0;
  Anq_tmp_0 = proc_control_B.t3202 * proc_control_B.t3247;
  Anq[75] = ((((proc_control_B.t3200 * proc_control_B.t3224 *
                proc_control_B.t3247 - proc_control_B.t3199 *
                proc_control_B.t3242 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp * Anq_tmp_0) - proc_control_B.t3247_tmp *
              proc_control_B.t3234 * proc_control_B.t3247 * 4.0) -
             proc_control_B.Anq_tmp_m * proc_control_B.t3238 *
             proc_control_B.t3247 * 2.0) - Anq_tmp * proc_control_B.t3214 *
    proc_control_B.t3247 * 2.0;
  Anq[76] = (((proc_control_B.Anq_tmp_m * proc_control_B.t3212 *
               proc_control_B.t3247 * 2.0 + -proc_control_B.t3200 *
               proc_control_B.t3247 * proc_control_B.Anq_tmp_j) +
              proc_control_B.t3247_tmp * proc_control_B.t3229 *
              proc_control_B.t3247 * 4.0) - Anq_tmp * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (proc_control_B.t3199 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_h + proc_control_B.t3202 *
    proc_control_B.t3241 * proc_control_B.t3247);
  Anq[77] = ((((-proc_control_B.t3199 * proc_control_B.t3225 *
                proc_control_B.t3247 + proc_control_B.t3200 *
                proc_control_B.t3240 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_c * Anq_tmp_0) + proc_control_B.t3247_tmp *
              proc_control_B.t3211 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_m * proc_control_B.t3231 *
             proc_control_B.t3247 * 2.0) + Anq_tmp * proc_control_B.t3233 *
    proc_control_B.t3247 * 2.0;
  Anq[78] = (-ct[1999] + ct[2004]) - ct[14] * ct[2163] * 4.0;
  Anq[79] = (ct[1974] + ct[2013]) - ct[14] * ct[2164] * 4.0;
  Anq[80] = ct[1953] + ct[1987];
  Anq[81] = ct[1687];
  Anq[82] = ct[1686];
  Anq[83] = ct[246];
  Anq[84] = 0.0;
  Anq[85] = (((-proc_control_B.t3180 * proc_control_B.t3215 *
               proc_control_B.t3247 + proc_control_B.t3179 *
               proc_control_B.t3237 * proc_control_B.t3247) -
              proc_control_B.t3197 * proc_control_B.t3232 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp * proc_control_B.t3221 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_m *
    proc_control_B.t3245 * proc_control_B.t3247 * 2.0;
  Anq[86] = (((proc_control_B.t3179 * proc_control_B.t3213 *
               proc_control_B.t3247 + proc_control_B.t3180 *
               proc_control_B.t3239 * proc_control_B.t3247) +
              proc_control_B.t3197 * proc_control_B.t3230 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_m * proc_control_B.t3220 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp *
    proc_control_B.t3244 * proc_control_B.t3247 * 2.0;
  Anq[87] = (((-proc_control_B.t3179 * proc_control_B.t3228 *
               proc_control_B.t3247 - proc_control_B.t3197 *
               proc_control_B.t3210 * proc_control_B.t3247) -
              proc_control_B.t3180 * proc_control_B.t3235 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp * proc_control_B.t3216 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_m *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  Anq[88] = (((proc_control_B.t3197 * proc_control_B.t3224 *
               proc_control_B.t3247 - proc_control_B.t3180 *
               proc_control_B.t3242 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_n) +
             proc_control_B.t3247_tmp_m * proc_control_B.t3214 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  Anq[89] = ((proc_control_B.t3247_tmp * proc_control_B.t3212 *
              proc_control_B.t3247 * 2.0 + -proc_control_B.t3197 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_j) +
             proc_control_B.t3247_tmp_m * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (proc_control_B.t3179 *
    proc_control_B.t3241 * proc_control_B.t3247 + proc_control_B.Anq_tmp_h *
    Anq_tmp_2);
  Anq[90] = (((-proc_control_B.t3180 * proc_control_B.t3225 *
               proc_control_B.t3247 + proc_control_B.t3197 *
               proc_control_B.t3240 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_c * proc_control_B.Anq_tmp_n) +
             proc_control_B.t3247_tmp * proc_control_B.t3231 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_m *
    proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[91] = (ct[1491] + ct[1498]) + 1.0;
  Anq[92] = ct[1921] + ct[1947];
  Anq[93] = ct[1924] - ct[1941];
  Anq[94] = 0.0;
  Anq[95] = 0.0;
  Anq[96] = 0.0;
  Anq[97] = 0.0;
  proc_control_B.t3247_tmp = (ct[1744] - ct[39]) + ct[1451];
  proc_control_B.t3247_tmp_m = ct[19] * ct[1521];
  proc_control_B.Anq_tmp_n = ct[20] * ct[1521];
  Anq_tmp_2 = ct[17] * ct[2040];
  Anq[98] = ((((-proc_control_B.t3237 * proc_control_B.t3247 *
                proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3245 *
                proc_control_B.t3247) + proc_control_B.t3182 *
               proc_control_B.t3232 * proc_control_B.t3247) + Anq_tmp_2 *
              proc_control_B.t3215 * proc_control_B.t3247) -
             proc_control_B.t3247_tmp_m * proc_control_B.t3219 *
             proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
    proc_control_B.t3221 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_m = ct[92] * ct[2040];
  Anq[99] = ((((-proc_control_B.t3213 * proc_control_B.t3247 *
                proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3220 *
                proc_control_B.t3247) - proc_control_B.t3182 *
               proc_control_B.t3230 * proc_control_B.t3247) -
              proc_control_B.t3247_tmp_m * proc_control_B.t3217 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
             proc_control_B.t3244 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_m * proc_control_B.t3239 * proc_control_B.t3247;
  Anq[100] = ((((proc_control_B.t3228 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3218 *
                 proc_control_B.t3247) + proc_control_B.t3182 *
                proc_control_B.t3210 * proc_control_B.t3247) + Anq_tmp_2 *
               proc_control_B.t3235 * proc_control_B.t3247) -
              proc_control_B.t3247_tmp_m * proc_control_B.t3243 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
    proc_control_B.t3216 * proc_control_B.t3247;
  Anq_tmp = proc_control_B.t3247_tmp * proc_control_B.t3247;
  Anq[101] = ((((proc_control_B.Anq_tmp * Anq_tmp - ct[1247] *
                 proc_control_B.t3214 * proc_control_B.t3247) -
                proc_control_B.t3182 * proc_control_B.t3224 *
                proc_control_B.t3247) + Anq_tmp_2 * proc_control_B.t3242 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp_m *
              proc_control_B.t3234 * proc_control_B.t3247) -
    proc_control_B.Anq_tmp_n * proc_control_B.t3238 * proc_control_B.t3247;
  Anq[102] = ((((-proc_control_B.t3241 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3236 *
                 proc_control_B.t3247) + proc_control_B.t3182 *
                proc_control_B.t3247 * proc_control_B.Anq_tmp_j) +
               proc_control_B.t3247_tmp_m * proc_control_B.t3229 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
              proc_control_B.t3212 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_m * proc_control_B.t3247 * proc_control_B.Anq_tmp_h;
  Anq[103] = ((((ct[1247] * proc_control_B.t3233 * proc_control_B.t3247 +
                 proc_control_B.Anq_tmp_c * Anq_tmp) - proc_control_B.t3182 *
                proc_control_B.t3240 * proc_control_B.t3247) + Anq_tmp_2 *
               proc_control_B.t3225 * proc_control_B.t3247) +
              proc_control_B.t3247_tmp_m * proc_control_B.t3211 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
    proc_control_B.t3231 * proc_control_B.t3247;
  Anq[104] = ct[1921] - ct[1947];
  Anq[105] = (ct[1482] + ct[1498]) + 1.0;
  Anq[106] = ct[1930] + ct[1935];
  Anq[107] = 0.0;
  Anq[108] = 0.0;
  Anq[109] = 0.0;
  Anq[110] = 0.0;
  proc_control_B.t3247_tmp = (ct[1729] - ct[38]) + ct[1445];
  proc_control_B.t3247_tmp_m = ct[17] * ct[2039];
  proc_control_B.Anq_tmp_n = ct[18] * ct[1532];
  Anq_tmp = ct[20] * ct[1532];
  Anq[111] = ((((proc_control_B.t3232 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3221 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3215 * proc_control_B.t3247) +
               proc_control_B.t3247_tmp_m * proc_control_B.t3237 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
              proc_control_B.t3219 * proc_control_B.t3247) - Anq_tmp *
    proc_control_B.t3245 * proc_control_B.t3247;
  Anq[112] = ((((-proc_control_B.t3230 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3244 *
                 proc_control_B.t3247) + proc_control_B.t3183 *
                proc_control_B.t3239 * proc_control_B.t3247) +
               proc_control_B.t3247_tmp_m * proc_control_B.t3213 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_n *
              proc_control_B.t3217 * proc_control_B.t3247) - Anq_tmp *
    proc_control_B.t3220 * proc_control_B.t3247;
  Anq_tmp_0 = ct[92] * ct[2039];
  Anq[113] = ((((proc_control_B.t3210 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3216 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3235 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_n * proc_control_B.t3243 *
               proc_control_B.t3247) - Anq_tmp * proc_control_B.t3218 *
              proc_control_B.t3247) + Anq_tmp_0 * proc_control_B.t3228 *
    proc_control_B.t3247;
  Anq_tmp_1 = Anq_tmp_0 * proc_control_B.t3247;
  Anq[114] = ((((-proc_control_B.t3224 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp + ct[1248] * proc_control_B.t3238 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3242 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_n * proc_control_B.t3234 *
               proc_control_B.t3247) - Anq_tmp * proc_control_B.t3214 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp * Anq_tmp_1;
  Anq[115] = (((proc_control_B.t3183 * proc_control_B.t3247 *
                proc_control_B.Anq_tmp_h + proc_control_B.t3247_tmp_m *
                proc_control_B.t3241 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_n * proc_control_B.t3229 *
               proc_control_B.t3247) - Anq_tmp * proc_control_B.t3236 *
              proc_control_B.t3247) + (proc_control_B.t3247_tmp *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_j - ct[1248] *
    proc_control_B.t3212 * proc_control_B.t3247);
  Anq[116] = ((((-proc_control_B.t3240 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3231 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3225 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_n * proc_control_B.t3211 *
               proc_control_B.t3247) + Anq_tmp * proc_control_B.t3233 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_c * Anq_tmp_1;
  Anq[117] = ct[1924] + ct[1941];
  Anq[118] = ct[1930] - ct[1935];
  Anq[119] = (ct[1482] + ct[1491]) + 1.0;
  Anq[120] = 0.0;
  Anq[121] = 0.0;
  Anq[122] = 0.0;
  Anq[123] = 0.0;
  proc_control_B.t3247_tmp = (ct[1736] - ct[42]) + ct[1442];
  proc_control_B.Anq_tmp_n = ct[18] * ct[1543];
  Anq_tmp = ct[19] * ct[1543];
  Anq_tmp_1 = ct[92] * ct[2038];
  Anq[124] = ((((-proc_control_B.t3215 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3219 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3237 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_n * proc_control_B.t3221 *
               proc_control_B.t3247) + Anq_tmp * proc_control_B.t3245 *
              proc_control_B.t3247) + Anq_tmp_1 * proc_control_B.t3232 *
    proc_control_B.t3247;
  proc_control_B.t3179 = ct[17] * ct[2038];
  Anq[125] = ((((proc_control_B.t3239 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3217 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3213 * proc_control_B.t3247) +
               proc_control_B.t3179 * proc_control_B.t3230 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_n *
              proc_control_B.t3244 * proc_control_B.t3247) + Anq_tmp *
    proc_control_B.t3220 * proc_control_B.t3247;
  Anq[126] = ((((-proc_control_B.t3235 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3243 *
                 proc_control_B.t3247) + proc_control_B.t3181 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_n * proc_control_B.t3216 *
               proc_control_B.t3247) + Anq_tmp * proc_control_B.t3218 *
              proc_control_B.t3247) + Anq_tmp_1 * proc_control_B.t3210 *
    proc_control_B.t3247;
  proc_control_B.t3180 = proc_control_B.t3181 * proc_control_B.t3247;
  Anq[127] = ((((-proc_control_B.t3242 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3234 *
                 proc_control_B.t3247) + proc_control_B.Anq_tmp *
                proc_control_B.t3180) + proc_control_B.t3179 *
               proc_control_B.t3224 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_n * proc_control_B.t3238 *
              proc_control_B.t3247) + Anq_tmp * proc_control_B.t3214 *
    proc_control_B.t3247;
  Anq[128] = ((((proc_control_B.t3247_tmp * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_h + ct[1251] * proc_control_B.t3229 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3241 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_n * proc_control_B.t3212 *
               proc_control_B.t3247) + Anq_tmp * proc_control_B.t3236 *
              proc_control_B.t3247) + Anq_tmp_1 * proc_control_B.t3247 *
    proc_control_B.Anq_tmp_j;
  Anq[129] = ((((-proc_control_B.t3225 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp + ct[1251] * proc_control_B.t3211 *
                 proc_control_B.t3247) + proc_control_B.Anq_tmp_c *
                proc_control_B.t3180) + proc_control_B.t3179 *
               proc_control_B.t3240 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_n * proc_control_B.t3231 *
              proc_control_B.t3247) - Anq_tmp * proc_control_B.t3233 *
    proc_control_B.t3247;
  Anq[130] = 0.0;
  Anq[131] = 0.0;
  Anq[132] = 0.0;
  Anq[133] = ct[1680];
  Anq[134] = ct[243];
  Anq[135] = ct[241];
  Anq[136] = ct[1681];
  Anq[137] = ((((-proc_control_B.t3186 * proc_control_B.t3221 *
                 proc_control_B.t3247 - ct[1665] * proc_control_B.t3215 *
                 proc_control_B.t3247) + proc_control_B.t3191 *
                proc_control_B.t3219 * proc_control_B.t3247) +
               proc_control_B.t3208 * proc_control_B.t3232 *
               proc_control_B.t3247) + proc_control_B.t3206 *
              proc_control_B.t3237 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_m * proc_control_B.t3245 * proc_control_B.t3247;
  Anq[138] = ((((proc_control_B.t3191 * proc_control_B.t3217 *
                 proc_control_B.t3247 + proc_control_B.t3206 *
                 proc_control_B.t3213 * proc_control_B.t3247) -
                proc_control_B.t3186 * proc_control_B.t3244 *
                proc_control_B.t3247) + ct[1665] * proc_control_B.t3239 *
               proc_control_B.t3247) - proc_control_B.t3208 *
              proc_control_B.t3230 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_m * proc_control_B.t3220 * proc_control_B.t3247;
  Anq[139] = ((((-proc_control_B.t3186 * proc_control_B.t3216 *
                 proc_control_B.t3247 + proc_control_B.t3208 *
                 proc_control_B.t3210 * proc_control_B.t3247) - ct[1665] *
                proc_control_B.t3235 * proc_control_B.t3247) +
               proc_control_B.t3191 * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.t3206 *
              proc_control_B.t3228 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_m * proc_control_B.t3218 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = proc_control_B.t3206 * proc_control_B.t3247;
  Anq[140] = ((((proc_control_B.t3186 * proc_control_B.t3238 *
                 proc_control_B.t3247 + proc_control_B.t3191 *
                 proc_control_B.t3234 * proc_control_B.t3247) -
                proc_control_B.t3208 * proc_control_B.t3224 *
                proc_control_B.t3247) - ct[1665] * proc_control_B.t3242 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp *
              proc_control_B.t3247_tmp) + proc_control_B.Anq_tmp_m *
    proc_control_B.t3214 * proc_control_B.t3247;
  Anq[141] = (((-proc_control_B.t3186 * proc_control_B.t3212 *
                proc_control_B.t3247 - proc_control_B.t3191 *
                proc_control_B.t3229 * proc_control_B.t3247) +
               proc_control_B.t3206 * proc_control_B.t3241 *
               proc_control_B.t3247) + ct[1665] * proc_control_B.t3247 *
              proc_control_B.Anq_tmp_h) + (proc_control_B.t3208 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_j + proc_control_B.Anq_tmp_m *
    proc_control_B.t3236 * proc_control_B.t3247);
  Anq[142] = ((((-proc_control_B.t3191 * proc_control_B.t3211 *
                 proc_control_B.t3247 - proc_control_B.t3186 *
                 proc_control_B.t3231 * proc_control_B.t3247) - ct[1665] *
                proc_control_B.t3225 * proc_control_B.t3247) -
               proc_control_B.t3208 * proc_control_B.t3240 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_c *
              proc_control_B.t3247_tmp) + Anq_tmp_2 * proc_control_B.t3233 *
    proc_control_B.t3247;
  Anq[143] = 0.0;
  Anq[144] = 0.0;
  Anq[145] = 0.0;
  Anq[146] = ct[1681];
  Anq[147] = ct[1682];
  Anq[148] = ct[243];
  Anq[149] = ct[227];
  Anq[150] = ((((-proc_control_B.t3184 * proc_control_B.t3219 *
                 proc_control_B.t3247 - proc_control_B.t3209 *
                 proc_control_B.t3215 * proc_control_B.t3247) - ct[1666] *
                proc_control_B.t3237 * proc_control_B.t3247) -
               proc_control_B.t3204 * proc_control_B.t3232 *
               proc_control_B.t3247) + proc_control_B.t3192 *
              proc_control_B.t3245 * proc_control_B.t3247) + Anq_tmp_0 *
    proc_control_B.t3221 * proc_control_B.t3247;
  Anq[151] = ((((-proc_control_B.t3184 * proc_control_B.t3217 *
                 proc_control_B.t3247 - ct[1666] * proc_control_B.t3213 *
                 proc_control_B.t3247) + proc_control_B.t3192 *
                proc_control_B.t3220 * proc_control_B.t3247) +
               proc_control_B.t3204 * proc_control_B.t3230 *
               proc_control_B.t3247) + proc_control_B.t3209 *
              proc_control_B.t3239 * proc_control_B.t3247) + Anq_tmp_0 *
    proc_control_B.t3244 * proc_control_B.t3247;
  Anq[152] = ((((proc_control_B.t3192 * proc_control_B.t3218 *
                 proc_control_B.t3247 - proc_control_B.t3204 *
                 proc_control_B.t3210 * proc_control_B.t3247) + ct[1666] *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3184 * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.t3209 *
              proc_control_B.t3235 * proc_control_B.t3247) + Anq_tmp_0 *
    proc_control_B.t3216 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = ct[1666] * proc_control_B.t3247;
  Anq[153] = ((((proc_control_B.t3192 * proc_control_B.t3214 *
                 proc_control_B.t3247 - proc_control_B.t3184 *
                 proc_control_B.t3234 * proc_control_B.t3247) +
                proc_control_B.t3204 * proc_control_B.t3224 *
                proc_control_B.t3247) - proc_control_B.t3209 *
               proc_control_B.t3242 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp * proc_control_B.t3247_tmp) +
    proc_control_B.t3247_tmp_m * proc_control_B.t3238 * proc_control_B.t3247;
  Anq[154] = (((proc_control_B.t3184 * proc_control_B.t3229 *
                proc_control_B.t3247 + proc_control_B.t3192 *
                proc_control_B.t3236 * proc_control_B.t3247) - ct[1666] *
               proc_control_B.t3241 * proc_control_B.t3247) +
              proc_control_B.t3209 * proc_control_B.t3247 *
              proc_control_B.Anq_tmp_h) + (-proc_control_B.t3204 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_j + Anq_tmp_0 *
    proc_control_B.t3212 * proc_control_B.t3247);
  Anq[155] = ((((proc_control_B.t3184 * proc_control_B.t3211 *
                 proc_control_B.t3247 - proc_control_B.t3192 *
                 proc_control_B.t3233 * proc_control_B.t3247) -
                proc_control_B.t3209 * proc_control_B.t3225 *
                proc_control_B.t3247) + proc_control_B.t3204 *
               proc_control_B.t3240 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_c * proc_control_B.t3247_tmp) + Anq_tmp_0 *
    proc_control_B.t3231 * proc_control_B.t3247;
  Anq[156] = 0.0;
  Anq[157] = 0.0;
  Anq[158] = 0.0;
  Anq[159] = ct[1682];
  Anq[160] = ct[237];
  Anq[161] = ct[1680];
  Anq[162] = ct[243];
  Anq[163] = ((((proc_control_B.t3190 * proc_control_B.t3221 *
                 proc_control_B.t3247 + proc_control_B.t3205 *
                 proc_control_B.t3215 * proc_control_B.t3247) + ct[1667] *
                proc_control_B.t3232 * proc_control_B.t3247) -
               proc_control_B.t3185 * proc_control_B.t3245 *
               proc_control_B.t3247) - proc_control_B.t3207 *
              proc_control_B.t3237 * proc_control_B.t3247) + Anq_tmp_1 *
    proc_control_B.t3219 * proc_control_B.t3247;
  Anq[164] = ((((-proc_control_B.t3185 * proc_control_B.t3220 *
                 proc_control_B.t3247 - proc_control_B.t3207 *
                 proc_control_B.t3213 * proc_control_B.t3247) - ct[1667] *
                proc_control_B.t3230 * proc_control_B.t3247) +
               proc_control_B.t3190 * proc_control_B.t3244 *
               proc_control_B.t3247) - proc_control_B.t3205 *
              proc_control_B.t3239 * proc_control_B.t3247) + Anq_tmp_1 *
    proc_control_B.t3217 * proc_control_B.t3247;
  Anq[165] = ((((-proc_control_B.t3185 * proc_control_B.t3218 *
                 proc_control_B.t3247 + ct[1667] * proc_control_B.t3210 *
                 proc_control_B.t3247) + proc_control_B.t3190 *
                proc_control_B.t3216 * proc_control_B.t3247) +
               proc_control_B.t3207 * proc_control_B.t3228 *
               proc_control_B.t3247) + proc_control_B.t3205 *
              proc_control_B.t3235 * proc_control_B.t3247) + Anq_tmp_1 *
    proc_control_B.t3243 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = proc_control_B.t3207 * proc_control_B.t3247;
  Anq[166] = ((((-proc_control_B.t3185 * proc_control_B.t3214 *
                 proc_control_B.t3247 - ct[1667] * proc_control_B.t3224 *
                 proc_control_B.t3247) - proc_control_B.t3190 *
                proc_control_B.t3238 * proc_control_B.t3247) +
               proc_control_B.t3205 * proc_control_B.t3242 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp *
              proc_control_B.t3247_tmp) + Anq_tmp_1 * proc_control_B.t3234 *
    proc_control_B.t3247;
  Anq[167] = (((proc_control_B.t3190 * proc_control_B.t3212 *
                proc_control_B.t3247 - proc_control_B.t3185 *
                proc_control_B.t3236 * proc_control_B.t3247) -
               proc_control_B.t3207 * proc_control_B.t3241 *
               proc_control_B.t3247) - proc_control_B.t3205 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_h) + (ct[1667] *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_j + proc_control_B.t3179 *
    proc_control_B.t3229 * proc_control_B.t3247);
  Anq[168] = ((((proc_control_B.t3185 * proc_control_B.t3233 *
                 proc_control_B.t3247 + proc_control_B.t3190 *
                 proc_control_B.t3231 * proc_control_B.t3247) +
                proc_control_B.t3205 * proc_control_B.t3225 *
                proc_control_B.t3247) - ct[1667] * proc_control_B.t3240 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_c *
              proc_control_B.t3247_tmp) + proc_control_B.t3179 *
    proc_control_B.t3211 * proc_control_B.t3247;
}

void proc_control::proc_control_ft_5(const real_T ct[1959], real_T Anq[169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.ct[0] = ct[0];
  proc_control_B.ct[1] = ct[1];
  proc_control_B.ct[2] = ct[2];
  proc_control_B.ct[3] = ct[3];
  proc_control_B.ct[4] = ct[4];
  proc_control_B.ct[5] = ct[5];
  std::memcpy(&proc_control_B.ct[6], &ct[7], 15U * sizeof(real_T));
  proc_control_B.ct[21] = ct[22];
  proc_control_B.ct[22] = ct[24];
  proc_control_B.ct[23] = ct[26];
  proc_control_B.ct[24] = ct[28];
  proc_control_B.ct[25] = ct[29];
  proc_control_B.ct[26] = ct[30];
  proc_control_B.ct[27] = ct[32];
  proc_control_B.ct[28] = ct[34];
  proc_control_B.ct[29] = ct[35];
  proc_control_B.ct[30] = ct[36];
  proc_control_B.ct[31] = ct[39];
  proc_control_B.ct[32] = ct[40];
  proc_control_B.ct[33] = ct[41];
  proc_control_B.ct[34] = ct[42];
  proc_control_B.ct[35] = ct[43];
  proc_control_B.ct[36] = ct[44];
  proc_control_B.ct[37] = ct[48];
  proc_control_B.ct[38] = ct[49];
  proc_control_B.ct[39] = ct[50];
  proc_control_B.ct[40] = ct[51];
  proc_control_B.ct[41] = ct[52];
  proc_control_B.ct[42] = ct[53];
  proc_control_B.ct[43] = ct[55];
  proc_control_B.ct[44] = ct[56];
  proc_control_B.ct[45] = ct[59];
  proc_control_B.ct[46] = ct[60];
  proc_control_B.ct[47] = ct[62];
  proc_control_B.ct[48] = ct[63];
  proc_control_B.ct[49] = ct[66];
  proc_control_B.ct[50] = ct[68];
  proc_control_B.ct[51] = ct[69];
  std::memcpy(&proc_control_B.ct[52], &ct[72], 18U * sizeof(real_T));
  proc_control_B.ct[70] = ct[90];
  std::memcpy(&proc_control_B.ct[71], &ct[92], 94U * sizeof(real_T));
  proc_control_B.ct[165] = ct[186];
  proc_control_B.ct[166] = ct[189];
  proc_control_B.ct[167] = ct[191];
  proc_control_B.ct[168] = ct[193];
  proc_control_B.ct[169] = ct[194];
  proc_control_B.ct[170] = ct[196];
  proc_control_B.ct[171] = ct[198];
  proc_control_B.ct[172] = ct[199];
  proc_control_B.ct[173] = ct[201];
  proc_control_B.ct[174] = ct[203];
  proc_control_B.ct[175] = ct[205];
  proc_control_B.ct[176] = ct[208];
  proc_control_B.ct[177] = ct[210];
  proc_control_B.ct[178] = ct[211];
  proc_control_B.ct[179] = ct[214];
  proc_control_B.ct[180] = ct[215];
  proc_control_B.ct[181] = ct[217];
  proc_control_B.ct[182] = ct[218];
  proc_control_B.ct[183] = ct[221];
  proc_control_B.ct[184] = ct[223];
  proc_control_B.ct[185] = ct[226];
  proc_control_B.ct[186] = ct[227];
  proc_control_B.ct[187] = ct[229];
  proc_control_B.ct[188] = ct[232];
  proc_control_B.ct[189] = ct[234];
  proc_control_B.ct[190] = ct[235];
  proc_control_B.ct[191] = ct[236];
  proc_control_B.ct[192] = ct[239];
  proc_control_B.ct[193] = ct[241];
  proc_control_B.ct[194] = ct[243];
  proc_control_B.ct[195] = ct[244];
  proc_control_B.ct[196] = ct[248];
  proc_control_B.ct[197] = ct[250];
  proc_control_B.ct[198] = ct[251];
  proc_control_B.ct[199] = ct[253];
  proc_control_B.ct[200] = ct[256];
  proc_control_B.ct[201] = ct[257];
  proc_control_B.ct[202] = ct[259];
  proc_control_B.ct[203] = ct[260];
  proc_control_B.ct[204] = ct[262];
  proc_control_B.ct[205] = ct[265];
  proc_control_B.ct[206] = ct[266];
  proc_control_B.ct[207] = ct[269];
  proc_control_B.ct[208] = ct[270];
  proc_control_B.ct[209] = ct[271];
  proc_control_B.ct[210] = ct[274];
  proc_control_B.ct[211] = ct[276];
  proc_control_B.ct[212] = ct[278];
  proc_control_B.ct[213] = ct[279];
  proc_control_B.ct[214] = ct[281];
  proc_control_B.ct[215] = ct[282];
  proc_control_B.ct[216] = ct[284];
  proc_control_B.ct[217] = ct[286];
  proc_control_B.ct[218] = ct[287];
  proc_control_B.ct[219] = ct[289];
  proc_control_B.ct[220] = ct[291];
  proc_control_B.ct[221] = ct[293];
  proc_control_B.ct[222] = ct[294];
  proc_control_B.ct[223] = ct[295];
  proc_control_B.ct[224] = ct[296];
  std::memcpy(&proc_control_B.ct[225], &ct[298], 15U * sizeof(real_T));
  proc_control_B.ct[240] = ct[314];
  proc_control_B.ct[241] = ct[317];
  proc_control_B.ct[242] = ct[318];
  proc_control_B.ct[243] = ct[322];
  proc_control_B.ct[244] = ct[324];
  proc_control_B.ct[245] = ct[326];
  proc_control_B.ct[246] = ct[328];
  proc_control_B.ct[247] = ct[329];
  proc_control_B.ct[248] = ct[332];
  proc_control_B.ct[249] = ct[337];
  proc_control_B.ct[250] = ct[340];
  proc_control_B.ct[251] = ct[344];
  std::memcpy(&proc_control_B.ct[252], &ct[347], 305U * sizeof(real_T));
  proc_control_B.ct[557] = ct[652];
  proc_control_B.ct[558] = ct[654];
  proc_control_B.ct[559] = ct[655];
  proc_control_B.ct[560] = ct[657];
  proc_control_B.ct[561] = ct[658];
  proc_control_B.ct[562] = ct[659];
  proc_control_B.ct[563] = ct[661];
  proc_control_B.ct[564] = ct[662];
  proc_control_B.ct[565] = ct[664];
  proc_control_B.ct[566] = ct[665];
  proc_control_B.ct[567] = ct[668];
  proc_control_B.ct[568] = ct[669];
  proc_control_B.ct[569] = ct[670];
  proc_control_B.ct[570] = ct[671];
  proc_control_B.ct[571] = ct[673];
  proc_control_B.ct[572] = ct[674];
  proc_control_B.ct[573] = ct[675];
  proc_control_B.ct[574] = ct[676];
  proc_control_B.ct[575] = ct[679];
  proc_control_B.ct[576] = ct[680];
  proc_control_B.ct[577] = ct[683];
  proc_control_B.ct[578] = ct[684];
  std::memcpy(&proc_control_B.ct[579], &ct[686], 30U * sizeof(real_T));
  proc_control_B.ct[609] = ct[716];
  proc_control_B.ct[610] = ct[721];
  proc_control_B.ct[611] = ct[722];
  proc_control_B.ct[612] = ct[723];
  proc_control_B.ct[613] = ct[724];
  proc_control_B.ct[614] = ct[8] * ct[1912];
  proc_control_B.ct[615] = ct[7] * ct[1919];
  proc_control_B.ct[616] = ct[8] * ct[1915];
  proc_control_B.ct[617] = ct[9] * ct[1912];
  proc_control_B.ct[618] = ct[7] * ct[1922];
  proc_control_B.ct[619] = ct[725];
  proc_control_B.ct[620] = ct[9] * ct[1915];
  proc_control_B.ct[621] = ct[8] * ct[1918];
  proc_control_B.ct[622] = ct[726];
  proc_control_B.ct[623] = ct[8] * ct[1920];
  proc_control_B.ct[624] = ct[727];
  proc_control_B.ct[625] = ct[728];
  proc_control_B.ct[626] = ct[729];
  proc_control_B.ct[627] = ct[9] * ct[1919];
  proc_control_B.ct[628] = ct[7] * ct[1924];
  proc_control_B.ct[629] = ct[9] * ct[1920];
  proc_control_B.ct[630] = ct[7] * ct[1925];
  proc_control_B.ct[631] = ct[8] * ct[1924];
  proc_control_B.ct[632] = ct[730];
  proc_control_B.ct[633] = ct[9] * ct[1923];
  proc_control_B.ct[634] = ct[731];
  proc_control_B.ct[635] = ct[732];
  proc_control_B.ct[636] = ct[733];
  proc_control_B.ct[637] = ct[7] * ct[1928];
  proc_control_B.ct[638] = ct[8] * ct[1926];
  proc_control_B.ct[639] = ct[7] * ct[1930];
  proc_control_B.ct[640] = ct[734];
  proc_control_B.ct[641] = ct[9] * ct[1926];
  proc_control_B.ct[642] = ct[8] * ct[1927];
  proc_control_B.ct[643] = ct[7] * ct[1931];
  proc_control_B.ct[644] = ct[8] * ct[1929];
  proc_control_B.ct[645] = ct[735];
  proc_control_B.ct[646] = ct[736];
  proc_control_B.ct[647] = ct[737];
  proc_control_B.ct[648] = ct[9] * ct[1928];
  proc_control_B.ct[649] = ct[7] * ct[1932];
  proc_control_B.ct[650] = ct[7] * ct[1934];
  proc_control_B.ct[651] = ct[738];
  proc_control_B.ct[652] = ct[8] * ct[1933];
  proc_control_B.ct[653] = ct[739];
  proc_control_B.ct[654] = ct[9] * ct[1931];
  proc_control_B.ct[655] = ct[7] * ct[1937];
  proc_control_B.ct[656] = ct[740];
  proc_control_B.ct[657] = ct[9] * ct[1932];
  proc_control_B.ct[658] = ct[8] * ct[1937];
  proc_control_B.ct[659] = ct[9] * ct[1934];
  proc_control_B.ct[660] = ct[8] * ct[1939];
  proc_control_B.ct[661] = ct[9] * ct[1936];
  proc_control_B.ct[662] = ct[741];
  proc_control_B.ct[663] = ct[742];
  proc_control_B.ct[664] = ct[743];
  proc_control_B.ct[665] = ct[8] * ct[1940];
  proc_control_B.ct[666] = ct[7] * ct[1942];
  proc_control_B.ct[667] = ct[9] * ct[1940];
  proc_control_B.ct[668] = ct[7] * ct[1943];
  proc_control_B.ct[669] = ct[744];
  proc_control_B.ct[670] = ct[7] * ct[1946];
  proc_control_B.ct[671] = ct[8] * ct[1942];
  proc_control_B.ct[672] = ct[9] * ct[1941];
  proc_control_B.ct[673] = ct[745];
  proc_control_B.ct[674] = ct[7] * ct[1948];
  proc_control_B.ct[675] = ct[746];
  proc_control_B.ct[676] = ct[747];
  proc_control_B.ct[677] = ct[748];
  proc_control_B.ct[678] = ct[8] * ct[1948];
  proc_control_B.ct[679] = ct[9] * ct[1943];
  proc_control_B.ct[680] = ct[7] * ct[1951];
  proc_control_B.ct[681] = ct[9] * ct[1944];
  proc_control_B.ct[682] = ct[8] * ct[1950];
  proc_control_B.ct[683] = ct[9] * ct[1947];
  proc_control_B.ct[684] = ct[749];
  proc_control_B.ct[685] = ct[7] * ct[1952];
  proc_control_B.ct[686] = ct[8] * ct[1951];
  proc_control_B.ct[687] = ct[9] * ct[1949];
  proc_control_B.ct[688] = ct[750];
  proc_control_B.ct[689] = ct[751];
  proc_control_B.ct[690] = ct[8] * ct[1952];
  proc_control_B.ct[691] = ct[754];
  proc_control_B.ct[692] = ct[755];
  proc_control_B.ct[693] = ct[10] * ct[1916];
  std::memcpy(&proc_control_B.ct[694], &ct[756], 18U * sizeof(real_T));
  proc_control_B.ct[712] = ct[11] * ct[1935];
  std::memcpy(&proc_control_B.ct[713], &ct[774], 18U * sizeof(real_T));
  proc_control_B.ct[731] = ct[12] * ct[1953];
  proc_control_B.ct[732] = ct[792];
  proc_control_B.ct[733] = ct[10] * ct[27];
  proc_control_B.ct[734] = ct[793];
  proc_control_B.ct[735] = ct[794];
  proc_control_B.ct[736] = ct[795];
  proc_control_B.ct[737] = ct[796];
  proc_control_B.ct[738] = ct[797];
  proc_control_B.ct[739] = ct[11] * ct[33];
  proc_control_B.ct[740] = ct[798];
  proc_control_B.ct[741] = ct[799];
  proc_control_B.ct[742] = ct[12] * ct[38];
  proc_control_B.ct[743] = ct[800];
  proc_control_B.ct[744] = ct[802];
  proc_control_B.ct[745] = ct[803];
  proc_control_B.ct[746] = ct[805];
  proc_control_B.ct[747] = ct[8] * ct[190];
  proc_control_B.ct[748] = ct[8] * ct[191];
  proc_control_B.ct[749] = ct[9] * ct[190];
  proc_control_B.ct[750] = ct[806];
  proc_control_B.ct[751] = ct[9] * ct[191];
  proc_control_B.ct[752] = ct[8] * ct[201];
  proc_control_B.ct[753] = ct[8] * ct[202];
  proc_control_B.ct[754] = ct[9] * ct[201];
  proc_control_B.ct[755] = ct[9] * ct[202];
  proc_control_B.ct[756] = ct[8] * ct[207];
  proc_control_B.ct[757] = ct[807];
  proc_control_B.ct[758] = ct[8] * ct[208];
  proc_control_B.ct[759] = ct[9] * ct[207];
  proc_control_B.ct[760] = ct[8] * ct[210];
  proc_control_B.ct[761] = ct[9] * ct[208];
  proc_control_B.ct[762] = ct[8] * ct[212];
  proc_control_B.ct[763] = ct[9] * ct[210];
  proc_control_B.ct[764] = ct[9] * ct[212];
  proc_control_B.ct[765] = ct[9] * ct[218];
  proc_control_B.ct[766] = ct[9] * ct[220];
  proc_control_B.ct[767] = ct[8] * ct[224];
  proc_control_B.ct[768] = ct[8] * ct[226];
  proc_control_B.ct[769] = ct[9] * ct[227];
  proc_control_B.ct[770] = ct[9] * ct[228];
  proc_control_B.ct[771] = ct[8] * ct[233];
  proc_control_B.ct[772] = ct[808];
  proc_control_B.ct[773] = ct[8] * ct[234];
  proc_control_B.ct[774] = ct[9] * ct[235];
  proc_control_B.ct[775] = ct[9] * ct[236];
  proc_control_B.ct[776] = ct[9] * ct[237];
  proc_control_B.ct[777] = ct[8] * ct[241];
  proc_control_B.ct[778] = ct[9] * ct[238];
  proc_control_B.ct[779] = ct[8] * ct[242];
  proc_control_B.ct[780] = ct[809];
  proc_control_B.ct[781] = ct[9] * ct[244];
  proc_control_B.ct[782] = ct[9] * ct[246];
  proc_control_B.ct[783] = ct[8] * ct[250];
  proc_control_B.ct[784] = ct[8] * ct[252];
  proc_control_B.ct[785] = ct[9] * ct[253];
  proc_control_B.ct[786] = ct[9] * ct[254];
  proc_control_B.ct[787] = ct[8] * ct[260];
  proc_control_B.ct[788] = ct[810];
  proc_control_B.ct[789] = ct[8] * ct[261];
  proc_control_B.ct[790] = ct[9] * ct[263];
  proc_control_B.ct[791] = ct[9] * ct[265];
  proc_control_B.ct[792] = ct[9] * ct[266];
  proc_control_B.ct[793] = ct[9] * ct[267];
  proc_control_B.ct[794] = ct[9] * ct[268];
  proc_control_B.ct[795] = ct[9] * ct[269];
  proc_control_B.ct[796] = ct[9] * ct[272];
  proc_control_B.ct[797] = ct[9] * ct[274];
  proc_control_B.ct[798] = ct[9] * ct[277];
  proc_control_B.ct[799] = ct[9] * ct[278];
  proc_control_B.ct[800] = ct[9] * ct[279];
  proc_control_B.ct[801] = ct[9] * ct[280];
  proc_control_B.ct[802] = ct[9] * ct[288];
  proc_control_B.ct[803] = ct[811];
  proc_control_B.ct[804] = ct[9] * ct[289];
  proc_control_B.ct[805] = ct[9] * ct[290];
  proc_control_B.ct[806] = ct[9] * ct[291];
  proc_control_B.ct[807] = ct[9] * ct[313];
  proc_control_B.ct[808] = ct[9] * ct[315];
  proc_control_B.ct[809] = ct[812];
  proc_control_B.ct[810] = ct[9] * ct[319];
  proc_control_B.ct[811] = ct[9] * ct[320];
  proc_control_B.ct[812] = ct[813];
  proc_control_B.ct[813] = ct[8] * ct[330];
  proc_control_B.ct[814] = ct[8] * ct[331];
  proc_control_B.ct[815] = ct[814];
  proc_control_B.ct[816] = ct[8] * ct[354];
  proc_control_B.ct[817] = ct[9] * ct[355];
  proc_control_B.ct[818] = ct[815];
  proc_control_B.ct[819] = ct[816];
  proc_control_B.ct[820] = ct[817];
  proc_control_B.ct[821] = ct[818];
  proc_control_B.ct[822] = ct[821];
  proc_control_B.ct[823] = ct[9] * ct[370];
  proc_control_B.ct[824] = ct[822];
  proc_control_B.ct[825] = ct[823];
  proc_control_B.ct[826] = ct[826];
  proc_control_B.ct[827] = ct[829];
  proc_control_B.ct[828] = ct[830];
  std::memcpy(&proc_control_B.ct[829], &ct[834], 25U * sizeof(real_T));
  proc_control_B.ct[854] = -ct[1907];
  proc_control_B.ct[855] = -ct[1908];
  proc_control_B.ct[856] = -ct[1909];
  proc_control_B.ct[857] = -ct[1910];
  proc_control_B.ct[858] = ct[859];
  proc_control_B.ct[859] = -ct[1911];
  proc_control_B.ct[860] = -ct[1913];
  proc_control_B.ct[861] = -ct[1917];
  proc_control_B.ct[862] = -ct[1929];
  proc_control_B.ct[863] = -ct[1931];
  proc_control_B.ct[864] = -ct[1933];
  proc_control_B.ct[865] = -ct[1944];
  proc_control_B.ct[866] = -ct[1949];
  proc_control_B.ct[867] = -ct[1951];
  proc_control_B.ct[868] = -ct[1955];
  proc_control_B.ct[869] = -ct[23];
  proc_control_B.ct[870] = ct[860];
  proc_control_B.ct[871] = ct[861];
  proc_control_B.ct[872] = ct[80] * ct[1823];
  proc_control_B.ct[873] = ct[862];
  proc_control_B.ct[874] = ct[863];
  proc_control_B.ct[875] = ct[91] * ct[1824];
  proc_control_B.ct[876] = ct[864];
  proc_control_B.ct[877] = ct[865];
  proc_control_B.ct[878] = ct[102] * ct[1825];
  proc_control_B.ct[879] = ct[866];
  proc_control_B.ct[880] = -ct[45];
  proc_control_B.ct[881] = -ct[46];
  proc_control_B.ct[882] = -ct[47];
  proc_control_B.ct[883] = -ct[54];
  proc_control_B.ct[884] = -ct[57];
  proc_control_B.ct[885] = -ct[58];
  proc_control_B.ct[886] = -ct[61];
  proc_control_B.ct[887] = -ct[64];
  proc_control_B.ct[888] = -ct[65];
  proc_control_B.ct[889] = -ct[67];
  proc_control_B.ct[890] = ct[867];
  proc_control_B.ct[891] = -ct[70];
  proc_control_B.ct[892] = -ct[71];
  std::memcpy(&proc_control_B.ct[893], &ct[868], 17U * sizeof(real_T));
  proc_control_B.ct[910] = -ct[187];
  proc_control_B.ct[911] = -ct[188];
  proc_control_B.ct[912] = -ct[190];
  proc_control_B.ct[913] = -ct[192];
  proc_control_B.ct[914] = -ct[195];
  proc_control_B.ct[915] = -ct[197];
  proc_control_B.ct[916] = -ct[200];
  proc_control_B.ct[917] = ct[885];
  proc_control_B.ct[918] = -ct[202];
  proc_control_B.ct[919] = -ct[204];
  proc_control_B.ct[920] = -ct[206];
  proc_control_B.ct[921] = -ct[207];
  proc_control_B.ct[922] = -ct[209];
  proc_control_B.ct[923] = -ct[212];
  proc_control_B.ct[924] = -ct[213];
  proc_control_B.ct[925] = -ct[216];
  proc_control_B.ct[926] = -ct[219];
  proc_control_B.ct[927] = -ct[220];
  proc_control_B.ct[928] = -ct[222];
  proc_control_B.ct[929] = ct[886];
  proc_control_B.ct[930] = ct[887];
  proc_control_B.ct[931] = ct[888];
  proc_control_B.ct[932] = -ct[224];
  proc_control_B.ct[933] = -ct[225];
  proc_control_B.ct[934] = -ct[228];
  proc_control_B.ct[935] = -ct[230];
  proc_control_B.ct[936] = -ct[231];
  proc_control_B.ct[937] = -ct[233];
  proc_control_B.ct[938] = ct[889];
  proc_control_B.ct[939] = -ct[237];
  proc_control_B.ct[940] = -ct[238];
  proc_control_B.ct[941] = -ct[240];
  proc_control_B.ct[942] = -ct[242];
  proc_control_B.ct[943] = -ct[245];
  proc_control_B.ct[944] = -ct[246];
  proc_control_B.ct[945] = -ct[247];
  proc_control_B.ct[946] = -ct[249];
  proc_control_B.ct[947] = -ct[252];
  proc_control_B.ct[948] = -ct[254];
  proc_control_B.ct[949] = ct[890];
  proc_control_B.ct[950] = -ct[255];
  proc_control_B.ct[951] = -ct[258];
  proc_control_B.ct[952] = ct[891];
  proc_control_B.ct[953] = ct[892];
  proc_control_B.ct[954] = -ct[261];
  proc_control_B.ct[955] = -ct[263];
  proc_control_B.ct[956] = -ct[264];
  proc_control_B.ct[957] = -ct[267];
  proc_control_B.ct[958] = -ct[268];
  proc_control_B.ct[959] = -ct[272];
  proc_control_B.ct[960] = ct[893];
  proc_control_B.ct[961] = -ct[273];
  proc_control_B.ct[962] = -ct[275];
  proc_control_B.ct[963] = -ct[277];
  proc_control_B.ct[964] = -ct[280];
  proc_control_B.ct[965] = -ct[283];
  proc_control_B.ct[966] = -ct[285];
  proc_control_B.ct[967] = -ct[286];
  proc_control_B.ct[968] = -ct[287];
  proc_control_B.ct[969] = -ct[288];
  proc_control_B.ct[970] = -ct[290];
  proc_control_B.ct[971] = -ct[292];
  proc_control_B.ct[972] = -ct[294];
  proc_control_B.ct[973] = -ct[295];
  proc_control_B.ct[974] = -ct[297];
  std::memcpy(&proc_control_B.ct[975], &ct[894], 104U * sizeof(real_T));
  proc_control_B.ct[1079] = ct[10] * ct[653];
  proc_control_B.ct[1080] = ct[1000];
  proc_control_B.ct[1081] = ct[1002];
  proc_control_B.ct[1082] = ct[1003];
  proc_control_B.ct[1083] = ct[1004];
  proc_control_B.ct[1084] = ct[10] * ct[667];
  proc_control_B.ct[1085] = ct[1006];
  proc_control_B.ct[1086] = ct[10] * ct[681];
  proc_control_B.ct[1087] = ct[1008];
  proc_control_B.ct[1088] = ct[10] * ct[685];
  proc_control_B.ct[1089] = ct[1010];
  proc_control_B.ct[1090] = ct[1011];
  proc_control_B.ct[1091] = ct[11] * ct[656];
  proc_control_B.ct[1092] = ct[1013];
  proc_control_B.ct[1093] = ct[1015];
  proc_control_B.ct[1094] = ct[11] * ct[667];
  proc_control_B.ct[1095] = ct[1017];
  proc_control_B.ct[1096] = ct[1018];
  proc_control_B.ct[1097] = ct[11] * ct[672];
  proc_control_B.ct[1098] = ct[1020];
  proc_control_B.ct[1099] = ct[1022];
  proc_control_B.ct[1100] = ct[11] * ct[681];
  proc_control_B.ct[1101] = ct[1024];
  proc_control_B.ct[1102] = ct[12] * ct[653];
  proc_control_B.ct[1103] = ct[1026];
  proc_control_B.ct[1104] = ct[12] * ct[656];
  proc_control_B.ct[1105] = ct[1028];
  proc_control_B.ct[1106] = ct[1029];
  proc_control_B.ct[1107] = ct[12] * ct[672];
  proc_control_B.ct[1108] = ct[1032];
  proc_control_B.ct[1109] = ct[1034];
  proc_control_B.ct[1110] = ct[1035];
  proc_control_B.ct[1111] = ct[12] * ct[685];
  proc_control_B.ct[1112] = ct[1037];
  proc_control_B.ct[1113] = ct[1039];
  proc_control_B.ct[1114] = ct[1040];
  proc_control_B.ct[1115] = ct[1529] * ct[1648];
  proc_control_B.ct[1116] = ct[1559] * ct[1647];
  proc_control_B.ct[1117] = ct[1542] * ct[1649];
  proc_control_B.ct[1118] = ct[1042];
  proc_control_B.ct[1119] = ct[1529] * ct[1651];
  proc_control_B.ct[1120] = ct[1043];
  proc_control_B.ct[1121] = ct[1559] * ct[1650];
  proc_control_B.ct[1122] = ct[1542] * ct[1652];
  proc_control_B.ct[1123] = ct[1529] * ct[1653];
  proc_control_B.ct[1124] = ct[1044];
  proc_control_B.ct[1125] = ct[1559] * ct[1655];
  proc_control_B.ct[1126] = ct[1542] * ct[1656];
  proc_control_B.ct[1127] = ct[1529] * ct[1657];
  proc_control_B.ct[1128] = ct[1045];
  proc_control_B.ct[1129] = ct[1542] * ct[1658];
  proc_control_B.ct[1130] = ct[1559] * ct[1659];
  proc_control_B.ct[1131] = ct[1542] * ct[1660];
  proc_control_B.ct[1132] = ct[1529] * ct[1661];
  proc_control_B.ct[1133] = ct[1046];
  proc_control_B.ct[1134] = ct[1559] * ct[1662];
  proc_control_B.ct[1135] = ct[1542] * ct[1663];
  proc_control_B.ct[1136] = ct[1529] * ct[1666];
  proc_control_B.ct[1137] = ct[1047];
  proc_control_B.ct[1138] = ct[1559] * ct[1664];
  proc_control_B.ct[1139] = ct[1048];
  proc_control_B.ct[1140] = ct[1542] * ct[1667];
  proc_control_B.ct[1141] = ct[1529] * ct[1669];
  proc_control_B.ct[1142] = ct[1049];
  proc_control_B.ct[1143] = ct[1559] * ct[1668];
  proc_control_B.ct[1144] = ct[1052];
  proc_control_B.ct[1145] = ct[1056];
  proc_control_B.ct[1146] = ct[1059];
  proc_control_B.ct[1147] = ct[1062];
  proc_control_B.ct[1148] = ct[1064];
  proc_control_B.ct[1149] = ct[10] * ct[717];
  proc_control_B.ct[1150] = ct[1065];
  proc_control_B.ct[1151] = ct[1066];
  proc_control_B.ct[1152] = ct[1067];
  proc_control_B.ct[1153] = ct[1068];
  proc_control_B.ct[1154] = ct[1069];
  proc_control_B.ct[1155] = ct[1070];
  proc_control_B.ct[1156] = ct[10] * ct[719];
  proc_control_B.ct[1157] = ct[11] * ct[718];
  proc_control_B.ct[1158] = ct[1071];
  proc_control_B.ct[1159] = ct[1072];
  proc_control_B.ct[1160] = ct[1073];
  proc_control_B.ct[1161] = ct[12] * ct[717];
  proc_control_B.ct[1162] = ct[1074];
  proc_control_B.ct[1163] = ct[11] * ct[719];
  proc_control_B.ct[1164] = ct[12] * ct[718];
  proc_control_B.ct[1165] = ct[1075];
  proc_control_B.ct[1166] = ct[11] * ct[720];
  proc_control_B.ct[1167] = ct[1077];
  proc_control_B.ct[1168] = ct[1078];
  proc_control_B.ct[1169] = ct[1081];
  proc_control_B.ct[1170] = ct[1084];
  proc_control_B.ct[1171] = ct[1085];
  proc_control_B.ct[1172] = ct[1086];
  proc_control_B.ct[1173] = ct[1088];
  proc_control_B.ct[1174] = ct[1089];
  proc_control_B.ct[1175] = ct[1090];
  proc_control_B.ct[1176] = ct[1093];
  proc_control_B.ct[1177] = ct[10] * ct[752];
  proc_control_B.ct[1178] = ct[1094];
  proc_control_B.ct[1179] = ct[10] * ct[753];
  proc_control_B.ct[1180] = ct[1095];
  proc_control_B.ct[1181] = ct[12] * ct[720];
  proc_control_B.ct[1182] = ct[1097];
  proc_control_B.ct[1183] = ct[1112];
  proc_control_B.ct[1184] = ct[1113];
  proc_control_B.ct[1185] = ct[11] * ct[752];
  std::memcpy(&proc_control_B.ct[1186], &ct[1114], 19U * sizeof(real_T));
  proc_control_B.ct[1205] = ct[12] * ct[753];
  std::memcpy(&proc_control_B.ct[1206], &ct[1133], 43U * sizeof(real_T));
  proc_control_B.ct[1249] = ct[11] * ct[1005];
  proc_control_B.ct[1250] = ct[11] * ct[1007];
  proc_control_B.ct[1251] = ct[1176];
  proc_control_B.ct[1252] = ct[12] * ct[998];
  proc_control_B.ct[1253] = ct[12] * ct[1009];
  proc_control_B.ct[1254] = ct[12] * ct[1012];
  proc_control_B.ct[1255] = ct[12] * ct[1019];
  proc_control_B.ct[1256] = ct[11] * ct[1041];
  proc_control_B.ct[1257] = ct[1177];
  proc_control_B.ct[1258] = ct[12] * ct[1038];
  proc_control_B.ct[1259] = ct[11] * ct[1054];
  proc_control_B.ct[1260] = ct[12] * ct[1050];
  proc_control_B.ct[1261] = ct[12] * ct[1051];
  proc_control_B.ct[1262] = ct[12] * ct[1053];
  proc_control_B.ct[1263] = ct[11] * ct[1057];
  proc_control_B.ct[1264] = ct[1178];
  proc_control_B.ct[1265] = ct[11] * ct[1060];
  proc_control_B.ct[1266] = ct[12] * ct[1055];
  proc_control_B.ct[1267] = ct[12] * ct[1058];
  proc_control_B.ct[1268] = ct[12] * ct[1061];
  proc_control_B.ct[1269] = ct[12] * ct[1063];
  proc_control_B.ct[1270] = ct[1179];
  proc_control_B.ct[1271] = -ct[653];
  proc_control_B.ct[1272] = -ct[656];
  proc_control_B.ct[1273] = -ct[660];
  proc_control_B.ct[1274] = -ct[663];
  proc_control_B.ct[1275] = -ct[666];
  proc_control_B.ct[1276] = -ct[667];
  proc_control_B.ct[1277] = ct[1180];
  proc_control_B.ct[1278] = -ct[672];
  proc_control_B.ct[1279] = -ct[677];
  proc_control_B.ct[1280] = -ct[678];
  proc_control_B.ct[1281] = -ct[681];
  proc_control_B.ct[1282] = -ct[682];
  proc_control_B.ct[1283] = -ct[685];
  std::memcpy(&proc_control_B.ct[1284], &ct[1181], sizeof(real_T) << 3U);
  proc_control_B.ct[1292] = ct[29] * ct[80];
  proc_control_B.ct[1293] = ct[1189];
  proc_control_B.ct[1294] = ct[30] * ct[80];
  proc_control_B.ct[1295] = ct[1190];
  proc_control_B.ct[1296] = ct[34] * ct[80];
  proc_control_B.ct[1297] = ct[1191];
  proc_control_B.ct[1298] = ct[36] * ct[80];
  proc_control_B.ct[1299] = ct[1192];
  proc_control_B.ct[1300] = ct[35] * ct[91];
  proc_control_B.ct[1301] = ct[1193];
  proc_control_B.ct[1302] = ct[36] * ct[91];
  proc_control_B.ct[1303] = ct[1194];
  proc_control_B.ct[1304] = ct[1195];
  proc_control_B.ct[1305] = ct[1196];
  proc_control_B.ct[1306] = ct[1197];
  proc_control_B.ct[1307] = ct[8] * ct[860];
  proc_control_B.ct[1308] = ct[9] * ct[860];
  proc_control_B.ct[1309] = ct[1198];
  proc_control_B.ct[1310] = ct[1199];
  proc_control_B.ct[1311] = ct[7] * ct[862];
  proc_control_B.ct[1312] = ct[1200];
  proc_control_B.ct[1313] = ct[1201];
  proc_control_B.ct[1314] = ct[9] * ct[862];
  proc_control_B.ct[1315] = ct[1202];
  proc_control_B.ct[1316] = ct[1203];
  proc_control_B.ct[1317] = ct[7] * ct[864];
  proc_control_B.ct[1318] = ct[1204];
  proc_control_B.ct[1319] = ct[1205];
  proc_control_B.ct[1320] = ct[1206];
  proc_control_B.ct[1321] = ct[8] * ct[864];
  std::memcpy(&proc_control_B.ct[1322], &ct[1207], 65U * sizeof(real_T));
  proc_control_B.ct[1387] = -ct[800];
  proc_control_B.ct[1388] = -ct[801];
  proc_control_B.ct[1389] = -ct[802];
  proc_control_B.ct[1390] = -ct[803];
  proc_control_B.ct[1391] = -ct[804];
  proc_control_B.ct[1392] = -ct[805];
  proc_control_B.ct[1393] = ct[1272];
  proc_control_B.ct[1394] = ct[1273];
  proc_control_B.ct[1395] = ct[1274];
  proc_control_B.ct[1396] = ct[7] * ct[899];
  proc_control_B.ct[1397] = ct[9] * ct[899];
  proc_control_B.ct[1398] = ct[1275];
  proc_control_B.ct[1399] = ct[7] * ct[901];
  proc_control_B.ct[1400] = ct[9] * ct[901];
  proc_control_B.ct[1401] = ct[1276];
  proc_control_B.ct[1402] = ct[1277];
  proc_control_B.ct[1403] = ct[8] * ct[907];
  proc_control_B.ct[1404] = ct[9] * ct[907];
  proc_control_B.ct[1405] = ct[1278];
  proc_control_B.ct[1406] = ct[1279];
  proc_control_B.ct[1407] = ct[8] * ct[911];
  proc_control_B.ct[1408] = ct[9] * ct[911];
  proc_control_B.ct[1409] = ct[1280];
  proc_control_B.ct[1410] = ct[1281];
  proc_control_B.ct[1411] = ct[1282];
  proc_control_B.ct[1412] = ct[7] * ct[919];
  proc_control_B.ct[1413] = ct[9] * ct[918];
  proc_control_B.ct[1414] = ct[1283];
  proc_control_B.ct[1415] = ct[7] * ct[922];
  proc_control_B.ct[1416] = ct[1284];
  proc_control_B.ct[1417] = ct[9] * ct[921];
  proc_control_B.ct[1418] = ct[1285];
  proc_control_B.ct[1419] = ct[8] * ct[926];
  proc_control_B.ct[1420] = ct[1286];
  proc_control_B.ct[1421] = ct[9] * ct[926];
  proc_control_B.ct[1422] = ct[8] * ct[930];
  proc_control_B.ct[1423] = ct[1287];
  proc_control_B.ct[1424] = ct[9] * ct[930];
  proc_control_B.ct[1425] = ct[1288];
  proc_control_B.ct[1426] = ct[1289];
  proc_control_B.ct[1427] = ct[1290];
  proc_control_B.ct[1428] = ct[1291];
  proc_control_B.ct[1429] = ct[8] * ct[943];
  proc_control_B.ct[1430] = ct[1292];
  proc_control_B.ct[1431] = ct[9] * ct[945];
  proc_control_B.ct[1432] = ct[9] * ct[946];
  proc_control_B.ct[1433] = ct[1293];
  proc_control_B.ct[1434] = ct[9] * ct[947];
  proc_control_B.ct[1435] = ct[8] * ct[949];
  proc_control_B.ct[1436] = ct[1294];
  proc_control_B.ct[1437] = ct[9] * ct[950];
  proc_control_B.ct[1438] = ct[1295];
  proc_control_B.ct[1439] = ct[9] * ct[952];
  proc_control_B.ct[1440] = ct[1296];
  proc_control_B.ct[1441] = ct[9] * ct[953];
  proc_control_B.ct[1442] = ct[1297];
  proc_control_B.ct[1443] = -ct[819];
  proc_control_B.ct[1444] = -ct[820];
  proc_control_B.ct[1445] = ct[1298];
  proc_control_B.ct[1446] = -ct[824];
  proc_control_B.ct[1447] = -ct[825];
  proc_control_B.ct[1448] = -ct[827];
  proc_control_B.ct[1449] = ct[1299];
  proc_control_B.ct[1450] = -ct[828];
  proc_control_B.ct[1451] = ct[1300];
  proc_control_B.ct[1452] = -ct[831];
  proc_control_B.ct[1453] = -ct[832];
  proc_control_B.ct[1454] = -ct[833];
  std::memcpy(&proc_control_B.ct[1455], &ct[1301], 13U * sizeof(real_T));
  proc_control_B.ct[1468] = ct[1542] * ct[1911];
  proc_control_B.ct[1469] = ct[1314];
  proc_control_B.ct[1470] = ct[1559] * ct[1911];
  proc_control_B.ct[1471] = ct[1315];
  proc_control_B.ct[1472] = ct[1542] * ct[1915];
  proc_control_B.ct[1473] = ct[1316];
  proc_control_B.ct[1474] = ct[1559] * ct[1920];
  proc_control_B.ct[1475] = ct[1542] * ct[1926];
  proc_control_B.ct[1476] = ct[1542] * ct[1929];
  proc_control_B.ct[1477] = ct[1317];
  proc_control_B.ct[1478] = ct[1559] * ct[1931];
  proc_control_B.ct[1479] = ct[1318];
  proc_control_B.ct[1480] = ct[1559] * ct[1934];
  proc_control_B.ct[1481] = ct[1559] * ct[1940];
  proc_control_B.ct[1482] = ct[1319];
  proc_control_B.ct[1483] = ct[1559] * ct[1943];
  proc_control_B.ct[1484] = ct[1559] * ct[1944];
  proc_control_B.ct[1485] = ct[1320];
  proc_control_B.ct[1486] = ct[1559] * ct[1949];
  proc_control_B.ct[1487] = ct[1321];
  proc_control_B.ct[1488] = ct[24] * ct[1542];
  proc_control_B.ct[1489] = ct[24] * ct[1559];
  proc_control_B.ct[1490] = ct[29] * ct[1542];
  proc_control_B.ct[1491] = ct[1322];
  proc_control_B.ct[1492] = ct[30] * ct[1559];
  proc_control_B.ct[1493] = ct[34] * ct[1559];
  proc_control_B.ct[1494] = ct[35] * ct[1559];
  proc_control_B.ct[1495] = ct[1323];
  proc_control_B.ct[1496] = ct[1324];
  proc_control_B.ct[1497] = ct[1325];
  proc_control_B.ct[1498] = ct[1326];
  proc_control_B.ct[1499] = ct[1327];
  proc_control_B.ct[1500] = ct[1328];
  proc_control_B.ct[1501] = ct[1329];
  proc_control_B.ct[1502] = -ct[998];
  proc_control_B.ct[1503] = -ct[999];
  proc_control_B.ct_tmp_c4 = ct[10] * ct[1529];
  proc_control_B.ct[1504] = proc_control_B.ct_tmp_c4 * ct[402];
  proc_control_B.ct[1505] = -ct[1001];
  proc_control_B.ct[1506] = -ct[1005];
  proc_control_B.ct[1507] = proc_control_B.ct_tmp_c4 * ct[407];
  proc_control_B.ct[1508] = -ct[1007];
  proc_control_B.ct[1509] = ct[10] * ct[1542] * ct[411];
  proc_control_B.ct[1510] = -ct[1009];
  proc_control_B.ct[1511] = ct[10] * ct[1559] * ct[411];
  proc_control_B.ct[1512] = -ct[1012];
  proc_control_B.ct_tmp_c4 = ct[11] * ct[1542];
  proc_control_B.ct[1513] = proc_control_B.ct_tmp_c4 * ct[402];
  proc_control_B.ct[1514] = -ct[1014];
  proc_control_B.ct[1515] = -ct[1016];
  proc_control_B.ct[1516] = ct[11] * ct[1529] * ct[407];
  proc_control_B.ct[1517] = -ct[1019];
  proc_control_B.ct[1518] = ct[11] * ct[1559] * ct[407];
  proc_control_B.ct[1519] = -ct[1021];
  proc_control_B.ct[1520] = -ct[1023];
  proc_control_B.ct[1521] = ct[1330];
  proc_control_B.ct[1522] = proc_control_B.ct_tmp_c4 * ct[411];
  proc_control_B.ct[1523] = -ct[1025];
  proc_control_B.ct[1524] = ct[12] * ct[1529] * ct[402];
  proc_control_B.ct[1525] = -ct[1027];
  proc_control_B.ct[1526] = ct[12] * ct[1542] * ct[402];
  proc_control_B.ct[1527] = -ct[1030];
  proc_control_B.ct[1528] = -ct[1031];
  proc_control_B.ct_tmp_c4 = ct[12] * ct[1559];
  proc_control_B.ct[1529] = proc_control_B.ct_tmp_c4 * ct[407];
  proc_control_B.ct[1530] = -ct[1033];
  proc_control_B.ct[1531] = -ct[1036];
  proc_control_B.ct[1532] = ct[1331];
  proc_control_B.ct[1533] = proc_control_B.ct_tmp_c4 * ct[411];
  std::memcpy(&proc_control_B.ct[1534], &ct[1332], 35U * sizeof(real_T));
  proc_control_B.ct[1569] = ct[9] * ct[1195];
  std::memcpy(&proc_control_B.ct[1570], &ct[1367], 18U * sizeof(real_T));
  proc_control_B.ct[1588] = ct[9] * ct[1198];
  proc_control_B.ct[1589] = ct[8] * ct[1202];
  proc_control_B.ct[1590] = -ct[1076];
  proc_control_B.ct[1591] = -ct[1079];
  proc_control_B.ct[1592] = -ct[1080];
  proc_control_B.ct[1593] = -ct[1082];
  proc_control_B.ct[1594] = -ct[1083];
  proc_control_B.ct[1595] = ct[1385];
  proc_control_B.ct[1596] = ct[1386];
  proc_control_B.ct[1597] = ct[1387];
  proc_control_B.ct[1598] = -ct[1087];
  proc_control_B.ct[1599] = ct[1388];
  proc_control_B.ct[1600] = ct[1389];
  proc_control_B.ct[1601] = -ct[1091];
  proc_control_B.ct[1602] = -ct[1092];
  proc_control_B.ct[1603] = -ct[1096];
  proc_control_B.ct[1604] = -ct[1098];
  proc_control_B.ct[1605] = ct[1390];
  proc_control_B.ct[1606] = -ct[1099];
  proc_control_B.ct[1607] = ct[1391];
  proc_control_B.ct[1608] = -ct[1100];
  proc_control_B.ct[1609] = -ct[1101];
  proc_control_B.ct[1610] = -ct[1102];
  proc_control_B.ct[1611] = ct[1392];
  proc_control_B.ct[1612] = -ct[1103];
  proc_control_B.ct[1613] = -ct[1104];
  proc_control_B.ct[1614] = ct[1393];
  proc_control_B.ct[1615] = -ct[1105];
  proc_control_B.ct[1616] = -ct[1106];
  proc_control_B.ct[1617] = ct[1394];
  proc_control_B.ct[1618] = -ct[1107];
  proc_control_B.ct[1619] = -ct[1108];
  proc_control_B.ct[1620] = -ct[1109];
  proc_control_B.ct[1621] = ct[1395];
  proc_control_B.ct[1622] = -ct[1110];
  proc_control_B.ct[1623] = -ct[1111];
  std::memcpy(&proc_control_B.ct[1624], &ct[1396], 250U * sizeof(real_T));
  proc_control_B.ct[1874] = ct[1646];
  proc_control_B.ct[1875] = ct[1648];
  proc_control_B.ct[1876] = ct[1649];
  proc_control_B.ct[1877] = ct[1650];
  proc_control_B.ct[1878] = ct[1651];
  proc_control_B.ct[1879] = ct[1653];
  proc_control_B.ct[1880] = ct[1654];
  proc_control_B.ct[1881] = ct[1656];
  proc_control_B.ct[1882] = ct[1657];
  proc_control_B.ct[1883] = ct[1659];
  proc_control_B.ct[1884] = ct[1660];
  proc_control_B.ct[1885] = ct[1662];
  proc_control_B.ct[1886] = ct[1664];
  proc_control_B.ct[1887] = ct[1665];
  proc_control_B.ct[1888] = ct[1666];
  proc_control_B.ct[1889] = ct[1667];
  proc_control_B.ct[1890] = ct[1668];
  std::memcpy(&proc_control_B.ct[1891], &ct[1670], 237U * sizeof(real_T));
  proc_control_B.ct[2128] = ct[1912];
  proc_control_B.ct[2129] = ct[1914];
  proc_control_B.ct[2130] = ct[1915];
  proc_control_B.ct[2131] = ct[1916];
  std::memcpy(&proc_control_B.ct[2132], &ct[1918], 10U * sizeof(real_T));
  proc_control_B.ct[2142] = ct[1928];
  proc_control_B.ct[2143] = ct[1930];
  proc_control_B.ct[2144] = ct[1932];
  std::memcpy(&proc_control_B.ct[2145], &ct[1934], 9U * sizeof(real_T));
  proc_control_B.ct[2154] = ct[1943];
  proc_control_B.ct[2155] = ct[1945];
  proc_control_B.ct[2156] = ct[1946];
  proc_control_B.ct[2157] = ct[1947];
  proc_control_B.ct[2158] = ct[1948];
  proc_control_B.ct[2159] = ct[1950];
  proc_control_B.ct[2160] = ct[1952];
  proc_control_B.ct[2161] = ct[1953];
  proc_control_B.ct[2162] = ct[1954];
  proc_control_B.ct[2163] = ct[1956];
  proc_control_B.ct[2164] = ct[1957];
  proc_control_B.ct[2165] = ct[1958];
  proc_control_ft_6(proc_control_B.ct, Anq);
}

void proc_control::proc_control_ft_4(const real_T ct[1640], real_T Anq[169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.ct_l[0] = ct[7];
  proc_control_B.ct_l[1] = ct[8];
  proc_control_B.ct_l[2] = ct[9];
  proc_control_B.ct_l[3] = ct[11];
  proc_control_B.ct_l[4] = ct[12];
  proc_control_B.ct_l[5] = ct[13];
  std::memcpy(&proc_control_B.ct_l[6], &ct[17], 25U * sizeof(real_T));
  proc_control_B.ct_l[31] = ct[42];
  std::memcpy(&proc_control_B.ct_l[32], &ct[44], 38U * sizeof(real_T));
  proc_control_B.ct_l[70] = ct[82];
  proc_control_B.ct_l[71] = ct[84];
  proc_control_B.ct_l[72] = ct[85];
  proc_control_B.ct_l[73] = ct[86];
  proc_control_B.ct_l[74] = ct[19] * ct[1169];
  proc_control_B.ct_l[75] = ct[19] * ct[1170];
  proc_control_B.ct_l[76] = ct[19] * ct[1173];
  proc_control_B.ct_l[77] = ct[19] * ct[1175];
  proc_control_B.ct_l[78] = ct[20] * ct[1173];
  proc_control_B.ct_l[79] = ct[19] * ct[1177];
  proc_control_B.ct_l[80] = ct[87];
  proc_control_B.ct_l[81] = ct[20] * ct[1175];
  proc_control_B.ct_l[82] = ct[19] * ct[1179];
  proc_control_B.ct_l[83] = ct[20] * ct[1176];
  proc_control_B.ct_l[84] = ct[20] * ct[1177];
  proc_control_B.ct_l[85] = ct[20] * ct[1178];
  proc_control_B.ct_l[86] = ct[20] * ct[1179];
  proc_control_B.ct_l[87] = ct[11] * ct[1313];
  proc_control_B.ct_l[88] = ct[11] * ct[1314];
  proc_control_B.ct_l[89] = ct[20] * ct[1181];
  proc_control_B.ct_l[90] = ct[9] * ct[1318];
  proc_control_B.ct_l[91] = ct[88];
  proc_control_B.ct_l[92] = ct[10] * ct[1317];
  proc_control_B.ct_l[93] = ct[20] * ct[1183];
  proc_control_B.ct_l[94] = ct[19] * ct[1186];
  proc_control_B.ct_l[95] = ct[19] * ct[1187];
  proc_control_B.ct_l[96] = ct[20] * ct[1186];
  proc_control_B.ct_l[97] = ct[20] * ct[1187];
  proc_control_B.ct_l[98] = ct[20] * ct[1188];
  proc_control_B.ct_l[99] = ct[20] * ct[1189];
  proc_control_B.ct_l[100] = ct[20] * ct[1190];
  proc_control_B.ct_l[101] = ct[19] * ct[1194];
  proc_control_B.ct_l[102] = ct[89];
  proc_control_B.ct_l[103] = ct[20] * ct[1191];
  proc_control_B.ct_l[104] = ct[19] * ct[1195];
  proc_control_B.ct_l[105] = ct[13] * ct[1313];
  proc_control_B.ct_l[106] = ct[12] * ct[1316];
  proc_control_B.ct_l[107] = ct[14] * ct[1312];
  proc_control_B.ct_l[108] = ct[20] * ct[1194];
  proc_control_B.ct_l[109] = ct[13] * ct[1315];
  proc_control_B.ct_l[110] = ct[20] * ct[1195];
  proc_control_B.ct_l[111] = ct[20] * ct[1197];
  proc_control_B.ct_l[112] = ct[20] * ct[1199];
  proc_control_B.ct_l[113] = ct[90];
  proc_control_B.ct_l[114] = ct[19] * ct[1203];
  proc_control_B.ct_l[115] = ct[19] * ct[1204];
  proc_control_B.ct_l[116] = ct[20] * ct[1203];
  proc_control_B.ct_l[117] = ct[19] * ct[1206];
  proc_control_B.ct_l[118] = ct[20] * ct[1204];
  proc_control_B.ct_l[119] = ct[19] * ct[1208];
  proc_control_B.ct_l[120] = ct[13] * ct[1321];
  proc_control_B.ct_l[121] = ct[20] * ct[1205];
  proc_control_B.ct_l[122] = ct[14] * ct[1320];
  proc_control_B.ct_l[123] = ct[20] * ct[1206];
  proc_control_B.ct_l[124] = ct[12] * ct[1323];
  proc_control_B.ct_l[125] = ct[20] * ct[1207];
  proc_control_B.ct_l[126] = ct[12] * ct[1324];
  proc_control_B.ct_l[127] = ct[20] * ct[1208];
  proc_control_B.ct_l[128] = ct[20] * ct[1210];
  proc_control_B.ct_l[129] = ct[20] * ct[1212];
  proc_control_B.ct_l[130] = ct[20] * ct[1214];
  proc_control_B.ct_l[131] = ct[20] * ct[1216];
  proc_control_B.ct_l[132] = ct[92];
  proc_control_B.ct_l[133] = ct[94];
  proc_control_B.ct_l[134] = ct[95];
  proc_control_B.ct_l[135] = ct[96];
  proc_control_B.ct_l[136] = ct[97];
  proc_control_B.ct_l[137] = ct[19] * ct[1221];
  proc_control_B.ct_l[138] = ct[19] * ct[1223];
  proc_control_B.ct_l[139] = ct[20] * ct[1223];
  proc_control_B.ct_l[140] = ct[20] * ct[1224];
  proc_control_B.ct_l[141] = ct[15] * ct[1326];
  proc_control_B.ct_l[142] = ct[19] * ct[1226];
  proc_control_B.ct_l[143] = ct[20] * ct[1226];
  proc_control_B.ct_l[144] = ct[20] * ct[1227];
  proc_control_B.ct_l[145] = ct[20] * ct[1228];
  proc_control_B.ct_l[146] = ct[15] * ct[1334];
  proc_control_B.ct_l[147] = ct[99];
  proc_control_B.ct_l[148] = ct[101];
  proc_control_B.ct_l[149] = ct[102];
  proc_control_B.ct_l[150] = ct[19] * ct[1231];
  proc_control_B.ct_l[151] = ct[19] * ct[1233];
  proc_control_B.ct_l[152] = ct[20] * ct[1233];
  proc_control_B.ct_l[153] = ct[16] * ct[1317];
  proc_control_B.ct_l[154] = ct[20] * ct[1234];
  proc_control_B.ct_l[155] = ct[19] * ct[1236];
  proc_control_B.ct_l[156] = ct[20] * ct[1236];
  proc_control_B.ct_l[157] = ct[16] * ct[1328];
  proc_control_B.ct_l[158] = ct[20] * ct[1237];
  proc_control_B.ct_l[159] = ct[20] * ct[1239];
  proc_control_B.ct_l[160] = ct[104];
  proc_control_B.ct_l[161] = ct[105];
  proc_control_B.ct_l[162] = ct[106];
  proc_control_B.ct_l[163] = ct[107];
  proc_control_B.ct_l[164] = ct[108];
  std::memcpy(&proc_control_B.ct_l[165], &ct[110], 10U * sizeof(real_T));
  proc_control_B.ct_l[175] = ct[20] * ct[1242];
  proc_control_B.ct_l[176] = ct[19] * ct[1243];
  proc_control_B.ct_l[177] = ct[17] * ct[1312];
  proc_control_B.ct_l[178] = ct[20] * ct[1243];
  proc_control_B.ct_l[179] = ct[20] * ct[1245];
  proc_control_B.ct_l[180] = ct[19] * ct[1247];
  proc_control_B.ct_l[181] = ct[17] * ct[1320];
  proc_control_B.ct_l[182] = ct[20] * ct[1247];
  proc_control_B.ct_l[183] = ct[20] * ct[1248];
  proc_control_B.ct_l[184] = ct[120];
  proc_control_B.ct_l[185] = ct[20] * ct[1250];
  std::memcpy(&proc_control_B.ct_l[186], &ct[121], 116U * sizeof(real_T));
  proc_control_B.ct_l[302] = ct[18] * ct[1313];
  proc_control_B.ct_l[303] = ct[20] * ct[1312];
  proc_control_B.ct_l[304] = ct[20] * ct[1315];
  proc_control_B.ct_l[305] = ct[20] * ct[1320];
  proc_control_B.ct_l[306] = ct[19] * ct[1323];
  proc_control_B.ct_l[307] = ct[20] * ct[1324];
  proc_control_B.ct_l[308] = ct[20] * ct[1327];
  proc_control_B.ct_l[309] = ct[20] * ct[1329];
  proc_control_B.ct_l[310] = ct[237];
  proc_control_B.ct_l[311] = ct[20] * ct[1333];
  std::memcpy(&proc_control_B.ct_l[312], &ct[238], 33U * sizeof(real_T));
  proc_control_B.ct_l[345] = ct[271];
  proc_control_B.ct_l[346] = ct[273];
  proc_control_B.ct_l[347] = ct[274];
  proc_control_B.ct_l[348] = ct[275];
  proc_control_B.ct_l[349] = ct[276];
  proc_control_B.ct_l[350] = ct[19] * ct[1370];
  proc_control_B.ct_l[351] = ct[277];
  proc_control_B.ct_l[352] = ct[278];
  proc_control_B.ct_l[353] = ct[20] * ct[1373];
  proc_control_B.ct_l[354] = ct[279];
  proc_control_B.ct_l[355] = ct[280];
  proc_control_B.ct_l[356] = ct[281];
  proc_control_B.ct_l[357] = ct[282];
  proc_control_B.ct_l[358] = ct[283];
  proc_control_B.ct_l[359] = ct[284];
  proc_control_B.ct_l[360] = ct[285];
  proc_control_B.ct_l[361] = ct[286];
  std::memcpy(&proc_control_B.ct_l[362], &ct[288], 24U * sizeof(real_T));
  proc_control_B.ct_l[386] = ct[312];
  proc_control_B.ct_l[387] = ct[315];
  proc_control_B.ct_l[388] = ct[316];
  proc_control_B.ct_l[389] = ct[317];
  std::memcpy(&proc_control_B.ct_l[390], &ct[319], 68U * sizeof(real_T));
  proc_control_B.ct_l[458] = -ct[1153];
  proc_control_B.ct_l[459] = -ct[1154];
  proc_control_B.ct_l[460] = -ct[1158];
  proc_control_B.ct_l[461] = ct[387];
  proc_control_B.ct_l[462] = ct[388];
  proc_control_B.ct_l[463] = ct[389];
  proc_control_B.ct_l[464] = ct[390];
  proc_control_B.ct_l[465] = ct[391];
  proc_control_B.ct_l[466] = ct[392];
  proc_control_B.ct_l[467] = ct[393];
  proc_control_B.ct_l[468] = -ct[1169];
  proc_control_B.ct_l[469] = -ct[1172];
  proc_control_B.ct_l[470] = -ct[1175];
  proc_control_B.ct_l[471] = -ct[1176];
  proc_control_B.ct_l[472] = -ct[1179];
  proc_control_B.ct_l[473] = -ct[1180];
  proc_control_B.ct_l[474] = -ct[1183];
  proc_control_B.ct_l[475] = -ct[1185];
  proc_control_B.ct_l[476] = -ct[1187];
  proc_control_B.ct_l[477] = ct[394];
  proc_control_B.ct_l[478] = ct[395];
  proc_control_B.ct_l[479] = -ct[1188];
  proc_control_B.ct_l[480] = -ct[1189];
  proc_control_B.ct_l[481] = -ct[1192];
  proc_control_B.ct_l[482] = -ct[1194];
  proc_control_B.ct_l[483] = -ct[1196];
  proc_control_B.ct_l[484] = -ct[1197];
  proc_control_B.ct_l[485] = -ct[1200];
  proc_control_B.ct_l[486] = -ct[1201];
  proc_control_B.ct_l[487] = -ct[1204];
  proc_control_B.ct_l[488] = -ct[1206];
  proc_control_B.ct_l[489] = -ct[1207];
  proc_control_B.ct_l[490] = -ct[1210];
  proc_control_B.ct_l[491] = -ct[1211];
  proc_control_B.ct_l[492] = -ct[1213];
  proc_control_B.ct_l[493] = -ct[1214];
  proc_control_B.ct_l[494] = -ct[1215];
  proc_control_B.ct_l[495] = -ct[1217];
  std::memcpy(&proc_control_B.ct_l[496], &ct[396], 41U * sizeof(real_T));
  proc_control_B.ct_l[537] = -ct[1312];
  proc_control_B.ct_l[538] = -ct[1313];
  proc_control_B.ct_l[539] = -ct[1317];
  proc_control_B.ct_l[540] = -ct[1320];
  proc_control_B.ct_l[541] = -ct[1323];
  proc_control_B.ct_l[542] = -ct[1326];
  proc_control_B.ct_l[543] = -ct[1328];
  proc_control_B.ct_l[544] = -ct[1333];
  proc_control_B.ct_l[545] = -ct[1334];
  std::memcpy(&proc_control_B.ct_l[546], &ct[437], 36U * sizeof(real_T));
  proc_control_B.ct_l[582] = ct[473];
  std::memcpy(&proc_control_B.ct_l[583], &ct[475], 72U * sizeof(real_T));
  proc_control_B.ct_l[655] = ct[10] * ct[1594];
  proc_control_B.ct_l[656] = ct[547];
  proc_control_B.ct_l[657] = ct[548];
  proc_control_B.ct_l[658] = ct[9] * ct[1598];
  proc_control_B.ct_l[659] = ct[549];
  proc_control_B.ct_l[660] = ct[550];
  proc_control_B.ct_l[661] = ct[10] * ct[1596];
  proc_control_B.ct_l[662] = ct[9] * ct[1602];
  proc_control_B.ct_l[663] = ct[551];
  proc_control_B.ct_l[664] = ct[552];
  proc_control_B.ct_l[665] = ct[553];
  proc_control_B.ct_l[666] = ct[554];
  proc_control_B.ct_l[667] = ct[555];
  proc_control_B.ct_l[668] = ct[556];
  proc_control_B.ct_l[669] = ct[557];
  proc_control_B.ct_l[670] = ct[14] * ct[1594];
  proc_control_B.ct_l[671] = ct[12] * ct[1603];
  proc_control_B.ct_l[672] = ct[558];
  proc_control_B.ct_l[673] = ct[559];
  proc_control_B.ct_l[674] = ct[14] * ct[1600];
  proc_control_B.ct_l[675] = ct[560];
  proc_control_B.ct_l[676] = ct[12] * ct[1606];
  proc_control_B.ct_l[677] = ct[561];
  proc_control_B.ct_l[678] = ct[562];
  proc_control_B.ct_l[679] = ct[563];
  proc_control_B.ct_l[680] = ct[564];
  proc_control_B.ct_l[681] = ct[565];
  proc_control_B.ct_l[682] = ct[566];
  proc_control_B.ct_l[683] = ct[567];
  proc_control_B.ct_l[684] = ct[14] * ct[1614];
  proc_control_B.ct_l[685] = ct[568];
  proc_control_B.ct_l[686] = ct[13] * ct[1617];
  proc_control_B.ct_l[687] = ct[569];
  proc_control_B.ct_l[688] = ct[14] * ct[1616];
  proc_control_B.ct_l[689] = ct[13] * ct[1620];
  proc_control_B.ct_l[690] = ct[570];
  proc_control_B.ct_l[691] = ct[571];
  proc_control_B.ct_l[692] = ct[15] * ct[1612];
  proc_control_B.ct_l[693] = ct[572];
  proc_control_B.ct_l[694] = ct[15] * ct[1614];
  proc_control_B.ct_l[695] = ct[573];
  proc_control_B.ct_l[696] = ct[15] * ct[1626];
  proc_control_B.ct_l[697] = ct[574];
  proc_control_B.ct_l[698] = ct[15] * ct[1633];
  proc_control_B.ct_l[699] = ct[575];
  proc_control_B.ct_l[700] = ct[576];
  proc_control_B.ct_l[701] = ct[16] * ct[1594];
  proc_control_B.ct_l[702] = ct[577];
  proc_control_B.ct_l[703] = ct[16] * ct[1596];
  proc_control_B.ct_l[704] = ct[578];
  proc_control_B.ct_l[705] = ct[16] * ct[1631];
  proc_control_B.ct_l[706] = ct[579];
  proc_control_B.ct_l[707] = ct[16] * ct[1633];
  proc_control_B.ct_l[708] = ct[580];
  proc_control_B.ct_l[709] = ct[17] * ct[1594];
  proc_control_B.ct_l[710] = ct[581];
  proc_control_B.ct_l[711] = ct[17] * ct[1600];
  proc_control_B.ct_l[712] = ct[582];
  proc_control_B.ct_l[713] = ct[17] * ct[1614];
  proc_control_B.ct_l[714] = ct[583];
  proc_control_B.ct_l[715] = ct[17] * ct[1616];
  proc_control_B.ct_l[716] = ct[584];
  proc_control_B.ct_l[717] = ct[585];
  proc_control_B.ct_l[718] = ct[586];
  proc_control_B.ct_l[719] = ct[587];
  proc_control_B.ct_l[720] = ct[588];
  proc_control_B.ct_l[721] = ct[18] * ct[1596];
  proc_control_B.ct_l[722] = ct[19] * ct[1594];
  proc_control_B.ct_l[723] = ct[18] * ct[1600];
  proc_control_B.ct_l[724] = ct[20] * ct[1594];
  std::memcpy(&proc_control_B.ct_l[725], &ct[589], 29U * sizeof(real_T));
  proc_control_B.ct_l[754] = ct[618];
  proc_control_B.ct_l[755] = ct[620];
  proc_control_B.ct_l[756] = ct[624];
  proc_control_B.ct_l[757] = ct[626];
  proc_control_B.ct_l[758] = ct[627];
  proc_control_B.ct_l[759] = ct[628];
  proc_control_B.ct_l[760] = ct[629];
  proc_control_B.ct_l[761] = ct[630];
  std::memcpy(&proc_control_B.ct_l[762], &ct[633], 9U * sizeof(real_T));
  proc_control_B.ct_l[771] = ct[645];
  proc_control_B.ct_l[772] = ct[647];
  proc_control_B.ct_l[773] = ct[649];
  proc_control_B.ct_l[774] = ct[653];
  proc_control_B.ct_l[775] = ct[654];
  proc_control_B.ct_l[776] = ct[656];
  proc_control_B.ct_l[777] = ct[657];
  proc_control_B.ct_l[778] = ct[658];
  proc_control_B.ct_l[779] = ct[659];
  proc_control_B.ct_l[780] = ct[660];
  proc_control_B.ct_l[781] = ct[661];
  proc_control_B.ct_l[782] = ct[662];
  proc_control_B.ct_l[783] = ct[665];
  proc_control_B.ct_l[784] = ct[666];
  proc_control_B.ct_l[785] = ct[667];
  proc_control_B.ct_l[786] = ct[668];
  proc_control_B.ct_l[787] = ct[669];
  proc_control_B.ct_l[788] = ct[670];
  proc_control_B.ct_l[789] = ct[674];
  proc_control_B.ct_l[790] = ct[676];
  proc_control_B.ct_l[791] = ct[678];
  proc_control_B.ct_l[792] = ct[679];
  proc_control_B.ct_l[793] = ct[680];
  proc_control_B.ct_l[794] = ct[681];
  proc_control_B.ct_l[795] = ct[682];
  proc_control_B.ct_l[796] = ct[690];
  proc_control_B.ct_l[797] = ct[691];
  std::memcpy(&proc_control_B.ct_l[798], &ct[697], 40U * sizeof(real_T));
  proc_control_B.ct_l[838] = ct[738];
  proc_control_B.ct_l[839] = ct[740];
  proc_control_B.ct_l[840] = ct[741];
  proc_control_B.ct_l[841] = ct[742];
  proc_control_B.ct_l[842] = ct[743];
  proc_control_B.ct_l[843] = ct[744];
  proc_control_B.ct_l[844] = ct[745];
  proc_control_B.ct_l[845] = ct[747];
  proc_control_B.ct_l[846] = ct[749];
  proc_control_B.ct_l[847] = ct[751];
  proc_control_B.ct_l[848] = ct[752];
  proc_control_B.ct_l[849] = ct[753];
  proc_control_B.ct_l[850] = ct[754];
  proc_control_B.ct_l[851] = ct[755];
  proc_control_B.ct_l[852] = ct[756];
  proc_control_B.ct_l[853] = ct[757];
  proc_control_B.ct_l[854] = ct[759];
  std::memcpy(&proc_control_B.ct_l[855], &ct[761], 25U * sizeof(real_T));
  proc_control_B.ct_l[880] = ct[786];
  std::memcpy(&proc_control_B.ct_l[881], &ct[788], 99U * sizeof(real_T));
  proc_control_B.ct_l[980] = -ct[314];
  proc_control_B.ct_l[981] = -ct[316];
  proc_control_B.ct_l[982] = -ct[317];
  proc_control_B.ct_l[983] = -ct[318];
  proc_control_B.ct_l[984] = -ct[320];
  proc_control_B.ct_l[985] = ct[887];
  proc_control_B.ct_l[986] = -ct[323];
  proc_control_B.ct_l[987] = -ct[324];
  std::memcpy(&proc_control_B.ct_l[988], &ct[888], 9U * sizeof(real_T));
  proc_control_B.ct_l[997] = ct[1156] * ct[1252];
  proc_control_B.ct_l[998] = ct[1156] * ct[1253];
  proc_control_B.ct_l[999] = ct[1156] * ct[1254];
  proc_control_B.ct_l[1000] = ct[1156] * ct[1255];
  proc_control_B.ct_l[1001] = ct[1156] * ct[1257];
  proc_control_B.ct_l[1002] = ct[1156] * ct[1258];
  proc_control_B.ct_l[1003] = ct[1156] * ct[1259];
  proc_control_B.ct_l[1004] = ct[897];
  proc_control_B.ct_l[1005] = ct[1156] * ct[1260];
  proc_control_B.ct_l[1006] = ct[1171] * ct[1266];
  proc_control_B.ct_l[1007] = ct[1171] * ct[1267];
  proc_control_B.ct_l[1008] = ct[1202] * ct[1266];
  proc_control_B.ct_l[1009] = ct[1202] * ct[1267];
  proc_control_B.ct_l[1010] = ct[898];
  proc_control_B.ct_l[1011] = ct[1171] * ct[1270];
  proc_control_B.ct_l[1012] = ct[1171] * ct[1271];
  proc_control_B.ct_l[1013] = ct[1171] * ct[1274];
  proc_control_B.ct_l[1014] = ct[1171] * ct[1275];
  proc_control_B.ct_l[1015] = ct[1156] * ct[1278];
  proc_control_B.ct_l[1016] = ct[1156] * ct[1280];
  proc_control_B.ct_l[1017] = ct[899];
  proc_control_B.ct_l[1018] = ct[1202] * ct[1278];
  proc_control_B.ct_l[1019] = ct[1202] * ct[1280];
  proc_control_B.ct_l[1020] = ct[1171] * ct[1283];
  proc_control_B.ct_l[1021] = ct[1171] * ct[1284];
  proc_control_B.ct_l[1022] = ct[1171] * ct[1287];
  proc_control_B.ct_l[1023] = ct[1171] * ct[1288];
  proc_control_B.ct_l[1024] = ct[1156] * ct[1291];
  proc_control_B.ct_l[1025] = ct[1156] * ct[1292];
  proc_control_B.ct_l[1026] = ct[1171] * ct[1291];
  proc_control_B.ct_l[1027] = ct[1171] * ct[1292];
  proc_control_B.ct_l[1028] = ct[1202] * ct[1298];
  proc_control_B.ct_l[1029] = ct[901];
  proc_control_B.ct_l[1030] = ct[1202] * ct[1299];
  proc_control_B.ct_l[1031] = ct[1202] * ct[1300];
  proc_control_B.ct_l[1032] = ct[1202] * ct[1301];
  proc_control_B.ct_l[1033] = ct[1202] * ct[1303];
  proc_control_B.ct_l[1034] = ct[1202] * ct[1304];
  proc_control_B.ct_l[1035] = ct[1202] * ct[1305];
  proc_control_B.ct_l[1036] = ct[1202] * ct[1306];
  proc_control_B.ct_l[1037] = ct[902];
  proc_control_B.ct_l[1038] = ct[1156] * ct[1307];
  proc_control_B.ct_l[1039] = ct[1156] * ct[1309];
  proc_control_B.ct_l[1040] = ct[1156] * ct[1310];
  proc_control_B.ct_l[1041] = ct[1156] * ct[1311];
  proc_control_B.ct_l[1042] = ct[903];
  proc_control_B.ct_l[1043] = ct[7] * ct[680];
  proc_control_B.ct_l[1044] = ct[8] * ct[681];
  proc_control_B.ct_l[1045] = ct[9] * ct[680];
  proc_control_B.ct_l[1046] = ct[11] * ct[682];
  proc_control_B.ct_l[1047] = ct[12] * ct[681];
  proc_control_B.ct_l[1048] = ct[904];
  proc_control_B.ct_l[1049] = ct[13] * ct[682];
  proc_control_B.ct_l[1050] = ct[1171] * ct[1335];
  proc_control_B.ct_l[1051] = ct[1202] * ct[1338];
  proc_control_B.ct_l[1052] = ct[905];
  proc_control_B.ct_l[1053] = ct[1156] * ct[1341];
  proc_control_B.ct_l[1054] = ct[1171] * ct[1342];
  proc_control_B.ct_l[1055] = ct[1202] * ct[1342];
  proc_control_B.ct_l[1056] = ct[906];
  proc_control_B.ct_l[1057] = ct[1156] * ct[1348];
  proc_control_B.ct_l[1058] = ct[1171] * ct[1347];
  proc_control_B.ct_l[1059] = ct[1171] * ct[1351];
  proc_control_B.ct_l[1060] = ct[1171] * ct[1353];
  proc_control_B.ct_l[1061] = ct[1202] * ct[1353];
  proc_control_B.ct_l[1062] = ct[1171] * ct[1354];
  proc_control_B.ct_l[1063] = ct[1202] * ct[1358];
  proc_control_B.ct_l[1064] = ct[1156] * ct[1364];
  proc_control_B.ct_l[1065] = ct[907];
  proc_control_B.ct_l[1066] = ct[908];
  proc_control_B.ct_l[1067] = ct[1202] * ct[1366];
  proc_control_B.ct_l[1068] = ct[1202] * ct[1367];
  proc_control_B.ct_l[1069] = ct[1156] * ct[1372];
  proc_control_B.ct_l[1070] = ct[1171] * ct[1371];
  proc_control_B.ct_l[1071] = ct[909];
  proc_control_B.ct_l[1072] = ct[1156] * ct[1374];
  proc_control_B.ct_l[1073] = ct[1156] * ct[1375];
  proc_control_B.ct_l[1074] = ct[1171] * ct[1374];
  proc_control_B.ct_l[1075] = ct[1202] * ct[1375];
  proc_control_B.ct_l[1076] = ct[19] * ct[620];
  proc_control_B.ct_l[1077] = ct[20] * ct[620];
  proc_control_B.ct_l[1078] = ct[19] * ct[622];
  proc_control_B.ct_l[1079] = ct[20] * ct[622];
  proc_control_B.ct_l[1080] = ct[19] * ct[624];
  proc_control_B.ct_l[1081] = ct[20] * ct[624];
  proc_control_B.ct_l[1082] = ct[18] * ct[627];
  proc_control_B.ct_l[1083] = ct[19] * ct[626];
  proc_control_B.ct_l[1084] = ct[18] * ct[629];
  proc_control_B.ct_l[1085] = ct[18] * ct[630];
  proc_control_B.ct_l[1086] = ct[19] * ct[631];
  proc_control_B.ct_l[1087] = ct[20] * ct[631];
  proc_control_B.ct_l[1088] = ct[18] * ct[633];
  proc_control_B.ct_l[1089] = ct[18] * ct[635];
  proc_control_B.ct_l[1090] = ct[914];
  proc_control_B.ct_l[1091] = ct[18] * ct[637];
  proc_control_B.ct_l[1092] = ct[20] * ct[634];
  proc_control_B.ct_l[1093] = ct[1171] * ct[1376];
  proc_control_B.ct_l[1094] = ct[1202] * ct[1376];
  proc_control_B.ct_l[1095] = ct[1202] * ct[1377];
  proc_control_B.ct_l[1096] = ct[18] * ct[639];
  proc_control_B.ct_l[1097] = ct[915];
  proc_control_B.ct_l[1098] = ct[19] * ct[638];
  proc_control_B.ct_l[1099] = ct[18] * ct[641];
  proc_control_B.ct_l[1100] = ct[19] * ct[642];
  proc_control_B.ct_l[1101] = ct[20] * ct[641];
  proc_control_B.ct_l[1102] = ct[19] * ct[644];
  proc_control_B.ct_l[1103] = ct[18] * ct[645];
  proc_control_B.ct_l[1104] = ct[20] * ct[645];
  proc_control_B.ct_l[1105] = ct[18] * ct[649];
  proc_control_B.ct_l[1106] = ct[20] * ct[649];
  proc_control_B.ct_l[1107] = ct[19] * ct[651];
  proc_control_B.ct_l[1108] = ct[18] * ct[653];
  proc_control_B.ct_l[1109] = ct[19] * ct[652];
  proc_control_B.ct_l[1110] = ct[20] * ct[653];
  proc_control_B.ct_l[1111] = ct[19] * ct[657];
  proc_control_B.ct_l[1112] = ct[20] * ct[656];
  proc_control_B.ct_l[1113] = ct[1171] * ct[1378];
  proc_control_B.ct_l[1114] = ct[18] * ct[661];
  proc_control_B.ct_l[1115] = ct[20] * ct[658];
  proc_control_B.ct_l[1116] = ct[20] * ct[660];
  proc_control_B.ct_l[1117] = ct[922];
  proc_control_B.ct_l[1118] = ct[20] * ct[662];
  proc_control_B.ct_l[1119] = ct[18] * ct[663];
  proc_control_B.ct_l[1120] = ct[19] * ct[663];
  proc_control_B.ct_l[1121] = ct[20] * ct[665];
  proc_control_B.ct_l[1122] = ct[20] * ct[666];
  proc_control_B.ct_l[1123] = ct[19] * ct[669];
  proc_control_B.ct_l[1124] = ct[20] * ct[668];
  proc_control_B.ct_l[1125] = ct[925];
  proc_control_B.ct_l[1126] = ct[18] * ct[670];
  proc_control_B.ct_l[1127] = ct[19] * ct[670];
  proc_control_B.ct_l[1128] = ct[18] * ct[672];
  proc_control_B.ct_l[1129] = ct[19] * ct[672];
  proc_control_B.ct_l[1130] = ct[18] * ct[674];
  proc_control_B.ct_l[1131] = ct[19] * ct[674];
  proc_control_B.ct_l[1132] = ct[1202] * ct[1379];
  proc_control_B.ct_l[1133] = ct[18] * ct[684];
  proc_control_B.ct_l[1134] = ct[19] * ct[683];
  proc_control_B.ct_l[1135] = ct[18] * ct[686];
  proc_control_B.ct_l[1136] = ct[19] * ct[685];
  proc_control_B.ct_l[1137] = ct[18] * ct[688];
  proc_control_B.ct_l[1138] = ct[20] * ct[687];
  proc_control_B.ct_l[1139] = ct[18] * ct[692];
  proc_control_B.ct_l[1140] = ct[20] * ct[689];
  proc_control_B.ct_l[1141] = ct[19] * ct[695];
  proc_control_B.ct_l[1142] = ct[20] * ct[693];
  proc_control_B.ct_l[1143] = ct[19] * ct[696];
  proc_control_B.ct_l[1144] = ct[20] * ct[694];
  proc_control_B.ct_l[1145] = ct[927];
  proc_control_B.ct_l[1146] = ct[929];
  proc_control_B.ct_l[1147] = ct[930];
  proc_control_B.ct_l[1148] = ct[931];
  proc_control_B.ct_l[1149] = ct[933];
  proc_control_B.ct_l[1150] = ct[936];
  proc_control_B.ct_l[1151] = ct[937];
  proc_control_B.ct_l[1152] = ct[940];
  proc_control_B.ct_l[1153] = ct[941];
  proc_control_B.ct_l[1154] = ct[944];
  proc_control_B.ct_l[1155] = ct[946];
  proc_control_B.ct_l[1156] = ct[947];
  proc_control_B.ct_l[1157] = ct[948];
  proc_control_B.ct_l[1158] = ct[950];
  proc_control_B.ct_l[1159] = ct[19] * ct[20] * ct[21] * ct[1156] * ct[1290];
  proc_control_B.ct_l[1160] = ct[952];
  proc_control_B.ct_l[1161] = ct[18] * ct[20] * ct[22] * ct[1171] * ct[1290];
  proc_control_B.ct_l[1162] = ct[953];
  proc_control_B.ct_l[1163] = ct[18] * ct[19] * ct[23] * ct[1202] * ct[1290];
  std::memcpy(&proc_control_B.ct_l[1164], &ct[954], 10U * sizeof(real_T));
  proc_control_B.ct_l[1174] = (ct[0] + ct[1512]) + ct[91];
  proc_control_B.ct_l[1175] = (ct[1] + ct[1523]) + ct[93];
  proc_control_B.ct_l[1176] = (ct[2] + ct[1534]) + ct[98];
  std::memcpy(&proc_control_B.ct_l[1177], &ct[964], 17U * sizeof(real_T));
  proc_control_B.ct_tmp_ak = ct[18] * ct[1171] * ct[1290];
  proc_control_B.ct_l[1194] = proc_control_B.ct_tmp_ak * ct[87];
  proc_control_B.ct_tmp_e4t = ct[19] * ct[1156] * ct[1290];
  proc_control_B.ct_l[1195] = proc_control_B.ct_tmp_e4t * ct[87];
  proc_control_B.ct_tmp_g4 = ct[18] * ct[1202] * ct[1290];
  proc_control_B.ct_l[1196] = proc_control_B.ct_tmp_g4 * ct[87];
  proc_control_B.ct_tmp_fp5 = ct[20] * ct[1156] * ct[1290];
  proc_control_B.ct_l[1197] = proc_control_B.ct_tmp_fp5 * ct[87];
  proc_control_B.ct_l[1198] = proc_control_B.ct_tmp_ak * ct[88];
  proc_control_B.ct_l[1199] = proc_control_B.ct_tmp_e4t * ct[88];
  proc_control_B.ct_tmp_ak = ct[19] * ct[1202] * ct[1290];
  proc_control_B.ct_l[1200] = proc_control_B.ct_tmp_ak * ct[88];
  proc_control_B.ct_tmp_e4t = ct[20] * ct[1171] * ct[1290];
  proc_control_B.ct_l[1201] = proc_control_B.ct_tmp_e4t * ct[88];
  proc_control_B.ct_l[1202] = proc_control_B.ct_tmp_g4 * ct[89];
  proc_control_B.ct_l[1203] = proc_control_B.ct_tmp_fp5 * ct[89];
  proc_control_B.ct_l[1204] = ct[981];
  proc_control_B.ct_l[1205] = proc_control_B.ct_tmp_ak * ct[89];
  proc_control_B.ct_l[1206] = proc_control_B.ct_tmp_e4t * ct[89];
  proc_control_B.ct_l[1207] = -ct[619];
  proc_control_B.ct_l[1208] = -ct[620];
  proc_control_B.ct_l[1209] = -ct[621];
  proc_control_B.ct_l[1210] = -ct[622];
  proc_control_B.ct_l[1211] = -ct[623];
  proc_control_B.ct_l[1212] = -ct[624];
  proc_control_B.ct_l[1213] = ct[982];
  proc_control_B.ct_l[1214] = -ct[625];
  proc_control_B.ct_l[1215] = -ct[629];
  proc_control_B.ct_l[1216] = -ct[630];
  proc_control_B.ct_l[1217] = -ct[631];
  proc_control_B.ct_l[1218] = -ct[632];
  proc_control_B.ct_l[1219] = -ct[633];
  proc_control_B.ct_l[1220] = -ct[635];
  proc_control_B.ct_l[1221] = -ct[641];
  proc_control_B.ct_l[1222] = -ct[642];
  proc_control_B.ct_l[1223] = -ct[643];
  proc_control_B.ct_l[1224] = ct[983];
  proc_control_B.ct_l[1225] = -ct[644];
  proc_control_B.ct_l[1226] = -ct[645];
  proc_control_B.ct_l[1227] = -ct[646];
  proc_control_B.ct_l[1228] = -ct[648];
  proc_control_B.ct_l[1229] = -ct[649];
  proc_control_B.ct_l[1230] = -ct[650];
  proc_control_B.ct_l[1231] = -ct[651];
  proc_control_B.ct_l[1232] = -ct[652];
  proc_control_B.ct_l[1233] = -ct[653];
  proc_control_B.ct_l[1234] = -ct[655];
  proc_control_B.ct_l[1235] = -ct[660];
  proc_control_B.ct_l[1236] = -ct[662];
  proc_control_B.ct_l[1237] = -ct[663];
  proc_control_B.ct_l[1238] = -ct[664];
  proc_control_B.ct_l[1239] = -ct[665];
  proc_control_B.ct_l[1240] = -ct[666];
  proc_control_B.ct_l[1241] = -ct[670];
  proc_control_B.ct_l[1242] = -ct[671];
  proc_control_B.ct_l[1243] = -ct[672];
  proc_control_B.ct_l[1244] = ct[984];
  proc_control_B.ct_l[1245] = -ct[673];
  proc_control_B.ct_l[1246] = -ct[674];
  proc_control_B.ct_l[1247] = -ct[675];
  proc_control_B.ct_l[1248] = -ct[677];
  std::memcpy(&proc_control_B.ct_l[1249], &ct[985], 26U * sizeof(real_T));
  proc_control_B.ct_l[1275] = ct[87] * ct[305];
  proc_control_B.ct_l[1276] = ct[20] * ct[809];
  proc_control_B.ct_l[1277] = ct[87] * ct[309];
  proc_control_B.ct_l[1278] = ct[1011];
  proc_control_B.ct_l[1279] = ct[88] * ct[286];
  proc_control_B.ct_l[1280] = ct[88] * ct[293];
  proc_control_B.ct_l[1281] = ct[20] * ct[821];
  proc_control_B.ct_l[1282] = ct[19] * ct[823];
  proc_control_B.ct_l[1283] = ct[87] * ct[321];
  proc_control_B.ct_l[1284] = ct[1012];
  proc_control_B.ct_l[1285] = ct[87] * ct[325];
  proc_control_B.ct_l[1286] = ct[89] * ct[283];
  proc_control_B.ct_l[1287] = ct[89] * ct[288];
  proc_control_B.ct_l[1288] = ct[20] * ct[841];
  proc_control_B.ct_l[1289] = ct[19] * ct[846];
  proc_control_B.ct_l[1290] = ct[1013];
  proc_control_B.ct_l[1291] = ct[20] * ct[847];
  proc_control_B.ct_l[1292] = ct[89] * ct[299];
  proc_control_B.ct_l[1293] = ct[88] * ct[315];
  proc_control_B.ct_l[1294] = ct[89] * ct[303];
  proc_control_B.ct_l[1295] = ct[1014];
  proc_control_B.ct_l[1296] = ct[88] * ct[322];
  proc_control_B.ct_l[1297] = ct[1015];
  proc_control_B.ct_l[1298] = ct[1016];
  proc_control_B.ct_l[1299] = ct[1017];
  proc_control_B.ct_l[1300] = ct[1018];
  proc_control_B.ct_l[1301] = ct[19] * ct[889];
  proc_control_B.ct_l[1302] = ct[20] * ct[891];
  proc_control_B.ct_l[1303] = ct[19] * ct[893];
  proc_control_B.ct_l[1304] = -ct[737];
  proc_control_B.ct_l[1305] = -ct[739];
  proc_control_B.ct_l[1306] = ct[1019];
  proc_control_B.ct_l[1307] = -ct[744];
  proc_control_B.ct_l[1308] = -ct[746];
  proc_control_B.ct_l[1309] = -ct[748];
  proc_control_B.ct_l[1310] = -ct[750];
  proc_control_B.ct_l[1311] = -ct[752];
  proc_control_B.ct_l[1312] = -ct[758];
  proc_control_B.ct_l[1313] = -ct[760];
  proc_control_B.ct_l[1314] = ct[6] * ct[894];
  proc_control_B.ct_l[1315] = ct[1020];
  proc_control_B.ct_l[1316] = ct[6] * ct[895];
  proc_control_B.ct_l[1317] = ct[10] * ct[894];
  proc_control_B.ct_l[1318] = ct[10] * ct[896];
  proc_control_B.ct_l[1319] = ct[1021];
  proc_control_B.ct_l[1320] = ct[14] * ct[895];
  proc_control_B.ct_l[1321] = ct[14] * ct[896];
  proc_control_B.ct_l[1322] = ct[1022];
  proc_control_B.ct_tmp_ak = ct[21] * ct[1156];
  proc_control_B.ct_l[1323] = proc_control_B.ct_tmp_ak * ct[1171] * ct[1290];
  proc_control_B.ct_l[1324] = proc_control_B.ct_tmp_ak * ct[1202] * ct[1290];
  proc_control_B.ct_tmp_e4t = ct[22] * ct[1156];
  proc_control_B.ct_l[1325] = proc_control_B.ct_tmp_e4t * ct[1171] * ct[1290];
  proc_control_B.ct_l[1326] = ct[1023];
  proc_control_B.ct_tmp_g4 = ct[22] * ct[1171];
  proc_control_B.ct_l[1327] = proc_control_B.ct_tmp_g4 * ct[1202] * ct[1290];
  proc_control_B.ct_tmp_fp5 = ct[23] * ct[1156];
  proc_control_B.ct_l[1328] = proc_control_B.ct_tmp_fp5 * ct[1202] * ct[1290];
  proc_control_B.ct_tmp_ei = ct[23] * ct[1171];
  proc_control_B.ct_l[1329] = proc_control_B.ct_tmp_ei * ct[1202] * ct[1290];
  proc_control_B.ct_l[1330] = ct[1024];
  proc_control_B.ct_l[1331] = ct[1025];
  proc_control_B.ct_l[1332] = ct[1026];
  proc_control_B.ct_l[1333] = proc_control_B.ct_tmp_ak * ct[341];
  proc_control_B.ct_l[1334] = ct[1027];
  proc_control_B.ct_l[1335] = proc_control_B.ct_tmp_ak * ct[342];
  proc_control_B.ct_l[1336] = ct[1028];
  proc_control_B.ct_l[1337] = proc_control_B.ct_tmp_g4 * ct[341];
  proc_control_B.ct_l[1338] = ct[1029];
  proc_control_B.ct_l[1339] = proc_control_B.ct_tmp_e4t * ct[342];
  proc_control_B.ct_l[1340] = ct[1030];
  proc_control_B.ct_l[1341] = ct[1031];
  proc_control_B.ct_tmp_bw = ct[22] * ct[1202];
  proc_control_B.ct_l[1342] = proc_control_B.ct_tmp_bw * ct[342];
  proc_control_B.ct_l[1343] = ct[1032];
  proc_control_B.ct_l[1344] = proc_control_B.ct_tmp_ak * ct[344];
  proc_control_B.ct_l[1345] = ct[1033];
  proc_control_B.ct_tmp_nu = ct[21] * ct[1171];
  proc_control_B.ct_l[1346] = proc_control_B.ct_tmp_nu * ct[345];
  proc_control_B.ct_l[1347] = ct[1034];
  proc_control_B.ct_tmp_mzf = ct[21] * ct[1202];
  proc_control_B.ct_l[1348] = proc_control_B.ct_tmp_mzf * ct[345];
  proc_control_B.ct_l[1349] = ct[1035];
  proc_control_B.ct_l[1350] = proc_control_B.ct_tmp_fp5 * ct[341];
  proc_control_B.ct_l[1351] = ct[1036];
  proc_control_B.ct_l[1352] = ct[1037];
  proc_control_B.ct_l[1353] = proc_control_B.ct_tmp_ei * ct[341];
  proc_control_B.ct_l[1354] = ct[1038];
  proc_control_B.ct_tmp_nh = ct[23] * ct[1202];
  proc_control_B.ct_l[1355] = proc_control_B.ct_tmp_nh * ct[342];
  proc_control_B.ct_l[1356] = ct[1039];
  proc_control_B.ct_l[1357] = ct[1040];
  proc_control_B.ct_l[1358] = proc_control_B.ct_tmp_ak * ct[346];
  proc_control_B.ct_l[1359] = proc_control_B.ct_tmp_g4 * ct[344];
  proc_control_B.ct_l[1360] = ct[1041];
  proc_control_B.ct_l[1361] = proc_control_B.ct_tmp_nu * ct[347];
  proc_control_B.ct_l[1362] = ct[1042];
  proc_control_B.ct_l[1363] = ct[1043];
  proc_control_B.ct_l[1364] = proc_control_B.ct_tmp_mzf * ct[347];
  proc_control_B.ct_l[1365] = ct[1044];
  proc_control_B.ct_l[1366] = proc_control_B.ct_tmp_g4 * ct[345];
  proc_control_B.ct_l[1367] = ct[1045];
  proc_control_B.ct_l[1368] = ct[1046];
  proc_control_B.ct_l[1369] = proc_control_B.ct_tmp_fp5 * ct[344];
  proc_control_B.ct_l[1370] = ct[1047];
  proc_control_B.ct_l[1371] = proc_control_B.ct_tmp_e4t * ct[346];
  proc_control_B.ct_l[1372] = proc_control_B.ct_tmp_ei * ct[344];
  proc_control_B.ct_l[1373] = ct[1048];
  proc_control_B.ct_l[1374] = ct[1049];
  proc_control_B.ct_l[1375] = proc_control_B.ct_tmp_bw * ct[346];
  proc_control_B.ct_l[1376] = ct[1050];
  proc_control_B.ct_l[1377] = proc_control_B.ct_tmp_g4 * ct[347];
  proc_control_B.ct_l[1378] = ct[1051];
  proc_control_B.ct_l[1379] = proc_control_B.ct_tmp_nh * ct[345];
  proc_control_B.ct_l[1380] = ct[1052];
  proc_control_B.ct_l[1381] = proc_control_B.ct_tmp_nh * ct[346];
  proc_control_B.ct_l[1382] = ct[1053];
  proc_control_B.ct_l[1383] = proc_control_B.ct_tmp_nh * ct[347];
  proc_control_B.ct_l[1384] = ct[1054];
  proc_control_B.ct_l[1385] = ct[1055];
  proc_control_B.ct_l[1386] = -ct[910];
  proc_control_B.ct_l[1387] = -ct[911];
  proc_control_B.ct_l[1388] = -ct[912];
  proc_control_B.ct_l[1389] = -ct[913];
  proc_control_B.ct_l[1390] = ct[1056];
  proc_control_B.ct_l[1391] = -ct[916];
  proc_control_B.ct_l[1392] = -ct[917];
  proc_control_B.ct_l[1393] = ct[1057];
  proc_control_B.ct_l[1394] = -ct[918];
  proc_control_B.ct_l[1395] = -ct[919];
  proc_control_B.ct_l[1396] = -ct[920];
  proc_control_B.ct_l[1397] = -ct[921];
  proc_control_B.ct_l[1398] = ct[1058];
  proc_control_B.ct_l[1399] = -ct[923];
  proc_control_B.ct_l[1400] = -ct[924];
  proc_control_B.ct_l[1401] = ct[1059];
  proc_control_B.ct_l[1402] = -ct[926];
  proc_control_B.ct_l[1403] = -ct[928];
  proc_control_B.ct_l[1404] = -ct[932];
  proc_control_B.ct_l[1405] = -ct[934];
  proc_control_B.ct_l[1406] = -ct[935];
  proc_control_B.ct_l[1407] = -ct[938];
  proc_control_B.ct_l[1408] = -ct[939];
  proc_control_B.ct_l[1409] = -ct[942];
  proc_control_B.ct_l[1410] = ct[1060];
  proc_control_B.ct_l[1411] = -ct[943];
  proc_control_B.ct_l[1412] = -ct[945];
  proc_control_B.ct_l[1413] = -ct[949];
  proc_control_B.ct_l[1414] = -ct[951];
  proc_control_B.ct_l[1415] = proc_control_B.ct_tmp_fp5 * ct[455];
  proc_control_B.ct_l[1416] = ct[1061];
  proc_control_B.ct_l[1417] = proc_control_B.ct_tmp_e4t * ct[459];
  proc_control_B.ct_l[1418] = proc_control_B.ct_tmp_ei * ct[458];
  proc_control_B.ct_l[1419] = proc_control_B.ct_tmp_g4 * ct[462];
  proc_control_B.ct_l[1420] = proc_control_B.ct_tmp_nh * ct[461];
  proc_control_B.ct_l[1421] = proc_control_B.ct_tmp_nh * ct[462];
  proc_control_B.ct_tmp_ak = ct[1156] * ct[1171] * ct[1290];
  proc_control_B.ct_l[1422] = proc_control_B.ct_tmp_ak * ct[87];
  proc_control_B.ct_l[1423] = ct[87] * ct[894];
  proc_control_B.ct_tmp_e4t = ct[1156] * ct[1202] * ct[1290];
  proc_control_B.ct_l[1424] = proc_control_B.ct_tmp_e4t * ct[87];
  proc_control_B.ct_l[1425] = ct[87] * ct[895];
  proc_control_B.ct_l[1426] = proc_control_B.ct_tmp_ak * ct[88];
  proc_control_B.ct_l[1427] = ct[1062];
  proc_control_B.ct_l[1428] = ct[88] * ct[894];
  proc_control_B.ct_tmp_ak = ct[1171] * ct[1202] * ct[1290];
  proc_control_B.ct_l[1429] = proc_control_B.ct_tmp_ak * ct[88];
  proc_control_B.ct_l[1430] = ct[88] * ct[896];
  proc_control_B.ct_l[1431] = proc_control_B.ct_tmp_e4t * ct[89];
  proc_control_B.ct_l[1432] = ct[89] * ct[895];
  proc_control_B.ct_l[1433] = proc_control_B.ct_tmp_ak * ct[89];
  proc_control_B.ct_l[1434] = ct[89] * ct[896];
  proc_control_B.ct_l[1435] = ct[1063];
  proc_control_B.ct_l[1436] = ct[1064];
  proc_control_B.ct_l[1437] = (((((ct[3] + ct[787]) + ct[1490]) + ct[43]) + ct
    [83]) + ct[109]) + ct[272];
  proc_control_B.ct_l[1438] = (((((ct[4] + ct[900]) + ct[1495]) + ct[1607]) +
    ct[83]) + ct[100]) + ct[287];
  proc_control_B.ct_l[1439] = (((((ct[5] + ct[474]) + ct[1504]) + ct[1607]) +
    ct[43]) + ct[103]) + ct[313];
  std::memcpy(&proc_control_B.ct_l[1440], &ct[1065], 87U * sizeof(real_T));
  proc_control_B.ct_l[1527] = ct[1152];
  proc_control_B.ct_l[1528] = ct[1155];
  proc_control_B.ct_l[1529] = ct[1156];
  proc_control_B.ct_l[1530] = ct[1157];
  std::memcpy(&proc_control_B.ct_l[1531], &ct[1159], 9U * sizeof(real_T));
  proc_control_B.ct_l[1540] = ct[1168];
  proc_control_B.ct_l[1541] = ct[1170];
  proc_control_B.ct_l[1542] = ct[1171];
  proc_control_B.ct_l[1543] = ct[1173];
  proc_control_B.ct_l[1544] = ct[1174];
  proc_control_B.ct_l[1545] = ct[1177];
  proc_control_B.ct_l[1546] = ct[1178];
  proc_control_B.ct_l[1547] = ct[1181];
  proc_control_B.ct_l[1548] = ct[1182];
  proc_control_B.ct_l[1549] = ct[1184];
  proc_control_B.ct_l[1550] = ct[1186];
  proc_control_B.ct_l[1551] = ct[1190];
  proc_control_B.ct_l[1552] = ct[1191];
  proc_control_B.ct_l[1553] = ct[1193];
  proc_control_B.ct_l[1554] = ct[1195];
  proc_control_B.ct_l[1555] = ct[1198];
  proc_control_B.ct_l[1556] = ct[1199];
  proc_control_B.ct_l[1557] = ct[1200];
  proc_control_B.ct_l[1558] = ct[1201];
  proc_control_B.ct_l[1559] = ct[1202];
  proc_control_B.ct_l[1560] = ct[1203];
  proc_control_B.ct_l[1561] = ct[1205];
  proc_control_B.ct_l[1562] = ct[1208];
  proc_control_B.ct_l[1563] = ct[1209];
  proc_control_B.ct_l[1564] = ct[1212];
  proc_control_B.ct_l[1565] = ct[1213];
  proc_control_B.ct_l[1566] = ct[1215];
  proc_control_B.ct_l[1567] = ct[1216];
  proc_control_B.ct_l[1568] = ct[1218];
  proc_control_B.ct_l[1569] = ct[1219];
  proc_control_B.ct_l[1570] = ct[1220];
  proc_control_B.ct_l[1571] = ct[1221];
  proc_control_B.ct_l[1572] = ct[1222];
  proc_control_B.ct_l[1573] = ct[1224];
  proc_control_B.ct_l[1574] = ct[1225];
  std::memcpy(&proc_control_B.ct_l[1575], &ct[1227], 24U * sizeof(real_T));
  proc_control_B.ct_l[1599] = ct[1251];
  proc_control_B.ct_l[1600] = ct[1253];
  proc_control_B.ct_l[1601] = ct[1254];
  proc_control_B.ct_l[1602] = ct[1255];
  proc_control_B.ct_l[1603] = ct[1256];
  proc_control_B.ct_l[1604] = ct[1257];
  proc_control_B.ct_l[1605] = ct[1258];
  proc_control_B.ct_l[1606] = ct[1260];
  proc_control_B.ct_l[1607] = ct[1261];
  proc_control_B.ct_l[1608] = ct[1262];
  proc_control_B.ct_l[1609] = ct[1263];
  proc_control_B.ct_l[1610] = ct[1264];
  proc_control_B.ct_l[1611] = ct[1265];
  proc_control_B.ct_l[1612] = ct[1267];
  proc_control_B.ct_l[1613] = ct[1269];
  proc_control_B.ct_l[1614] = ct[1271];
  proc_control_B.ct_l[1615] = ct[1272];
  proc_control_B.ct_l[1616] = ct[1273];
  proc_control_B.ct_l[1617] = ct[1275];
  proc_control_B.ct_l[1618] = ct[1276];
  proc_control_B.ct_l[1619] = ct[1277];
  proc_control_B.ct_l[1620] = ct[1279];
  proc_control_B.ct_l[1621] = ct[1280];
  proc_control_B.ct_l[1622] = ct[1281];
  proc_control_B.ct_l[1623] = ct[1282];
  proc_control_B.ct_l[1624] = ct[1284];
  proc_control_B.ct_l[1625] = ct[1285];
  proc_control_B.ct_l[1626] = ct[1286];
  proc_control_B.ct_l[1627] = ct[1288];
  proc_control_B.ct_l[1628] = ct[1290];
  proc_control_B.ct_l[1629] = ct[1292];
  proc_control_B.ct_l[1630] = ct[1293];
  proc_control_B.ct_l[1631] = ct[1294];
  proc_control_B.ct_l[1632] = ct[1295];
  proc_control_B.ct_l[1633] = ct[1296];
  proc_control_B.ct_l[1634] = ct[1297];
  proc_control_B.ct_l[1635] = ct[1299];
  proc_control_B.ct_l[1636] = ct[1300];
  proc_control_B.ct_l[1637] = ct[1301];
  proc_control_B.ct_l[1638] = ct[1302];
  proc_control_B.ct_l[1639] = ct[1303];
  proc_control_B.ct_l[1640] = ct[1304];
  std::memcpy(&proc_control_B.ct_l[1641], &ct[1306], sizeof(real_T) << 5U);
  proc_control_B.ct_l[1673] = ct[1338];
  std::memcpy(&proc_control_B.ct_l[1674], &ct[1340], 10U * sizeof(real_T));
  proc_control_B.ct_l[1684] = ct[1350];
  proc_control_B.ct_l[1685] = ct[1352];
  proc_control_B.ct_l[1686] = ct[1353];
  std::memcpy(&proc_control_B.ct_l[1687], &ct[1355], sizeof(real_T) << 3U);
  proc_control_B.ct_l[1695] = ct[1363];
  proc_control_B.ct_l[1696] = ct[1365];
  proc_control_B.ct_l[1697] = ct[1366];
  proc_control_B.ct_l[1698] = ct[1367];
  proc_control_B.ct_l[1699] = ct[1368];
  proc_control_B.ct_l[1700] = ct[1369];
  proc_control_B.ct_l[1701] = ct[1370];
  proc_control_B.ct_l[1702] = ct[1373];
  std::memcpy(&proc_control_B.ct_l[1703], &ct[1380], 109U * sizeof(real_T));
  proc_control_B.ct_l[1812] = ct[1489];
  proc_control_B.ct_l[1813] = ct[1491];
  proc_control_B.ct_l[1814] = ct[1492];
  proc_control_B.ct_l[1815] = ct[1493];
  proc_control_B.ct_l[1816] = ct[1494];
  proc_control_B.ct_l[1817] = ct[1496];
  proc_control_B.ct_l[1818] = ct[1497];
  proc_control_B.ct_l[1819] = ct[1498];
  proc_control_B.ct_l[1820] = ct[1499];
  proc_control_B.ct_l[1821] = ct[1500];
  proc_control_B.ct_l[1822] = ct[1501];
  proc_control_B.ct_l[1823] = ct[1502];
  proc_control_B.ct_l[1824] = ct[1503];
  proc_control_B.ct_l[1825] = ct[1505];
  proc_control_B.ct_l[1826] = ct[1506];
  proc_control_B.ct_l[1827] = ct[1507];
  proc_control_B.ct_l[1828] = ct[1508];
  proc_control_B.ct_l[1829] = ct[1509];
  proc_control_B.ct_l[1830] = ct[1510];
  proc_control_B.ct_l[1831] = ct[1511];
  std::memcpy(&proc_control_B.ct_l[1832], &ct[1513], 9U * sizeof(real_T));
  proc_control_B.ct_l[1841] = ct[1522];
  std::memcpy(&proc_control_B.ct_l[1842], &ct[1524], 9U * sizeof(real_T));
  proc_control_B.ct_l[1851] = ct[1533];
  std::memcpy(&proc_control_B.ct_l[1852], &ct[1535], 69U * sizeof(real_T));
  proc_control_B.ct_l[1921] = ct[6] * ct[1502];
  proc_control_B.ct_l[1922] = ct[1604];
  proc_control_B.ct_l[1923] = ct[1605];
  proc_control_B.ct_l[1924] = ct[1606];
  std::memcpy(&proc_control_B.ct_l[1925], &ct[1608], 13U * sizeof(real_T));
  proc_control_B.ct_l[1938] = ct[10] * ct[1503];
  std::memcpy(&proc_control_B.ct_l[1939], &ct[1621], 15U * sizeof(real_T));
  proc_control_B.ct_l[1954] = ct[14] * ct[1505];
  proc_control_B.ct_l[1955] = ct[1636];
  proc_control_B.ct_l[1956] = ct[1637];
  proc_control_B.ct_l[1957] = ct[1638];
  proc_control_B.ct_l[1958] = ct[1639];
  proc_control_ft_5(proc_control_B.ct_l, Anq);
}

void proc_control::proc_control_ft_3(const real_T ct[1260], real_T Anq[169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memcpy(&proc_control_B.ct_f[0], &ct[0], 57U * sizeof(real_T));
  proc_control_B.ct_f[57] = ct[21] * ct[772] * ct[888];
  proc_control_B.ct_f[58] = ct[22] * ct[805] * ct[888];
  proc_control_B.ct_f[59] = ct[23] * ct[826] * ct[888];
  proc_control_B.ct_f[60] = ct[596] * ct[1258];
  proc_control_B.ct_f[61] = ct[597] * ct[1257];
  proc_control_B.ct_f[62] = ct[596] * ct[1259];
  proc_control_B.ct_f[63] = ct[603] * ct[1257];
  proc_control_B.ct_f[64] = ct[597] * ct[1259];
  proc_control_B.ct_f[65] = ct[603] * ct[1258];
  proc_control_B.ct_f[66] = ct[21] * ct[732];
  proc_control_B.ct_f[67] = ct[21] * ct[733];
  proc_control_B.ct_f[68] = ct[21] * ct[734];
  proc_control_B.ct_f[69] = ct[21] * ct[735];
  proc_control_B.ct_f[70] = ct[21] * ct[736];
  proc_control_B.ct_f[71] = ct[21] * ct[737];
  proc_control_B.ct_f[72] = ct[57];
  proc_control_B.ct_f[73] = ct[22] * ct[732];
  proc_control_B.ct_f[74] = ct[22] * ct[733];
  proc_control_B.ct_f[75] = ct[22] * ct[734];
  proc_control_B.ct_f[76] = ct[22] * ct[735];
  proc_control_B.ct_f[77] = ct[22] * ct[736];
  proc_control_B.ct_f[78] = ct[22] * ct[737];
  proc_control_B.ct_f[79] = ct[23] * ct[732];
  proc_control_B.ct_f[80] = ct[23] * ct[733];
  proc_control_B.ct_f[81] = ct[23] * ct[734];
  proc_control_B.ct_f[82] = ct[23] * ct[735];
  proc_control_B.ct_f[83] = ct[58];
  proc_control_B.ct_f[84] = ct[23] * ct[736];
  proc_control_B.ct_f[85] = ct[23] * ct[737];
  proc_control_B.ct_f[86] = ct[21] * ct[745];
  proc_control_B.ct_f[87] = ct[59];
  proc_control_B.ct_f[88] = ct[60];
  proc_control_B.ct_f[89] = ct[61];
  proc_control_B.ct_f[90] = ct[62];
  proc_control_B.ct_f[91] = ct[63];
  proc_control_B.ct_f[92] = ct[22] * ct[745];
  proc_control_B.ct_f[93] = ct[64];
  proc_control_B.ct_f[94] = ct[21] * ct[748];
  proc_control_B.ct_f[95] = ct[23] * ct[745];
  proc_control_B.ct_f[96] = ct[21] * ct[752];
  proc_control_B.ct_f[97] = ct[22] * ct[748];
  proc_control_B.ct_f[98] = ct[65];
  proc_control_B.ct_f[99] = ct[22] * ct[752];
  proc_control_B.ct_f[100] = ct[66];
  proc_control_B.ct_f[101] = ct[23] * ct[748];
  proc_control_B.ct_f[102] = ct[23] * ct[752];
  proc_control_B.ct_f[103] = ct[67];
  proc_control_B.ct_f[104] = -ct[1076];
  proc_control_B.ct_f[105] = -ct[1077];
  proc_control_B.ct_f[106] = -ct[1080];
  proc_control_B.ct_f[107] = -ct[1081];
  proc_control_B.ct_f[108] = -ct[1082];
  proc_control_B.ct_f[109] = ct[68];
  proc_control_B.ct_f[110] = -ct[1083];
  proc_control_B.ct_f[111] = -ct[1084];
  proc_control_B.ct_f[112] = -ct[1085];
  proc_control_B.ct_f[113] = -ct[1086];
  proc_control_B.ct_f[114] = -ct[1087];
  proc_control_B.ct_f[115] = -ct[1088];
  proc_control_B.ct_f[116] = -ct[1090];
  proc_control_B.ct_f[117] = -ct[1092];
  proc_control_B.ct_f[118] = -ct[1093];
  proc_control_B.ct_f[119] = ct[69];
  proc_control_B.ct_f[120] = ct[70];
  proc_control_B.ct_f[121] = ct[18] * ct[848];
  proc_control_B.ct_f[122] = ct[18] * ct[849];
  proc_control_B.ct_f[123] = ct[18] * ct[850];
  proc_control_B.ct_f[124] = ct[18] * ct[851];
  proc_control_B.ct_f[125] = ct[18] * ct[852];
  proc_control_B.ct_f[126] = ct[18] * ct[853];
  proc_control_B.ct_f[127] = ct[19] * ct[852];
  proc_control_B.ct_f[128] = ct[71];
  proc_control_B.ct_f[129] = ct[19] * ct[853];
  proc_control_B.ct_f[130] = ct[20] * ct[852];
  proc_control_B.ct_f[131] = ct[20] * ct[853];
  proc_control_B.ct_f[132] = ct[18] * ct[854];
  proc_control_B.ct_f[133] = ct[18] * ct[855];
  proc_control_B.ct_f[134] = ct[18] * ct[856];
  proc_control_B.ct_f[135] = ct[18] * ct[857];
  proc_control_B.ct_f[136] = ct[18] * ct[858];
  proc_control_B.ct_f[137] = ct[18] * ct[859];
  proc_control_B.ct_f[138] = ct[19] * ct[858];
  proc_control_B.ct_f[139] = ct[19] * ct[859];
  proc_control_B.ct_f[140] = ct[20] * ct[858];
  proc_control_B.ct_f[141] = ct[20] * ct[859];
  proc_control_B.ct_f[142] = ct[18] * ct[860];
  proc_control_B.ct_f[143] = ct[18] * ct[861];
  proc_control_B.ct_f[144] = ct[19] * ct[860];
  proc_control_B.ct_f[145] = ct[18] * ct[862];
  proc_control_B.ct_f[146] = ct[19] * ct[861];
  proc_control_B.ct_f[147] = ct[18] * ct[863];
  proc_control_B.ct_f[148] = ct[20] * ct[860];
  proc_control_B.ct_f[149] = ct[19] * ct[862];
  proc_control_B.ct_f[150] = ct[20] * ct[861];
  proc_control_B.ct_f[151] = ct[19] * ct[863];
  proc_control_B.ct_f[152] = ct[20] * ct[862];
  proc_control_B.ct_f[153] = ct[19] * ct[864];
  proc_control_B.ct_f[154] = ct[20] * ct[863];
  proc_control_B.ct_f[155] = ct[19] * ct[865];
  proc_control_B.ct_f[156] = ct[20] * ct[864];
  proc_control_B.ct_f[157] = ct[20] * ct[865];
  proc_control_B.ct_f[158] = ct[19] * ct[868];
  proc_control_B.ct_f[159] = ct[18] * ct[870];
  proc_control_B.ct_f[160] = ct[19] * ct[869];
  proc_control_B.ct_f[161] = ct[18] * ct[871];
  proc_control_B.ct_f[162] = ct[19] * ct[870];
  proc_control_B.ct_f[163] = ct[19] * ct[871];
  proc_control_B.ct_f[164] = ct[20] * ct[870];
  proc_control_B.ct_f[165] = ct[19] * ct[872];
  proc_control_B.ct_f[166] = ct[20] * ct[871];
  proc_control_B.ct_f[167] = ct[19] * ct[873];
  proc_control_B.ct_f[168] = ct[18] * ct[874];
  proc_control_B.ct_f[169] = ct[18] * ct[875];
  proc_control_B.ct_f[170] = ct[19] * ct[874];
  proc_control_B.ct_f[171] = ct[18] * ct[876];
  proc_control_B.ct_f[172] = ct[19] * ct[875];
  proc_control_B.ct_f[173] = ct[18] * ct[878];
  proc_control_B.ct_f[174] = ct[20] * ct[874];
  proc_control_B.ct_f[175] = ct[20] * ct[875];
  proc_control_B.ct_f[176] = ct[18] * ct[879];
  proc_control_B.ct_f[177] = ct[18] * ct[880];
  proc_control_B.ct_f[178] = ct[20] * ct[876];
  proc_control_B.ct_f[179] = ct[19] * ct[879];
  proc_control_B.ct_f[180] = ct[20] * ct[878];
  proc_control_B.ct_f[181] = ct[19] * ct[880];
  proc_control_B.ct_f[182] = ct[20] * ct[879];
  proc_control_B.ct_f[183] = ct[20] * ct[880];
  proc_control_B.ct_f[184] = ct[19] * ct[881];
  proc_control_B.ct_f[185] = ct[18] * ct[883];
  proc_control_B.ct_f[186] = ct[19] * ct[882];
  proc_control_B.ct_f[187] = ct[18] * ct[884];
  proc_control_B.ct_f[188] = ct[19] * ct[883];
  proc_control_B.ct_f[189] = ct[19] * ct[884];
  proc_control_B.ct_f[190] = ct[20] * ct[883];
  proc_control_B.ct_f[191] = ct[19] * ct[885];
  proc_control_B.ct_f[192] = ct[20] * ct[884];
  proc_control_B.ct_f[193] = ct[19] * ct[886];
  proc_control_B.ct_f[194] = ct[72];
  proc_control_B.ct_f[195] = ct[18] * ct[889];
  proc_control_B.ct_f[196] = ct[18] * ct[890];
  proc_control_B.ct_f[197] = ct[19] * ct[889];
  proc_control_B.ct_f[198] = ct[18] * ct[891];
  proc_control_B.ct_f[199] = ct[19] * ct[890];
  proc_control_B.ct_f[200] = ct[18] * ct[892];
  proc_control_B.ct_f[201] = ct[19] * ct[891];
  proc_control_B.ct_f[202] = ct[18] * ct[893];
  proc_control_B.ct_f[203] = ct[19] * ct[892];
  proc_control_B.ct_f[204] = ct[18] * ct[894];
  proc_control_B.ct_f[205] = ct[73];
  proc_control_B.ct_f[206] = ct[20] * ct[891];
  proc_control_B.ct_f[207] = ct[19] * ct[893];
  proc_control_B.ct_f[208] = ct[20] * ct[892];
  proc_control_B.ct_f[209] = ct[19] * ct[894];
  proc_control_B.ct_f[210] = ct[20] * ct[893];
  proc_control_B.ct_f[211] = ct[20] * ct[894];
  proc_control_B.ct_f[212] = ct[18] * ct[895];
  proc_control_B.ct_f[213] = ct[18] * ct[896];
  proc_control_B.ct_f[214] = ct[19] * ct[895];
  proc_control_B.ct_f[215] = ct[19] * ct[896];
  proc_control_B.ct_f[216] = ct[74];
  proc_control_B.ct_f[217] = ct[20] * ct[895];
  proc_control_B.ct_f[218] = ct[20] * ct[896];
  proc_control_B.ct_f[219] = ct[20] * ct[897];
  proc_control_B.ct_f[220] = ct[20] * ct[898];
  proc_control_B.ct_f[221] = ct[20] * ct[899];
  proc_control_B.ct_f[222] = ct[20] * ct[900];
  proc_control_B.ct_f[223] = ct[18] * ct[901];
  proc_control_B.ct_f[224] = ct[18] * ct[902];
  proc_control_B.ct_f[225] = ct[19] * ct[901];
  proc_control_B.ct_f[226] = ct[19] * ct[902];
  proc_control_B.ct_f[227] = ct[20] * ct[901];
  proc_control_B.ct_f[228] = ct[20] * ct[902];
  proc_control_B.ct_f[229] = ct[20] * ct[903];
  proc_control_B.ct_f[230] = ct[20] * ct[904];
  proc_control_B.ct_f[231] = ct[20] * ct[905];
  proc_control_B.ct_f[232] = ct[20] * ct[906];
  proc_control_B.ct_f[233] = ct[18] * ct[909];
  proc_control_B.ct_f[234] = ct[18] * ct[910];
  proc_control_B.ct_f[235] = ct[75];
  proc_control_B.ct_f[236] = ct[21] * ct[825];
  proc_control_B.ct_f[237] = ct[76];
  proc_control_B.ct_f[238] = ct[18] * ct[936];
  proc_control_B.ct_f[239] = ct[19] * ct[936];
  proc_control_B.ct_f[240] = ct[18] * ct[937];
  proc_control_B.ct_f[241] = ct[19] * ct[937];
  proc_control_B.ct_f[242] = ct[18] * ct[938];
  proc_control_B.ct_f[243] = ct[77];
  proc_control_B.ct_f[244] = ct[22] * ct[825];
  proc_control_B.ct_f[245] = ct[18] * ct[942];
  proc_control_B.ct_f[246] = ct[18] * ct[943];
  proc_control_B.ct_f[247] = ct[19] * ct[944];
  proc_control_B.ct_f[248] = ct[78];
  proc_control_B.ct_f[249] = ct[18] * ct[945];
  proc_control_B.ct_f[250] = ct[18] * ct[946];
  proc_control_B.ct_f[251] = ct[19] * ct[946];
  proc_control_B.ct_f[252] = ct[18] * ct[947];
  proc_control_B.ct_f[253] = ct[19] * ct[947];
  proc_control_B.ct_f[254] = ct[79];
  proc_control_B.ct_f[255] = ct[23] * ct[825];
  proc_control_B.ct_f[256] = ct[18] * ct[952];
  proc_control_B.ct_f[257] = ct[18] * ct[954];
  proc_control_B.ct_f[258] = ct[80];
  proc_control_B.ct_f[259] = ct[19] * ct[955];
  proc_control_B.ct_f[260] = ct[18] * ct[959];
  proc_control_B.ct_f[261] = ct[18] * ct[960];
  proc_control_B.ct_f[262] = ct[18] * ct[961];
  proc_control_B.ct_f[263] = ct[81];
  proc_control_B.ct_f[264] = ct[19] * ct[961];
  proc_control_B.ct_f[265] = ct[18] * ct[963];
  proc_control_B.ct_f[266] = ct[20] * ct[961];
  proc_control_B.ct_f[267] = ct[19] * ct[963];
  proc_control_B.ct_f[268] = ct[18] * ct[964];
  proc_control_B.ct_f[269] = ct[19] * ct[964];
  proc_control_B.ct_f[270] = ct[20] * ct[964];
  proc_control_B.ct_f[271] = ct[18] * ct[966];
  proc_control_B.ct_f[272] = ct[82];
  proc_control_B.ct_f[273] = ct[19] * ct[966];
  proc_control_B.ct_f[274] = ct[18] * ct[968];
  proc_control_B.ct_f[275] = ct[20] * ct[970];
  proc_control_B.ct_f[276] = ct[20] * ct[971];
  proc_control_B.ct_f[277] = ct[18] * ct[976];
  proc_control_B.ct_f[278] = ct[19] * ct[975];
  proc_control_B.ct_f[279] = ct[18] * ct[978];
  proc_control_B.ct_f[280] = ct[18] * ct[979];
  proc_control_B.ct_f[281] = ct[19] * ct[978];
  proc_control_B.ct_f[282] = ct[20] * ct[979];
  proc_control_B.ct_f[283] = ct[84];
  proc_control_B.ct_f[284] = ct[85];
  proc_control_B.ct_f[285] = ct[86];
  proc_control_B.ct_f[286] = ct[87];
  proc_control_B.ct_f[287] = ct[88];
  proc_control_B.ct_f[288] = ct[89];
  proc_control_B.ct_f[289] = ct[90];
  proc_control_B.ct_f[290] = ct[91];
  proc_control_B.ct_f[291] = ct[93];
  proc_control_B.ct_f[292] = ct[94];
  proc_control_B.ct_f[293] = ct[95];
  proc_control_B.ct_f[294] = ct[97];
  proc_control_B.ct_f[295] = ct[98];
  proc_control_B.ct_f[296] = ct[19] * ct[980];
  proc_control_B.ct_f[297] = ct[20] * ct[980];
  proc_control_B.ct_f[298] = ct[20] * ct[981];
  proc_control_B.ct_f[299] = ct[100];
  proc_control_B.ct_f[300] = ct[101];
  proc_control_B.ct_f[301] = ct[102];
  proc_control_B.ct_f[302] = ct[104];
  proc_control_B.ct_f[303] = ct[105];
  proc_control_B.ct_f[304] = ct[107];
  proc_control_B.ct_f[305] = ct[110];
  proc_control_B.ct_f[306] = ct[111];
  proc_control_B.ct_f[307] = ct[113];
  proc_control_B.ct_f[308] = ct[114];
  proc_control_B.ct_f[309] = ct[115];
  proc_control_B.ct_f[310] = ct[19] * ct[982];
  std::memcpy(&proc_control_B.ct_f[311], &ct[116], 15U * sizeof(real_T));
  proc_control_B.ct_f[326] = ct[20] * ct[983];
  proc_control_B.ct_f[327] = ct[131];
  proc_control_B.ct_f[328] = ct[133];
  proc_control_B.ct_f[329] = ct[134];
  proc_control_B.ct_f[330] = ct[135];
  proc_control_B.ct_f[331] = -ct[630];
  proc_control_B.ct_f[332] = ct[137];
  proc_control_B.ct_f[333] = -ct[631];
  proc_control_B.ct_f[334] = -ct[634];
  proc_control_B.ct_f[335] = -ct[635];
  proc_control_B.ct_f[336] = -ct[638];
  proc_control_B.ct_f[337] = -ct[639];
  proc_control_B.ct_f[338] = -ct[642];
  proc_control_B.ct_f[339] = -ct[643];
  proc_control_B.ct_f[340] = -ct[646];
  std::memcpy(&proc_control_B.ct_f[341], &ct[138], 43U * sizeof(real_T));
  proc_control_B.ct_f[384] = -ct[733];
  proc_control_B.ct_f[385] = -ct[734];
  proc_control_B.ct_f[386] = -ct[737];
  proc_control_B.ct_f[387] = ct[181];
  proc_control_B.ct_f[388] = ct[59] * ct[645];
  proc_control_B.ct_f[389] = ct[182];
  proc_control_B.ct_f[390] = ct[60] * ct[637];
  proc_control_B.ct_f[391] = ct[183];
  proc_control_B.ct_f[392] = ct[184];
  proc_control_B.ct_f[393] = ct[61] * ct[629];
  proc_control_B.ct_f[394] = ct[185];
  proc_control_B.ct_f[395] = ct[186];
  proc_control_B.ct_f[396] = ct[187];
  proc_control_B.ct_f[397] = ct[188];
  proc_control_B.ct_f[398] = ct[189];
  proc_control_B.ct_f[399] = ct[59] * ct[664];
  proc_control_B.ct_f[400] = ct[190];
  proc_control_B.ct_f[401] = ct[191];
  proc_control_B.ct_f[402] = -ct[848];
  proc_control_B.ct_f[403] = -ct[851];
  proc_control_B.ct_f[404] = -ct[852];
  proc_control_B.ct_f[405] = -ct[855];
  proc_control_B.ct_f[406] = -ct[856];
  proc_control_B.ct_f[407] = -ct[859];
  proc_control_B.ct_f[408] = -ct[860];
  proc_control_B.ct_f[409] = ct[192];
  proc_control_B.ct_f[410] = -ct[863];
  proc_control_B.ct_f[411] = -ct[864];
  proc_control_B.ct_f[412] = ct[193];
  proc_control_B.ct_f[413] = ct[194];
  proc_control_B.ct_f[414] = -ct[868];
  proc_control_B.ct_f[415] = -ct[871];
  proc_control_B.ct_f[416] = -ct[872];
  proc_control_B.ct_f[417] = -ct[875];
  proc_control_B.ct_f[418] = -ct[876];
  proc_control_B.ct_f[419] = -ct[880];
  proc_control_B.ct_f[420] = ct[195];
  proc_control_B.ct_f[421] = -ct[881];
  proc_control_B.ct_f[422] = -ct[884];
  proc_control_B.ct_f[423] = -ct[885];
  proc_control_B.ct_f[424] = ct[196];
  proc_control_B.ct_f[425] = ct[197];
  proc_control_B.ct_f[426] = -ct[889];
  proc_control_B.ct_f[427] = -ct[892];
  proc_control_B.ct_f[428] = -ct[893];
  proc_control_B.ct_f[429] = -ct[896];
  proc_control_B.ct_f[430] = -ct[897];
  proc_control_B.ct_f[431] = -ct[900];
  proc_control_B.ct_f[432] = -ct[901];
  proc_control_B.ct_f[433] = -ct[904];
  proc_control_B.ct_f[434] = -ct[905];
  std::memcpy(&proc_control_B.ct_f[435], &ct[198], 31U * sizeof(real_T));
  proc_control_B.ct_f[466] = -ct[985];
  proc_control_B.ct_f[467] = -ct[988];
  proc_control_B.ct_f[468] = -ct[989];
  std::memcpy(&proc_control_B.ct_f[469], &ct[229], 29U * sizeof(real_T));
  proc_control_B.ct_f[498] = ct[19] * ct[1165];
  proc_control_B.ct_f[499] = ct[258];
  proc_control_B.ct_f[500] = ct[259];
  proc_control_B.ct_f[501] = ct[18] * ct[1168];
  proc_control_B.ct_f[502] = ct[19] * ct[1168];
  proc_control_B.ct_f[503] = ct[18] * ct[1170];
  proc_control_B.ct_f[504] = ct[19] * ct[1169];
  proc_control_B.ct_f[505] = ct[19] * ct[1170];
  proc_control_B.ct_f[506] = ct[260];
  proc_control_B.ct_f[507] = ct[261];
  proc_control_B.ct_f[508] = ct[262];
  proc_control_B.ct_f[509] = ct[263];
  proc_control_B.ct_f[510] = ct[18] * ct[1174];
  proc_control_B.ct_f[511] = ct[20] * ct[1174];
  proc_control_B.ct_f[512] = ct[264];
  proc_control_B.ct_f[513] = ct[20] * ct[1178];
  proc_control_B.ct_f[514] = ct[18] * ct[1179];
  proc_control_B.ct_f[515] = ct[20] * ct[1179];
  proc_control_B.ct_f[516] = ct[20] * ct[1180];
  proc_control_B.ct_f[517] = ct[265];
  proc_control_B.ct_f[518] = ct[266];
  proc_control_B.ct_f[519] = ct[267];
  proc_control_B.ct_f[520] = ct[19] * ct[1183];
  proc_control_B.ct_f[521] = ct[20] * ct[1183];
  proc_control_B.ct_f[522] = ct[19] * ct[1184];
  proc_control_B.ct_f[523] = ct[19] * ct[1185];
  proc_control_B.ct_f[524] = ct[20] * ct[1185];
  proc_control_B.ct_f[525] = ct[268];
  proc_control_B.ct_f[526] = ct[269];
  proc_control_B.ct_f[527] = ct[19] * ct[1189];
  std::memcpy(&proc_control_B.ct_f[528], &ct[270], 17U * sizeof(real_T));
  proc_control_B.ct_f[545] = ct[629] * ct[742];
  proc_control_B.ct_f[546] = ct[630] * ct[742];
  proc_control_B.ct_f[547] = ct[629] * ct[761];
  proc_control_B.ct_f[548] = ct[631] * ct[742];
  proc_control_B.ct_f[549] = ct[630] * ct[761];
  proc_control_B.ct_f[550] = ct[632] * ct[742];
  proc_control_B.ct_f[551] = ct[633] * ct[761];
  proc_control_B.ct_f[552] = ct[634] * ct[761];
  proc_control_B.ct_f[553] = ct[635] * ct[742];
  proc_control_B.ct_f[554] = ct[636] * ct[742];
  proc_control_B.ct_f[555] = ct[637] * ct[742];
  proc_control_B.ct_f[556] = ct[638] * ct[742];
  proc_control_B.ct_f[557] = ct[287];
  proc_control_B.ct_f[558] = ct[637] * ct[794];
  proc_control_B.ct_f[559] = ct[638] * ct[794];
  proc_control_B.ct_f[560] = ct[639] * ct[794];
  proc_control_B.ct_f[561] = ct[640] * ct[794];
  proc_control_B.ct_f[562] = ct[641] * ct[761];
  proc_control_B.ct_f[563] = ct[642] * ct[761];
  proc_control_B.ct_f[564] = ct[643] * ct[794];
  proc_control_B.ct_f[565] = ct[645] * ct[761];
  proc_control_B.ct_f[566] = ct[644] * ct[794];
  proc_control_B.ct_f[567] = ct[646] * ct[761];
  proc_control_B.ct_f[568] = ct[645] * ct[794];
  proc_control_B.ct_f[569] = ct[646] * ct[794];
  proc_control_B.ct_f[570] = ct[288];
  proc_control_B.ct_f[571] = ct[647] * ct[742];
  proc_control_B.ct_f[572] = ct[647] * ct[761];
  proc_control_B.ct_f[573] = ct[650] * ct[742];
  proc_control_B.ct_f[574] = ct[650] * ct[794];
  proc_control_B.ct_f[575] = ct[289];
  proc_control_B.ct_f[576] = ct[651] * ct[742];
  proc_control_B.ct_f[577] = ct[651] * ct[761];
  proc_control_B.ct_f[578] = ct[654] * ct[761];
  proc_control_B.ct_f[579] = ct[654] * ct[794];
  proc_control_B.ct_f[580] = ct[655] * ct[742];
  proc_control_B.ct_f[581] = ct[655] * ct[794];
  proc_control_B.ct_f[582] = ct[658] * ct[761];
  proc_control_B.ct_f[583] = ct[658] * ct[794];
  proc_control_B.ct_f[584] = ct[290];
  proc_control_B.ct_f[585] = ct[659] * ct[742];
  proc_control_B.ct_f[586] = ct[659] * ct[761];
  proc_control_B.ct_f[587] = ct[663] * ct[742];
  proc_control_B.ct_f[588] = ct[663] * ct[794];
  proc_control_B.ct_f[589] = ct[7] * ct[18] * ct[794] * ct[888];
  proc_control_B.ct_f[590] = ct[8] * ct[18] * ct[761] * ct[888];
  proc_control_B.ct_f[591] = ct[7] * ct[51];
  proc_control_B.ct_f[592] = ct[7] * ct[19] * ct[794] * ct[888];
  proc_control_B.ct_f[593] = ct[7] * ct[52];
  proc_control_B.ct_f[594] = ct[291];
  proc_control_B.ct_f[595] = ct[8] * ct[20] * ct[761] * ct[888];
  proc_control_B.ct_f[596] = ct[8] * ct[53];
  proc_control_B.ct_f[597] = ct[8] * ct[54];
  proc_control_B.ct_f[598] = ct[9] * ct[18] * ct[794] * ct[888];
  proc_control_B.ct_f[599] = ct[9] * ct[51];
  proc_control_B.ct_f[600] = ct[9] * ct[19] * ct[794] * ct[888];
  proc_control_B.ct_f[601] = ct[9] * ct[52];
  proc_control_B.ct_f[602] = ct[11] * ct[19] * ct[742] * ct[888];
  proc_control_B.ct_f[603] = ct[292];
  proc_control_B.ct_f[604] = ct[11] * ct[20] * ct[742] * ct[888];
  proc_control_B.ct_f[605] = ct[11] * ct[55];
  proc_control_B.ct_f[606] = ct[11] * ct[56];
  proc_control_B.ct_f[607] = ct[12] * ct[18] * ct[761] * ct[888];
  proc_control_B.ct_f[608] = ct[13] * ct[19] * ct[742] * ct[888];
  proc_control_B.ct_f[609] = ct[12] * ct[20] * ct[761] * ct[888];
  proc_control_B.ct_f[610] = ct[13] * ct[20] * ct[742] * ct[888];
  proc_control_B.ct_f[611] = ct[12] * ct[53];
  proc_control_B.ct_f[612] = ct[12] * ct[54];
  proc_control_B.ct_f[613] = ct[293];
  proc_control_B.ct_f[614] = ct[13] * ct[55];
  proc_control_B.ct_f[615] = ct[13] * ct[56];
  proc_control_B.ct_f[616] = ct[664] * ct[761];
  proc_control_B.ct_f[617] = ct[664] * ct[794];
  std::memcpy(&proc_control_B.ct_f[618], &ct[294], 81U * sizeof(real_T));
  proc_control_B.ct_f[699] = ct[19] * ct[21] * ct[751] * ct[888];
  proc_control_B.ct_f[700] = ct[20] * ct[21] * ct[751] * ct[888];
  proc_control_B.ct_f[701] = ct[18] * ct[22] * ct[783] * ct[888];
  proc_control_B.ct_f[702] = ct[20] * ct[22] * ct[783] * ct[888];
  proc_control_B.ct_f[703] = ct[18] * ct[23] * ct[816] * ct[888];
  proc_control_B.ct_f[704] = ct[19] * ct[23] * ct[816] * ct[888];
  std::memcpy(&proc_control_B.ct_f[705], &ct[375], 11U * sizeof(real_T));
  proc_control_B.ct_f[716] = ct[62] * ct[83];
  proc_control_B.ct_f[717] = ct[19] * ct[91];
  proc_control_B.ct_f[718] = ct[20] * ct[92];
  proc_control_B.ct_f[719] = ct[20] * ct[96];
  proc_control_B.ct_f[720] = ct[20] * ct[98];
  proc_control_B.ct_f[721] = ct[386];
  proc_control_B.ct_f[722] = ct[62] * ct[99];
  proc_control_B.ct_f[723] = ct[18] * ct[101];
  proc_control_B.ct_f[724] = ct[20] * ct[102];
  proc_control_B.ct_f[725] = ct[387];
  proc_control_B.ct_f[726] = ct[20] * ct[111];
  proc_control_B.ct_f[727] = ct[20] * ct[114];
  proc_control_B.ct_f[728] = ct[388];
  proc_control_B.ct_f[729] = ct[62] * ct[108];
  proc_control_B.ct_f[730] = ct[18] * ct[116];
  proc_control_B.ct_f[731] = ct[19] * ct[117];
  proc_control_B.ct_f[732] = ct[19] * ct[122];
  proc_control_B.ct_f[733] = ct[19] * ct[124];
  proc_control_B.ct_f[734] = ct[18] * ct[131];
  proc_control_B.ct_f[735] = ct[18] * ct[133];
  proc_control_B.ct_f[736] = ct[20] * ct[135];
  std::memcpy(&proc_control_B.ct_f[737], &ct[389], 29U * sizeof(real_T));
  proc_control_B.ct_f[766] = ct[751] * ct[888] * ct[59];
  proc_control_B.ct_f[767] = ct[772] * ct[888] * ct[59];
  proc_control_B.ct_f[768] = ct[783] * ct[888] * ct[60];
  proc_control_B.ct_f[769] = ct[805] * ct[888] * ct[60];
  proc_control_B.ct_f[770] = ct[816] * ct[888] * ct[61];
  proc_control_B.ct_f[771] = ct[826] * ct[888] * ct[61];
  proc_control_B.ct_f[772] = ct[418];
  proc_control_B.ct_f[773] = ct[419];
  proc_control_B.ct_f[774] = ct[59] * ct[865];
  proc_control_B.ct_f[775] = ct[420];
  proc_control_B.ct_f[776] = ct[421];
  proc_control_B.ct_f[777] = ct[59] * ct[886];
  proc_control_B.ct_f[778] = ct[60] * ct[857];
  proc_control_B.ct_f[779] = ct[59] * ct[906];
  proc_control_B.ct_f[780] = ct[61] * ct[849];
  proc_control_B.ct_f[781] = ct[60] * ct[878];
  proc_control_B.ct_f[782] = ct[61] * ct[869];
  proc_control_B.ct_f[783] = ct[60] * ct[898];
  proc_control_B.ct_f[784] = ct[59] * ct[944];
  proc_control_B.ct_f[785] = ct[61] * ct[890];
  proc_control_B.ct_f[786] = ct[59] * ct[955];
  proc_control_B.ct_f[787] = ct[422];
  proc_control_B.ct_f[788] = ct[423];
  proc_control_B.ct_f[789] = ct[59] * ct[957];
  proc_control_B.ct_f[790] = ct[59] * ct[965];
  proc_control_B.ct_f[791] = ct[59] * ct[967];
  proc_control_B.ct_f[792] = ct[424];
  proc_control_B.ct_f[793] = ct[60] * ct[950];
  proc_control_B.ct_f[794] = ct[59] * ct[972];
  proc_control_B.ct_f[795] = ct[19] * ct[193];
  proc_control_B.ct_f[796] = ct[425];
  proc_control_B.ct_f[797] = ct[426];
  proc_control_B.ct_f[798] = ct[60] * ct[960];
  proc_control_B.ct_f[799] = ct[20] * ct[196];
  proc_control_B.ct_f[800] = ct[427];
  proc_control_B.ct_f[801] = ct[428];
  proc_control_B.ct_f[802] = ct[429];
  proc_control_B.ct_f[803] = ct[60] * ct[969];
  proc_control_B.ct_f[804] = ct[430];
  proc_control_B.ct_f[805] = ct[431];
  proc_control_B.ct_f[806] = ct[19] * ct[200];
  proc_control_B.ct_f[807] = ct[20] * ct[200];
  proc_control_B.ct_f[808] = ct[19] * ct[201];
  proc_control_B.ct_f[809] = ct[432];
  proc_control_B.ct_f[810] = ct[20] * ct[201];
  proc_control_B.ct_f[811] = ct[433];
  proc_control_B.ct_f[812] = ct[20] * ct[202];
  proc_control_B.ct_f[813] = ct[434];
  proc_control_B.ct_f[814] = ct[18] * ct[204];
  proc_control_B.ct_f[815] = ct[19] * ct[204];
  proc_control_B.ct_f[816] = ct[435];
  proc_control_B.ct_f[817] = ct[20] * ct[204];
  proc_control_B.ct_f[818] = ct[18] * ct[206];
  proc_control_B.ct_f[819] = ct[19] * ct[206];
  proc_control_B.ct_f[820] = ct[20] * ct[206];
  proc_control_B.ct_f[821] = ct[436];
  proc_control_B.ct_f[822] = ct[437];
  proc_control_B.ct_f[823] = ct[438];
  proc_control_B.ct_f[824] = ct[439];
  proc_control_B.ct_f[825] = ct[19] * ct[207];
  proc_control_B.ct_f[826] = ct[20] * ct[207];
  proc_control_B.ct_f[827] = ct[440];
  proc_control_B.ct_f[828] = ct[19] * ct[208];
  proc_control_B.ct_f[829] = ct[20] * ct[208];
  proc_control_B.ct_f[830] = ct[441];
  proc_control_B.ct_f[831] = ct[442];
  proc_control_B.ct_f[832] = ct[443];
  proc_control_B.ct_f[833] = ct[18] * ct[209];
  proc_control_B.ct_f[834] = ct[19] * ct[209];
  proc_control_B.ct_f[835] = ct[20] * ct[209];
  proc_control_B.ct_f[836] = ct[19] * ct[210];
  proc_control_B.ct_f[837] = ct[18] * ct[211];
  proc_control_B.ct_f[838] = ct[444];
  proc_control_B.ct_f[839] = ct[19] * ct[211];
  proc_control_B.ct_f[840] = ct[20] * ct[211];
  proc_control_B.ct_f[841] = ct[445];
  proc_control_B.ct_f[842] = ct[446];
  proc_control_B.ct_f[843] = ct[19] * ct[212];
  proc_control_B.ct_f[844] = ct[447];
  proc_control_B.ct_tmp_l3 = ct[18] * ct[19] * ct[20] * ct[888];
  proc_control_B.ct_f[845] = proc_control_B.ct_tmp_l3 * ct[59];
  proc_control_B.ct_f[846] = ct[448];
  proc_control_B.ct_f[847] = ct[449];
  proc_control_B.ct_f[848] = ct[450];
  proc_control_B.ct_f[849] = ct[451];
  proc_control_B.ct_f[850] = ct[18] * ct[213];
  proc_control_B.ct_f[851] = ct[452];
  proc_control_B.ct_f[852] = ct[19] * ct[213];
  proc_control_B.ct_f[853] = ct[18] * ct[214];
  proc_control_B.ct_f[854] = ct[19] * ct[214];
  proc_control_B.ct_f[855] = ct[20] * ct[214];
  proc_control_B.ct_f[856] = ct[18] * ct[215];
  proc_control_B.ct_f[857] = ct[19] * ct[215];
  proc_control_B.ct_f[858] = ct[453];
  proc_control_B.ct_f[859] = ct[18] * ct[217];
  proc_control_B.ct_f[860] = ct[19] * ct[217];
  proc_control_B.ct_f[861] = ct[20] * ct[217];
  proc_control_B.ct_f[862] = ct[454];
  proc_control_B.ct_f[863] = ct[455];
  proc_control_B.ct_f[864] = ct[20] * ct[219];
  proc_control_B.ct_f[865] = ct[20] * ct[220];
  proc_control_B.ct_f[866] = ct[456];
  proc_control_B.ct_f[867] = proc_control_B.ct_tmp_l3 * ct[61];
  proc_control_B.ct_f[868] = -ct[85];
  proc_control_B.ct_f[869] = -ct[86];
  proc_control_B.ct_f[870] = ct[457];
  proc_control_B.ct_f[871] = -ct[90];
  proc_control_B.ct_f[872] = -ct[92];
  proc_control_B.ct_f[873] = -ct[93];
  proc_control_B.ct_f[874] = -ct[94];
  proc_control_B.ct_f[875] = -ct[96];
  proc_control_B.ct_f[876] = -ct[97];
  proc_control_B.ct_f[877] = -ct[102];
  proc_control_B.ct_f[878] = -ct[103];
  proc_control_B.ct_f[879] = -ct[104];
  proc_control_B.ct_f[880] = -ct[106];
  proc_control_B.ct_f[881] = ct[458];
  proc_control_B.ct_f[882] = -ct[109];
  proc_control_B.ct_f[883] = -ct[111];
  proc_control_B.ct_f[884] = -ct[112];
  proc_control_B.ct_f[885] = -ct[113];
  proc_control_B.ct_f[886] = -ct[117];
  std::memcpy(&proc_control_B.ct_f[887], &ct[459], 170U * sizeof(real_T));
  proc_control_B.ct_f[1057] = ct[629];
  proc_control_B.ct_f[1058] = ct[631];
  proc_control_B.ct_f[1059] = ct[632];
  proc_control_B.ct_f[1060] = ct[633];
  proc_control_B.ct_f[1061] = ct[635];
  proc_control_B.ct_f[1062] = ct[636];
  proc_control_B.ct_f[1063] = ct[637];
  proc_control_B.ct_f[1064] = ct[639];
  proc_control_B.ct_f[1065] = ct[640];
  proc_control_B.ct_f[1066] = ct[641];
  proc_control_B.ct_f[1067] = ct[643];
  proc_control_B.ct_f[1068] = ct[644];
  proc_control_B.ct_f[1069] = ct[645];
  proc_control_B.ct_f[1070] = ct[648];
  proc_control_B.ct_f[1071] = ct[649];
  proc_control_B.ct_f[1072] = ct[652];
  proc_control_B.ct_f[1073] = ct[653];
  proc_control_B.ct_f[1074] = ct[656];
  proc_control_B.ct_f[1075] = ct[657];
  std::memcpy(&proc_control_B.ct_f[1076], &ct[659], 73U * sizeof(real_T));
  proc_control_B.ct_f[1149] = ct[732];
  proc_control_B.ct_f[1150] = ct[735];
  proc_control_B.ct_f[1151] = ct[736];
  proc_control_B.ct_f[1152] = ct[738];
  proc_control_B.ct_f[1153] = ct[739];
  proc_control_B.ct_f[1154] = ct[740];
  proc_control_B.ct_f[1155] = ct[741];
  proc_control_B.ct_f[1156] = ct[742];
  proc_control_B.ct_f[1157] = ct[743];
  proc_control_B.ct_f[1158] = ct[744];
  proc_control_B.ct_f[1159] = ct[746];
  proc_control_B.ct_f[1160] = ct[747];
  proc_control_B.ct_f[1161] = ct[749];
  proc_control_B.ct_f[1162] = ct[750];
  std::memcpy(&proc_control_B.ct_f[1163], &ct[753], 18U * sizeof(real_T));
  proc_control_B.ct_f[1181] = ct[771];
  std::memcpy(&proc_control_B.ct_f[1182], &ct[773], 9U * sizeof(real_T));
  proc_control_B.ct_f[1191] = ct[782];
  std::memcpy(&proc_control_B.ct_f[1192], &ct[784], 20U * sizeof(real_T));
  proc_control_B.ct_f[1212] = ct[804];
  std::memcpy(&proc_control_B.ct_f[1213], &ct[806], 9U * sizeof(real_T));
  proc_control_B.ct_f[1222] = ct[815];
  proc_control_B.ct_f[1223] = ct[817];
  proc_control_B.ct_f[1224] = ct[818];
  proc_control_B.ct_f[1225] = ct[819];
  proc_control_B.ct_f[1226] = ct[820];
  proc_control_B.ct_f[1227] = ct[821];
  proc_control_B.ct_f[1228] = ct[822];
  proc_control_B.ct_f[1229] = ct[823];
  proc_control_B.ct_f[1230] = ct[824];
  std::memcpy(&proc_control_B.ct_f[1231], &ct[827], 24U * sizeof(real_T));
  proc_control_B.ct_f[1255] = ct[851];
  proc_control_B.ct_f[1256] = ct[853];
  proc_control_B.ct_f[1257] = ct[854];
  proc_control_B.ct_f[1258] = ct[855];
  proc_control_B.ct_f[1259] = ct[856];
  proc_control_B.ct_f[1260] = ct[857];
  proc_control_B.ct_f[1261] = ct[858];
  proc_control_B.ct_f[1262] = ct[859];
  std::memcpy(&proc_control_B.ct_f[1263], &ct[861], 31U * sizeof(real_T));
  proc_control_B.ct_f[1294] = ct[892];
  proc_control_B.ct_f[1295] = ct[894];
  proc_control_B.ct_f[1296] = ct[895];
  proc_control_B.ct_f[1297] = ct[896];
  proc_control_B.ct_f[1298] = ct[897];
  proc_control_B.ct_f[1299] = ct[898];
  proc_control_B.ct_f[1300] = ct[899];
  proc_control_B.ct_f[1301] = ct[900];
  std::memcpy(&proc_control_B.ct_f[1302], &ct[902], 39U * sizeof(real_T));
  proc_control_B.ct_f[1341] = ct[941];
  std::memcpy(&proc_control_B.ct_f[1342], &ct[944], 18U * sizeof(real_T));
  proc_control_B.ct_f[1360] = ct[962];
  proc_control_B.ct_f[1361] = ct[964];
  proc_control_B.ct_f[1362] = ct[965];
  std::memcpy(&proc_control_B.ct_f[1363], &ct[967], 17U * sizeof(real_T));
  proc_control_B.ct_f[1380] = ct[984];
  proc_control_B.ct_f[1381] = ct[986];
  proc_control_B.ct_f[1382] = ct[987];
  std::memcpy(&proc_control_B.ct_f[1383], &ct[990], 85U * sizeof(real_T));
  proc_control_B.ct_f[1468] = ct[1075];
  proc_control_B.ct_f[1469] = ct[1078];
  proc_control_B.ct_f[1470] = ct[1079];
  proc_control_B.ct_f[1471] = ct[1089];
  proc_control_B.ct_f[1472] = ct[1091];
  std::memcpy(&proc_control_B.ct_f[1473], &ct[1093], 167U * sizeof(real_T));
  proc_control_ft_4(proc_control_B.ct_f, Anq);
}

void proc_control::proc_control_ft_2(const real_T ct[805], real_T Anq[169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memcpy(&proc_control_B.ct_j[0], &ct[0], 34U * sizeof(real_T));
  proc_control_B.ct_j[34] = ct[31] * ct[319];
  proc_control_B.ct_j[35] = ct[15] * ct[447] * ct[504];
  proc_control_B.ct_j[36] = ct[15] * ct[452] * ct[504];
  proc_control_B.ct_j[37] = ct[15] * ct[457] * ct[504];
  proc_control_B.ct_j[38] = ct[15] * ct[458] * ct[504];
  proc_control_B.ct_j[39] = ct[15] * ct[460] * ct[504];
  proc_control_B.ct_tmp_ic = ct[16] * ct[447];
  proc_control_B.ct_j[40] = proc_control_B.ct_tmp_ic * ct[504];
  proc_control_B.ct_tmp_e4 = ct[16] * ct[457];
  proc_control_B.ct_j[41] = proc_control_B.ct_tmp_e4 * ct[504];
  proc_control_B.ct_j[42] = ct[16] * ct[459] * ct[504];
  proc_control_B.ct_j[43] = ct[34];
  proc_control_B.ct_j[44] = ct[16] * ct[460] * ct[504];
  proc_control_B.ct_j[45] = ct[16] * ct[461] * ct[504];
  proc_control_B.ct_tmp_kj = ct[17] * ct[447];
  proc_control_B.ct_j[46] = proc_control_B.ct_tmp_kj * ct[504];
  proc_control_B.ct_tmp_p0 = ct[17] * ct[457];
  proc_control_B.ct_j[47] = proc_control_B.ct_tmp_p0 * ct[504];
  proc_control_B.ct_tmp_k3 = ct[17] * ct[460];
  proc_control_B.ct_j[48] = proc_control_B.ct_tmp_k3 * ct[504];
  proc_control_B.ct_j[49] = ct[17] * ct[463] * ct[504];
  proc_control_B.ct_j[50] = ct[17] * ct[465] * ct[504];
  std::memcpy(&proc_control_B.ct_j[51], &ct[35], 20U * sizeof(real_T));
  proc_control_B.ct_j[71] = ct[55];
  proc_control_B.ct_j[72] = ct[62];
  proc_control_B.ct_j[73] = ct[63];
  proc_control_B.ct_j[74] = ct[64];
  std::memcpy(&proc_control_B.ct_j[75], &ct[66], 162U * sizeof(real_T));
  proc_control_B.ct_j[237] = ct[46] * ct[382];
  proc_control_B.ct_j[238] = ct[46] * ct[383];
  proc_control_B.ct_j[239] = ct[46] * ct[386];
  proc_control_B.ct_j[240] = ct[46] * ct[388];
  proc_control_B.ct_j[241] = ct[46] * ct[389];
  proc_control_B.ct_j[242] = ct[46] * ct[392];
  proc_control_B.ct_j[243] = ct[46] * ct[394];
  proc_control_B.ct_j[244] = ct[46] * ct[395];
  proc_control_B.ct_j[245] = ct[46] * ct[398];
  proc_control_B.ct_j[246] = ct[228];
  proc_control_B.ct_j[247] = ct[43] * ct[257];
  proc_control_B.ct_j[248] = ct[43] * ct[271];
  proc_control_B.ct_j[249] = ct[44] * ct[250];
  proc_control_B.ct_j[250] = ct[43] * ct[286];
  proc_control_B.ct_j[251] = ct[45] * ct[244];
  proc_control_B.ct_j[252] = ct[44] * ct[265];
  proc_control_B.ct_j[253] = ct[45] * ct[258];
  proc_control_B.ct_j[254] = ct[44] * ct[279];
  proc_control_B.ct_j[255] = ct[45] * ct[273];
  proc_control_B.ct_tmp_kk = ct[8] * ct[9] * ct[18] * ct[21];
  proc_control_B.ct_j[256] = proc_control_B.ct_tmp_kk * ct[22] * ct[46];
  proc_control_B.ct_j[257] = ct[229];
  proc_control_B.ct_tmp_mr = ct[7] * ct[12] * ct[18] * ct[21];
  proc_control_B.ct_j[258] = proc_control_B.ct_tmp_mr * ct[22] * ct[46];
  proc_control_B.ct_tmp_itv = ct[6] * ct[14];
  proc_control_B.ct_j[259] = proc_control_B.ct_tmp_itv * ct[18] * ct[21] * ct[22]
    * ct[46];
  proc_control_B.ct_tmp_fj = ct[10] * ct[14];
  proc_control_B.ct_j[260] = proc_control_B.ct_tmp_fj * ct[19] * ct[21] * ct[22]
    * ct[46];
  proc_control_B.ct_tmp_ox = ct[6] * ct[10];
  proc_control_B.ct_j[261] = proc_control_B.ct_tmp_ox * ct[18] * ct[21] * ct[23]
    * ct[46];
  proc_control_B.ct_j[262] = ct[230];
  proc_control_B.ct_j[263] = proc_control_B.ct_tmp_kk * ct[23] * ct[46];
  proc_control_B.ct_j[264] = proc_control_B.ct_tmp_mr * ct[23] * ct[46];
  proc_control_B.ct_j[265] = proc_control_B.ct_tmp_fj * ct[20] * ct[21] * ct[23]
    * ct[46];
  proc_control_B.ct_j[266] = proc_control_B.ct_tmp_ox * ct[19] * ct[22] * ct[23]
    * ct[46];
  proc_control_B.ct_j[267] = ct[231];
  proc_control_B.ct_j[268] = proc_control_B.ct_tmp_itv * ct[20] * ct[22] * ct[23]
    * ct[46];
  proc_control_B.ct_j[269] = ct[8] * ct[13] * ct[20] * ct[22] * ct[23] * ct[46];
  proc_control_B.ct_j[270] = ct[11] * ct[12] * ct[20] * ct[22] * ct[23] * ct[46];
  proc_control_B.ct_tmp_tmp_p = ct[11] * ct[18];
  proc_control_B.ct_tmp_kk = proc_control_B.ct_tmp_tmp_p * ct[21];
  proc_control_B.ct_j[271] = proc_control_B.ct_tmp_kk * ct[22] * ct[29] * ct[43];
  proc_control_B.ct_tmp_tmp_e = ct[13] * ct[18];
  proc_control_B.ct_tmp_mr = proc_control_B.ct_tmp_tmp_e * ct[21];
  proc_control_B.ct_j[272] = proc_control_B.ct_tmp_mr * ct[22] * ct[29] * ct[43];
  proc_control_B.ct_j[273] = ct[43] * ct[313];
  proc_control_B.ct_j[274] = proc_control_B.ct_tmp_kk * ct[23] * ct[29] * ct[43];
  proc_control_B.ct_j[275] = proc_control_B.ct_tmp_mr * ct[23] * ct[29] * ct[43];
  proc_control_B.ct_j[276] = ct[43] * ct[315];
  proc_control_B.ct_j[277] = ct[43] * ct[316];
  proc_control_B.ct_j[278] = ct[7] * ct[20] * ct[22] * ct[23] * ct[29] * ct[45];
  proc_control_B.ct_j[279] = ct[9] * ct[20] * ct[22] * ct[23] * ct[29] * ct[45];
  proc_control_B.ct_tmp_kk = ct[16] * ct[18];
  proc_control_B.ct_j[280] = proc_control_B.ct_tmp_kk * ct[21] * ct[23] * ct[29]
    * ct[43];
  proc_control_B.ct_tmp_mr = ct[17] * ct[18];
  proc_control_B.ct_j[281] = proc_control_B.ct_tmp_mr * ct[21] * ct[22] * ct[29]
    * ct[43];
  proc_control_B.ct_j[282] = ct[232];
  proc_control_B.ct_j[283] = ct[16] * ct[19] * ct[22] * ct[23] * ct[29] * ct[43];
  proc_control_B.ct_j[284] = ct[17] * ct[19] * ct[21] * ct[22] * ct[29] * ct[44];
  proc_control_B.ct_tmp_itv = ct[17] * ct[20];
  proc_control_B.ct_j[285] = proc_control_B.ct_tmp_itv * ct[22] * ct[23] * ct[29]
    * ct[43];
  proc_control_B.ct_j[286] = proc_control_B.ct_tmp_itv * ct[21] * ct[23] * ct[29]
    * ct[44];
  proc_control_B.ct_j[287] = ct[233];
  proc_control_B.ct_j[288] = ct[234];
  proc_control_B.ct_j[289] = ct[235];
  proc_control_B.ct_j[290] = ct[236];
  proc_control_B.ct_j[291] = ct[237];
  proc_control_B.ct_j[292] = ct[238];
  proc_control_B.ct_j[293] = ct[239];
  proc_control_B.ct_tmp_itv = ct[6] * ct[21];
  proc_control_B.ct_tmp_fj = proc_control_B.ct_tmp_itv * ct[447];
  proc_control_B.ct_j[294] = proc_control_B.ct_tmp_fj * ct[494];
  proc_control_B.ct_j[295] = proc_control_B.ct_tmp_itv * ct[452] * ct[494];
  proc_control_B.ct_tmp_ox = ct[7] * ct[21];
  proc_control_B.ct_j[296] = proc_control_B.ct_tmp_ox * ct[447] * ct[494];
  proc_control_B.ct_j[297] = proc_control_B.ct_tmp_ox * ct[452] * ct[494];
  proc_control_B.ct_tmp_ka = ct[8] * ct[21];
  proc_control_B.ct_j[298] = proc_control_B.ct_tmp_ka * ct[447] * ct[494];
  proc_control_B.ct_j[299] = proc_control_B.ct_tmp_ka * ct[452] * ct[494];
  proc_control_B.ct_tmp_kg = ct[9] * ct[21];
  proc_control_B.ct_j[300] = proc_control_B.ct_tmp_kg * ct[447] * ct[494];
  proc_control_B.ct_j[301] = proc_control_B.ct_tmp_kg * ct[452] * ct[494];
  proc_control_B.ct_tmp_n1 = ct[10] * ct[21];
  proc_control_B.ct_tmp_py = proc_control_B.ct_tmp_n1 * ct[447];
  proc_control_B.ct_j[302] = proc_control_B.ct_tmp_py * ct[494];
  proc_control_B.ct_tmp_of = proc_control_B.ct_tmp_n1 * ct[457];
  proc_control_B.ct_j[303] = proc_control_B.ct_tmp_of * ct[494];
  proc_control_B.ct_tmp_mi = proc_control_B.ct_tmp_n1 * ct[460];
  proc_control_B.ct_j[304] = proc_control_B.ct_tmp_mi * ct[494];
  proc_control_B.ct_tmp_fq = ct[11] * ct[21];
  proc_control_B.ct_j[305] = proc_control_B.ct_tmp_fq * ct[457] * ct[494];
  proc_control_B.ct_j[306] = proc_control_B.ct_tmp_fq * ct[460] * ct[494];
  proc_control_B.ct_tmp_mzs = ct[12] * ct[21];
  proc_control_B.ct_j[307] = proc_control_B.ct_tmp_mzs * ct[447] * ct[494];
  proc_control_B.ct_j[308] = proc_control_B.ct_tmp_mzs * ct[452] * ct[494];
  proc_control_B.ct_tmp_ia = ct[13] * ct[21];
  proc_control_B.ct_j[309] = proc_control_B.ct_tmp_ia * ct[457] * ct[494];
  proc_control_B.ct_tmp_ii = ct[14] * ct[21];
  proc_control_B.ct_tmp_bpm = proc_control_B.ct_tmp_ii * ct[447];
  proc_control_B.ct_j[310] = proc_control_B.ct_tmp_bpm * ct[494];
  proc_control_B.ct_j[311] = proc_control_B.ct_tmp_ia * ct[460] * ct[494];
  proc_control_B.ct_tmp_adt = proc_control_B.ct_tmp_ii * ct[457];
  proc_control_B.ct_j[312] = proc_control_B.ct_tmp_adt * ct[494];
  proc_control_B.ct_tmp_icn = proc_control_B.ct_tmp_ii * ct[460];
  proc_control_B.ct_j[313] = proc_control_B.ct_tmp_icn * ct[494];
  proc_control_B.ct_tmp_bl = ct[6] * ct[22];
  proc_control_B.ct_tmp_eh = proc_control_B.ct_tmp_bl * ct[447];
  proc_control_B.ct_j[314] = proc_control_B.ct_tmp_eh * ct[494];
  proc_control_B.ct_tmp_gyn = proc_control_B.ct_tmp_bl * ct[457];
  proc_control_B.ct_j[315] = proc_control_B.ct_tmp_gyn * ct[494];
  proc_control_B.ct_tmp_im = proc_control_B.ct_tmp_bl * ct[460];
  proc_control_B.ct_j[316] = proc_control_B.ct_tmp_im * ct[494];
  proc_control_B.ct_tmp_nt = ct[7] * ct[22];
  proc_control_B.ct_j[317] = proc_control_B.ct_tmp_nt * ct[457] * ct[494];
  proc_control_B.ct_tmp_ir = ct[8] * ct[22];
  proc_control_B.ct_j[318] = proc_control_B.ct_tmp_ir * ct[447] * ct[494];
  proc_control_B.ct_j[319] = proc_control_B.ct_tmp_nt * ct[459] * ct[494];
  proc_control_B.ct_j[320] = proc_control_B.ct_tmp_ir * ct[460] * ct[494];
  proc_control_B.ct_tmp_nj = ct[9] * ct[22];
  proc_control_B.ct_j[321] = proc_control_B.ct_tmp_nj * ct[457] * ct[494];
  proc_control_B.ct_j[322] = proc_control_B.ct_tmp_nj * ct[459] * ct[494];
  proc_control_B.ct_tmp_m0 = ct[10] * ct[22];
  proc_control_B.ct_tmp_cc = proc_control_B.ct_tmp_m0 * ct[457];
  proc_control_B.ct_j[323] = proc_control_B.ct_tmp_cc * ct[494];
  proc_control_B.ct_j[324] = proc_control_B.ct_tmp_m0 * ct[459] * ct[494];
  proc_control_B.ct_tmp_ppg = ct[11] * ct[22];
  proc_control_B.ct_j[325] = proc_control_B.ct_tmp_ppg * ct[457] * ct[494];
  proc_control_B.ct_j[326] = proc_control_B.ct_tmp_ppg * ct[459] * ct[494];
  proc_control_B.ct_tmp_ppg = ct[12] * ct[22];
  proc_control_B.ct_j[327] = proc_control_B.ct_tmp_ppg * ct[447] * ct[494];
  proc_control_B.ct_j[328] = proc_control_B.ct_tmp_ppg * ct[460] * ct[494];
  proc_control_B.ct_tmp_k1 = ct[13] * ct[22];
  proc_control_B.ct_j[329] = proc_control_B.ct_tmp_k1 * ct[457] * ct[494];
  proc_control_B.ct_tmp_p3 = ct[14] * ct[22];
  proc_control_B.ct_tmp_deq = proc_control_B.ct_tmp_p3 * ct[447];
  proc_control_B.ct_j[330] = proc_control_B.ct_tmp_deq * ct[494];
  proc_control_B.ct_j[331] = proc_control_B.ct_tmp_k1 * ct[459] * ct[494];
  proc_control_B.ct_tmp_k1 = proc_control_B.ct_tmp_p3 * ct[457];
  proc_control_B.ct_j[332] = proc_control_B.ct_tmp_k1 * ct[494];
  proc_control_B.ct_tmp_c0 = proc_control_B.ct_tmp_p3 * ct[460];
  proc_control_B.ct_j[333] = proc_control_B.ct_tmp_c0 * ct[494];
  proc_control_B.ct_tmp_eq = ct[6] * ct[23];
  proc_control_B.ct_tmp_hlr = proc_control_B.ct_tmp_eq * ct[447];
  proc_control_B.ct_j[334] = proc_control_B.ct_tmp_hlr * ct[494];
  proc_control_B.ct_tmp_mw = proc_control_B.ct_tmp_eq * ct[457];
  proc_control_B.ct_j[335] = proc_control_B.ct_tmp_mw * ct[494];
  proc_control_B.ct_tmp_k2 = ct[7] * ct[23];
  proc_control_B.ct_j[336] = proc_control_B.ct_tmp_k2 * ct[447] * ct[494];
  proc_control_B.ct_tmp_eq *= ct[460];
  proc_control_B.ct_j[337] = proc_control_B.ct_tmp_eq * ct[494];
  proc_control_B.ct_j[338] = proc_control_B.ct_tmp_k2 * ct[457] * ct[494];
  proc_control_B.ct_tmp_k2 = ct[8] * ct[23];
  proc_control_B.ct_j[339] = proc_control_B.ct_tmp_k2 * ct[460] * ct[494];
  proc_control_B.ct_j[340] = proc_control_B.ct_tmp_k2 * ct[463] * ct[494];
  proc_control_B.ct_tmp_k2 = ct[9] * ct[23];
  proc_control_B.ct_j[341] = proc_control_B.ct_tmp_k2 * ct[447] * ct[494];
  proc_control_B.ct_j[342] = proc_control_B.ct_tmp_k2 * ct[457] * ct[494];
  proc_control_B.ct_tmp_k2 = ct[10] * ct[23];
  proc_control_B.ct_tmp_du = proc_control_B.ct_tmp_k2 * ct[447];
  proc_control_B.ct_j[343] = proc_control_B.ct_tmp_du * ct[494];
  proc_control_B.ct_tmp_foe = proc_control_B.ct_tmp_k2 * ct[457];
  proc_control_B.ct_j[344] = proc_control_B.ct_tmp_foe * ct[494];
  proc_control_B.ct_tmp_k2 *= ct[460];
  proc_control_B.ct_j[345] = proc_control_B.ct_tmp_k2 * ct[494];
  proc_control_B.ct_tmp_bro = ct[11] * ct[23];
  proc_control_B.ct_j[346] = proc_control_B.ct_tmp_bro * ct[460] * ct[494];
  proc_control_B.ct_j[347] = proc_control_B.ct_tmp_bro * ct[463] * ct[494];
  proc_control_B.ct_tmp_bro = ct[12] * ct[23];
  proc_control_B.ct_j[348] = proc_control_B.ct_tmp_bro * ct[460] * ct[494];
  proc_control_B.ct_j[349] = proc_control_B.ct_tmp_bro * ct[463] * ct[494];
  proc_control_B.ct_tmp_bro = ct[13] * ct[23];
  proc_control_B.ct_j[350] = proc_control_B.ct_tmp_bro * ct[460] * ct[494];
  proc_control_B.ct_j[351] = proc_control_B.ct_tmp_bro * ct[463] * ct[494];
  proc_control_B.ct_tmp_bro = ct[14] * ct[23];
  proc_control_B.ct_tmp_nee = proc_control_B.ct_tmp_bro * ct[460];
  proc_control_B.ct_j[352] = proc_control_B.ct_tmp_nee * ct[494];
  proc_control_B.ct_j[353] = proc_control_B.ct_tmp_bro * ct[463] * ct[494];
  proc_control_B.ct_j[354] = ct[240];
  proc_control_B.ct_tmp_bro = ct[15] * ct[21];
  proc_control_B.ct_j[355] = proc_control_B.ct_tmp_bro * ct[452] * ct[494];
  proc_control_B.ct_tmp_dfv = ct[18] * ct[19];
  proc_control_B.ct_j[356] = proc_control_B.ct_tmp_dfv * ct[460] * ct[514];
  proc_control_B.ct_tmp_dz = ct[18] * ct[20];
  proc_control_B.ct_j[357] = proc_control_B.ct_tmp_dz * ct[457] * ct[514];
  proc_control_B.ct_tmp_o4 = ct[19] * ct[20];
  proc_control_B.ct_j[358] = proc_control_B.ct_tmp_o4 * ct[447] * ct[514];
  proc_control_B.ct_tmp_lm = ct[15] * ct[22];
  proc_control_B.ct_j[359] = proc_control_B.ct_tmp_lm * ct[447] * ct[494];
  proc_control_B.ct_j[360] = proc_control_B.ct_tmp_lm * ct[457] * ct[494];
  proc_control_B.ct_tmp_j1 = ct[16] * ct[21];
  proc_control_B.ct_j[361] = proc_control_B.ct_tmp_j1 * ct[447] * ct[494];
  proc_control_B.ct_j[362] = proc_control_B.ct_tmp_j1 * ct[457] * ct[494];
  proc_control_B.ct_tmp_jx = ct[15] * ct[23];
  proc_control_B.ct_j[363] = proc_control_B.ct_tmp_jx * ct[447] * ct[494];
  proc_control_B.ct_j[364] = proc_control_B.ct_tmp_jx * ct[460] * ct[494];
  proc_control_B.ct_tmp_jx = ct[17] * ct[21];
  proc_control_B.ct_j[365] = proc_control_B.ct_tmp_jx * ct[447] * ct[494];
  proc_control_B.ct_tmp_nb = ct[16] * ct[22];
  proc_control_B.ct_j[366] = proc_control_B.ct_tmp_nb * ct[459] * ct[494];
  proc_control_B.ct_j[367] = ct[241];
  proc_control_B.ct_j[368] = proc_control_B.ct_tmp_jx * ct[460] * ct[494];
  proc_control_B.ct_tmp_kz = ct[16] * ct[23];
  proc_control_B.ct_j[369] = proc_control_B.ct_tmp_kz * ct[457] * ct[494];
  proc_control_B.ct_tmp_pf = ct[17] * ct[22];
  proc_control_B.ct_j[370] = proc_control_B.ct_tmp_pf * ct[457] * ct[494];
  proc_control_B.ct_j[371] = proc_control_B.ct_tmp_kz * ct[460] * ct[494];
  proc_control_B.ct_j[372] = proc_control_B.ct_tmp_pf * ct[460] * ct[494];
  proc_control_B.ct_j[373] = ct[17] * ct[23] * ct[463] * ct[494];
  std::memcpy(&proc_control_B.ct_j[374], &ct[242], 10U * sizeof(real_T));
  proc_control_B.ct_tmp_kz = ct[357] - ct[803];
  proc_control_B.ct_j[384] = proc_control_B.ct_tmp_kz * ct[46];
  proc_control_B.ct_j[385] = ct[252];
  proc_control_B.ct_tmp_kni = ct[403] - ct[802];
  proc_control_B.ct_j[386] = proc_control_B.ct_tmp_kni * ct[46];
  proc_control_B.ct_j[387] = ct[253];
  proc_control_B.ct_tmp_p1 = ct[368] - ct[804];
  proc_control_B.ct_j[388] = proc_control_B.ct_tmp_p1 * ct[46];
  proc_control_B.ct_tmp_hl = ct[7] * ct[18];
  proc_control_B.ct_tmp_h4 = proc_control_B.ct_tmp_hl * ct[19];
  proc_control_B.ct_j[389] = proc_control_B.ct_tmp_h4 * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_i1 = ct[8] * ct[18];
  proc_control_B.ct_tmp_e4w = proc_control_B.ct_tmp_i1 * ct[19];
  proc_control_B.ct_j[390] = proc_control_B.ct_tmp_e4w * ct[21] * ct[22] * ct
    [484];
  proc_control_B.ct_tmp_jdd = ct[9] * ct[18];
  proc_control_B.ct_tmp_mh = proc_control_B.ct_tmp_jdd * ct[19];
  proc_control_B.ct_j[391] = proc_control_B.ct_tmp_mh * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_dd = proc_control_B.ct_tmp_tmp_p * ct[19];
  proc_control_B.ct_j[392] = proc_control_B.ct_tmp_dd * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_a2r = ct[12] * ct[18];
  proc_control_B.ct_tmp_kl = proc_control_B.ct_tmp_a2r * ct[19];
  proc_control_B.ct_j[393] = proc_control_B.ct_tmp_kl * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_gm = proc_control_B.ct_tmp_tmp_e * ct[19];
  proc_control_B.ct_j[394] = proc_control_B.ct_tmp_gm * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_j[395] = ct[254];
  proc_control_B.ct_tmp_gc = ct[14] * ct[18];
  proc_control_B.ct_tmp_nk = proc_control_B.ct_tmp_gc * ct[19];
  proc_control_B.ct_j[396] = proc_control_B.ct_tmp_nk * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_ed = proc_control_B.ct_tmp_hl * ct[20];
  proc_control_B.ct_j[397] = proc_control_B.ct_tmp_ed * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_oq = proc_control_B.ct_tmp_i1 * ct[20];
  proc_control_B.ct_j[398] = proc_control_B.ct_tmp_oq * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_gfu = proc_control_B.ct_tmp_jdd * ct[20];
  proc_control_B.ct_j[399] = proc_control_B.ct_tmp_gfu * ct[21] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_jh = ct[10] * ct[18];
  proc_control_B.ct_tmp_kb = proc_control_B.ct_tmp_jh * ct[20];
  proc_control_B.ct_j[400] = proc_control_B.ct_tmp_kb * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_cmw = proc_control_B.ct_tmp_tmp_p * ct[20];
  proc_control_B.ct_j[401] = proc_control_B.ct_tmp_cmw * ct[21] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_fw = proc_control_B.ct_tmp_a2r * ct[20];
  proc_control_B.ct_j[402] = proc_control_B.ct_tmp_fw * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_tmp_e *= ct[20];
  proc_control_B.ct_j[403] = proc_control_B.ct_tmp_tmp_e * ct[21] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_eq1 = ct[6] * ct[19];
  proc_control_B.ct_tmp_nm = proc_control_B.ct_tmp_eq1 * ct[20];
  proc_control_B.ct_j[404] = proc_control_B.ct_tmp_nm * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_k2k = ct[7] * ct[19];
  proc_control_B.ct_tmp_o1 = proc_control_B.ct_tmp_k2k * ct[20];
  proc_control_B.ct_j[405] = proc_control_B.ct_tmp_o1 * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_j[406] = ct[255];
  proc_control_B.ct_j[407] = ct[256];
  proc_control_B.ct_tmp_fra = ct[8] * ct[19] * ct[20];
  proc_control_B.ct_j[408] = proc_control_B.ct_tmp_fra * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_ne = ct[9] * ct[19];
  proc_control_B.ct_tmp_ccn = proc_control_B.ct_tmp_ne * ct[20];
  proc_control_B.ct_j[409] = proc_control_B.ct_tmp_ccn * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_j4 = ct[11] * ct[19];
  proc_control_B.ct_tmp_knj = proc_control_B.ct_tmp_j4 * ct[20];
  proc_control_B.ct_j[410] = proc_control_B.ct_tmp_knj * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_k35 = ct[12] * ct[19] * ct[20];
  proc_control_B.ct_j[411] = proc_control_B.ct_tmp_k35 * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_f2 = ct[13] * ct[19];
  proc_control_B.ct_tmp_pna = proc_control_B.ct_tmp_f2 * ct[20];
  proc_control_B.ct_j[412] = proc_control_B.ct_tmp_pna * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_e2 = ct[15] * ct[19] * ct[20];
  proc_control_B.ct_j[413] = proc_control_B.ct_tmp_e2 * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_mr *= ct[19];
  proc_control_B.ct_j[414] = proc_control_B.ct_tmp_mr * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_kk *= ct[20];
  proc_control_B.ct_j[415] = proc_control_B.ct_tmp_kk * ct[21] * ct[23] * ct[484];
  std::memcpy(&proc_control_B.ct_j[416], &ct[257], 12U * sizeof(real_T));
  proc_control_B.ct_j[428] = proc_control_B.ct_tmp_jh * ct[21] * ct[484] * ct[43];
  proc_control_B.ct_j[429] = proc_control_B.ct_tmp_gc * ct[21] * ct[484] * ct[43];
  proc_control_B.ct_tmp_njm = ct[10] * ct[19];
  proc_control_B.ct_tmp_hy = proc_control_B.ct_tmp_njm * ct[22] * ct[484];
  proc_control_B.ct_j[430] = proc_control_B.ct_tmp_hy * ct[43];
  proc_control_B.ct_j[431] = ct[269];
  proc_control_B.ct_j[432] = proc_control_B.ct_tmp_gc * ct[22] * ct[484] * ct[43];
  proc_control_B.ct_tmp_gc = ct[14] * ct[20];
  proc_control_B.ct_j[433] = proc_control_B.ct_tmp_gc * ct[22] * ct[484] * ct[43];
  proc_control_B.ct_tmp_tmp_p = ct[6] * ct[18];
  proc_control_B.ct_tmp_lmf = proc_control_B.ct_tmp_tmp_p * ct[21] * ct[484];
  proc_control_B.ct_j[434] = proc_control_B.ct_tmp_lmf * ct[44];
  proc_control_B.ct_j[435] = ct[270];
  proc_control_B.ct_tmp_cg = ct[14] * ct[19];
  proc_control_B.ct_j[436] = proc_control_B.ct_tmp_cg * ct[21] * ct[484] * ct[44];
  proc_control_B.ct_j[437] = proc_control_B.ct_tmp_gc * ct[21] * ct[484] * ct[44];
  proc_control_B.ct_j[438] = proc_control_B.ct_tmp_jh * ct[23] * ct[484] * ct[43];
  proc_control_B.ct_j[439] = proc_control_B.ct_tmp_njm * ct[23] * ct[484] * ct
    [43];
  proc_control_B.ct_j[440] = ct[271];
  proc_control_B.ct_tmp_gc = proc_control_B.ct_tmp_gc * ct[23] * ct[484];
  proc_control_B.ct_j[441] = proc_control_B.ct_tmp_gc * ct[43];
  proc_control_B.ct_j[442] = proc_control_B.ct_tmp_lmf * ct[45];
  proc_control_B.ct_j[443] = proc_control_B.ct_tmp_eq1 * ct[22] * ct[484] * ct
    [44];
  proc_control_B.ct_j[444] = ct[272];
  proc_control_B.ct_j[445] = proc_control_B.ct_tmp_njm * ct[21] * ct[484] * ct
    [45];
  proc_control_B.ct_tmp_jh = ct[10] * ct[20];
  proc_control_B.ct_j[446] = proc_control_B.ct_tmp_jh * ct[21] * ct[484] * ct[45];
  proc_control_B.ct_j[447] = proc_control_B.ct_tmp_cg * ct[22] * ct[484] * ct[44];
  proc_control_B.ct_j[448] = proc_control_B.ct_tmp_tmp_p * ct[23] * ct[484] *
    ct[44];
  proc_control_B.ct_j[449] = proc_control_B.ct_tmp_tmp_p * ct[22] * ct[484] *
    ct[45];
  proc_control_B.ct_j[450] = proc_control_B.ct_tmp_eq1 * ct[23] * ct[484] * ct
    [44];
  proc_control_B.ct_j[451] = ct[273];
  proc_control_B.ct_tmp_eq1 = ct[6] * ct[20];
  proc_control_B.ct_j[452] = proc_control_B.ct_tmp_eq1 * ct[22] * ct[484] * ct
    [45];
  proc_control_B.ct_j[453] = proc_control_B.ct_tmp_hy * ct[45];
  proc_control_B.ct_j[454] = proc_control_B.ct_tmp_gc * ct[44];
  proc_control_B.ct_j[455] = proc_control_B.ct_tmp_eq1 * ct[23] * ct[484] * ct
    [45];
  proc_control_B.ct_j[456] = proc_control_B.ct_tmp_jh * ct[23] * ct[484] * ct[45];
  proc_control_B.ct_j[457] = ct[274];
  proc_control_B.ct_j[458] = ct[275];
  proc_control_B.ct_j[459] = ct[276];
  proc_control_B.ct_j[460] = proc_control_B.ct_tmp_o4 * ct[22] * ct[494] * ct[43];
  proc_control_B.ct_j[461] = proc_control_B.ct_tmp_dz * ct[21] * ct[494] * ct[44];
  proc_control_B.ct_j[462] = proc_control_B.ct_tmp_o4 * ct[23] * ct[494] * ct[43];
  proc_control_B.ct_j[463] = proc_control_B.ct_tmp_dfv * ct[21] * ct[494] * ct
    [45];
  proc_control_B.ct_j[464] = proc_control_B.ct_tmp_dfv * ct[22] * ct[494] * ct
    [45];
  proc_control_B.ct_j[465] = proc_control_B.ct_tmp_dz * ct[23] * ct[494] * ct[44];
  proc_control_B.ct_j[466] = ct[447] * ct[457] * ct[514];
  proc_control_B.ct_j[467] = ct[447] * ct[460] * ct[514];
  proc_control_B.ct_j[468] = ct[457] * ct[460] * ct[514];
  std::memcpy(&proc_control_B.ct_j[469], &ct[277], 13U * sizeof(real_T));
  proc_control_B.ct_j[482] = proc_control_B.ct_tmp_j4 * ct[21] * ct[447] * ct
    [494];
  proc_control_B.ct_j[483] = ct[11] * ct[20] * ct[21] * ct[447] * ct[494];
  proc_control_B.ct_j[484] = proc_control_B.ct_tmp_f2 * ct[21] * ct[447] * ct
    [494];
  proc_control_B.ct_j[485] = ct[13] * ct[20] * ct[21] * ct[447] * ct[494];
  proc_control_B.ct_j[486] = ct[290];
  proc_control_B.ct_j[487] = ct[291];
  proc_control_B.ct_j[488] = proc_control_B.ct_tmp_i1 * ct[22] * ct[457] * ct
    [494];
  proc_control_B.ct_j[489] = ct[8] * ct[20] * ct[22] * ct[457] * ct[494];
  proc_control_B.ct_j[490] = proc_control_B.ct_tmp_a2r * ct[22] * ct[457] * ct
    [494];
  proc_control_B.ct_j[491] = ct[12] * ct[20] * ct[22] * ct[457] * ct[494];
  proc_control_B.ct_j[492] = proc_control_B.ct_tmp_hl * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_j[493] = proc_control_B.ct_tmp_k2k * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_j[494] = ct[292];
  proc_control_B.ct_j[495] = proc_control_B.ct_tmp_jdd * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_j[496] = proc_control_B.ct_tmp_ne * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_j[497] = ct[293];
  proc_control_B.ct_j[498] = proc_control_B.ct_tmp_itv * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_j[499] = proc_control_B.ct_tmp_ka * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_j[500] = proc_control_B.ct_tmp_n1 * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_j[501] = proc_control_B.ct_tmp_fq * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_j[502] = proc_control_B.ct_tmp_mzs * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_j[503] = proc_control_B.ct_tmp_ia * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_tmp_ka = proc_control_B.ct_tmp_ii * ct[22];
  proc_control_B.ct_j[504] = proc_control_B.ct_tmp_ka * ct[447] * ct[484];
  proc_control_B.ct_j[505] = ct[294];
  proc_control_B.ct_j[506] = proc_control_B.ct_tmp_ka * ct[457] * ct[484];
  proc_control_B.ct_j[507] = proc_control_B.ct_tmp_itv * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_j[508] = proc_control_B.ct_tmp_ox * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_j[509] = proc_control_B.ct_tmp_kg * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_tmp_itv = proc_control_B.ct_tmp_n1 * ct[23];
  proc_control_B.ct_j[510] = proc_control_B.ct_tmp_itv * ct[447] * ct[484];
  proc_control_B.ct_j[511] = proc_control_B.ct_tmp_itv * ct[460] * ct[484];
  proc_control_B.ct_j[512] = proc_control_B.ct_tmp_fq * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[513] = proc_control_B.ct_tmp_ia * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[514] = proc_control_B.ct_tmp_ii * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_tmp_itv = proc_control_B.ct_tmp_bl * ct[23];
  proc_control_B.ct_j[515] = proc_control_B.ct_tmp_itv * ct[457] * ct[484];
  proc_control_B.ct_j[516] = ct[295];
  proc_control_B.ct_j[517] = proc_control_B.ct_tmp_itv * ct[460] * ct[484];
  proc_control_B.ct_j[518] = proc_control_B.ct_tmp_nt * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_j[519] = proc_control_B.ct_tmp_ir * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[520] = proc_control_B.ct_tmp_nj * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_j[521] = proc_control_B.ct_tmp_m0 * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_j[522] = proc_control_B.ct_tmp_ppg * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[523] = proc_control_B.ct_tmp_p3 * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[524] = proc_control_B.ct_tmp_bro * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_j[525] = proc_control_B.ct_tmp_bro * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_j[526] = proc_control_B.ct_tmp_j1 * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_tmp_itv = proc_control_B.ct_tmp_lm * ct[23];
  proc_control_B.ct_j[527] = proc_control_B.ct_tmp_itv * ct[457] * ct[484];
  proc_control_B.ct_j[528] = proc_control_B.ct_tmp_itv * ct[460] * ct[484];
  proc_control_B.ct_tmp_itv = proc_control_B.ct_tmp_j1 * ct[23];
  proc_control_B.ct_j[529] = proc_control_B.ct_tmp_itv * ct[447] * ct[484];
  proc_control_B.ct_tmp_ox = proc_control_B.ct_tmp_jx * ct[22];
  proc_control_B.ct_j[530] = proc_control_B.ct_tmp_ox * ct[447] * ct[484];
  proc_control_B.ct_j[531] = proc_control_B.ct_tmp_ox * ct[457] * ct[484];
  proc_control_B.ct_j[532] = proc_control_B.ct_tmp_itv * ct[460] * ct[484];
  proc_control_B.ct_j[533] = proc_control_B.ct_tmp_nb * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_j[534] = proc_control_B.ct_tmp_jx * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[535] = proc_control_B.ct_tmp_pf * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_j[536] = ct[296];
  proc_control_B.ct_j[537] = ct[297];
  proc_control_B.ct_j[538] = ct[298];
  proc_control_B.ct_j[539] = ct[299];
  proc_control_B.ct_j[540] = ct[11] * ct[447] * ct[494] * ct[43];
  proc_control_B.ct_j[541] = ct[300];
  proc_control_B.ct_j[542] = ct[13] * ct[447] * ct[494] * ct[43];
  proc_control_B.ct_j[543] = ct[8] * ct[457] * ct[494] * ct[44];
  proc_control_B.ct_j[544] = ct[12] * ct[457] * ct[494] * ct[44];
  proc_control_B.ct_j[545] = ct[7] * ct[460] * ct[494] * ct[45];
  proc_control_B.ct_j[546] = ct[9] * ct[460] * ct[494] * ct[45];
  proc_control_B.ct_j[547] = proc_control_B.ct_tmp_ic * ct[494] * ct[43];
  proc_control_B.ct_j[548] = proc_control_B.ct_tmp_e4 * ct[494] * ct[43];
  proc_control_B.ct_j[549] = proc_control_B.ct_tmp_kj * ct[494] * ct[43];
  proc_control_B.ct_tmp_ic = proc_control_B.ct_tmp_k3 * ct[494];
  proc_control_B.ct_j[550] = proc_control_B.ct_tmp_ic * ct[43];
  proc_control_B.ct_j[551] = proc_control_B.ct_tmp_p0 * ct[494] * ct[44];
  proc_control_B.ct_j[552] = proc_control_B.ct_tmp_ic * ct[44];
  proc_control_B.ct_j[553] = ct[301];
  proc_control_B.ct_j[554] = ct[302];
  proc_control_B.ct_j[555] = ct[303];
  proc_control_B.ct_j[556] = ct[304];
  proc_control_B.ct_tmp_ic = ct[21] * ct[447] * ct[494];
  proc_control_B.ct_j[557] = proc_control_B.ct_tmp_ic * ct[43];
  proc_control_B.ct_tmp_e4 = ct[22] * ct[447] * ct[494];
  proc_control_B.ct_j[558] = proc_control_B.ct_tmp_e4 * ct[43];
  proc_control_B.ct_tmp_kj = ct[22] * ct[457] * ct[494];
  proc_control_B.ct_j[559] = proc_control_B.ct_tmp_kj * ct[43];
  proc_control_B.ct_tmp_p0 = ct[22] * ct[460] * ct[494];
  proc_control_B.ct_j[560] = proc_control_B.ct_tmp_p0 * ct[43];
  proc_control_B.ct_j[561] = proc_control_B.ct_tmp_ic * ct[44];
  proc_control_B.ct_j[562] = ct[305];
  proc_control_B.ct_tmp_k3 = ct[21] * ct[457] * ct[494];
  proc_control_B.ct_j[563] = proc_control_B.ct_tmp_k3 * ct[44];
  proc_control_B.ct_tmp_itv = ct[21] * ct[460] * ct[494];
  proc_control_B.ct_j[564] = proc_control_B.ct_tmp_itv * ct[44];
  proc_control_B.ct_tmp_ox = ct[23] * ct[447] * ct[494];
  proc_control_B.ct_j[565] = proc_control_B.ct_tmp_ox * ct[43];
  proc_control_B.ct_tmp_ka = ct[23] * ct[457] * ct[494];
  proc_control_B.ct_j[566] = proc_control_B.ct_tmp_ka * ct[43];
  proc_control_B.ct_tmp_kg = ct[23] * ct[460] * ct[494];
  proc_control_B.ct_j[567] = proc_control_B.ct_tmp_kg * ct[43];
  proc_control_B.ct_j[568] = proc_control_B.ct_tmp_ic * ct[45];
  proc_control_B.ct_j[569] = proc_control_B.ct_tmp_kj * ct[44];
  proc_control_B.ct_j[570] = proc_control_B.ct_tmp_k3 * ct[45];
  proc_control_B.ct_j[571] = proc_control_B.ct_tmp_itv * ct[45];
  proc_control_B.ct_j[572] = proc_control_B.ct_tmp_ox * ct[44];
  proc_control_B.ct_j[573] = ct[306];
  proc_control_B.ct_j[574] = proc_control_B.ct_tmp_e4 * ct[45];
  proc_control_B.ct_j[575] = proc_control_B.ct_tmp_ka * ct[44];
  proc_control_B.ct_j[576] = proc_control_B.ct_tmp_kj * ct[45];
  proc_control_B.ct_j[577] = proc_control_B.ct_tmp_kg * ct[44];
  proc_control_B.ct_j[578] = proc_control_B.ct_tmp_p0 * ct[45];
  proc_control_B.ct_j[579] = proc_control_B.ct_tmp_kg * ct[45];
  proc_control_B.ct_j[580] = ct[307];
  proc_control_B.ct_j[581] = ct[308];
  proc_control_B.ct_j[582] = ct[309];
  proc_control_B.ct_j[583] = ct[310];
  proc_control_B.ct_j[584] = ct[311];
  proc_control_B.ct_j[585] = ct[312];
  proc_control_B.ct_j[586] = ct[313];
  proc_control_B.ct_j[587] = proc_control_B.ct_tmp_kz * ct[29];
  proc_control_B.ct_j[588] = proc_control_B.ct_tmp_kni * ct[29];
  proc_control_B.ct_j[589] = ct[314];
  proc_control_B.ct_j[590] = proc_control_B.ct_tmp_p1 * ct[29];
  proc_control_B.ct_j[591] = ct[315];
  proc_control_B.ct_j[592] = ct[316];
  proc_control_B.ct_j[593] = -ct[59];
  proc_control_B.ct_j[594] = -ct[60];
  proc_control_B.ct_j[595] = -ct[61];
  proc_control_B.ct_j[596] = ct[320];
  proc_control_B.ct_j[597] = ct[321];
  proc_control_B.ct_j[598] = proc_control_B.ct_tmp_py * ct[484] * ct[43];
  proc_control_B.ct_j[599] = proc_control_B.ct_tmp_bpm * ct[484] * ct[43];
  proc_control_B.ct_tmp_ic = proc_control_B.ct_tmp_cc * ct[484];
  proc_control_B.ct_j[600] = proc_control_B.ct_tmp_ic * ct[43];
  proc_control_B.ct_j[601] = proc_control_B.ct_tmp_deq * ct[484] * ct[43];
  proc_control_B.ct_j[602] = proc_control_B.ct_tmp_c0 * ct[484] * ct[43];
  proc_control_B.ct_j[603] = ct[322];
  proc_control_B.ct_tmp_e4 = proc_control_B.ct_tmp_fj * ct[484];
  proc_control_B.ct_j[604] = proc_control_B.ct_tmp_e4 * ct[44];
  proc_control_B.ct_j[605] = proc_control_B.ct_tmp_adt * ct[484] * ct[44];
  proc_control_B.ct_j[606] = proc_control_B.ct_tmp_icn * ct[484] * ct[44];
  proc_control_B.ct_j[607] = proc_control_B.ct_tmp_du * ct[484] * ct[43];
  proc_control_B.ct_j[608] = proc_control_B.ct_tmp_foe * ct[484] * ct[43];
  proc_control_B.ct_j[609] = -ct[751];
  proc_control_B.ct_tmp_kj = proc_control_B.ct_tmp_nee * ct[484];
  proc_control_B.ct_j[610] = proc_control_B.ct_tmp_kj * ct[43];
  proc_control_B.ct_j[611] = proc_control_B.ct_tmp_e4 * ct[45];
  proc_control_B.ct_j[612] = proc_control_B.ct_tmp_gyn * ct[484] * ct[44];
  proc_control_B.ct_j[613] = proc_control_B.ct_tmp_of * ct[484] * ct[45];
  proc_control_B.ct_j[614] = proc_control_B.ct_tmp_mi * ct[484] * ct[45];
  proc_control_B.ct_j[615] = -ct[784];
  proc_control_B.ct_j[616] = proc_control_B.ct_tmp_k1 * ct[484] * ct[44];
  proc_control_B.ct_j[617] = proc_control_B.ct_tmp_hlr * ct[484] * ct[44];
  proc_control_B.ct_j[618] = proc_control_B.ct_tmp_eh * ct[484] * ct[45];
  proc_control_B.ct_j[619] = proc_control_B.ct_tmp_mw * ct[484] * ct[44];
  proc_control_B.ct_j[620] = -ct[795];
  proc_control_B.ct_j[621] = proc_control_B.ct_tmp_im * ct[484] * ct[45];
  proc_control_B.ct_j[622] = proc_control_B.ct_tmp_ic * ct[45];
  proc_control_B.ct_j[623] = proc_control_B.ct_tmp_kj * ct[44];
  proc_control_B.ct_j[624] = proc_control_B.ct_tmp_eq * ct[484] * ct[45];
  proc_control_B.ct_j[625] = proc_control_B.ct_tmp_k2 * ct[484] * ct[45];
  std::memcpy(&proc_control_B.ct_j[626], &ct[323], 33U * sizeof(real_T));
  proc_control_B.ct_j[659] = ct[356];
  std::memcpy(&proc_control_B.ct_j[660], &ct[358], 9U * sizeof(real_T));
  proc_control_B.ct_j[669] = ct[367];
  std::memcpy(&proc_control_B.ct_j[670], &ct[369], 12U * sizeof(real_T));
  proc_control_B.ct_j[682] = ct[381];
  proc_control_B.ct_j[683] = ct[384];
  proc_control_B.ct_j[684] = ct[385];
  proc_control_B.ct_j[685] = ct[387];
  proc_control_B.ct_j[686] = ct[390];
  proc_control_B.ct_j[687] = ct[391];
  proc_control_B.ct_j[688] = ct[393];
  proc_control_B.ct_j[689] = ct[396];
  proc_control_B.ct_j[690] = ct[397];
  proc_control_B.ct_j[691] = ct[399];
  proc_control_B.ct_j[692] = ct[400];
  proc_control_B.ct_j[693] = ct[401];
  proc_control_B.ct_j[694] = ct[402];
  std::memcpy(&proc_control_B.ct_j[695], &ct[404], 43U * sizeof(real_T));
  proc_control_B.ct_j[738] = ct[14] * ct[326];
  proc_control_B.ct_j[739] = ct[13] * ct[328];
  proc_control_B.ct_j[740] = ct[14] * ct[327];
  proc_control_B.ct_j[741] = ct[12] * ct[330];
  proc_control_B.ct_j[742] = ct[447];
  proc_control_B.ct_j[743] = ct[13] * ct[329];
  proc_control_B.ct_j[744] = ct[12] * ct[331];
  proc_control_B.ct_j[745] = ct[448];
  proc_control_B.ct_j[746] = ct[449];
  proc_control_B.ct_j[747] = ct[15] * ct[343];
  proc_control_B.ct_j[748] = ct[450];
  proc_control_B.ct_j[749] = ct[451];
  proc_control_B.ct_j[750] = ct[16] * ct[335];
  proc_control_B.ct_j[751] = ct[452];
  proc_control_B.ct_j[752] = ct[453];
  proc_control_B.ct_j[753] = ct[454];
  proc_control_B.ct_j[754] = ct[17] * ct[327];
  proc_control_B.ct_j[755] = ct[455];
  proc_control_B.ct_j[756] = ct[16] * ct[347];
  proc_control_B.ct_j[757] = ct[456];
  proc_control_B.ct_j[758] = ct[17] * ct[344];
  proc_control_B.ct_j[759] = ct[18] * ct[326];
  proc_control_B.ct_j[760] = ct[18] * ct[327];
  proc_control_B.ct_j[761] = ct[457];
  proc_control_B.ct_j[762] = ct[19] * ct[326];
  proc_control_B.ct_j[763] = ct[18] * ct[328];
  proc_control_B.ct_j[764] = ct[19] * ct[327];
  proc_control_B.ct_j[765] = ct[18] * ct[329];
  proc_control_B.ct_j[766] = ct[19] * ct[328];
  proc_control_B.ct_j[767] = ct[18] * ct[330];
  proc_control_B.ct_j[768] = ct[19] * ct[329];
  proc_control_B.ct_j[769] = ct[18] * ct[331];
  proc_control_B.ct_j[770] = ct[20] * ct[328];
  proc_control_B.ct_j[771] = ct[19] * ct[330];
  proc_control_B.ct_j[772] = ct[458];
  proc_control_B.ct_j[773] = ct[20] * ct[329];
  proc_control_B.ct_j[774] = ct[19] * ct[331];
  proc_control_B.ct_j[775] = ct[20] * ct[330];
  proc_control_B.ct_j[776] = ct[20] * ct[331];
  proc_control_B.ct_j[777] = ct[18] * ct[332];
  proc_control_B.ct_j[778] = ct[18] * ct[333];
  proc_control_B.ct_j[779] = ct[19] * ct[332];
  proc_control_B.ct_j[780] = ct[18] * ct[334];
  proc_control_B.ct_j[781] = ct[19] * ct[333];
  proc_control_B.ct_j[782] = ct[18] * ct[335];
  proc_control_B.ct_j[783] = ct[459];
  proc_control_B.ct_j[784] = ct[20] * ct[332];
  proc_control_B.ct_j[785] = ct[20] * ct[333];
  proc_control_B.ct_j[786] = ct[18] * ct[336];
  proc_control_B.ct_j[787] = ct[18] * ct[337];
  proc_control_B.ct_j[788] = ct[20] * ct[334];
  proc_control_B.ct_j[789] = ct[19] * ct[336];
  proc_control_B.ct_j[790] = ct[20] * ct[335];
  proc_control_B.ct_j[791] = ct[19] * ct[337];
  proc_control_B.ct_j[792] = ct[20] * ct[336];
  proc_control_B.ct_j[793] = ct[20] * ct[337];
  proc_control_B.ct_j[794] = ct[460];
  proc_control_B.ct_j[795] = ct[18] * ct[338];
  proc_control_B.ct_j[796] = ct[18] * ct[339];
  proc_control_B.ct_j[797] = ct[19] * ct[338];
  proc_control_B.ct_j[798] = ct[18] * ct[340];
  proc_control_B.ct_j[799] = ct[19] * ct[339];
  proc_control_B.ct_j[800] = ct[18] * ct[341];
  proc_control_B.ct_j[801] = ct[20] * ct[338];
  proc_control_B.ct_j[802] = ct[19] * ct[340];
  proc_control_B.ct_j[803] = ct[20] * ct[339];
  proc_control_B.ct_j[804] = ct[19] * ct[341];
  proc_control_B.ct_j[805] = ct[461];
  proc_control_B.ct_j[806] = ct[20] * ct[340];
  proc_control_B.ct_j[807] = ct[19] * ct[342];
  proc_control_B.ct_j[808] = ct[20] * ct[341];
  proc_control_B.ct_j[809] = ct[19] * ct[343];
  proc_control_B.ct_j[810] = ct[20] * ct[342];
  proc_control_B.ct_j[811] = ct[20] * ct[343];
  proc_control_B.ct_j[812] = ct[462];
  proc_control_B.ct_j[813] = ct[17] * ct[348];
  proc_control_B.ct_j[814] = ct[18] * ct[344];
  proc_control_B.ct_j[815] = ct[19] * ct[344];
  proc_control_B.ct_j[816] = ct[463];
  proc_control_B.ct_j[817] = ct[18] * ct[345];
  proc_control_B.ct_j[818] = ct[19] * ct[345];
  proc_control_B.ct_j[819] = ct[20] * ct[345];
  proc_control_B.ct_j[820] = ct[18] * ct[346];
  proc_control_B.ct_j[821] = ct[19] * ct[346];
  proc_control_B.ct_j[822] = ct[18] * ct[347];
  proc_control_B.ct_j[823] = ct[20] * ct[346];
  proc_control_B.ct_j[824] = ct[20] * ct[347];
  proc_control_B.ct_j[825] = ct[464];
  proc_control_B.ct_j[826] = ct[465];
  proc_control_B.ct_j[827] = ct[18] * ct[348];
  proc_control_B.ct_j[828] = ct[19] * ct[348];
  proc_control_B.ct_j[829] = ct[18] * ct[349];
  proc_control_B.ct_j[830] = ct[19] * ct[349];
  proc_control_B.ct_j[831] = ct[20] * ct[349];
  proc_control_B.ct_j[832] = ct[18] * ct[350];
  proc_control_B.ct_j[833] = ct[19] * ct[350];
  proc_control_B.ct_j[834] = ct[20] * ct[350];
  proc_control_B.ct_j[835] = ct[19] * ct[351];
  proc_control_B.ct_j[836] = ct[20] * ct[351];
  proc_control_B.ct_j[837] = ct[29] + ct[65];
  proc_control_B.ct_j[838] = ct[18] * ct[352];
  proc_control_B.ct_j[839] = ct[18] * ct[353];
  proc_control_B.ct_j[840] = ct[20] * ct[352];
  proc_control_B.ct_j[841] = ct[19] * ct[353];
  proc_control_B.ct_j[842] = ct[20] * ct[353];
  proc_control_B.ct_j[843] = ct[18] * ct[354];
  proc_control_B.ct_j[844] = ct[19] * ct[354];
  proc_control_B.ct_j[845] = ct[20] * ct[354];
  proc_control_B.ct_j[846] = ct[19] * ct[355];
  proc_control_B.ct_j[847] = ct[20] * ct[355];
  std::memcpy(&proc_control_B.ct_j[848], &ct[466], 18U * sizeof(real_T));
  proc_control_B.ct_j[866] = ct[18] * ct[356];
  std::memcpy(&proc_control_B.ct_j[867], &ct[484], 20U * sizeof(real_T));
  proc_control_B.ct_j[887] = ct[18] * ct[361];
  std::memcpy(&proc_control_B.ct_j[888], &ct[504], 9U * sizeof(real_T));
  proc_control_B.ct_j[897] = ct[513];
  std::memcpy(&proc_control_B.ct_j[898], &ct[515], 14U * sizeof(real_T));
  proc_control_B.ct_j[912] = proc_control_B.ct_tmp_h4 * ct[504];
  proc_control_B.ct_j[913] = proc_control_B.ct_tmp_nm * ct[504];
  proc_control_B.ct_j[914] = proc_control_B.ct_tmp_ed * ct[504];
  proc_control_B.ct_j[915] = proc_control_B.ct_tmp_e4w * ct[504];
  proc_control_B.ct_j[916] = proc_control_B.ct_tmp_o1 * ct[504];
  proc_control_B.ct_j[917] = proc_control_B.ct_tmp_oq * ct[504];
  proc_control_B.ct_j[918] = proc_control_B.ct_tmp_fra * ct[504];
  proc_control_B.ct_j[919] = ct[529];
  proc_control_B.ct_j[920] = proc_control_B.ct_tmp_mh * ct[504];
  proc_control_B.ct_j[921] = proc_control_B.ct_tmp_gfu * ct[504];
  proc_control_B.ct_j[922] = proc_control_B.ct_tmp_ccn * ct[504];
  proc_control_B.ct_j[923] = proc_control_B.ct_tmp_kb * ct[504];
  proc_control_B.ct_j[924] = proc_control_B.ct_tmp_dd * ct[504];
  proc_control_B.ct_j[925] = proc_control_B.ct_tmp_cmw * ct[504];
  proc_control_B.ct_j[926] = proc_control_B.ct_tmp_knj * ct[504];
  proc_control_B.ct_j[927] = proc_control_B.ct_tmp_kl * ct[504];
  proc_control_B.ct_j[928] = proc_control_B.ct_tmp_fw * ct[504];
  proc_control_B.ct_j[929] = proc_control_B.ct_tmp_gm * ct[504];
  proc_control_B.ct_j[930] = ct[530];
  proc_control_B.ct_j[931] = proc_control_B.ct_tmp_k35 * ct[504];
  proc_control_B.ct_j[932] = proc_control_B.ct_tmp_tmp_e * ct[504];
  proc_control_B.ct_j[933] = proc_control_B.ct_tmp_nk * ct[504];
  proc_control_B.ct_j[934] = proc_control_B.ct_tmp_pna * ct[504];
  proc_control_B.ct_j[935] = ct[531];
  proc_control_B.ct_j[936] = ct[532];
  proc_control_B.ct_j[937] = ct[533];
  proc_control_B.ct_j[938] = ct[534];
  proc_control_B.ct_j[939] = ct[19] * ct[362];
  std::memcpy(&proc_control_B.ct_j[940], &ct[535], 18U * sizeof(real_T));
  proc_control_B.ct_j[958] = proc_control_B.ct_tmp_e2 * ct[504];
  std::memcpy(&proc_control_B.ct_j[959], &ct[553], 15U * sizeof(real_T));
  proc_control_B.ct_j[974] = proc_control_B.ct_tmp_kk * ct[504];
  proc_control_B.ct_j[975] = ct[568];
  proc_control_B.ct_j[976] = ct[569];
  proc_control_B.ct_j[977] = proc_control_B.ct_tmp_mr * ct[504];
  std::memcpy(&proc_control_B.ct_j[978], &ct[570], 141U * sizeof(real_T));
  proc_control_B.ct_j[1119] = ct[29] * ct[74];
  proc_control_B.ct_j[1120] = ct[29] * ct[90];
  proc_control_B.ct_j[1121] = ct[29] * ct[99];
  proc_control_B.ct_j[1122] = ct[458] * ct[514];
  proc_control_B.ct_j[1123] = ct[461] * ct[514];
  proc_control_B.ct_j[1124] = ct[711];
  proc_control_B.ct_j[1125] = ct[465] * ct[514];
  std::memcpy(&proc_control_B.ct_j[1126], &ct[712], 38U * sizeof(real_T));
  proc_control_B.ct_j[1164] = ct[750];
  std::memcpy(&proc_control_B.ct_j[1165], &ct[752], 31U * sizeof(real_T));
  proc_control_B.ct_j[1196] = ct[783];
  std::memcpy(&proc_control_B.ct_j[1197], &ct[785], 9U * sizeof(real_T));
  proc_control_B.ct_j[1206] = ct[794];
  proc_control_B.ct_j[1207] = ct[796];
  proc_control_B.ct_j[1208] = ct[797];
  proc_control_B.ct_j[1209] = ct[798];
  proc_control_B.ct_j[1210] = ct[31] * ct[317];
  proc_control_B.ct_j[1211] = ct[32] * ct[317];
  proc_control_B.ct_j[1212] = ct[30] * ct[318];
  proc_control_B.ct_j[1213] = ct[30] * ct[319];
  proc_control_B.ct_j[1214] = ct[6] * ct[447] * ct[504];
  proc_control_B.ct_j[1215] = ct[6] * ct[452] * ct[504];
  proc_control_B.ct_j[1216] = ct[6] * ct[457] * ct[504];
  proc_control_B.ct_j[1217] = ct[799];
  proc_control_B.ct_j[1218] = ct[7] * ct[447] * ct[504];
  proc_control_B.ct_j[1219] = ct[6] * ct[458] * ct[504];
  proc_control_B.ct_j[1220] = ct[6] * ct[460] * ct[504];
  proc_control_B.ct_j[1221] = ct[7] * ct[452] * ct[504];
  proc_control_B.ct_j[1222] = ct[7] * ct[457] * ct[504];
  proc_control_B.ct_j[1223] = ct[8] * ct[447] * ct[504];
  proc_control_B.ct_j[1224] = ct[7] * ct[459] * ct[504];
  proc_control_B.ct_j[1225] = ct[8] * ct[452] * ct[504];
  proc_control_B.ct_j[1226] = ct[8] * ct[460] * ct[504];
  proc_control_B.ct_j[1227] = ct[800];
  proc_control_B.ct_j[1228] = ct[8] * ct[463] * ct[504];
  proc_control_B.ct_j[1229] = ct[9] * ct[447] * ct[504];
  proc_control_B.ct_j[1230] = ct[9] * ct[452] * ct[504];
  proc_control_B.ct_j[1231] = ct[9] * ct[457] * ct[504];
  proc_control_B.ct_j[1232] = ct[10] * ct[447] * ct[504];
  proc_control_B.ct_j[1233] = ct[9] * ct[459] * ct[504];
  proc_control_B.ct_j[1234] = ct[10] * ct[457] * ct[504];
  proc_control_B.ct_j[1235] = ct[10] * ct[459] * ct[504];
  proc_control_B.ct_j[1236] = ct[10] * ct[460] * ct[504];
  proc_control_B.ct_j[1237] = ct[11] * ct[457] * ct[504];
  proc_control_B.ct_j[1238] = ct[10] * ct[461] * ct[504];
  proc_control_B.ct_j[1239] = ct[11] * ct[459] * ct[504];
  proc_control_B.ct_j[1240] = ct[11] * ct[460] * ct[504];
  proc_control_B.ct_j[1241] = ct[11] * ct[463] * ct[504];
  proc_control_B.ct_j[1242] = ct[12] * ct[447] * ct[504];
  proc_control_B.ct_j[1243] = ct[12] * ct[452] * ct[504];
  proc_control_B.ct_j[1244] = ct[12] * ct[460] * ct[504];
  proc_control_B.ct_j[1245] = ct[13] * ct[457] * ct[504];
  proc_control_B.ct_j[1246] = ct[14] * ct[447] * ct[504];
  proc_control_B.ct_j[1247] = ct[801];
  proc_control_B.ct_j[1248] = ct[12] * ct[463] * ct[504];
  proc_control_B.ct_j[1249] = ct[13] * ct[459] * ct[504];
  proc_control_B.ct_j[1250] = ct[13] * ct[460] * ct[504];
  proc_control_B.ct_j[1251] = ct[14] * ct[457] * ct[504];
  proc_control_B.ct_j[1252] = ct[13] * ct[463] * ct[504];
  proc_control_B.ct_j[1253] = ct[14] * ct[460] * ct[504];
  proc_control_B.ct_j[1254] = ct[14] * ct[463] * ct[504];
  proc_control_B.ct_j[1255] = ct[14] * ct[465] * ct[504];
  proc_control_B.ct_j[1256] = ct[32] * ct[318];
  proc_control_B.ct_j[1257] = ct[802];
  proc_control_B.ct_j[1258] = ct[803];
  proc_control_B.ct_j[1259] = ct[804];
  proc_control_ft_3(proc_control_B.ct_j, Anq);
}

void proc_control::proc_control_ft_1(const real_T ct[433], real_T Anq[169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memcpy(&proc_control_B.ct_m[0], &ct[0], 17U * sizeof(real_T));
  proc_control_B.ct_m[17] = ct[17];
  std::memcpy(&proc_control_B.ct_m[18], &ct[21], 17U * sizeof(real_T));
  proc_control_B.ct_m[35] = ct[21] * ct[376] * ct[391];
  proc_control_B.ct_m[36] = ct[22] * ct[369] * ct[391];
  proc_control_B.ct_m[37] = ct[21] * ct[380] * ct[391];
  proc_control_B.ct_m[38] = ct[23] * ct[369] * ct[391];
  proc_control_B.ct_m[39] = ct[22] * ct[380] * ct[391];
  proc_control_B.ct_m[40] = ct[23] * ct[376] * ct[391];
  std::memcpy(&proc_control_B.ct_m[41], &ct[38], 34U * sizeof(real_T));
  proc_control_B.ct_tmp_l2 = ct[7] * ct[21];
  proc_control_B.ct_tmp_m = proc_control_B.ct_tmp_l2 * ct[22];
  proc_control_B.ct_m[75] = proc_control_B.ct_tmp_m * ct[24] * ct[389];
  proc_control_B.ct_tmp_l2 *= ct[23];
  proc_control_B.ct_m[76] = proc_control_B.ct_tmp_l2 * ct[24] * ct[389];
  proc_control_B.ct_tmp_fr = ct[8] * ct[21];
  proc_control_B.ct_tmp_gk = proc_control_B.ct_tmp_fr * ct[22];
  proc_control_B.ct_m[77] = proc_control_B.ct_tmp_gk * ct[24] * ct[389];
  proc_control_B.ct_tmp_fr *= ct[23];
  proc_control_B.ct_m[78] = proc_control_B.ct_tmp_fr * ct[24] * ct[389];
  proc_control_B.ct_m[79] = ct[72];
  proc_control_B.ct_tmp_pn = ct[9] * ct[21];
  proc_control_B.ct_tmp_b5 = proc_control_B.ct_tmp_pn * ct[22];
  proc_control_B.ct_m[80] = proc_control_B.ct_tmp_b5 * ct[24] * ct[389];
  proc_control_B.ct_tmp_pn *= ct[23];
  proc_control_B.ct_m[81] = proc_control_B.ct_tmp_pn * ct[24] * ct[389];
  proc_control_B.ct_tmp_dkn = ct[10] * ct[21] * ct[23];
  proc_control_B.ct_m[82] = proc_control_B.ct_tmp_dkn * ct[24] * ct[389];
  proc_control_B.ct_tmp_p5 = ct[11] * ct[21];
  proc_control_B.ct_tmp_il = proc_control_B.ct_tmp_p5 * ct[22];
  proc_control_B.ct_m[83] = proc_control_B.ct_tmp_il * ct[24] * ct[389];
  proc_control_B.ct_tmp_pp = proc_control_B.ct_tmp_p5 * ct[23];
  proc_control_B.ct_m[84] = proc_control_B.ct_tmp_pp * ct[24] * ct[389];
  proc_control_B.ct_tmp_br = ct[12] * ct[21];
  proc_control_B.ct_tmp_bs = proc_control_B.ct_tmp_br * ct[22];
  proc_control_B.ct_m[85] = proc_control_B.ct_tmp_bs * ct[24] * ct[389];
  proc_control_B.ct_tmp_br *= ct[23];
  proc_control_B.ct_m[86] = proc_control_B.ct_tmp_br * ct[24] * ct[389];
  proc_control_B.ct_tmp_k0 = ct[13] * ct[21];
  proc_control_B.ct_tmp_h2b = proc_control_B.ct_tmp_k0 * ct[22];
  proc_control_B.ct_m[87] = proc_control_B.ct_tmp_h2b * ct[24] * ct[389];
  proc_control_B.ct_tmp_gs = proc_control_B.ct_tmp_k0 * ct[23];
  proc_control_B.ct_m[88] = proc_control_B.ct_tmp_gs * ct[24] * ct[389];
  proc_control_B.ct_tmp_df = ct[14] * ct[21] * ct[22];
  proc_control_B.ct_m[89] = proc_control_B.ct_tmp_df * ct[24] * ct[389];
  proc_control_B.ct_m[90] = ct[73];
  proc_control_B.ct_m[91] = proc_control_B.ct_tmp_m * ct[25] * ct[389];
  proc_control_B.ct_tmp_m = ct[6] * ct[22] * ct[23];
  proc_control_B.ct_m[92] = proc_control_B.ct_tmp_m * ct[25] * ct[389];
  proc_control_B.ct_m[93] = proc_control_B.ct_tmp_gk * ct[25] * ct[389];
  proc_control_B.ct_tmp_gk = ct[7] * ct[22] * ct[23];
  proc_control_B.ct_m[94] = proc_control_B.ct_tmp_gk * ct[25] * ct[389];
  proc_control_B.ct_tmp_f5 = ct[8] * ct[22] * ct[23];
  proc_control_B.ct_m[95] = proc_control_B.ct_tmp_f5 * ct[25] * ct[389];
  proc_control_B.ct_m[96] = proc_control_B.ct_tmp_b5 * ct[25] * ct[389];
  proc_control_B.ct_tmp_b5 = ct[9] * ct[22] * ct[23];
  proc_control_B.ct_m[97] = proc_control_B.ct_tmp_b5 * ct[25] * ct[389];
  proc_control_B.ct_m[98] = ct[74];
  proc_control_B.ct_m[99] = ct[75];
  proc_control_B.ct_m[100] = proc_control_B.ct_tmp_il * ct[25] * ct[389];
  proc_control_B.ct_tmp_il = ct[11] * ct[22] * ct[23];
  proc_control_B.ct_m[101] = proc_control_B.ct_tmp_il * ct[25] * ct[389];
  proc_control_B.ct_m[102] = proc_control_B.ct_tmp_bs * ct[25] * ct[389];
  proc_control_B.ct_m[103] = proc_control_B.ct_tmp_h2b * ct[25] * ct[389];
  proc_control_B.ct_tmp_bs = ct[12] * ct[22] * ct[23];
  proc_control_B.ct_m[104] = proc_control_B.ct_tmp_bs * ct[25] * ct[389];
  proc_control_B.ct_m[105] = proc_control_B.ct_tmp_df * ct[25] * ct[389];
  proc_control_B.ct_tmp_h2b = ct[13] * ct[22] * ct[23];
  proc_control_B.ct_m[106] = proc_control_B.ct_tmp_h2b * ct[25] * ct[389];
  proc_control_B.ct_m[107] = proc_control_B.ct_tmp_m * ct[26] * ct[389];
  proc_control_B.ct_m[108] = proc_control_B.ct_tmp_l2 * ct[26] * ct[389];
  proc_control_B.ct_m[109] = ct[76];
  proc_control_B.ct_m[110] = proc_control_B.ct_tmp_gk * ct[26] * ct[389];
  proc_control_B.ct_m[111] = proc_control_B.ct_tmp_fr * ct[26] * ct[389];
  proc_control_B.ct_m[112] = proc_control_B.ct_tmp_f5 * ct[26] * ct[389];
  proc_control_B.ct_m[113] = proc_control_B.ct_tmp_pn * ct[26] * ct[389];
  proc_control_B.ct_m[114] = proc_control_B.ct_tmp_b5 * ct[26] * ct[389];
  proc_control_B.ct_m[115] = proc_control_B.ct_tmp_dkn * ct[26] * ct[389];
  proc_control_B.ct_m[116] = proc_control_B.ct_tmp_pp * ct[26] * ct[389];
  proc_control_B.ct_m[117] = proc_control_B.ct_tmp_il * ct[26] * ct[389];
  proc_control_B.ct_m[118] = proc_control_B.ct_tmp_br * ct[26] * ct[389];
  proc_control_B.ct_m[119] = proc_control_B.ct_tmp_bs * ct[26] * ct[389];
  proc_control_B.ct_m[120] = proc_control_B.ct_tmp_gs * ct[26] * ct[389];
  proc_control_B.ct_m[121] = proc_control_B.ct_tmp_h2b * ct[26] * ct[389];
  proc_control_B.ct_tmp_l2 = ct[15] * ct[22] * ct[23];
  proc_control_B.ct_m[122] = proc_control_B.ct_tmp_l2 * ct[25] * ct[389];
  proc_control_B.ct_tmp_tmp_l = ct[16] * ct[21];
  proc_control_B.ct_tmp_m = proc_control_B.ct_tmp_tmp_l * ct[23];
  proc_control_B.ct_m[123] = proc_control_B.ct_tmp_m * ct[24] * ct[389];
  proc_control_B.ct_m[124] = proc_control_B.ct_tmp_l2 * ct[26] * ct[389];
  proc_control_B.ct_tmp_f5 = ct[17] * ct[21];
  proc_control_B.ct_tmp_l2 = proc_control_B.ct_tmp_f5 * ct[22];
  proc_control_B.ct_m[125] = proc_control_B.ct_tmp_l2 * ct[24] * ct[389];
  proc_control_B.ct_m[126] = proc_control_B.ct_tmp_l2 * ct[25] * ct[389];
  proc_control_B.ct_m[127] = proc_control_B.ct_tmp_m * ct[26] * ct[389];
  proc_control_B.ct_m[128] = ct[78];
  proc_control_B.ct_tmp_l2 = ct[10] * ct[389];
  proc_control_B.ct_m[129] = proc_control_B.ct_tmp_l2 * ct[40];
  proc_control_B.ct_tmp_m = ct[14] * ct[389];
  proc_control_B.ct_m[130] = proc_control_B.ct_tmp_m * ct[40];
  proc_control_B.ct_m[131] = ct[79];
  proc_control_B.ct_tmp_fr = ct[6] * ct[389];
  proc_control_B.ct_m[132] = proc_control_B.ct_tmp_fr * ct[41];
  proc_control_B.ct_m[133] = proc_control_B.ct_tmp_m * ct[41];
  proc_control_B.ct_m[134] = proc_control_B.ct_tmp_fr * ct[42];
  proc_control_B.ct_m[135] = proc_control_B.ct_tmp_l2 * ct[42];
  proc_control_B.ct_m[136] = -ct[291];
  proc_control_B.ct_m[137] = -ct[292];
  proc_control_B.ct_m[138] = -ct[295];
  proc_control_B.ct_m[139] = -ct[297];
  proc_control_B.ct_m[140] = -ct[298];
  proc_control_B.ct_m[141] = -ct[301];
  proc_control_B.ct_m[142] = -ct[303];
  proc_control_B.ct_m[143] = -ct[304];
  proc_control_B.ct_m[144] = -ct[307];
  proc_control_B.ct_tmp_tmp_f3 = ct[10] * ct[14];
  proc_control_B.ct_tmp_l2 = proc_control_B.ct_tmp_tmp_f3 * ct[24];
  proc_control_B.ct_m[145] = proc_control_B.ct_tmp_l2 * ct[25] * ct[40];
  proc_control_B.ct_m[146] = proc_control_B.ct_tmp_l2 * ct[26] * ct[40];
  proc_control_B.ct_tmp_tmp_o = ct[6] * ct[14];
  proc_control_B.ct_tmp_m = proc_control_B.ct_tmp_tmp_o * ct[24];
  proc_control_B.ct_m[147] = proc_control_B.ct_tmp_m * ct[25] * ct[41];
  proc_control_B.ct_tmp_fr = proc_control_B.ct_tmp_tmp_f3 * ct[25];
  proc_control_B.ct_m[148] = proc_control_B.ct_tmp_fr * ct[26] * ct[40];
  proc_control_B.ct_tmp_tmp_f4 = ct[6] * ct[10];
  proc_control_B.ct_tmp_gk = proc_control_B.ct_tmp_tmp_f4 * ct[24];
  proc_control_B.ct_m[149] = proc_control_B.ct_tmp_gk * ct[25] * ct[42];
  proc_control_B.ct_m[150] = proc_control_B.ct_tmp_m * ct[26] * ct[41];
  proc_control_B.ct_m[151] = proc_control_B.ct_tmp_gk * ct[26] * ct[42];
  proc_control_B.ct_tmp_gk = proc_control_B.ct_tmp_tmp_o * ct[25];
  proc_control_B.ct_m[152] = proc_control_B.ct_tmp_gk * ct[26] * ct[41];
  proc_control_B.ct_tmp_pn = proc_control_B.ct_tmp_tmp_f4 * ct[25];
  proc_control_B.ct_m[153] = proc_control_B.ct_tmp_pn * ct[26] * ct[42];
  proc_control_B.ct_tmp_tmp_o3 = ct[16] * ct[17];
  proc_control_B.ct_tmp_b5 = proc_control_B.ct_tmp_tmp_o3 * ct[24];
  proc_control_B.ct_m[154] = proc_control_B.ct_tmp_b5 * ct[25] * ct[40];
  proc_control_B.ct_m[155] = proc_control_B.ct_tmp_b5 * ct[26] * ct[40];
  proc_control_B.ct_tmp_dkn = proc_control_B.ct_tmp_tmp_o3 * ct[25];
  proc_control_B.ct_m[156] = proc_control_B.ct_tmp_dkn * ct[26] * ct[40];
  proc_control_B.ct_m[157] = -ct[330];
  proc_control_B.ct_m[158] = -ct[333];
  proc_control_B.ct_m[159] = -ct[334];
  proc_control_B.ct_m[160] = -ct[337];
  proc_control_B.ct_m[161] = -ct[339];
  proc_control_B.ct_m[162] = ct[82];
  proc_control_B.ct_m[163] = -ct[342];
  proc_control_B.ct_m[164] = -ct[343];
  proc_control_B.ct_m[165] = -ct[346];
  proc_control_B.ct_m[166] = -ct[347];
  proc_control_B.ct_tmp_il = proc_control_B.ct_tmp_tmp_f4 * ct[14];
  proc_control_B.ct_m[167] = proc_control_B.ct_tmp_il * ct[24] * ct[43];
  proc_control_B.ct_tmp_pp = ct[7] * ct[11];
  proc_control_B.ct_tmp_br = proc_control_B.ct_tmp_pp * ct[12];
  proc_control_B.ct_m[168] = proc_control_B.ct_tmp_br * ct[24] * ct[43];
  proc_control_B.ct_tmp_bs = ct[8] * ct[9];
  proc_control_B.ct_tmp_h2b = proc_control_B.ct_tmp_bs * ct[13];
  proc_control_B.ct_m[169] = proc_control_B.ct_tmp_h2b * ct[24] * ct[43];
  proc_control_B.ct_tmp_gs = ct[11] * ct[24];
  proc_control_B.ct_m[170] = proc_control_B.ct_tmp_gs * ct[25] * ct[26] * ct[40];
  proc_control_B.ct_tmp_df = ct[13] * ct[24];
  proc_control_B.ct_m[171] = proc_control_B.ct_tmp_df * ct[25] * ct[26] * ct[40];
  proc_control_B.ct_m[172] = proc_control_B.ct_tmp_tmp_f3 * ct[388] * ct[40];
  proc_control_B.ct_m[173] = proc_control_B.ct_tmp_tmp_o * ct[388] * ct[41];
  proc_control_B.ct_m[174] = proc_control_B.ct_tmp_tmp_f4 * ct[388] * ct[42];
  proc_control_B.ct_m[175] = ct[84];
  proc_control_B.ct_m[176] = ct[85];
  proc_control_B.ct_m[177] = ct[86];
  proc_control_B.ct_m[178] = proc_control_B.ct_tmp_p5 * ct[389] * ct[40];
  proc_control_B.ct_m[179] = proc_control_B.ct_tmp_k0 * ct[389] * ct[40];
  proc_control_B.ct_m[180] = proc_control_B.ct_tmp_tmp_o3 * ct[388] * ct[40];
  proc_control_B.ct_m[181] = ct[7] * ct[23] * ct[389] * ct[42];
  proc_control_B.ct_m[182] = ct[9] * ct[23] * ct[389] * ct[42];
  proc_control_B.ct_m[183] = ct[89];
  proc_control_B.ct_m[184] = proc_control_B.ct_tmp_tmp_l * ct[389] * ct[40];
  proc_control_B.ct_m[185] = ct[16] * ct[22] * ct[389] * ct[40];
  proc_control_B.ct_m[186] = ct[90];
  proc_control_B.ct_m[187] = proc_control_B.ct_tmp_f5 * ct[389] * ct[40];
  proc_control_B.ct_tmp_p5 = ct[17] * ct[23] * ct[389];
  proc_control_B.ct_m[188] = proc_control_B.ct_tmp_p5 * ct[40];
  proc_control_B.ct_m[189] = proc_control_B.ct_tmp_gs * ct[388] * ct[40];
  proc_control_B.ct_m[190] = proc_control_B.ct_tmp_df * ct[388] * ct[40];
  proc_control_B.ct_m[191] = ct[11] * ct[25] * ct[388] * ct[40];
  proc_control_B.ct_m[192] = ct[13] * ct[25] * ct[388] * ct[40];
  proc_control_B.ct_m[193] = ct[17] * ct[22] * ct[389] * ct[41];
  proc_control_B.ct_m[194] = proc_control_B.ct_tmp_p5 * ct[41];
  proc_control_B.ct_tmp_p5 = ct[8] * ct[24];
  proc_control_B.ct_m[195] = proc_control_B.ct_tmp_p5 * ct[388] * ct[41];
  proc_control_B.ct_m[196] = ct[92];
  proc_control_B.ct_tmp_k0 = ct[12] * ct[24];
  proc_control_B.ct_m[197] = proc_control_B.ct_tmp_k0 * ct[388] * ct[41];
  proc_control_B.ct_m[198] = ct[11] * ct[26] * ct[388] * ct[40];
  proc_control_B.ct_m[199] = ct[13] * ct[26] * ct[388] * ct[40];
  proc_control_B.ct_tmp_gs = ct[7] * ct[24];
  proc_control_B.ct_m[200] = proc_control_B.ct_tmp_gs * ct[388] * ct[42];
  proc_control_B.ct_m[201] = ct[8] * ct[25] * ct[388] * ct[41];
  proc_control_B.ct_tmp_df = ct[9] * ct[24];
  proc_control_B.ct_m[202] = proc_control_B.ct_tmp_df * ct[388] * ct[42];
  proc_control_B.ct_m[203] = ct[12] * ct[25] * ct[388] * ct[41];
  proc_control_B.ct_m[204] = ct[7] * ct[25] * ct[388] * ct[42];
  proc_control_B.ct_m[205] = ct[8] * ct[26] * ct[388] * ct[41];
  proc_control_B.ct_m[206] = ct[9] * ct[25] * ct[388] * ct[42];
  proc_control_B.ct_m[207] = ct[93];
  proc_control_B.ct_m[208] = ct[12] * ct[26] * ct[388] * ct[41];
  proc_control_B.ct_tmp_f5 = ct[16] * ct[24];
  proc_control_B.ct_m[209] = proc_control_B.ct_tmp_f5 * ct[388] * ct[40];
  proc_control_B.ct_m[210] = ct[7] * ct[26] * ct[388] * ct[42];
  proc_control_B.ct_m[211] = ct[9] * ct[26] * ct[388] * ct[42];
  proc_control_B.ct_m[212] = ct[16] * ct[25] * ct[388] * ct[40];
  proc_control_B.ct_tmp_tmp_l = ct[17] * ct[24];
  proc_control_B.ct_tmp_e3 = proc_control_B.ct_tmp_tmp_l * ct[388];
  proc_control_B.ct_m[213] = proc_control_B.ct_tmp_e3 * ct[40];
  proc_control_B.ct_m[214] = ct[16] * ct[26] * ct[388] * ct[40];
  proc_control_B.ct_tmp_gn = ct[17] * ct[25] * ct[388];
  proc_control_B.ct_m[215] = proc_control_B.ct_tmp_gn * ct[40];
  proc_control_B.ct_m[216] = proc_control_B.ct_tmp_e3 * ct[41];
  proc_control_B.ct_tmp_e3 = ct[17] * ct[26] * ct[388];
  proc_control_B.ct_m[217] = proc_control_B.ct_tmp_e3 * ct[40];
  proc_control_B.ct_m[218] = proc_control_B.ct_tmp_gn * ct[41];
  proc_control_B.ct_m[219] = proc_control_B.ct_tmp_e3 * ct[41];
  proc_control_B.ct_m[220] = ct[40] * ct[348];
  proc_control_B.ct_m[221] = ct[41] * ct[340];
  proc_control_B.ct_m[222] = ct[42] * ct[331];
  proc_control_B.ct_m[223] = ct[40] * ct[92];
  proc_control_B.ct_m[224] = ct[40] * ct[99];
  proc_control_B.ct_m[225] = ct[95];
  proc_control_B.ct_m[226] = ct[96];
  proc_control_B.ct_m[227] = ct[41] * ct[96];
  proc_control_B.ct_m[228] = ct[97];
  proc_control_B.ct_m[229] = ct[98];
  proc_control_B.ct_m[230] = ct[99];
  proc_control_B.ct_m[231] = ct[100];
  proc_control_B.ct_m[232] = ct[102];
  proc_control_B.ct_m[233] = ct[104];
  proc_control_B.ct_m[234] = ct[105];
  proc_control_B.ct_m[235] = ct[107];
  proc_control_B.ct_m[236] = ct[109];
  proc_control_B.ct_m[237] = ct[111];
  proc_control_B.ct_m[238] = ct[113];
  proc_control_B.ct_m[239] = ct[115];
  proc_control_B.ct_m[240] = ct[120];
  proc_control_B.ct_m[241] = ct[122];
  proc_control_B.ct_m[242] = ct[123];
  proc_control_B.ct_m[243] = ct[124];
  proc_control_B.ct_m[244] = ct[125];
  proc_control_B.ct_m[245] = ct[126];
  proc_control_B.ct_m[246] = ct[127];
  proc_control_B.ct_m[247] = ct[128];
  proc_control_B.ct_m[248] = ct[130];
  proc_control_B.ct_m[249] = ct[131];
  proc_control_B.ct_m[250] = ct[132];
  proc_control_B.ct_m[251] = ct[134];
  proc_control_B.ct_m[252] = ct[135];
  proc_control_B.ct_m[253] = ct[136];
  proc_control_B.ct_m[254] = ct[138];
  proc_control_B.ct_m[255] = ct[139];
  proc_control_B.ct_m[256] = ct[140];
  proc_control_B.ct_m[257] = ct[141];
  proc_control_B.ct_m[258] = ct[143];
  proc_control_B.ct_m[259] = ct[145];
  proc_control_B.ct_m[260] = ct[146];
  proc_control_B.ct_m[261] = ct[147];
  proc_control_B.ct_m[262] = ct[149];
  proc_control_B.ct_m[263] = ct[150];
  proc_control_B.ct_m[264] = ct[151];
  proc_control_B.ct_m[265] = ct[152];
  proc_control_B.ct_m[266] = ct[153];
  proc_control_B.ct_m[267] = ct[154];
  proc_control_B.ct_m[268] = ct[155];
  proc_control_B.ct_m[269] = ct[157];
  proc_control_B.ct_m[270] = ct[158];
  proc_control_B.ct_m[271] = ct[159];
  proc_control_B.ct_m[272] = ct[160];
  proc_control_B.ct_m[273] = ct[162];
  proc_control_B.ct_m[274] = ct[164];
  proc_control_B.ct_m[275] = ct[165];
  proc_control_B.ct_m[276] = ct[166];
  proc_control_B.ct_m[277] = ct[168];
  proc_control_B.ct_m[278] = ct[169];
  proc_control_B.ct_m[279] = ct[170];
  proc_control_B.ct_m[280] = ct[171];
  proc_control_B.ct_m[281] = ct[173];
  proc_control_B.ct_m[282] = ct[174];
  proc_control_B.ct_m[283] = ct[175];
  proc_control_B.ct_m[284] = ct[177];
  proc_control_B.ct_m[285] = ct[178];
  proc_control_B.ct_m[286] = ct[179];
  proc_control_B.ct_m[287] = ct[180];
  proc_control_B.ct_m[288] = ct[181];
  proc_control_B.ct_m[289] = ct[182];
  proc_control_B.ct_m[290] = ct[185];
  proc_control_B.ct_m[291] = ct[186];
  proc_control_B.ct_m[292] = ct[187];
  proc_control_B.ct_m[293] = ct[188];
  proc_control_B.ct_m[294] = ct[191];
  proc_control_B.ct_m[295] = ct[192];
  proc_control_B.ct_m[296] = ct[196];
  proc_control_B.ct_m[297] = ct[197];
  proc_control_B.ct_m[298] = ct[198];
  proc_control_B.ct_m[299] = ct[199];
  proc_control_B.ct_m[300] = ct[201];
  proc_control_B.ct_m[301] = ct[204];
  proc_control_B.ct_m[302] = ct[205];
  proc_control_B.ct_m[303] = ct[206];
  proc_control_B.ct_m[304] = ct[208];
  proc_control_B.ct_m[305] = ct[209];
  proc_control_B.ct_m[306] = ct[210];
  std::memcpy(&proc_control_B.ct_m[307], &ct[212], 29U * sizeof(real_T));
  proc_control_B.ct_m[336] = ct[241];
  std::memcpy(&proc_control_B.ct_m[337], &ct[243], 31U * sizeof(real_T));
  proc_control_B.ct_m[368] = ct[274];
  std::memcpy(&proc_control_B.ct_m[369], &ct[276], 9U * sizeof(real_T));
  proc_control_B.ct_m[378] = ct[286];
  std::memcpy(&proc_control_B.ct_m[379], &ct[288], 19U * sizeof(real_T));
  proc_control_B.ct_m[398] = ct[307];
  std::memcpy(&proc_control_B.ct_m[399], &ct[309], 9U * sizeof(real_T));
  proc_control_B.ct_m[408] = ct[318];
  std::memcpy(&proc_control_B.ct_m[409], &ct[320], 9U * sizeof(real_T));
  proc_control_B.ct_m[418] = ct[329];
  proc_control_B.ct_m[419] = ct[331];
  proc_control_B.ct_m[420] = ct[332];
  proc_control_B.ct_m[421] = ct[333];
  proc_control_B.ct_m[422] = ct[335];
  proc_control_B.ct_m[423] = ct[336];
  proc_control_B.ct_m[424] = ct[337];
  proc_control_B.ct_m[425] = ct[338];
  proc_control_B.ct_m[426] = ct[340];
  proc_control_B.ct_m[427] = ct[341];
  proc_control_B.ct_m[428] = ct[342];
  proc_control_B.ct_m[429] = ct[344];
  proc_control_B.ct_m[430] = ct[345];
  proc_control_B.ct_m[431] = ct[346];
  std::memcpy(&proc_control_B.ct_m[432], &ct[348], sizeof(real_T) << 3U);
  proc_control_B.ct_m[440] = ct[356];
  std::memcpy(&proc_control_B.ct_m[441], &ct[358], 30U * sizeof(real_T));
  proc_control_B.ct_tmp_e3 = ct[8] * ct[10];
  proc_control_B.ct_tmp_gn = proc_control_B.ct_tmp_e3 * ct[24];
  proc_control_B.ct_m[471] = proc_control_B.ct_tmp_gn * ct[388];
  proc_control_B.ct_tmp_ba = ct[6] * ct[13];
  proc_control_B.ct_tmp_gh = proc_control_B.ct_tmp_ba * ct[24];
  proc_control_B.ct_m[472] = proc_control_B.ct_tmp_gh * ct[388];
  proc_control_B.ct_tmp_je = ct[7] * ct[12];
  proc_control_B.ct_m[473] = proc_control_B.ct_tmp_je * ct[24] * ct[388];
  proc_control_B.ct_m[474] = proc_control_B.ct_tmp_m * ct[388];
  proc_control_B.ct_tmp_m = ct[8] * ct[12];
  proc_control_B.ct_tmp_gj = proc_control_B.ct_tmp_m * ct[24];
  proc_control_B.ct_m[475] = proc_control_B.ct_tmp_gj * ct[388];
  proc_control_B.ct_tmp_fp = ct[7] * ct[14];
  proc_control_B.ct_tmp_ano = proc_control_B.ct_tmp_fp * ct[24];
  proc_control_B.ct_m[476] = proc_control_B.ct_tmp_ano * ct[388];
  proc_control_B.ct_tmp_co = ct[8] * ct[13];
  proc_control_B.ct_m[477] = proc_control_B.ct_tmp_co * ct[24] * ct[388];
  proc_control_B.ct_tmp_fo = ct[9] * ct[13];
  proc_control_B.ct_m[478] = proc_control_B.ct_tmp_fo * ct[24] * ct[388];
  proc_control_B.ct_tmp_bn = ct[10] * ct[12];
  proc_control_B.ct_tmp_ey = proc_control_B.ct_tmp_bn * ct[24];
  proc_control_B.ct_m[479] = proc_control_B.ct_tmp_ey * ct[388];
  proc_control_B.ct_tmp_de = ct[9] * ct[14];
  proc_control_B.ct_tmp_b0 = proc_control_B.ct_tmp_de * ct[24];
  proc_control_B.ct_m[480] = proc_control_B.ct_tmp_b0 * ct[388];
  proc_control_B.ct_tmp_jm = ct[11] * ct[12];
  proc_control_B.ct_m[481] = proc_control_B.ct_tmp_jm * ct[24] * ct[388];
  proc_control_B.ct_m[482] = proc_control_B.ct_tmp_l2 * ct[388];
  proc_control_B.ct_tmp_l2 = ct[11] * ct[13];
  proc_control_B.ct_tmp_li = proc_control_B.ct_tmp_l2 * ct[24];
  proc_control_B.ct_m[483] = proc_control_B.ct_tmp_li * ct[388];
  proc_control_B.ct_m[484] = ct[388];
  proc_control_B.ct_m[485] = proc_control_B.ct_tmp_pn * ct[388];
  proc_control_B.ct_tmp_pn = ct[7] * ct[9];
  proc_control_B.ct_tmp_mc = proc_control_B.ct_tmp_pn * ct[25];
  proc_control_B.ct_m[486] = proc_control_B.ct_tmp_mc * ct[388];
  proc_control_B.ct_tmp_oe = ct[6] * ct[11];
  proc_control_B.ct_tmp_ez = proc_control_B.ct_tmp_oe * ct[25];
  proc_control_B.ct_m[487] = proc_control_B.ct_tmp_ez * ct[388];
  proc_control_B.ct_m[488] = proc_control_B.ct_tmp_bs * ct[25] * ct[388];
  proc_control_B.ct_m[489] = proc_control_B.ct_tmp_pp * ct[25] * ct[388];
  proc_control_B.ct_tmp_mz = proc_control_B.ct_tmp_e3 * ct[25];
  proc_control_B.ct_m[490] = proc_control_B.ct_tmp_mz * ct[388];
  proc_control_B.ct_tmp_hz = proc_control_B.ct_tmp_ba * ct[25];
  proc_control_B.ct_m[491] = proc_control_B.ct_tmp_hz * ct[388];
  proc_control_B.ct_m[492] = proc_control_B.ct_tmp_je * ct[25] * ct[388];
  proc_control_B.ct_m[493] = proc_control_B.ct_tmp_gk * ct[388];
  proc_control_B.ct_m[494] = ct[389];
  proc_control_B.ct_tmp_gk = proc_control_B.ct_tmp_m * ct[25];
  proc_control_B.ct_m[495] = proc_control_B.ct_tmp_gk * ct[388];
  proc_control_B.ct_tmp_br5 = proc_control_B.ct_tmp_fp * ct[25];
  proc_control_B.ct_m[496] = proc_control_B.ct_tmp_br5 * ct[388];
  proc_control_B.ct_m[497] = proc_control_B.ct_tmp_co * ct[25] * ct[388];
  proc_control_B.ct_m[498] = proc_control_B.ct_tmp_fo * ct[25] * ct[388];
  proc_control_B.ct_tmp_dm = proc_control_B.ct_tmp_bn * ct[25];
  proc_control_B.ct_m[499] = proc_control_B.ct_tmp_dm * ct[388];
  proc_control_B.ct_tmp_oh = proc_control_B.ct_tmp_de * ct[25];
  proc_control_B.ct_m[500] = proc_control_B.ct_tmp_oh * ct[388];
  proc_control_B.ct_m[501] = proc_control_B.ct_tmp_jm * ct[25] * ct[388];
  proc_control_B.ct_m[502] = proc_control_B.ct_tmp_fr * ct[388];
  proc_control_B.ct_tmp_fr = proc_control_B.ct_tmp_l2 * ct[25];
  proc_control_B.ct_m[503] = proc_control_B.ct_tmp_fr * ct[388];
  proc_control_B.ct_m[504] = ct[390];
  proc_control_B.ct_m[505] = proc_control_B.ct_tmp_tmp_f4 * ct[26] * ct[388];
  proc_control_B.ct_tmp_tmp_f4 = proc_control_B.ct_tmp_pn * ct[26];
  proc_control_B.ct_m[506] = proc_control_B.ct_tmp_tmp_f4 * ct[388];
  proc_control_B.ct_m[507] = proc_control_B.ct_tmp_oe * ct[26] * ct[388];
  proc_control_B.ct_m[508] = proc_control_B.ct_tmp_bs * ct[26] * ct[388];
  proc_control_B.ct_m[509] = proc_control_B.ct_tmp_pp * ct[26] * ct[388];
  proc_control_B.ct_m[510] = proc_control_B.ct_tmp_e3 * ct[26] * ct[388];
  proc_control_B.ct_m[511] = proc_control_B.ct_tmp_ba * ct[26] * ct[388];
  proc_control_B.ct_m[512] = proc_control_B.ct_tmp_je * ct[26] * ct[388];
  proc_control_B.ct_m[513] = proc_control_B.ct_tmp_tmp_o * ct[26] * ct[388];
  proc_control_B.ct_m[514] = ct[391];
  proc_control_B.ct_tmp_m *= ct[26];
  proc_control_B.ct_m[515] = proc_control_B.ct_tmp_m * ct[388];
  proc_control_B.ct_m[516] = proc_control_B.ct_tmp_fp * ct[26] * ct[388];
  proc_control_B.ct_m[517] = proc_control_B.ct_tmp_co * ct[26] * ct[388];
  proc_control_B.ct_m[518] = proc_control_B.ct_tmp_fo * ct[26] * ct[388];
  proc_control_B.ct_m[519] = proc_control_B.ct_tmp_bn * ct[26] * ct[388];
  proc_control_B.ct_m[520] = proc_control_B.ct_tmp_de * ct[26] * ct[388];
  proc_control_B.ct_m[521] = proc_control_B.ct_tmp_jm * ct[26] * ct[388];
  proc_control_B.ct_m[522] = proc_control_B.ct_tmp_tmp_f3 * ct[26] * ct[388];
  proc_control_B.ct_tmp_l2 *= ct[26];
  proc_control_B.ct_m[523] = proc_control_B.ct_tmp_l2 * ct[388];
  proc_control_B.ct_tmp_pp = ct[10] * ct[15];
  proc_control_B.ct_m[524] = proc_control_B.ct_tmp_pp * ct[24] * ct[388];
  proc_control_B.ct_m[525] = ct[392];
  proc_control_B.ct_tmp_bs = ct[11] * ct[15];
  proc_control_B.ct_m[526] = proc_control_B.ct_tmp_bs * ct[24] * ct[388];
  proc_control_B.ct_tmp_e3 = ct[13] * ct[15];
  proc_control_B.ct_m[527] = proc_control_B.ct_tmp_e3 * ct[24] * ct[388];
  proc_control_B.ct_tmp_ba = ct[14] * ct[15];
  proc_control_B.ct_m[528] = proc_control_B.ct_tmp_ba * ct[24] * ct[388];
  proc_control_B.ct_m[529] = ct[393];
  proc_control_B.ct_m[530] = ct[394];
  proc_control_B.ct_m[531] = proc_control_B.ct_tmp_pp * ct[25] * ct[388];
  proc_control_B.ct_m[532] = proc_control_B.ct_tmp_bs * ct[25] * ct[388];
  proc_control_B.ct_m[533] = proc_control_B.ct_tmp_e3 * ct[25] * ct[388];
  proc_control_B.ct_m[534] = proc_control_B.ct_tmp_ba * ct[25] * ct[388];
  proc_control_B.ct_m[535] = ct[395];
  proc_control_B.ct_tmp_je = ct[6] * ct[16];
  proc_control_B.ct_m[536] = proc_control_B.ct_tmp_je * ct[24] * ct[388];
  proc_control_B.ct_tmp_fp = ct[8] * ct[16];
  proc_control_B.ct_m[537] = proc_control_B.ct_tmp_fp * ct[24] * ct[388];
  proc_control_B.ct_tmp_co = ct[12] * ct[16];
  proc_control_B.ct_m[538] = proc_control_B.ct_tmp_co * ct[24] * ct[388];
  proc_control_B.ct_tmp_fo = ct[14] * ct[16];
  proc_control_B.ct_tmp_bn = proc_control_B.ct_tmp_fo * ct[24];
  proc_control_B.ct_m[539] = proc_control_B.ct_tmp_bn * ct[388];
  proc_control_B.ct_m[540] = proc_control_B.ct_tmp_pp * ct[26] * ct[388];
  proc_control_B.ct_m[541] = proc_control_B.ct_tmp_bs * ct[26] * ct[388];
  proc_control_B.ct_m[542] = proc_control_B.ct_tmp_e3 * ct[26] * ct[388];
  proc_control_B.ct_m[543] = proc_control_B.ct_tmp_ba * ct[26] * ct[388];
  proc_control_B.ct_m[544] = proc_control_B.ct_tmp_je * ct[25] * ct[388];
  proc_control_B.ct_tmp_pp = ct[6] * ct[17];
  proc_control_B.ct_tmp_bs = proc_control_B.ct_tmp_pp * ct[24];
  proc_control_B.ct_m[545] = proc_control_B.ct_tmp_bs * ct[388];
  proc_control_B.ct_m[546] = ct[396];
  proc_control_B.ct_tmp_e3 = ct[7] * ct[17];
  proc_control_B.ct_m[547] = proc_control_B.ct_tmp_e3 * ct[24] * ct[388];
  proc_control_B.ct_m[548] = proc_control_B.ct_tmp_fp * ct[25] * ct[388];
  proc_control_B.ct_tmp_ba = ct[9] * ct[17];
  proc_control_B.ct_m[549] = proc_control_B.ct_tmp_ba * ct[24] * ct[388];
  proc_control_B.ct_tmp_de = ct[10] * ct[17];
  proc_control_B.ct_tmp_jm = proc_control_B.ct_tmp_de * ct[24];
  proc_control_B.ct_m[550] = proc_control_B.ct_tmp_jm * ct[388];
  proc_control_B.ct_m[551] = proc_control_B.ct_tmp_co * ct[25] * ct[388];
  proc_control_B.ct_tmp_tmp_f3 = proc_control_B.ct_tmp_fo * ct[25];
  proc_control_B.ct_m[552] = proc_control_B.ct_tmp_tmp_f3 * ct[388];
  proc_control_B.ct_m[553] = proc_control_B.ct_tmp_je * ct[26] * ct[388];
  proc_control_B.ct_tmp_je = proc_control_B.ct_tmp_pp * ct[25];
  proc_control_B.ct_m[554] = proc_control_B.ct_tmp_je * ct[388];
  proc_control_B.ct_m[555] = proc_control_B.ct_tmp_e3 * ct[25] * ct[388];
  proc_control_B.ct_m[556] = ct[397];
  proc_control_B.ct_m[557] = proc_control_B.ct_tmp_fp * ct[26] * ct[388];
  proc_control_B.ct_m[558] = proc_control_B.ct_tmp_ba * ct[25] * ct[388];
  proc_control_B.ct_tmp_fp = proc_control_B.ct_tmp_de * ct[25];
  proc_control_B.ct_m[559] = proc_control_B.ct_tmp_fp * ct[388];
  proc_control_B.ct_m[560] = proc_control_B.ct_tmp_co * ct[26] * ct[388];
  proc_control_B.ct_tmp_co = proc_control_B.ct_tmp_fo * ct[26];
  proc_control_B.ct_m[561] = proc_control_B.ct_tmp_co * ct[388];
  proc_control_B.ct_tmp_fo = ct[15] * ct[16];
  proc_control_B.ct_m[562] = proc_control_B.ct_tmp_fo * ct[24] * ct[388];
  proc_control_B.ct_tmp_pp *= ct[26];
  proc_control_B.ct_m[563] = proc_control_B.ct_tmp_pp * ct[388];
  proc_control_B.ct_m[564] = proc_control_B.ct_tmp_e3 * ct[26] * ct[388];
  proc_control_B.ct_m[565] = proc_control_B.ct_tmp_ba * ct[26] * ct[388];
  proc_control_B.ct_tmp_e3 = proc_control_B.ct_tmp_de * ct[26];
  proc_control_B.ct_m[566] = proc_control_B.ct_tmp_e3 * ct[388];
  proc_control_B.ct_m[567] = ct[398];
  proc_control_B.ct_m[568] = proc_control_B.ct_tmp_fo * ct[25] * ct[388];
  proc_control_B.ct_tmp_ba = ct[15] * ct[17];
  proc_control_B.ct_m[569] = proc_control_B.ct_tmp_ba * ct[24] * ct[388];
  proc_control_B.ct_m[570] = proc_control_B.ct_tmp_fo * ct[26] * ct[388];
  proc_control_B.ct_m[571] = proc_control_B.ct_tmp_ba * ct[25] * ct[388];
  proc_control_B.ct_m[572] = proc_control_B.ct_tmp_b5 * ct[388];
  proc_control_B.ct_m[573] = proc_control_B.ct_tmp_ba * ct[26] * ct[388];
  proc_control_B.ct_m[574] = proc_control_B.ct_tmp_dkn * ct[388];
  proc_control_B.ct_m[575] = proc_control_B.ct_tmp_tmp_o3 * ct[26] * ct[388];
  proc_control_B.ct_m[576] = ct[399];
  proc_control_B.ct_m[577] = ct[26] * ct[290];
  proc_control_B.ct_m[578] = ct[26] * ct[291];
  proc_control_B.ct_m[579] = ct[26] * ct[292];
  proc_control_B.ct_m[580] = ct[26] * ct[293];
  proc_control_B.ct_m[581] = ct[26] * ct[294];
  proc_control_B.ct_m[582] = ct[26] * ct[295];
  proc_control_B.ct_m[583] = ct[26] * ct[308];
  proc_control_B.ct_m[584] = ct[14] * ct[90];
  proc_control_B.ct_m[585] = ct[400];
  proc_control_B.ct_m[586] = ct[10] * ct[96];
  proc_control_B.ct_m[587] = ct[17] * ct[106];
  proc_control_B.ct_m[588] = ct[24] * ct[77];
  proc_control_B.ct_m[589] = ct[24] * ct[80];
  proc_control_B.ct_m[590] = ct[401];
  proc_control_B.ct_m[591] = ct[24] * ct[81];
  proc_control_B.ct_m[592] = ct[24] * ct[83];
  proc_control_B.ct_m[593] = ct[24] * ct[87];
  proc_control_B.ct_m[594] = ct[24] * ct[88];
  proc_control_B.ct_m[595] = ct[26] * ct[77];
  proc_control_B.ct_m[596] = ct[402];
  proc_control_B.ct_m[597] = ct[26] * ct[80];
  proc_control_B.ct_m[598] = ct[26] * ct[81];
  proc_control_B.ct_m[599] = ct[25] * ct[94];
  proc_control_B.ct_m[600] = ct[26] * ct[94];
  proc_control_B.ct_m[601] = ct[25] * ct[103];
  proc_control_B.ct_m[602] = ct[403];
  proc_control_B.ct_m[603] = ct[26] * ct[101];
  proc_control_B.ct_m[604] = ct[25] * ct[108];
  proc_control_B.ct_m[605] = ct[26] * ct[103];
  proc_control_B.ct_m[606] = ct[26] * ct[108];
  proc_control_B.ct_m[607] = ct[26] * ct[110];
  proc_control_B.ct_m[608] = ct[404];
  proc_control_B.ct_m[609] = ct[25] * ct[114];
  proc_control_B.ct_m[610] = ct[26] * ct[112];
  proc_control_B.ct_m[611] = ct[25] * ct[116];
  proc_control_B.ct_m[612] = ct[26] * ct[114];
  proc_control_B.ct_m[613] = ct[26] * ct[116];
  proc_control_B.ct_m[614] = ct[26] * ct[117];
  proc_control_B.ct_m[615] = ct[21] * ct[126];
  proc_control_B.ct_m[616] = ct[22] * ct[128];
  proc_control_B.ct_m[617] = ct[405];
  proc_control_B.ct_m[618] = ct[21] * ct[130];
  proc_control_B.ct_m[619] = ct[21] * ct[133];
  proc_control_B.ct_m[620] = ct[21] * ct[135];
  proc_control_B.ct_m[621] = ct[22] * ct[135];
  proc_control_B.ct_m[622] = ct[22] * ct[136];
  proc_control_B.ct_m[623] = ct[406];
  proc_control_B.ct_m[624] = ct[21] * ct[140];
  proc_control_B.ct_m[625] = ct[22] * ct[140];
  proc_control_B.ct_m[626] = ct[22] * ct[142];
  proc_control_B.ct_m[627] = ct[25] * ct[119];
  proc_control_B.ct_m[628] = ct[26] * ct[118];
  proc_control_B.ct_m[629] = ct[407];
  proc_control_B.ct_m[630] = ct[21] * ct[144];
  proc_control_B.ct_m[631] = ct[21] * ct[145];
  proc_control_B.ct_m[632] = ct[21] * ct[147];
  proc_control_B.ct_m[633] = ct[23] * ct[147];
  proc_control_B.ct_m[634] = ct[21] * ct[149];
  proc_control_B.ct_m[635] = ct[408];
  proc_control_B.ct_m[636] = ct[23] * ct[154];
  proc_control_B.ct_m[637] = ct[21] * ct[155];
  proc_control_B.ct_m[638] = ct[23] * ct[155];
  proc_control_B.ct_m[639] = ct[23] * ct[158];
  proc_control_B.ct_m[640] = ct[23] * ct[161];
  proc_control_B.ct_m[641] = ct[26] * ct[119];
  proc_control_B.ct_m[642] = ct[409];
  proc_control_B.ct_m[643] = ct[22] * ct[163];
  proc_control_B.ct_m[644] = ct[22] * ct[165];
  proc_control_B.ct_m[645] = ct[22] * ct[166];
  proc_control_B.ct_m[646] = ct[23] * ct[165];
  proc_control_B.ct_m[647] = ct[22] * ct[169];
  proc_control_B.ct_m[648] = ct[410];
  proc_control_B.ct_m[649] = ct[23] * ct[169];
  proc_control_B.ct_m[650] = ct[23] * ct[172];
  proc_control_B.ct_m[651] = ct[23] * ct[173];
  proc_control_B.ct_m[652] = ct[22] * ct[175];
  proc_control_B.ct_m[653] = ct[23] * ct[177];
  proc_control_B.ct_m[654] = ct[411];
  proc_control_B.ct_m[655] = ct[21] * ct[183];
  proc_control_B.ct_m[656] = ct[26] * ct[121];
  proc_control_B.ct_m[657] = ct[21] * ct[184];
  proc_control_B.ct_m[658] = ct[22] * ct[187];
  proc_control_B.ct_m[659] = ct[412];
  proc_control_B.ct_m[660] = ct[22] * ct[188];
  proc_control_B.ct_m[661] = ct[22] * ct[189];
  proc_control_B.ct_m[662] = ct[22] * ct[190];
  proc_control_B.ct_m[663] = ct[22] * ct[191];
  proc_control_B.ct_m[664] = ct[23] * ct[191];
  proc_control_B.ct_m[665] = ct[22] * ct[192];
  proc_control_B.ct_m[666] = ct[23] * ct[192];
  proc_control_B.ct_m[667] = ct[23] * ct[193];
  proc_control_B.ct_tmp_b5 = ct[18] * ct[27] * ct[31] * ct[357];
  proc_control_B.ct_m[668] = proc_control_B.ct_tmp_b5 * 2.0;
  proc_control_B.ct_tmp_dkn = ct[18] * ct[28] * ct[31] * ct[357];
  proc_control_B.ct_m[669] = proc_control_B.ct_tmp_dkn * 2.0;
  proc_control_B.ct_m[670] = ct[413];
  proc_control_B.ct_tmp_ba = ct[19] * ct[27] * ct[31] * ct[357];
  proc_control_B.ct_m[671] = proc_control_B.ct_tmp_ba * 2.0;
  proc_control_B.ct_m[672] = proc_control_B.ct_tmp_b5 * 4.0;
  proc_control_B.ct_m[673] = ct[18] * ct[29] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_tmp_b5 = ct[19] * ct[28] * ct[31] * ct[357];
  proc_control_B.ct_m[674] = proc_control_B.ct_tmp_b5 * 2.0;
  proc_control_B.ct_m[675] = ct[20] * ct[27] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[676] = proc_control_B.ct_tmp_dkn * 4.0;
  proc_control_B.ct_m[677] = proc_control_B.ct_tmp_ba * 4.0;
  proc_control_B.ct_m[678] = ct[19] * ct[29] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[679] = ct[20] * ct[28] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[680] = proc_control_B.ct_tmp_b5 * 4.0;
  proc_control_B.ct_m[681] = ct[414];
  proc_control_B.ct_m[682] = ct[20] * ct[29] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[683] = ct[18] * ct[30] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[684] = ct[19] * ct[30] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[685] = ct[20] * ct[30] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[686] = ct[21] * ct[194];
  proc_control_B.ct_m[687] = ct[21] * ct[195];
  proc_control_B.ct_m[688] = ct[21] * ct[196];
  proc_control_B.ct_m[689] = ct[22] * ct[196];
  proc_control_B.ct_m[690] = ct[21] * ct[197];
  proc_control_B.ct_m[691] = ct[415];
  proc_control_B.ct_m[692] = ct[23] * ct[197];
  proc_control_B.ct_m[693] = ct[21] * ct[198];
  proc_control_B.ct_m[694] = ct[22] * ct[198];
  proc_control_B.ct_m[695] = ct[22] * ct[200];
  proc_control_B.ct_m[696] = ct[21] * ct[201];
  proc_control_B.ct_m[697] = ct[23] * ct[201];
  proc_control_B.ct_m[698] = ct[23] * ct[202];
  proc_control_B.ct_m[699] = ct[22] * ct[203];
  proc_control_B.ct_m[700] = ct[23] * ct[204];
  proc_control_B.ct_m[701] = ct[22] * ct[205];
  proc_control_B.ct_m[702] = ct[416];
  proc_control_B.ct_m[703] = ct[23] * ct[206];
  proc_control_B.ct_m[704] = ct[23] * ct[207];
  proc_control_B.ct_m[705] = ct[22] * ct[208];
  proc_control_B.ct_m[706] = ct[23] * ct[211];
  proc_control_B.ct_m[707] = ct[417];
  proc_control_B.ct_m[708] = ct[242] + ct[285];
  proc_control_B.ct_m[709] = ct[242] + ct[319];
  proc_control_B.ct_m[710] = ct[285] + ct[319];
  proc_control_B.ct_m[711] = ct[418];
  proc_control_B.ct_m[712] = -ct[275];
  proc_control_B.ct_m[713] = -ct[287];
  proc_control_B.ct_m[714] = -ct[289];
  proc_control_B.ct_m[715] = proc_control_B.ct_tmp_il * ct[25] * ct[43];
  proc_control_B.ct_m[716] = proc_control_B.ct_tmp_br * ct[25] * ct[43];
  proc_control_B.ct_m[717] = proc_control_B.ct_tmp_h2b * ct[25] * ct[43];
  proc_control_B.ct_m[718] = ct[419];
  proc_control_B.ct_m[719] = proc_control_B.ct_tmp_il * ct[26] * ct[43];
  proc_control_B.ct_m[720] = proc_control_B.ct_tmp_br * ct[26] * ct[43];
  proc_control_B.ct_m[721] = proc_control_B.ct_tmp_h2b * ct[26] * ct[43];
  proc_control_B.ct_m[722] = proc_control_B.ct_tmp_p5 * ct[25] * ct[26] * ct[41];
  proc_control_B.ct_m[723] = proc_control_B.ct_tmp_k0 * ct[25] * ct[26] * ct[41];
  proc_control_B.ct_m[724] = proc_control_B.ct_tmp_li * ct[32] * ct[40];
  proc_control_B.ct_m[725] = proc_control_B.ct_tmp_gs * ct[25] * ct[26] * ct[42];
  proc_control_B.ct_m[726] = proc_control_B.ct_tmp_df * ct[25] * ct[26] * ct[42];
  proc_control_B.ct_m[727] = proc_control_B.ct_tmp_fr * ct[32] * ct[40];
  proc_control_B.ct_m[728] = proc_control_B.ct_tmp_gj * ct[32] * ct[41];
  proc_control_B.ct_m[729] = ct[420];
  proc_control_B.ct_m[730] = proc_control_B.ct_tmp_l2 * ct[32] * ct[40];
  proc_control_B.ct_m[731] = proc_control_B.ct_tmp_f5 * ct[25] * ct[26] * ct[40];
  proc_control_B.ct_tmp_l2 = proc_control_B.ct_tmp_pn * ct[24];
  proc_control_B.ct_m[732] = proc_control_B.ct_tmp_l2 * ct[32] * ct[42];
  proc_control_B.ct_m[733] = proc_control_B.ct_tmp_gk * ct[32] * ct[41];
  proc_control_B.ct_tmp_pn = proc_control_B.ct_tmp_tmp_l * ct[25] * ct[26];
  proc_control_B.ct_m[734] = proc_control_B.ct_tmp_pn * ct[40];
  proc_control_B.ct_m[735] = proc_control_B.ct_tmp_mc * ct[32] * ct[42];
  proc_control_B.ct_m[736] = proc_control_B.ct_tmp_m * ct[32] * ct[41];
  proc_control_B.ct_m[737] = proc_control_B.ct_tmp_bn * ct[32] * ct[40];
  proc_control_B.ct_m[738] = proc_control_B.ct_tmp_tmp_f4 * ct[32] * ct[42];
  proc_control_B.ct_m[739] = proc_control_B.ct_tmp_pn * ct[41];
  proc_control_B.ct_m[740] = ct[421];
  proc_control_B.ct_m[741] = proc_control_B.ct_tmp_jm * ct[32] * ct[40];
  proc_control_B.ct_m[742] = proc_control_B.ct_tmp_tmp_f3 * ct[32] * ct[40];
  proc_control_B.ct_m[743] = proc_control_B.ct_tmp_fp * ct[32] * ct[40];
  proc_control_B.ct_m[744] = proc_control_B.ct_tmp_co * ct[32] * ct[40];
  proc_control_B.ct_m[745] = proc_control_B.ct_tmp_bs * ct[32] * ct[41];
  proc_control_B.ct_m[746] = proc_control_B.ct_tmp_e3 * ct[32] * ct[40];
  proc_control_B.ct_m[747] = proc_control_B.ct_tmp_je * ct[32] * ct[41];
  proc_control_B.ct_m[748] = proc_control_B.ct_tmp_pp * ct[32] * ct[41];
  proc_control_B.ct_m[749] = proc_control_B.ct_tmp_l2 * ct[25] * ct[43];
  proc_control_B.ct_tmp_m = proc_control_B.ct_tmp_oe * ct[24];
  proc_control_B.ct_m[750] = proc_control_B.ct_tmp_m * ct[25] * ct[43];
  proc_control_B.ct_m[751] = ct[422];
  proc_control_B.ct_m[752] = proc_control_B.ct_tmp_gn * ct[25] * ct[43];
  proc_control_B.ct_m[753] = proc_control_B.ct_tmp_gh * ct[25] * ct[43];
  proc_control_B.ct_m[754] = proc_control_B.ct_tmp_gj * ct[25] * ct[43];
  proc_control_B.ct_m[755] = proc_control_B.ct_tmp_ano * ct[25] * ct[43];
  proc_control_B.ct_m[756] = proc_control_B.ct_tmp_ey * ct[25] * ct[43];
  proc_control_B.ct_m[757] = proc_control_B.ct_tmp_b0 * ct[25] * ct[43];
  proc_control_B.ct_m[758] = proc_control_B.ct_tmp_li * ct[25] * ct[43];
  proc_control_B.ct_m[759] = proc_control_B.ct_tmp_l2 * ct[26] * ct[43];
  proc_control_B.ct_m[760] = proc_control_B.ct_tmp_m * ct[26] * ct[43];
  proc_control_B.ct_m[761] = proc_control_B.ct_tmp_gn * ct[26] * ct[43];
  proc_control_B.ct_m[762] = ct[423];
  proc_control_B.ct_m[763] = proc_control_B.ct_tmp_gh * ct[26] * ct[43];
  proc_control_B.ct_m[764] = proc_control_B.ct_tmp_gj * ct[26] * ct[43];
  proc_control_B.ct_m[765] = proc_control_B.ct_tmp_ano * ct[26] * ct[43];
  proc_control_B.ct_m[766] = proc_control_B.ct_tmp_ey * ct[26] * ct[43];
  proc_control_B.ct_m[767] = proc_control_B.ct_tmp_b0 * ct[26] * ct[43];
  proc_control_B.ct_m[768] = proc_control_B.ct_tmp_li * ct[26] * ct[43];
  proc_control_B.ct_m[769] = proc_control_B.ct_tmp_mc * ct[26] * ct[43];
  proc_control_B.ct_m[770] = proc_control_B.ct_tmp_ez * ct[26] * ct[43];
  proc_control_B.ct_m[771] = proc_control_B.ct_tmp_mz * ct[26] * ct[43];
  proc_control_B.ct_m[772] = proc_control_B.ct_tmp_hz * ct[26] * ct[43];
  proc_control_B.ct_m[773] = ct[424];
  proc_control_B.ct_m[774] = proc_control_B.ct_tmp_gk * ct[26] * ct[43];
  proc_control_B.ct_m[775] = proc_control_B.ct_tmp_br5 * ct[26] * ct[43];
  proc_control_B.ct_m[776] = proc_control_B.ct_tmp_dm * ct[26] * ct[43];
  proc_control_B.ct_m[777] = proc_control_B.ct_tmp_oh * ct[26] * ct[43];
  proc_control_B.ct_m[778] = proc_control_B.ct_tmp_fr * ct[26] * ct[43];
  proc_control_B.ct_tmp_l2 = ct[10] * ct[24];
  proc_control_B.ct_tmp_m = proc_control_B.ct_tmp_l2 * ct[25] * ct[32];
  proc_control_B.ct_m[779] = proc_control_B.ct_tmp_m * ct[40];
  proc_control_B.ct_tmp_fr = ct[14] * ct[24];
  proc_control_B.ct_tmp_gk = proc_control_B.ct_tmp_fr * ct[25] * ct[32];
  proc_control_B.ct_m[780] = proc_control_B.ct_tmp_gk * ct[40];
  proc_control_B.ct_tmp_l2 = proc_control_B.ct_tmp_l2 * ct[26] * ct[32];
  proc_control_B.ct_m[781] = proc_control_B.ct_tmp_l2 * ct[40];
  proc_control_B.ct_tmp_fr = proc_control_B.ct_tmp_fr * ct[26] * ct[32];
  proc_control_B.ct_m[782] = proc_control_B.ct_tmp_fr * ct[40];
  proc_control_B.ct_tmp_pn = ct[6] * ct[24];
  proc_control_B.ct_tmp_b5 = proc_control_B.ct_tmp_pn * ct[25] * ct[32];
  proc_control_B.ct_m[783] = proc_control_B.ct_tmp_b5 * ct[41];
  proc_control_B.ct_m[784] = ct[425];
  proc_control_B.ct_m[785] = proc_control_B.ct_tmp_gk * ct[41];
  proc_control_B.ct_tmp_gk = ct[10] * ct[25] * ct[26] * ct[32];
  proc_control_B.ct_m[786] = proc_control_B.ct_tmp_gk * ct[40];
  proc_control_B.ct_tmp_dkn = ct[14] * ct[25] * ct[26] * ct[32];
  proc_control_B.ct_m[787] = proc_control_B.ct_tmp_dkn * ct[40];
  proc_control_B.ct_tmp_pn = proc_control_B.ct_tmp_pn * ct[26] * ct[32];
  proc_control_B.ct_m[788] = proc_control_B.ct_tmp_pn * ct[41];
  proc_control_B.ct_m[789] = proc_control_B.ct_tmp_b5 * ct[42];
  proc_control_B.ct_m[790] = proc_control_B.ct_tmp_m * ct[42];
  proc_control_B.ct_m[791] = proc_control_B.ct_tmp_fr * ct[41];
  proc_control_B.ct_tmp_m = ct[6] * ct[25] * ct[26] * ct[32];
  proc_control_B.ct_m[792] = proc_control_B.ct_tmp_m * ct[41];
  proc_control_B.ct_m[793] = proc_control_B.ct_tmp_pn * ct[42];
  proc_control_B.ct_m[794] = proc_control_B.ct_tmp_l2 * ct[42];
  proc_control_B.ct_m[795] = ct[426];
  proc_control_B.ct_m[796] = proc_control_B.ct_tmp_dkn * ct[41];
  proc_control_B.ct_m[797] = proc_control_B.ct_tmp_m * ct[42];
  proc_control_B.ct_m[798] = proc_control_B.ct_tmp_gk * ct[42];
  proc_control_B.ct_m[799] = ct[427];
  proc_control_B.ct_m[800] = ct[428];
  proc_control_B.ct_m[801] = ct[429];
  proc_control_B.ct_m[802] = ct[430];
  proc_control_B.ct_m[803] = ct[431];
  proc_control_B.ct_m[804] = ct[432];
  proc_control_ft_2(proc_control_B.ct_m, Anq);
}

void proc_control::proc_cont_AUVQuatJacobianMatrix(const real_T in1[13], const
  real_T in3[38], real_T Anq[169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  // AUVQuatJacobianMatrix
  //     Anq = AUVQuatJacobianMatrix(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     05-Jul-2022 23:04:31
  proc_control_B.t15_jv = in3[6] * in1[10];
  proc_control_B.t17_l = in3[9] * in1[10];
  proc_control_B.t19_j = in3[4] * in1[11];
  proc_control_B.t23_c = in3[10] * in1[11];
  proc_control_B.t25_b = in3[5] * in1[12];
  proc_control_B.t27_i = in3[8] * in1[12];
  proc_control_B.t33_k = in1[10] * in3[13];
  proc_control_B.t34_l = in1[10] * in3[14];
  proc_control_B.t35 = in1[11] * in3[12];
  proc_control_B.t37_j = in1[11] * in3[14];
  proc_control_B.t38_m = in3[12] * in1[12];
  proc_control_B.t39_j = in1[12] * in3[13];
  proc_control_B.t41_e = in1[7] * in3[30];
  proc_control_B.t42_d = in1[8] * in3[31];
  proc_control_B.t43_j = in1[9] * in3[32];
  proc_control_B.t44_k = in3[1] * in3[36];
  proc_control_B.t45_o = in3[12] * in3[12];
  proc_control_B.t47 = in3[13] * in3[13];
  proc_control_B.t50_n = in3[14] * in3[14];
  proc_control_B.t57 = in3[0] * in3[0];
  proc_control_B.t58 = rt_powd_snf(in3[0], 3.0);
  proc_control_B.t129 = in1[4] / 2.0;
  proc_control_B.t130 = in1[5] / 2.0;
  proc_control_B.t131 = in1[6] / 2.0;
  proc_control_B.t133 = in1[10] / 2.0;
  proc_control_B.t134 = in1[11] / 2.0;
  proc_control_B.t135 = in1[12] / 2.0;
  proc_control_B.in3_p[0] = in3[18];
  proc_control_B.in3_p[1] = in3[19];
  proc_control_B.in3_p[2] = in3[20];
  proc_control_B.in3_p[3] = in3[21];
  proc_control_B.in3_p[4] = in3[22];
  proc_control_B.in3_p[5] = in3[23];
  std::memcpy(&proc_control_B.in3_p[6], &in3[3], sizeof(real_T) << 3U);
  proc_control_B.in3_p[14] = in3[11];
  proc_control_B.in3_p[15] = in3[33];
  proc_control_B.in3_p[16] = in3[34];
  proc_control_B.in3_p[17] = in3[35];
  proc_control_B.in3_p[18] = in3[15];
  proc_control_B.in3_p[19] = in3[16];
  proc_control_B.in3_p[20] = in3[17];
  proc_control_B.in3_p[21] = in3[12];
  proc_control_B.in3_p[22] = in3[13];
  proc_control_B.in3_p[23] = in3[14];
  proc_control_B.in3_p[24] = in3[30];
  proc_control_B.in3_p[25] = in3[31];
  proc_control_B.in3_p[26] = in3[32];
  proc_control_B.in3_p[27] = in1[4];
  proc_control_B.in3_p[28] = in1[5];
  proc_control_B.in3_p[29] = in1[6];
  proc_control_B.in3_p[30] = in1[3];
  proc_control_B.in3_p[31] = in3[37];
  proc_control_B.in3_p[32] = in3[0];
  proc_control_B.in3_p[33] = in1[10];
  proc_control_B.in3_p[34] = in1[11];
  proc_control_B.in3_p[35] = in1[12];
  proc_control_B.in3_tmp_oi = in3[0] * in3[12];
  proc_control_B.in3_p[36] = proc_control_B.in3_tmp_oi * in1[8];
  proc_control_B.in3_tmp_bz = in3[0] * in3[13];
  proc_control_B.in3_p[37] = proc_control_B.in3_tmp_bz * in1[8];
  proc_control_B.in3_p[38] = proc_control_B.in3_tmp_bz * in1[9];
  proc_control_B.in3_tmp_me = in3[0] * in3[14];
  proc_control_B.in3_p[39] = proc_control_B.in3_tmp_me * in1[9];
  proc_control_B.in3_p[40] = -in3[33];
  proc_control_B.in3_p[41] = -in3[34];
  proc_control_B.in3_p[42] = -in3[35];
  proc_control_B.in3_p[43] = -in3[0];
  if (std::isnan(in1[7])) {
    proc_control_B.in3_tmp_tmp = (rtNaN);
  } else if (in1[7] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[7] > 0.0);
  }

  proc_control_B.in3_p[44] = in3[24] * proc_control_B.in3_tmp_tmp * in1[7];
  if (std::isnan(in1[8])) {
    proc_control_B.in3_tmp_tmp = (rtNaN);
  } else if (in1[8] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[8] > 0.0);
  }

  proc_control_B.in3_p[45] = in3[25] * proc_control_B.in3_tmp_tmp * in1[8];
  if (std::isnan(in1[9])) {
    proc_control_B.in3_tmp_tmp = (rtNaN);
  } else if (in1[9] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[9] > 0.0);
  }

  proc_control_B.in3_p[46] = in3[26] * proc_control_B.in3_tmp_tmp * in1[9];
  proc_control_B.in3_p[47] = -(in3[10] * in1[10]);
  proc_control_B.in3_p[48] = -(in3[5] * in1[11]);
  proc_control_B.in3_p[49] = -(in3[6] * in1[12]);
  proc_control_B.in3_p[50] = -(in1[10] * in3[33]);
  proc_control_B.in3_p[51] = -(in1[11] * in3[34]);
  proc_control_B.in3_p[52] = -(in1[12] * in3[35]);
  proc_control_B.in3_p[53] = -proc_control_B.t34_l;
  proc_control_B.in3_p[54] = -proc_control_B.t35;
  proc_control_B.in3_p[55] = -proc_control_B.t39_j;
  proc_control_B.in3_p[56] = in1[4] * in1[4] * 2.0;
  proc_control_B.in3_p[57] = in1[5] * in1[5] * 2.0;
  proc_control_B.in3_p[58] = in1[6] * in1[6] * 2.0;
  proc_control_B.in3_p[59] = -proc_control_B.t41_e;
  proc_control_B.in3_p[60] = -proc_control_B.t42_d;
  proc_control_B.in3_p[61] = -proc_control_B.t43_j;
  proc_control_B.in3_p[62] = -proc_control_B.t44_k;
  proc_control_B.in3_p[63] = proc_control_B.t129;
  proc_control_B.in3_p[64] = proc_control_B.t130;
  proc_control_B.in3_p[65] = proc_control_B.t131;
  proc_control_B.in3_p[66] = in1[3] / 2.0;
  proc_control_B.in3_p[67] = proc_control_B.t133;
  proc_control_B.in3_p[68] = proc_control_B.t134;
  proc_control_B.in3_p[69] = proc_control_B.t135;
  if (std::isnan(in1[10])) {
    proc_control_B.in3_tmp_tmp = (rtNaN);
  } else if (in1[10] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[10] > 0.0);
  }

  proc_control_B.in3_p[70] = in1[10] * in3[27] * proc_control_B.in3_tmp_tmp;
  proc_control_B.in3_p[71] = proc_control_B.t37_j + in1[7];
  if (std::isnan(in1[11])) {
    proc_control_B.in3_tmp_tmp = (rtNaN);
  } else if (in1[11] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[11] > 0.0);
  }

  proc_control_B.in3_p[72] = in1[11] * in3[28] * proc_control_B.in3_tmp_tmp;
  proc_control_B.in3_p[73] = proc_control_B.t33_k + in1[9];
  proc_control_B.in3_p[74] = in3[3] * in1[10];
  proc_control_B.in3_p[75] = proc_control_B.t38_m + in1[8];
  if (std::isnan(in1[12])) {
    proc_control_B.in3_tmp_tmp = (rtNaN);
  } else if (in1[12] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[12] > 0.0);
  }

  proc_control_B.in3_p[76] = in1[12] * in3[29] * proc_control_B.in3_tmp_tmp;
  proc_control_B.in3_tmp_tmp = in3[3] * in3[7];
  proc_control_B.in3_tmp_ihx = proc_control_B.in3_tmp_tmp * in3[11];
  proc_control_B.in3_tmp_fi = proc_control_B.in3_tmp_ihx * in3[31];
  proc_control_B.in3_p[77] = proc_control_B.in3_tmp_fi * in3[0];
  proc_control_B.in3_tmp_tmp_m = in3[3] * in3[8];
  proc_control_B.in3_tmp_dm = proc_control_B.in3_tmp_tmp_m * in3[10];
  proc_control_B.in3_tmp_as = proc_control_B.in3_tmp_dm * in3[31];
  proc_control_B.in3_p[78] = proc_control_B.in3_tmp_as * in3[0];
  proc_control_B.in3_tmp_tmp_g = in3[4] * in3[6];
  proc_control_B.in3_tmp_dp = proc_control_B.in3_tmp_tmp_g * in3[11];
  proc_control_B.in3_tmp_g1 = proc_control_B.in3_tmp_dp * in3[31];
  proc_control_B.in3_p[79] = proc_control_B.in3_tmp_g1 * in3[0];
  proc_control_B.in3_tmp_tmp_o = in3[4] * in3[8];
  proc_control_B.in3_tmp_pa = proc_control_B.in3_tmp_tmp_o * in3[9];
  proc_control_B.in3_tmp_k1 = proc_control_B.in3_tmp_pa * in3[31];
  proc_control_B.in3_p[80] = proc_control_B.in3_tmp_k1 * in3[0];
  proc_control_B.in3_tmp_tmp_a = in3[5] * in3[6];
  proc_control_B.in3_tmp_es = proc_control_B.in3_tmp_tmp_a * in3[10];
  proc_control_B.in3_tmp_l3 = proc_control_B.in3_tmp_es * in3[31];
  proc_control_B.in3_p[81] = proc_control_B.in3_tmp_l3 * in3[0];
  proc_control_B.in3_tmp_tmp_os = in3[5] * in3[7];
  proc_control_B.in3_tmp_ne = proc_control_B.in3_tmp_tmp_os * in3[9];
  proc_control_B.in3_tmp_eu = proc_control_B.in3_tmp_ne * in3[31];
  proc_control_B.in3_p[82] = proc_control_B.in3_tmp_eu * in3[0];
  proc_control_B.in3_p[83] = proc_control_B.in3_tmp_ihx * in3[32] * in3[0];
  proc_control_B.in3_p[84] = proc_control_B.in3_tmp_dm * in3[32] * in3[0];
  proc_control_B.in3_p[85] = proc_control_B.t15_jv;
  proc_control_B.in3_p[86] = proc_control_B.in3_tmp_dp * in3[32] * in3[0];
  proc_control_B.in3_p[87] = proc_control_B.in3_tmp_pa * in3[32] * in3[0];
  proc_control_B.in3_p[88] = proc_control_B.in3_tmp_es * in3[32] * in3[0];
  proc_control_B.in3_p[89] = proc_control_B.in3_tmp_ne * in3[32] * in3[0];
  proc_control_B.in3_tmp_iw = in3[3] * in3[34];
  proc_control_B.in3_tmp_oav = proc_control_B.in3_tmp_iw * in3[30];
  proc_control_B.in3_p[90] = proc_control_B.in3_tmp_oav * in3[31] * in3[32];
  proc_control_B.in3_tmp_tmp_tmp = in3[5] * in3[34];
  proc_control_B.in3_tmp_tmp_ha = proc_control_B.in3_tmp_tmp_tmp * in3[30];
  proc_control_B.in3_tmp_ak = proc_control_B.in3_tmp_tmp_ha * in3[31];
  proc_control_B.in3_p[91] = proc_control_B.in3_tmp_ak * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_a = in3[11] * in3[34];
  proc_control_B.in3_tmp_tmp_kq = proc_control_B.in3_tmp_tmp_tmp_a * in3[30];
  proc_control_B.in3_tmp_gu = proc_control_B.in3_tmp_tmp_kq * in3[31];
  proc_control_B.in3_p[92] = proc_control_B.in3_tmp_gu * in3[32];
  proc_control_B.in3_tmp_tmp_h = in3[7] * in3[11];
  proc_control_B.in3_tmp_dz = proc_control_B.in3_tmp_tmp_h * in3[33];
  proc_control_B.in3_tmp_eq = proc_control_B.in3_tmp_dz * in3[30];
  proc_control_B.in3_p[93] = proc_control_B.in3_tmp_eq * in3[0];
  proc_control_B.in3_tmp_tmp_d = in3[8] * in3[10];
  proc_control_B.in3_tmp_md = proc_control_B.in3_tmp_tmp_d * in3[33];
  proc_control_B.in3_tmp_ft = proc_control_B.in3_tmp_md * in3[30];
  proc_control_B.in3_p[94] = proc_control_B.in3_tmp_ft * in3[0];
  proc_control_B.in3_p[95] = in3[8] * in1[10];
  proc_control_B.in3_tmp_tmp_k0 = in3[3] * in3[35];
  proc_control_B.in3_tmp_akz = proc_control_B.in3_tmp_tmp_k0 * in3[30] * in3[31];
  proc_control_B.in3_p[96] = proc_control_B.in3_tmp_akz * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_o = in3[4] * in3[35];
  proc_control_B.in3_tmp_tmp_hq = proc_control_B.in3_tmp_tmp_tmp_o * in3[30];
  proc_control_B.in3_tmp_e3 = proc_control_B.in3_tmp_tmp_hq * in3[31];
  proc_control_B.in3_p[97] = proc_control_B.in3_tmp_e3 * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_d = in3[6] * in3[35];
  proc_control_B.in3_tmp_tmp_dd = proc_control_B.in3_tmp_tmp_tmp_d * in3[30];
  proc_control_B.in3_tmp_jx = proc_control_B.in3_tmp_tmp_dd * in3[31];
  proc_control_B.in3_p[98] = proc_control_B.in3_tmp_jx * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_i = in3[7] * in3[35];
  proc_control_B.in3_tmp_tmp_oh = proc_control_B.in3_tmp_tmp_tmp_i * in3[30];
  proc_control_B.in3_tmp_bq = proc_control_B.in3_tmp_tmp_oh * in3[31];
  proc_control_B.in3_p[99] = proc_control_B.in3_tmp_bq * in3[32];
  proc_control_B.in3_p[100] = proc_control_B.in3_tmp_dz * in3[31] * in3[0];
  proc_control_B.in3_tmp_bck = proc_control_B.in3_tmp_md * in3[31];
  proc_control_B.in3_p[101] = proc_control_B.in3_tmp_bck * in3[0];
  proc_control_B.in3_tmp_tmp_n = in3[3] * in3[11];
  proc_control_B.in3_tmp_ij = proc_control_B.in3_tmp_tmp_n * in3[34];
  proc_control_B.in3_p[102] = proc_control_B.in3_tmp_ij * in3[30] * in3[0];
  proc_control_B.in3_tmp_tmp_k = in3[5] * in3[9];
  proc_control_B.in3_tmp_km = proc_control_B.in3_tmp_tmp_k * in3[34];
  proc_control_B.in3_tmp_dw = proc_control_B.in3_tmp_km * in3[30];
  proc_control_B.in3_p[103] = proc_control_B.in3_tmp_dw * in3[0];
  proc_control_B.in3_p[104] = proc_control_B.in3_tmp_dz * in3[32] * in3[0];
  proc_control_B.in3_p[105] = proc_control_B.t17_l;
  proc_control_B.in3_tmp_ik = in3[33] * in3[34];
  proc_control_B.in3_tmp_tmp_l = proc_control_B.in3_tmp_ik * in3[30];
  proc_control_B.in3_tmp_ku = proc_control_B.in3_tmp_tmp_l * in3[31];
  proc_control_B.in3_p[106] = proc_control_B.in3_tmp_ku * in3[32];
  proc_control_B.in3_tmp_im = proc_control_B.in3_tmp_tmp * in3[35];
  proc_control_B.in3_p[107] = proc_control_B.in3_tmp_im * in3[30] * in3[0];
  proc_control_B.in3_tmp_mc1 = proc_control_B.in3_tmp_tmp_g * in3[35];
  proc_control_B.in3_tmp_ol = proc_control_B.in3_tmp_mc1 * in3[30];
  proc_control_B.in3_p[108] = proc_control_B.in3_tmp_ol * in3[0];
  proc_control_B.in3_p[109] = proc_control_B.in3_tmp_ij * in3[31] * in3[0];
  proc_control_B.in3_tmp_py = proc_control_B.in3_tmp_km * in3[31];
  proc_control_B.in3_p[110] = proc_control_B.in3_tmp_py * in3[0];
  proc_control_B.in3_p[111] = proc_control_B.in3_tmp_im * in3[31] * in3[0];
  proc_control_B.in3_tmp_do = proc_control_B.in3_tmp_mc1 * in3[31];
  proc_control_B.in3_p[112] = proc_control_B.in3_tmp_do * in3[0];
  proc_control_B.in3_p[113] = proc_control_B.in3_tmp_ij * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_hz = in3[11] * in3[33];
  proc_control_B.in3_tmp_jm = proc_control_B.in3_tmp_tmp_hz * in3[34];
  proc_control_B.in3_tmp_lf = proc_control_B.in3_tmp_jm * in3[30];
  proc_control_B.in3_p[114] = proc_control_B.in3_tmp_lf * in3[0];
  proc_control_B.in3_p[115] = proc_control_B.in3_tmp_im * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_gc = in3[7] * in3[33];
  proc_control_B.in3_tmp_ap = proc_control_B.in3_tmp_tmp_gc * in3[35];
  proc_control_B.in3_tmp_lt = proc_control_B.in3_tmp_ap * in3[30];
  proc_control_B.in3_p[116] = proc_control_B.in3_tmp_lt * in3[0];
  proc_control_B.in3_tmp_ad1 = proc_control_B.in3_tmp_jm * in3[31];
  proc_control_B.in3_p[117] = proc_control_B.in3_tmp_ad1 * in3[0];
  proc_control_B.in3_tmp_es3 = proc_control_B.in3_tmp_ap * in3[31];
  proc_control_B.in3_p[118] = proc_control_B.in3_tmp_es3 * in3[0];
  proc_control_B.in3_tmp_ec = proc_control_B.in3_tmp_iw * in3[35];
  proc_control_B.in3_tmp_nk = proc_control_B.in3_tmp_ec * in3[30];
  proc_control_B.in3_p[119] = proc_control_B.in3_tmp_nk * in3[0];
  proc_control_B.in3_p[120] = proc_control_B.t19_j;
  proc_control_B.in3_tmp_nf = proc_control_B.in3_tmp_ec * in3[31];
  proc_control_B.in3_p[121] = proc_control_B.in3_tmp_nf * in3[0];
  proc_control_B.in3_tmp_hv = proc_control_B.in3_tmp_ik * in3[35];
  proc_control_B.in3_p[122] = proc_control_B.in3_tmp_hv * in3[30] * in3[0];
  proc_control_B.in3_p[123] = proc_control_B.in3_tmp_hv * in3[31] * in3[0];
  proc_control_B.in3_p[124] = proc_control_B.in3_tmp_hv * in3[32] * in3[0];
  proc_control_B.in3_tmp_ae = proc_control_B.in3_tmp_tmp * in3[30];
  proc_control_B.in3_tmp_hh = proc_control_B.in3_tmp_ae * in3[31];
  proc_control_B.in3_p[125] = proc_control_B.in3_tmp_hh * in3[0];
  proc_control_B.in3_tmp_hg = proc_control_B.in3_tmp_tmp_m * in3[30];
  proc_control_B.in3_tmp_b5 = proc_control_B.in3_tmp_hg * in3[31];
  proc_control_B.in3_p[126] = proc_control_B.in3_tmp_b5 * in3[0];
  proc_control_B.in3_tmp_cc = proc_control_B.in3_tmp_tmp_a * in3[30];
  proc_control_B.in3_tmp_k5 = proc_control_B.in3_tmp_cc * in3[31];
  proc_control_B.in3_p[127] = proc_control_B.in3_tmp_k5 * in3[0];
  proc_control_B.in3_tmp_bv = proc_control_B.in3_tmp_tmp_o * in3[30];
  proc_control_B.in3_tmp_aw = proc_control_B.in3_tmp_bv * in3[31];
  proc_control_B.in3_p[128] = proc_control_B.in3_tmp_aw * in3[0];
  proc_control_B.in3_tmp_ch = proc_control_B.in3_tmp_tmp_os * in3[30];
  proc_control_B.in3_tmp_kmg = proc_control_B.in3_tmp_ch * in3[31];
  proc_control_B.in3_p[129] = proc_control_B.in3_tmp_kmg * in3[0];
  proc_control_B.in3_tmp_tmp_j = in3[3] * in3[10];
  proc_control_B.in3_tmp_gk = proc_control_B.in3_tmp_tmp_j * in3[30];
  proc_control_B.in3_tmp_pai = proc_control_B.in3_tmp_gk * in3[31];
  proc_control_B.in3_p[130] = proc_control_B.in3_tmp_pai * in3[0];
  proc_control_B.in3_tmp_tmp_hc = in3[4] * in3[9];
  proc_control_B.in3_tmp_pjd = proc_control_B.in3_tmp_tmp_hc * in3[30];
  proc_control_B.in3_tmp_o3 = proc_control_B.in3_tmp_pjd * in3[31];
  proc_control_B.in3_p[131] = proc_control_B.in3_tmp_o3 * in3[0];
  proc_control_B.in3_tmp_ib = proc_control_B.in3_tmp_tmp_n * in3[30];
  proc_control_B.in3_tmp_c4 = proc_control_B.in3_tmp_ib * in3[31];
  proc_control_B.in3_p[132] = proc_control_B.in3_tmp_c4 * in3[0];
  proc_control_B.in3_tmp_kh = proc_control_B.in3_tmp_tmp_k * in3[30] * in3[31];
  proc_control_B.in3_p[133] = proc_control_B.in3_tmp_kh * in3[0];
  proc_control_B.in3_tmp_tmp_hg = in3[4] * in3[11];
  proc_control_B.in3_tmp_jj = proc_control_B.in3_tmp_tmp_hg * in3[30];
  proc_control_B.in3_tmp_hs = proc_control_B.in3_tmp_jj * in3[31];
  proc_control_B.in3_p[134] = proc_control_B.in3_tmp_hs * in3[0];
  proc_control_B.in3_tmp_tmp_c = in3[5] * in3[10];
  proc_control_B.in3_tmp_ce = proc_control_B.in3_tmp_tmp_c * in3[30];
  proc_control_B.in3_tmp_bvc = proc_control_B.in3_tmp_ce * in3[31];
  proc_control_B.in3_p[135] = proc_control_B.in3_tmp_bvc * in3[0];
  proc_control_B.in3_tmp_tmp_gr = in3[6] * in3[10];
  proc_control_B.in3_tmp_ceq = proc_control_B.in3_tmp_tmp_gr * in3[30];
  proc_control_B.in3_tmp_ez = proc_control_B.in3_tmp_ceq * in3[31];
  proc_control_B.in3_p[136] = proc_control_B.in3_tmp_ez * in3[0];
  proc_control_B.in3_tmp_tmp_e = in3[7] * in3[9];
  proc_control_B.in3_tmp_fe = proc_control_B.in3_tmp_tmp_e * in3[30];
  proc_control_B.in3_tmp_co = proc_control_B.in3_tmp_fe * in3[31];
  proc_control_B.in3_p[137] = proc_control_B.in3_tmp_co * in3[0];
  proc_control_B.in3_tmp_tmp_eq = in3[6] * in3[11];
  proc_control_B.in3_tmp_dy = proc_control_B.in3_tmp_tmp_eq * in3[30];
  proc_control_B.in3_tmp_om = proc_control_B.in3_tmp_dy * in3[31];
  proc_control_B.in3_p[138] = proc_control_B.in3_tmp_om * in3[0];
  proc_control_B.in3_p[139] = in3[7] * in1[11];
  proc_control_B.in3_tmp_tmp_av = in3[8] * in3[9];
  proc_control_B.in3_tmp_nr = proc_control_B.in3_tmp_tmp_av * in3[30];
  proc_control_B.in3_tmp_ar = proc_control_B.in3_tmp_nr * in3[31];
  proc_control_B.in3_p[140] = proc_control_B.in3_tmp_ar * in3[0];
  proc_control_B.in3_tmp_br = proc_control_B.in3_tmp_tmp_h * in3[30];
  proc_control_B.in3_tmp_pe = proc_control_B.in3_tmp_br * in3[31];
  proc_control_B.in3_p[141] = proc_control_B.in3_tmp_pe * in3[0];
  proc_control_B.in3_tmp_f0 = proc_control_B.in3_tmp_tmp_d * in3[30];
  proc_control_B.in3_tmp_ok = proc_control_B.in3_tmp_f0 * in3[31];
  proc_control_B.in3_p[142] = proc_control_B.in3_tmp_ok * in3[0];
  proc_control_B.in3_p[143] = proc_control_B.in3_tmp_ae * in3[32] * in3[0];
  proc_control_B.in3_tmp_ah = proc_control_B.in3_tmp_tmp_g * in3[30];
  proc_control_B.in3_p[144] = proc_control_B.in3_tmp_ah * in3[32] * in3[0];
  proc_control_B.in3_p[145] = proc_control_B.in3_tmp_hg * in3[32] * in3[0];
  proc_control_B.in3_p[146] = proc_control_B.in3_tmp_cc * in3[32] * in3[0];
  proc_control_B.in3_p[147] = proc_control_B.in3_tmp_bv * in3[32] * in3[0];
  proc_control_B.in3_p[148] = proc_control_B.in3_tmp_ch * in3[32] * in3[0];
  proc_control_B.in3_p[149] = proc_control_B.in3_tmp_gk * in3[32] * in3[0];
  proc_control_B.in3_p[150] = in3[9] * in1[11];
  proc_control_B.in3_p[151] = proc_control_B.in3_tmp_pjd * in3[32] * in3[0];
  proc_control_B.in3_p[152] = proc_control_B.in3_tmp_ib * in3[32] * in3[0];
  proc_control_B.in3_p[153] = proc_control_B.in3_tmp_jj * in3[32] * in3[0];
  proc_control_B.in3_p[154] = proc_control_B.in3_tmp_ce * in3[32] * in3[0];
  proc_control_B.in3_p[155] = proc_control_B.in3_tmp_ceq * in3[32] * in3[0];
  proc_control_B.in3_p[156] = proc_control_B.in3_tmp_fe * in3[32] * in3[0];
  proc_control_B.in3_p[157] = proc_control_B.in3_tmp_dy * in3[32] * in3[0];
  proc_control_B.in3_p[158] = proc_control_B.in3_tmp_nr * in3[32] * in3[0];
  proc_control_B.in3_p[159] = proc_control_B.in3_tmp_br * in3[32] * in3[0];
  proc_control_B.in3_p[160] = proc_control_B.t23_c;
  proc_control_B.in3_p[161] = proc_control_B.in3_tmp_f0 * in3[32] * in3[0];
  proc_control_B.in3_p[162] = proc_control_B.in3_tmp_tmp * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[163] = proc_control_B.in3_tmp_tmp_g * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[164] = proc_control_B.in3_tmp_tmp_m * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[165] = proc_control_B.in3_tmp_tmp_a * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[166] = proc_control_B.in3_tmp_tmp_o * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[167] = proc_control_B.in3_tmp_tmp_os * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[168] = proc_control_B.in3_tmp_tmp_j * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[169] = proc_control_B.in3_tmp_tmp_hc * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[170] = proc_control_B.in3_tmp_tmp_n * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[171] = in3[4] * in1[12];
  proc_control_B.in3_p[172] = proc_control_B.in3_tmp_tmp_k * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[173] = proc_control_B.in3_tmp_tmp_hg * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[174] = proc_control_B.in3_tmp_tmp_c * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[175] = proc_control_B.in3_tmp_tmp_gr * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[176] = proc_control_B.in3_tmp_tmp_e * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[177] = proc_control_B.in3_tmp_tmp_eq * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[178] = proc_control_B.in3_tmp_tmp_av * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[179] = proc_control_B.in3_tmp_tmp_h * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[180] = proc_control_B.t25_b;
  proc_control_B.in3_tmp_ceq = in3[8] * in3[33];
  proc_control_B.in3_tmp_ch = proc_control_B.in3_tmp_ceq * in3[30];
  proc_control_B.in3_tmp_gk = proc_control_B.in3_tmp_ch * in3[31];
  proc_control_B.in3_p[181] = proc_control_B.in3_tmp_gk * in3[0];
  proc_control_B.in3_tmp_fe = in3[10] * in3[33];
  proc_control_B.in3_tmp_pjd = proc_control_B.in3_tmp_fe * in3[30];
  proc_control_B.in3_tmp_ib = proc_control_B.in3_tmp_pjd * in3[31];
  proc_control_B.in3_p[182] = proc_control_B.in3_tmp_ib * in3[0];
  proc_control_B.in3_tmp_jj = proc_control_B.in3_tmp_tmp_hz * in3[30] * in3[31];
  proc_control_B.in3_p[183] = proc_control_B.in3_tmp_jj * in3[0];
  proc_control_B.in3_tmp_ce = proc_control_B.in3_tmp_tmp_gc * in3[30];
  proc_control_B.in3_p[184] = proc_control_B.in3_tmp_ce * in3[32] * in3[0];
  proc_control_B.in3_p[185] = proc_control_B.in3_tmp_ch * in3[32] * in3[0];
  proc_control_B.in3_p[186] = proc_control_B.in3_tmp_pjd * in3[32] * in3[0];
  proc_control_B.in3_p[187] = proc_control_B.in3_tmp_ak * in3[0];
  proc_control_B.in3_tmp_ch = in3[9] * in3[34];
  proc_control_B.in3_tmp_ak = proc_control_B.in3_tmp_ch * in3[30];
  proc_control_B.in3_p[188] = proc_control_B.in3_tmp_ak * in3[31] * in3[0];
  proc_control_B.in3_p[189] = proc_control_B.in3_tmp_gu * in3[0];
  proc_control_B.in3_p[190] = proc_control_B.in3_tmp_tmp_gc * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[191] = proc_control_B.in3_tmp_ceq * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[192] = proc_control_B.in3_tmp_fe * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[193] = proc_control_B.in3_tmp_tmp_hz * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[194] = proc_control_B.in3_tmp_oav * in3[32] * in3[0];
  proc_control_B.in3_p[195] = proc_control_B.in3_tmp_akz * in3[0];
  proc_control_B.in3_p[196] = proc_control_B.in3_tmp_e3 * in3[0];
  proc_control_B.in3_p[197] = proc_control_B.in3_tmp_tmp_ha * in3[32] * in3[0];
  proc_control_B.in3_p[198] = proc_control_B.in3_tmp_jx * in3[0];
  proc_control_B.in3_p[199] = proc_control_B.t27_i;
  proc_control_B.in3_p[200] = proc_control_B.in3_tmp_bq * in3[0];
  proc_control_B.in3_p[201] = proc_control_B.in3_tmp_ak * in3[32] * in3[0];
  proc_control_B.in3_p[202] = proc_control_B.in3_tmp_tmp_kq * in3[32] * in3[0];
  proc_control_B.in3_p[203] = proc_control_B.in3_tmp_iw * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[204] = proc_control_B.in3_tmp_tmp_hq * in3[32] * in3[0];
  proc_control_B.in3_p[205] = proc_control_B.in3_tmp_tmp_tmp * in3[31] * in3[32]
    * in3[0];
  proc_control_B.in3_p[206] = proc_control_B.in3_tmp_tmp_dd * in3[32] * in3[0];
  proc_control_B.in3_p[207] = proc_control_B.in3_tmp_tmp_oh * in3[32] * in3[0];
  proc_control_B.in3_p[208] = proc_control_B.in3_tmp_ch * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[209] = in3[11] * in1[12];
  proc_control_B.in3_p[210] = proc_control_B.in3_tmp_ku * in3[0];
  proc_control_B.in3_p[211] = proc_control_B.in3_tmp_tmp_k0 * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[212] = proc_control_B.in3_tmp_tmp_tmp_o * in3[31] * in3
    [32] * in3[0];
  proc_control_B.in3_p[213] = proc_control_B.in3_tmp_tmp_tmp_d * in3[31] * in3
    [32] * in3[0];
  proc_control_B.in3_p[214] = proc_control_B.in3_tmp_tmp_l * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_ha = in3[33] * in3[35];
  proc_control_B.in3_tmp_oav = proc_control_B.in3_tmp_tmp_ha * in3[30];
  proc_control_B.in3_p[215] = proc_control_B.in3_tmp_oav * in3[31] * in3[0];
  proc_control_B.in3_p[216] = proc_control_B.in3_tmp_ik * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[217] = proc_control_B.in3_tmp_oav * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_kq = in3[34] * in3[35];
  proc_control_B.in3_tmp_oav = proc_control_B.in3_tmp_tmp_kq * in3[30];
  proc_control_B.in3_p[218] = proc_control_B.in3_tmp_oav * in3[31] * in3[0];
  proc_control_B.in3_p[219] = proc_control_B.in3_tmp_tmp_ha * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[220] = proc_control_B.in3_tmp_oav * in3[32] * in3[0];
  proc_control_B.in3_p[221] = proc_control_B.in3_tmp_tmp_kq * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3_p[222] = in3[3] - in3[33];
  proc_control_B.in3_p[223] = in3[7] - in3[34];
  proc_control_B.in3_p[224] = in3[11] - in3[35];
  proc_control_B.in3_p[225] = in3[30] - in3[0];
  proc_control_B.in3_p[226] = in3[31] - in3[0];
  proc_control_B.in3_p[227] = in3[32] - in3[0];
  proc_control_B.in3_p[228] = -(proc_control_B.in3_tmp_bz * in1[7]);
  proc_control_B.in3_p[229] = -(proc_control_B.in3_tmp_me * in1[8]);
  proc_control_B.in3_p[230] = -(proc_control_B.in3_tmp_oi * in1[9]);
  proc_control_B.in3_p[231] = proc_control_B.in3_tmp_tmp * proc_control_B.t58;
  proc_control_B.in3_p[232] = proc_control_B.in3_tmp_tmp_g * proc_control_B.t58;
  proc_control_B.in3_p[233] = proc_control_B.in3_tmp_tmp_m * proc_control_B.t58;
  proc_control_B.in3_p[234] = proc_control_B.in3_tmp_tmp_a * proc_control_B.t58;
  proc_control_B.in3_p[235] = proc_control_B.in3_tmp_tmp_o * proc_control_B.t58;
  proc_control_B.in3_p[236] = proc_control_B.in3_tmp_tmp_os * proc_control_B.t58;
  proc_control_B.in3_p[237] = proc_control_B.in3_tmp_tmp_j * proc_control_B.t58;
  proc_control_B.in3_p[238] = proc_control_B.in3_tmp_tmp_hc * proc_control_B.t58;
  proc_control_B.in3_p[239] = proc_control_B.in3_tmp_tmp_n * proc_control_B.t58;
  proc_control_B.in3_p[240] = proc_control_B.in3_tmp_tmp_k * proc_control_B.t58;
  proc_control_B.in3_p[241] = proc_control_B.in3_tmp_tmp_hg * proc_control_B.t58;
  proc_control_B.in3_p[242] = in1[10] * in3[12];
  proc_control_B.in3_p[243] = proc_control_B.in3_tmp_tmp_c * proc_control_B.t58;
  proc_control_B.in3_p[244] = proc_control_B.in3_tmp_tmp_gr * proc_control_B.t58;
  proc_control_B.in3_p[245] = proc_control_B.in3_tmp_tmp_e * proc_control_B.t58;
  proc_control_B.in3_p[246] = proc_control_B.in3_tmp_tmp_eq * proc_control_B.t58;
  proc_control_B.in3_p[247] = proc_control_B.in3_tmp_tmp_av * proc_control_B.t58;
  proc_control_B.in3_p[248] = proc_control_B.in3_tmp_tmp_h * proc_control_B.t58;
  proc_control_B.in3_p[249] = proc_control_B.in3_tmp_tmp_d * proc_control_B.t58;
  proc_control_B.in3_p[250] = proc_control_B.in3_tmp_tmp_gc * proc_control_B.t58;
  proc_control_B.in3_p[251] = proc_control_B.in3_tmp_ceq * proc_control_B.t58;
  proc_control_B.in3_p[252] = proc_control_B.in3_tmp_fe * proc_control_B.t58;
  proc_control_B.in3_p[253] = proc_control_B.in3_tmp_tmp_hz * proc_control_B.t58;
  proc_control_B.in3_p[254] = proc_control_B.in3_tmp_iw * proc_control_B.t58;
  proc_control_B.in3_p[255] = proc_control_B.in3_tmp_tmp_tmp *
    proc_control_B.t58;
  proc_control_B.in3_p[256] = proc_control_B.in3_tmp_ch * proc_control_B.t58;
  proc_control_B.in3_p[257] = proc_control_B.in3_tmp_tmp_tmp_a *
    proc_control_B.t58;
  proc_control_B.in3_p[258] = proc_control_B.in3_tmp_tmp_k0 * proc_control_B.t58;
  proc_control_B.in3_p[259] = proc_control_B.in3_tmp_tmp_tmp_o *
    proc_control_B.t58;
  proc_control_B.in3_p[260] = proc_control_B.in3_tmp_tmp_tmp_d *
    proc_control_B.t58;
  proc_control_B.in3_p[261] = proc_control_B.in3_tmp_tmp_tmp_i *
    proc_control_B.t58;
  proc_control_B.in3_p[262] = proc_control_B.in3_tmp_ik * proc_control_B.t58;
  proc_control_B.in3_p[263] = proc_control_B.t34_l;
  proc_control_B.in3_p[264] = -proc_control_B.t129;
  proc_control_B.in3_p[265] = -proc_control_B.t130;
  proc_control_B.in3_p[266] = -proc_control_B.t131;
  proc_control_B.in3_p[267] = proc_control_B.in3_tmp_tmp_ha * proc_control_B.t58;
  proc_control_B.in3_p[268] = proc_control_B.in3_tmp_tmp_kq * proc_control_B.t58;
  proc_control_B.in3_p[269] = -proc_control_B.t133;
  proc_control_B.in3_p[270] = -proc_control_B.t134;
  proc_control_B.in3_p[271] = -proc_control_B.t135;
  proc_control_B.in3_tmp_bz = in1[4] * in3[12] * in3[37] * in3[0];
  proc_control_B.in3_p[272] = proc_control_B.in3_tmp_bz * 2.0;
  proc_control_B.in3_tmp_iw = in1[5] * in3[12] * in3[37] * in3[0];
  proc_control_B.in3_p[273] = proc_control_B.in3_tmp_iw * 2.0;
  proc_control_B.in3_p[274] = proc_control_B.t35;
  proc_control_B.in3_tmp_oav = in1[4] * in3[13] * in3[37] * in3[0];
  proc_control_B.in3_p[275] = proc_control_B.in3_tmp_oav * 2.0;
  proc_control_B.in3_p[276] = proc_control_B.in3_tmp_bz * 4.0;
  proc_control_B.in3_p[277] = in1[6] * in3[12] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_tmp_bz = in1[5] * in3[13] * in3[37] * in3[0];
  proc_control_B.in3_p[278] = proc_control_B.in3_tmp_bz * 2.0;
  proc_control_B.in3_p[279] = in1[4] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_p[280] = proc_control_B.in3_tmp_iw * 4.0;
  proc_control_B.in3_p[281] = proc_control_B.in3_tmp_oav * 4.0;
  proc_control_B.in3_p[282] = in1[6] * in3[13] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_p[283] = in1[5] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_p[284] = proc_control_B.in3_tmp_bz * 4.0;
  proc_control_B.in3_p[285] = in1[11] * in3[13];
  proc_control_B.in3_p[286] = in1[6] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_p[287] = in1[3] * in3[12] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_p[288] = in1[3] * in3[13] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_p[289] = in1[3] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_tmp_bz = proc_control_B.in3_tmp_ihx * in3[30];
  proc_control_B.in3_p[290] = proc_control_B.in3_tmp_bz * in3[31];
  proc_control_B.in3_tmp_iw = proc_control_B.in3_tmp_dm * in3[30];
  proc_control_B.in3_p[291] = proc_control_B.in3_tmp_iw * in3[31];
  proc_control_B.in3_tmp_oav = proc_control_B.in3_tmp_dp * in3[30];
  proc_control_B.in3_p[292] = proc_control_B.in3_tmp_oav * in3[31];
  proc_control_B.in3_tmp_ak = proc_control_B.in3_tmp_pa * in3[30];
  proc_control_B.in3_p[293] = proc_control_B.in3_tmp_ak * in3[31];
  proc_control_B.in3_tmp_gu = proc_control_B.in3_tmp_es * in3[30];
  proc_control_B.in3_p[294] = proc_control_B.in3_tmp_gu * in3[31];
  proc_control_B.in3_tmp_akz = proc_control_B.in3_tmp_ne * in3[30];
  proc_control_B.in3_p[295] = proc_control_B.in3_tmp_akz * in3[31];
  proc_control_B.in3_p[296] = proc_control_B.in3_tmp_bz * in3[32];
  proc_control_B.in3_p[297] = proc_control_B.in3_tmp_iw * in3[32];
  proc_control_B.in3_p[298] = proc_control_B.in3_tmp_oav * in3[32];
  proc_control_B.in3_p[299] = proc_control_B.in3_tmp_ak * in3[32];
  proc_control_B.in3_p[300] = proc_control_B.in3_tmp_gu * in3[32];
  proc_control_B.in3_p[301] = proc_control_B.in3_tmp_akz * in3[32];
  proc_control_B.in3_p[302] = proc_control_B.in3_tmp_fi * in3[32];
  proc_control_B.in3_p[303] = proc_control_B.in3_tmp_as * in3[32];
  proc_control_B.in3_p[304] = proc_control_B.in3_tmp_g1 * in3[32];
  proc_control_B.in3_p[305] = proc_control_B.in3_tmp_k1 * in3[32];
  proc_control_B.in3_p[306] = proc_control_B.in3_tmp_l3 * in3[32];
  proc_control_B.in3_p[307] = proc_control_B.in3_tmp_eu * in3[32];
  proc_control_B.in3_p[308] = proc_control_B.in3_tmp_eq * in3[31];
  proc_control_B.in3_p[309] = proc_control_B.in3_tmp_ft * in3[31];
  proc_control_B.in3_p[310] = proc_control_B.in3_tmp_ft * in3[32];
  proc_control_B.in3_p[311] = proc_control_B.in3_tmp_dw * in3[31];
  proc_control_B.in3_p[312] = proc_control_B.in3_tmp_bck * in3[32];
  proc_control_B.in3_p[313] = proc_control_B.t39_j;
  proc_control_B.in3_p[314] = proc_control_B.in3_tmp_ol * in3[31];
  proc_control_B.in3_p[315] = proc_control_B.in3_tmp_dw * in3[32];
  proc_control_B.in3_p[316] = proc_control_B.in3_tmp_ol * in3[32];
  proc_control_B.in3_p[317] = proc_control_B.in3_tmp_py * in3[32];
  proc_control_B.in3_p[318] = proc_control_B.in3_tmp_lf * in3[31];
  proc_control_B.in3_p[319] = in1[12] * in3[14];
  proc_control_B.in3_p[320] = proc_control_B.in3_tmp_do * in3[32];
  proc_control_B.in3_p[321] = proc_control_B.in3_tmp_lt * in3[31];
  proc_control_B.in3_p[322] = proc_control_B.in3_tmp_lf * in3[32];
  proc_control_B.in3_p[323] = proc_control_B.in3_tmp_lt * in3[32];
  proc_control_B.in3_p[324] = proc_control_B.in3_tmp_ad1 * in3[32];
  proc_control_B.in3_p[325] = proc_control_B.in3_tmp_nk * in3[31];
  proc_control_B.in3_p[326] = proc_control_B.in3_tmp_es3 * in3[32];
  proc_control_B.in3_p[327] = proc_control_B.in3_tmp_nk * in3[32];
  proc_control_B.in3_p[328] = proc_control_B.in3_tmp_nf * in3[32];
  proc_control_B.in3_p[329] = proc_control_B.t41_e;
  proc_control_B.in3_p[330] = proc_control_B.in3_tmp_hh * in3[32];
  proc_control_B.in3_p[331] = proc_control_B.in3_tmp_ah * in3[31] * in3[32];
  proc_control_B.in3_p[332] = proc_control_B.in3_tmp_b5 * in3[32];
  proc_control_B.in3_p[333] = proc_control_B.in3_tmp_k5 * in3[32];
  proc_control_B.in3_p[334] = proc_control_B.in3_tmp_aw * in3[32];
  proc_control_B.in3_p[335] = proc_control_B.in3_tmp_kmg * in3[32];
  proc_control_B.in3_p[336] = proc_control_B.in3_tmp_pai * in3[32];
  proc_control_B.in3_p[337] = proc_control_B.in3_tmp_o3 * in3[32];
  proc_control_B.in3_p[338] = proc_control_B.t42_d;
  proc_control_B.in3_p[339] = proc_control_B.in3_tmp_c4 * in3[32];
  proc_control_B.in3_p[340] = proc_control_B.in3_tmp_kh * in3[32];
  proc_control_B.in3_p[341] = proc_control_B.in3_tmp_hs * in3[32];
  proc_control_B.in3_p[342] = proc_control_B.in3_tmp_bvc * in3[32];
  proc_control_B.in3_p[343] = proc_control_B.in3_tmp_ez * in3[32];
  proc_control_B.in3_p[344] = proc_control_B.in3_tmp_co * in3[32];
  proc_control_B.in3_p[345] = proc_control_B.in3_tmp_om * in3[32];
  proc_control_B.in3_p[346] = proc_control_B.in3_tmp_ar * in3[32];
  proc_control_B.in3_p[347] = proc_control_B.in3_tmp_pe * in3[32];
  proc_control_B.in3_p[348] = proc_control_B.in3_tmp_ok * in3[32];
  proc_control_B.in3_p[349] = proc_control_B.t43_j;
  proc_control_B.in3_p[350] = proc_control_B.in3_tmp_iw * in3[0];
  proc_control_B.in3_p[351] = proc_control_B.in3_tmp_oav * in3[0];
  proc_control_B.in3_p[352] = proc_control_B.in3_tmp_akz * in3[0];
  proc_control_B.in3_p[353] = proc_control_B.in3_tmp_ce * in3[31] * in3[32];
  proc_control_B.in3_p[354] = proc_control_B.in3_tmp_gk * in3[32];
  proc_control_B.in3_p[355] = proc_control_B.in3_tmp_ib * in3[32];
  proc_control_B.in3_p[356] = proc_control_B.in3_tmp_jj * in3[32];
  proc_control_B.in3_p[357] = proc_control_B.t44_k;
  proc_control_B.in3_p[358] = proc_control_B.in3_tmp_ihx * proc_control_B.t57;
  proc_control_B.in3_p[359] = proc_control_B.in3_tmp_dm * proc_control_B.t57;
  proc_control_B.in3_p[360] = proc_control_B.in3_tmp_dp * proc_control_B.t57;
  proc_control_B.in3_p[361] = proc_control_B.in3_tmp_pa * proc_control_B.t57;
  proc_control_B.in3_p[362] = proc_control_B.in3_tmp_es * proc_control_B.t57;
  proc_control_B.in3_p[363] = proc_control_B.in3_tmp_ne * proc_control_B.t57;
  proc_control_B.in3_p[364] = proc_control_B.t45_o;
  proc_control_B.in3_p[365] = proc_control_B.in3_tmp_dz * proc_control_B.t57;
  proc_control_B.in3_p[366] = proc_control_B.in3_tmp_md * proc_control_B.t57;
  proc_control_B.in3_p[367] = proc_control_B.in3_tmp_ij * proc_control_B.t57;
  proc_control_B.in3_p[368] = proc_control_B.in3_tmp_km * proc_control_B.t57;
  proc_control_B.in3_p[369] = rt_powd_snf(in3[12], 3.0);
  proc_control_B.in3_p[370] = proc_control_B.in3_tmp_im * proc_control_B.t57;
  proc_control_B.in3_p[371] = proc_control_B.in3_tmp_mc1 * proc_control_B.t57;
  proc_control_B.in3_p[372] = proc_control_B.in3_tmp_jm * proc_control_B.t57;
  proc_control_B.in3_p[373] = proc_control_B.in3_tmp_ap * proc_control_B.t57;
  proc_control_B.in3_p[374] = proc_control_B.t47;
  proc_control_B.in3_p[375] = proc_control_B.t45_o * proc_control_B.t45_o;
  proc_control_B.in3_p[376] = rt_powd_snf(in3[13], 3.0);
  proc_control_B.in3_p[377] = proc_control_B.t50_n;
  proc_control_B.in3_p[378] = proc_control_B.t47 * proc_control_B.t47;
  proc_control_B.in3_p[379] = proc_control_B.in3_tmp_ec * proc_control_B.t57;
  proc_control_B.in3_p[380] = rt_powd_snf(in3[14], 3.0);
  proc_control_B.in3_p[381] = proc_control_B.in3_tmp_hv * proc_control_B.t57;
  proc_control_B.in3_p[382] = proc_control_B.t50_n * proc_control_B.t50_n;
  proc_control_B.in3_p[383] = proc_control_B.in3_tmp_ae * proc_control_B.t57;
  proc_control_B.in3_p[384] = proc_control_B.in3_tmp_ah * proc_control_B.t57;
  proc_control_B.in3_p[385] = proc_control_B.in3_tmp_hg * proc_control_B.t57;
  proc_control_B.in3_p[386] = proc_control_B.in3_tmp_cc * proc_control_B.t57;
  proc_control_B.in3_p[387] = proc_control_B.in3_tmp_bv * proc_control_B.t57;
  proc_control_B.in3_p[388] = proc_control_B.t57;
  proc_control_B.in3_p[389] = proc_control_B.t58;
  proc_control_B.in3_p[390] = proc_control_B.t57 * proc_control_B.t57;
  proc_control_B.in3_p[391] = rt_powd_snf(in3[0], 5.0);
  proc_control_B.in3_p[392] = proc_control_B.t15_jv * 2.0;
  proc_control_B.in3_p[393] = proc_control_B.t17_l * 2.0;
  proc_control_B.in3_p[394] = proc_control_B.t19_j * 2.0;
  proc_control_B.in3_p[395] = proc_control_B.t23_c * 2.0;
  proc_control_B.in3_p[396] = proc_control_B.t25_b * 2.0;
  proc_control_B.in3_p[397] = proc_control_B.t27_i * 2.0;
  proc_control_B.in3_p[398] = in1[4] * in1[5] * 2.0;
  proc_control_B.in3_p[399] = in1[4] * in1[6] * 2.0;
  proc_control_B.in3_p[400] = in1[5] * in1[6] * 2.0;
  proc_control_B.in3_p[401] = in1[3] * in1[4] * 2.0;
  proc_control_B.in3_p[402] = in1[3] * in1[5] * 2.0;
  proc_control_B.in3_p[403] = in1[3] * in1[6] * 2.0;
  proc_control_B.in3_p[404] = in1[4] * in1[7] * 2.0;
  proc_control_B.in3_p[405] = in1[5] * in1[7] * 2.0;
  proc_control_B.in3_p[406] = in1[6] * in1[7] * 2.0;
  proc_control_B.in3_p[407] = in1[3] * in1[7] * 2.0;
  proc_control_B.in3_p[408] = in1[4] * in1[8] * 2.0;
  proc_control_B.in3_p[409] = in1[5] * in1[8] * 2.0;
  proc_control_B.in3_p[410] = in1[6] * in1[8] * 2.0;
  proc_control_B.in3_p[411] = in1[3] * in1[8] * 2.0;
  proc_control_B.in3_p[412] = in1[4] * in1[9] * 2.0;
  proc_control_B.in3_p[413] = in1[5] * in1[9] * 2.0;
  proc_control_B.in3_p[414] = in1[6] * in1[9] * 2.0;
  proc_control_B.in3_p[415] = in1[3] * in1[9] * 2.0;
  proc_control_B.in3_p[416] = in3[27] * std::abs(in1[10]);
  proc_control_B.in3_p[417] = in3[28] * std::abs(in1[11]);
  proc_control_B.in3_p[418] = in3[29] * std::abs(in1[12]);
  proc_control_B.in3_p[419] = in3[24] * std::abs(in1[7]);
  proc_control_B.in3_p[420] = in3[25] * std::abs(in1[8]);
  proc_control_B.in3_p[421] = in3[26] * std::abs(in1[9]);
  proc_control_B.in3_p[422] = in3[0] * proc_control_B.t33_k;
  proc_control_B.in3_p[423] = in3[0] * proc_control_B.t34_l;
  proc_control_B.in3_p[424] = in3[0] * proc_control_B.t35;
  proc_control_B.in3_p[425] = in3[0] * proc_control_B.t37_j;
  proc_control_B.in3_p[426] = in3[0] * proc_control_B.t38_m;
  proc_control_B.in3_p[427] = in3[0] * proc_control_B.t39_j;
  proc_control_B.in3_p[428] = proc_control_B.in3_tmp_oi * in1[7];
  proc_control_B.in3_p[429] = proc_control_B.in3_tmp_me * in1[7];
  proc_control_B.in3_p[430] = in1[7];
  proc_control_B.in3_p[431] = in1[8];
  proc_control_B.in3_p[432] = in1[9];

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_ft_1(proc_control_B.in3_p, Anq);
}

real_T proc_control::proc_control_norm_p(const real_T x[169])
{
  real_T y;
  int32_T b_j;
  boolean_T exitg1;
  y = 0.0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j < 13)) {
    real_T s;
    s = 0.0;
    for (int32_T b_i{0}; b_i < 13; b_i++) {
      s += std::abs(x[13 * b_j + b_i]);
    }

    if (std::isnan(s)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (s > y) {
        y = s;
      }

      b_j++;
    }
  }

  return y;
}

void proc_control::proc_control_mpower(const real_T a[169], real_T b, real_T c
  [169])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.e_j3 = std::abs(b);
  if (proc_control_B.e_j3 <= 2.147483647E+9) {
    int32_T n;
    int32_T n_0;
    int32_T nb;
    int32_T nbitson;
    std::memcpy(&proc_control_B.a_c[0], &a[0], 169U * sizeof(real_T));
    n = static_cast<int32_T>(proc_control_B.e_j3);
    n_0 = static_cast<int32_T>(proc_control_B.e_j3);
    nbitson = 0;
    nb = -1;
    while (n_0 > 0) {
      nb++;
      if ((static_cast<uint32_T>(n_0) & 1U) != 0U) {
        nbitson++;
      }

      n_0 >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_j3) <= 2) {
      if (b == 2.0) {
        nb = 0;
        for (int32_T i_1{0}; i_1 < 13; i_1++) {
          for (int32_T i{0}; i < 13; i++) {
            int32_T tmp;
            proc_control_B.e_j3 = 0.0;
            tmp = 0;
            for (int32_T i_0{0}; i_0 < 13; i_0++) {
              proc_control_B.e_j3 += a[tmp + i] * a[i_0 + nb];
              tmp += 13;
            }

            c[i + nb] = proc_control_B.e_j3;
          }

          nb += 13;
        }
      } else {
        boolean_T firstmult;
        firstmult = false;
        for (n = 0; n < 169; n++) {
          if (firstmult || std::isnan(a[n])) {
            firstmult = true;
          }
        }

        if (firstmult) {
          for (nb = 0; nb < 169; nb++) {
            c[nb] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          n_0 = 0;
          for (n = 0; n < 13; n++) {
            c[n_0] = 1.0;
            n_0 += 14;
          }
        }
      }
    } else {
      int32_T i_1;
      int32_T tmp;
      boolean_T aBufferInUse;
      boolean_T cBufferInUse;
      boolean_T firstmult;
      firstmult = true;
      aBufferInUse = false;
      cBufferInUse = ((static_cast<uint32_T>(nbitson) & 1U) == 0U);
      n_0 = nb - 1;
      for (nbitson = 0; nbitson <= n_0; nbitson++) {
        if ((static_cast<uint32_T>(n) & 1U) != 0U) {
          if (firstmult) {
            firstmult = false;
            if (cBufferInUse) {
              if (aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.aBuffer
                            [0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.a_c[0],
                            169U * sizeof(real_T));
              }
            } else if (aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.a_c[0], 169U * sizeof(real_T));
            }
          } else {
            if (aBufferInUse) {
              if (cBufferInUse) {
                for (nb = 0; nb < 13; nb++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    proc_control_B.e_j3 = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      proc_control_B.e_j3 += proc_control_B.cBuffer[tmp + nb] *
                        proc_control_B.aBuffer[i_0 + i_1];
                      tmp += 13;
                    }

                    c[i_1 + nb] = proc_control_B.e_j3;
                    i_1 += 13;
                  }
                }
              } else {
                for (nb = 0; nb < 13; nb++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    proc_control_B.e_j3 = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      proc_control_B.e_j3 += c[tmp + nb] *
                        proc_control_B.aBuffer[i_0 + i_1];
                      tmp += 13;
                    }

                    proc_control_B.cBuffer[i_1 + nb] = proc_control_B.e_j3;
                    i_1 += 13;
                  }
                }
              }
            } else if (cBufferInUse) {
              for (nb = 0; nb < 13; nb++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  proc_control_B.e_j3 = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    proc_control_B.e_j3 += proc_control_B.cBuffer[tmp + nb] *
                      proc_control_B.a_c[i_0 + i_1];
                    tmp += 13;
                  }

                  c[i_1 + nb] = proc_control_B.e_j3;
                  i_1 += 13;
                }
              }
            } else {
              for (nb = 0; nb < 13; nb++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  proc_control_B.e_j3 = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    proc_control_B.e_j3 += c[tmp + nb] * proc_control_B.a_c[i_0
                      + i_1];
                    tmp += 13;
                  }

                  proc_control_B.cBuffer[i_1 + nb] = proc_control_B.e_j3;
                  i_1 += 13;
                }
              }
            }

            cBufferInUse = !cBufferInUse;
          }
        }

        n >>= 1;
        if (aBufferInUse) {
          for (nb = 0; nb < 13; nb++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              proc_control_B.ed2 = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.ed2 += proc_control_B.aBuffer[tmp + nb] *
                  proc_control_B.aBuffer[i_0 + i_1];
                tmp += 13;
              }

              proc_control_B.a_c[i_1 + nb] = proc_control_B.ed2;
              i_1 += 13;
            }
          }
        } else {
          for (nb = 0; nb < 13; nb++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              proc_control_B.e_j3 = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.e_j3 += proc_control_B.a_c[tmp + nb] *
                  proc_control_B.a_c[i_0 + i_1];
                tmp += 13;
              }

              proc_control_B.aBuffer[i_1 + nb] = proc_control_B.e_j3;
              i_1 += 13;
            }
          }
        }

        aBufferInUse = !aBufferInUse;
      }

      nb = 0;
      for (i_1 = 0; i_1 < 13; i_1++) {
        for (int32_T i{0}; i < 13; i++) {
          proc_control_B.e_j3 = 0.0;
          proc_control_B.ed2 = 0.0;
          tmp = 0;
          for (int32_T i_0{0}; i_0 < 13; i_0++) {
            proc_control_B.cBuffer_g3 = proc_control_B.cBuffer[tmp + i];
            n = i_0 + nb;
            proc_control_B.e_j3 += proc_control_B.aBuffer[n] *
              proc_control_B.cBuffer_g3;
            proc_control_B.ed2 += proc_control_B.a_c[n] *
              proc_control_B.cBuffer_g3;
            tmp += 13;
          }

          n = i + nb;
          proc_control_B.cBuffer_p[n] = proc_control_B.ed2;
          proc_control_B.cBuffer_k[n] = proc_control_B.e_j3;
        }

        nb += 13;
      }

      for (nb = 0; nb < 169; nb++) {
        if (firstmult) {
          if (aBufferInUse) {
            c[nb] = proc_control_B.aBuffer[nb];
          } else {
            c[nb] = proc_control_B.a_c[nb];
          }
        } else if (aBufferInUse) {
          c[nb] = proc_control_B.cBuffer_k[nb];
        } else {
          c[nb] = proc_control_B.cBuffer_p[nb];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.a_c[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      boolean_T firstmult;
      firstmult = true;
      int32_T exitg1;
      do {
        int32_T i_1;
        int32_T tmp;
        exitg1 = 0;
        proc_control_B.ed2 = std::floor(proc_control_B.e_j3 / 2.0);
        if (2.0 * proc_control_B.ed2 != proc_control_B.e_j3) {
          if (firstmult) {
            std::memcpy(&c[0], &proc_control_B.a_c[0], 169U * sizeof(real_T));
            firstmult = false;
          } else {
            for (int32_T nb{0}; nb < 13; nb++) {
              i_1 = 0;
              for (int32_T i{0}; i < 13; i++) {
                proc_control_B.e_j3 = 0.0;
                tmp = 0;
                for (int32_T i_0{0}; i_0 < 13; i_0++) {
                  proc_control_B.e_j3 += c[tmp + nb] * proc_control_B.a_c[i_0 +
                    i_1];
                  tmp += 13;
                }

                proc_control_B.cBuffer[i_1 + nb] = proc_control_B.e_j3;
                i_1 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer[0], 169U * sizeof(real_T));
          }
        }

        if (proc_control_B.ed2 == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_j3 = proc_control_B.ed2;
          for (int32_T nb{0}; nb < 13; nb++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              proc_control_B.ed2 = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.ed2 += proc_control_B.a_c[tmp + nb] *
                  proc_control_B.a_c[i_0 + i_1];
                tmp += 13;
              }

              proc_control_B.cBuffer[i_1 + nb] = proc_control_B.ed2;
              i_1 += 13;
            }
          }

          std::memcpy(&proc_control_B.a_c[0], &proc_control_B.cBuffer[0], 169U *
                      sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (int32_T nb{0}; nb < 169; nb++) {
        c[nb] = (rtNaN);
      }
    }
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

real_T proc_control::proc_control_log2(real_T x)
{
  real_T f;
  int32_T eint;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!std::isinf(x)) && (!std::isnan(x))) {
    real_T t;
    t = std::frexp(x, &eint);
    if (t == 0.5) {
      f = static_cast<real_T>(eint) - 1.0;
    } else if ((eint == 1) && (t < 0.75)) {
      f = std::log(2.0 * t) / 0.69314718055994529;
    } else {
      f = std::log(t) / 0.69314718055994529 + static_cast<real_T>(eint);
    }
  } else {
    f = x;
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
  return f;
}

void proc_control::proc_control_padeApproximation(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  int32_T g_k;
  int32_T g_k_0;
  int32_T iy;
  int32_T jA;
  int32_T jBcol;
  int32_T jj;
  int32_T jp1j;
  int32_T kAcol;
  if (m == 3) {
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 60.0;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S140>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.A6_e[g_k_0 + jj] = proc_control_B.d_o;
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_e[jj];

      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.V[jj] = 12.0 * A2[jj];
    }

    proc_control_B.d_o = 120.0;
  } else if (m == 5) {
    for (jj = 0; jj < 169; jj++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      F[jj] = 420.0 * A2[jj] + A4[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 15120.0;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S140>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.A6_e[g_k_0 + jj] = proc_control_B.d_o;
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_e[jj];

      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.V[jj] = 30.0 * A4[jj] + 3360.0 * A2[jj];
    }

    proc_control_B.d_o = 30240.0;
  } else if (m == 7) {
    for (jj = 0; jj < 169; jj++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      F[jj] = (1512.0 * A4[jj] + A6[jj]) + 277200.0 * A2[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 8.64864E+6;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S140>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.A6_e[g_k_0 + jj] = proc_control_B.d_o;
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_e[jj];

      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.V[jj] = (56.0 * A6[jj] + 25200.0 * A4[jj]) + 1.99584E+6 *
        A2[jj];
    }

    proc_control_B.d_o = 1.729728E+7;
  } else if (m == 9) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A6[jA + g_k_0] * A2[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.V[g_k_0 + jj] = proc_control_B.d_o;
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      F[jj] = ((3960.0 * A6[jj] + proc_control_B.V[jj]) + 2.16216E+6 * A4[jj]) +
        3.027024E+8 * A2[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 8.8216128E+9;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S140>/MATLAB System'
    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A[jA + g_k_0] * F[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.A6_e[g_k_0 + jj] = proc_control_B.d_o;
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jj += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_e[jj];

      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.V[jj] = ((90.0 * proc_control_B.V[jj] + 110880.0 * A6[jj])
        + 3.027024E+7 * A4[jj]) + 2.0756736E+9 * A2[jj];
    }

    proc_control_B.d_o = 1.76432256E+10;
  } else {
    for (jj = 0; jj < 169; jj++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      F[jj] = (3.352212864E+10 * A6[jj] + 1.05594705216E+13 * A4[jj]) +
        1.1873537964288E+15 * A2[jj];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 3.238237626624E+16;
      g_k_0 += 14;
    }

    // Start for MATLABSystem: '<S140>/MATLAB System'
    for (jj = 0; jj < 169; jj++) {
      proc_control_B.V[jj] = (16380.0 * A4[jj] + A6[jj]) + 4.08408E+7 * A2[jj];
    }

    for (jj = 0; jj < 13; jj++) {
      g_k = 0;
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          proc_control_B.d_o += A6[jA + jj] * proc_control_B.V[iy + g_k];
          jA += 13;
        }

        jA = g_k + jj;
        proc_control_B.A6_e[jA] = F[jA] + proc_control_B.d_o;
        g_k += 13;
      }
    }

    jj = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        proc_control_B.d_o = 0.0;
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A[jA + g_k_0] * proc_control_B.A6_e[iy + jj];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        F[g_k_0 + jj] = proc_control_B.d_o;
      }

      jj += 13;
    }

    // Start for MATLABSystem: '<S140>/MATLAB System'
    for (jj = 0; jj < 169; jj++) {
      proc_control_B.A6_e[jj] = (182.0 * A6[jj] + 960960.0 * A4[jj]) +
        1.32324192E+9 * A2[jj];
    }

    for (jj = 0; jj < 13; jj++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      g_k = 0;
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        proc_control_B.d_o = 0.0;

        // Start for MATLABSystem: '<S140>/MATLAB System'
        jA = 0;
        for (iy = 0; iy < 13; iy++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.d_o += A6[jA + jj] * proc_control_B.A6_e[iy + g_k];
          jA += 13;
        }

        // Start for MATLABSystem: '<S140>/MATLAB System'
        iy = g_k + jj;
        proc_control_B.V[iy] = ((A6[iy] * 6.704425728E+11 + proc_control_B.d_o)
          + A4[iy] * 1.29060195264E+14) + A2[iy] * 7.7717703038976E+15;
        g_k += 13;
      }
    }

    proc_control_B.d_o = 6.476475253248E+16;
  }

  g_k_0 = 0;
  for (g_k = 0; g_k < 13; g_k++) {
    proc_control_B.V[g_k_0] += proc_control_B.d_o;
    g_k_0 += 14;
  }

  for (jA = 0; jA < 169; jA++) {
    proc_control_B.d_o = F[jA];
    proc_control_B.V[jA] -= proc_control_B.d_o;
    F[jA] = 2.0 * proc_control_B.d_o;
  }

  for (jj = 0; jj < 13; jj++) {
    proc_control_B.b_ipiv[jj] = static_cast<int8_T>(jj + 1);
  }

  for (g_k = 0; g_k < 12; g_k++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    g_k_0 = g_k * 14 + 2;
    jj = g_k * 14;
    kAcol = 13 - g_k;
    iy = 1;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.d_o = std::abs(proc_control_B.V[jj]);
    for (jA = 2; jA <= kAcol; jA++) {
      proc_control_B.s_a = std::abs(proc_control_B.V[(g_k_0 + jA) - 3]);
      if (proc_control_B.s_a > proc_control_B.d_o) {
        iy = jA;
        proc_control_B.d_o = proc_control_B.s_a;
      }
    }

    if (proc_control_B.V[(g_k_0 + iy) - 3] != 0.0) {
      if (iy - 1 != 0) {
        jp1j = g_k + iy;
        proc_control_B.b_ipiv[g_k] = static_cast<int8_T>(jp1j);
        for (jA = 0; jA < 13; jA++) {
          kAcol = jA * 13 + g_k;
          proc_control_B.d_o = proc_control_B.V[kAcol];
          iy = (jA * 13 + jp1j) - 1;
          proc_control_B.V[kAcol] = proc_control_B.V[iy];
          proc_control_B.V[iy] = proc_control_B.d_o;
        }
      }

      iy = g_k_0 - g_k;
      for (jA = g_k_0; jA <= iy + 11; jA++) {
        proc_control_B.V[jA - 1] /= proc_control_B.V[jj];
      }
    }

    jA = jj;
    jj += 13;
    iy = 12 - g_k;
    for (jp1j = 0; jp1j < iy; jp1j++) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.d_o = proc_control_B.V[jp1j * 13 + jj];
      if (proc_control_B.d_o != 0.0) {
        // Start for MATLABSystem: '<S140>/MATLAB System'
        kAcol = jA + 15;
        jBcol = (jA - g_k) + 26;
        for (int32_T ijA{kAcol}; ijA <= jBcol; ijA++) {
          // Start for MATLABSystem: '<S140>/MATLAB System'
          proc_control_B.V[ijA - 1] += proc_control_B.V[((g_k_0 + ijA) - jA) -
            16] * -proc_control_B.d_o;
        }
      }

      // Start for MATLABSystem: '<S140>/MATLAB System'
      jA += 13;
    }
  }

  for (iy = 0; iy < 12; iy++) {
    int8_T b_ipiv;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    b_ipiv = proc_control_B.b_ipiv[iy];
    if (iy + 1 != b_ipiv) {
      for (g_k = 0; g_k < 13; g_k++) {
        kAcol = 13 * g_k + iy;
        proc_control_B.d_o = F[kAcol];
        jp1j = (13 * g_k + b_ipiv) - 1;
        F[kAcol] = F[jp1j];
        F[jp1j] = proc_control_B.d_o;
      }
    }
  }

  for (g_k = 0; g_k < 13; g_k++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    jBcol = 13 * g_k - 1;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 13 * g_k_0 - 1;
      jj = (g_k_0 + jBcol) + 1;
      if (F[jj] != 0.0) {
        for (jA = g_k_0 + 2; jA < 14; jA++) {
          jp1j = jA + jBcol;

          // Start for MATLABSystem: '<S140>/MATLAB System'
          F[jp1j] -= proc_control_B.V[jA + kAcol] * F[jj];
        }
      }
    }
  }

  for (g_k = 0; g_k < 13; g_k++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    jBcol = 13 * g_k;
    for (jA = 12; jA >= 0; jA--) {
      kAcol = 13 * jA;
      jj = jA + jBcol;
      proc_control_B.d_o = F[jj];
      if (proc_control_B.d_o != 0.0) {
        F[jj] = proc_control_B.d_o / proc_control_B.V[jA + kAcol];
        g_k_0 = jA - 1;
        for (iy = 0; iy <= g_k_0; iy++) {
          jp1j = iy + jBcol;
          F[jp1j] -= proc_control_B.V[iy + kAcol] * F[jj];
        }
      }
    }
  }

  g_k_0 = 0;
  for (g_k = 0; g_k < 13; g_k++) {
    F[g_k_0]++;
    g_k_0 += 14;
  }
}

void proc_control::proc_control_recomputeBlockDiag(const real_T A[169], real_T
  F[169], const int32_T blockFormat[12])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  for (int32_T b_j{0}; b_j < 12; b_j++) {
    int32_T blockFormat_0;
    blockFormat_0 = blockFormat[b_j];
    if (blockFormat_0 != 0) {
      if (blockFormat_0 == 1) {
        real_T A_0;
        real_T A_1;
        real_T expa;
        real_T sinchdelta;
        int32_T A_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        A_0 = A[blockFormat_0];
        proc_control_B.delta_d = std::exp(A_0);
        A_tmp = (b_j + 1) * 13 + b_j;
        A_1 = A[A_tmp + 1];
        expa = std::exp(A_1);
        sinchdelta = (A_1 + A_0) / 2.0;
        if (std::fmax(sinchdelta, std::abs(A_0 - A_1) / 2.0) < 709.782712893384)
        {
          A_0 = (A_1 - A_0) / 2.0;
          if (A_0 == 0.0) {
            A_0 = 1.0;
          } else {
            A_0 = std::sinh(A_0) / A_0;
          }

          sinchdelta = A[A_tmp] * std::exp(sinchdelta) * A_0;
        } else {
          sinchdelta = (expa - proc_control_B.delta_d) * A[A_tmp] / (A_1 - A_0);
        }

        F[blockFormat_0] = proc_control_B.delta_d;
        F[A_tmp] = sinchdelta;
        F[A_tmp + 1] = expa;
      } else {
        real_T A_0;
        real_T A_1;
        real_T expa;
        real_T sinchdelta;
        int32_T A_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        A_0 = A[blockFormat_0 + 1];
        A_tmp = (b_j + 1) * 13 + b_j;
        A_1 = A[A_tmp];
        proc_control_B.delta_d = std::sqrt(std::abs(A_1 * A_0));
        expa = std::exp(A[blockFormat_0]);
        if (proc_control_B.delta_d == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(proc_control_B.delta_d) / proc_control_B.delta_d;
        }

        proc_control_B.delta_d = expa * std::cos(proc_control_B.delta_d);
        F[blockFormat_0] = proc_control_B.delta_d;
        F[blockFormat_0 + 1] = A_0 * expa * sinchdelta;
        F[A_tmp] = A_1 * expa * sinchdelta;
        F[A_tmp + 1] = proc_control_B.delta_d;
      }
    }
  }

  if (blockFormat[11] == 0) {
    F[168] = std::exp(A[168]);
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

real_T proc_control::proc_control_xnrm2_p(int32_T n, const real_T x[169],
  int32_T ix0)
{
  real_T y;
  y = 0.0;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_dq = 3.3121686421112381E-170;
      kend = ix0 + n;
      for (int32_T k{ix0}; k < kend; k++) {
        proc_control_B.absxk_a = std::abs(x[k - 1]);
        if (proc_control_B.absxk_a > proc_control_B.scale_dq) {
          proc_control_B.t_ee = proc_control_B.scale_dq / proc_control_B.absxk_a;
          y = y * proc_control_B.t_ee * proc_control_B.t_ee + 1.0;
          proc_control_B.scale_dq = proc_control_B.absxk_a;
        } else {
          proc_control_B.t_ee = proc_control_B.absxk_a / proc_control_B.scale_dq;
          y += proc_control_B.t_ee * proc_control_B.t_ee;
        }
      }

      y = proc_control_B.scale_dq * std::sqrt(y);
    }
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
  return y;
}

void proc_control::proc_control_xzsyhetrd(real_T A[169], real_T D[13], real_T E
  [12], real_T tau[12])
{
  int32_T b_i;
  int32_T b_tmp;
  int32_T e_tmp;
  int32_T k;
  int32_T knt;
  int32_T tau_tmp;
  int32_T temp1_tmp;
  int32_T temp1_tmp_tmp_tmp;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  for (b_i = 0; b_i < 12; b_i++) {
    if (b_i + 3 <= 13) {
      tau_tmp = b_i + 3;
    } else {
      tau_tmp = 13;
    }

    proc_control_B.ia0 = b_i * 13 + tau_tmp;
    temp1_tmp_tmp_tmp = 13 * b_i + b_i;
    proc_control_B.temp1 = A[temp1_tmp_tmp_tmp + 1];
    proc_control_B.taui_a = 0.0;
    proc_control_B.xnorm_n = proc_control_xnrm2_p(11 - b_i, A,
      proc_control_B.ia0);
    if (proc_control_B.xnorm_n != 0.0) {
      proc_control_B.xnorm_n = proc_control_rt_hypotd_snf(proc_control_B.temp1,
        proc_control_B.xnorm_n);
      if (proc_control_B.temp1 >= 0.0) {
        proc_control_B.xnorm_n = -proc_control_B.xnorm_n;
      }

      if (std::abs(proc_control_B.xnorm_n) < 1.0020841800044864E-292) {
        knt = -1;
        do {
          knt++;
          b_tmp = proc_control_B.ia0 - b_i;
          for (k = proc_control_B.ia0; k <= b_tmp + 10; k++) {
            A[k - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_n *= 9.9792015476736E+291;
          proc_control_B.temp1 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_n) < 1.0020841800044864E-292) &&
                 (knt + 1 < 20));

        proc_control_B.xnorm_n = proc_control_rt_hypotd_snf(proc_control_B.temp1,
          proc_control_xnrm2_p(11 - b_i, A, proc_control_B.ia0));
        if (proc_control_B.temp1 >= 0.0) {
          proc_control_B.xnorm_n = -proc_control_B.xnorm_n;
        }

        proc_control_B.taui_a = (proc_control_B.xnorm_n - proc_control_B.temp1) /
          proc_control_B.xnorm_n;
        proc_control_B.temp1 = 1.0 / (proc_control_B.temp1 -
          proc_control_B.xnorm_n);
        for (k = proc_control_B.ia0; k <= b_tmp + 10; k++) {
          A[k - 1] *= proc_control_B.temp1;
        }

        for (k = 0; k <= knt; k++) {
          proc_control_B.xnorm_n *= 1.0020841800044864E-292;
        }

        proc_control_B.temp1 = proc_control_B.xnorm_n;
      } else {
        proc_control_B.taui_a = (proc_control_B.xnorm_n - proc_control_B.temp1) /
          proc_control_B.xnorm_n;
        proc_control_B.temp1 = 1.0 / (proc_control_B.temp1 -
          proc_control_B.xnorm_n);
        knt = proc_control_B.ia0 - b_i;
        for (k = proc_control_B.ia0; k <= knt + 10; k++) {
          A[k - 1] *= proc_control_B.temp1;
        }

        proc_control_B.temp1 = proc_control_B.xnorm_n;
      }
    }

    E[b_i] = proc_control_B.temp1;
    if (proc_control_B.taui_a != 0.0) {
      A[temp1_tmp_tmp_tmp + 1] = 1.0;
      for (k = b_i + 1; k < 13; k++) {
        tau[k - 1] = 0.0;
      }

      b_tmp = 11 - b_i;
      e_tmp = 12 - b_i;
      for (knt = 0; knt <= b_tmp; knt++) {
        temp1_tmp = b_i + knt;
        proc_control_B.temp1 = A[(13 * b_i + temp1_tmp) + 1] *
          proc_control_B.taui_a;
        proc_control_B.xnorm_n = 0.0;
        tau_tmp = (temp1_tmp + 1) * 13 + b_i;
        tau[temp1_tmp] += A[(tau_tmp + knt) + 1] * proc_control_B.temp1;
        for (proc_control_B.ia0 = knt + 2; proc_control_B.ia0 <= e_tmp;
             proc_control_B.ia0++) {
          k = b_i + proc_control_B.ia0;
          proc_control_B.tau_tmp_p = A[tau_tmp + proc_control_B.ia0];
          tau[k - 1] += proc_control_B.tau_tmp_p * proc_control_B.temp1;
          proc_control_B.xnorm_n += A[13 * b_i + k] * proc_control_B.tau_tmp_p;
        }

        tau[temp1_tmp] += proc_control_B.taui_a * proc_control_B.xnorm_n;
      }

      proc_control_B.temp1 = 0.0;
      for (k = 0; k < e_tmp; k++) {
        proc_control_B.temp1 += A[(temp1_tmp_tmp_tmp + k) + 1] * tau[b_i + k];
      }

      proc_control_B.temp1 *= -0.5 * proc_control_B.taui_a;
      if (!(proc_control_B.temp1 == 0.0)) {
        for (k = 0; k < e_tmp; k++) {
          tau_tmp = b_i + k;
          tau[tau_tmp] += A[(temp1_tmp_tmp_tmp + k) + 1] * proc_control_B.temp1;
        }
      }

      for (knt = 0; knt <= b_tmp; knt++) {
        k = knt + 1;
        temp1_tmp = knt + b_i;
        proc_control_B.temp1 = A[(13 * b_i + temp1_tmp) + 1];
        proc_control_B.xnorm_n = tau[temp1_tmp];
        proc_control_B.tau_tmp_p = proc_control_B.xnorm_n * proc_control_B.temp1;
        tau_tmp = (temp1_tmp + 1) * 13;
        A[(temp1_tmp + tau_tmp) + 1] = (A[((tau_tmp + knt) + b_i) + 1] -
          proc_control_B.tau_tmp_p) - proc_control_B.tau_tmp_p;
        for (proc_control_B.ia0 = k + 1; proc_control_B.ia0 <= e_tmp;
             proc_control_B.ia0++) {
          temp1_tmp = b_i + proc_control_B.ia0;
          A[temp1_tmp + tau_tmp] = (A[(tau_tmp + b_i) + proc_control_B.ia0] -
            tau[temp1_tmp - 1] * proc_control_B.temp1) - A[13 * b_i + temp1_tmp]
            * proc_control_B.xnorm_n;
        }
      }
    }

    A[temp1_tmp_tmp_tmp + 1] = E[b_i];
    D[b_i] = A[temp1_tmp_tmp_tmp];
    tau[b_i] = proc_control_B.taui_a;
  }

  D[12] = A[168];

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

void proc_control::proc_control_xzlascl(real_T cfrom, real_T cto, int32_T m,
  real_T A[13], int32_T iA0)
{
  boolean_T notdone;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.cfromc_p = cfrom;
  proc_control_B.ctoc_l = cto;
  notdone = true;
  while (notdone) {
    real_T cto1;
    real_T mul;
    proc_control_B.cfrom1_pg = proc_control_B.cfromc_p * 2.0041683600089728E-292;
    cto1 = proc_control_B.ctoc_l / 4.9896007738368E+291;
    if ((std::abs(proc_control_B.cfrom1_pg) > std::abs(proc_control_B.ctoc_l)) &&
        (proc_control_B.ctoc_l != 0.0)) {
      mul = 2.0041683600089728E-292;
      proc_control_B.cfromc_p = proc_control_B.cfrom1_pg;
    } else if (std::abs(cto1) > std::abs(proc_control_B.cfromc_p)) {
      mul = 4.9896007738368E+291;
      proc_control_B.ctoc_l = cto1;
    } else {
      mul = proc_control_B.ctoc_l / proc_control_B.cfromc_p;
      notdone = false;
    }

    for (int32_T b_i{0}; b_i < m; b_i++) {
      int32_T tmp;
      tmp = (b_i + iA0) - 1;
      A[tmp] *= mul;
    }
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

void proc_control::proc_control_xzlascl_p(real_T cfrom, real_T cto, int32_T m,
  real_T A[12], int32_T iA0)
{
  boolean_T notdone;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.cfromc_n = cfrom;
  proc_control_B.ctoc_n = cto;
  notdone = true;
  while (notdone) {
    real_T cto1;
    real_T mul;
    proc_control_B.cfrom1_lt = proc_control_B.cfromc_n * 2.0041683600089728E-292;
    cto1 = proc_control_B.ctoc_n / 4.9896007738368E+291;
    if ((std::abs(proc_control_B.cfrom1_lt) > std::abs(proc_control_B.ctoc_n)) &&
        (proc_control_B.ctoc_n != 0.0)) {
      mul = 2.0041683600089728E-292;
      proc_control_B.cfromc_n = proc_control_B.cfrom1_lt;
    } else if (std::abs(cto1) > std::abs(proc_control_B.cfromc_n)) {
      mul = 4.9896007738368E+291;
      proc_control_B.ctoc_n = cto1;
    } else {
      mul = proc_control_B.ctoc_n / proc_control_B.cfromc_n;
      notdone = false;
    }

    for (int32_T b_i{0}; b_i < m; b_i++) {
      int32_T tmp;
      tmp = (b_i + iA0) - 1;
      A[tmp] *= mul;
    }
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

void proc_control::proc_control_xzlartg(real_T f, real_T g, real_T *cs, real_T
  *sn, real_T *r)
{
  real_T f1;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  // Start for MATLABSystem: '<S140>/MATLAB System'
  f1 = std::abs(f);
  *r = std::abs(g);
  if (g == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
    *r = f;
  } else if (f == 0.0) {
    *cs = 0.0;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    if (g >= 0.0) {
      *sn = 1.0;
    } else {
      *sn = -1.0;
    }
  } else if ((f1 > 1.4916681462400413E-154) && (f1 < 4.7403759540545887E+153) &&
             (*r > 1.4916681462400413E-154) && (*r < 4.7403759540545887E+153)) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    *r = std::sqrt(f * f + g * g);
    *cs = f1 / *r;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = g / *r;
  } else {
    real_T fs;
    real_T gs;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    f1 = std::fmin(4.49423283715579E+307, std::fmax(2.2250738585072014E-308, std::
      fmax(f1, *r)));
    fs = f / f1;
    gs = g / f1;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    *r = std::sqrt(fs * fs + gs * gs);
    *cs = std::abs(fs) / *r;
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = gs / *r;
    *r *= f1;
  }
}

void proc_control::proc_control_rotateRight_p(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  int32_T b;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  b = n - 2;
  for (int32_T b_j{0}; b_j <= b; b_j++) {
    int32_T offsetj;
    int32_T offsetjp1;
    proc_control_B.ctemp = cs[(b_j + ic0) - 1];
    proc_control_B.stemp = cs[(b_j + is0) - 1];
    offsetj = (b_j * 13 + iz0) - 2;
    offsetjp1 = ((b_j + 1) * 13 + iz0) - 2;
    if ((proc_control_B.ctemp != 1.0) || (proc_control_B.stemp != 0.0)) {
      for (int32_T j{0}; j < 13; j++) {
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = (j + offsetjp1) + 1;
        proc_control_B.temp_h = z[temp_tmp];
        tmp = (j + offsetj) + 1;
        z[temp_tmp] = proc_control_B.ctemp * proc_control_B.temp_h - z[tmp] *
          proc_control_B.stemp;
        z[tmp] = z[tmp] * proc_control_B.ctemp + proc_control_B.stemp *
          proc_control_B.temp_h;
      }
    }
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

void proc_control::proc_control_xdlaev2(real_T a, real_T b, real_T c, real_T
  *rt1, real_T *rt2, real_T *cs1, real_T *sn1)
{
  int32_T sgn1;
  int32_T sgn2;
  proc_control_B.sm_d = a + c;
  proc_control_B.df_d = a - c;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.adf_j = std::abs(proc_control_B.df_d);
  proc_control_B.tb_a = b + b;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.ab_a = std::abs(proc_control_B.tb_a);
  if (std::abs(a) > std::abs(c)) {
    proc_control_B.acmx_a = a;
    proc_control_B.acmn_l = c;
  } else {
    proc_control_B.acmx_a = c;
    proc_control_B.acmn_l = a;
  }

  if (proc_control_B.adf_j > proc_control_B.ab_a) {
    proc_control_B.a_i4 = proc_control_B.ab_a / proc_control_B.adf_j;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.adf_j *= std::sqrt(proc_control_B.a_i4 * proc_control_B.a_i4
      + 1.0);
  } else if (proc_control_B.adf_j < proc_control_B.ab_a) {
    proc_control_B.a_i4 = proc_control_B.adf_j / proc_control_B.ab_a;

    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.adf_j = std::sqrt(proc_control_B.a_i4 * proc_control_B.a_i4 +
      1.0) * proc_control_B.ab_a;
  } else {
    proc_control_B.adf_j = proc_control_B.ab_a * 1.4142135623730951;
  }

  if (proc_control_B.sm_d < 0.0) {
    *rt1 = (proc_control_B.sm_d - proc_control_B.adf_j) * 0.5;
    sgn1 = -1;
    *rt2 = proc_control_B.acmx_a / *rt1 * proc_control_B.acmn_l - b / *rt1 * b;
  } else if (proc_control_B.sm_d > 0.0) {
    *rt1 = (proc_control_B.sm_d + proc_control_B.adf_j) * 0.5;
    sgn1 = 1;
    *rt2 = proc_control_B.acmx_a / *rt1 * proc_control_B.acmn_l - b / *rt1 * b;
  } else {
    *rt1 = 0.5 * proc_control_B.adf_j;
    *rt2 = -0.5 * proc_control_B.adf_j;
    sgn1 = 1;
  }

  if (proc_control_B.df_d >= 0.0) {
    proc_control_B.df_d += proc_control_B.adf_j;
    sgn2 = 1;
  } else {
    proc_control_B.df_d -= proc_control_B.adf_j;
    sgn2 = -1;
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  if (std::abs(proc_control_B.df_d) > proc_control_B.ab_a) {
    proc_control_B.tb_a = -proc_control_B.tb_a / proc_control_B.df_d;
    *sn1 = 1.0 / std::sqrt(proc_control_B.tb_a * proc_control_B.tb_a + 1.0);
    *cs1 = proc_control_B.tb_a * *sn1;
  } else if (proc_control_B.ab_a == 0.0) {
    *cs1 = 1.0;
    *sn1 = 0.0;
  } else {
    proc_control_B.tb_a = -proc_control_B.df_d / proc_control_B.tb_a;
    *cs1 = 1.0 / std::sqrt(proc_control_B.tb_a * proc_control_B.tb_a + 1.0);
    *sn1 = proc_control_B.tb_a * *cs1;
  }

  if (sgn1 == sgn2) {
    proc_control_B.tb_a = *cs1;
    *cs1 = -*sn1;
    *sn1 = proc_control_B.tb_a;
  }
}

void proc_control::proc_control_rotateRight(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  for (int32_T j{n - 1}; j >= 1; j--) {
    int32_T offsetj;
    int32_T offsetjp1;
    proc_control_B.ctemp_g = cs[(ic0 + j) - 2];
    proc_control_B.stemp_c = cs[(is0 + j) - 2];
    offsetj = ((j - 1) * 13 + iz0) - 2;
    offsetjp1 = (j * 13 + iz0) - 2;
    if ((proc_control_B.ctemp_g != 1.0) || (proc_control_B.stemp_c != 0.0)) {
      for (int32_T b_i{0}; b_i < 13; b_i++) {
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = (b_i + offsetjp1) + 1;
        proc_control_B.temp_ct = z[temp_tmp];
        tmp = (b_i + offsetj) + 1;
        z[temp_tmp] = proc_control_B.ctemp_g * proc_control_B.temp_ct - z[tmp] *
          proc_control_B.stemp_c;
        z[tmp] = z[tmp] * proc_control_B.ctemp_g + proc_control_B.stemp_c *
          proc_control_B.temp_ct;
      }
    }
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

int32_T proc_control::proc_control_xzsteqr(real_T d[13], real_T e[12], real_T z
  [169])
{
  int32_T exitg1;
  int32_T exitg3;
  int32_T exitg4;
  int32_T i;
  int32_T info;
  int32_T iscale;
  int32_T iscale_tmp;
  boolean_T exitg2;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  info = 0;
  std::memset(&proc_control_B.work_i[0], 0, 24U * sizeof(real_T));
  proc_control_B.jtot = 0;
  proc_control_B.l1_p = 1;
  do {
    exitg1 = 0;
    if (proc_control_B.l1_p > 13) {
      for (proc_control_B.jtot = 0; proc_control_B.jtot < 12;
           proc_control_B.jtot++) {
        proc_control_B.l1_p = proc_control_B.jtot;
        proc_control_B.p_k = d[proc_control_B.jtot];
        for (proc_control_B.m_f = proc_control_B.jtot + 2; proc_control_B.m_f <
             14; proc_control_B.m_f++) {
          proc_control_B.tst_e = d[proc_control_B.m_f - 1];
          if (proc_control_B.tst_e < proc_control_B.p_k) {
            proc_control_B.l1_p = proc_control_B.m_f - 1;
            proc_control_B.p_k = proc_control_B.tst_e;
          }
        }

        if (proc_control_B.l1_p != proc_control_B.jtot) {
          d[proc_control_B.l1_p] = d[proc_control_B.jtot];
          d[proc_control_B.jtot] = proc_control_B.p_k;
          proc_control_B.m_f = proc_control_B.jtot * 13;
          proc_control_B.l_h = proc_control_B.l1_p * 13;
          for (proc_control_B.l1_p = 0; proc_control_B.l1_p < 13;
               proc_control_B.l1_p++) {
            proc_control_B.lsv = proc_control_B.m_f + proc_control_B.l1_p;
            proc_control_B.tst_e = z[proc_control_B.lsv];
            i = proc_control_B.l_h + proc_control_B.l1_p;
            z[proc_control_B.lsv] = z[i];
            z[i] = proc_control_B.tst_e;
          }
        }
      }

      exitg1 = 1;
    } else {
      if (proc_control_B.l1_p > 1) {
        e[proc_control_B.l1_p - 2] = 0.0;
      }

      proc_control_B.m_f = proc_control_B.l1_p;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.m_f < 13)) {
        proc_control_B.tst_e = std::abs(e[proc_control_B.m_f - 1]);
        if (proc_control_B.tst_e == 0.0) {
          exitg2 = true;
        } else if (proc_control_B.tst_e <= std::sqrt(std::abs
                    (d[proc_control_B.m_f - 1])) * std::sqrt(std::abs
                    (d[proc_control_B.m_f])) * 2.2204460492503131E-16) {
          e[proc_control_B.m_f - 1] = 0.0;
          exitg2 = true;
        } else {
          proc_control_B.m_f++;
        }
      }

      proc_control_B.l_h = proc_control_B.l1_p - 1;
      proc_control_B.lsv = proc_control_B.l1_p;
      proc_control_B.lend = proc_control_B.m_f;
      proc_control_B.lendsv = proc_control_B.m_f;
      proc_control_B.l1_p = proc_control_B.m_f + 1;
      if (proc_control_B.l_h + 1 == proc_control_B.m_f) {
      } else {
        iscale_tmp = proc_control_B.m_f - proc_control_B.l_h;
        if (iscale_tmp <= 0) {
          proc_control_B.tst_e = 0.0;
        } else {
          proc_control_B.tst_e = std::abs(d[(proc_control_B.l_h + iscale_tmp) -
            1]);
          i = 0;
          exitg2 = false;
          while ((!exitg2) && (i <= iscale_tmp - 2)) {
            iscale = proc_control_B.l_h + i;
            proc_control_B.anorm = std::abs(d[iscale]);
            if (std::isnan(proc_control_B.anorm)) {
              proc_control_B.tst_e = (rtNaN);
              exitg2 = true;
            } else {
              if (proc_control_B.anorm > proc_control_B.tst_e) {
                proc_control_B.tst_e = proc_control_B.anorm;
              }

              proc_control_B.anorm = std::abs(e[iscale]);
              if (std::isnan(proc_control_B.anorm)) {
                proc_control_B.tst_e = (rtNaN);
                exitg2 = true;
              } else {
                if (proc_control_B.anorm > proc_control_B.tst_e) {
                  proc_control_B.tst_e = proc_control_B.anorm;
                }

                i++;
              }
            }
          }
        }

        iscale = 0;
        if (proc_control_B.tst_e == 0.0) {
        } else if (std::isinf(proc_control_B.tst_e) || std::isnan
                   (proc_control_B.tst_e)) {
          for (i = 0; i < 13; i++) {
            d[i] = (rtNaN);
          }

          for (i = 0; i < 169; i++) {
            z[i] = (rtNaN);
          }

          exitg1 = 1;
        } else {
          if (proc_control_B.tst_e > 2.2346346549904327E+153) {
            iscale = 1;
            proc_control_xzlascl(proc_control_B.tst_e, 2.2346346549904327E+153,
                                 iscale_tmp, d, proc_control_B.l_h + 1);
            proc_control_xzlascl_p(proc_control_B.tst_e, 2.2346346549904327E+153,
              iscale_tmp - 1, e, proc_control_B.l_h + 1);
          } else if (proc_control_B.tst_e < 3.02546243347603E-123) {
            iscale = 2;
            proc_control_xzlascl(proc_control_B.tst_e, 3.02546243347603E-123,
                                 iscale_tmp, d, proc_control_B.l_h + 1);
            proc_control_xzlascl_p(proc_control_B.tst_e, 3.02546243347603E-123,
              iscale_tmp - 1, e, proc_control_B.l_h + 1);
          }

          if (std::abs(d[proc_control_B.m_f - 1]) < std::abs
              (d[proc_control_B.l_h])) {
            proc_control_B.lend = proc_control_B.lsv;
            proc_control_B.l_h = proc_control_B.m_f - 1;
          }

          if (proc_control_B.lend > proc_control_B.l_h + 1) {
            do {
              exitg4 = 0;
              if (proc_control_B.l_h + 1 != proc_control_B.lend) {
                proc_control_B.m_f = proc_control_B.l_h + 1;
                exitg2 = false;
                while ((!exitg2) && (proc_control_B.m_f < proc_control_B.lend))
                {
                  proc_control_B.anorm = std::abs(e[proc_control_B.m_f - 1]);
                  if (proc_control_B.anorm * proc_control_B.anorm <= std::abs
                      (d[proc_control_B.m_f - 1]) * 4.9303806576313238E-32 * std::
                      abs(d[proc_control_B.m_f]) + 2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    proc_control_B.m_f++;
                  }
                }
              } else {
                proc_control_B.m_f = proc_control_B.lend;
              }

              if (proc_control_B.m_f < proc_control_B.lend) {
                e[proc_control_B.m_f - 1] = 0.0;
              }

              if (proc_control_B.l_h + 1 == proc_control_B.m_f) {
                proc_control_B.l_h++;
                if (proc_control_B.l_h + 1 > proc_control_B.lend) {
                  exitg4 = 1;
                }
              } else if (proc_control_B.l_h + 2 == proc_control_B.m_f) {
                proc_control_xdlaev2(d[proc_control_B.l_h], e[proc_control_B.l_h],
                                     d[proc_control_B.l_h + 1],
                                     &d[proc_control_B.l_h],
                                     &proc_control_B.anorm,
                                     &proc_control_B.work_i[proc_control_B.l_h],
                                     &proc_control_B.s_k);
                d[proc_control_B.l_h + 1] = proc_control_B.anorm;
                proc_control_B.work_i[proc_control_B.l_h + 12] =
                  proc_control_B.s_k;
                proc_control_rotateRight(2, z, proc_control_B.l_h * 13 + 1,
                  proc_control_B.work_i, proc_control_B.l_h + 1,
                  proc_control_B.l_h + 13);
                e[proc_control_B.l_h] = 0.0;
                proc_control_B.l_h += 2;
                if (proc_control_B.l_h + 1 > proc_control_B.lend) {
                  exitg4 = 1;
                }
              } else if (proc_control_B.jtot == 390) {
                exitg4 = 1;
              } else {
                proc_control_B.jtot++;
                proc_control_B.anorm = (d[proc_control_B.l_h + 1] -
                  d[proc_control_B.l_h]) / (2.0 * e[proc_control_B.l_h]);
                if (proc_control_B.anorm >= 0.0) {
                  proc_control_B.s_k = proc_control_rt_hypotd_snf
                    (proc_control_B.anorm, 1.0);
                } else {
                  proc_control_B.s_k = -proc_control_rt_hypotd_snf
                    (proc_control_B.anorm, 1.0);
                }

                proc_control_B.anorm = (d[proc_control_B.m_f - 1] -
                  d[proc_control_B.l_h]) + e[proc_control_B.l_h] /
                  (proc_control_B.anorm + proc_control_B.s_k);
                proc_control_B.s_k = 1.0;
                proc_control_B.c_p = 1.0;
                proc_control_B.p_k = 0.0;
                for (i = proc_control_B.m_f - 1; i >= proc_control_B.l_h + 1; i
                     --) {
                  proc_control_B.e_dc = e[i - 1];
                  proc_control_B.b_h = proc_control_B.c_p * proc_control_B.e_dc;
                  proc_control_xzlartg(proc_control_B.anorm, proc_control_B.s_k *
                                       proc_control_B.e_dc, &proc_control_B.c_p,
                                       &proc_control_B.c_s, &proc_control_B.r_f);
                  proc_control_B.s_k = proc_control_B.c_s;
                  if (proc_control_B.m_f - 1 != i) {
                    e[i] = proc_control_B.r_f;
                  }

                  proc_control_B.anorm = d[i] - proc_control_B.p_k;
                  proc_control_B.r_f = (d[i - 1] - proc_control_B.anorm) *
                    proc_control_B.c_s + 2.0 * proc_control_B.c_p *
                    proc_control_B.b_h;
                  proc_control_B.p_k = proc_control_B.c_s * proc_control_B.r_f;
                  d[i] = proc_control_B.anorm + proc_control_B.p_k;
                  proc_control_B.anorm = proc_control_B.c_p * proc_control_B.r_f
                    - proc_control_B.b_h;
                  proc_control_B.work_i[i - 1] = proc_control_B.c_p;
                  proc_control_B.work_i[i + 11] = -proc_control_B.c_s;
                }

                proc_control_rotateRight(proc_control_B.m_f - proc_control_B.l_h,
                  z, proc_control_B.l_h * 13 + 1, proc_control_B.work_i,
                  proc_control_B.l_h + 1, proc_control_B.l_h + 13);
                d[proc_control_B.l_h] -= proc_control_B.p_k;
                e[proc_control_B.l_h] = proc_control_B.anorm;
              }
            } while (exitg4 == 0);
          } else {
            do {
              exitg3 = 0;
              if (proc_control_B.l_h + 1 != proc_control_B.lend) {
                proc_control_B.m_f = proc_control_B.l_h + 1;
                exitg2 = false;
                while ((!exitg2) && (proc_control_B.m_f > proc_control_B.lend))
                {
                  proc_control_B.anorm = std::abs(e[proc_control_B.m_f - 2]);
                  if (proc_control_B.anorm * proc_control_B.anorm <= std::abs
                      (d[proc_control_B.m_f - 1]) * 4.9303806576313238E-32 * std::
                      abs(d[proc_control_B.m_f - 2]) + 2.2250738585072014E-308)
                  {
                    exitg2 = true;
                  } else {
                    proc_control_B.m_f--;
                  }
                }
              } else {
                proc_control_B.m_f = proc_control_B.lend;
              }

              if (proc_control_B.m_f > proc_control_B.lend) {
                e[proc_control_B.m_f - 2] = 0.0;
              }

              if (proc_control_B.l_h + 1 == proc_control_B.m_f) {
                proc_control_B.l_h--;
                if (proc_control_B.l_h + 1 < proc_control_B.lend) {
                  exitg3 = 1;
                }
              } else if (proc_control_B.m_f == proc_control_B.l_h) {
                proc_control_xdlaev2(d[proc_control_B.l_h - 1],
                                     e[proc_control_B.l_h - 1],
                                     d[proc_control_B.l_h],
                                     &d[proc_control_B.l_h - 1],
                                     &proc_control_B.anorm,
                                     &proc_control_B.work_i[proc_control_B.m_f -
                                     1], &proc_control_B.s_k);
                d[proc_control_B.l_h] = proc_control_B.anorm;
                proc_control_B.work_i[proc_control_B.m_f + 11] =
                  proc_control_B.s_k;
                proc_control_rotateRight_p(2, z, (proc_control_B.l_h - 1) * 13 +
                  1, proc_control_B.work_i, proc_control_B.m_f,
                  proc_control_B.m_f + 12);
                e[proc_control_B.l_h - 1] = 0.0;
                proc_control_B.l_h -= 2;
                if (proc_control_B.l_h + 1 < proc_control_B.lend) {
                  exitg3 = 1;
                }
              } else if (proc_control_B.jtot == 390) {
                exitg3 = 1;
              } else {
                proc_control_B.jtot++;
                proc_control_B.p_k = e[proc_control_B.l_h - 1];
                proc_control_B.anorm = (d[proc_control_B.l_h - 1] -
                  d[proc_control_B.l_h]) / (proc_control_B.p_k * 2.0);
                if (proc_control_B.anorm >= 0.0) {
                  proc_control_B.s_k = proc_control_rt_hypotd_snf
                    (proc_control_B.anorm, 1.0);
                } else {
                  proc_control_B.s_k = -proc_control_rt_hypotd_snf
                    (proc_control_B.anorm, 1.0);
                }

                proc_control_B.anorm = (d[proc_control_B.m_f - 1] -
                  d[proc_control_B.l_h]) + proc_control_B.p_k /
                  (proc_control_B.anorm + proc_control_B.s_k);
                proc_control_B.s_k = 1.0;
                proc_control_B.c_p = 1.0;
                proc_control_B.p_k = 0.0;
                for (i = proc_control_B.m_f; i <= proc_control_B.l_h; i++) {
                  proc_control_B.e_dc = e[i - 1];
                  proc_control_B.b_h = proc_control_B.c_p * proc_control_B.e_dc;
                  proc_control_xzlartg(proc_control_B.anorm, proc_control_B.s_k *
                                       proc_control_B.e_dc, &proc_control_B.c_p,
                                       &proc_control_B.c_s, &proc_control_B.r_f);
                  proc_control_B.s_k = proc_control_B.c_s;
                  if (i != proc_control_B.m_f) {
                    e[i - 2] = proc_control_B.r_f;
                  }

                  proc_control_B.anorm = d[i - 1] - proc_control_B.p_k;
                  proc_control_B.r_f = (d[i] - proc_control_B.anorm) *
                    proc_control_B.c_s + 2.0 * proc_control_B.c_p *
                    proc_control_B.b_h;
                  proc_control_B.p_k = proc_control_B.c_s * proc_control_B.r_f;
                  d[i - 1] = proc_control_B.anorm + proc_control_B.p_k;
                  proc_control_B.anorm = proc_control_B.c_p * proc_control_B.r_f
                    - proc_control_B.b_h;
                  proc_control_B.work_i[i - 1] = proc_control_B.c_p;
                  proc_control_B.work_i[i + 11] = proc_control_B.c_s;
                }

                proc_control_rotateRight_p((proc_control_B.l_h -
                  proc_control_B.m_f) + 2, z, (proc_control_B.m_f - 1) * 13 + 1,
                  proc_control_B.work_i, proc_control_B.m_f, proc_control_B.m_f
                  + 12);
                d[proc_control_B.l_h] -= proc_control_B.p_k;
                e[proc_control_B.l_h - 1] = proc_control_B.anorm;
              }
            } while (exitg3 == 0);
          }

          if (iscale == 1) {
            i = proc_control_B.lendsv - proc_control_B.lsv;
            proc_control_xzlascl(2.2346346549904327E+153, proc_control_B.tst_e,
                                 i + 1, d, proc_control_B.lsv);
            proc_control_xzlascl_p(2.2346346549904327E+153, proc_control_B.tst_e,
              i, e, proc_control_B.lsv);
          } else if (iscale == 2) {
            i = proc_control_B.lendsv - proc_control_B.lsv;
            proc_control_xzlascl(3.02546243347603E-123, proc_control_B.tst_e, i
                                 + 1, d, proc_control_B.lsv);
            proc_control_xzlascl_p(3.02546243347603E-123, proc_control_B.tst_e,
              i, e, proc_control_B.lsv);
          }

          if (proc_control_B.jtot >= 390) {
            for (proc_control_B.jtot = 0; proc_control_B.jtot < 12;
                 proc_control_B.jtot++) {
              if ((e[proc_control_B.jtot] != 0.0) && (info <= 2147483646)) {
                info++;
              }
            }

            exitg1 = 1;
          }
        }
      }
    }
  } while (exitg1 == 0);

  return info;
}

void proc_control::proc_control_xsyheev(const real_T A[169], int32_T *info,
  real_T W[13], real_T b_A[169])
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T iscale;
  boolean_T notdone;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memcpy(&b_A[0], &A[0], 169U * sizeof(real_T));
  *info = 0;
  proc_control_B.anrm_e = 0.0;
  proc_control_B.lastv = 1;
  exitg2 = false;
  while ((!exitg2) && (proc_control_B.lastv - 1 < 13)) {
    proc_control_B.itau_j = 0;
    do {
      exitg1 = 0;
      if (proc_control_B.itau_j <= static_cast<uint8_T>(proc_control_B.lastv) -
          1) {
        proc_control_B.absx_e = std::abs(A[(proc_control_B.lastv - 1) * 13 +
          proc_control_B.itau_j]);
        if (std::isnan(proc_control_B.absx_e)) {
          proc_control_B.anrm_e = (rtNaN);
          exitg1 = 1;
        } else {
          if (proc_control_B.absx_e > proc_control_B.anrm_e) {
            proc_control_B.anrm_e = proc_control_B.absx_e;
          }

          proc_control_B.itau_j++;
        }
      } else {
        proc_control_B.lastv++;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  if (std::isinf(proc_control_B.anrm_e) || std::isnan(proc_control_B.anrm_e)) {
    for (proc_control_B.itau_j = 0; proc_control_B.itau_j < 13;
         proc_control_B.itau_j++) {
      W[proc_control_B.itau_j] = (rtNaN);
    }

    for (proc_control_B.itau_j = 0; proc_control_B.itau_j < 169;
         proc_control_B.itau_j++) {
      b_A[proc_control_B.itau_j] = (rtNaN);
    }
  } else {
    iscale = false;
    guard1 = false;
    if ((proc_control_B.anrm_e > 0.0) && (proc_control_B.anrm_e <
         1.0010415475915505E-146)) {
      iscale = true;
      proc_control_B.anrm_e = 1.0010415475915505E-146 / proc_control_B.anrm_e;
      guard1 = true;
    } else if (proc_control_B.anrm_e > 9.9895953610111751E+145) {
      iscale = true;
      proc_control_B.anrm_e = 9.9895953610111751E+145 / proc_control_B.anrm_e;
      guard1 = true;
    }

    if (guard1) {
      proc_control_B.absx_e = 1.0;
      proc_control_B.ctoc = proc_control_B.anrm_e;
      notdone = true;
      while (notdone) {
        proc_control_B.cfrom1_p = proc_control_B.absx_e *
          2.0041683600089728E-292;
        proc_control_B.cto1_n = proc_control_B.ctoc / 4.9896007738368E+291;
        if ((std::abs(proc_control_B.cfrom1_p) > proc_control_B.ctoc) &&
            (proc_control_B.ctoc != 0.0)) {
          proc_control_B.mul_f = 2.0041683600089728E-292;
          proc_control_B.absx_e = proc_control_B.cfrom1_p;
        } else if (proc_control_B.cto1_n > std::abs(proc_control_B.absx_e)) {
          proc_control_B.mul_f = 4.9896007738368E+291;
          proc_control_B.ctoc = proc_control_B.cto1_n;
        } else {
          proc_control_B.mul_f = proc_control_B.ctoc / proc_control_B.absx_e;
          notdone = false;
        }

        for (proc_control_B.itau_j = 0; proc_control_B.itau_j < 169;
             proc_control_B.itau_j++) {
          b_A[proc_control_B.itau_j] *= proc_control_B.mul_f;
        }
      }
    }

    proc_control_xzsyhetrd(b_A, W, proc_control_B.e_j, proc_control_B.tau_c);
    proc_control_B.lastv = 143;
    for (proc_control_B.lastc_n = 11; proc_control_B.lastc_n >= 0;
         proc_control_B.lastc_n--) {
      b_A[proc_control_B.lastv + 13] = 0.0;
      for (proc_control_B.itau_j = proc_control_B.lastc_n + 3;
           proc_control_B.itau_j < 14; proc_control_B.itau_j++) {
        proc_control_B.iaii_n = proc_control_B.itau_j + proc_control_B.lastv;
        b_A[proc_control_B.iaii_n + 12] = b_A[proc_control_B.iaii_n - 1];
      }

      proc_control_B.lastv += -13;
    }

    b_A[0] = 1.0;
    std::memset(&b_A[1], 0, 12U * sizeof(real_T));
    std::memset(&proc_control_B.work_d[0], 0, 13U * sizeof(real_T));
    for (proc_control_B.itau_j = 11; proc_control_B.itau_j >= 0;
         proc_control_B.itau_j--) {
      proc_control_B.iaii_n = (proc_control_B.itau_j * 13 +
        proc_control_B.itau_j) + 28;
      if (proc_control_B.itau_j + 1 < 12) {
        b_A[proc_control_B.iaii_n - 14] = 1.0;
        if (proc_control_B.tau_c[proc_control_B.itau_j] != 0.0) {
          proc_control_B.lastv = 12 - proc_control_B.itau_j;
          proc_control_B.lastc_n = (proc_control_B.iaii_n -
            proc_control_B.itau_j) - 3;
          while ((proc_control_B.lastv > 0) && (b_A[proc_control_B.lastc_n] ==
                  0.0)) {
            proc_control_B.lastv--;
            proc_control_B.lastc_n--;
          }

          proc_control_B.lastc_n = 11 - proc_control_B.itau_j;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc_n > 0)) {
            proc_control_B.coltop_j = (proc_control_B.lastc_n - 1) * 13 +
              proc_control_B.iaii_n;
            proc_control_B.b_gv = proc_control_B.coltop_j;
            do {
              exitg1 = 0;
              if (proc_control_B.b_gv <= (proc_control_B.coltop_j +
                   proc_control_B.lastv) - 1) {
                if (b_A[proc_control_B.b_gv - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.b_gv++;
                }
              } else {
                proc_control_B.lastc_n--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.lastv = 0;
          proc_control_B.lastc_n = 0;
        }

        if (proc_control_B.lastv > 0) {
          if (proc_control_B.lastc_n != 0) {
            proc_control_B.b_gv = proc_control_B.lastc_n - 1;
            std::memset(&proc_control_B.work_d[0], 0, static_cast<uint32_T>
                        (proc_control_B.b_gv + 1) * sizeof(real_T));
            proc_control_B.coltop_j = (proc_control_B.lastc_n - 1) * 13 +
              proc_control_B.iaii_n;
            for (proc_control_B.jy_h = proc_control_B.iaii_n;
                 proc_control_B.jy_h <= proc_control_B.coltop_j;
                 proc_control_B.jy_h += 13) {
              proc_control_B.absx_e = 0.0;
              proc_control_B.e_jd = proc_control_B.jy_h + proc_control_B.lastv;
              for (proc_control_B.b_gv = proc_control_B.jy_h;
                   proc_control_B.b_gv < proc_control_B.e_jd;
                   proc_control_B.b_gv++) {
                proc_control_B.absx_e += b_A[((proc_control_B.iaii_n +
                  proc_control_B.b_gv) - proc_control_B.jy_h) - 14] *
                  b_A[proc_control_B.b_gv - 1];
              }

              proc_control_B.b_gv = div_nde_s32_floor(proc_control_B.jy_h -
                proc_control_B.iaii_n, 13);
              proc_control_B.work_d[proc_control_B.b_gv] +=
                proc_control_B.absx_e;
            }
          }

          if (!(-proc_control_B.tau_c[proc_control_B.itau_j] == 0.0)) {
            proc_control_B.jy_h = proc_control_B.iaii_n;
            proc_control_B.b_gv = proc_control_B.lastc_n - 1;
            for (proc_control_B.lastc_n = 0; proc_control_B.lastc_n <=
                 proc_control_B.b_gv; proc_control_B.lastc_n++) {
              proc_control_B.absx_e =
                proc_control_B.work_d[proc_control_B.lastc_n];
              if (proc_control_B.absx_e != 0.0) {
                proc_control_B.absx_e *=
                  -proc_control_B.tau_c[proc_control_B.itau_j];
                proc_control_B.coltop_j = (proc_control_B.lastv +
                  proc_control_B.jy_h) - 1;
                for (proc_control_B.e_jd = proc_control_B.jy_h;
                     proc_control_B.e_jd <= proc_control_B.coltop_j;
                     proc_control_B.e_jd++) {
                  b_A[proc_control_B.e_jd - 1] += b_A[((proc_control_B.iaii_n +
                    proc_control_B.e_jd) - proc_control_B.jy_h) - 14] *
                    proc_control_B.absx_e;
                }
              }

              proc_control_B.jy_h += 13;
            }
          }
        }

        proc_control_B.b_gv = proc_control_B.iaii_n - proc_control_B.itau_j;
        for (proc_control_B.lastv = proc_control_B.iaii_n - 12;
             proc_control_B.lastv <= proc_control_B.b_gv - 2;
             proc_control_B.lastv++) {
          b_A[proc_control_B.lastv - 1] *=
            -proc_control_B.tau_c[proc_control_B.itau_j];
        }
      }

      b_A[proc_control_B.iaii_n - 14] = 1.0 -
        proc_control_B.tau_c[proc_control_B.itau_j];
      proc_control_B.lastc_n = proc_control_B.itau_j - 1;
      for (proc_control_B.lastv = 0; proc_control_B.lastv <=
           proc_control_B.lastc_n; proc_control_B.lastv++) {
        b_A[(proc_control_B.iaii_n - proc_control_B.lastv) - 15] = 0.0;
      }
    }

    *info = proc_control_xzsteqr(W, proc_control_B.e_j, b_A);
    if (*info != 0) {
      for (proc_control_B.itau_j = 0; proc_control_B.itau_j < 13;
           proc_control_B.itau_j++) {
        W[proc_control_B.itau_j] = (rtNaN);
      }

      for (proc_control_B.itau_j = 0; proc_control_B.itau_j < 169;
           proc_control_B.itau_j++) {
        b_A[proc_control_B.itau_j] = (rtNaN);
      }
    } else if (iscale) {
      proc_control_B.anrm_e = 1.0 / proc_control_B.anrm_e;
      for (proc_control_B.itau_j = 0; proc_control_B.itau_j < 13;
           proc_control_B.itau_j++) {
        W[proc_control_B.itau_j] *= proc_control_B.anrm_e;
      }
    }
  }
}

void proc_control::proc_control_expm(real_T A[169], real_T F[169])
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  boolean_T guard3;
  boolean_T guard4;
  boolean_T recomputeDiags;
  recomputeDiags = true;
  for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 169;
       proc_control_B.b_k_m++) {
    if (recomputeDiags) {
      // Start for MATLABSystem: '<S140>/MATLAB System'
      proc_control_B.d6_o = A[proc_control_B.b_k_m];
      if ((!std::isinf(proc_control_B.d6_o)) && (!std::isnan(proc_control_B.d6_o)))
      {
      } else {
        recomputeDiags = false;
      }
    } else {
      recomputeDiags = false;
    }
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  if (!recomputeDiags) {
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 169; proc_control_B.i_k++)
    {
      F[proc_control_B.i_k] = (rtNaN);
    }
  } else {
    proc_control_B.b_k_m = 1;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_k_m - 1 < 13)) {
      proc_control_B.i_k = 1;
      do {
        exitg1 = 0;
        if (proc_control_B.i_k - 1 < 13) {
          if ((proc_control_B.i_k != proc_control_B.b_k_m) && (!(A
                [((proc_control_B.b_k_m - 1) * 13 + proc_control_B.i_k) - 1] ==
                0.0))) {
            recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.i_k++;
          }
        } else {
          proc_control_B.b_k_m++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.eint = 0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 13; proc_control_B.i_k++)
      {
        F[proc_control_B.eint] = std::exp(A[proc_control_B.eint]);
        proc_control_B.eint += 14;
      }
    } else {
      recomputeDiags = true;
      proc_control_B.b_k_m = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.b_k_m < 13)) {
        proc_control_B.i_k = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.i_k <= proc_control_B.b_k_m) {
            if (!(A[13 * proc_control_B.b_k_m + proc_control_B.i_k] == A[13 *
                  proc_control_B.i_k + proc_control_B.b_k_m])) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.i_k++;
            }
          } else {
            proc_control_B.b_k_m++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        proc_control_xsyheev(A, &proc_control_B.j_p, proc_control_B.w,
                             proc_control_B.A2);
        proc_control_B.i_k = 0;
        for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
             proc_control_B.b_k_m++) {
          proc_control_B.exptj = std::exp(proc_control_B.w[proc_control_B.b_k_m]);
          for (proc_control_B.eint = 0; proc_control_B.eint < 13;
               proc_control_B.eint++) {
            proc_control_B.j_p = proc_control_B.eint + proc_control_B.i_k;
            F[proc_control_B.j_p] = proc_control_B.A2[proc_control_B.j_p] *
              proc_control_B.exptj;
          }

          proc_control_B.i_k += 13;
        }

        for (proc_control_B.i_k = 0; proc_control_B.i_k < 13; proc_control_B.i_k
             ++) {
          proc_control_B.i12 = 0;
          for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
               proc_control_B.b_k_m++) {
            proc_control_B.exptj = 0.0;
            proc_control_B.i11 = 0;
            for (proc_control_B.i2 = 0; proc_control_B.i2 < 13;
                 proc_control_B.i2++) {
              proc_control_B.exptj += F[proc_control_B.i11 + proc_control_B.i_k]
                * proc_control_B.A2[proc_control_B.i11 + proc_control_B.b_k_m];
              proc_control_B.i11 += 13;
            }

            proc_control_B.A4[proc_control_B.i12 + proc_control_B.i_k] =
              proc_control_B.exptj;
            proc_control_B.i12 += 13;
          }
        }

        std::memcpy(&F[0], &proc_control_B.A4[0], 169U * sizeof(real_T));
        proc_control_B.i_k = 0;
        for (proc_control_B.i12 = 0; proc_control_B.i12 < 13; proc_control_B.i12
             ++) {
          proc_control_B.b_k_m = 0;
          for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
               proc_control_B.i11++) {
            proc_control_B.j_p = proc_control_B.i11 + proc_control_B.i_k;
            proc_control_B.A4[proc_control_B.j_p] = (F[proc_control_B.b_k_m +
              proc_control_B.i12] + F[proc_control_B.j_p]) / 2.0;
            proc_control_B.b_k_m += 13;
          }

          proc_control_B.i_k += 13;
        }

        std::memcpy(&F[0], &proc_control_B.A4[0], 169U * sizeof(real_T));
      } else {
        recomputeDiags = true;
        proc_control_B.j_p = 3;
        while (recomputeDiags && (proc_control_B.j_p <= 13)) {
          proc_control_B.i_k = proc_control_B.j_p;
          while (recomputeDiags && (proc_control_B.i_k <= 13)) {
            recomputeDiags = (A[((proc_control_B.j_p - 3) * 13 +
                                 proc_control_B.i_k) - 1] == 0.0);
            proc_control_B.i_k++;
          }

          proc_control_B.j_p++;
        }

        if (recomputeDiags) {
          proc_control_B.b_k_m = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.b_k_m - 1 < 12)) {
            proc_control_B.i_k = (proc_control_B.b_k_m - 1) * 13 +
              proc_control_B.b_k_m;
            proc_control_B.d6_o = A[proc_control_B.i_k];
            if (proc_control_B.d6_o != 0.0) {
              if ((proc_control_B.b_k_m != 12) && (A[(13 * proc_control_B.b_k_m
                    + proc_control_B.b_k_m) + 1] != 0.0)) {
                recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.i12 = 13 * proc_control_B.b_k_m +
                  proc_control_B.b_k_m;
                if (A[proc_control_B.i_k - 1] != A[proc_control_B.i12]) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.exptj = A[proc_control_B.i12 - 1];
                  if (std::isnan(proc_control_B.d6_o)) {
                    proc_control_B.d6_o = (rtNaN);
                  } else if (proc_control_B.d6_o < 0.0) {
                    proc_control_B.d6_o = -1.0;
                  } else {
                    proc_control_B.d6_o = (proc_control_B.d6_o > 0.0);
                  }

                  if (std::isnan(proc_control_B.exptj)) {
                    proc_control_B.exptj = (rtNaN);
                  } else if (proc_control_B.exptj < 0.0) {
                    proc_control_B.exptj = -1.0;
                  } else {
                    proc_control_B.exptj = (proc_control_B.exptj > 0.0);
                  }

                  if (proc_control_B.d6_o * proc_control_B.exptj != -1.0) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.b_k_m++;
                  }
                }
              }
            } else {
              proc_control_B.b_k_m++;
            }
          }
        }

        proc_control_B.exptj = 0.0;
        proc_control_B.i_k = 0;
        for (proc_control_B.i12 = 0; proc_control_B.i12 < 13; proc_control_B.i12
             ++) {
          for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
               proc_control_B.b_k_m++) {
            proc_control_B.d6_o = 0.0;
            proc_control_B.i11 = 0;
            for (proc_control_B.i2 = 0; proc_control_B.i2 < 13;
                 proc_control_B.i2++) {
              proc_control_B.d6_o += A[proc_control_B.i11 + proc_control_B.b_k_m]
                * A[proc_control_B.i2 + proc_control_B.i_k];
              proc_control_B.i11 += 13;
            }

            proc_control_B.A2[proc_control_B.b_k_m + proc_control_B.i_k] =
              proc_control_B.d6_o;
          }

          proc_control_B.i_k += 13;
        }

        for (proc_control_B.i_k = 0; proc_control_B.i_k < 13; proc_control_B.i_k
             ++) {
          for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
               proc_control_B.i12++) {
            proc_control_B.A4_hn = 0.0;
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
                 proc_control_B.b_k_m++) {
              proc_control_B.A4_hn += proc_control_B.A2[13 *
                proc_control_B.b_k_m + proc_control_B.i_k] * proc_control_B.A2
                [13 * proc_control_B.i12 + proc_control_B.b_k_m];
            }

            proc_control_B.A4[proc_control_B.i_k + 13 * proc_control_B.i12] =
              proc_control_B.A4_hn;
          }

          for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
               proc_control_B.i12++) {
            proc_control_B.d6_o = 0.0;
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
                 proc_control_B.b_k_m++) {
              proc_control_B.d6_o += proc_control_B.A4[13 * proc_control_B.b_k_m
                + proc_control_B.i_k] * proc_control_B.A2[13 *
                proc_control_B.i12 + proc_control_B.b_k_m];
            }

            proc_control_B.A6[proc_control_B.i_k + 13 * proc_control_B.i12] =
              proc_control_B.d6_o;
          }
        }

        proc_control_B.d6_o = rt_powd_snf(proc_control_norm_p(proc_control_B.A6),
          0.16666666666666666);
        proc_control_B.eta1 = std::fmax(rt_powd_snf(proc_control_norm_p
          (proc_control_B.A4), 0.25), proc_control_B.d6_o);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1 <= 0.01495585217958292) {
          for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 169;
               proc_control_B.b_k_m++) {
            proc_control_B.A4_h[proc_control_B.b_k_m] = 0.19285012468241128 *
              std::abs(A[proc_control_B.b_k_m]);
          }

          proc_control_mpower(proc_control_B.A4_h, 7.0, proc_control_B.dv3);
          if (std::fmax(std::ceil(proc_control_log2(proc_control_norm_p
                 (proc_control_B.dv3) / proc_control_norm_p(A) * 2.0 /
                 2.2204460492503131E-16) / 6.0), 0.0) == 0.0) {
            proc_control_B.eint = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1 <= 0.253939833006323) {
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 169;
                 proc_control_B.b_k_m++) {
              proc_control_B.A4_h[proc_control_B.b_k_m] = 0.12321872304378752 *
                std::abs(A[proc_control_B.b_k_m]);
            }

            proc_control_mpower(proc_control_B.A4_h, 11.0, proc_control_B.dv3);
            if (std::fmax(std::ceil(proc_control_log2(proc_control_norm_p
                   (proc_control_B.dv3) / proc_control_norm_p(A) * 2.0 /
                   2.2204460492503131E-16) / 10.0), 0.0) == 0.0) {
              proc_control_B.eint = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower(proc_control_B.A4, 2.0, proc_control_B.dv3);
          proc_control_B.eta1 = rt_powd_snf(proc_control_norm_p
            (proc_control_B.dv3), 0.125);
          proc_control_B.d6_o = std::fmax(proc_control_B.d6_o,
            proc_control_B.eta1);
          if (proc_control_B.d6_o <= 0.95041789961629319) {
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 169;
                 proc_control_B.b_k_m++) {
              proc_control_B.A4_h[proc_control_B.b_k_m] = 0.090475336558796943 *
                std::abs(A[proc_control_B.b_k_m]);
            }

            proc_control_mpower(proc_control_B.A4_h, 15.0, proc_control_B.dv3);
            if (std::fmax(std::ceil(proc_control_log2(proc_control_norm_p
                   (proc_control_B.dv3) / proc_control_norm_p(A) * 2.0 /
                   2.2204460492503131E-16) / 14.0), 0.0) == 0.0) {
              proc_control_B.eint = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_o <= 2.097847961257068) {
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 169;
                 proc_control_B.b_k_m++) {
              proc_control_B.A4_h[proc_control_B.b_k_m] = 0.071467735648795785 *
                std::abs(A[proc_control_B.b_k_m]);
            }

            proc_control_mpower(proc_control_B.A4_h, 19.0, proc_control_B.dv3);
            if (std::fmax(std::ceil(proc_control_log2(proc_control_norm_p
                   (proc_control_B.dv3) / proc_control_norm_p(A) * 2.0 /
                   2.2204460492503131E-16) / 18.0), 0.0) == 0.0) {
              proc_control_B.eint = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          proc_control_B.i_k = 0;
          for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
               proc_control_B.i12++) {
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
                 proc_control_B.b_k_m++) {
              proc_control_B.A4_hn = 0.0;
              proc_control_B.i11 = 0;
              for (proc_control_B.i2 = 0; proc_control_B.i2 < 13;
                   proc_control_B.i2++) {
                proc_control_B.A4_hn += proc_control_B.A4[proc_control_B.i11 +
                  proc_control_B.b_k_m] * proc_control_B.A6[proc_control_B.i2 +
                  proc_control_B.i_k];
                proc_control_B.i11 += 13;
              }

              proc_control_B.A4_h[proc_control_B.b_k_m + proc_control_B.i_k] =
                proc_control_B.A4_hn;
            }

            proc_control_B.i_k += 13;
          }

          proc_control_B.exptj = std::fmax(std::ceil(proc_control_log2(std::fmin
            (proc_control_B.d6_o, std::fmax(proc_control_B.eta1, rt_powd_snf
            (proc_control_norm_p(proc_control_B.A4_h), 0.1))) /
            5.3719203511481517)), 0.0);
          proc_control_B.d6_o = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 169;
               proc_control_B.b_k_m++) {
            proc_control_B.A4_hn = A[proc_control_B.b_k_m] / proc_control_B.d6_o;
            proc_control_B.T[proc_control_B.b_k_m] = proc_control_B.A4_hn;
            proc_control_B.A4_h[proc_control_B.b_k_m] = 0.05031554467093536 *
              std::abs(proc_control_B.A4_hn);
          }

          proc_control_mpower(proc_control_B.A4_h, 27.0, proc_control_B.dv3);
          proc_control_B.exptj += std::fmax(std::ceil(proc_control_log2
            (proc_control_norm_p(proc_control_B.dv3) / proc_control_norm_p
             (proc_control_B.T) * 2.0 / 2.2204460492503131E-16) / 26.0), 0.0);
          if (std::isinf(proc_control_B.exptj)) {
            proc_control_B.d6_o = proc_control_norm_p(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.d6_o)) && (!std::isnan
                 (proc_control_B.d6_o))) {
              proc_control_B.d6_o = std::frexp(proc_control_B.d6_o,
                &proc_control_B.eint);
              proc_control_B.exptj = proc_control_B.eint;
            } else {
              proc_control_B.exptj = 0.0;
            }

            if (proc_control_B.d6_o == 0.5) {
              proc_control_B.exptj--;
            }
          }

          proc_control_B.eint = 13;
        }

        if (proc_control_B.exptj != 0.0) {
          proc_control_B.d6_o = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.i_k = 0; proc_control_B.i_k < 169;
               proc_control_B.i_k++) {
            A[proc_control_B.i_k] /= proc_control_B.d6_o;
          }

          proc_control_B.d6_o = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj);
          for (proc_control_B.i_k = 0; proc_control_B.i_k < 169;
               proc_control_B.i_k++) {
            proc_control_B.A2[proc_control_B.i_k] /= proc_control_B.d6_o;
          }

          proc_control_B.d6_o = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj);
          for (proc_control_B.i_k = 0; proc_control_B.i_k < 169;
               proc_control_B.i_k++) {
            proc_control_B.A4[proc_control_B.i_k] /= proc_control_B.d6_o;
          }

          proc_control_B.d6_o = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj);
          for (proc_control_B.i_k = 0; proc_control_B.i_k < 169;
               proc_control_B.i_k++) {
            proc_control_B.A6[proc_control_B.i_k] /= proc_control_B.d6_o;
          }
        }

        if (recomputeDiags) {
          for (proc_control_B.i_k = 0; proc_control_B.i_k < 12;
               proc_control_B.i_k++) {
            proc_control_B.blockFormat[proc_control_B.i_k] = 0;
          }

          proc_control_B.j_p = 0;
          while (proc_control_B.j_p + 1 < 12) {
            proc_control_B.d6_o = A[(13 * proc_control_B.j_p +
              proc_control_B.j_p) + 1];
            if (proc_control_B.d6_o != 0.0) {
              proc_control_B.blockFormat[proc_control_B.j_p] = 2;
              proc_control_B.blockFormat[proc_control_B.j_p + 1] = 0;
              proc_control_B.j_p += 2;
            } else if ((proc_control_B.d6_o == 0.0) && (A[((proc_control_B.j_p +
              1) * 13 + proc_control_B.j_p) + 2] == 0.0)) {
              proc_control_B.blockFormat[proc_control_B.j_p] = 1;
              proc_control_B.j_p++;
            } else {
              proc_control_B.blockFormat[proc_control_B.j_p] = 0;
              proc_control_B.j_p++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat[11] = 2;
          } else if ((proc_control_B.blockFormat[10] == 0) ||
                     (proc_control_B.blockFormat[10] == 1)) {
            proc_control_B.blockFormat[11] = 1;
          }
        }

        proc_control_padeApproximation(A, proc_control_B.A2, proc_control_B.A4,
          proc_control_B.A6, proc_control_B.eint, F);
        if (recomputeDiags) {
          proc_control_recomputeBlockDiag(A, F, proc_control_B.blockFormat);
        }

        proc_control_B.eint = static_cast<int32_T>(proc_control_B.exptj) - 1;
        for (proc_control_B.j_p = 0; proc_control_B.j_p <= proc_control_B.eint;
             proc_control_B.j_p++) {
          for (proc_control_B.i_k = 0; proc_control_B.i_k < 13;
               proc_control_B.i_k++) {
            proc_control_B.i12 = 0;
            for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 13;
                 proc_control_B.b_k_m++) {
              proc_control_B.exptj = 0.0;
              proc_control_B.i11 = 0;
              for (proc_control_B.i2 = 0; proc_control_B.i2 < 13;
                   proc_control_B.i2++) {
                proc_control_B.exptj += F[proc_control_B.i11 +
                  proc_control_B.i_k] * F[proc_control_B.i2 + proc_control_B.i12];
                proc_control_B.i11 += 13;
              }

              proc_control_B.A4[proc_control_B.i12 + proc_control_B.i_k] =
                proc_control_B.exptj;
              proc_control_B.i12 += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.A4[0], 169U * sizeof(real_T));
          if (recomputeDiags) {
            for (proc_control_B.i_k = 0; proc_control_B.i_k < 169;
                 proc_control_B.i_k++) {
              A[proc_control_B.i_k] *= 2.0;
            }

            proc_control_recomputeBlockDiag(A, F, proc_control_B.blockFormat);
          }
        }
      }
    }
  }
}

void proc_control::proc_control_mldivide_pr351e(const real_T A[36], real_T B[36])
{
  int32_T tmp;
  int32_T tmp_0;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  std::memcpy(&proc_control_B.c_A[0], &A[0], 36U * sizeof(real_T));
  proc_control_xgetrf_p(proc_control_B.c_A, proc_control_B.ipiv,
                        &proc_control_B.b_info);
  for (proc_control_B.b_i_gm = 0; proc_control_B.b_i_gm < 5;
       proc_control_B.b_i_gm++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.ip = proc_control_B.ipiv[proc_control_B.b_i_gm];
    if (proc_control_B.b_i_gm + 1 != proc_control_B.ip) {
      for (proc_control_B.b_j_j = 0; proc_control_B.b_j_j < 6;
           proc_control_B.b_j_j++) {
        proc_control_B.kAcol = 6 * proc_control_B.b_j_j + proc_control_B.b_i_gm;
        proc_control_B.temp_d = B[proc_control_B.kAcol];
        tmp = (6 * proc_control_B.b_j_j + proc_control_B.ip) - 1;
        B[proc_control_B.kAcol] = B[tmp];
        B[tmp] = proc_control_B.temp_d;
      }
    }
  }

  for (proc_control_B.b_j_j = 0; proc_control_B.b_j_j < 6; proc_control_B.b_j_j
       ++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.ip = 6 * proc_control_B.b_j_j - 1;
    for (proc_control_B.b_i_gm = 0; proc_control_B.b_i_gm < 6;
         proc_control_B.b_i_gm++) {
      proc_control_B.kAcol = 6 * proc_control_B.b_i_gm - 1;
      tmp = (proc_control_B.b_i_gm + proc_control_B.ip) + 1;
      if (B[tmp] != 0.0) {
        for (proc_control_B.b_info = proc_control_B.b_i_gm + 2;
             proc_control_B.b_info < 7; proc_control_B.b_info++) {
          tmp_0 = proc_control_B.b_info + proc_control_B.ip;

          // Start for MATLABSystem: '<S140>/MATLAB System'
          B[tmp_0] -= proc_control_B.c_A[proc_control_B.b_info +
            proc_control_B.kAcol] * B[tmp];
        }
      }
    }
  }

  for (proc_control_B.b_j_j = 0; proc_control_B.b_j_j < 6; proc_control_B.b_j_j
       ++) {
    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_B.ip = 6 * proc_control_B.b_j_j;
    for (proc_control_B.b_info = 5; proc_control_B.b_info >= 0;
         proc_control_B.b_info--) {
      proc_control_B.kAcol = 6 * proc_control_B.b_info;
      tmp = proc_control_B.b_info + proc_control_B.ip;
      proc_control_B.temp_d = B[tmp];
      if (proc_control_B.temp_d != 0.0) {
        B[tmp] = proc_control_B.temp_d /
          proc_control_B.c_A[proc_control_B.b_info + proc_control_B.kAcol];
        proc_control_B.b_f3 = proc_control_B.b_info - 1;
        for (proc_control_B.b_i_gm = 0; proc_control_B.b_i_gm <=
             proc_control_B.b_f3; proc_control_B.b_i_gm++) {
          tmp_0 = proc_control_B.b_i_gm + proc_control_B.ip;
          B[tmp_0] -= proc_control_B.c_A[proc_control_B.b_i_gm +
            proc_control_B.kAcol] * B[tmp];
        }
      }
    }
  }
}

void proc_control::proc_control_ft_3_p(const real_T ct[1016], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  real_T out1_tmp_2;
  real_T out1_tmp_3;
  real_T tmp;
  real_T tmp_0;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.t1456 = ct[487] + ct[916];
  proc_control_B.t1457 = ct[498] + ct[926];
  proc_control_B.t1458 = ct[509] + ct[922];
  proc_control_B.t1479 = proc_control_B.t1456 * ct[1015];
  proc_control_B.t1499 = -(proc_control_B.t1458 * ct[1014]);
  proc_control_B.t1458 = (((ct[142] + ct[701]) + ct[26] * proc_control_B.t1458)
    - ct[343]) - ct[336];
  proc_control_B.t1527 = (((ct[143] + ct[700]) + ct[28] * proc_control_B.t1457)
    - ct[338]) - ct[353];
  proc_control_B.t1456 = (((ct[141] + ct[702]) + ct[27] * proc_control_B.t1456)
    - ct[335]) + ct[356];
  proc_control_B.t1533_tmp = ct[17] * ct[528];
  proc_control_B.t1533_tmp_h = ct[18] * ct[541];
  proc_control_B.t1533_tmp_e = ct[19] * ct[559];
  tmp =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[304] + ct[305]) + ct
    [312]) + ct[333]) + ct[357]) + ct[359]) + ct[361]) + ct[363]) + ct[387]) +
    ct[418]) + ct[419]) + ct[420]) + ct[421]) + ct[422]) + ct[423]) + ct[424]) +
    ct[425]) + ct[426]) + ct[427]) + ct[428]) + ct[429]) + ct[430]) + ct[431]) +
    ct[432]) + ct[433]) + ct[434]) + ct[435]) + ct[436]) + ct[437]) + ct[438]) +
    ct[439]) + ct[440]) + ct[441]) + ct[442]) + ct[443]) + ct[444]) + ct[445]) +
    ct[446]) + ct[447]) + ct[452]) + ct[453]) + ct[458]) + ct[464]) + ct[511]) +
    ct[514]) + ct[517]) + ct[532]) + ct[533]) + ct[534]) + ct[536]) + ct[537]) +
    ct[538]) + ct[539]) + ct[540]) + ct[542]) + ct[543]) + ct[548]) + ct[549]) +
    ct[554]) + ct[555]) + ct[558]) + ct[560]) + ct[562]) + ct[563]) + ct[564]) +
    ct[565]) + ct[567]) + ct[570]) + ct[573]) + ct[574]) + ct[576]) + ct[577]) +
    ct[580]) + ct[583]) + ct[587]) + ct[589]) + ct[629]) + ct[643]) + ct[650]) +
    ct[710]) + ct[711]) + ct[712]) + ct[714]) + ct[716]) + ct[718]) + ct[726]) +
    ct[727]) + ct[728]) + ct[729]) + ct[730]) + ct[731]) + ct[732]) + ct[733]) +
    ct[734]) + ct[735]) + ct[736]) + ct[737]) + ct[738]) + ct[739]) + ct[740]) +
    ct[741]) + ct[742]) + ct[743]) + ct[744]) + ct[745]) + ct[746]) + ct[747]) +
    ct[748]) + ct[749]) + ct[750]) + ct[751]) + ct[752]) + ct[753]) + ct[754]) +
                  ct[755]) + ct[756]) + ct[758]) + ct[760]) + ct[762]) + ct[764])
            + ct[766]) + ct[768]) + ct[770]) + ct[772]) + ct[774]) + ct[776]) +
      ct[778]) + ct[780]) + ct[782];
  tmp_0 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[994] + ct[995]) + ct
    [996]) + ct[997]) + ct[998]) + ct[1001]) + ct[1002]) + ct[1007]) + ct[1009])
    + ct[39]) + ct[40]) + ct[41]) + ct[42]) + ct[43]) + ct[45]) + ct[46]) + ct
    [47]) + ct[48]) + ct[49]) + ct[50]) + ct[51]) + ct[55]) + ct[59]) + ct[62])
    + ct[66]) + ct[69]) + ct[72]) + ct[76]) + ct[78]) + ct[79]) + ct[81]) + ct
    [82]) + ct[83]) + ct[84]) + ct[97]) + ct[98]) + ct[99]) + ct[112]) + ct[125])
    + ct[146]) + ct[147]) + ct[148]) + ct[149]) + ct[150]) + ct[151]) + ct[154])
    + ct[157]) + ct[161]) + ct[162]) + ct[163]) + ct[164]) + ct[165]) + ct[166])
    + ct[167]) + ct[168]) + ct[170]) + ct[171]) + ct[173]) + ct[176]) + ct[178])
    + ct[180]) + ct[182]) + ct[184]) + ct[186]) - ct[794]) - ct[795]) - ct[796])
    - ct[850]) - ct[851]) + ct[196]) + ct[197]) + ct[198]) + ct[199]) + ct[200])
    + ct[201]) + ct[202]) + ct[204]) + ct[206]) + ct[207]) + ct[208]) + ct[210])
    + ct[211]) + ct[212]) + ct[213]) + ct[214]) + ct[216]) + ct[217]) + ct[218])
    + ct[222]) + ct[223]) + ct[224]) + ct[225]) + ct[229]) + ct[230]) + ct[232])
    + ct[233]) + ct[240]) + ct[242]) + ct[245]) + ct[246]) + ct[251]) + ct[252])
    + ct[253]) + ct[254]) + ct[256]) + ct[257]) + ct[258]) + ct[259]) + ct[260])
                       + ct[261]) + ct[262]) + ct[263]) + ct[264]) + ct[265]) +
                  ct[266]) + ct[267]) + ct[268]) + ct[269]) + ct[270]) + ct[271])
            + ct[272]) + ct[273]) + ct[274]) + ct[275]) + ct[276]) + ct[277]) +
      ct[278]) + ct[279]) + ct[281];
  proc_control_B.t1533 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp
    + ct[784]) + ct[786]) + ct[788]) + ct[790]) + ct[792]) + ct[807]) + ct[808])
    + ct[814]) + ct[815]) + ct[820]) + ct[821]) + ct[830]) + ct[831]) + ct[837])
    + ct[838]) + ct[847]) + ct[848]) + ct[878]) + ct[884]) + ct[888]) + ct[897])
    + ct[898]) + ct[899]) + ct[900]) + ct[902]) + ct[904]) + ct[905]) + ct[906])
    + ct[908]) + ct[909]) + ct[910]) + ct[912]) + ct[939]) + ct[940]) + ct[941])
    + ct[942]) + ct[944]) + ct[945]) + ct[946]) + ct[947]) + ct[948]) + ct[949])
    + ct[950]) + ct[951]) + ct[956]) + ct[957]) + ct[958]) + ct[959]) + ct[960])
    + ct[961]) + ct[962]) + ct[963]) + ct[964]) + ct[965]) + ct[966]) + ct[967])
                    + ct[968]) + ct[973]) + ct[974]) + ct[978]) + ct[979]) + ct
               [982]) + ct[983]) + ct[985]) + ct[986]) + ct[987]) + ct[988]) +
         ct[989]) + ct[990]) + ct[992]) + ct[993]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_0 + ct
    [282]) + ct[283]) + ct[284]) + ct[285]) + ct[286]) + ct[287]) + ct[288]) +
    ct[289]) + ct[290]) + ct[292]) + ct[293]) + ct[294]) + ct[295]) + ct[296]) +
    ct[297]) + ct[298]) + ct[299]) + ct[300]) + ct[301]) + ct[302]) + ct[303]) -
    ct[86]) - ct[88]) - ct[92]) - ct[94]) - ct[103]) - ct[105]) - ct[107]) - ct
    [111]) - ct[116]) - ct[120]) - ct[122]) - ct[124]) + ct[308]) + ct[309]) +
    ct[310]) + ct[311]) + ct[313]) + ct[314]) - ct[152]) - ct[153]) - ct[155]) -
    ct[156]) - ct[159]) - ct[160]) + ct[315]) + ct[316]) + ct[317]) + ct[318]) +
                   ct[319]) + ct[320]) + ct[324]) + ct[325]) + ct[326]) + ct[327])
             + ct[328]) + ct[329]) + proc_control_B.t1533_tmp * ct[954]) +
          proc_control_B.t1533_tmp * ct[955]) + proc_control_B.t1533_tmp_h * ct
         [953]) + proc_control_B.t1533_tmp_h * ct[955]) +
       proc_control_B.t1533_tmp_e * ct[953]) + proc_control_B.t1533_tmp_e * ct
      [954]));
  out1[0] = (((ct[801] + ct[811]) - 1.0) * -ct[1013] + (ct[659] + ct[692]) * ct
             [1015]) + (ct[651] - ct[703]) * ct[1014];
  out1[1] = ((ct[651] + ct[703]) * ct[1013] - ((ct[793] + ct[811]) - 1.0) * ct
             [1014]) + (ct[670] - ct[681]) * ct[1015];
  out1[2] = (ct[38] * ct[1013] + ct[896] * ct[1014]) - ct[323] * ct[1015];
  out1[3] = (ct[20] * ct[26] * -0.5 - ct[21] * ct[27] / 2.0) - ct[22] * ct[28] /
    2.0;
  out1[4] = (ct[23] * ct[26] / 2.0 - ct[22] * ct[27] / 2.0) + ct[21] * ct[28] /
    2.0;
  out1[5] = (ct[22] * ct[26] / 2.0 + ct[23] * ct[27] / 2.0) - ct[20] * ct[28] /
    2.0;
  out1[6] = (ct[21] * ct[26] * -0.5 + ct[20] * ct[27] / 2.0) + ct[23] * ct[28] /
    2.0;
  proc_control_B.t1533_tmp_e = ct[3] * ct[8];
  proc_control_B.out1_tmp_ne = ct[5] * ct[6];
  proc_control_B.out1_tmp_hgs = ct[3] * ct[11];
  proc_control_B.out1_tmp_oc = ct[4] * ct[8];
  proc_control_B.out1_tmp_foh = ct[5] * ct[7];
  proc_control_B.out1_tmp_k1c = ct[8] * ct[10];
  proc_control_B.out1_tmp_ej = ct[4] * ct[11];
  proc_control_B.out1_tmp_iwr = ct[10] * ct[11];
  proc_control_B.out1_tmp_o3 = ct[0] * ct[4];
  proc_control_B.out1_tmp_jo = ct[0] * ct[5];
  proc_control_B.out1_tmp_ky = ct[1] * ct[3];
  proc_control_B.out1_tmp_ja = ct[2] * ct[3];
  proc_control_B.out1_tmp_d0 = ct[0] * ct[8];
  proc_control_B.out1_tmp_gnz = ct[2] * ct[6];
  proc_control_B.out1_tmp_c5m = ct[4] * ct[9];
  proc_control_B.out1_tmp_kh = ct[0] * ct[10];
  proc_control_B.out1_tmp_jn = ct[9] * ct[10];
  proc_control_B.out1_tmp_hc = ct[1] * ct[5];
  proc_control_B.out1_tmp_cz = ct[2] * ct[4];
  proc_control_B.out1_tmp_dh = ct[3] * ct[7];
  proc_control_B.out1_tmp_ai = ct[4] * ct[6];
  proc_control_B.out1_tmp_pu = ct[6] * ct[10];
  proc_control_B.out1_tmp_fk = ct[5] * ct[9];
  proc_control_B.out1_tmp_h2 = proc_control_B.out1_tmp_jo * ct[16];
  proc_control_B.out1_tmp_j5 = proc_control_B.out1_tmp_ja * ct[16];
  proc_control_B.out1_tmp_nr = proc_control_B.out1_tmp_fk * ct[16];
  proc_control_B.out1_tmp_o14 = ct[3] * ct[14];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_h2 * ct[18];
  proc_control_B.out1_tmp_dvd = proc_control_B.out1_tmp_j5 * ct[18];
  proc_control_B.out1_tmp_ac = proc_control_B.out1_tmp_dh * ct[15];
  proc_control_B.out1_tmp_kw = proc_control_B.out1_tmp_ai * ct[15];
  proc_control_B.out1_tmp_ct = proc_control_B.out1_tmp_pu * ct[15];
  proc_control_B.out1_tmp_tmp_k5 = proc_control_B.t1533_tmp_e * ct[16];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_tmp_k5 * ct[18];
  proc_control_B.out1_tmp_tmp_pd = proc_control_B.out1_tmp_ne * ct[16];
  proc_control_B.out1_tmp_bh = proc_control_B.out1_tmp_tmp_pd * ct[18];
  proc_control_B.out1_tmp_tmp_kx = proc_control_B.out1_tmp_hgs * ct[16];
  proc_control_B.out1_tmp_nc = proc_control_B.out1_tmp_tmp_kx * ct[18];
  proc_control_B.out1_tmp_dm = ct[0] * ct[7];
  proc_control_B.out1_tmp_hf = ct[1] * ct[6];
  proc_control_B.out1_tmp_bfm = ct[7] * ct[9];
  proc_control_B.out1_tmp_py = proc_control_B.out1_tmp_dm * ct[15];
  proc_control_B.out1_tmp_bp = proc_control_B.out1_tmp_hf * ct[15];
  proc_control_B.out1_tmp_pxa = proc_control_B.out1_tmp_bfm * ct[15];
  proc_control_B.out1_tmp_nek = ct[6] * ct[14];
  proc_control_B.out1_tmp_j2 = proc_control_B.out1_tmp_py * ct[18];
  proc_control_B.out1_tmp_bny = proc_control_B.out1_tmp_bp * ct[18];
  proc_control_B.out1_tmp_ny = ((((((((((((((((((((ct[544] + ct[568]) + ct[578])
    + ct[802]) + ct[823]) + ct[907]) + ct[913]) + ct[969]) + ct[1003]) + ct[58])
    + ct[65]) + ct[68]) + ct[71]) + ct[73]) - ct[856]) - ct[860]) + ct[209]) +
    ct[221]) + ct[227]) + ct[241]) + ct[244]) - ct[80];
  proc_control_B.out1_tmp_bweh = ct[1] * ct[8];
  proc_control_B.out1_tmp_jr = ct[2] * ct[7];
  proc_control_B.out1_tmp_k0 = ct[1] * ct[11];
  proc_control_B.out1_tmp_dq = proc_control_B.out1_tmp_dm * ct[14];
  proc_control_B.out1_tmp_dj = proc_control_B.out1_tmp_hf * ct[14];
  proc_control_B.out1_tmp_o0 = proc_control_B.out1_tmp_bfm * ct[14];
  proc_control_B.out1_tmp_cfs = ct[2] * ct[10];
  proc_control_B.out1_tmp_oz = proc_control_B.out1_tmp_o3 * ct[19];
  proc_control_B.out1_tmp_aj = proc_control_B.out1_tmp_ky * ct[19];
  proc_control_B.out1_tmp_dqn = ct[8] * ct[9];
  proc_control_B.out1_tmp_el = proc_control_B.out1_tmp_c5m * ct[19];
  proc_control_B.out1_tmp_iz = ct[0] * ct[11];
  proc_control_B.out1_tmp_bwn = proc_control_B.out1_tmp_kh * ct[19];
  proc_control_B.out1_tmp_an = ct[9] * ct[11];
  proc_control_B.out1_tmp_kz = proc_control_B.out1_tmp_jn * ct[19];
  proc_control_B.out1_tmp_m2 = proc_control_B.out1_tmp_o3 * ct[8];
  proc_control_B.out1_tmp_jx = proc_control_B.out1_tmp_jo * ct[7];
  proc_control_B.out1_tmp_jm = proc_control_B.out1_tmp_ky * ct[8];
  proc_control_B.out1_tmp_kgj = proc_control_B.out1_tmp_hc * ct[6];
  proc_control_B.out1_tmp_kp = proc_control_B.out1_tmp_ja * ct[7];
  proc_control_B.out1_tmp_ar = proc_control_B.out1_tmp_cz * ct[6];
  proc_control_B.out1_tmp_kc = proc_control_B.out1_tmp_oc * ct[9];
  proc_control_B.out1_tmp_fo1 = proc_control_B.out1_tmp_foh * ct[9];
  proc_control_B.out1_tmp_czb = proc_control_B.out1_tmp_d0 * ct[10];
  proc_control_B.out1_tmp_ong = proc_control_B.out1_tmp_gnz * ct[10];
  proc_control_B.out1_tmp_kv = proc_control_B.out1_tmp_o3 * ct[11];
  proc_control_B.out1_tmp_p2d = proc_control_B.out1_tmp_ky * ct[11];
  proc_control_B.out1_tmp_f4 = proc_control_B.out1_tmp_dqn * ct[10];
  proc_control_B.out1_tmp_dx = proc_control_B.out1_tmp_c5m * ct[11];
  proc_control_B.out1_tmp_eb = proc_control_B.out1_tmp_kh * ct[11];
  proc_control_B.out1_tmp_lf = proc_control_B.out1_tmp_jn * ct[11];
  proc_control_B.out1_tmp_tmp_pa = proc_control_B.out1_tmp_bweh * ct[14];
  proc_control_B.out1_tmp_ez = proc_control_B.out1_tmp_tmp_pa * ct[15];
  proc_control_B.out1_tmp_tmp_db = proc_control_B.out1_tmp_jr * ct[14];
  proc_control_B.out1_tmp_hv = proc_control_B.out1_tmp_tmp_db * ct[15];
  proc_control_B.out1_tmp_tmp_il = proc_control_B.t1533_tmp_e * ct[14];
  proc_control_B.out1_tmp_gg = proc_control_B.out1_tmp_tmp_il * ct[15];
  proc_control_B.out1_tmp_tmp_f = proc_control_B.out1_tmp_ne * ct[14];
  proc_control_B.out1_tmp_p5 = proc_control_B.out1_tmp_tmp_f * ct[15];
  proc_control_B.out1_tmp_tmp_j = proc_control_B.out1_tmp_k0 * ct[14];
  proc_control_B.out1_tmp_nli = proc_control_B.out1_tmp_tmp_j * ct[15];
  proc_control_B.out1_tmp_tmp_in = proc_control_B.out1_tmp_hgs * ct[14];
  proc_control_B.out1_tmp_o2c = proc_control_B.out1_tmp_tmp_in * ct[15];
  proc_control_B.out1_tmp_lh = ct[1] * ct[15];
  proc_control_B.t1457 = ((((((((ct[15] * ct[24] * ct[25] * ct[38] + (ct[306] +
    ct[699])) + ct[331]) - ct[321]) + ct[337]) - proc_control_B.t1457 * ct[1013])
    + ct[346]) + ct[12] * ct[24] * ct[839] * ct[38]) - ct[344]) *
    proc_control_B.t1533;
  proc_control_B.out1_tmp_fz = ct[6] * ct[15];
  proc_control_B.out1_tmp_h5 = ct[7] * ct[14];
  proc_control_B.t1479 = ((((((((ct[698] - ct[144]) - ct[16] * ct[24] * ct[25] *
    ct[38]) - proc_control_B.t1479) + ct[13] * ct[24] * ct[520] * ct[38]) + ct
    [340]) - ct[341]) + ct[345]) - ct[348]) + ct[351];
  proc_control_B.out1_tmp_d4 = proc_control_B.out1_tmp_dh * ct[14];
  proc_control_B.out1_tmp_mf = proc_control_B.out1_tmp_ai * ct[14];
  proc_control_B.out1_tmp_iya = proc_control_B.out1_tmp_pu * ct[14];
  proc_control_B.out1_tmp_j4 = ct[7] * ct[15];
  proc_control_B.t1499 = ((((((((ct[307] + ct[697]) + ct[322]) - ct[332]) + ct
    [339]) + proc_control_B.t1499) + ct[342]) + ct[349]) - ct[352]) - ct[347];
  proc_control_B.out1_tmp_kk = ct[2] * ct[16];
  proc_control_B.out1_tmp_mc = (ct[885] + ct[895]) + ct[911];
  proc_control_B.out1_tmp_pz = ct[5] * ct[15];
  proc_control_B.out1_tmp_efo = proc_control_B.out1_tmp_d0 * ct[18];
  proc_control_B.out1_tmp_ha = proc_control_B.out1_tmp_gnz * ct[18];
  proc_control_B.out1_tmp_fpc = proc_control_B.out1_tmp_iz * ct[18];
  proc_control_B.out1_tmp_ik = proc_control_B.out1_tmp_an * ct[18];
  proc_control_B.out1_tmp_tmp_ea = proc_control_B.out1_tmp_cz * ct[14];
  proc_control_B.out1_tmp_nrj = proc_control_B.out1_tmp_tmp_ea * ct[16];
  proc_control_B.out1_tmp_c2 = proc_control_B.out1_tmp_d4 * ct[16];
  proc_control_B.out1_tmp_c4 = proc_control_B.out1_tmp_mf * ct[16];
  proc_control_B.out1_tmp_tmp_hv = proc_control_B.out1_tmp_cfs * ct[14];
  proc_control_B.out1_tmp_go = proc_control_B.out1_tmp_tmp_hv * ct[16];
  proc_control_B.out1_tmp_ox = proc_control_B.out1_tmp_iya * ct[16];
  proc_control_B.out1_tmp_ex = proc_control_B.out1_tmp_hc * ct[14];
  proc_control_B.out1_tmp_ddh = proc_control_B.out1_tmp_jo * ct[14];
  proc_control_B.out1_tmp_cu = proc_control_B.out1_tmp_ja * ct[14];
  proc_control_B.out1_tmp_j1k = proc_control_B.out1_tmp_fk * ct[14];
  proc_control_B.out1_tmp_nw = ct[3] * ct[16];
  proc_control_B.out1_tmp_jfi = ct[5] * ct[14];
  proc_control_B.out1_tmp_g2 = ((((((((((((((((((((ct[551] + ct[572]) + ct[585])
    + ct[805]) + ct[844]) + ct[903]) + ct[915]) + ct[976]) + ct[1008]) + ct[54])
    + ct[61]) + ct[63]) + ct[64]) + ct[70]) - ct[857]) - ct[866]) + ct[205]) +
    ct[215]) + ct[228]) + ct[243]) + ct[248]) - ct[77];
  proc_control_B.out1_tmp_kvt = proc_control_B.t1527 * proc_control_B.t1533;
  proc_control_B.out1_tmp_n4p = proc_control_B.t1479 * proc_control_B.t1533;
  proc_control_B.out1_tmp_c3d = proc_control_B.out1_tmp_oc * ct[18];
  proc_control_B.out1_tmp_eo = proc_control_B.out1_tmp_foh * ct[18];
  proc_control_B.out1_tmp_fbf = proc_control_B.out1_tmp_oc * ct[19];
  proc_control_B.out1_tmp_k4t = proc_control_B.out1_tmp_foh * ct[19];
  proc_control_B.out1_tmp_cch = proc_control_B.out1_tmp_pz * ct[16];
  proc_control_B.out1_tmp_dt = proc_control_B.out1_tmp_j4 * ct[16];
  proc_control_B.out1_tmp_mz = proc_control_B.out1_tmp_k1c * ct[18];
  proc_control_B.out1_tmp_jce = proc_control_B.out1_tmp_ej * ct[18];
  proc_control_B.out1_tmp_cfl = proc_control_B.out1_tmp_k1c * ct[19];
  proc_control_B.out1_tmp_d41 = proc_control_B.out1_tmp_ej * ct[19];
  proc_control_B.out1_tmp_pd = proc_control_B.out1_tmp_iwr * ct[18];
  proc_control_B.out1_tmp_ay = proc_control_B.out1_tmp_iwr * ct[19];
  proc_control_B.out1_tmp_m0 = ct[5] * ct[19];
  proc_control_B.out1_tmp_nk = -ct[5] * ct[9];
  proc_control_B.out1_tmp_hqs = proc_control_B.out1_tmp_nw * ct[19];
  proc_control_B.out1_tmp_n3 = -proc_control_B.t1458 * proc_control_B.t1533;
  proc_control_B.out1_tmp_ov = proc_control_B.t1533_tmp_e * ct[19];
  proc_control_B.out1_tmp_da = proc_control_B.out1_tmp_ne * ct[19];
  proc_control_B.out1_tmp_hko = proc_control_B.out1_tmp_hgs * ct[19];
  proc_control_B.out1_tmp_jrp = proc_control_B.t1533_tmp_e * ct[15];
  proc_control_B.out1_tmp_dg = proc_control_B.out1_tmp_ne * ct[15];
  proc_control_B.out1_tmp_pe = proc_control_B.out1_tmp_hgs * ct[15];
  proc_control_B.out1_tmp_dhd = ct[6] * ct[16];
  proc_control_B.out1_tmp_byy = ((((((((((((((ct[375] - ct[376]) - ct[393]) -
    ct[401]) + ct[409]) + ct[461]) - ct[462]) - ct[468]) - ct[475]) + ct[480]) -
    ct[516]) + ct[524]) - ct[606]) + ct[607]) - ct[616]) + ct[617];
  proc_control_B.out1_tmp_d4s = ct[7] * ct[18];
  proc_control_B.out1_tmp_b4j = -ct[7] * ct[9];
  proc_control_B.out1_tmp_at = ((((((((((((((ct[366] - ct[368]) - ct[389]) - ct
    [395]) + ct[407]) + ct[459]) - ct[460]) - ct[467]) - ct[473]) + ct[478]) -
    ct[513]) + ct[522]) - ct[601]) + ct[602]) - ct[614]) + ct[615];
  proc_control_B.out1_tmp_nt = ct[3] * ct[15];
  proc_control_B.out1_tmp_p4a = proc_control_B.out1_tmp_fz * ct[18];
  out1_tmp_0 = proc_control_B.out1_tmp_dh * ct[18];
  out1_tmp_1 = proc_control_B.out1_tmp_ai * ct[18];
  out1_tmp_2 = proc_control_B.out1_tmp_pu * ct[18];
  out1[7] = ((((((((((((((((((((((proc_control_B.out1_tmp_ny - ct[16] * ct[367])
    + ct[16] * ct[369]) + ct[16] * ct[379]) + ct[16] * ct[390]) + ct[16] * ct
    [397]) + ct[16] * ct[722]) + proc_control_B.t1533_tmp_e * ct[559] * ct[621])
    - proc_control_B.out1_tmp_ne * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_hgs * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_ov * ct[559] * ct[611]) + proc_control_B.out1_tmp_da
                        * ct[559] * ct[611]) + proc_control_B.out1_tmp_hko * ct
                       [559] * ct[611]) + proc_control_B.out1_tmp_ddh * ct[16] *
                      ct[19] * ct[611]) - proc_control_B.out1_tmp_cu * ct[16] *
                     ct[19] * ct[611]) - proc_control_B.out1_tmp_ac * ct[16] *
                    ct[19] * ct[611]) + proc_control_B.out1_tmp_kw * ct[16] *
                   ct[19] * ct[611]) - proc_control_B.out1_tmp_j1k * ct[16] *
                  ct[19] * ct[611]) - proc_control_B.out1_tmp_ct * ct[16] * ct
                 [19] * ct[611]) * proc_control_B.out1_tmp_n3 -
                (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_mc + ct[914]) +
    ct[923]) + ct[943]) + ct[970]) + ct[1005]) + ct[34]) + ct[44]) + ct[56]) +
    ct[74]) + ct[169]) + ct[174]) + ct[255]) + ct[280]) + ct[291]) + ct[330]) +
    ct[350]) + ct[358]) + ct[360]) + ct[362]) + ct[386]) + ct[482]) + ct[483]) +
    ct[484]) + ct[485]) + ct[486]) + ct[488]) + ct[490]) + ct[492]) + ct[494]) +
    ct[495]) + ct[496]) + ct[499]) + ct[501]) + ct[502]) + ct[503]) + ct[505]) +
    ct[506]) + ct[507]) + ct[545]) + ct[552]) + ct[556]) + ct[557]) + ct[579]) +
    ct[581]) + ct[586]) + ct[588]) + ct[707]) + ct[708]) + ct[709]) + ct[713]) +
    ct[715]) + ct[717]) + ct[725]) + ct[757]) + ct[761]) + ct[765]) + ct[767]) +
    ct[769]) + ct[773]) + ct[777]) + ct[781]) + ct[783]) + ct[785]) + ct[789]) +
    ct[791]) + ct[972]) + ct[977]) + ct[980]) + ct[981]) + ct[172]) + ct[177]) +
    ct[181]) + ct[183]) + ct[185]) + ct[188]) + ct[194]) + ct[195]) + ct[512] *
    ct[528]) + ct[515] * ct[528]) - ct[521] * ct[528]) - ct[523] * ct[528]) +
    ct[0] * ct[547] * ct[631]) - ct[9] * ct[547] * ct[631]) +
    proc_control_B.out1_tmp_lh * ct[535] * ct[631]) + proc_control_B.out1_tmp_kk
    * ct[535] * ct[631]) + proc_control_B.out1_tmp_nt * ct[535] * ct[631]) +
    proc_control_B.out1_tmp_dhd * ct[535] * ct[631]) +
    proc_control_B.out1_tmp_efo * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_ha * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_c3d * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_eo * ct[541] * ct[611]) + proc_control_B.out1_tmp_oz
                        * ct[528] * ct[611]) - proc_control_B.out1_tmp_aj * ct
                       [528] * ct[611]) + proc_control_B.out1_tmp_fbf * ct[559] *
                      ct[611]) - proc_control_B.out1_tmp_k4t * ct[559] * ct[611])
                    + proc_control_B.out1_tmp_cch * ct[528] * ct[631]) +
                   proc_control_B.out1_tmp_dt * ct[528] * ct[631]) +
                  (((((((((((((((((((((((((((-ct[8] * ct[9] * ct[18] * ct[528] *
    ct[611] - proc_control_B.out1_tmp_el * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_mz * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_bwn * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_fpc * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_jce * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_cfl * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_d41 * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_kz * ct[528] * ct[611]) + proc_control_B.out1_tmp_ik
    * ct[528] * ct[611]) + proc_control_B.out1_tmp_pd * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_ay * ct[559] * ct[611]) + proc_control_B.out1_tmp_m2
    * ct[18] * ct[19]) - proc_control_B.out1_tmp_jx * ct[18] * ct[19]) -
    proc_control_B.out1_tmp_jm * ct[18] * ct[19]) + proc_control_B.out1_tmp_kgj *
    ct[18] * ct[19]) + proc_control_B.out1_tmp_kp * ct[18] * ct[19]) -
    proc_control_B.out1_tmp_ar * ct[18] * ct[19]) - proc_control_B.out1_tmp_kc *
    ct[18] * ct[19]) + proc_control_B.out1_tmp_fo1 * ct[18] * ct[19]) -
    proc_control_B.out1_tmp_czb * ct[18] * ct[19]) + proc_control_B.out1_tmp_ong
    * ct[18] * ct[19]) - proc_control_B.out1_tmp_kv * ct[18] * ct[19]) +
                       proc_control_B.out1_tmp_p2d * ct[18] * ct[19]) +
                      proc_control_B.out1_tmp_f4 * ct[18] * ct[19]) +
                     proc_control_B.out1_tmp_dx * ct[18] * ct[19]) +
                    proc_control_B.out1_tmp_eb * ct[18] * ct[19]) -
                   proc_control_B.out1_tmp_lf * ct[18] * ct[19])) +
                 (((((((((((proc_control_B.out1_tmp_ez * ct[18] * ct[611] -
    proc_control_B.out1_tmp_hv * ct[18] * ct[611]) + proc_control_B.out1_tmp_gg *
    ct[18] * ct[611]) - proc_control_B.out1_tmp_p5 * ct[18] * ct[611]) -
    proc_control_B.out1_tmp_ex * ct[16] * ct[19] * ct[611]) +
                        proc_control_B.out1_tmp_nrj * ct[19] * ct[611]) -
                       proc_control_B.out1_tmp_c2 * ct[19] * ct[611]) +
                      proc_control_B.out1_tmp_c4 * ct[19] * ct[611]) -
                     proc_control_B.out1_tmp_nli * ct[18] * ct[611]) -
                    proc_control_B.out1_tmp_go * ct[19] * ct[611]) -
                   proc_control_B.out1_tmp_o2c * ct[18] * ct[611]) -
                  proc_control_B.out1_tmp_ox * ct[19] * ct[611])) *
                proc_control_B.out1_tmp_kvt) -
               ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_at
    - ct[633]) + ct[639]) + ct[648]) + ct[653]) + ct[660]) - ct[672]) - ct[676])
    - ct[798]) - ct[803]) - ct[816]) - ct[825]) - ct[829]) + ct[853]) + ct[861])
    + ct[873]) - ct[883]) + ct[924]) + ct[101]) + ct[102]) + ct[104]) + ct[106])
    + ct[117]) - ct[127]) - ct[134]) - ct[5] * ct[575] * ct[631]) +
    proc_control_B.out1_tmp_h2 * ct[621]) - proc_control_B.out1_tmp_j5 * ct[621])
    - proc_control_B.out1_tmp_nr * ct[621]) - proc_control_B.out1_tmp_o14 * ct
    [559] * ct[631]) + proc_control_B.out1_tmp_m0 * ct[575] * ct[621]) -
    proc_control_B.out1_tmp_on * ct[611]) + proc_control_B.out1_tmp_dvd * ct[611])
                       - proc_control_B.out1_tmp_h2 * ct[19] * ct[611]) +
                      proc_control_B.out1_tmp_j5 * ct[19] * ct[611]) +
                     proc_control_B.out1_tmp_nr * ct[18] * ct[611]) +
                    proc_control_B.out1_tmp_nr * ct[19] * ct[611]) +
                   proc_control_B.out1_tmp_o14 * ct[19] * ct[559] * ct[621]) +
                  proc_control_B.out1_tmp_on * ct[19] * ct[25]) -
                 proc_control_B.out1_tmp_dvd * ct[19] * ct[25]) +
                proc_control_B.out1_tmp_nk * ct[16] * ct[18] * ct[19] * ct[25]) *
               proc_control_B.t1457) +
              ((((((((((((((((((proc_control_B.out1_tmp_g2 - ct[15] * ct[371]) +
    ct[15] * ct[372]) - ct[15] * ct[380]) + ct[15] * ct[382]) + ct[15] * ct[391])
    + ct[15] * ct[403]) - proc_control_B.out1_tmp_dh * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_ai * ct[541] * ct[621]) - proc_control_B.out1_tmp_pu
                        * ct[541] * ct[621]) + out1_tmp_0 * ct[541] * ct[611]) -
                      out1_tmp_1 * ct[541] * ct[611]) + out1_tmp_2 * ct[541] *
                     ct[611]) + proc_control_B.out1_tmp_dq * ct[15] * ct[18] *
                    ct[611]) - proc_control_B.out1_tmp_dj * ct[15] * ct[18] *
                   ct[611]) + proc_control_B.out1_tmp_jrp * ct[16] * ct[18] *
                  ct[611]) - proc_control_B.out1_tmp_dg * ct[16] * ct[18] * ct
                 [611]) - proc_control_B.out1_tmp_o0 * ct[15] * ct[18] * ct[611])
               - proc_control_B.out1_tmp_pe * ct[16] * ct[18] * ct[611]) *
              (-proc_control_B.t1456 * proc_control_B.t1533)) +
             (((((((((((((((((((((((((((((((((((((((ct[379] + ct[380]) - ct[382])
    + ct[397]) - ct[403]) + ct[608]) - ct[620]) + ct[622]) + ct[638]) + ct[667])
    + ct[669]) + ct[722]) + ct[832]) + ct[835]) + ct[929]) + ct[932]) + ct[1006])
    + ct[1010]) + ct[31]) + ct[33]) + ct[191]) + ct[192]) + ct[235]) + ct[239])
    - proc_control_B.out1_tmp_jy * ct[611]) + proc_control_B.out1_tmp_bh * ct
    [611]) - proc_control_B.out1_tmp_ac * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_kw * ct[19] * ct[611]) + proc_control_B.out1_tmp_nc *
    ct[611]) - proc_control_B.out1_tmp_ct * ct[19] * ct[611]) -
                       proc_control_B.out1_tmp_p4a * ct[528] * ct[621]) -
                      proc_control_B.out1_tmp_h5 * ct[18] * ct[541] * ct[621]) +
                     proc_control_B.out1_tmp_hqs * ct[528] * ct[621]) +
                    proc_control_B.out1_tmp_jfi * ct[19] * ct[559] * ct[621]) +
                   proc_control_B.out1_tmp_ac * ct[18] * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_kw * ct[18] * ct[19] * ct[25]) +
                 proc_control_B.out1_tmp_jy * ct[19] * ct[25]) -
                proc_control_B.out1_tmp_bh * ct[19] * ct[25]) +
               proc_control_B.out1_tmp_ct * ct[18] * ct[19] * ct[25]) -
              proc_control_B.out1_tmp_nc * ct[19] * ct[25]) *
             (proc_control_B.t1499 * -proc_control_B.t1533)) +
    ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_byy - ct[632])
    + ct[642]) + ct[649]) + ct[661]) + ct[665]) - ct[677]) - ct[683]) - ct[800])
    - ct[810]) - ct[833]) - ct[840]) - ct[846]) + ct[855]) + ct[868]) + ct[875])
    - ct[887]) + ct[927]) + ct[110]) + ct[114]) + ct[115]) + ct[121]) + ct[123])
                      - ct[131]) - ct[137]) - ct[7] * ct[553] * ct[631]) +
                   proc_control_B.out1_tmp_py * ct[621]) -
                  proc_control_B.out1_tmp_bp * ct[621]) -
                 proc_control_B.out1_tmp_pxa * ct[621]) -
                proc_control_B.out1_tmp_nek * ct[541] * ct[631]) +
               proc_control_B.out1_tmp_d4s * ct[553] * ct[621]) -
              proc_control_B.out1_tmp_j2 * ct[611]) +
             proc_control_B.out1_tmp_bny * ct[611]) - proc_control_B.out1_tmp_py
            * ct[19] * ct[611]) + proc_control_B.out1_tmp_bp * ct[19] * ct[611])
          + proc_control_B.out1_tmp_pxa * ct[18] * ct[611]) +
         proc_control_B.out1_tmp_pxa * ct[19] * ct[611]) +
        proc_control_B.out1_tmp_nek * ct[18] * ct[541] * ct[621]) +
       proc_control_B.out1_tmp_j2 * ct[19] * ct[25]) -
      proc_control_B.out1_tmp_bny * ct[19] * ct[25]) +
     proc_control_B.out1_tmp_b4j * ct[15] * ct[18] * ct[19] * ct[25]) *
    proc_control_B.out1_tmp_n4p;
  proc_control_B.out1_tmp_h2 = proc_control_B.out1_tmp_hc * ct[16];
  proc_control_B.out1_tmp_j5 = proc_control_B.out1_tmp_cz * ct[16];
  proc_control_B.out1_tmp_nr = proc_control_B.out1_tmp_cfs * ct[16];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_h2 * ct[17];
  proc_control_B.out1_tmp_dvd = proc_control_B.out1_tmp_j5 * ct[17];
  proc_control_B.out1_tmp_tmp_hw = proc_control_B.out1_tmp_bweh * ct[16];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_tmp_hw * ct[17];
  proc_control_B.out1_tmp_tmp_nw = proc_control_B.out1_tmp_jr * ct[16];
  proc_control_B.out1_tmp_bh = proc_control_B.out1_tmp_tmp_nw * ct[17];
  proc_control_B.out1_tmp_tmp_b = proc_control_B.out1_tmp_k0 * ct[16];
  proc_control_B.out1_tmp_nc = proc_control_B.out1_tmp_tmp_b * ct[17];
  proc_control_B.out1_tmp_j2 = proc_control_B.out1_tmp_d4 * ct[17];
  proc_control_B.out1_tmp_bny = proc_control_B.out1_tmp_mf * ct[17];
  proc_control_B.out1_tmp_do = ct[2] * ct[14];
  proc_control_B.out1_tmp_ig = proc_control_B.out1_tmp_oc * ct[17];
  proc_control_B.out1_tmp_ged = proc_control_B.out1_tmp_foh * ct[17];
  proc_control_B.out1_tmp_gq5 = ct[1] * ct[14];
  proc_control_B.out1_tmp_cg = proc_control_B.out1_tmp_k1c * ct[17];
  proc_control_B.out1_tmp_a5c = proc_control_B.out1_tmp_ej * ct[17];
  proc_control_B.out1_tmp_c1 = proc_control_B.out1_tmp_iwr * ct[17];
  proc_control_B.out1_tmp_m2 *= ct[17];
  proc_control_B.out1_tmp_jx *= ct[17];
  proc_control_B.out1_tmp_jm *= ct[17];
  proc_control_B.out1_tmp_kgj *= ct[17];
  proc_control_B.out1_tmp_kp *= ct[17];
  proc_control_B.out1_tmp_ar *= ct[17];
  proc_control_B.out1_tmp_kc *= ct[17];
  proc_control_B.out1_tmp_fo1 *= ct[17];
  proc_control_B.out1_tmp_czb *= ct[17];
  proc_control_B.out1_tmp_ong *= ct[17];
  proc_control_B.out1_tmp_kv *= ct[17];
  proc_control_B.out1_tmp_p2d *= ct[17];
  proc_control_B.out1_tmp_f4 *= ct[17];
  proc_control_B.out1_tmp_dx *= ct[17];
  proc_control_B.out1_tmp_eb *= ct[17];
  proc_control_B.out1_tmp_lf *= ct[17];
  proc_control_B.out1_tmp_tmp_oa = proc_control_B.out1_tmp_jo * ct[15];
  proc_control_B.out1_tmp_ikw = proc_control_B.out1_tmp_tmp_oa * ct[16];
  proc_control_B.out1_tmp_tmp_j4 = proc_control_B.out1_tmp_ja * ct[15];
  proc_control_B.out1_tmp_hu = proc_control_B.out1_tmp_tmp_j4 * ct[16];
  proc_control_B.out1_tmp_py *= ct[16];
  proc_control_B.out1_tmp_bp *= ct[16];
  proc_control_B.out1_tmp_tmp_pc = proc_control_B.out1_tmp_fk * ct[15];
  proc_control_B.out1_tmp_ml = proc_control_B.out1_tmp_tmp_pc * ct[16];
  proc_control_B.out1_tmp_pxa *= ct[16];
  proc_control_B.t1456 *= proc_control_B.t1533;
  proc_control_B.out1_tmp_ms = ((((((((((((((((((((ct[561] + ct[584]) + ct[590])
    + ct[827]) + ct[849]) + ct[901]) + ct[921]) + ct[984]) + ct[1012]) + ct[52])
    + ct[53]) + ct[57]) + ct[60]) + ct[67]) - ct[863]) - ct[869]) + ct[203]) +
    ct[219]) + ct[226]) + ct[247]) + ct[249]) - ct[75];
  proc_control_B.t1458 *= proc_control_B.t1533;
  proc_control_B.out1_tmp_pi = ct[5] * ct[16];
  proc_control_B.out1_tmp_aaa = proc_control_B.out1_tmp_hc * ct[15];
  proc_control_B.out1_tmp_fj = proc_control_B.out1_tmp_cz * ct[15];
  proc_control_B.out1_tmp_c30 = proc_control_B.out1_tmp_cfs * ct[15];
  proc_control_B.out1_tmp_ks = ct[1] * ct[16];
  proc_control_B.out1_tmp_os = ct[2] * ct[15];
  proc_control_B.t1527 = -proc_control_B.t1527 * proc_control_B.t1533;
  proc_control_B.out1_tmp_ksm = ct[7] * ct[16];
  proc_control_B.out1_tmp_j5b = ct[2] * ct[19];
  proc_control_B.out1_tmp_px1 = -ct[2] * ct[10];
  proc_control_B.out1_tmp_mt = proc_control_B.out1_tmp_ks * ct[19];
  proc_control_B.out1_tmp_b4 = ((((((((((((((ct[384] - ct[385]) - ct[399]) - ct
    [405]) + ct[414]) + ct[456]) - ct[457]) - ct[472]) - ct[474]) + ct[481]) -
    ct[516]) + ct[524]) - ct[599]) + ct[600]) - ct[623]) + ct[624];
  proc_control_B.out1_tmp_l1g = proc_control_B.out1_tmp_bweh * ct[19];
  proc_control_B.out1_tmp_g5 = proc_control_B.out1_tmp_jr * ct[19];
  proc_control_B.out1_tmp_g23 = proc_control_B.out1_tmp_k0 * ct[19];
  proc_control_B.out1_tmp_lj = proc_control_B.out1_tmp_d0 * ct[17];
  proc_control_B.out1_tmp_cy = proc_control_B.out1_tmp_gnz * ct[17];
  proc_control_B.out1_tmp_mi = proc_control_B.out1_tmp_d0 * ct[19];
  proc_control_B.out1_tmp_h50 = proc_control_B.out1_tmp_gnz * ct[19];
  proc_control_B.out1_tmp_awu = proc_control_B.out1_tmp_dqn * ct[17];
  proc_control_B.out1_tmp_oqc = proc_control_B.out1_tmp_do * ct[16];
  proc_control_B.out1_tmp_io = proc_control_B.out1_tmp_nek * ct[16];
  proc_control_B.out1_tmp_azw = proc_control_B.out1_tmp_dqn * ct[19];
  proc_control_B.out1_tmp_eu = proc_control_B.out1_tmp_iz * ct[17];
  proc_control_B.out1_tmp_dz2 = proc_control_B.out1_tmp_iz * ct[19];
  proc_control_B.out1_tmp_lvf = proc_control_B.out1_tmp_an * ct[17];
  proc_control_B.out1_tmp_if = proc_control_B.out1_tmp_an * ct[19];
  proc_control_B.out1_tmp_nkd = proc_control_B.out1_tmp_dm * ct[17];
  proc_control_B.out1_tmp_cfu = proc_control_B.out1_tmp_hf * ct[17];
  proc_control_B.out1_tmp_i4 = proc_control_B.out1_tmp_bfm * ct[17];
  proc_control_B.out1_tmp_b5 = (((((((((((((((ct[364] - ct[365]) - ct[388]) -
    ct[394]) + ct[406]) + ct[454]) - ct[455]) - ct[465]) - ct[469]) + ct[476]) -
    ct[510]) + ct[519]) - ct[591]) + ct[592]) - ct[612]) + ct[613]) + ct[625];
  proc_control_B.out1_tmp_bil = -ct[6] * ct[10];
  proc_control_B.out1_tmp_ixa = proc_control_B.out1_tmp_h5 * ct[17];
  proc_control_B.out1_tmp_nmf = proc_control_B.out1_tmp_dq * ct[17];
  proc_control_B.out1_tmp_c0 = proc_control_B.out1_tmp_dj * ct[17];
  proc_control_B.out1_tmp_et = proc_control_B.out1_tmp_o0 * ct[17];
  out1_tmp_3 = ct[6] * ct[17];
  out1[8] = ((((((((((((((((((((ct[16] * ct[370] + proc_control_B.out1_tmp_ny) -
    ct[16] * ct[371]) + ct[16] * ct[372]) + ct[16] * ct[391]) + ct[16] * ct[396])
    + ct[16] * ct[720]) + proc_control_B.out1_tmp_bweh * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_jr * ct[559] * ct[621]) - proc_control_B.out1_tmp_k0
                        * ct[559] * ct[621]) - proc_control_B.out1_tmp_l1g * ct
                       [559] * ct[611]) + proc_control_B.out1_tmp_g5 * ct[559] *
                      ct[611]) + proc_control_B.out1_tmp_g23 * ct[559] * ct[611])
                    - proc_control_B.out1_tmp_aaa * ct[16] * ct[19] * ct[611]) +
                   proc_control_B.out1_tmp_fj * ct[16] * ct[19] * ct[611]) +
                  proc_control_B.out1_tmp_dq * ct[16] * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_dj * ct[16] * ct[19] * ct[611]) -
                proc_control_B.out1_tmp_o0 * ct[16] * ct[19] * ct[611]) -
               proc_control_B.out1_tmp_c30 * ct[16] * ct[19] * ct[611]) *
              proc_control_B.t1527 -
              (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((ct[914] + ct[923]) + ct[943]) + ct[952]) +
    ct[991]) + ct[1005]) + ct[29]) + ct[56]) + ct[74]) + ct[158]) + ct[174]) +
    ct[220]) + ct[231]) + ct[250]) + ct[255]) + ct[280]) + ct[291]) + ct[330]) +
    ct[350]) + ct[358]) + ct[360]) + ct[362]) + ct[386]) + ct[485]) + ct[486]) +
    ct[488]) + ct[489]) + ct[491]) + ct[492]) + ct[493]) + ct[496]) + ct[497]) +
    ct[499]) + ct[500]) + ct[503]) + ct[504]) + ct[505]) + ct[507]) + ct[546]) +
    ct[550]) + ct[552]) + ct[557]) + ct[569]) + ct[571]) + ct[586]) + ct[588]) +
    ct[704]) + ct[705]) + ct[706]) + ct[707]) + ct[708]) + ct[709]) + ct[713]) +
    ct[715]) + ct[717]) + ct[725]) + ct[759]) + ct[761]) + ct[763]) + ct[765]) +
    ct[771]) + ct[773]) + ct[775]) + ct[779]) + ct[781]) + ct[785]) + ct[787]) +
    ct[789]) + ct[971]) + ct[975]) + ct[977]) + ct[980]) + ct[175]) + ct[177]) +
    ct[179]) + ct[181]) + ct[187]) + ct[188]) + ct[189]) + ct[194]) + ct[508] *
    ct[541]) + ct[515] * ct[541]) - ct[518] * ct[541]) - ct[523] * ct[541]) +
    ct[4] * ct[566] * ct[631]) - ct[10] * ct[566] * ct[631]) +
    proc_control_B.out1_tmp_gq5 * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_o14 * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_pi * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_ksm * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_lj * ct[528] * ct[611]) - proc_control_B.out1_tmp_cy
    * ct[528] * ct[611]) + proc_control_B.out1_tmp_ig * ct[541] * ct[611]) -
                       proc_control_B.out1_tmp_ged * ct[541] * ct[611]) +
                      proc_control_B.out1_tmp_oz * ct[541] * ct[611]) -
                     proc_control_B.out1_tmp_aj * ct[541] * ct[611]) +
                    proc_control_B.out1_tmp_mi * ct[559] * ct[611]) -
                   proc_control_B.out1_tmp_h50 * ct[559] * ct[611]) -
                  proc_control_B.out1_tmp_awu * ct[528] * ct[611]) +
                 proc_control_B.out1_tmp_oqc * ct[541] * ct[631]) +
                (((((((((((((((((((((((((((proc_control_B.out1_tmp_io * ct[541] *
    ct[631] - proc_control_B.out1_tmp_cg * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_el * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_azw * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_eu * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_a5c * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_bwn * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_dz2 * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_lvf * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_kz * ct[541] * ct[611]) + proc_control_B.out1_tmp_c1
    * ct[541] * ct[611]) + proc_control_B.out1_tmp_if * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_m2 * ct[19]) - proc_control_B.out1_tmp_jx * ct[19])
    - proc_control_B.out1_tmp_jm * ct[19]) + proc_control_B.out1_tmp_kgj * ct[19])
    + proc_control_B.out1_tmp_kp * ct[19]) - proc_control_B.out1_tmp_ar * ct[19])
    - proc_control_B.out1_tmp_kc * ct[19]) + proc_control_B.out1_tmp_fo1 * ct[19])
                        - proc_control_B.out1_tmp_czb * ct[19]) +
                       proc_control_B.out1_tmp_ong * ct[19]) -
                      proc_control_B.out1_tmp_kv * ct[19]) +
                     proc_control_B.out1_tmp_p2d * ct[19]) +
                    proc_control_B.out1_tmp_f4 * ct[19]) +
                   proc_control_B.out1_tmp_dx * ct[19]) +
                  proc_control_B.out1_tmp_eb * ct[19]) -
                 proc_control_B.out1_tmp_lf * ct[19])) +
               (((((((((((proc_control_B.out1_tmp_ez * ct[17] * ct[611] -
    proc_control_B.out1_tmp_hv * ct[17] * ct[611]) + proc_control_B.out1_tmp_gg *
    ct[17] * ct[611]) - proc_control_B.out1_tmp_p5 * ct[17] * ct[611]) +
                       proc_control_B.out1_tmp_ikw * ct[19] * ct[611]) -
                      proc_control_B.out1_tmp_hu * ct[19] * ct[611]) +
                     proc_control_B.out1_tmp_py * ct[19] * ct[611]) -
                    proc_control_B.out1_tmp_bp * ct[19] * ct[611]) -
                   proc_control_B.out1_tmp_ml * ct[19] * ct[611]) -
                  proc_control_B.out1_tmp_pxa * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_nli * ct[17] * ct[611]) -
                proc_control_B.out1_tmp_o2c * ct[17] * ct[611])) *
              proc_control_B.t1458) +
             ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b5
    - ct[635]) + ct[644]) + ct[647]) + ct[657]) - ct[664]) - ct[674]) - ct[799])
    - ct[804]) - ct[812]) - ct[817]) - ct[818]) + ct[854]) + ct[858]) + ct[871])
    - ct[877]) + ct[918]) + ct[85]) + ct[87]) + ct[89]) + ct[90]) + ct[113]) -
    ct[128]) - ct[130]) - ct[2] * ct[575] * ct[631]) -
    proc_control_B.out1_tmp_h2 * ct[621]) + proc_control_B.out1_tmp_j5 * ct[621])
    - proc_control_B.out1_tmp_nr * ct[621]) - proc_control_B.out1_tmp_lh * ct
    [559] * ct[631]) + proc_control_B.out1_tmp_j5b * ct[575] * ct[621]) +
                        proc_control_B.out1_tmp_on * ct[611]) -
                       proc_control_B.out1_tmp_dvd * ct[611]) +
                      proc_control_B.out1_tmp_h2 * ct[19] * ct[611]) -
                     proc_control_B.out1_tmp_j5 * ct[19] * ct[611]) +
                    proc_control_B.out1_tmp_nr * ct[17] * ct[611]) +
                   proc_control_B.out1_tmp_nr * ct[19] * ct[611]) +
                  proc_control_B.out1_tmp_lh * ct[19] * ct[559] * ct[621]) -
                 proc_control_B.out1_tmp_on * ct[19] * ct[25]) +
                proc_control_B.out1_tmp_dvd * ct[19] * ct[25]) +
               proc_control_B.out1_tmp_px1 * ct[16] * ct[17] * ct[19] * ct[25]) *
              proc_control_B.t1457 + (((((((((((((((((((((((((((((((((((((((ct
    [371] - ct[377]) + ct[378]) + ct[402]) + ct[594]) + ct[618]) - ct[619]) +
    ct[627]) + ct[630]) - ct[666]) + ct[673]) + ct[721]) + ct[724]) + ct[809]) +
    ct[813]) - ct[832]) - ct[835]) + ct[920]) + ct[931]) + ct[1000]) + ct[1011])
    + ct[32]) + ct[236]) + ct[238]) + proc_control_B.out1_tmp_jy * ct[611]) -
    proc_control_B.out1_tmp_bh * ct[611]) - proc_control_B.out1_tmp_dq * ct[19] *
    ct[611]) + proc_control_B.out1_tmp_dj * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_o0 * ct[19] * ct[611]) - proc_control_B.out1_tmp_nc *
    ct[611]) + proc_control_B.out1_tmp_fz * ct[17] * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_ixa * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_mt * ct[541] * ct[621]) - proc_control_B.out1_tmp_os
    * ct[19] * ct[559] * ct[621]) + proc_control_B.out1_tmp_nmf * ct[19] * ct[25])
    - proc_control_B.out1_tmp_c0 * ct[19] * ct[25]) - proc_control_B.out1_tmp_jy
    * ct[19] * ct[25]) + proc_control_B.out1_tmp_bh * ct[19] * ct[25]) -
    proc_control_B.out1_tmp_et * ct[19] * ct[25]) + proc_control_B.out1_tmp_nc *
    ct[19] * ct[25]) * (proc_control_B.t1479 * -proc_control_B.t1533))) +
    (((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b4 - ct[634])
    + ct[646]) + ct[655]) + ct[663]) + ct[668]) - ct[682]) - ct[689]) - ct[826])
    - ct[828]) - ct[833]) - ct[840]) - ct[843]) + ct[862]) + ct[865]) + ct[875])
    - ct[887]) + ct[928]) + ct[96]) + ct[118]) + ct[119]) + ct[121]) + ct[123])
                       - ct[133]) - ct[135]) - ct[6] * ct[535] * ct[631]) -
                    proc_control_B.out1_tmp_d4 * ct[621]) +
                   proc_control_B.out1_tmp_mf * ct[621]) -
                  proc_control_B.out1_tmp_iya * ct[621]) -
                 proc_control_B.out1_tmp_j4 * ct[528] * ct[631]) + out1_tmp_3 *
                ct[535] * ct[621]) + proc_control_B.out1_tmp_j2 * ct[611]) -
              proc_control_B.out1_tmp_bny * ct[611]) +
             proc_control_B.out1_tmp_d4 * ct[19] * ct[611]) -
            proc_control_B.out1_tmp_mf * ct[19] * ct[611]) +
           proc_control_B.out1_tmp_iya * ct[17] * ct[611]) +
          proc_control_B.out1_tmp_iya * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_j4 * ct[17] * ct[528] * ct[621]) -
        proc_control_B.out1_tmp_j2 * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_bny * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_bil * ct[14] * ct[17] * ct[19] * ct[25]) *
     -proc_control_B.t1533 * proc_control_B.t1499 -
     ((((((((((((((((((proc_control_B.out1_tmp_ms - ct[14] * ct[377]) + ct[14] *
                      ct[378]) + ct[14] * ct[379]) + ct[14] * ct[397]) + ct[14] *
                   ct[402]) + ct[14] * ct[722]) + proc_control_B.out1_tmp_dm *
                 ct[528] * ct[621]) - proc_control_B.out1_tmp_hf * ct[528] * ct
                [621]) - proc_control_B.out1_tmp_bfm * ct[528] * ct[621]) -
              proc_control_B.out1_tmp_nkd * ct[528] * ct[611]) +
             proc_control_B.out1_tmp_cfu * ct[528] * ct[611]) +
            proc_control_B.out1_tmp_i4 * ct[528] * ct[611]) +
           proc_control_B.out1_tmp_tmp_pa * ct[16] * ct[17] * ct[611]) -
          proc_control_B.out1_tmp_tmp_db * ct[16] * ct[17] * ct[611]) -
         proc_control_B.out1_tmp_d4 * ct[15] * ct[17] * ct[611]) +
        proc_control_B.out1_tmp_mf * ct[15] * ct[17] * ct[611]) -
       proc_control_B.out1_tmp_iya * ct[15] * ct[17] * ct[611]) -
      proc_control_B.out1_tmp_tmp_j * ct[16] * ct[17] * ct[611]) *
     proc_control_B.t1456);
  proc_control_B.out1_tmp_h2 = proc_control_B.out1_tmp_bweh * ct[15];
  proc_control_B.out1_tmp_j5 = proc_control_B.out1_tmp_jr * ct[15];
  proc_control_B.out1_tmp_nr = proc_control_B.out1_tmp_k0 * ct[15];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_h2 * ct[17];
  proc_control_B.out1_tmp_dvd = proc_control_B.out1_tmp_j5 * ct[17];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_tmp_il * ct[17];
  proc_control_B.out1_tmp_bh = proc_control_B.out1_tmp_tmp_f * ct[17];
  proc_control_B.out1_tmp_nc = proc_control_B.out1_tmp_aaa * ct[17];
  proc_control_B.out1_tmp_j2 = proc_control_B.out1_tmp_fj * ct[17];
  proc_control_B.out1_tmp_bny = proc_control_B.out1_tmp_c30 * ct[17];
  proc_control_B.out1_tmp_ny = ((((((((((((((ct[381] - ct[383]) - ct[398]) - ct
    [404]) + ct[413]) + ct[450]) - ct[451]) - ct[466]) - ct[471]) + ct[479]) -
    ct[513]) + ct[522]) - ct[597]) + ct[598]) - ct[609]) + ct[610];
  proc_control_B.out1_tmp_ez = -ct[1] * ct[11];
  proc_control_B.out1_tmp_hv = proc_control_B.out1_tmp_hc * ct[18];
  proc_control_B.out1_tmp_gg = proc_control_B.out1_tmp_cz * ct[18];
  proc_control_B.out1_tmp_p5 = proc_control_B.out1_tmp_cfs * ct[18];
  proc_control_B.out1_tmp_nli = proc_control_B.out1_tmp_os * ct[18];
  proc_control_B.out1_tmp_o2c = ct[1] * ct[18];
  proc_control_B.out1_tmp_d4 = proc_control_B.t1499 * proc_control_B.t1533;
  proc_control_B.out1_tmp_mf = proc_control_B.out1_tmp_jo * ct[17];
  proc_control_B.out1_tmp_iya = proc_control_B.out1_tmp_ja * ct[17];
  proc_control_B.t1499 = proc_control_B.out1_tmp_fk * ct[17];
  proc_control_B.out1_tmp_gkm = proc_control_B.out1_tmp_jfi * ct[17];
  proc_control_B.out1_tmp_ld = proc_control_B.out1_tmp_ddh * ct[17];
  proc_control_B.out1_tmp_o0o = proc_control_B.out1_tmp_cu * ct[17];
  proc_control_B.out1_tmp_a2 = proc_control_B.out1_tmp_j1k * ct[17];
  proc_control_B.out1_tmp_h4 = ct[3] * ct[17];
  proc_control_B.out1_tmp_a0 = -ct[3] * ct[11];
  proc_control_B.out1_tmp_kg3 = (((((((((((((((ct[373] - ct[374]) - ct[392]) -
    ct[400]) + ct[408]) + ct[448]) - ct[449]) - ct[463]) - ct[470]) + ct[477]) -
    ct[510]) + ct[519]) - ct[595]) + ct[596]) - ct[604]) + ct[605]) + ct[628];
  proc_control_B.out1_tmp_es = proc_control_B.out1_tmp_dqn * ct[18];
  proc_control_B.out1_tmp_pik = proc_control_B.out1_tmp_o3 * ct[17];
  proc_control_B.out1_tmp_ihe = proc_control_B.out1_tmp_ky * ct[17];
  proc_control_B.out1_tmp_kf = proc_control_B.out1_tmp_o3 * ct[18];
  proc_control_B.out1_tmp_cr = proc_control_B.out1_tmp_ky * ct[18];
  proc_control_B.out1_tmp_ncw = proc_control_B.out1_tmp_c5m * ct[17];
  proc_control_B.out1_tmp_bpl = proc_control_B.out1_tmp_gq5 * ct[15];
  proc_control_B.out1_tmp_msx = proc_control_B.out1_tmp_o14 * ct[15];
  proc_control_B.out1_tmp_mr = proc_control_B.out1_tmp_c5m * ct[18];
  proc_control_B.out1_tmp_n2r = proc_control_B.out1_tmp_kh * ct[17];
  proc_control_B.out1_tmp_mze = proc_control_B.out1_tmp_kh * ct[18];
  proc_control_B.out1_tmp_lv4 = proc_control_B.out1_tmp_jn * ct[17];
  proc_control_B.out1_tmp_o0f = proc_control_B.out1_tmp_jn * ct[18];
  out1[9] = (((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_kg3
    - ct[637]) + ct[640]) + ct[652]) + ct[658]) - ct[671]) - ct[675]) - ct[797])
    - ct[804]) - ct[812]) - ct[834]) - ct[842]) + ct[852]) + ct[864]) + ct[871])
    - ct[877]) + ct[919]) + ct[85]) + ct[87]) + ct[93]) + ct[95]) + ct[100]) -
    ct[126]) - ct[132]) - ct[1] * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_h2 * ct[621]) - proc_control_B.out1_tmp_j5 * ct[621])
    - proc_control_B.out1_tmp_nr * ct[621]) - proc_control_B.out1_tmp_kk * ct
    [541] * ct[631]) + proc_control_B.out1_tmp_o2c * ct[553] * ct[621]) -
                        proc_control_B.out1_tmp_on * ct[611]) +
                       proc_control_B.out1_tmp_dvd * ct[611]) -
                      proc_control_B.out1_tmp_h2 * ct[18] * ct[611]) +
                     proc_control_B.out1_tmp_j5 * ct[18] * ct[611]) +
                    proc_control_B.out1_tmp_nr * ct[17] * ct[611]) +
                   proc_control_B.out1_tmp_nr * ct[18] * ct[611]) +
                  proc_control_B.out1_tmp_kk * ct[18] * ct[541] * ct[621]) +
                 proc_control_B.out1_tmp_on * ct[18] * ct[25]) -
                proc_control_B.out1_tmp_dvd * ct[18] * ct[25]) +
               proc_control_B.out1_tmp_ez * ct[15] * ct[17] * ct[18] * ct[25]) *
              -proc_control_B.t1533 * proc_control_B.t1479 -
              (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_mc + ct[952]) + ct
    [970]) + ct[991]) + ct[29]) + ct[34]) + ct[44]) + ct[158]) + ct[169]) + ct
    [220]) + ct[231]) + ct[250]) + ct[255]) + ct[280]) + ct[291]) + ct[330]) +
    ct[350]) + ct[358]) + ct[360]) + ct[362]) + ct[386]) + ct[482]) + ct[483]) +
    ct[484]) + ct[489]) + ct[490]) + ct[491]) + ct[493]) + ct[494]) + ct[495]) +
    ct[497]) + ct[500]) + ct[501]) + ct[502]) + ct[504]) + ct[506]) + ct[545]) +
    ct[546]) + ct[550]) + ct[556]) + ct[569]) + ct[571]) + ct[579]) + ct[581]) +
    ct[704]) + ct[705]) + ct[706]) + ct[707]) + ct[708]) + ct[709]) + ct[713]) +
    ct[715]) + ct[717]) + ct[725]) + ct[757]) + ct[759]) + ct[763]) + ct[767]) +
    ct[769]) + ct[771]) + ct[775]) + ct[777]) + ct[779]) + ct[783]) + ct[787]) +
    ct[791]) + ct[971]) + ct[972]) + ct[975]) + ct[981]) + ct[172]) + ct[175]) +
    ct[179]) + ct[183]) + ct[185]) + ct[187]) + ct[189]) + ct[195]) + ct[508] *
    ct[559]) + ct[512] * ct[559]) - ct[518] * ct[559]) - ct[521] * ct[559]) +
    ct[8] * ct[582] * ct[631]) - ct[11] * ct[582] * ct[631]) +
    proc_control_B.out1_tmp_do * ct[575] * ct[631]) + proc_control_B.out1_tmp_pz
    * ct[575] * ct[631]) + proc_control_B.out1_tmp_nek * ct[575] * ct[631]) +
    proc_control_B.out1_tmp_j4 * ct[575] * ct[631]) +
    proc_control_B.out1_tmp_pik * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_ihe * ct[528] * ct[611]) +
                        proc_control_B.out1_tmp_ig * ct[559] * ct[611]) -
                       proc_control_B.out1_tmp_ged * ct[559] * ct[611]) +
                      proc_control_B.out1_tmp_kf * ct[541] * ct[611]) -
                     proc_control_B.out1_tmp_cr * ct[541] * ct[611]) +
                    proc_control_B.out1_tmp_efo * ct[559] * ct[611]) -
                   proc_control_B.out1_tmp_ha * ct[559] * ct[611]) -
                  proc_control_B.out1_tmp_ncw * ct[528] * ct[611]) +
                 proc_control_B.out1_tmp_bpl * ct[559] * ct[631]) +
                (((((((((((((((((((((((((((proc_control_B.out1_tmp_msx * ct[559]
    * ct[631] - proc_control_B.out1_tmp_mr * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_es * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_n2r * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_cg * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_mze * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_a5c * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_fpc * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_lv4 * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_o0f * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_ik * ct[559] * ct[611]) + proc_control_B.out1_tmp_c1
    * ct[559] * ct[611]) + proc_control_B.out1_tmp_m2 * ct[18]) -
    proc_control_B.out1_tmp_jx * ct[18]) - proc_control_B.out1_tmp_jm * ct[18])
    + proc_control_B.out1_tmp_kgj * ct[18]) + proc_control_B.out1_tmp_kp * ct[18])
    - proc_control_B.out1_tmp_ar * ct[18]) - proc_control_B.out1_tmp_kc * ct[18])
    + proc_control_B.out1_tmp_fo1 * ct[18]) - proc_control_B.out1_tmp_czb * ct
                        [18]) + proc_control_B.out1_tmp_ong * ct[18]) -
                      proc_control_B.out1_tmp_kv * ct[18]) +
                     proc_control_B.out1_tmp_p2d * ct[18]) +
                    proc_control_B.out1_tmp_f4 * ct[18]) +
                   proc_control_B.out1_tmp_dx * ct[18]) +
                  proc_control_B.out1_tmp_eb * ct[18]) -
                 proc_control_B.out1_tmp_lf * ct[18])) + (((((((((((-ct[1] * ct
    [5] * ct[14] * ct[16] * ct[17] * ct[611] + proc_control_B.out1_tmp_nrj * ct
    [17] * ct[611]) - proc_control_B.out1_tmp_c2 * ct[17] * ct[611]) +
    proc_control_B.out1_tmp_c4 * ct[17] * ct[611]) + proc_control_B.out1_tmp_ikw
    * ct[18] * ct[611]) - proc_control_B.out1_tmp_hu * ct[18] * ct[611]) +
    proc_control_B.out1_tmp_py * ct[18] * ct[611]) - proc_control_B.out1_tmp_bp *
    ct[18] * ct[611]) - proc_control_B.out1_tmp_ml * ct[18] * ct[611]) -
    proc_control_B.out1_tmp_pxa * ct[18] * ct[611]) - proc_control_B.out1_tmp_go
    * ct[17] * ct[611]) - proc_control_B.out1_tmp_ox * ct[17] * ct[611])) *
              proc_control_B.t1456) - ((((((((((((((((((ct[14] * ct[370] +
    proc_control_B.out1_tmp_ms) - ct[14] * ct[380]) + ct[14] * ct[382]) + ct[14]
    * ct[396]) + ct[14] * ct[403]) + ct[14] * ct[720]) +
    proc_control_B.out1_tmp_jo * ct[528] * ct[621]) - proc_control_B.out1_tmp_ja
    * ct[528] * ct[621]) - proc_control_B.out1_tmp_fk * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_mf * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_iya * ct[528] * ct[611]) + proc_control_B.t1499 *
    ct[528] * ct[611]) - proc_control_B.out1_tmp_ex * ct[15] * ct[17] * ct[611])
    + proc_control_B.out1_tmp_tmp_ea * ct[15] * ct[17] * ct[611]) +
    proc_control_B.out1_tmp_tmp_il * ct[16] * ct[17] * ct[611]) -
    proc_control_B.out1_tmp_tmp_f * ct[16] * ct[17] * ct[611]) -
    proc_control_B.out1_tmp_tmp_hv * ct[15] * ct[17] * ct[611]) -
              proc_control_B.out1_tmp_tmp_in * ct[16] * ct[17] * ct[611]) *
             proc_control_B.t1458) +
    ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ny - ct
    [636]) + ct[645]) + ct[654]) + ct[656]) + ct[662]) - ct[680]) - ct[686]) -
    ct[816]) - ct[819]) - ct[829]) - ct[841]) - ct[845]) + ct[859]) + ct[867]) +
    ct[873]) - ct[883]) + ct[925]) + ct[91]) + ct[104]) + ct[106]) + ct[108]) +
    ct[109]) - ct[129]) - ct[136]) - ct[3] * ct[535] * ct[631]) +
                     proc_control_B.out1_tmp_tmp_il * ct[621]) -
                    proc_control_B.out1_tmp_tmp_f * ct[621]) -
                   proc_control_B.out1_tmp_tmp_in * ct[621]) -
                  proc_control_B.out1_tmp_pi * ct[528] * ct[631]) +
                 proc_control_B.out1_tmp_h4 * ct[535] * ct[621]) -
                proc_control_B.out1_tmp_jy * ct[611]) +
               proc_control_B.out1_tmp_bh * ct[611]) -
              proc_control_B.out1_tmp_tmp_il * ct[18] * ct[611]) +
             proc_control_B.out1_tmp_tmp_f * ct[18] * ct[611]) +
            proc_control_B.out1_tmp_tmp_in * ct[17] * ct[611]) +
           proc_control_B.out1_tmp_tmp_in * ct[18] * ct[611]) +
          proc_control_B.out1_tmp_pi * ct[17] * ct[528] * ct[621]) +
         proc_control_B.out1_tmp_jy * ct[18] * ct[25]) -
        proc_control_B.out1_tmp_bh * ct[18] * ct[25]) +
       proc_control_B.out1_tmp_a0 * ct[14] * ct[17] * ct[18] * ct[25]) *
      proc_control_B.out1_tmp_d4 + (((((((((((((((((((((((((((((((((((((((ct[367]
    + ct[370]) + ct[396]) + ct[593]) + ct[603]) + ct[626]) + ct[630]) + ct[669])
    + ct[719]) + ct[720]) + ct[723]) + ct[809]) + ct[813]) + ct[917]) + ct[930])
    + ct[999]) + ct[1004]) + ct[1010]) + ct[30]) + ct[32]) + ct[191]) + ct[192])
    + ct[234]) + ct[237]) - proc_control_B.out1_tmp_nc * ct[611]) +
    proc_control_B.out1_tmp_j2 * ct[611]) - proc_control_B.out1_tmp_ddh * ct[18]
    * ct[611]) + proc_control_B.out1_tmp_cu * ct[18] * ct[611]) +
    proc_control_B.out1_tmp_j1k * ct[18] * ct[611]) -
    proc_control_B.out1_tmp_bny * ct[611]) + proc_control_B.out1_tmp_nw * ct[17]
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_gkm * ct[559] * ct[621]) -
              proc_control_B.out1_tmp_ks * ct[18] * ct[541] * ct[621]) -
             proc_control_B.out1_tmp_nli * ct[559] * ct[621]) +
            proc_control_B.out1_tmp_ld * ct[18] * ct[25]) -
           proc_control_B.out1_tmp_o0o * ct[18] * ct[25]) +
          proc_control_B.out1_tmp_nc * ct[18] * ct[25]) -
         proc_control_B.out1_tmp_j2 * ct[18] * ct[25]) -
        proc_control_B.out1_tmp_a2 * ct[18] * ct[25]) +
       proc_control_B.out1_tmp_bny * ct[18] * ct[25]) * proc_control_B.t1457) +
     ((((((((((((((((((proc_control_B.out1_tmp_g2 - ct[15] * ct[367]) + ct[15] *
                      ct[369]) - ct[15] * ct[377]) + ct[15] * ct[378]) + ct[15] *
                   ct[390]) + ct[15] * ct[402]) - proc_control_B.out1_tmp_hc *
                 ct[541] * ct[621]) + proc_control_B.out1_tmp_cz * ct[541] * ct
                [621]) - proc_control_B.out1_tmp_cfs * ct[541] * ct[621]) +
              proc_control_B.out1_tmp_hv * ct[541] * ct[611]) -
             proc_control_B.out1_tmp_gg * ct[541] * ct[611]) +
            proc_control_B.out1_tmp_p5 * ct[541] * ct[611]) +
           proc_control_B.out1_tmp_ddh * ct[15] * ct[18] * ct[611]) -
          proc_control_B.out1_tmp_cu * ct[15] * ct[18] * ct[611]) +
         proc_control_B.out1_tmp_h2 * ct[16] * ct[18] * ct[611]) -
        proc_control_B.out1_tmp_j5 * ct[16] * ct[18] * ct[611]) -
       proc_control_B.out1_tmp_j1k * ct[15] * ct[18] * ct[611]) -
      proc_control_B.out1_tmp_nr * ct[16] * ct[18] * ct[611]) *
     proc_control_B.t1527);
  proc_control_B.out1_tmp_h2 = proc_control_B.out1_tmp_tmp_pa * ct[17];
  proc_control_B.out1_tmp_j5 = proc_control_B.out1_tmp_tmp_db * ct[17];
  proc_control_B.out1_tmp_nr = ct[2] * ct[18];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_cfs * ct[17];
  proc_control_B.out1_tmp_dvd = proc_control_B.out1_tmp_hc * ct[17];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_cz * ct[17];
  proc_control_B.out1_tmp_bh = proc_control_B.out1_tmp_jfi * ct[15];
  proc_control_B.out1_tmp_nc = proc_control_B.out1_tmp_lh * ct[16];
  proc_control_B.out1_tmp_py = ct[2] * ct[17];
  proc_control_B.out1_tmp_bp = proc_control_B.out1_tmp_dvd * ct[18];
  proc_control_B.out1_tmp_pxa = proc_control_B.out1_tmp_jy * ct[18];
  proc_control_B.out1_tmp_j2 = proc_control_B.out1_tmp_bh * ct[17];
  proc_control_B.out1_tmp_bny = proc_control_B.out1_tmp_nc * ct[18];
  proc_control_B.out1_tmp_m2 = proc_control_B.out1_tmp_tmp_hw * ct[18];
  proc_control_B.out1_tmp_jx = proc_control_B.out1_tmp_tmp_nw * ct[18];
  proc_control_B.out1_tmp_jm = proc_control_B.out1_tmp_tmp_b * ct[18];
  proc_control_B.out1_tmp_kgj = proc_control_B.out1_tmp_ex * ct[17];
  proc_control_B.out1_tmp_kp = proc_control_B.out1_tmp_tmp_ea * ct[17];
  proc_control_B.out1_tmp_ar = ct[1] * ct[17];
  proc_control_B.out1_tmp_kc = ct[1] * ct[19];
  proc_control_B.out1_tmp_fo1 = proc_control_B.out1_tmp_k0 * ct[17];
  proc_control_B.out1_tmp_czb = proc_control_B.out1_tmp_bweh * ct[17];
  proc_control_B.out1_tmp_ong = proc_control_B.out1_tmp_jr * ct[17];
  proc_control_B.out1_tmp_kv = proc_control_B.out1_tmp_bweh * ct[18];
  proc_control_B.out1_tmp_p2d = proc_control_B.out1_tmp_jr * ct[18];
  proc_control_B.out1_tmp_f4 = proc_control_B.out1_tmp_k0 * ct[18];
  proc_control_B.out1_tmp_dx = proc_control_B.out1_tmp_h5 * ct[16];
  proc_control_B.out1_tmp_eb = proc_control_B.out1_tmp_os * ct[16];
  proc_control_B.out1_tmp_lf = proc_control_B.out1_tmp_czb * ct[18];
  proc_control_B.out1_tmp_lh = proc_control_B.out1_tmp_ong * ct[18];
  proc_control_B.t1479 = proc_control_B.out1_tmp_dx * ct[17];
  proc_control_B.out1_tmp_j4 = proc_control_B.out1_tmp_eb * ct[18];
  proc_control_B.out1_tmp_kk = ct[8] * ct[18];
  proc_control_B.out1_tmp_mc = ct[4] * ct[19];
  proc_control_B.out1_tmp_nrj = ct[10] * ct[19];
  proc_control_B.out1_tmp_c2 = ct[11] * ct[18];
  proc_control_B.out1_tmp_c4 = proc_control_B.out1_tmp_cg * ct[18];
  proc_control_B.out1_tmp_go = proc_control_B.out1_tmp_a5c * ct[18];
  proc_control_B.out1_tmp_ox = proc_control_B.out1_tmp_c1 * ct[18];
  proc_control_B.out1_tmp_g2 = ct[8] * ct[17];
  proc_control_B.out1_tmp_ikw = ct[10] * ct[17];
  proc_control_B.out1_tmp_hu = ct[11] * ct[17];
  proc_control_B.out1_tmp_ml = proc_control_B.out1_tmp_ig * ct[18];
  proc_control_B.out1_tmp_ms = proc_control_B.out1_tmp_ged * ct[18];
  proc_control_B.out1_tmp_pi = proc_control_B.out1_tmp_cch * ct[18];
  proc_control_B.t1527 = proc_control_B.out1_tmp_dt * ct[18];
  proc_control_B.t1533 = ((((((((((((ct[412] - ct[417]) - ct[525]) - ct[526]) -
    ct[679]) - ct[685]) + ct[694]) + ct[695]) - ct[879]) + ct[889]) + ct[891]) +
    ct[933]) - ct[937]) + ct[140];
  proc_control_B.out1_tmp_tmp_il = proc_control_B.out1_tmp_g2 * ct[18];
  proc_control_B.out1_tmp_tmp_f = proc_control_B.out1_tmp_hu * ct[18];
  proc_control_B.out1_tmp_tmp_in = -ct[4] * ct[17];
  proc_control_B.out1_tmp_tmp_hw = ct[4] * ct[17];
  proc_control_B.out1_tmp_tmp_nw = proc_control_B.out1_tmp_tmp_hw * ct[19];
  proc_control_B.out1_tmp_tmp_b = proc_control_B.out1_tmp_ikw * ct[19];
  out1_tmp = ((((((((((((ct[411] - ct[416]) - ct[527]) - ct[529]) - ct[678]) -
                     ct[688]) + ct[691]) + ct[696]) - ct[880]) + ct[890]) + ct
                [893]) + ct[934]) - ct[938]) + ct[139];
  out1[10] =
    ((((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_ny - ct
    [633]) + ct[645]) + ct[654]) + ct[656]) + ct[662]) - ct[680]) - ct[686]) -
    ct[803]) - ct[819]) - ct[829]) - ct[841]) - ct[845]) + ct[859]) + ct[867]) +
    ct[873]) - ct[883]) + ct[924]) + ct[91]) + ct[102]) + ct[106]) + ct[108]) +
    ct[109]) - ct[129]) - ct[136]) - ct[1] * ct[535] * ct[631]) +
                     proc_control_B.out1_tmp_tmp_pa * ct[621]) -
                    proc_control_B.out1_tmp_tmp_db * ct[621]) -
                   proc_control_B.out1_tmp_tmp_j * ct[621]) -
                  proc_control_B.out1_tmp_ksm * ct[528] * ct[631]) +
                 proc_control_B.out1_tmp_ar * ct[535] * ct[621]) -
                proc_control_B.out1_tmp_h2 * ct[611]) +
               proc_control_B.out1_tmp_j5 * ct[611]) -
              proc_control_B.out1_tmp_tmp_pa * ct[18] * ct[611]) +
             proc_control_B.out1_tmp_tmp_db * ct[18] * ct[611]) +
            proc_control_B.out1_tmp_tmp_j * ct[17] * ct[611]) +
           proc_control_B.out1_tmp_tmp_j * ct[18] * ct[611]) +
          proc_control_B.out1_tmp_ksm * ct[17] * ct[528] * ct[621]) +
         proc_control_B.out1_tmp_h2 * ct[18] * ct[25]) -
        proc_control_B.out1_tmp_j5 * ct[18] * ct[25]) +
       proc_control_B.out1_tmp_ez * ct[14] * ct[17] * ct[18] * ct[25]) *
      proc_control_B.t1456 + (((((((((((((((((((((((((((((out1_tmp -
    proc_control_B.out1_tmp_hc * ct[621]) + proc_control_B.out1_tmp_cz * ct[621])
    - proc_control_B.out1_tmp_cfs * ct[621]) - ct[2] * ct[528] * ct[631]) - ct[2]
    * ct[559] * ct[631]) + proc_control_B.out1_tmp_dvd * ct[611]) -
    proc_control_B.out1_tmp_jy * ct[611]) + proc_control_B.out1_tmp_hv * ct[611])
    - proc_control_B.out1_tmp_gg * ct[611]) + proc_control_B.out1_tmp_hc * ct[19]
    * ct[611]) - proc_control_B.out1_tmp_cz * ct[19] * ct[611]) -
    proc_control_B.out1_tmp_nc * ct[631]) - proc_control_B.out1_tmp_bh * ct[631])
    + proc_control_B.out1_tmp_on * ct[611]) + proc_control_B.out1_tmp_p5 * ct
    [611]) + proc_control_B.out1_tmp_cfs * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_py * ct[528] * ct[621]) + proc_control_B.out1_tmp_nr
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_nr * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_j5b * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_on * ct[18] * ct[19]) - proc_control_B.out1_tmp_bp *
              ct[25]) + proc_control_B.out1_tmp_pxa * ct[25]) -
            proc_control_B.out1_tmp_dvd * ct[19] * ct[25]) +
           proc_control_B.out1_tmp_jy * ct[19] * ct[25]) -
          proc_control_B.out1_tmp_hv * ct[19] * ct[25]) +
         proc_control_B.out1_tmp_gg * ct[19] * ct[25]) +
        ((((((((((((proc_control_B.out1_tmp_px1 * ct[17] * ct[18] * ct[25] -
                    proc_control_B.out1_tmp_on * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_p5 * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_j2 * ct[621]) +
                 proc_control_B.out1_tmp_bny * ct[621]) +
                proc_control_B.out1_tmp_bh * ct[18] * ct[621]) +
               proc_control_B.out1_tmp_nc * ct[19] * ct[621]) -
              proc_control_B.out1_tmp_py * ct[18] * ct[528] * ct[611]) -
             proc_control_B.out1_tmp_nr * ct[19] * ct[559] * ct[611]) +
            proc_control_B.out1_tmp_bp * ct[19]) - proc_control_B.out1_tmp_pxa *
           ct[19]) - proc_control_B.out1_tmp_j2 * ct[18] * ct[611]) -
         proc_control_B.out1_tmp_bny * ct[19] * ct[611])) * proc_control_B.t1457
       - (((((((((((((((((((((((((((((((((((((((ct[370] + ct[377]) - ct[378]) +
    ct[396]) - ct[402]) + ct[603]) - ct[618]) + ct[619]) + ct[638]) + ct[666]) +
    ct[669]) + ct[720]) + ct[806]) + ct[824]) + ct[929]) + ct[932]) + ct[1004])
    + ct[1010]) + ct[30]) + ct[33]) + ct[190]) + ct[193]) + ct[235]) + ct[239])
    - proc_control_B.out1_tmp_m2 * ct[611]) + proc_control_B.out1_tmp_jx * ct
                        [611]) - proc_control_B.out1_tmp_aaa * ct[19] * ct[611])
                      + proc_control_B.out1_tmp_fj * ct[19] * ct[611]) +
                     proc_control_B.out1_tmp_jm * ct[611]) -
                    proc_control_B.out1_tmp_c30 * ct[19] * ct[611]) -
                   proc_control_B.out1_tmp_nli * ct[528] * ct[621]) -
                  proc_control_B.out1_tmp_jfi * ct[18] * ct[541] * ct[621]) +
                 proc_control_B.out1_tmp_mt * ct[528] * ct[621]) +
                proc_control_B.out1_tmp_h5 * ct[19] * ct[559] * ct[621]) +
               proc_control_B.out1_tmp_aaa * ct[18] * ct[19] * ct[25]) -
              proc_control_B.out1_tmp_fj * ct[18] * ct[19] * ct[25]) +
             proc_control_B.out1_tmp_m2 * ct[19] * ct[25]) -
            proc_control_B.out1_tmp_jx * ct[19] * ct[25]) +
           proc_control_B.out1_tmp_c30 * ct[18] * ct[19] * ct[25]) -
          proc_control_B.out1_tmp_jm * ct[19] * ct[25]) *
       proc_control_B.out1_tmp_kvt)) -
     ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b4 - ct[632])
    + ct[646]) + ct[655]) + ct[663]) + ct[668]) - ct[682]) - ct[689]) - ct[810])
    - ct[826]) - ct[828]) - ct[840]) - ct[843]) + ct[862]) + ct[865]) + ct[875])
    - ct[887]) + ct[927]) + ct[96]) + ct[115]) + ct[118]) + ct[119]) + ct[123])
                       - ct[133]) - ct[135]) - ct[2] * ct[535] * ct[631]) -
                    proc_control_B.out1_tmp_ex * ct[621]) +
                   proc_control_B.out1_tmp_tmp_ea * ct[621]) -
                  proc_control_B.out1_tmp_tmp_hv * ct[621]) -
                 proc_control_B.out1_tmp_pz * ct[528] * ct[631]) +
                proc_control_B.out1_tmp_py * ct[535] * ct[621]) +
               proc_control_B.out1_tmp_kgj * ct[611]) -
              proc_control_B.out1_tmp_kp * ct[611]) + proc_control_B.out1_tmp_ex
             * ct[19] * ct[611]) - proc_control_B.out1_tmp_tmp_ea * ct[19] * ct
            [611]) + proc_control_B.out1_tmp_tmp_hv * ct[17] * ct[611]) +
          proc_control_B.out1_tmp_tmp_hv * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_pz * ct[17] * ct[528] * ct[621]) -
        proc_control_B.out1_tmp_kgj * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_kp * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_px1 * ct[14] * ct[17] * ct[19] * ct[25]) *
     proc_control_B.t1458) + ((((((((((((((((((((((((((((((((((((((((((ct[512] +
    ct[515]) - ct[521]) - ct[523]) - ct[872]) - ct[874]) + ct[882]) + ct[886]) -
    ct[35]) - ct[36]) - ct[547] * ct[641]) - proc_control_B.out1_tmp_oc * ct[621])
    + proc_control_B.out1_tmp_foh * ct[621]) + proc_control_B.out1_tmp_k1c * ct
    [621]) + proc_control_B.out1_tmp_ej * ct[621]) - proc_control_B.out1_tmp_iwr
    * ct[621]) + ct[4] * ct[528] * ct[631]) + ct[8] * ct[528] * ct[631]) - ct[10]
    * ct[528] * ct[631]) - ct[11] * ct[528] * ct[631]) + ct[17] * ct[547] * ct
    [631]) + ct[18] * ct[528] * ct[541] * ct[631]) + ct[19] * ct[528] * ct[559] *
    ct[631]) + proc_control_B.out1_tmp_ig * ct[611]) -
    proc_control_B.out1_tmp_ged * ct[611]) + proc_control_B.out1_tmp_c3d * ct
    [611]) - proc_control_B.out1_tmp_eo * ct[611]) + proc_control_B.out1_tmp_fbf
    * ct[611]) - proc_control_B.out1_tmp_k4t * ct[611]) +
    proc_control_B.out1_tmp_cch * ct[631]) + proc_control_B.out1_tmp_dt * ct[631])
    - proc_control_B.out1_tmp_cg * ct[611]) - proc_control_B.out1_tmp_a5c * ct
    [611]) - proc_control_B.out1_tmp_mz * ct[611]) - proc_control_B.out1_tmp_jce
    * ct[611]) - proc_control_B.out1_tmp_cfl * ct[611]) -
    proc_control_B.out1_tmp_d41 * ct[611]) + proc_control_B.out1_tmp_c1 * ct[611])
    + proc_control_B.out1_tmp_pd * ct[611]) + proc_control_B.out1_tmp_ay * ct
    [611]) + (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_in * ct
    [528] * ct[621] - proc_control_B.out1_tmp_g2 * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_kk * ct[528] * ct[621]) - proc_control_B.out1_tmp_kk
    * ct[559] * ct[621]) - proc_control_B.out1_tmp_mc * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_mc * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_ikw * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_hu * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_nrj * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_c2 * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_nrj * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_c2 * ct[559] * ct[621]) - proc_control_B.out1_tmp_c4
    * ct[19]) - proc_control_B.out1_tmp_go * ct[19]) +
    proc_control_B.out1_tmp_ox * ct[19]) - proc_control_B.out1_tmp_ml * ct[25])
    + proc_control_B.out1_tmp_ms * ct[25]) - proc_control_B.out1_tmp_ig * ct[19]
    * ct[25]) + proc_control_B.out1_tmp_ged * ct[19] * ct[25]) -
                        proc_control_B.out1_tmp_c3d * ct[19] * ct[25]) +
                       proc_control_B.out1_tmp_eo * ct[19] * ct[25]) +
                      proc_control_B.out1_tmp_c4 * ct[25]) +
                     proc_control_B.out1_tmp_go * ct[25]) +
                    proc_control_B.out1_tmp_cg * ct[19] * ct[25]) +
                   proc_control_B.out1_tmp_a5c * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_mz * ct[19] * ct[25]) +
                 proc_control_B.out1_tmp_jce * ct[19] * ct[25]) -
                proc_control_B.out1_tmp_ox * ct[25]) -
               proc_control_B.out1_tmp_pi * ct[621]) - proc_control_B.t1527 *
              ct[621])) + (((((((((((((((-ct[10] * ct[11] * ct[17] * ct[19] *
    ct[25] - proc_control_B.out1_tmp_cch * ct[19] * ct[621]) -
    proc_control_B.out1_tmp_dt * ct[19] * ct[621]) - proc_control_B.out1_tmp_pd *
    ct[19] * ct[25]) + proc_control_B.out1_tmp_tmp_il * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_tmp_nw * ct[528] * ct[611]) + ct[4] * ct[18] * ct[19]
    * ct[541] * ct[611]) + proc_control_B.out1_tmp_kk * ct[19] * ct[559] * ct
    [611]) - proc_control_B.out1_tmp_tmp_b * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_tmp_f * ct[528] * ct[611]) - ct[10] * ct[18] * ct[19]
    * ct[541] * ct[611]) - proc_control_B.out1_tmp_c2 * ct[19] * ct[559] * ct
    [611]) + proc_control_B.out1_tmp_ml * ct[19]) - proc_control_B.out1_tmp_ms *
    ct[19]) + proc_control_B.out1_tmp_pi * ct[19] * ct[611]) +
    proc_control_B.t1527 * ct[19] * ct[611])) * proc_control_B.out1_tmp_d4 +
    ((((((((((((((((((((((((((((proc_control_B.out1_tmp_bweh * ct[621] +
    proc_control_B.t1533) - proc_control_B.out1_tmp_jr * ct[621]) -
    proc_control_B.out1_tmp_k0 * ct[621]) - ct[1] * ct[528] * ct[631]) - ct[1] *
    ct[541] * ct[631]) - proc_control_B.out1_tmp_czb * ct[611]) +
    proc_control_B.out1_tmp_ong * ct[611]) - proc_control_B.out1_tmp_kv * ct[611])
    + proc_control_B.out1_tmp_p2d * ct[611]) - proc_control_B.out1_tmp_l1g * ct
    [611]) + proc_control_B.out1_tmp_g5 * ct[611]) - proc_control_B.out1_tmp_eb *
                     ct[631]) - proc_control_B.out1_tmp_dx * ct[631]) +
                   proc_control_B.out1_tmp_fo1 * ct[611]) +
                  proc_control_B.out1_tmp_f4 * ct[611]) +
                 proc_control_B.out1_tmp_g23 * ct[611]) +
                proc_control_B.out1_tmp_ar * ct[528] * ct[621]) +
               proc_control_B.out1_tmp_o2c * ct[541] * ct[621]) +
              proc_control_B.out1_tmp_kc * ct[528] * ct[621]) +
             proc_control_B.out1_tmp_kc * ct[541] * ct[621]) +
            proc_control_B.out1_tmp_fo1 * ct[18] * ct[19]) +
           proc_control_B.out1_tmp_lf * ct[25]) - proc_control_B.out1_tmp_lh *
          ct[25]) + proc_control_B.out1_tmp_czb * ct[19] * ct[25]) -
        proc_control_B.out1_tmp_ong * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_kv * ct[19] * ct[25]) -
      proc_control_B.out1_tmp_p2d * ct[19] * ct[25]) +
     ((((((((((((proc_control_B.out1_tmp_ez * ct[17] * ct[18] * ct[25] -
                 proc_control_B.out1_tmp_fo1 * ct[19] * ct[25]) -
                proc_control_B.out1_tmp_f4 * ct[19] * ct[25]) +
               proc_control_B.t1479 * ct[621]) + proc_control_B.out1_tmp_j4 *
              ct[621]) + proc_control_B.out1_tmp_eb * ct[19] * ct[621]) +
            proc_control_B.out1_tmp_dx * ct[19] * ct[621]) -
           proc_control_B.out1_tmp_ar * ct[19] * ct[528] * ct[611]) -
          proc_control_B.out1_tmp_o2c * ct[19] * ct[541] * ct[611]) -
         proc_control_B.out1_tmp_lf * ct[19]) + proc_control_B.out1_tmp_lh * ct
        [19]) - proc_control_B.t1479 * ct[19] * ct[611]) -
      proc_control_B.out1_tmp_j4 * ct[19] * ct[611])) *
    proc_control_B.out1_tmp_n4p);
  proc_control_B.out1_tmp_oc = ct[5] * ct[17];
  proc_control_B.out1_tmp_foh = proc_control_B.out1_tmp_jo * ct[18];
  proc_control_B.out1_tmp_k1c = proc_control_B.out1_tmp_ja * ct[18];
  proc_control_B.out1_tmp_ej = proc_control_B.out1_tmp_fk * ct[18];
  proc_control_B.out1_tmp_iwr = proc_control_B.out1_tmp_do * ct[15];
  proc_control_B.out1_tmp_hc = proc_control_B.out1_tmp_o14 * ct[16];
  proc_control_B.out1_tmp_cz = proc_control_B.out1_tmp_mf * ct[18];
  proc_control_B.out1_tmp_h2 = proc_control_B.out1_tmp_iya * ct[18];
  proc_control_B.out1_tmp_j5 = proc_control_B.t1499 * ct[18];
  proc_control_B.out1_tmp_nr = proc_control_B.out1_tmp_iwr * ct[17];
  proc_control_B.out1_tmp_o14 = proc_control_B.out1_tmp_hc * ct[17];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_tmp_k5 * ct[17];
  proc_control_B.out1_tmp_dvd = proc_control_B.out1_tmp_tmp_pd * ct[17];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_tmp_kx * ct[17];
  proc_control_B.out1_tmp_bh = ct[3] * ct[19];
  proc_control_B.out1_tmp_nc = proc_control_B.out1_tmp_hgs * ct[17];
  proc_control_B.out1_tmp_py = proc_control_B.t1533_tmp_e * ct[17];
  proc_control_B.out1_tmp_bp = proc_control_B.out1_tmp_ne * ct[17];
  proc_control_B.out1_tmp_pxa = proc_control_B.t1533_tmp_e * ct[18];
  proc_control_B.out1_tmp_j2 = proc_control_B.out1_tmp_ne * ct[18];
  proc_control_B.out1_tmp_bny = proc_control_B.out1_tmp_hgs * ct[18];
  proc_control_B.out1_tmp_ny = proc_control_B.out1_tmp_jfi * ct[16];
  proc_control_B.out1_tmp_bweh = proc_control_B.out1_tmp_fz * ct[16];
  proc_control_B.out1_tmp_jr = ct[3] * ct[18];
  proc_control_B.out1_tmp_k0 = proc_control_B.out1_tmp_py * ct[18];
  proc_control_B.out1_tmp_cfs = proc_control_B.out1_tmp_bp * ct[18];
  proc_control_B.out1_tmp_m2 = proc_control_B.out1_tmp_ny * ct[17];
  proc_control_B.out1_tmp_jx = proc_control_B.out1_tmp_bweh * ct[18];
  proc_control_B.out1_tmp_jm = proc_control_B.out1_tmp_jrp * ct[17];
  proc_control_B.out1_tmp_kgj = proc_control_B.out1_tmp_dg * ct[17];
  proc_control_B.out1_tmp_kp = ct[5] * ct[18];
  proc_control_B.out1_tmp_ar = proc_control_B.out1_tmp_tmp_oa * ct[18];
  proc_control_B.out1_tmp_kc = proc_control_B.out1_tmp_tmp_j4 * ct[18];
  proc_control_B.out1_tmp_fo1 = ct[0] * ct[19];
  proc_control_B.out1_tmp_czb = ct[9] * ct[19];
  proc_control_B.out1_tmp_ong = proc_control_B.out1_tmp_eu * ct[18];
  proc_control_B.out1_tmp_kv = proc_control_B.out1_tmp_lvf * ct[18];
  proc_control_B.out1_tmp_p2d = ct[0] * ct[18];
  proc_control_B.out1_tmp_f4 = ct[9] * ct[18];
  proc_control_B.out1_tmp_dx = proc_control_B.out1_tmp_lj * ct[18];
  proc_control_B.out1_tmp_eb = proc_control_B.out1_tmp_cy * ct[18];
  proc_control_B.out1_tmp_lf = proc_control_B.out1_tmp_awu * ct[18];
  proc_control_B.out1_tmp_ez = proc_control_B.out1_tmp_oqc * ct[17];
  proc_control_B.out1_tmp_hv = proc_control_B.out1_tmp_io * ct[17];
  proc_control_B.out1_tmp_gg = ((((((((((((ct[410] - ct[415]) - ct[530]) - ct
    [531]) - ct[684]) - ct[687]) + ct[690]) + ct[693]) - ct[881]) + ct[892]) +
    ct[894]) + ct[935]) - ct[936]) + ct[138];
  proc_control_B.out1_tmp_p5 = ct[0] * ct[17];
  proc_control_B.out1_tmp_nli = proc_control_B.out1_tmp_p2d * ct[19];
  proc_control_B.out1_tmp_o2c = ct[9] * ct[17];
  proc_control_B.out1_tmp_lh = proc_control_B.out1_tmp_f4 * ct[19];
  out1[11] = ((((((((((((((((((((((((((((((((((((((((((ct[367] - ct[380]) + ct
    [382]) + ct[403]) + ct[593]) + ct[620]) - ct[622]) + ct[626]) + ct[630]) -
    ct[667]) + ct[673]) + ct[719]) + ct[723]) - ct[806]) + ct[822]) - ct[824]) +
    ct[836]) + ct[920]) + ct[931]) + ct[999]) + ct[1011]) + ct[32]) + ct[236]) +
    ct[238]) + proc_control_B.out1_tmp_on * ct[611]) -
    proc_control_B.out1_tmp_dvd * ct[611]) - proc_control_B.out1_tmp_ddh * ct[19]
    * ct[611]) + proc_control_B.out1_tmp_cu * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_j1k * ct[19] * ct[611]) - proc_control_B.out1_tmp_jy
    * ct[611]) + proc_control_B.out1_tmp_os * ct[17] * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_gkm * ct[541] * ct[621]) -
                        proc_control_B.out1_tmp_hqs * ct[541] * ct[621]) -
                       proc_control_B.out1_tmp_fz * ct[19] * ct[559] * ct[621])
                      + proc_control_B.out1_tmp_ld * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_o0o * ct[19] * ct[25]) -
                    proc_control_B.out1_tmp_on * ct[19] * ct[25]) +
                   proc_control_B.out1_tmp_dvd * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_a2 * ct[19] * ct[25]) +
                 proc_control_B.out1_tmp_jy * ct[19] * ct[25]) *
                proc_control_B.out1_tmp_n3 +
                ((((((((((((((((((((((((((((proc_control_B.out1_tmp_jo * ct[621]
    + proc_control_B.out1_tmp_gg) - proc_control_B.out1_tmp_ja * ct[621]) -
    proc_control_B.out1_tmp_fk * ct[621]) - ct[5] * ct[541] * ct[631]) - ct[5] *
    ct[559] * ct[631]) - proc_control_B.out1_tmp_mf * ct[611]) +
    proc_control_B.out1_tmp_iya * ct[611]) - proc_control_B.out1_tmp_foh * ct
    [611]) + proc_control_B.out1_tmp_k1c * ct[611]) - proc_control_B.out1_tmp_jo
    * ct[19] * ct[611]) + proc_control_B.out1_tmp_ja * ct[19] * ct[611]) +
    proc_control_B.t1499 * ct[611]) - proc_control_B.out1_tmp_iwr * ct[631]) -
    proc_control_B.out1_tmp_hc * ct[631]) + proc_control_B.out1_tmp_ej * ct[611])
    + proc_control_B.out1_tmp_fk * ct[19] * ct[611]) +
    proc_control_B.out1_tmp_oc * ct[541] * ct[621]) + proc_control_B.out1_tmp_oc
    * ct[559] * ct[621]) + proc_control_B.out1_tmp_kp * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_m0 * ct[559] * ct[621]) + proc_control_B.out1_tmp_cz
                        * ct[25]) - proc_control_B.out1_tmp_h2 * ct[25]) +
                      proc_control_B.out1_tmp_mf * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_iya * ct[19] * ct[25]) +
                    proc_control_B.out1_tmp_foh * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_k1c * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_j5 * ct[25]) +
                 ((((((((((((proc_control_B.out1_tmp_nk * ct[17] * ct[19] * ct
    [25] - proc_control_B.out1_tmp_ej * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_nr * ct[621]) + proc_control_B.out1_tmp_o14 * ct[621])
    + proc_control_B.out1_tmp_iwr * ct[18] * ct[621]) +
    proc_control_B.out1_tmp_hc * ct[19] * ct[621]) - proc_control_B.out1_tmp_oc *
                        ct[18] * ct[541] * ct[611]) - proc_control_B.out1_tmp_oc
                       * ct[19] * ct[559] * ct[611]) -
                      proc_control_B.out1_tmp_cz * ct[19]) +
                     proc_control_B.out1_tmp_h2 * ct[19]) +
                    proc_control_B.out1_tmp_j5 * ct[19]) -
                   proc_control_B.out1_tmp_nr * ct[18] * ct[611]) -
                  proc_control_B.out1_tmp_o14 * ct[19] * ct[611])) *
                proc_control_B.t1457) +
               ((((((((((((((((((((((((((((proc_control_B.t1533_tmp_e * ct[621]
    + proc_control_B.t1533) - proc_control_B.out1_tmp_ne * ct[621]) -
    proc_control_B.out1_tmp_hgs * ct[621]) - ct[3] * ct[528] * ct[631]) - ct[3] *
    ct[541] * ct[631]) - proc_control_B.out1_tmp_py * ct[611]) +
    proc_control_B.out1_tmp_bp * ct[611]) - proc_control_B.out1_tmp_pxa * ct[611])
    + proc_control_B.out1_tmp_j2 * ct[611]) - proc_control_B.out1_tmp_ov * ct
    [611]) + proc_control_B.out1_tmp_da * ct[611]) - proc_control_B.out1_tmp_ny *
    ct[631]) - proc_control_B.out1_tmp_bweh * ct[631]) +
    proc_control_B.out1_tmp_nc * ct[611]) + proc_control_B.out1_tmp_bny * ct[611])
    + proc_control_B.out1_tmp_hko * ct[611]) + proc_control_B.out1_tmp_h4 * ct
    [528] * ct[621]) + proc_control_B.out1_tmp_jr * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_bh * ct[528] * ct[621]) + proc_control_B.out1_tmp_bh
                        * ct[541] * ct[621]) + proc_control_B.out1_tmp_nc * ct
                       [18] * ct[19]) + proc_control_B.out1_tmp_k0 * ct[25]) -
                     proc_control_B.out1_tmp_cfs * ct[25]) +
                    proc_control_B.out1_tmp_py * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_bp * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_pxa * ct[19] * ct[25]) -
                 proc_control_B.out1_tmp_j2 * ct[19] * ct[25]) +
                ((((((((((((proc_control_B.out1_tmp_a0 * ct[17] * ct[18] * ct[25]
    - proc_control_B.out1_tmp_nc * ct[19] * ct[25]) -
    proc_control_B.out1_tmp_bny * ct[19] * ct[25]) + proc_control_B.out1_tmp_m2 *
    ct[621]) + proc_control_B.out1_tmp_jx * ct[621]) +
                        proc_control_B.out1_tmp_ny * ct[19] * ct[621]) +
                       proc_control_B.out1_tmp_bweh * ct[19] * ct[621]) -
                      proc_control_B.out1_tmp_h4 * ct[19] * ct[528] * ct[611]) -
                     proc_control_B.out1_tmp_jr * ct[19] * ct[541] * ct[611]) -
                    proc_control_B.out1_tmp_k0 * ct[19]) +
                   proc_control_B.out1_tmp_cfs * ct[19]) -
                  proc_control_B.out1_tmp_m2 * ct[19] * ct[611]) -
                 proc_control_B.out1_tmp_jx * ct[19] * ct[611])) *
               proc_control_B.out1_tmp_d4) -
              (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_kg3
    - ct[635]) + ct[640]) + ct[652]) + ct[658]) - ct[671]) - ct[675]) - ct[797])
    - ct[812]) - ct[817]) - ct[834]) - ct[842]) + ct[852]) + ct[864]) + ct[871])
    - ct[877]) + ct[918]) + ct[87]) + ct[89]) + ct[93]) + ct[95]) + ct[100]) -
    ct[126]) - ct[132]) - ct[3] * ct[553] * ct[631]) +
    proc_control_B.out1_tmp_jrp * ct[621]) - proc_control_B.out1_tmp_dg * ct[621])
    - proc_control_B.out1_tmp_pe * ct[621]) - proc_control_B.out1_tmp_dhd * ct
    [541] * ct[631]) + proc_control_B.out1_tmp_jr * ct[553] * ct[621]) -
                        proc_control_B.out1_tmp_jm * ct[611]) +
                       proc_control_B.out1_tmp_kgj * ct[611]) -
                      proc_control_B.out1_tmp_jrp * ct[18] * ct[611]) +
                     proc_control_B.out1_tmp_dg * ct[18] * ct[611]) +
                    proc_control_B.out1_tmp_pe * ct[17] * ct[611]) +
                   proc_control_B.out1_tmp_pe * ct[18] * ct[611]) +
                  proc_control_B.out1_tmp_dhd * ct[18] * ct[541] * ct[621]) +
                 proc_control_B.out1_tmp_jm * ct[18] * ct[25]) -
                proc_control_B.out1_tmp_kgj * ct[18] * ct[25]) +
               proc_control_B.out1_tmp_a0 * ct[15] * ct[17] * ct[18] * ct[25]) *
              proc_control_B.t1456) +
    ((((((((((((((((((((((((((((((((((((((((((ct[508] + ct[515]) - ct[518]) -
    ct[523]) - ct[870]) - ct[874]) + ct[876]) + ct[886]) - ct[35]) - ct[37]) -
    ct[566] * ct[641]) - proc_control_B.out1_tmp_d0 * ct[621]) +
    proc_control_B.out1_tmp_gnz * ct[621]) + proc_control_B.out1_tmp_dqn * ct
    [621]) + proc_control_B.out1_tmp_iz * ct[621]) - proc_control_B.out1_tmp_an *
    ct[621]) + ct[0] * ct[541] * ct[631]) + ct[8] * ct[541] * ct[631]) - ct[9] *
    ct[541] * ct[631]) - ct[11] * ct[541] * ct[631]) + ct[18] * ct[566] * ct[631])
    + proc_control_B.t1533_tmp * ct[541] * ct[631]) + ct[19] * ct[541] * ct[559]
    * ct[631]) + proc_control_B.out1_tmp_lj * ct[611]) -
                       proc_control_B.out1_tmp_cy * ct[611]) +
                      proc_control_B.out1_tmp_efo * ct[611]) -
                     proc_control_B.out1_tmp_ha * ct[611]) +
                    proc_control_B.out1_tmp_mi * ct[611]) -
                   proc_control_B.out1_tmp_h50 * ct[611]) -
                  proc_control_B.out1_tmp_awu * ct[611]) +
                 proc_control_B.out1_tmp_oqc * ct[631]) +
                proc_control_B.out1_tmp_io * ct[631]) -
               proc_control_B.out1_tmp_es * ct[611]) -
              proc_control_B.out1_tmp_azw * ct[611]) -
             proc_control_B.out1_tmp_eu * ct[611]) - proc_control_B.out1_tmp_fpc
            * ct[611]) - proc_control_B.out1_tmp_dz2 * ct[611]) +
          proc_control_B.out1_tmp_lvf * ct[611]) + proc_control_B.out1_tmp_ik *
         ct[611]) + proc_control_B.out1_tmp_if * ct[611]) +
       (((((((((((((((((((((((((((((-ct[8] * ct[17] * ct[541] * ct[621] -
    proc_control_B.out1_tmp_g2 * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_p2d * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_kk * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_fo1 * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_fo1 * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_f4 * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_czb * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_czb * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_hu * ct[541] * ct[621]) + proc_control_B.out1_tmp_hu
    * ct[559] * ct[621]) + proc_control_B.out1_tmp_c2 * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_ong * ct[19]) + proc_control_B.out1_tmp_kv * ct[19])
                       - proc_control_B.out1_tmp_dx * ct[25]) +
                      proc_control_B.out1_tmp_eb * ct[25]) -
                     proc_control_B.out1_tmp_lj * ct[19] * ct[25]) +
                    proc_control_B.out1_tmp_cy * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_efo * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_ha * ct[19] * ct[25]) +
                 proc_control_B.out1_tmp_lf * ct[25]) +
                proc_control_B.out1_tmp_awu * ct[19] * ct[25]) +
               proc_control_B.out1_tmp_es * ct[19] * ct[25]) +
              proc_control_B.out1_tmp_ong * ct[25]) + proc_control_B.out1_tmp_eu
             * ct[19] * ct[25]) + proc_control_B.out1_tmp_fpc * ct[19] * ct[25])
           - proc_control_B.out1_tmp_kv * ct[25]) - proc_control_B.out1_tmp_lvf *
          ct[19] * ct[25]) - proc_control_B.out1_tmp_ez * ct[621]) -
        proc_control_B.out1_tmp_hv * ct[621])) + (((((((((((((((-ct[9] * ct[11] *
    ct[18] * ct[19] * ct[25] - proc_control_B.out1_tmp_oqc * ct[19] * ct[621]) -
    proc_control_B.out1_tmp_io * ct[19] * ct[621]) +
    proc_control_B.out1_tmp_tmp_il * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_p5 * ct[19] * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_g2 * ct[19] * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_nli * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_o2c * ct[19] * ct[528] * ct[611]) -
              proc_control_B.out1_tmp_lh * ct[541] * ct[611]) -
             proc_control_B.out1_tmp_tmp_f * ct[541] * ct[611]) -
            proc_control_B.out1_tmp_hu * ct[19] * ct[559] * ct[611]) +
           proc_control_B.out1_tmp_dx * ct[19]) - proc_control_B.out1_tmp_eb *
          ct[19]) - proc_control_B.out1_tmp_lf * ct[19]) +
        proc_control_B.out1_tmp_ez * ct[19] * ct[611]) +
       proc_control_B.out1_tmp_hv * ct[19] * ct[611])) *
     proc_control_B.out1_tmp_n4p +
     ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_byy - ct
    [634]) + ct[642]) + ct[649]) + ct[661]) + ct[665]) - ct[677]) - ct[683]) -
    ct[800]) - ct[810]) - ct[828]) - ct[833]) - ct[846]) + ct[855]) + ct[868]) +
    ct[875]) - ct[887]) + ct[928]) + ct[110]) + ct[114]) + ct[115]) + ct[119]) +
    ct[121]) - ct[131]) - ct[137]) - ct[5] * ct[553] * ct[631]) +
                    proc_control_B.out1_tmp_tmp_oa * ct[621]) -
                   proc_control_B.out1_tmp_tmp_j4 * ct[621]) -
                  proc_control_B.out1_tmp_tmp_pc * ct[621]) -
                 proc_control_B.out1_tmp_do * ct[541] * ct[631]) +
                proc_control_B.out1_tmp_kp * ct[553] * ct[621]) -
               proc_control_B.out1_tmp_ar * ct[611]) +
              proc_control_B.out1_tmp_kc * ct[611]) -
             proc_control_B.out1_tmp_tmp_oa * ct[19] * ct[611]) +
            proc_control_B.out1_tmp_tmp_j4 * ct[19] * ct[611]) +
           proc_control_B.out1_tmp_tmp_pc * ct[18] * ct[611]) +
          proc_control_B.out1_tmp_tmp_pc * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_do * ct[18] * ct[541] * ct[621]) +
        proc_control_B.out1_tmp_ar * ct[19] * ct[25]) -
       proc_control_B.out1_tmp_kc * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_nk * ct[15] * ct[18] * ct[19] * ct[25]) *
     proc_control_B.out1_tmp_kvt);
  proc_control_B.t1533_tmp_e = ct[7] * ct[17];
  proc_control_B.out1_tmp_ne = proc_control_B.out1_tmp_dm * ct[18];
  proc_control_B.out1_tmp_hgs = proc_control_B.out1_tmp_hf * ct[18];
  proc_control_B.out1_tmp_oc = proc_control_B.out1_tmp_bfm * ct[18];
  proc_control_B.out1_tmp_foh = proc_control_B.out1_tmp_gq5 * ct[16];
  proc_control_B.out1_tmp_k1c = proc_control_B.out1_tmp_nek * ct[15];
  proc_control_B.out1_tmp_ej = proc_control_B.out1_tmp_nkd * ct[18];
  proc_control_B.out1_tmp_iwr = proc_control_B.out1_tmp_cfu * ct[18];
  proc_control_B.out1_tmp_jo = proc_control_B.out1_tmp_i4 * ct[18];
  proc_control_B.out1_tmp_ja = proc_control_B.out1_tmp_k1c * ct[17];
  proc_control_B.out1_tmp_d0 = proc_control_B.out1_tmp_foh * ct[17];
  proc_control_B.out1_tmp_gnz = ct[7] * ct[19];
  proc_control_B.out1_tmp_hc = proc_control_B.out1_tmp_dm * ct[16];
  proc_control_B.out1_tmp_cz = proc_control_B.out1_tmp_hf * ct[16];
  proc_control_B.out1_tmp_fk = proc_control_B.out1_tmp_bfm * ct[16];
  proc_control_B.out1_tmp_h2 = proc_control_B.out1_tmp_hc * ct[18];
  proc_control_B.out1_tmp_j5 = proc_control_B.out1_tmp_cz * ct[18];
  proc_control_B.out1_tmp_nr = proc_control_B.out1_tmp_dh * ct[16];
  proc_control_B.out1_tmp_o14 = proc_control_B.out1_tmp_ai * ct[16];
  proc_control_B.out1_tmp_on = proc_control_B.out1_tmp_pu * ct[16];
  proc_control_B.out1_tmp_dvd = proc_control_B.out1_tmp_nr * ct[17];
  proc_control_B.out1_tmp_jy = proc_control_B.out1_tmp_o14 * ct[17];
  proc_control_B.out1_tmp_bh = proc_control_B.out1_tmp_n2r * ct[18];
  proc_control_B.out1_tmp_nc = proc_control_B.out1_tmp_lv4 * ct[18];
  proc_control_B.out1_tmp_py = proc_control_B.out1_tmp_pik * ct[18];
  proc_control_B.out1_tmp_bp = proc_control_B.out1_tmp_ihe * ct[18];
  proc_control_B.out1_tmp_pxa = proc_control_B.out1_tmp_ncw * ct[18];
  proc_control_B.out1_tmp_nek = proc_control_B.out1_tmp_bpl * ct[17];
  proc_control_B.out1_tmp_ac *= ct[17];
  proc_control_B.out1_tmp_kw *= ct[17];
  proc_control_B.out1_tmp_ct *= ct[17];
  proc_control_B.out1_tmp_j2 = ct[6] * ct[18];
  proc_control_B.out1_tmp_bny = ct[6] * ct[19];
  proc_control_B.out1_tmp_ny = proc_control_B.out1_tmp_pu * ct[17];
  proc_control_B.out1_tmp_bweh = proc_control_B.out1_tmp_dh * ct[17];
  proc_control_B.out1_tmp_jr = proc_control_B.out1_tmp_ai * ct[17];
  proc_control_B.out1_tmp_k0 = proc_control_B.out1_tmp_h5 * ct[15];
  proc_control_B.out1_tmp_cfs = proc_control_B.out1_tmp_nt * ct[16];
  proc_control_B.out1_tmp_dqn = proc_control_B.out1_tmp_bweh * ct[18];
  proc_control_B.out1_tmp_iz = proc_control_B.out1_tmp_jr * ct[18];
  proc_control_B.out1_tmp_an = proc_control_B.out1_tmp_k0 * ct[17];
  proc_control_B.out1_tmp_m2 = proc_control_B.out1_tmp_cfs * ct[18];
  out1[12] = (((((((((((((((((((((((((((((((((((((((((((ct[508] + ct[512]) - ct
    [518]) - ct[521]) - ct[870]) - ct[872]) + ct[876]) + ct[882]) - ct[36]) -
    ct[37]) - ct[582] * ct[641]) - proc_control_B.out1_tmp_o3 * ct[621]) +
    proc_control_B.out1_tmp_ky * ct[621]) + proc_control_B.out1_tmp_c5m * ct[621])
    + proc_control_B.out1_tmp_kh * ct[621]) - proc_control_B.out1_tmp_jn * ct
    [621]) + ct[0] * ct[559] * ct[631]) + ct[4] * ct[559] * ct[631]) - ct[9] *
    ct[559] * ct[631]) - ct[10] * ct[559] * ct[631]) + ct[19] * ct[582] * ct[631])
    + proc_control_B.t1533_tmp * ct[559] * ct[631]) + proc_control_B.t1533_tmp_h
    * ct[559] * ct[631]) + proc_control_B.out1_tmp_pik * ct[611]) -
    proc_control_B.out1_tmp_ihe * ct[611]) + proc_control_B.out1_tmp_kf * ct[611])
    - proc_control_B.out1_tmp_cr * ct[611]) + proc_control_B.out1_tmp_oz * ct
    [611]) - proc_control_B.out1_tmp_aj * ct[611]) - proc_control_B.out1_tmp_ncw
    * ct[611]) + proc_control_B.out1_tmp_bpl * ct[631]) +
    proc_control_B.out1_tmp_msx * ct[631]) - proc_control_B.out1_tmp_mr * ct[611])
                        - proc_control_B.out1_tmp_n2r * ct[611]) -
                       proc_control_B.out1_tmp_el * ct[611]) -
                      proc_control_B.out1_tmp_mze * ct[611]) -
                     proc_control_B.out1_tmp_bwn * ct[611]) +
                    proc_control_B.out1_tmp_lv4 * ct[611]) +
                   proc_control_B.out1_tmp_o0f * ct[611]) +
                  proc_control_B.out1_tmp_kz * ct[611]) +
                 (((((((((((((((((((((((((((((proc_control_B.out1_tmp_tmp_in *
    ct[541] * ct[621] - proc_control_B.out1_tmp_tmp_hw * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_p2d * ct[528] * ct[621]) -
    proc_control_B.out1_tmp_p2d * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_fo1 * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_mc * ct[559] * ct[621]) + proc_control_B.out1_tmp_f4
    * ct[528] * ct[621]) + proc_control_B.out1_tmp_f4 * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_ikw * ct[541] * ct[621]) +
    proc_control_B.out1_tmp_ikw * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_czb * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_nrj * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_bh * ct[19]) + proc_control_B.out1_tmp_nc * ct[19])
    - proc_control_B.out1_tmp_py * ct[25]) + proc_control_B.out1_tmp_bp * ct[25])
    - proc_control_B.out1_tmp_pik * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_ihe * ct[19] * ct[25]) - proc_control_B.out1_tmp_kf *
    ct[19] * ct[25]) + proc_control_B.out1_tmp_cr * ct[19] * ct[25]) +
    proc_control_B.out1_tmp_pxa * ct[25]) + proc_control_B.out1_tmp_ncw * ct[19]
    * ct[25]) + proc_control_B.out1_tmp_bh * ct[25]) +
                        proc_control_B.out1_tmp_mr * ct[19] * ct[25]) +
                       proc_control_B.out1_tmp_n2r * ct[19] * ct[25]) +
                      proc_control_B.out1_tmp_mze * ct[19] * ct[25]) -
                     proc_control_B.out1_tmp_nc * ct[25]) -
                    proc_control_B.out1_tmp_lv4 * ct[19] * ct[25]) -
                   proc_control_B.out1_tmp_o0f * ct[19] * ct[25]) -
                  proc_control_B.out1_tmp_nek * ct[621])) + (((((((((((((((-ct[3]
    * ct[14] * ct[15] * ct[17] * ct[621] - proc_control_B.out1_tmp_bpl * ct[18] *
    ct[621]) - proc_control_B.out1_tmp_msx * ct[18] * ct[621]) +
    proc_control_B.out1_tmp_p5 * ct[18] * ct[528] * ct[611]) +
    proc_control_B.out1_tmp_tmp_hw * ct[18] * ct[541] * ct[611]) +
    proc_control_B.out1_tmp_tmp_nw * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_nli * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_o2c * ct[18] * ct[528] * ct[611]) -
    proc_control_B.out1_tmp_ikw * ct[18] * ct[541] * ct[611]) -
    proc_control_B.out1_tmp_lh * ct[559] * ct[611]) -
    proc_control_B.out1_tmp_tmp_b * ct[559] * ct[611]) +
    proc_control_B.out1_tmp_py * ct[19]) - proc_control_B.out1_tmp_bp * ct[19])
    - proc_control_B.out1_tmp_pxa * ct[19]) + proc_control_B.out1_tmp_nek * ct
    [18] * ct[611]) + proc_control_B.out1_tmp_msx * ct[17] * ct[18] * ct[611])) *
               proc_control_B.t1457 + (((((((((((((((((((((((((((((((((((((((ct
    [371] + ct[379]) + ct[397]) + ct[594]) + ct[608]) + ct[627]) + ct[630]) +
    ct[669]) + ct[721]) + ct[722]) + ct[724]) + ct[822]) + ct[836]) + ct[917]) +
    ct[930]) + ct[1000]) + ct[1006]) + ct[1010]) + ct[31]) + ct[32]) + ct[190])
    + ct[193]) + ct[234]) + ct[237]) - proc_control_B.out1_tmp_ac * ct[611]) +
    proc_control_B.out1_tmp_kw * ct[611]) - proc_control_B.out1_tmp_dq * ct[18] *
    ct[611]) + proc_control_B.out1_tmp_dj * ct[18] * ct[611]) +
    proc_control_B.out1_tmp_o0 * ct[18] * ct[611]) - proc_control_B.out1_tmp_ct *
    ct[611]) + proc_control_B.out1_tmp_ks * ct[17] * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_ixa * ct[559] * ct[621]) -
    proc_control_B.out1_tmp_nw * ct[18] * ct[541] * ct[621]) -
    proc_control_B.out1_tmp_p4a * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_nmf * ct[18] * ct[25]) - proc_control_B.out1_tmp_c0 *
    ct[18] * ct[25]) + proc_control_B.out1_tmp_ac * ct[18] * ct[25]) -
    proc_control_B.out1_tmp_kw * ct[18] * ct[25]) - proc_control_B.out1_tmp_et *
    ct[18] * ct[25]) + proc_control_B.out1_tmp_ct * ct[18] * ct[25]) *
               proc_control_B.t1456) + ((((((((((((((((((((((((((((out1_tmp -
    proc_control_B.out1_tmp_dh * ct[621]) + proc_control_B.out1_tmp_ai * ct[621])
    - proc_control_B.out1_tmp_pu * ct[621]) - ct[6] * ct[528] * ct[631]) - ct[6]
    * ct[559] * ct[631]) + proc_control_B.out1_tmp_bweh * ct[611]) -
    proc_control_B.out1_tmp_jr * ct[611]) + out1_tmp_0 * ct[611]) - out1_tmp_1 *
    ct[611]) + proc_control_B.out1_tmp_dh * ct[19] * ct[611]) -
    proc_control_B.out1_tmp_ai * ct[19] * ct[611]) - proc_control_B.out1_tmp_cfs
    * ct[631]) - proc_control_B.out1_tmp_k0 * ct[631]) +
    proc_control_B.out1_tmp_ny * ct[611]) + out1_tmp_2 * ct[611]) +
    proc_control_B.out1_tmp_pu * ct[19] * ct[611]) + out1_tmp_3 * ct[528] * ct
    [621]) + proc_control_B.out1_tmp_j2 * ct[528] * ct[621]) +
    proc_control_B.out1_tmp_j2 * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_bny * ct[559] * ct[621]) +
    proc_control_B.out1_tmp_ny * ct[18] * ct[19]) - proc_control_B.out1_tmp_dqn *
    ct[25]) + proc_control_B.out1_tmp_iz * ct[25]) -
    proc_control_B.out1_tmp_bweh * ct[19] * ct[25]) + proc_control_B.out1_tmp_jr
    * ct[19] * ct[25]) - out1_tmp_0 * ct[19] * ct[25]) + out1_tmp_1 * ct[19] *
    ct[25]) + ((((((((((((proc_control_B.out1_tmp_bil * ct[17] * ct[18] * ct[25]
    - proc_control_B.out1_tmp_ny * ct[19] * ct[25]) - out1_tmp_2 * ct[19] * ct
    [25]) + proc_control_B.out1_tmp_an * ct[621]) + proc_control_B.out1_tmp_m2 *
                       ct[621]) + proc_control_B.out1_tmp_k0 * ct[18] * ct[621])
                     + proc_control_B.out1_tmp_cfs * ct[19] * ct[621]) -
                    out1_tmp_3 * ct[18] * ct[528] * ct[611]) -
                   proc_control_B.out1_tmp_j2 * ct[19] * ct[559] * ct[611]) +
                  proc_control_B.out1_tmp_dqn * ct[19]) -
                 proc_control_B.out1_tmp_iz * ct[19]) -
                proc_control_B.out1_tmp_an * ct[18] * ct[611]) -
               proc_control_B.out1_tmp_m2 * ct[19] * ct[611])) *
              proc_control_B.out1_tmp_d4) +
    ((((((((((((((((((((((((((((((proc_control_B.out1_tmp_dm * ct[621] +
    proc_control_B.out1_tmp_gg) - proc_control_B.out1_tmp_hf * ct[621]) -
    proc_control_B.out1_tmp_bfm * ct[621]) - ct[7] * ct[541] * ct[631]) - ct[7] *
    ct[559] * ct[631]) - proc_control_B.out1_tmp_nkd * ct[611]) +
    proc_control_B.out1_tmp_cfu * ct[611]) - proc_control_B.out1_tmp_ne * ct[611])
    + proc_control_B.out1_tmp_hgs * ct[611]) - proc_control_B.out1_tmp_dm * ct
    [19] * ct[611]) + proc_control_B.out1_tmp_hf * ct[19] * ct[611]) +
                       proc_control_B.out1_tmp_i4 * ct[611]) -
                      proc_control_B.out1_tmp_foh * ct[631]) -
                     proc_control_B.out1_tmp_k1c * ct[631]) +
                    proc_control_B.out1_tmp_oc * ct[611]) +
                   proc_control_B.out1_tmp_bfm * ct[19] * ct[611]) +
                  proc_control_B.t1533_tmp_e * ct[541] * ct[621]) +
                 proc_control_B.t1533_tmp_e * ct[559] * ct[621]) +
                proc_control_B.out1_tmp_d4s * ct[541] * ct[621]) +
               proc_control_B.out1_tmp_gnz * ct[559] * ct[621]) +
              proc_control_B.out1_tmp_ej * ct[25]) - proc_control_B.out1_tmp_iwr
             * ct[25]) + proc_control_B.out1_tmp_nkd * ct[19] * ct[25]) -
           proc_control_B.out1_tmp_cfu * ct[19] * ct[25]) +
          proc_control_B.out1_tmp_ne * ct[19] * ct[25]) -
         proc_control_B.out1_tmp_hgs * ct[19] * ct[25]) -
        proc_control_B.out1_tmp_jo * ct[25]) +
       ((((((((((((proc_control_B.out1_tmp_b4j * ct[17] * ct[19] * ct[25] -
                   proc_control_B.out1_tmp_oc * ct[19] * ct[25]) +
                  proc_control_B.out1_tmp_d0 * ct[621]) +
                 proc_control_B.out1_tmp_ja * ct[621]) +
                proc_control_B.out1_tmp_k1c * ct[18] * ct[621]) +
               proc_control_B.out1_tmp_foh * ct[19] * ct[621]) -
              proc_control_B.t1533_tmp_e * ct[18] * ct[541] * ct[611]) -
             proc_control_B.t1533_tmp_e * ct[19] * ct[559] * ct[611]) -
            proc_control_B.out1_tmp_ej * ct[19]) + proc_control_B.out1_tmp_iwr *
           ct[19]) + proc_control_B.out1_tmp_jo * ct[19]) -
         proc_control_B.out1_tmp_ja * ct[18] * ct[611]) -
        proc_control_B.out1_tmp_d0 * ct[19] * ct[611])) *
      proc_control_B.out1_tmp_n4p -
      ((((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_at - ct
    [636]) + ct[639]) + ct[648]) + ct[653]) + ct[660]) - ct[672]) - ct[676]) -
    ct[798]) - ct[803]) - ct[816]) - ct[825]) - ct[841]) + ct[853]) + ct[861]) +
    ct[873]) - ct[883]) + ct[925]) + ct[101]) + ct[102]) + ct[104]) + ct[108]) +
    ct[117]) - ct[127]) - ct[134]) - ct[7] * ct[575] * ct[631]) +
                     proc_control_B.out1_tmp_hc * ct[621]) -
                    proc_control_B.out1_tmp_cz * ct[621]) -
                   proc_control_B.out1_tmp_fk * ct[621]) -
                  proc_control_B.out1_tmp_gq5 * ct[559] * ct[631]) +
                 proc_control_B.out1_tmp_gnz * ct[575] * ct[621]) -
                proc_control_B.out1_tmp_h2 * ct[611]) +
               proc_control_B.out1_tmp_j5 * ct[611]) -
              proc_control_B.out1_tmp_hc * ct[19] * ct[611]) +
             proc_control_B.out1_tmp_cz * ct[19] * ct[611]) +
            proc_control_B.out1_tmp_fk * ct[18] * ct[611]) +
           proc_control_B.out1_tmp_fk * ct[19] * ct[611]) +
          proc_control_B.out1_tmp_gq5 * ct[19] * ct[559] * ct[621]) +
         proc_control_B.out1_tmp_h2 * ct[19] * ct[25]) -
        proc_control_B.out1_tmp_j5 * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_b4j * ct[16] * ct[18] * ct[19] * ct[25]) *
      proc_control_B.out1_tmp_kvt) +
     (((((((((((((((((((((((((((((((((((((((proc_control_B.out1_tmp_b5 - ct[637])
    + ct[644]) + ct[647]) + ct[657]) - ct[664]) - ct[674]) - ct[799]) - ct[804])
    - ct[817]) - ct[818]) - ct[834]) + ct[854]) + ct[858]) + ct[871]) - ct[877])
    + ct[919]) + ct[85]) + ct[89]) + ct[90]) + ct[93]) + ct[113]) - ct[128]) -
                      ct[130]) - ct[6] * ct[575] * ct[631]) -
                    proc_control_B.out1_tmp_nr * ct[621]) +
                   proc_control_B.out1_tmp_o14 * ct[621]) -
                  proc_control_B.out1_tmp_on * ct[621]) -
                 proc_control_B.out1_tmp_nt * ct[559] * ct[631]) +
                proc_control_B.out1_tmp_bny * ct[575] * ct[621]) +
               proc_control_B.out1_tmp_dvd * ct[611]) -
              proc_control_B.out1_tmp_jy * ct[611]) + proc_control_B.out1_tmp_nr
             * ct[19] * ct[611]) - proc_control_B.out1_tmp_o14 * ct[19] * ct[611])
           + proc_control_B.out1_tmp_on * ct[17] * ct[611]) +
          proc_control_B.out1_tmp_on * ct[19] * ct[611]) +
         proc_control_B.out1_tmp_nt * ct[19] * ct[559] * ct[621]) -
        proc_control_B.out1_tmp_dvd * ct[19] * ct[25]) +
       proc_control_B.out1_tmp_jy * ct[19] * ct[25]) +
      proc_control_B.out1_tmp_bil * ct[16] * ct[17] * ct[19] * ct[25]) *
     proc_control_B.t1458);
}

void proc_control::proc_control_ft_2_p(const real_T ct[804], real_T out1[13])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.t1162 = ct[16] * ct[17] * ct[18] * ct[319] * ct[447];
  proc_control_B.t1163 = ct[15] * ct[17] * ct[19] * ct[341] * ct[447];
  proc_control_B.t1164_d = ct[15] * ct[16] * ct[20] * ct[362] * ct[447];
  proc_control_B.t1459 = (ct[599] + ct[605]) - 1.0;
  proc_control_B.t1483 = ct[122] + ct[275];
  proc_control_B.t1484 = ct[121] + ct[286];
  proc_control_B.t1485 = ct[123] + ct[297];
  proc_control_B.t1488_d = ((ct[41] + ct[665]) + ct[128]) + ct[562];
  proc_control_B.t1489_e = ((ct[101] + ct[765]) + ct[134]) + ct[566];
  proc_control_B.t1490_c = ((ct[30] + ct[119]) + ct[141]) + ct[575];
  proc_control_B.t517 = ct[17] * ct[193];
  proc_control_B.t552 = ct[17] * ct[198];
  proc_control_B.t575 = ct[28] * ct[113];
  std::memcpy(&proc_control_B.ct_i[0], &ct[0], 11U * sizeof(real_T));
  proc_control_B.ct_i[11] = ct[11];
  std::memcpy(&proc_control_B.ct_i[12], &ct[13], sizeof(real_T) << 4U);
  proc_control_B.ct_i[28] = ct[29];
  proc_control_B.ct_i[29] = ct[31];
  proc_control_B.ct_i[30] = ct[32];
  proc_control_B.ct_i[31] = ct[33];
  proc_control_B.ct_i[32] = -(ct[15] * ct[196]);
  proc_control_B.ct_i[33] = -proc_control_B.t552;
  proc_control_B.ct_i[34] = ct[34];
  proc_control_B.ct_i[35] = ct[35];
  proc_control_B.ct_i[36] = ct[36];
  proc_control_B.ct_i[37] = ct[37];
  proc_control_B.ct_i[38] = ct[475] + ct[631];
  proc_control_B.ct_i[39] = ct[18] * ct[567];
  proc_control_B.ct_i[40] = ct[18] * ct[573];
  proc_control_B.ct_i[41] = ct[18] * ct[580];
  proc_control_B.ct_i[42] = ct[18] * ct[582];
  proc_control_B.ct_i[43] = ct[19] * ct[569];
  proc_control_B.ct_i[44] = ct[38];
  proc_control_B.ct_i[45] = ct[19] * ct[573];
  proc_control_B.ct_i[46] = ct[19] * ct[577];
  proc_control_B.ct_i[47] = ct[19] * ct[580];
  proc_control_B.ct_i[48] = ct[20] * ct[567];
  proc_control_B.ct_i[49] = ct[20] * ct[569];
  proc_control_B.ct_i[50] = ct[20] * ct[577];
  proc_control_B.ct_i[51] = ct[20] * ct[582];
  proc_control_B.ct_i[52] = ct[191] * ct[319];
  proc_control_B.ct_i[53] = ct[17] * ct[606];
  proc_control_B.ct_i[54] = ct[17] * ct[607];
  proc_control_B.ct_i[55] = ct[1] * ct[670];
  proc_control_B.ct_i[56] = ct[39];
  proc_control_B.ct_i[57] = ct[16] * ct[613];
  proc_control_B.ct_i[58] = ct[17] * ct[609];
  proc_control_B.ct_i[59] = ct[2] * ct[671];
  proc_control_B.ct_i[60] = ct[17] * ct[619];
  proc_control_B.ct_i[61] = ct[17] * ct[620];
  proc_control_B.ct_i[62] = ct[3] * ct[670];
  proc_control_B.ct_i[63] = ct[192] * ct[341];
  proc_control_B.ct_i[64] = ct[16] * ct[628];
  proc_control_B.ct_i[65] = ct[17] * ct[626];
  proc_control_B.ct_i[66] = ct[5] * ct[672];
  proc_control_B.ct_i[67] = ct[16] * ct[635];
  proc_control_B.ct_i[68] = ct[17] * ct[634];
  proc_control_B.ct_i[69] = ct[6] * ct[671];
  proc_control_B.ct_i[70] = ct[16] * ct[639];
  proc_control_B.ct_i[71] = ct[17] * ct[637];
  proc_control_B.ct_i[72] = ct[7] * ct[672];
  proc_control_B.ct_i[73] = ct[193] * ct[362];
  proc_control_B.ct_i[74] = ct[40];
  proc_control_B.ct_i[75] = ct[196] * ct[319];
  proc_control_B.ct_i[76] = ct[18] * ct[598];
  proc_control_B.ct_i[77] = ct[197] * ct[341];
  proc_control_B.ct_i[78] = ct[18] * ct[601];
  proc_control_B.ct_i[79] = ct[19] * ct[600];
  proc_control_B.ct_i[80] = ct[198] * ct[362];
  proc_control_B.ct_i[81] = ct[20] * ct[598];
  proc_control_B.ct_i[82] = ct[19] * ct[601];
  proc_control_B.ct_i[83] = ct[20] * ct[600];
  proc_control_B.ct_i[84] = ct[19] * ct[602];
  proc_control_B.ct_i[85] = ct[42];
  proc_control_B.ct_i[86] = ct[1] * ct[680];
  proc_control_B.ct_i[87] = ct[43];
  proc_control_B.ct_i[88] = ct[2] * ct[681];
  proc_control_B.ct_i[89] = ct[44];
  proc_control_B.ct_i[90] = ct[45];
  proc_control_B.ct_i[91] = ct[46];
  proc_control_B.ct_i[92] = ct[3] * ct[680];
  proc_control_B.ct_i[93] = ct[47];
  proc_control_B.ct_i[94] = ct[6] * ct[681];
  proc_control_B.ct_i[95] = ct[48];
  proc_control_B.ct_i[96] = ct[49];
  proc_control_B.ct_i[97] = ct[18] * ct[649];
  proc_control_B.ct_i[98] = ct[18] * ct[650];
  proc_control_B.ct_i[99] = ct[20] * ct[602];
  proc_control_B.ct_i[100] = ct[50];
  proc_control_B.ct_i[101] = ct[51];
  proc_control_B.ct_i[102] = ct[52];
  proc_control_B.ct_i[103] = ct[1] * ct[682];
  proc_control_B.ct_i[104] = ct[53];
  proc_control_B.ct_i[105] = ct[3] * ct[682];
  proc_control_B.ct_i[106] = ct[54];
  proc_control_B.ct_i[107] = ct[5] * ct[683];
  proc_control_B.ct_i[108] = ct[55];
  proc_control_B.ct_i[109] = ct[56];
  proc_control_B.ct_i[110] = ct[57];
  proc_control_B.ct_i[111] = ct[7] * ct[683];
  proc_control_B.ct_i[112] = ct[19] * ct[649];
  proc_control_B.ct_i[113] = ct[58];
  proc_control_B.ct_i[114] = ct[59];
  proc_control_B.ct_i[115] = ct[60];
  proc_control_B.ct_i[116] = ct[2] * ct[684];
  proc_control_B.ct_i[117] = ct[61];
  proc_control_B.ct_i[118] = ct[62];
  proc_control_B.ct_i[119] = ct[63];
  proc_control_B.ct_i[120] = ct[5] * ct[685];
  proc_control_B.ct_i[121] = ct[64];
  proc_control_B.ct_i[122] = ct[6] * ct[684];
  proc_control_B.ct_i[123] = ct[65];
  proc_control_B.ct_i[124] = ct[7] * ct[685];
  proc_control_B.ct_i[125] = ct[20] * ct[650];
  std::memcpy(&proc_control_B.ct_i[126], &ct[66], 12U * sizeof(real_T));
  proc_control_B.ct_i[138] = proc_control_B.t1162;
  proc_control_B.ct_i[139] = proc_control_B.t1163;
  proc_control_B.ct_i[140] = proc_control_B.t1164_d;
  proc_control_B.ct_i[141] = ct[26] * ct[29] * ct[263];
  proc_control_B.ct_i[142] = ct[26] * ct[28] * ct[264];
  proc_control_B.ct_i[143] = ct[26] * ct[27] * ct[265];
  proc_control_B.ct_i[144] = ct[26] * ct[264] * ct[802];
  proc_control_B.ct_i[145] = -proc_control_B.t575;
  proc_control_B.ct_i[146] = ct[79];
  proc_control_B.ct_i[147] = ct[81];
  proc_control_B.ct_i[148] = ct[83];
  proc_control_B.ct_i[149] = ct[85];
  proc_control_B.ct_i[150] = ct[87];
  proc_control_B.ct_i[151] = ct[89];
  proc_control_B.ct_i[152] = ct[5] * proc_control_B.t1162;
  proc_control_B.ct_i[153] = ct[7] * proc_control_B.t1162;
  proc_control_B.ct_i[154] = ct[90];
  proc_control_B.ct_i[155] = ct[2] * proc_control_B.t1163;
  proc_control_B.ct_i[156] = ct[6] * proc_control_B.t1163;
  proc_control_B.ct_i[157] = ct[91];
  proc_control_B.ct_i[158] = ct[92];
  proc_control_B.ct_i[159] = ct[1] * proc_control_B.t1164_d;
  proc_control_B.ct_i[160] = ct[3] * proc_control_B.t1164_d;
  proc_control_B.ct_i[161] = ct[93];
  proc_control_B.ct_i[162] = ct[94];
  proc_control_B.ct_i[163] = ct[95];
  proc_control_B.ct_i[164] = ct[96];
  proc_control_B.ct_i[165] = ct[97];
  proc_control_B.ct_i[166] = ct[98];
  proc_control_B.ct_i[167] = ct[99];
  proc_control_B.ct_i[168] = ct[100];
  proc_control_B.ct_i[169] = ct[102];
  proc_control_B.ct_i[170] = ct[103];
  proc_control_B.ct_i[171] = ct[104];
  proc_control_B.ct_i[172] = -ct[567];
  proc_control_B.ct_i[173] = -(ct[4] * ct[296]);
  proc_control_B.ct_i[174] = ct[111];
  proc_control_B.ct_i[175] = -ct[569];
  proc_control_B.ct_i[176] = -(ct[0] * ct[300]);
  proc_control_B.ct_i[177] = -ct[573];
  proc_control_B.ct_i[178] = -(ct[8] * ct[296]);
  proc_control_B.ct_i[179] = -ct[577];
  proc_control_B.ct_i[180] = -(ct[0] * ct[303]);
  proc_control_B.ct_i[181] = -ct[580];
  proc_control_B.ct_i[182] = -(ct[8] * ct[300]);
  proc_control_B.ct_i[183] = -ct[582];
  proc_control_B.ct_i[184] = -(ct[4] * ct[303]);
  proc_control_B.ct_i[185] = -ct[598];
  proc_control_B.ct_i[186] = -(ct[10] * ct[306]);
  proc_control_B.ct_i[187] = -ct[600];
  proc_control_B.ct_i[188] = -ct[601];
  proc_control_B.ct_i[189] = -ct[602];
  proc_control_B.ct_i[190] = -ct[608];
  proc_control_B.ct_i[191] = -ct[621];
  proc_control_B.ct_i[192] = -ct[628];
  proc_control_B.ct_i[193] = -ct[639];
  proc_control_B.ct_i[194] = -ct[649];
  proc_control_B.ct_i[195] = -ct[650];
  proc_control_B.ct_i[196] = -ct[659];
  proc_control_B.ct_i[197] = -ct[662];
  proc_control_B.ct_i[198] = -ct[666];
  proc_control_B.ct_i[199] = -ct[689];
  proc_control_B.ct_i[200] = -ct[692];
  proc_control_B.ct_i[201] = -ct[693];
  proc_control_B.ct_i[202] = -ct[696];
  proc_control_B.ct_i[203] = -ct[698];
  proc_control_B.ct_i[204] = -ct[700];
  proc_control_B.ct_i[205] = -ct[702];
  proc_control_B.ct_i[206] = -ct[704];
  proc_control_B.ct_i[207] = -ct[706];
  proc_control_B.ct_i[208] = -ct[708];
  proc_control_B.ct_i[209] = -ct[710];
  proc_control_B.ct_i[210] = -ct[712];
  proc_control_B.ct_i[211] = -ct[713];
  proc_control_B.ct_i[212] = -ct[716];
  proc_control_B.ct_i[213] = -ct[717];
  proc_control_B.ct_i[214] = -ct[720];
  proc_control_B.ct_i[215] = -ct[721];
  proc_control_B.ct_i[216] = -ct[722];
  proc_control_B.ct_i[217] = -ct[723];
  proc_control_B.ct_i[218] = -ct[724];
  proc_control_B.ct_i[219] = -ct[725];
  proc_control_B.ct_i[220] = ct[118];
  proc_control_B.ct_i[221] = -ct[726];
  proc_control_B.ct_i[222] = -ct[727];
  proc_control_B.ct_i[223] = -ct[728];
  proc_control_B.ct_i[224] = -ct[729];
  proc_control_B.ct_i[225] = -ct[730];
  proc_control_B.ct_i[226] = -ct[731];
  proc_control_B.ct_i[227] = -ct[732];
  proc_control_B.ct_i[228] = -ct[733];
  proc_control_B.ct_i[229] = -ct[734];
  proc_control_B.ct_i[230] = -ct[735];
  proc_control_B.ct_i[231] = ct[120];
  proc_control_B.ct_i[232] = -ct[736];
  proc_control_B.ct_i[233] = -ct[737];
  proc_control_B.ct_i[234] = -ct[747];
  proc_control_B.ct_i[235] = -ct[750];
  proc_control_B.ct_i[236] = -ct[751];
  proc_control_B.ct_i[237] = -ct[756];
  proc_control_B.ct_i[238] = -ct[758];
  proc_control_B.ct_i[239] = -ct[759];
  proc_control_B.ct_i[240] = ct[0] * ct[35];
  proc_control_B.ct_i[241] = ct[1] * ct[319] * ct[341] * ct[447];
  proc_control_B.ct_i[242] = ct[0] * ct[36];
  proc_control_B.ct_i[243] = ct[2] * ct[319] * ct[362] * ct[447];
  proc_control_B.ct_i[244] = ct[3] * ct[319] * ct[341] * ct[447];
  proc_control_B.ct_i[245] = ct[4] * ct[35];
  proc_control_B.ct_i[246] = ct[4] * ct[37];
  proc_control_B.ct_i[247] = ct[5] * ct[341] * ct[362] * ct[447];
  proc_control_B.ct_i[248] = ct[6] * ct[319] * ct[362] * ct[447];
  proc_control_B.ct_i[249] = ct[7] * ct[341] * ct[362] * ct[447];
  proc_control_B.ct_i[250] = ct[124];
  proc_control_B.ct_i[251] = ct[8] * ct[36];
  proc_control_B.ct_i[252] = ct[8] * ct[37];
  proc_control_B.ct_i[253] = -ct[768];
  proc_control_B.ct_i[254] = -ct[770];
  proc_control_B.ct_i[255] = ct[125];
  proc_control_B.ct_i[256] = -ct[773];
  proc_control_B.ct_i[257] = -ct[775];
  proc_control_B.ct_i[258] = -ct[777];
  proc_control_B.ct_i[259] = -ct[779];
  proc_control_B.t1162 = ct[19] * ct[341];
  proc_control_B.ct_i[260] = proc_control_B.t1162 * ct[306];
  proc_control_B.t1163 = ct[18] * ct[319];
  proc_control_B.ct_i[261] = proc_control_B.t1163 * ct[310];
  proc_control_B.t1164_d = ct[20] * ct[362];
  proc_control_B.ct_i[262] = proc_control_B.t1164_d * ct[306];
  proc_control_B.ct_i[263] = proc_control_B.t1163 * ct[313];
  proc_control_B.ct_i[264] = proc_control_B.t1164_d * ct[310];
  proc_control_B.ct_i[265] = proc_control_B.t1162 * ct[313];
  proc_control_B.ct_i[266] = -(ct[18] * ct[568]);
  proc_control_B.ct_i[267] = -(ct[18] * ct[574]);
  proc_control_B.ct_i[268] = -(ct[18] * ct[581]);
  proc_control_B.ct_i[269] = -(ct[18] * ct[584]);
  proc_control_B.ct_i[270] = -(ct[19] * ct[571]);
  proc_control_B.ct_i[271] = -(ct[19] * ct[574]);
  proc_control_B.ct_i[272] = -(ct[19] * ct[578]);
  proc_control_B.ct_i[273] = -(ct[19] * ct[581]);
  proc_control_B.ct_i[274] = -(ct[20] * ct[568]);
  proc_control_B.ct_i[275] = -(ct[20] * ct[571]);
  proc_control_B.ct_i[276] = -(ct[20] * ct[578]);
  proc_control_B.ct_i[277] = -(ct[20] * ct[584]);
  proc_control_B.ct_i[278] = -(ct[18] * ct[586]);
  proc_control_B.ct_i[279] = -(ct[18] * ct[588]);
  proc_control_B.ct_i[280] = ct[126];
  proc_control_B.ct_i[281] = -(ct[19] * ct[587]);
  proc_control_B.ct_i[282] = -(ct[19] * ct[588]);
  proc_control_B.ct_i[283] = -(ct[19] * ct[589]);
  proc_control_B.ct_i[284] = -(ct[18] * ct[590]);
  proc_control_B.ct_i[285] = -(ct[18] * ct[592]);
  proc_control_B.ct_i[286] = -(ct[18] * ct[593]);
  proc_control_B.ct_i[287] = -(ct[20] * ct[586]);
  proc_control_B.ct_i[288] = -(ct[20] * ct[587]);
  proc_control_B.ct_i[289] = -(ct[20] * ct[589]);
  proc_control_B.ct_i[290] = -(ct[18] * ct[594]);
  proc_control_B.ct_i[291] = ct[127];
  proc_control_B.ct_i[292] = -(ct[19] * ct[591]);
  proc_control_B.ct_i[293] = -(ct[18] * ct[596]);
  proc_control_B.ct_i[294] = -(ct[18] * ct[597]);
  proc_control_B.ct_i[295] = -(ct[19] * ct[592]);
  proc_control_B.ct_i[296] = -(ct[20] * ct[590]);
  proc_control_B.ct_i[297] = -(ct[19] * ct[594]);
  proc_control_B.ct_i[298] = -(ct[20] * ct[591]);
  proc_control_B.ct_i[299] = -(ct[19] * ct[595]);
  proc_control_B.ct_i[300] = -(ct[19] * ct[596]);
  proc_control_B.ct_i[301] = -(ct[20] * ct[593]);
  proc_control_B.ct_i[302] = -(ct[20] * ct[595]);
  proc_control_B.ct_i[303] = -(ct[20] * ct[597]);
  proc_control_B.ct_i[304] = ct[129];
  proc_control_B.ct_i[305] = ct[130];
  proc_control_B.ct_i[306] = -(ct[26] * ct[263] * ct[803]);
  proc_control_B.ct_i[307] = -(ct[26] * ct[265] * ct[801]);
  proc_control_B.ct_i[308] = -ct[78];
  proc_control_B.ct_i[309] = -ct[80];
  proc_control_B.ct_i[310] = -ct[82];
  proc_control_B.ct_i[311] = -ct[84];
  proc_control_B.ct_i[312] = ct[131];
  proc_control_B.ct_i[313] = -ct[86];
  proc_control_B.ct_i[314] = -ct[88];
  proc_control_B.ct_i[315] = -ct[105];
  proc_control_B.ct_i[316] = -ct[106];
  proc_control_B.ct_i[317] = -ct[107];
  proc_control_B.ct_i[318] = -ct[108];
  proc_control_B.ct_i[319] = -ct[109];
  proc_control_B.ct_i[320] = -ct[110];
  proc_control_B.t1162 = ct[15] * ct[25] * ct[26];
  proc_control_B.ct_i[321] = proc_control_B.t1162 * ct[688];
  proc_control_B.ct_i[322] = ct[17] * ct[25] * ct[26] * ct[688];
  proc_control_B.ct_i[323] = proc_control_B.t1459;
  proc_control_B.ct_i[324] = -(ct[9] * ct[35]);
  proc_control_B.ct_i[325] = -(ct[9] * ct[36]);
  proc_control_B.ct_i[326] = -(ct[10] * ct[35]);
  proc_control_B.ct_i[327] = -(ct[10] * ct[37]);
  proc_control_B.ct_i[328] = -(ct[11] * ct[36]);
  proc_control_B.ct_i[329] = -(ct[11] * ct[37]);
  proc_control_B.ct_i[330] = ct[132];
  proc_control_B.ct_tmp_tmp_a = ct[12] * ct[25];
  proc_control_B.t1163 = proc_control_B.ct_tmp_tmp_a * ct[308];
  proc_control_B.ct_i[331] = proc_control_B.t1163 * ct[688];
  proc_control_B.t1164_d = ct[14] * ct[25];
  proc_control_B.ct_i[332] = proc_control_B.t1164_d * ct[308] * ct[688];
  proc_control_B.ct_i[333] = ct[133];
  proc_control_B.ct_i[334] = proc_control_B.t1164_d * ct[642] * ct[688];
  proc_control_B.ct_i[335] = ct[27] * proc_control_B.t1484;
  proc_control_B.ct_i[336] = ct[29] * proc_control_B.t1483;
  proc_control_B.ct_i[337] = proc_control_B.t1483 * ct[802];
  proc_control_B.ct_i[338] = ct[28] * proc_control_B.t1485;
  proc_control_B.ct_i[339] = proc_control_B.t1484 * ct[803];
  proc_control_B.ct_i[340] = proc_control_B.t1485 * ct[801];
  proc_control_B.ct_i[341] = proc_control_B.t1162 * proc_control_B.t1459;
  proc_control_B.ct_i[342] = ct[16] * ct[25] * ct[26] * proc_control_B.t1459;
  proc_control_B.t1162 = ct[25] * ct[180];
  proc_control_B.ct_i[343] = proc_control_B.t1162 * ct[266] * 2.0;
  proc_control_B.ct_i[344] = ct[28] * proc_control_B.t1488_d;
  proc_control_B.ct_i[345] = ct[29] * proc_control_B.t1488_d;
  proc_control_B.ct_i[346] = ct[27] * proc_control_B.t1489_e;
  proc_control_B.ct_i[347] = ct[29] * proc_control_B.t1489_e;
  proc_control_B.ct_i[348] = ct[27] * proc_control_B.t1490_c;
  proc_control_B.ct_i[349] = ct[28] * proc_control_B.t1490_c;
  proc_control_B.ct_i[350] = ct[135];
  proc_control_B.ct_i[351] = proc_control_B.t1163 * proc_control_B.t1459;
  proc_control_B.t1163 = ct[13] * ct[25];
  proc_control_B.ct_i[352] = proc_control_B.t1163 * ct[308] *
    proc_control_B.t1459;
  proc_control_B.ct_i[353] = proc_control_B.t1162 * ct[686] * 2.0;
  proc_control_B.ct_i[354] = proc_control_B.ct_tmp_tmp_a * ct[642] *
    proc_control_B.t1459;
  proc_control_B.ct_i[355] = proc_control_B.t1163 * ct[642] *
    proc_control_B.t1459;
  proc_control_B.ct_i[356] = proc_control_B.t1162 * proc_control_B.t1459;
  proc_control_B.ct_i[357] = ct[136];
  proc_control_B.ct_i[358] = ct[137];
  proc_control_B.ct_i[359] = ct[138];
  proc_control_B.ct_i[360] = ct[139];
  proc_control_B.ct_i[361] = ct[140];
  std::memcpy(&proc_control_B.ct_i[362], &ct[142], 37U * sizeof(real_T));
  proc_control_B.ct_i[399] = ct[179];
  std::memcpy(&proc_control_B.ct_i[400], &ct[181], 81U * sizeof(real_T));
  proc_control_B.ct_i[481] = ct[262];
  std::memcpy(&proc_control_B.ct_i[482], &ct[270], 38U * sizeof(real_T));
  proc_control_B.ct_i[520] = ct[308];
  proc_control_B.ct_i[521] = ct[310];
  proc_control_B.ct_i[522] = ct[311];
  proc_control_B.ct_i[523] = ct[313];
  proc_control_B.ct_i[524] = ct[314];
  proc_control_B.ct_i[525] = ct[316];
  proc_control_B.ct_i[526] = ct[317];
  proc_control_B.ct_i[527] = ct[318];
  proc_control_B.ct_i[528] = ct[319];
  proc_control_B.ct_i[529] = ct[320];
  proc_control_B.ct_i[530] = ct[321];
  proc_control_B.ct_i[531] = ct[322];
  proc_control_B.ct_i[532] = ct[324];
  proc_control_B.ct_i[533] = ct[325];
  proc_control_B.ct_i[534] = ct[328];
  proc_control_B.ct_i[535] = ct[330];
  proc_control_B.ct_i[536] = ct[331];
  proc_control_B.ct_i[537] = ct[332];
  proc_control_B.ct_i[538] = ct[335];
  proc_control_B.ct_i[539] = ct[337];
  proc_control_B.ct_i[540] = ct[338];
  proc_control_B.ct_i[541] = ct[341];
  proc_control_B.ct_i[542] = ct[342];
  proc_control_B.ct_i[543] = ct[343];
  proc_control_B.ct_i[544] = ct[346];
  proc_control_B.ct_i[545] = ct[347];
  proc_control_B.ct_i[546] = ct[348];
  proc_control_B.ct_i[547] = ct[349];
  proc_control_B.ct_i[548] = ct[350];
  proc_control_B.ct_i[549] = ct[351];
  std::memcpy(&proc_control_B.ct_i[550], &ct[353], 10U * sizeof(real_T));
  proc_control_B.ct_i[560] = ct[363];
  proc_control_B.ct_i[561] = ct[365];
  proc_control_B.ct_i[562] = ct[366];
  proc_control_B.ct_i[563] = ct[368];
  proc_control_B.ct_i[564] = ct[370];
  proc_control_B.ct_i[565] = ct[372];
  proc_control_B.ct_i[566] = ct[373];
  proc_control_B.ct_i[567] = ct[375];
  proc_control_B.ct_i[568] = ct[377];
  proc_control_B.ct_i[569] = ct[378];
  proc_control_B.ct_i[570] = ct[5] * ct[196];
  proc_control_B.ct_i[571] = ct[379];
  proc_control_B.ct_i[572] = ct[380];
  proc_control_B.ct_i[573] = ct[7] * ct[196];
  proc_control_B.ct_i[574] = ct[381];
  proc_control_B.ct_i[575] = ct[382];
  proc_control_B.ct_i[576] = ct[384];
  proc_control_B.ct_i[577] = ct[387];
  proc_control_B.ct_i[578] = ct[389];
  proc_control_B.ct_i[579] = ct[390];
  proc_control_B.ct_i[580] = ct[2] * ct[197];
  proc_control_B.ct_i[581] = ct[391];
  proc_control_B.ct_i[582] = ct[392];
  proc_control_B.ct_i[583] = ct[6] * ct[197];
  proc_control_B.ct_i[584] = ct[393];
  proc_control_B.ct_i[585] = ct[396];
  proc_control_B.ct_i[586] = ct[397];
  proc_control_B.ct_i[587] = ct[1] * ct[198];
  proc_control_B.ct_i[588] = ct[398];
  proc_control_B.ct_i[589] = ct[3] * ct[198];
  proc_control_B.ct_i[590] = ct[399];
  std::memcpy(&proc_control_B.ct_i[591], &ct[402], 9U * sizeof(real_T));
  proc_control_B.ct_i[600] = ct[411];
  std::memcpy(&proc_control_B.ct_i[601], &ct[415], 10U * sizeof(real_T));
  proc_control_B.ct_i[611] = ct[426];
  std::memcpy(&proc_control_B.ct_i[612], &ct[428], sizeof(real_T) << 4U);
  proc_control_B.ct_i[628] = ct[444];
  proc_control_B.ct_i[629] = ct[446];
  proc_control_B.ct_i[630] = ct[15] * ct[191];
  proc_control_B.ct_i[631] = ct[447];
  proc_control_B.ct_i[632] = ct[448];
  proc_control_B.ct_i[633] = ct[449];
  proc_control_B.ct_i[634] = ct[450];
  proc_control_B.ct_i[635] = ct[451];
  proc_control_B.ct_i[636] = ct[452];
  proc_control_B.ct_i[637] = ct[453];
  proc_control_B.ct_i[638] = proc_control_B.t517;
  proc_control_B.ct_i[639] = ct[454];
  proc_control_B.ct_i[640] = ct[455];
  proc_control_B.ct_i[641] = ct[456];
  proc_control_B.ct_i[642] = ct[457];
  std::memcpy(&proc_control_B.ct_i[643], &ct[459], 26U * sizeof(real_T));
  proc_control_B.ct_i[669] = ct[16] * ct[197];
  proc_control_B.ct_i[670] = ct[485];
  proc_control_B.ct_i[671] = ct[486];
  proc_control_B.ct_i[672] = ct[487];
  proc_control_B.ct_i[673] = proc_control_B.t552;
  std::memcpy(&proc_control_B.ct_i[674], &ct[488], 23U * sizeof(real_T));
  proc_control_B.ct_i[697] = ct[27] * ct[112];
  proc_control_B.ct_i[698] = proc_control_B.t575;
  proc_control_B.ct_i[699] = ct[29] * ct[114];
  proc_control_B.ct_i[700] = ct[115] * ct[801];
  proc_control_B.ct_i[701] = ct[116] * ct[802];
  proc_control_B.ct_i[702] = ct[117] * ct[803];
  std::memcpy(&proc_control_B.ct_i[703], &ct[511], 50U * sizeof(real_T));
  proc_control_B.ct_i[753] = ct[561];
  proc_control_B.ct_i[754] = ct[563];
  proc_control_B.ct_i[755] = ct[564];
  proc_control_B.ct_i[756] = ct[565];
  proc_control_B.ct_i[757] = ct[568];
  proc_control_B.ct_i[758] = ct[570];
  proc_control_B.ct_i[759] = ct[571];
  proc_control_B.ct_i[760] = ct[572];
  proc_control_B.ct_i[761] = ct[574];
  proc_control_B.ct_i[762] = ct[576];
  proc_control_B.ct_i[763] = ct[578];
  proc_control_B.ct_i[764] = ct[579];
  proc_control_B.ct_i[765] = ct[581];
  proc_control_B.ct_i[766] = ct[583];
  proc_control_B.ct_i[767] = ct[584];
  proc_control_B.ct_i[768] = ct[585];
  proc_control_B.ct_i[769] = ct[586];
  proc_control_B.ct_i[770] = ct[4] * ct[306];
  proc_control_B.ct_i[771] = ct[587];
  proc_control_B.ct_i[772] = ct[9] * ct[300];
  proc_control_B.ct_i[773] = ct[588];
  proc_control_B.ct_i[774] = ct[8] * ct[306];
  proc_control_B.ct_i[775] = ct[589];
  proc_control_B.ct_i[776] = ct[9] * ct[303];
  proc_control_B.ct_i[777] = ct[590];
  proc_control_B.ct_i[778] = ct[10] * ct[296];
  proc_control_B.ct_i[779] = ct[591];
  proc_control_B.ct_i[780] = ct[0] * ct[310];
  proc_control_B.ct_i[781] = ct[592];
  proc_control_B.ct_i[782] = ct[8] * ct[310];
  proc_control_B.ct_i[783] = ct[593];
  proc_control_B.ct_i[784] = ct[10] * ct[303];
  proc_control_B.ct_i[785] = ct[594];
  proc_control_B.ct_i[786] = ct[11] * ct[296];
  proc_control_B.ct_i[787] = ct[595];
  proc_control_B.ct_i[788] = ct[0] * ct[313];
  proc_control_B.ct_i[789] = ct[596];
  proc_control_B.ct_i[790] = ct[11] * ct[300];
  proc_control_B.ct_i[791] = ct[597];
  proc_control_B.ct_i[792] = ct[4] * ct[313];
  proc_control_B.ct_i[793] = ct[599];
  proc_control_B.ct_i[794] = ct[9] * ct[310];
  proc_control_B.ct_i[795] = ct[11] * ct[306];
  proc_control_B.ct_i[796] = ct[9] * ct[313];
  proc_control_B.ct_i[797] = ct[603];
  proc_control_B.ct_i[798] = ct[16] * ct[296];
  proc_control_B.ct_i[799] = ct[604];
  proc_control_B.ct_i[800] = ct[17] * ct[296];
  proc_control_B.ct_i[801] = ct[605];
  proc_control_B.ct_i[802] = ct[16] * ct[298];
  proc_control_B.ct_i[803] = ct[606];
  proc_control_B.ct_i[804] = ct[607];
  proc_control_B.ct_i[805] = ct[17] * ct[298];
  std::memcpy(&proc_control_B.ct_i[806], &ct[609], 12U * sizeof(real_T));
  proc_control_B.ct_i[818] = ct[15] * ct[300];
  proc_control_B.ct_i[819] = ct[622];
  proc_control_B.ct_i[820] = ct[623];
  proc_control_B.ct_i[821] = ct[624];
  proc_control_B.ct_i[822] = ct[625];
  proc_control_B.ct_i[823] = ct[15] * ct[301];
  proc_control_B.ct_i[824] = ct[626];
  proc_control_B.ct_i[825] = ct[627];
  proc_control_B.ct_i[826] = ct[17] * ct[300];
  proc_control_B.ct_i[827] = ct[17] * ct[301];
  proc_control_B.ct_i[828] = ct[629];
  proc_control_B.ct_i[829] = ct[630];
  proc_control_B.ct_i[830] = ct[632];
  proc_control_B.ct_i[831] = ct[633];
  proc_control_B.ct_i[832] = ct[634];
  proc_control_B.ct_i[833] = ct[635];
  proc_control_B.ct_i[834] = ct[636];
  proc_control_B.ct_i[835] = ct[637];
  proc_control_B.ct_i[836] = ct[638];
  proc_control_B.ct_i[837] = ct[640];
  proc_control_B.ct_i[838] = ct[641];
  proc_control_B.ct_i[839] = ct[642];
  proc_control_B.ct_i[840] = ct[643];
  proc_control_B.ct_i[841] = ct[644];
  proc_control_B.ct_i[842] = ct[15] * ct[303];
  proc_control_B.ct_i[843] = ct[645];
  proc_control_B.ct_i[844] = ct[15] * ct[304];
  proc_control_B.ct_i[845] = ct[16] * ct[303];
  proc_control_B.ct_i[846] = ct[646];
  proc_control_B.ct_i[847] = ct[647];
  proc_control_B.ct_i[848] = ct[648];
  proc_control_B.ct_i[849] = ct[16] * ct[304];
  proc_control_B.ct_i[850] = ct[11] * ct[310];
  proc_control_B.ct_i[851] = ct[10] * ct[313];
  proc_control_B.ct_i[852] = ct[651];
  proc_control_B.ct_i[853] = ct[16] * ct[306];
  proc_control_B.ct_i[854] = ct[652];
  proc_control_B.ct_i[855] = ct[17] * ct[306];
  proc_control_B.ct_i[856] = ct[16] * ct[307];
  proc_control_B.ct_i[857] = ct[17] * ct[307];
  proc_control_B.ct_i[858] = ct[15] * ct[310];
  proc_control_B.ct_i[859] = ct[653];
  proc_control_B.ct_i[860] = ct[15] * ct[311];
  proc_control_B.ct_i[861] = ct[654];
  proc_control_B.ct_i[862] = ct[17] * ct[310];
  proc_control_B.ct_i[863] = ct[17] * ct[311];
  proc_control_B.ct_i[864] = ct[15] * ct[313];
  proc_control_B.ct_i[865] = ct[655];
  proc_control_B.ct_i[866] = ct[15] * ct[314];
  proc_control_B.ct_i[867] = ct[16] * ct[313];
  proc_control_B.ct_i[868] = ct[656];
  proc_control_B.ct_i[869] = ct[16] * ct[314];
  proc_control_B.ct_i[870] = ct[657];
  proc_control_B.ct_i[871] = ct[658];
  proc_control_B.ct_i[872] = ct[660];
  proc_control_B.ct_i[873] = ct[661];
  proc_control_B.ct_i[874] = ct[663];
  proc_control_B.ct_i[875] = ct[664];
  std::memcpy(&proc_control_B.ct_i[876], &ct[667], 18U * sizeof(real_T));
  proc_control_B.ct_i[894] = ct[685];
  proc_control_B.ct_i[895] = ct[687];
  proc_control_B.ct_i[896] = ct[688];
  proc_control_B.ct_i[897] = ct[690];
  proc_control_B.ct_i[898] = ct[691];
  proc_control_B.ct_i[899] = ct[694];
  proc_control_B.ct_i[900] = ct[695];
  proc_control_B.ct_i[901] = ct[697];
  proc_control_B.ct_i[902] = ct[699];
  proc_control_B.ct_i[903] = ct[701];
  proc_control_B.ct_i[904] = ct[703];
  proc_control_B.ct_i[905] = ct[705];
  proc_control_B.ct_i[906] = ct[707];
  proc_control_B.ct_i[907] = ct[709];
  proc_control_B.ct_i[908] = ct[711];
  proc_control_B.ct_i[909] = ct[714];
  proc_control_B.ct_i[910] = ct[715];
  proc_control_B.ct_i[911] = ct[718];
  proc_control_B.ct_i[912] = ct[719];
  proc_control_B.ct_i[913] = ct[738];
  proc_control_B.ct_i[914] = ct[739];
  proc_control_B.ct_i[915] = ct[740];
  proc_control_B.ct_i[916] = -ct[267];
  proc_control_B.ct_i[917] = ct[741];
  proc_control_B.ct_i[918] = ct[742];
  proc_control_B.ct_i[919] = ct[743];
  proc_control_B.ct_i[920] = ct[744];
  proc_control_B.ct_i[921] = ct[745];
  proc_control_B.ct_i[922] = -ct[268];
  proc_control_B.ct_i[923] = ct[746];
  proc_control_B.ct_i[924] = ct[748];
  proc_control_B.ct_i[925] = ct[749];
  proc_control_B.ct_i[926] = -ct[269];
  proc_control_B.ct_i[927] = ct[752];
  proc_control_B.ct_i[928] = ct[753];
  proc_control_B.ct_i[929] = ct[754];
  proc_control_B.ct_i[930] = ct[755];
  proc_control_B.ct_i[931] = ct[757];
  proc_control_B.ct_i[932] = ct[760];
  proc_control_B.ct_i[933] = ct[761];
  proc_control_B.ct_i[934] = ct[762];
  proc_control_B.ct_i[935] = ct[763];
  proc_control_B.ct_i[936] = ct[764];
  proc_control_B.ct_i[937] = ct[766];
  proc_control_B.ct_i[938] = ct[767];
  proc_control_B.ct_i[939] = ct[769];
  proc_control_B.ct_i[940] = ct[771];
  proc_control_B.ct_i[941] = ct[772];
  proc_control_B.ct_i[942] = ct[774];
  proc_control_B.ct_i[943] = ct[776];
  proc_control_B.ct_i[944] = ct[778];
  std::memcpy(&proc_control_B.ct_i[945], &ct[780], sizeof(real_T) << 3U);
  proc_control_B.ct_i[953] = -ct[296];
  proc_control_B.ct_i[954] = -ct[300];
  proc_control_B.ct_i[955] = -ct[303];
  proc_control_B.ct_i[956] = -ct[309];
  proc_control_B.ct_i[957] = -ct[312];
  proc_control_B.ct_i[958] = -ct[315];
  proc_control_B.ct_i[959] = -ct[323];
  proc_control_B.ct_i[960] = -ct[326];
  proc_control_B.ct_i[961] = -ct[327];
  proc_control_B.ct_i[962] = -ct[329];
  proc_control_B.ct_i[963] = -ct[333];
  proc_control_B.ct_i[964] = -ct[334];
  proc_control_B.ct_i[965] = -ct[336];
  proc_control_B.ct_i[966] = -ct[339];
  proc_control_B.ct_i[967] = -ct[340];
  proc_control_B.ct_i[968] = -ct[344];
  proc_control_B.ct_i[969] = -ct[345];
  proc_control_B.ct_i[970] = ct[788];
  proc_control_B.ct_i[971] = ct[789];
  proc_control_B.ct_i[972] = ct[790];
  proc_control_B.ct_i[973] = -(ct[5] * ct[191]);
  proc_control_B.ct_i[974] = -(ct[2] * ct[192]);
  proc_control_B.ct_i[975] = ct[791];
  proc_control_B.ct_i[976] = -ct[352];
  proc_control_B.ct_i[977] = ct[792];
  proc_control_B.ct_i[978] = -(ct[7] * ct[191]);
  proc_control_B.ct_i[979] = -(ct[1] * ct[193]);
  proc_control_B.ct_i[980] = ct[793];
  proc_control_B.ct_i[981] = ct[794];
  proc_control_B.ct_i[982] = -(ct[3] * ct[193]);
  proc_control_B.ct_i[983] = -(ct[6] * ct[192]);
  proc_control_B.ct_i[984] = -ct[364];
  proc_control_B.ct_i[985] = -ct[367];
  proc_control_B.ct_i[986] = -ct[369];
  proc_control_B.ct_i[987] = -ct[371];
  proc_control_B.ct_i[988] = -ct[374];
  proc_control_B.ct_i[989] = -ct[376];
  proc_control_B.ct_i[990] = -ct[383];
  proc_control_B.ct_i[991] = ct[795];
  proc_control_B.ct_i[992] = -ct[385];
  proc_control_B.ct_i[993] = -ct[386];
  proc_control_B.ct_i[994] = -ct[388];
  proc_control_B.ct_i[995] = -ct[394];
  proc_control_B.ct_i[996] = -ct[395];
  proc_control_B.ct_i[997] = -ct[400];
  proc_control_B.ct_i[998] = -ct[401];
  proc_control_B.ct_i[999] = ct[796];
  proc_control_B.ct_i[1000] = ct[797];
  proc_control_B.ct_i[1001] = -ct[412];
  proc_control_B.ct_i[1002] = -ct[413];
  proc_control_B.ct_i[1003] = -ct[414];
  proc_control_B.ct_i[1004] = ct[798];
  proc_control_B.ct_i[1005] = ct[799];
  proc_control_B.ct_i[1006] = ct[800];
  proc_control_B.ct_i[1007] = -ct[425];
  proc_control_B.ct_i[1008] = -ct[427];
  proc_control_B.ct_i[1009] = -ct[445];
  proc_control_B.ct_i[1010] = -(ct[16] * ct[192]);
  proc_control_B.ct_i[1011] = -proc_control_B.t517;
  proc_control_B.ct_i[1012] = -ct[458];
  proc_control_B.ct_i[1013] = ct[801];
  proc_control_B.ct_i[1014] = ct[802];
  proc_control_B.ct_i[1015] = ct[803];
  proc_control_ft_3_p(proc_control_B.ct_i, out1);
}

void proc_control::proc_control_ft_1_p(const real_T ct[435], real_T out1[13])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  proc_control_B.t896_tmp = ct[14] * ct[21];
  proc_control_B.t896_tmp_l = proc_control_B.t896_tmp * ct[22];
  proc_control_B.t896 = proc_control_B.t896_tmp_l * ct[24] * ct[25] * ct[312];
  proc_control_B.t897_tmp = ct[10] * ct[21];
  proc_control_B.t897_tmp_p = proc_control_B.t897_tmp * ct[23];
  proc_control_B.t897 = proc_control_B.t897_tmp_p * ct[24] * ct[26] * ct[312];
  proc_control_B.t898_tmp_c = ct[6] * ct[22];
  proc_control_B.t898_tmp_f = proc_control_B.t898_tmp_c * ct[23];
  proc_control_B.t898_e = proc_control_B.t898_tmp_f * ct[25] * ct[26] * ct[312];
  proc_control_B.t899_tmp_m = ct[15] * ct[22];
  proc_control_B.t899_tmp_l = proc_control_B.t899_tmp_m * ct[23];
  proc_control_B.t899_c = proc_control_B.t899_tmp_l * ct[25] * ct[26] * ct[312];
  proc_control_B.t900_tmp_h = ct[17] * ct[21];
  proc_control_B.t900_tmp_o = proc_control_B.t900_tmp_h * ct[22];
  proc_control_B.t900_a = proc_control_B.t900_tmp_o * ct[24] * ct[25] * ct[312];
  proc_control_B.t901_tmp_k = ct[16] * ct[21];
  proc_control_B.t901_tmp_i = proc_control_B.t901_tmp_k * ct[23];
  proc_control_B.t901_m = proc_control_B.t901_tmp_i * ct[24] * ct[26] * ct[312];
  std::memcpy(&proc_control_B.ct_c[0], &ct[6], sizeof(real_T) << 5U);
  proc_control_B.ct_c[32] = -ct[344];
  proc_control_B.ct_c[33] = -ct[347];
  proc_control_B.ct_c[34] = ct[38];
  proc_control_B.ct_c[35] = ct[258] * ct[263] * ct[333];
  proc_control_B.ct_c[36] = ct[258] * ct[278] * ct[333];
  proc_control_B.ct_c[37] = ct[263] * ct[278] * ct[333];
  proc_control_B.ct_c[38] = ct[39];
  proc_control_B.ct_c[39] = ct[40];
  proc_control_B.ct_c[40] = ct[41];
  proc_control_B.ct_c[41] = ct[42];
  proc_control_B.ct_tmp_c1h = ct[7] * ct[22];
  proc_control_B.ct_c[42] = proc_control_B.ct_tmp_c1h * ct[24] * ct[258] * ct
    [322];
  proc_control_B.ct_tmp_dk = ct[8] * ct[23];
  proc_control_B.ct_c[43] = proc_control_B.ct_tmp_dk * ct[24] * ct[258] * ct[322];
  proc_control_B.ct_tmp_cat = ct[9] * ct[22];
  proc_control_B.ct_c[44] = proc_control_B.ct_tmp_cat * ct[24] * ct[258] * ct
    [322];
  proc_control_B.ct_c[45] = proc_control_B.t897_tmp * ct[24] * ct[263] * ct[322];
  proc_control_B.t897_tmp = ct[10] * ct[22];
  proc_control_B.ct_c[46] = proc_control_B.t897_tmp * ct[24] * ct[258] * ct[322];
  proc_control_B.ct_tmp_e = ct[12] * ct[23];
  proc_control_B.ct_c[47] = proc_control_B.ct_tmp_e * ct[24] * ct[258] * ct[322];
  proc_control_B.ct_c[48] = proc_control_B.t896_tmp * ct[24] * ct[278] * ct[322];
  proc_control_B.t896_tmp = ct[14] * ct[23];
  proc_control_B.ct_c[49] = proc_control_B.t896_tmp * ct[24] * ct[258] * ct[322];
  proc_control_B.ct_tmp_fg = ct[6] * ct[21];
  proc_control_B.ct_c[50] = proc_control_B.ct_tmp_fg * ct[25] * ct[263] * ct[322];
  proc_control_B.ct_c[51] = proc_control_B.t898_tmp_c * ct[25] * ct[258] * ct
    [322];
  proc_control_B.t898_tmp_c = ct[7] * ct[21];
  proc_control_B.ct_c[52] = proc_control_B.t898_tmp_c * ct[25] * ct[263] * ct
    [322];
  proc_control_B.ct_tmp_it = ct[9] * ct[21];
  proc_control_B.ct_c[53] = proc_control_B.ct_tmp_it * ct[25] * ct[263] * ct[322];
  proc_control_B.ct_tmp_hh = ct[11] * ct[23];
  proc_control_B.ct_c[54] = proc_control_B.ct_tmp_hh * ct[25] * ct[263] * ct[322];
  proc_control_B.ct_tmp_n = ct[13] * ct[23];
  proc_control_B.ct_c[55] = proc_control_B.ct_tmp_n * ct[25] * ct[263] * ct[322];
  proc_control_B.ct_c[56] = ct[14] * ct[22] * ct[25] * ct[278] * ct[322];
  proc_control_B.ct_c[57] = proc_control_B.t896_tmp * ct[25] * ct[263] * ct[322];
  proc_control_B.ct_c[58] = proc_control_B.ct_tmp_fg * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_c[59] = ct[6] * ct[23] * ct[26] * ct[258] * ct[322];
  proc_control_B.ct_tmp_bv = ct[8] * ct[21];
  proc_control_B.ct_c[60] = proc_control_B.ct_tmp_bv * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_c[61] = proc_control_B.t897_tmp * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_c[62] = ct[10] * ct[23] * ct[26] * ct[263] * ct[322];
  proc_control_B.ct_tmp_pw = ct[11] * ct[22];
  proc_control_B.ct_c[63] = proc_control_B.ct_tmp_pw * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_tmp_gv = ct[12] * ct[21];
  proc_control_B.ct_c[64] = proc_control_B.ct_tmp_gv * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_tmp_hg = ct[13] * ct[22];
  proc_control_B.ct_c[65] = proc_control_B.ct_tmp_hg * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_tmp_bu = ct[15] * ct[21];
  proc_control_B.ct_c[66] = proc_control_B.ct_tmp_bu * ct[25] * ct[263] * ct[322];
  proc_control_B.ct_c[67] = proc_control_B.t899_tmp_m * ct[25] * ct[258] * ct
    [322];
  proc_control_B.ct_c[68] = proc_control_B.t901_tmp_k * ct[24] * ct[263] * ct
    [322];
  proc_control_B.t899_tmp_m = ct[16] * ct[22];
  proc_control_B.ct_c[69] = proc_control_B.t899_tmp_m * ct[24] * ct[258] * ct
    [322];
  proc_control_B.ct_c[70] = proc_control_B.ct_tmp_bu * ct[26] * ct[278] * ct[322];
  proc_control_B.ct_c[71] = ct[15] * ct[23] * ct[26] * ct[258] * ct[322];
  proc_control_B.ct_c[72] = proc_control_B.t900_tmp_h * ct[24] * ct[278] * ct
    [322];
  proc_control_B.t900_tmp_h = ct[17] * ct[23];
  proc_control_B.ct_c[73] = proc_control_B.t900_tmp_h * ct[24] * ct[258] * ct
    [322];
  proc_control_B.ct_c[74] = proc_control_B.t899_tmp_m * ct[26] * ct[278] * ct
    [322];
  proc_control_B.ct_c[75] = ct[16] * ct[23] * ct[26] * ct[263] * ct[322];
  proc_control_B.ct_c[76] = ct[17] * ct[22] * ct[25] * ct[278] * ct[322];
  proc_control_B.ct_c[77] = proc_control_B.t900_tmp_h * ct[25] * ct[263] * ct
    [322];
  proc_control_B.t901_tmp_k = ct[6] * ct[14];
  proc_control_B.ct_c[78] = proc_control_B.t901_tmp_k * ct[24] * ct[25] * ct[258]
    * ct[312];
  proc_control_B.ct_tmp_dp = ct[8] * ct[12];
  proc_control_B.ct_c[79] = proc_control_B.ct_tmp_dp * ct[24] * ct[25] * ct[258]
    * ct[312];
  proc_control_B.ct_tmp_tmp_h5 = ct[10] * ct[14];
  proc_control_B.ct_tmp_h = proc_control_B.ct_tmp_tmp_h5 * ct[24];
  proc_control_B.ct_c[80] = proc_control_B.ct_tmp_h * ct[25] * ct[263] * ct[312];
  proc_control_B.ct_tmp_tmp_d = ct[11] * ct[13];
  proc_control_B.ct_tmp_h2 = proc_control_B.ct_tmp_tmp_d * ct[24];
  proc_control_B.ct_c[81] = proc_control_B.ct_tmp_h2 * ct[25] * ct[263] * ct[312];
  proc_control_B.ct_tmp_bps = ct[6] * ct[10];
  proc_control_B.ct_c[82] = proc_control_B.ct_tmp_bps * ct[24] * ct[26] * ct[258]
    * ct[312];
  proc_control_B.ct_tmp_bf = ct[7] * ct[9];
  proc_control_B.ct_c[83] = proc_control_B.ct_tmp_bf * ct[24] * ct[26] * ct[258]
    * ct[312];
  proc_control_B.ct_c[84] = proc_control_B.ct_tmp_h * ct[26] * ct[278] * ct[312];
  proc_control_B.ct_c[85] = proc_control_B.ct_tmp_h2 * ct[26] * ct[278] * ct[312];
  proc_control_B.ct_c[86] = proc_control_B.ct_tmp_bps * ct[25] * ct[26] * ct[263]
    * ct[312];
  proc_control_B.ct_c[87] = proc_control_B.ct_tmp_bf * ct[25] * ct[26] * ct[263]
    * ct[312];
  proc_control_B.ct_c[88] = proc_control_B.t901_tmp_k * ct[25] * ct[26] * ct[278]
    * ct[312];
  proc_control_B.ct_c[89] = proc_control_B.ct_tmp_dp * ct[25] * ct[26] * ct[278]
    * ct[312];
  proc_control_B.ct_tmp_h = ct[14] * ct[15];
  proc_control_B.ct_c[90] = proc_control_B.ct_tmp_h * ct[24] * ct[25] * ct[258] *
    ct[312];
  proc_control_B.ct_tmp_h2 = ct[10] * ct[15];
  proc_control_B.ct_c[91] = proc_control_B.ct_tmp_h2 * ct[24] * ct[26] * ct[258]
    * ct[312];
  proc_control_B.ct_c[92] = ct[43];
  proc_control_B.ct_tmp_tmp_f = ct[14] * ct[16];
  proc_control_B.ct_tmp_jd = proc_control_B.ct_tmp_tmp_f * ct[24];
  proc_control_B.ct_c[93] = proc_control_B.ct_tmp_jd * ct[25] * ct[263] * ct[312];
  proc_control_B.ct_c[94] = proc_control_B.ct_tmp_h2 * ct[25] * ct[26] * ct[263]
    * ct[312];
  proc_control_B.ct_c[95] = proc_control_B.ct_tmp_h * ct[25] * ct[26] * ct[278] *
    ct[312];
  proc_control_B.ct_tmp_dl = ct[6] * ct[16];
  proc_control_B.ct_c[96] = proc_control_B.ct_tmp_dl * ct[24] * ct[26] * ct[258]
    * ct[312];
  proc_control_B.ct_tmp_jk = ct[6] * ct[17];
  proc_control_B.ct_c[97] = proc_control_B.ct_tmp_jk * ct[24] * ct[25] * ct[258]
    * ct[312];
  proc_control_B.ct_tmp_tmp_fo = ct[10] * ct[17];
  proc_control_B.ct_tmp_lo = proc_control_B.ct_tmp_tmp_fo * ct[24];
  proc_control_B.ct_c[98] = proc_control_B.ct_tmp_lo * ct[25] * ct[263] * ct[312];
  proc_control_B.ct_c[99] = proc_control_B.ct_tmp_jd * ct[26] * ct[278] * ct[312];
  proc_control_B.ct_c[100] = proc_control_B.ct_tmp_dl * ct[25] * ct[26] * ct[263]
    * ct[312];
  proc_control_B.ct_c[101] = ct[44];
  proc_control_B.ct_c[102] = ct[45];
  proc_control_B.ct_c[103] = proc_control_B.ct_tmp_lo * ct[26] * ct[278] * ct
    [312];
  proc_control_B.ct_c[104] = proc_control_B.ct_tmp_jk * ct[25] * ct[26] * ct[278]
    * ct[312];
  proc_control_B.ct_tmp_jd = ct[15] * ct[16];
  proc_control_B.ct_c[105] = proc_control_B.ct_tmp_jd * ct[24] * ct[26] * ct[258]
    * ct[312];
  proc_control_B.ct_tmp_lo = ct[15] * ct[17];
  proc_control_B.ct_c[106] = proc_control_B.ct_tmp_lo * ct[24] * ct[25] * ct[258]
    * ct[312];
  proc_control_B.ct_c[107] = proc_control_B.ct_tmp_jd * ct[25] * ct[26] * ct[263]
    * ct[312];
  proc_control_B.ct_tmp_tmp_k = ct[16] * ct[17];
  proc_control_B.ct_tmp_bi = proc_control_B.ct_tmp_tmp_k * ct[24];
  proc_control_B.ct_c[108] = proc_control_B.ct_tmp_bi * ct[25] * ct[263] * ct
    [312];
  proc_control_B.ct_c[109] = proc_control_B.ct_tmp_lo * ct[25] * ct[26] * ct[278]
    * ct[312];
  proc_control_B.ct_c[110] = proc_control_B.ct_tmp_bi * ct[26] * ct[278] * ct
    [312];
  proc_control_B.ct_c[111] = ct[46];
  proc_control_B.ct_c[112] = ct[3] + ct[391];
  proc_control_B.ct_c[113] = ct[4] + ct[392];
  proc_control_B.ct_c[114] = ct[5] + ct[393];
  proc_control_B.ct_c[115] = ct[0] + ct[396];
  proc_control_B.ct_c[116] = ct[1] + ct[404];
  proc_control_B.ct_c[117] = ct[2] + ct[405];
  proc_control_B.ct_c[118] = ct[47];
  proc_control_B.ct_c[119] = ct[48];
  proc_control_B.ct_c[120] = ct[49];
  proc_control_B.ct_c[121] = (ct[134] - ct[433]) * ct[32];
  proc_control_B.ct_c[122] = (ct[176] - ct[432]) * ct[32];
  proc_control_B.ct_c[123] = (ct[140] - ct[434]) * ct[32];
  proc_control_B.ct_c[124] = ct[50];
  proc_control_B.ct_c[125] = ct[51];
  proc_control_B.ct_c[126] = ct[54];
  proc_control_B.ct_c[127] = ct[55];
  proc_control_B.ct_c[128] = ct[57];
  proc_control_B.ct_c[129] = ct[58];
  proc_control_B.ct_c[130] = ct[61];
  proc_control_B.ct_c[131] = ct[62];
  proc_control_B.ct_c[132] = ct[65];
  proc_control_B.ct_c[133] = ct[67];
  proc_control_B.ct_c[134] = ct[68];
  proc_control_B.ct_c[135] = ct[70];
  proc_control_B.ct_c[136] = ct[72];
  proc_control_B.ct_c[137] = ct[74];
  std::memcpy(&proc_control_B.ct_c[138], &ct[76], 12U * sizeof(real_T));
  proc_control_B.ct_c[150] = ct[88];
  std::memcpy(&proc_control_B.ct_c[151], &ct[90], sizeof(real_T) << 3U);
  proc_control_B.ct_c[159] = ct[98];
  std::memcpy(&proc_control_B.ct_c[160], &ct[100], 13U * sizeof(real_T));
  proc_control_B.ct_c[173] = ct[113];
  proc_control_B.ct_c[174] = ct[116];
  proc_control_B.ct_c[175] = ct[117];
  proc_control_B.ct_c[176] = ct[118];
  proc_control_B.ct_c[177] = ct[119];
  proc_control_B.ct_c[178] = ct[120];
  proc_control_B.ct_c[179] = ct[121];
  proc_control_B.ct_c[180] = ct[32] + ct[416];
  std::memcpy(&proc_control_B.ct_c[181], &ct[122], 10U * sizeof(real_T));
  proc_control_B.ct_c[191] = proc_control_B.t898_tmp_f * ct[330];
  proc_control_B.ct_c[192] = proc_control_B.t897_tmp_p * ct[330];
  proc_control_B.ct_c[193] = proc_control_B.t896_tmp_l * ct[330];
  proc_control_B.ct_c[194] = ct[132];
  proc_control_B.ct_c[195] = ct[133];
  proc_control_B.ct_c[196] = proc_control_B.t899_tmp_l * ct[330];
  proc_control_B.ct_c[197] = proc_control_B.t901_tmp_i * ct[330];
  proc_control_B.ct_c[198] = proc_control_B.t900_tmp_o * ct[330];
  proc_control_B.ct_c[199] = ct[135];
  proc_control_B.ct_c[200] = ct[136];
  proc_control_B.ct_c[201] = ct[137];
  proc_control_B.ct_c[202] = ct[138];
  proc_control_B.ct_c[203] = ct[139];
  proc_control_B.ct_c[204] = ct[141];
  proc_control_B.ct_c[205] = ct[142];
  proc_control_B.ct_c[206] = ct[143];
  proc_control_B.ct_c[207] = ct[146];
  proc_control_B.ct_c[208] = ct[147];
  proc_control_B.ct_c[209] = ct[149];
  proc_control_B.ct_c[210] = ct[152];
  proc_control_B.ct_c[211] = ct[153];
  proc_control_B.ct_c[212] = ct[155];
  proc_control_B.ct_c[213] = ct[158];
  proc_control_B.ct_c[214] = ct[159];
  proc_control_B.ct_c[215] = ct[162];
  proc_control_B.ct_c[216] = ct[164];
  proc_control_B.ct_c[217] = ct[166];
  proc_control_B.ct_c[218] = ct[168];
  proc_control_B.ct_c[219] = ct[170];
  proc_control_B.ct_c[220] = ct[172];
  proc_control_B.ct_c[221] = ct[174];
  proc_control_B.ct_c[222] = ct[177];
  proc_control_B.ct_c[223] = ct[178];
  std::memcpy(&proc_control_B.ct_c[224], &ct[180], sizeof(real_T) << 4U);
  proc_control_B.ct_c[240] = ct[196];
  proc_control_B.ct_c[241] = ct[198];
  proc_control_B.ct_c[242] = ct[199];
  proc_control_B.ct_c[243] = ct[200];
  proc_control_B.ct_c[244] = ct[201];
  proc_control_B.ct_c[245] = ct[202];
  proc_control_B.ct_c[246] = ct[204];
  proc_control_B.ct_c[247] = ct[206];
  proc_control_B.ct_c[248] = ct[207];
  proc_control_B.ct_c[249] = ct[208];
  std::memcpy(&proc_control_B.ct_c[250], &ct[210], 17U * sizeof(real_T));
  proc_control_B.ct_c[267] = ct[32] * ct[417];
  proc_control_B.ct_c[268] = ct[32] * ct[418];
  proc_control_B.ct_c[269] = ct[32] * ct[419];
  std::memcpy(&proc_control_B.ct_c[270], &ct[227], 26U * sizeof(real_T));
  proc_control_B.ct_c[296] = ct[6] * ct[258] * ct[330];
  proc_control_B.ct_c[297] = ct[253];
  proc_control_B.ct_c[298] = ct[6] * ct[262] * ct[330];
  proc_control_B.ct_c[299] = ct[6] * ct[268] * ct[333];
  proc_control_B.ct_c[300] = ct[10] * ct[263] * ct[330];
  proc_control_B.ct_c[301] = ct[10] * ct[273] * ct[330];
  proc_control_B.ct_c[302] = ct[10] * ct[279] * ct[333];
  proc_control_B.ct_c[303] = ct[14] * ct[278] * ct[330];
  proc_control_B.ct_c[304] = ct[14] * ct[282] * ct[330];
  proc_control_B.ct_c[305] = ct[14] * ct[285] * ct[333];
  proc_control_B.ct_c[306] = ct[15] * ct[258] * ct[330];
  proc_control_B.ct_c[307] = ct[15] * ct[262] * ct[330];
  proc_control_B.ct_c[308] = ct[254];
  proc_control_B.ct_c[309] = ct[15] * ct[268] * ct[333];
  proc_control_B.ct_c[310] = ct[16] * ct[263] * ct[330];
  proc_control_B.ct_c[311] = ct[16] * ct[273] * ct[330];
  proc_control_B.ct_c[312] = ct[16] * ct[279] * ct[333];
  proc_control_B.ct_c[313] = ct[17] * ct[278] * ct[330];
  proc_control_B.ct_c[314] = ct[17] * ct[282] * ct[330];
  proc_control_B.ct_c[315] = ct[17] * ct[285] * ct[333];
  proc_control_B.ct_c[316] = ct[255];
  proc_control_B.ct_c[317] = ct[256];
  proc_control_B.ct_c[318] = ct[257];
  proc_control_B.ct_c[319] = ct[258];
  proc_control_B.ct_c[320] = ct[259];
  proc_control_B.ct_c[321] = ct[260];
  proc_control_B.ct_c[322] = ct[261];
  proc_control_B.ct_c[323] = ct[24] * ct[51];
  proc_control_B.ct_c[324] = ct[24] * ct[52];
  proc_control_B.ct_c[325] = ct[24] * ct[53];
  proc_control_B.ct_c[326] = ct[24] * ct[54];
  proc_control_B.ct_c[327] = ct[24] * ct[55];
  proc_control_B.ct_c[328] = ct[24] * ct[56];
  proc_control_B.ct_c[329] = ct[25] * ct[51];
  proc_control_B.ct_c[330] = ct[262];
  proc_control_B.ct_c[331] = ct[25] * ct[52];
  proc_control_B.ct_c[332] = ct[25] * ct[53];
  proc_control_B.ct_c[333] = ct[25] * ct[54];
  proc_control_B.ct_c[334] = ct[25] * ct[55];
  proc_control_B.ct_c[335] = ct[25] * ct[56];
  proc_control_B.ct_c[336] = ct[26] * ct[51];
  proc_control_B.ct_c[337] = ct[26] * ct[52];
  proc_control_B.ct_c[338] = ct[26] * ct[53];
  proc_control_B.ct_c[339] = ct[26] * ct[54];
  proc_control_B.ct_c[340] = ct[26] * ct[55];
  proc_control_B.ct_c[341] = ct[263];
  proc_control_B.ct_c[342] = ct[26] * ct[56];
  proc_control_B.ct_c[343] = ct[24] * ct[64];
  proc_control_B.ct_c[344] = ct[24] * ct[65];
  proc_control_B.ct_c[345] = ct[22] * ct[82];
  proc_control_B.ct_c[346] = ct[22] * ct[83];
  proc_control_B.ct_c[347] = ct[265];
  proc_control_B.ct_c[348] = ct[266];
  proc_control_B.ct_c[349] = ct[268];
  proc_control_B.ct_tmp_bi = ct[7] * ct[11] * ct[21] * ct[23];
  proc_control_B.ct_c[350] = proc_control_B.ct_tmp_bi * ct[330];
  proc_control_B.t896_tmp_l = ct[8] * ct[9] * ct[22] * ct[23];
  proc_control_B.ct_c[351] = proc_control_B.t896_tmp_l * ct[330];
  proc_control_B.ct_c[352] = ct[23] * ct[92];
  proc_control_B.ct_c[353] = ct[270];
  proc_control_B.ct_c[354] = ct[23] * ct[93];
  proc_control_B.ct_c[355] = ct[272];
  proc_control_B.ct_c[356] = ct[273];
  proc_control_B.t897_tmp_p = ct[7] * ct[12] * ct[22] * ct[23];
  proc_control_B.ct_c[357] = proc_control_B.t897_tmp_p * ct[330];
  proc_control_B.t898_tmp_f = ct[8] * ct[13] * ct[21] * ct[22];
  proc_control_B.ct_c[358] = proc_control_B.t898_tmp_f * ct[330];
  proc_control_B.ct_c[359] = ct[274];
  proc_control_B.ct_c[360] = ct[277];
  proc_control_B.t899_tmp_l = ct[9] * ct[13] * ct[21] * ct[23];
  proc_control_B.ct_c[361] = proc_control_B.t899_tmp_l * ct[330];
  proc_control_B.ct_c[362] = ct[278];
  proc_control_B.t900_tmp_o = ct[11] * ct[12] * ct[21] * ct[22];
  proc_control_B.ct_c[363] = proc_control_B.t900_tmp_o * ct[330];
  proc_control_B.ct_c[364] = ct[23] * ct[101];
  proc_control_B.ct_c[365] = ct[23] * ct[103];
  proc_control_B.ct_c[366] = ct[25] * ct[64];
  proc_control_B.ct_c[367] = ct[25] * ct[65];
  proc_control_B.ct_c[368] = ct[24] * ct[69];
  proc_control_B.ct_c[369] = ct[24] * ct[70];
  proc_control_B.ct_c[370] = ct[26] * ct[64];
  proc_control_B.ct_c[371] = ct[26] * ct[65];
  proc_control_B.ct_c[372] = ct[24] * ct[73];
  proc_control_B.ct_c[373] = ct[279];
  proc_control_B.ct_c[374] = ct[24] * ct[74];
  proc_control_B.ct_c[375] = ct[25] * ct[69];
  proc_control_B.ct_c[376] = ct[25] * ct[70];
  proc_control_B.ct_c[377] = ct[22] * ct[108];
  proc_control_B.ct_c[378] = ct[280];
  proc_control_B.ct_c[379] = ct[281];
  proc_control_B.ct_c[380] = ct[23] * ct[112];
  proc_control_B.ct_c[381] = ct[25] * ct[73];
  proc_control_B.ct_c[382] = ct[282];
  proc_control_B.ct_c[383] = ct[25] * ct[74];
  proc_control_B.ct_c[384] = ct[26] * ct[69];
  proc_control_B.ct_c[385] = ct[26] * ct[70];
  proc_control_B.ct_c[386] = ct[24] * ct[77];
  proc_control_B.ct_c[387] = ct[26] * ct[73];
  proc_control_B.ct_c[388] = ct[26] * ct[74];
  proc_control_B.ct_c[389] = ct[22] * ct[116];
  proc_control_B.ct_c[390] = ct[283];
  proc_control_B.ct_c[391] = ct[284];
  proc_control_B.ct_c[392] = ct[285];
  proc_control_B.ct_c[393] = ct[23] * ct[120];
  proc_control_B.ct_c[394] = ct[24] * ct[80];
  proc_control_B.ct_c[395] = ct[25] * ct[77];
  proc_control_B.ct_c[396] = ct[23] * ct[122];
  proc_control_B.ct_c[397] = ct[286];
  proc_control_B.ct_c[398] = ct[287];
  proc_control_B.ct_c[399] = ct[23] * ct[126];
  proc_control_B.ct_c[400] = ct[25] * ct[80];
  proc_control_B.ct_c[401] = ct[26] * ct[77];
  proc_control_B.ct_c[402] = ct[288];
  proc_control_B.ct_c[403] = ct[289];
  proc_control_B.ct_c[404] = ct[291];
  proc_control_B.ct_c[405] = ct[293];
  proc_control_B.ct_c[406] = ct[294];
  proc_control_B.ct_c[407] = ct[295];
  proc_control_B.ct_c[408] = ct[296];
  proc_control_B.ct_c[409] = ct[297];
  proc_control_B.ct_c[410] = ct[298];
  proc_control_B.ct_c[411] = ct[299];
  proc_control_B.ct_c[412] = ct[24] * ct[106];
  proc_control_B.ct_c[413] = ct[26] * ct[80];
  proc_control_B.ct_c[414] = ct[22] * ct[128];
  proc_control_B.ct_c[415] = ct[300];
  proc_control_B.ct_c[416] = ct[301];
  proc_control_B.ct_c[417] = ct[303];
  proc_control_B.ct_c[418] = ct[304];
  proc_control_B.ct_c[419] = ct[305];
  proc_control_B.ct_c[420] = ct[306];
  proc_control_B.ct_c[421] = ct[307];
  proc_control_B.ct_c[422] = ct[309];
  proc_control_B.ct_c[423] = ct[310];
  proc_control_B.ct_c[424] = ct[311];
  proc_control_B.ct_c[425] = ct[25] * ct[106];
  proc_control_B.ct_c[426] = ct[312];
  proc_control_B.ct_c[427] = ct[23] * ct[130];
  std::memcpy(&proc_control_B.ct_c[428], &ct[313], 17U * sizeof(real_T));
  proc_control_B.ct_c[445] = ct[26] * ct[106];
  proc_control_B.ct_c[446] = ct[24] * ct[114];
  proc_control_B.ct_c[447] = ct[330];
  proc_control_B.t901_tmp_i = proc_control_B.t898_tmp_c * ct[22] * ct[23];
  proc_control_B.ct_c[448] = proc_control_B.t901_tmp_i * ct[330];
  proc_control_B.ct_tmp_ni = proc_control_B.ct_tmp_bv * ct[22] * ct[23];
  proc_control_B.ct_c[449] = proc_control_B.ct_tmp_ni * ct[330];
  proc_control_B.ct_tmp_gr = proc_control_B.ct_tmp_it * ct[22] * ct[23];
  proc_control_B.ct_c[450] = proc_control_B.ct_tmp_gr * ct[330];
  proc_control_B.ct_tmp_bc = ct[11] * ct[21];
  proc_control_B.ct_tmp_bt = proc_control_B.ct_tmp_bc * ct[22] * ct[23];
  proc_control_B.ct_c[451] = proc_control_B.ct_tmp_bt * ct[330];
  proc_control_B.ct_tmp_fi = proc_control_B.ct_tmp_gv * ct[22] * ct[23];
  proc_control_B.ct_c[452] = proc_control_B.ct_tmp_fi * ct[330];
  proc_control_B.ct_tmp_lb = ct[13] * ct[21];
  proc_control_B.ct_tmp_oy = proc_control_B.ct_tmp_lb * ct[22] * ct[23];
  proc_control_B.ct_c[453] = proc_control_B.ct_tmp_oy * ct[330];
  proc_control_B.ct_c[454] = ct[331];
  proc_control_B.ct_c[455] = ct[332];
  proc_control_B.ct_c[456] = ct[333];
  proc_control_B.ct_c[457] = ct[334];
  proc_control_B.ct_c[458] = ct[23] * ct[132];
  proc_control_B.ct_c[459] = ct[25] * ct[114];
  proc_control_B.ct_c[460] = ct[335];
  proc_control_B.ct_c[461] = ct[336];
  proc_control_B.ct_c[462] = ct[337];
  proc_control_B.ct_c[463] = ct[338];
  proc_control_B.ct_c[464] = ct[339];
  proc_control_B.ct_c[465] = ct[340];
  proc_control_B.ct_c[466] = ct[26] * ct[114];
  proc_control_B.ct_c[467] = ct[341];
  proc_control_B.ct_c[468] = ct[342];
  proc_control_B.ct_c[469] = ct[343];
  proc_control_B.ct_c[470] = ct[345];
  proc_control_B.ct_c[471] = ct[346];
  std::memcpy(&proc_control_B.ct_c[472], &ct[348], 43U * sizeof(real_T));
  proc_control_B.ct_c[515] = -ct[52];
  proc_control_B.ct_c[516] = -ct[53];
  proc_control_B.ct_c[517] = -ct[56];
  proc_control_B.ct_c[518] = -ct[59];
  proc_control_B.ct_c[519] = -ct[60];
  proc_control_B.ct_c[520] = -ct[63];
  proc_control_B.ct_c[521] = -ct[64];
  proc_control_B.ct_c[522] = -ct[66];
  proc_control_B.ct_c[523] = -ct[69];
  proc_control_B.ct_c[524] = -ct[71];
  proc_control_B.ct_c[525] = -ct[73];
  proc_control_B.ct_c[526] = -ct[75];
  proc_control_B.ct_c[527] = -ct[87];
  proc_control_B.ct_c[528] = -ct[89];
  proc_control_B.ct_c[529] = -ct[91];
  proc_control_B.ct_c[530] = -ct[99];
  proc_control_B.ct_c[531] = -ct[110];
  proc_control_B.ct_c[532] = -ct[111];
  proc_control_B.ct_c[533] = -ct[114];
  proc_control_B.ct_c[534] = -ct[115];
  proc_control_B.ct_c[535] = ct[394];
  proc_control_B.ct_c[536] = ct[395];
  proc_control_B.ct_c[537] = ct[397];
  proc_control_B.ct_c[538] = ct[398];
  proc_control_B.ct_c[539] = ct[399];
  proc_control_B.ct_c[540] = ct[400];
  proc_control_B.ct_c[541] = ct[401];
  proc_control_B.ct_c[542] = ct[402];
  proc_control_B.ct_c[543] = ct[403];
  proc_control_B.ct_c[544] = -ct[144];
  proc_control_B.ct_c[545] = -ct[145];
  proc_control_B.ct_c[546] = -ct[148];
  proc_control_B.ct_c[547] = -ct[150];
  proc_control_B.ct_c[548] = -ct[151];
  proc_control_B.ct_c[549] = -ct[154];
  proc_control_B.ct_c[550] = -ct[156];
  proc_control_B.ct_c[551] = -ct[157];
  proc_control_B.ct_c[552] = -ct[160];
  proc_control_B.ct_c[553] = -ct[161];
  proc_control_B.ct_c[554] = -ct[163];
  proc_control_B.ct_c[555] = -ct[165];
  proc_control_B.ct_c[556] = -ct[167];
  proc_control_B.ct_c[557] = -ct[169];
  proc_control_B.ct_c[558] = -ct[171];
  proc_control_B.ct_c[559] = -ct[173];
  proc_control_B.ct_c[560] = -ct[175];
  proc_control_B.ct_c[561] = -ct[179];
  proc_control_B.ct_c[562] = ct[406];
  proc_control_B.ct_c[563] = -ct[203];
  proc_control_B.ct_c[564] = -ct[205];
  proc_control_B.ct_c[565] = -ct[209];
  proc_control_B.ct_c[566] = ct[407];
  proc_control_B.ct_c[567] = proc_control_B.ct_tmp_bps * ct[258] * ct[322];
  proc_control_B.ct_tmp_p = proc_control_B.ct_tmp_bf * ct[258];
  proc_control_B.ct_c[568] = proc_control_B.ct_tmp_p * ct[322];
  proc_control_B.ct_c[569] = proc_control_B.ct_tmp_bps * ct[263] * ct[322];
  proc_control_B.ct_c[570] = proc_control_B.ct_tmp_p * ct[330];
  proc_control_B.ct_tmp_bps = proc_control_B.ct_tmp_bf * ct[263];
  proc_control_B.ct_c[571] = proc_control_B.ct_tmp_bps * ct[322];
  proc_control_B.ct_c[572] = proc_control_B.ct_tmp_bps * ct[330];
  proc_control_B.ct_c[573] = proc_control_B.t901_tmp_k * ct[258] * ct[322];
  proc_control_B.ct_tmp_bps = proc_control_B.ct_tmp_dp * ct[258];
  proc_control_B.ct_c[574] = proc_control_B.ct_tmp_bps * ct[322];
  proc_control_B.ct_c[575] = ct[408];
  proc_control_B.ct_c[576] = proc_control_B.ct_tmp_bps * ct[330];
  proc_control_B.ct_c[577] = proc_control_B.t901_tmp_k * ct[278] * ct[322];
  proc_control_B.t901_tmp_k = proc_control_B.ct_tmp_dp * ct[278];
  proc_control_B.ct_c[578] = proc_control_B.t901_tmp_k * ct[322];
  proc_control_B.ct_c[579] = proc_control_B.t901_tmp_k * ct[330];
  proc_control_B.ct_c[580] = proc_control_B.ct_tmp_tmp_h5 * ct[263] * ct[322];
  proc_control_B.t901_tmp_k = proc_control_B.ct_tmp_tmp_d * ct[263];
  proc_control_B.ct_c[581] = proc_control_B.t901_tmp_k * ct[322];
  proc_control_B.ct_c[582] = proc_control_B.ct_tmp_tmp_h5 * ct[278] * ct[322];
  proc_control_B.ct_c[583] = proc_control_B.t901_tmp_k * ct[330];
  proc_control_B.t901_tmp_k = proc_control_B.ct_tmp_tmp_d * ct[278];
  proc_control_B.ct_c[584] = proc_control_B.t901_tmp_k * ct[322];
  proc_control_B.ct_c[585] = proc_control_B.t901_tmp_k * ct[330];
  proc_control_B.ct_c[586] = proc_control_B.ct_tmp_h2 * ct[258] * ct[322];
  proc_control_B.ct_c[587] = proc_control_B.ct_tmp_h2 * ct[263] * ct[322];
  proc_control_B.ct_c[588] = proc_control_B.ct_tmp_h * ct[258] * ct[322];
  proc_control_B.ct_c[589] = proc_control_B.ct_tmp_h * ct[278] * ct[322];
  proc_control_B.ct_c[590] = proc_control_B.ct_tmp_dl * ct[258] * ct[322];
  proc_control_B.ct_c[591] = proc_control_B.ct_tmp_dl * ct[263] * ct[322];
  proc_control_B.ct_c[592] = proc_control_B.ct_tmp_tmp_f * ct[263] * ct[322];
  proc_control_B.ct_c[593] = proc_control_B.ct_tmp_tmp_f * ct[278] * ct[322];
  proc_control_B.ct_c[594] = proc_control_B.ct_tmp_jk * ct[258] * ct[322];
  proc_control_B.ct_c[595] = proc_control_B.ct_tmp_jk * ct[278] * ct[322];
  proc_control_B.ct_c[596] = proc_control_B.ct_tmp_tmp_fo * ct[263] * ct[322];
  proc_control_B.ct_c[597] = proc_control_B.ct_tmp_tmp_fo * ct[278] * ct[322];
  proc_control_B.ct_c[598] = proc_control_B.ct_tmp_jd * ct[258] * ct[322];
  proc_control_B.ct_c[599] = ct[412];
  proc_control_B.ct_c[600] = proc_control_B.ct_tmp_jd * ct[263] * ct[322];
  proc_control_B.ct_c[601] = proc_control_B.ct_tmp_lo * ct[258] * ct[322];
  proc_control_B.ct_c[602] = proc_control_B.ct_tmp_lo * ct[278] * ct[322];
  proc_control_B.ct_c[603] = proc_control_B.ct_tmp_fg * ct[263] * ct[330];
  proc_control_B.ct_c[604] = proc_control_B.ct_tmp_fg * ct[278] * ct[330];
  proc_control_B.ct_c[605] = ct[413];
  proc_control_B.ct_c[606] = proc_control_B.t898_tmp_c * ct[263] * ct[330];
  proc_control_B.ct_c[607] = proc_control_B.ct_tmp_c1h * ct[258] * ct[330];
  proc_control_B.ct_tmp_c1h = ct[7] * ct[23];
  proc_control_B.ct_c[608] = proc_control_B.ct_tmp_c1h * ct[258] * ct[330];
  proc_control_B.ct_tmp_fg = ct[8] * ct[22];
  proc_control_B.ct_c[609] = proc_control_B.ct_tmp_fg * ct[258] * ct[330];
  proc_control_B.ct_c[610] = ct[7] * ct[255];
  proc_control_B.ct_c[611] = ct[7] * ct[256];
  proc_control_B.ct_c[612] = proc_control_B.ct_tmp_c1h * ct[263] * ct[330];
  proc_control_B.ct_c[613] = proc_control_B.ct_tmp_bv * ct[278] * ct[330];
  proc_control_B.ct_c[614] = ct[414];
  proc_control_B.ct_c[615] = proc_control_B.ct_tmp_dk * ct[258] * ct[330];
  proc_control_B.ct_c[616] = proc_control_B.ct_tmp_fg * ct[278] * ct[330];
  proc_control_B.ct_c[617] = ct[8] * ct[257];
  proc_control_B.ct_c[618] = ct[8] * ct[259];
  proc_control_B.ct_c[619] = proc_control_B.ct_tmp_it * ct[263] * ct[330];
  proc_control_B.ct_c[620] = proc_control_B.ct_tmp_cat * ct[258] * ct[330];
  proc_control_B.ct_tmp_c1h = ct[9] * ct[23];
  proc_control_B.ct_c[621] = proc_control_B.ct_tmp_c1h * ct[258] * ct[330];
  proc_control_B.ct_c[622] = proc_control_B.t897_tmp * ct[258] * ct[330];
  proc_control_B.ct_c[623] = ct[9] * ct[255];
  proc_control_B.ct_c[624] = ct[9] * ct[256];
  proc_control_B.ct_c[625] = proc_control_B.ct_tmp_c1h * ct[263] * ct[330];
  proc_control_B.ct_c[626] = proc_control_B.ct_tmp_bc * ct[263] * ct[330];
  proc_control_B.ct_c[627] = proc_control_B.t897_tmp * ct[278] * ct[330];
  proc_control_B.ct_c[628] = proc_control_B.ct_tmp_bc * ct[278] * ct[330];
  proc_control_B.ct_c[629] = proc_control_B.ct_tmp_pw * ct[278] * ct[330];
  proc_control_B.ct_c[630] = proc_control_B.ct_tmp_hh * ct[263] * ct[330];
  proc_control_B.ct_c[631] = -ct[382];
  proc_control_B.ct_c[632] = ct[11] * ct[260];
  proc_control_B.ct_c[633] = ct[11] * ct[261];
  proc_control_B.ct_tmp_c1h = ct[12] * ct[22];
  proc_control_B.ct_c[634] = proc_control_B.ct_tmp_c1h * ct[258] * ct[330];
  proc_control_B.ct_c[635] = proc_control_B.ct_tmp_gv * ct[278] * ct[330];
  proc_control_B.ct_c[636] = proc_control_B.ct_tmp_e * ct[258] * ct[330];
  proc_control_B.ct_c[637] = proc_control_B.ct_tmp_lb * ct[263] * ct[330];
  proc_control_B.ct_c[638] = proc_control_B.ct_tmp_c1h * ct[278] * ct[330];
  proc_control_B.ct_c[639] = proc_control_B.ct_tmp_lb * ct[278] * ct[330];
  proc_control_B.ct_c[640] = ct[12] * ct[257];
  proc_control_B.ct_c[641] = ct[12] * ct[259];
  proc_control_B.ct_c[642] = ct[416];
  proc_control_B.ct_c[643] = proc_control_B.ct_tmp_hg * ct[278] * ct[330];
  proc_control_B.ct_c[644] = proc_control_B.ct_tmp_n * ct[263] * ct[330];
  proc_control_B.ct_c[645] = proc_control_B.t896_tmp * ct[258] * ct[330];
  proc_control_B.ct_c[646] = proc_control_B.t896_tmp * ct[263] * ct[330];
  proc_control_B.ct_c[647] = ct[13] * ct[260];
  proc_control_B.ct_c[648] = ct[13] * ct[261];
  proc_control_B.ct_c[649] = proc_control_B.ct_tmp_tmp_k * ct[263] * ct[322];
  proc_control_B.ct_c[650] = proc_control_B.ct_tmp_tmp_k * ct[278] * ct[322];
  proc_control_B.ct_c[651] = proc_control_B.ct_tmp_bu * ct[263] * ct[330];
  proc_control_B.ct_c[652] = proc_control_B.ct_tmp_bu * ct[278] * ct[330];
  proc_control_B.ct_c[653] = proc_control_B.t899_tmp_m * ct[258] * ct[330];
  proc_control_B.ct_c[654] = proc_control_B.t899_tmp_m * ct[278] * ct[330];
  proc_control_B.ct_c[655] = proc_control_B.t900_tmp_h * ct[258] * ct[330];
  proc_control_B.ct_c[656] = proc_control_B.t900_tmp_h * ct[263] * ct[330];
  proc_control_B.ct_tmp_c1h = ct[6] * ct[24];
  proc_control_B.ct_c[657] = proc_control_B.ct_tmp_c1h * ct[258] * ct[322];
  proc_control_B.ct_c[658] = proc_control_B.ct_tmp_c1h * ct[262] * ct[322];
  proc_control_B.ct_c[659] = proc_control_B.ct_tmp_c1h * ct[268] * ct[330];
  proc_control_B.ct_tmp_c1h = ct[10] * ct[25];
  proc_control_B.ct_c[660] = proc_control_B.ct_tmp_c1h * ct[263] * ct[322];
  proc_control_B.ct_c[661] = proc_control_B.ct_tmp_c1h * ct[273] * ct[322];
  proc_control_B.ct_c[662] = proc_control_B.ct_tmp_c1h * ct[279] * ct[330];
  proc_control_B.ct_tmp_c1h = ct[14] * ct[26];
  proc_control_B.ct_c[663] = proc_control_B.ct_tmp_c1h * ct[278] * ct[322];
  proc_control_B.ct_c[664] = proc_control_B.ct_tmp_c1h * ct[282] * ct[322];
  proc_control_B.ct_c[665] = ct[420];
  proc_control_B.ct_c[666] = proc_control_B.ct_tmp_c1h * ct[285] * ct[330];
  proc_control_B.ct_tmp_c1h = ct[15] * ct[24];
  proc_control_B.ct_c[667] = proc_control_B.ct_tmp_c1h * ct[258] * ct[322];
  proc_control_B.ct_c[668] = proc_control_B.ct_tmp_c1h * ct[262] * ct[322];
  proc_control_B.ct_c[669] = proc_control_B.ct_tmp_c1h * ct[268] * ct[330];
  proc_control_B.ct_c[670] = ct[21] * ct[22] * ct[278] * ct[333];
  proc_control_B.ct_c[671] = ct[21] * ct[23] * ct[263] * ct[333];
  proc_control_B.ct_c[672] = ct[22] * ct[23] * ct[258] * ct[333];
  proc_control_B.ct_tmp_c1h = ct[16] * ct[25];
  proc_control_B.ct_c[673] = proc_control_B.ct_tmp_c1h * ct[263] * ct[322];
  proc_control_B.ct_c[674] = proc_control_B.ct_tmp_c1h * ct[273] * ct[322];
  proc_control_B.ct_c[675] = proc_control_B.ct_tmp_c1h * ct[279] * ct[330];
  proc_control_B.ct_c[676] = ct[421];
  proc_control_B.ct_tmp_c1h = ct[17] * ct[26];
  proc_control_B.ct_c[677] = proc_control_B.ct_tmp_c1h * ct[278] * ct[322];
  proc_control_B.ct_c[678] = proc_control_B.ct_tmp_c1h * ct[282] * ct[322];
  proc_control_B.ct_c[679] = proc_control_B.ct_tmp_c1h * ct[285] * ct[330];
  proc_control_B.ct_c[680] = ct[22] * ct[24] * ct[262] * ct[330];
  proc_control_B.ct_c[681] = ct[23] * ct[24] * ct[262] * ct[330];
  proc_control_B.ct_c[682] = ct[21] * ct[25] * ct[273] * ct[330];
  proc_control_B.ct_c[683] = ct[23] * ct[25] * ct[273] * ct[330];
  proc_control_B.ct_c[684] = ct[21] * ct[26] * ct[282] * ct[330];
  proc_control_B.ct_c[685] = ct[22] * ct[26] * ct[282] * ct[330];
  proc_control_B.ct_c[686] = ct[197] + ct[415];
  proc_control_B.ct_c[687] = ct[422];
  proc_control_B.ct_c[688] = ct[361] + ct[371];
  proc_control_B.ct_c[689] = ct[24] * ct[265];
  proc_control_B.ct_c[690] = ct[24] * ct[267];
  proc_control_B.ct_c[691] = ct[24] * ct[271];
  proc_control_B.ct_c[692] = ct[24] * ct[272];
  proc_control_B.ct_c[693] = ct[24] * ct[274];
  proc_control_B.ct_c[694] = ct[24] * ct[275];
  proc_control_B.ct_c[695] = ct[24] * ct[276];
  proc_control_B.ct_c[696] = ct[24] * ct[277];
  proc_control_B.ct_c[697] = ct[23] * ct[296];
  proc_control_B.ct_c[698] = ct[23] * ct[297];
  proc_control_B.ct_c[699] = ct[25] * ct[264];
  proc_control_B.ct_c[700] = ct[25] * ct[266];
  proc_control_B.ct_c[701] = ct[23] * ct[304];
  proc_control_B.ct_c[702] = ct[23] * ct[305];
  proc_control_B.ct_c[703] = ct[25] * ct[269];
  proc_control_B.ct_c[704] = ct[25] * ct[270];
  proc_control_B.ct_c[705] = ct[25] * ct[271];
  proc_control_B.ct_c[706] = ct[25] * ct[272];
  proc_control_B.ct_c[707] = ct[25] * ct[275];
  proc_control_B.ct_c[708] = ct[25] * ct[277];
  proc_control_B.ct_c[709] = ct[22] * ct[313];
  proc_control_B.ct_c[710] = ct[22] * ct[314];
  proc_control_B.ct_c[711] = ct[26] * ct[264];
  proc_control_B.ct_c[712] = ct[26] * ct[265];
  proc_control_B.ct_c[713] = ct[26] * ct[266];
  proc_control_B.ct_c[714] = ct[26] * ct[267];
  proc_control_B.ct_c[715] = ct[26] * ct[269];
  proc_control_B.ct_c[716] = ct[26] * ct[270];
  proc_control_B.ct_c[717] = ct[26] * ct[274];
  proc_control_B.ct_c[718] = ct[423];
  proc_control_B.ct_c[719] = ct[26] * ct[276];
  proc_control_B.ct_c[720] = ct[25] * ct[280];
  proc_control_B.ct_c[721] = ct[23] * ct[332];
  proc_control_B.ct_c[722] = ct[25] * ct[281];
  proc_control_B.ct_c[723] = ct[24] * ct[283];
  proc_control_B.ct_c[724] = ct[24] * ct[284];
  proc_control_B.ct_c[725] = ct[23] * ct[336];
  proc_control_B.ct_c[726] = ct[22] * ct[338];
  proc_control_B.ct_c[727] = ct[26] * ct[280];
  proc_control_B.ct_c[728] = ct[26] * ct[281];
  proc_control_B.ct_c[729] = ct[24] * ct[286];
  proc_control_B.ct_c[730] = ct[24] * ct[287];
  proc_control_B.ct_c[731] = ct[23] * ct[345];
  proc_control_B.ct_c[732] = ct[22] * ct[349];
  proc_control_B.ct_c[733] = ct[23] * ct[350];
  proc_control_B.ct_c[734] = ct[25] * ct[286];
  proc_control_B.ct_c[735] = ct[26] * ct[283];
  proc_control_B.ct_c[736] = ct[25] * ct[287];
  proc_control_B.ct_c[737] = ct[26] * ct[284];
  proc_control_B.ct_c[738] = ct[22] * ct[364];
  proc_control_B.ct_c[739] = ct[424];
  proc_control_B.ct_c[740] = ct[23] * ct[365];
  proc_control_B.ct_c[741] = ct[22] * ct[368];
  proc_control_B.ct_c[742] = proc_control_B.ct_tmp_bt * ct[24] * ct[322];
  proc_control_B.ct_c[743] = proc_control_B.ct_tmp_oy * ct[24] * ct[322];
  proc_control_B.ct_c[744] = ct[23] * ct[369];
  proc_control_B.ct_c[745] = ct[23] * ct[370];
  proc_control_B.ct_c[746] = ct[425];
  proc_control_B.ct_c[747] = ct[21] * ct[374];
  proc_control_B.ct_c[748] = proc_control_B.ct_tmp_ni * ct[25] * ct[322];
  proc_control_B.ct_c[749] = proc_control_B.ct_tmp_fi * ct[25] * ct[322];
  proc_control_B.ct_c[750] = ct[23] * ct[375];
  proc_control_B.ct_c[751] = ct[21] * ct[377];
  proc_control_B.ct_c[752] = proc_control_B.t901_tmp_i * ct[26] * ct[322];
  proc_control_B.ct_c[753] = proc_control_B.ct_tmp_gr * ct[26] * ct[322];
  proc_control_B.ct_c[754] = ct[22] * ct[378];
  proc_control_B.ct_c[755] = ct[21] * ct[380];
  proc_control_B.ct_c[756] = ct[22] * ct[381];
  proc_control_B.ct_c[757] = ct[21] * ct[383];
  proc_control_B.ct_c[758] = ct[23] * ct[384];
  proc_control_B.ct_c[759] = ct[22] * ct[386];
  proc_control_B.ct_c[760] = ct[23] * ct[385];
  proc_control_B.ct_c[761] = proc_control_B.t896;
  proc_control_B.ct_c[762] = proc_control_B.t897;
  proc_control_B.ct_c[763] = proc_control_B.t898_e;
  proc_control_B.ct_c[764] = proc_control_B.t899_c;
  proc_control_B.ct_c[765] = ct[426];
  proc_control_B.ct_c[766] = proc_control_B.t900_a;
  proc_control_B.ct_c[767] = proc_control_B.t901_m;
  proc_control_B.ct_c[768] = ct[7] * proc_control_B.t896;
  proc_control_B.ct_c[769] = proc_control_B.t898_tmp_f * ct[24] * ct[25] * ct
    [312];
  proc_control_B.ct_c[770] = ct[9] * proc_control_B.t896;
  proc_control_B.ct_c[771] = proc_control_B.t900_tmp_o * ct[24] * ct[25] * ct
    [312];
  proc_control_B.ct_c[772] = proc_control_B.ct_tmp_bi * ct[24] * ct[26] * ct[312];
  proc_control_B.ct_c[773] = ct[8] * proc_control_B.t897;
  proc_control_B.ct_c[774] = proc_control_B.t899_tmp_l * ct[24] * ct[26] * ct
    [312];
  proc_control_B.ct_c[775] = ct[12] * proc_control_B.t897;
  proc_control_B.ct_c[776] = ct[427];
  proc_control_B.ct_c[777] = ct[11] * proc_control_B.t898_e;
  proc_control_B.ct_c[778] = proc_control_B.t896_tmp_l * ct[25] * ct[26] * ct
    [312];
  proc_control_B.ct_c[779] = ct[13] * proc_control_B.t898_e;
  proc_control_B.ct_c[780] = proc_control_B.t897_tmp_p * ct[25] * ct[26] * ct
    [312];
  proc_control_B.ct_c[781] = ct[11] * proc_control_B.t899_c;
  proc_control_B.ct_c[782] = ct[13] * proc_control_B.t899_c;
  proc_control_B.ct_c[783] = ct[7] * proc_control_B.t900_a;
  proc_control_B.ct_c[784] = ct[8] * proc_control_B.t901_m;
  proc_control_B.ct_c[785] = ct[9] * proc_control_B.t900_a;
  proc_control_B.ct_c[786] = ct[12] * proc_control_B.t901_m;
  proc_control_B.ct_c[787] = ct[428];
  proc_control_B.ct_c[788] = ct[429];
  proc_control_B.ct_c[789] = -ct[264];
  proc_control_B.ct_c[790] = -ct[267];
  proc_control_B.ct_c[791] = -ct[269];
  proc_control_B.ct_c[792] = -ct[271];
  proc_control_B.ct_c[793] = -ct[275];
  proc_control_B.ct_c[794] = -ct[276];
  proc_control_B.ct_c[795] = ct[430];
  proc_control_B.ct_c[796] = -ct[290];
  proc_control_B.ct_c[797] = -ct[292];
  proc_control_B.ct_c[798] = -ct[302];
  proc_control_B.ct_c[799] = ct[431];
  proc_control_B.ct_c[800] = -ct[308];
  proc_control_B.ct_c[801] = ct[432];
  proc_control_B.ct_c[802] = ct[433];
  proc_control_B.ct_c[803] = ct[434];
  proc_control_ft_2_p(proc_control_B.ct_c, out1);
}

void proc_control::proc_control_AUVQuatSimFcn(const real_T in1[13], const real_T
  in3[38], real_T out1[13])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  // AUV7QuatSimFcn
  //     OUT1 = AUV7QuatSimFcn(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     17-Jul-2022 14:59:18
  proc_control_B.t20_b = in1[10] * in3[12];
  proc_control_B.t22_i = in1[10] * in3[14];
  proc_control_B.t23_p = in1[11] * in3[12];
  proc_control_B.t24_l = in1[11] * in3[13];
  proc_control_B.t27_e = in1[12] * in3[13];
  proc_control_B.t28_e = in1[12] * in3[14];
  proc_control_B.t29_p = in1[4] * in1[6];
  proc_control_B.t30_j = in1[5] * in1[6];
  proc_control_B.t31_g = in1[3] * in1[4];
  proc_control_B.t32_l = in1[3] * in1[5];
  proc_control_B.t36_j = in3[1] * in3[36];
  proc_control_B.t37_p = in3[12] * in3[12];
  proc_control_B.t38_d = rt_powd_snf(in3[12], 3.0);
  proc_control_B.t39_k = in3[13] * in3[13];
  proc_control_B.t41_m = rt_powd_snf(in3[13], 3.0);
  proc_control_B.t42_f = in3[14] * in3[14];
  proc_control_B.t44_m = rt_powd_snf(in3[14], 3.0);
  proc_control_B.t49_n = in3[0] * in3[0];
  proc_control_B.t50 = rt_powd_snf(in3[0], 3.0);
  proc_control_B.t52_m = rt_powd_snf(in3[0], 5.0);
  proc_control_B.t80_tmp_tmp = in3[3] * in3[7];
  proc_control_B.t80_tmp = proc_control_B.t80_tmp_tmp * in3[11];
  proc_control_B.t80 = proc_control_B.t80_tmp * in3[31] * in3[0];
  proc_control_B.t81_tmp_tmp = in3[3] * in3[8];
  proc_control_B.t81_tmp = proc_control_B.t81_tmp_tmp * in3[10];
  proc_control_B.t81 = proc_control_B.t81_tmp * in3[31] * in3[0];
  proc_control_B.t82_tmp_tmp = in3[4] * in3[6];
  proc_control_B.t82_tmp = proc_control_B.t82_tmp_tmp * in3[11];
  proc_control_B.t82 = proc_control_B.t82_tmp * in3[31] * in3[0];
  proc_control_B.t83_tmp_tmp_d = in3[4] * in3[8];
  proc_control_B.t83_tmp_f = proc_control_B.t83_tmp_tmp_d * in3[9];
  proc_control_B.t83_b = proc_control_B.t83_tmp_f * in3[31] * in3[0];
  proc_control_B.t84_tmp_tmp_a = in3[5] * in3[6];
  proc_control_B.t84_tmp_l = proc_control_B.t84_tmp_tmp_a * in3[10];
  proc_control_B.t84_c = proc_control_B.t84_tmp_l * in3[31] * in3[0];
  proc_control_B.t85_tmp_tmp_b = in3[5] * in3[7];
  proc_control_B.t85_tmp_l = proc_control_B.t85_tmp_tmp_b * in3[9];
  proc_control_B.t85_g = proc_control_B.t85_tmp_l * in3[31] * in3[0];
  proc_control_B.t86_c = proc_control_B.t80_tmp * in3[32] * in3[0];
  proc_control_B.t87_i = proc_control_B.t81_tmp * in3[32] * in3[0];
  proc_control_B.t88_k = proc_control_B.t82_tmp * in3[32] * in3[0];
  proc_control_B.t89_g = proc_control_B.t83_tmp_f * in3[32] * in3[0];
  proc_control_B.t90_p = proc_control_B.t84_tmp_l * in3[32] * in3[0];
  proc_control_B.t91_f = proc_control_B.t85_tmp_l * in3[32] * in3[0];
  proc_control_B.t92_tmp_tmp = in3[7] * in3[11];
  proc_control_B.t92_tmp = proc_control_B.t92_tmp_tmp * in3[33];
  proc_control_B.t92_tmp_c = proc_control_B.t92_tmp * in3[30];
  proc_control_B.t92_m = proc_control_B.t92_tmp_c * in3[0];
  proc_control_B.t93_tmp_tmp = in3[8] * in3[10];
  proc_control_B.t93_tmp = proc_control_B.t93_tmp_tmp * in3[33];
  proc_control_B.t93_tmp_l = proc_control_B.t93_tmp * in3[30];
  proc_control_B.t93_m = proc_control_B.t93_tmp_l * in3[0];
  proc_control_B.t94_l = proc_control_B.t92_tmp * in3[31] * in3[0];
  proc_control_B.t95_j = proc_control_B.t93_tmp * in3[31] * in3[0];
  proc_control_B.t96_tmp_tmp_d = in3[3] * in3[11];
  proc_control_B.t96_tmp_f = proc_control_B.t96_tmp_tmp_d * in3[34];
  proc_control_B.t96_tmp_b = proc_control_B.t96_tmp_f * in3[30];
  proc_control_B.t96_m = proc_control_B.t96_tmp_b * in3[0];
  proc_control_B.t97_tmp_tmp = in3[5] * in3[9];
  proc_control_B.t97_tmp = proc_control_B.t97_tmp_tmp * in3[34];
  proc_control_B.t97_tmp_o = proc_control_B.t97_tmp * in3[30];
  proc_control_B.t97_j = proc_control_B.t97_tmp_o * in3[0];
  proc_control_B.t100_tmp_gy = proc_control_B.t80_tmp_tmp * in3[35];
  proc_control_B.t100_tmp_k = proc_control_B.t100_tmp_gy * in3[30];
  proc_control_B.t100_i = proc_control_B.t100_tmp_k * in3[0];
  proc_control_B.t101_tmp = proc_control_B.t82_tmp_tmp * in3[35];
  proc_control_B.t101_tmp_i = proc_control_B.t101_tmp * in3[30];
  proc_control_B.t101 = proc_control_B.t101_tmp_i * in3[0];
  proc_control_B.t102 = proc_control_B.t96_tmp_f * in3[31] * in3[0];
  proc_control_B.t103_a = proc_control_B.t97_tmp * in3[31] * in3[0];
  proc_control_B.t104_h = proc_control_B.t100_tmp_gy * in3[31] * in3[0];
  proc_control_B.t105_d = proc_control_B.t101_tmp * in3[31] * in3[0];
  proc_control_B.t108_tmp_tmp = in3[11] * in3[33];
  proc_control_B.t108_tmp = proc_control_B.t108_tmp_tmp * in3[34];
  proc_control_B.t108_tmp_e = proc_control_B.t108_tmp * in3[30];
  proc_control_B.t108_i = proc_control_B.t108_tmp_e * in3[0];
  proc_control_B.t111_tmp_tmp_f = in3[7] * in3[33];
  proc_control_B.t111_tmp_g = proc_control_B.t111_tmp_tmp_f * in3[35];
  proc_control_B.t111_tmp_l = proc_control_B.t111_tmp_g * in3[30];
  proc_control_B.t111_h = proc_control_B.t111_tmp_l * in3[0];
  proc_control_B.t112 = proc_control_B.t108_tmp * in3[31] * in3[0];
  proc_control_B.t113 = proc_control_B.t111_tmp_g * in3[31] * in3[0];
  proc_control_B.t115_tmp_tmp = in3[3] * in3[34];
  proc_control_B.t115_tmp = proc_control_B.t115_tmp_tmp * in3[35];
  proc_control_B.t115_tmp_n = proc_control_B.t115_tmp * in3[30];
  proc_control_B.t115_d = proc_control_B.t115_tmp_n * in3[0];
  proc_control_B.t117 = proc_control_B.t115_tmp * in3[31] * in3[0];
  proc_control_B.t119_tmp_tmp = in3[33] * in3[34];
  proc_control_B.t119_tmp = proc_control_B.t119_tmp_tmp * in3[35];
  proc_control_B.t119_tmp_l = proc_control_B.t119_tmp * in3[30];
  proc_control_B.t119 = proc_control_B.t119_tmp_l * in3[0];
  proc_control_B.t120_l = proc_control_B.t119_tmp * in3[31] * in3[0];
  proc_control_B.in3[0] = in3[18];
  proc_control_B.in3[1] = in3[19];
  proc_control_B.in3[2] = in3[20];
  proc_control_B.in3[3] = in3[21];
  proc_control_B.in3[4] = in3[22];
  proc_control_B.in3[5] = in3[23];
  std::memcpy(&proc_control_B.in3[6], &in3[3], sizeof(real_T) << 3U);
  proc_control_B.in3[14] = in3[11];
  proc_control_B.in3[15] = in3[33];
  proc_control_B.in3[16] = in3[34];
  proc_control_B.in3[17] = in3[35];
  proc_control_B.in3[18] = in3[15];
  proc_control_B.in3[19] = in3[16];
  proc_control_B.in3[20] = in3[17];
  proc_control_B.in3[21] = in3[12];
  proc_control_B.in3[22] = in3[13];
  proc_control_B.in3[23] = in3[14];
  proc_control_B.in3[24] = in3[30];
  proc_control_B.in3[25] = in3[31];
  proc_control_B.in3[26] = in3[32];
  proc_control_B.in3[27] = in1[4];
  proc_control_B.in3[28] = in1[5];
  proc_control_B.in3[29] = in1[6];
  proc_control_B.in3[30] = in1[3];
  proc_control_B.in3[31] = in3[37];
  proc_control_B.in3[32] = in3[0];
  proc_control_B.in3[33] = in1[10];
  proc_control_B.in3[34] = in1[11];
  proc_control_B.in3[35] = in1[12];
  proc_control_B.in3[36] = in3[9] * in1[10];
  proc_control_B.in3[37] = proc_control_B.t100_i;
  proc_control_B.in3[38] = proc_control_B.t102;
  proc_control_B.in3[39] = proc_control_B.t104_h;
  proc_control_B.in3[40] = proc_control_B.t96_tmp_f * in3[32] * in3[0];
  proc_control_B.in3[41] = proc_control_B.t100_tmp_gy * in3[32] * in3[0];
  proc_control_B.in3[42] = in3[4] * in1[11];
  proc_control_B.in3[43] = proc_control_B.t119;
  proc_control_B.in3[44] = in3[7] * in1[11];
  proc_control_B.in3[45] = proc_control_B.t120_l;
  proc_control_B.in3[46] = proc_control_B.t119_tmp * in3[32] * in3[0];
  proc_control_B.in3_tmp_k = proc_control_B.t81_tmp * in3[30];
  proc_control_B.in3[47] = proc_control_B.in3_tmp_k * in3[0];
  proc_control_B.in3[48] = in3[10] * in1[11];
  proc_control_B.in3_tmp_au = proc_control_B.t82_tmp * in3[30];
  proc_control_B.in3[49] = proc_control_B.in3_tmp_au * in3[0];
  proc_control_B.in3_tmp_m2 = proc_control_B.t85_tmp_l * in3[30];
  proc_control_B.in3[50] = proc_control_B.in3_tmp_m2 * in3[0];
  proc_control_B.in3[51] = proc_control_B.t80_tmp * proc_control_B.t49_n;
  proc_control_B.in3[52] = proc_control_B.t81_tmp * proc_control_B.t49_n;
  proc_control_B.in3[53] = proc_control_B.t82_tmp * proc_control_B.t49_n;
  proc_control_B.in3[54] = proc_control_B.t83_tmp_f * proc_control_B.t49_n;
  proc_control_B.in3[55] = proc_control_B.t84_tmp_l * proc_control_B.t49_n;
  proc_control_B.in3[56] = proc_control_B.t85_tmp_l * proc_control_B.t49_n;
  proc_control_B.in3[57] = in3[5] * in1[12];
  proc_control_B.in3[58] = proc_control_B.t80_tmp * proc_control_B.t50;
  proc_control_B.in3[59] = proc_control_B.t81_tmp * proc_control_B.t50;
  proc_control_B.in3[60] = proc_control_B.t82_tmp * proc_control_B.t50;
  proc_control_B.in3[61] = proc_control_B.t83_tmp_f * proc_control_B.t50;
  proc_control_B.in3[62] = proc_control_B.t84_tmp_l * proc_control_B.t50;
  proc_control_B.in3[63] = proc_control_B.t85_tmp_l * proc_control_B.t50;
  proc_control_B.in3[64] = proc_control_B.t92_tmp * proc_control_B.t49_n;
  proc_control_B.in3[65] = proc_control_B.t93_tmp * proc_control_B.t49_n;
  proc_control_B.in3[66] = proc_control_B.t92_tmp * proc_control_B.t50;
  proc_control_B.in3[67] = proc_control_B.t93_tmp * proc_control_B.t50;
  proc_control_B.in3[68] = in3[8] * in1[12];
  proc_control_B.in3[69] = proc_control_B.t96_tmp_f * proc_control_B.t49_n;
  proc_control_B.in3[70] = proc_control_B.t97_tmp * proc_control_B.t49_n;
  proc_control_B.in3[71] = proc_control_B.t96_tmp_f * proc_control_B.t50;
  proc_control_B.in3[72] = proc_control_B.t97_tmp * proc_control_B.t50;
  proc_control_B.in3[73] = proc_control_B.t100_tmp_gy * proc_control_B.t49_n;
  proc_control_B.in3[74] = proc_control_B.t101_tmp * proc_control_B.t49_n;
  proc_control_B.in3[75] = proc_control_B.t100_tmp_gy * proc_control_B.t50;
  proc_control_B.in3[76] = proc_control_B.t101_tmp * proc_control_B.t50;
  proc_control_B.in3[77] = proc_control_B.t108_tmp * proc_control_B.t49_n;
  proc_control_B.in3[78] = proc_control_B.t108_tmp * proc_control_B.t50;
  proc_control_B.in3[79] = in3[11] * in1[12];
  proc_control_B.in3[80] = proc_control_B.t111_tmp_g * proc_control_B.t49_n;
  proc_control_B.in3[81] = proc_control_B.t111_tmp_g * proc_control_B.t50;
  proc_control_B.t81_tmp = proc_control_B.t80_tmp_tmp * in3[12];
  proc_control_B.in3[82] = proc_control_B.t81_tmp * proc_control_B.t50;
  proc_control_B.t82_tmp = proc_control_B.t82_tmp_tmp * in3[12];
  proc_control_B.in3[83] = proc_control_B.t82_tmp * proc_control_B.t50;
  proc_control_B.t80_tmp_tmp *= in3[13];
  proc_control_B.in3[84] = proc_control_B.t80_tmp_tmp * proc_control_B.t50;
  proc_control_B.t85_tmp_l = proc_control_B.t81_tmp_tmp * in3[12];
  proc_control_B.in3[85] = proc_control_B.t85_tmp_l * proc_control_B.t50;
  proc_control_B.t82_tmp_tmp *= in3[13];
  proc_control_B.in3[86] = proc_control_B.t82_tmp_tmp * proc_control_B.t50;
  proc_control_B.t96_tmp_f = proc_control_B.t84_tmp_tmp_a * in3[12];
  proc_control_B.in3[87] = proc_control_B.t96_tmp_f * proc_control_B.t50;
  proc_control_B.t100_tmp_gy = proc_control_B.t83_tmp_tmp_d * in3[13];
  proc_control_B.in3[88] = proc_control_B.t100_tmp_gy * proc_control_B.t50;
  proc_control_B.in3_tmp_d = proc_control_B.t85_tmp_tmp_b * in3[13];
  proc_control_B.in3[89] = proc_control_B.in3_tmp_d * proc_control_B.t50;
  proc_control_B.in3_tmp_kw = in3[3] * in3[10];
  proc_control_B.in3_tmp_j = proc_control_B.in3_tmp_kw * in3[12];
  proc_control_B.in3[90] = proc_control_B.in3_tmp_j * proc_control_B.t50;
  proc_control_B.in3_tmp_mcj = in3[4] * in3[9];
  proc_control_B.in3_tmp_ha = proc_control_B.in3_tmp_mcj * in3[12];
  proc_control_B.in3[91] = proc_control_B.in3_tmp_ha * proc_control_B.t50;
  proc_control_B.in3_tmp_n = proc_control_B.t96_tmp_tmp_d * in3[12];
  proc_control_B.in3[92] = proc_control_B.in3_tmp_n * proc_control_B.t50;
  proc_control_B.in3_tmp_p = proc_control_B.t97_tmp_tmp * in3[12];
  proc_control_B.in3[93] = proc_control_B.in3_tmp_p * proc_control_B.t50;
  proc_control_B.t96_tmp_tmp_d *= in3[14];
  proc_control_B.in3[94] = proc_control_B.t96_tmp_tmp_d * proc_control_B.t50;
  proc_control_B.t97_tmp_tmp *= in3[14];
  proc_control_B.in3[95] = proc_control_B.t97_tmp_tmp * proc_control_B.t50;
  proc_control_B.in3_tmp_h = in3[4] * in3[11];
  proc_control_B.in3_tmp_fs = proc_control_B.in3_tmp_h * in3[14];
  proc_control_B.in3[96] = proc_control_B.in3_tmp_fs * proc_control_B.t50;
  proc_control_B.in3_tmp_i1 = in3[5] * in3[10];
  proc_control_B.in3_tmp_aq = proc_control_B.in3_tmp_i1 * in3[14];
  proc_control_B.in3[97] = proc_control_B.in3_tmp_aq * proc_control_B.t50;
  proc_control_B.in3_tmp_c = in3[6] * in3[10];
  proc_control_B.in3_tmp_jw = proc_control_B.in3_tmp_c * in3[13];
  proc_control_B.in3[98] = proc_control_B.in3_tmp_jw * proc_control_B.t50;
  proc_control_B.in3_tmp_il = in3[7] * in3[9];
  proc_control_B.in3_tmp_de = proc_control_B.in3_tmp_il * in3[13];
  proc_control_B.in3[99] = proc_control_B.in3_tmp_de * proc_control_B.t50;
  proc_control_B.in3_tmp_ni = in3[6] * in3[11];
  proc_control_B.in3_tmp_eg = proc_control_B.in3_tmp_ni * in3[14];
  proc_control_B.in3[100] = proc_control_B.in3_tmp_eg * proc_control_B.t50;
  proc_control_B.in3_tmp_f = proc_control_B.t92_tmp_tmp * in3[13];
  proc_control_B.in3[101] = proc_control_B.in3_tmp_f * proc_control_B.t50;
  proc_control_B.in3_tmp_oc = in3[8] * in3[9];
  proc_control_B.in3_tmp_ns = proc_control_B.in3_tmp_oc * in3[14];
  proc_control_B.in3[102] = proc_control_B.in3_tmp_ns * proc_control_B.t50;
  proc_control_B.in3_tmp_ko = proc_control_B.t93_tmp_tmp * in3[13];
  proc_control_B.in3[103] = proc_control_B.in3_tmp_ko * proc_control_B.t50;
  proc_control_B.t92_tmp_tmp *= in3[14];
  proc_control_B.in3[104] = proc_control_B.t92_tmp_tmp * proc_control_B.t50;
  proc_control_B.t93_tmp_tmp *= in3[14];
  proc_control_B.in3[105] = proc_control_B.t93_tmp_tmp * proc_control_B.t50;
  proc_control_B.in3[106] = proc_control_B.t115_tmp * proc_control_B.t49_n;
  proc_control_B.in3[107] = proc_control_B.t115_tmp * proc_control_B.t50;
  proc_control_B.in3_tmp_na = proc_control_B.t111_tmp_tmp_f * in3[12];
  proc_control_B.in3[108] = proc_control_B.in3_tmp_na * proc_control_B.t50;
  proc_control_B.t111_tmp_tmp_f *= in3[13];
  proc_control_B.in3[109] = proc_control_B.t111_tmp_tmp_f * proc_control_B.t50;
  proc_control_B.in3_tmp_hy = in3[8] * in3[33];
  proc_control_B.in3_tmp_dk = proc_control_B.in3_tmp_hy * in3[12];
  proc_control_B.in3[110] = proc_control_B.in3_tmp_dk * proc_control_B.t50;
  proc_control_B.in3_tmp_pj = in3[10] * in3[33];
  proc_control_B.in3_tmp_cu = proc_control_B.in3_tmp_pj * in3[12];
  proc_control_B.in3[111] = proc_control_B.in3_tmp_cu * proc_control_B.t50;
  proc_control_B.in3_tmp_e = proc_control_B.t108_tmp_tmp * in3[12];
  proc_control_B.in3[112] = proc_control_B.in3_tmp_e * proc_control_B.t50;
  proc_control_B.t108_tmp_tmp *= in3[14];
  proc_control_B.in3[113] = proc_control_B.t108_tmp_tmp * proc_control_B.t50;
  proc_control_B.in3[114] = proc_control_B.t119_tmp * proc_control_B.t49_n;
  proc_control_B.in3[115] = proc_control_B.t119_tmp * proc_control_B.t50;
  proc_control_B.t119_tmp = proc_control_B.t115_tmp_tmp * in3[12];
  proc_control_B.in3[116] = proc_control_B.t119_tmp * proc_control_B.t50;
  proc_control_B.t115_tmp_tmp *= in3[13];
  proc_control_B.in3[117] = proc_control_B.t115_tmp_tmp * proc_control_B.t50;
  proc_control_B.in3_tmp_g = in3[5] * in3[34];
  proc_control_B.in3_tmp_g5 = proc_control_B.in3_tmp_g * in3[13];
  proc_control_B.in3[118] = proc_control_B.in3_tmp_g5 * proc_control_B.t50;
  proc_control_B.in3_tmp_cy = in3[9] * in3[34];
  proc_control_B.in3_tmp_ca = proc_control_B.in3_tmp_cy * in3[13];
  proc_control_B.in3[119] = proc_control_B.in3_tmp_ca * proc_control_B.t50;
  proc_control_B.in3_tmp = in3[11] * in3[34];
  proc_control_B.in3_tmp_o = proc_control_B.in3_tmp * in3[13];
  proc_control_B.in3[120] = proc_control_B.in3_tmp_o * proc_control_B.t50;
  proc_control_B.in3_tmp *= in3[14];
  proc_control_B.in3[121] = proc_control_B.in3_tmp * proc_control_B.t50;
  proc_control_B.in3_tmp_a = in3[3] * in3[35];
  proc_control_B.in3_tmp_ad = proc_control_B.in3_tmp_a * in3[12];
  proc_control_B.in3[122] = proc_control_B.in3_tmp_ad * proc_control_B.t50;
  proc_control_B.in3_tmp_a *= in3[14];
  proc_control_B.in3[123] = proc_control_B.in3_tmp_a * proc_control_B.t50;
  proc_control_B.in3_tmp_gn = in3[4] * in3[35];
  proc_control_B.in3_tmp_ep = proc_control_B.in3_tmp_gn * in3[14];
  proc_control_B.in3[124] = proc_control_B.in3_tmp_ep * proc_control_B.t50;
  proc_control_B.in3_tmp_bb = in3[6] * in3[35];
  proc_control_B.in3_tmp_kr = proc_control_B.in3_tmp_bb * in3[14];
  proc_control_B.in3[125] = proc_control_B.in3_tmp_kr * proc_control_B.t50;
  proc_control_B.in3_tmp_m = in3[7] * in3[35];
  proc_control_B.in3_tmp_b = proc_control_B.in3_tmp_m * in3[13];
  proc_control_B.in3[126] = proc_control_B.in3_tmp_b * proc_control_B.t50;
  proc_control_B.in3_tmp_m *= in3[14];
  proc_control_B.in3[127] = proc_control_B.in3_tmp_m * proc_control_B.t50;
  proc_control_B.in3_tmp_ba = proc_control_B.t119_tmp_tmp * in3[12];
  proc_control_B.in3[128] = proc_control_B.in3_tmp_ba * proc_control_B.t50;
  proc_control_B.t119_tmp_tmp *= in3[13];
  proc_control_B.in3[129] = proc_control_B.t119_tmp_tmp * proc_control_B.t50;
  proc_control_B.in3_tmp_i = in3[33] * in3[35];
  proc_control_B.in3_tmp_mg = proc_control_B.in3_tmp_i * in3[12];
  proc_control_B.in3[130] = proc_control_B.in3_tmp_mg * proc_control_B.t50;
  proc_control_B.in3_tmp_i *= in3[14];
  proc_control_B.in3[131] = proc_control_B.in3_tmp_i * proc_control_B.t50;
  proc_control_B.in3_tmp_ir = in3[34] * in3[35];
  proc_control_B.in3_tmp_mc = proc_control_B.in3_tmp_ir * in3[13];
  proc_control_B.in3[132] = proc_control_B.in3_tmp_mc * proc_control_B.t50;
  proc_control_B.in3_tmp_ir *= in3[14];
  proc_control_B.in3[133] = proc_control_B.in3_tmp_ir * proc_control_B.t50;
  proc_control_B.in3[134] = proc_control_B.t22_i;
  proc_control_B.in3[135] = proc_control_B.in3_tmp_k * in3[31] * in3[32];
  proc_control_B.in3[136] = proc_control_B.in3_tmp_au * in3[31] * in3[32];
  proc_control_B.in3[137] = proc_control_B.in3_tmp_m2 * in3[31] * in3[32];
  proc_control_B.in3[138] = proc_control_B.t92_tmp_c * in3[31] * in3[32];
  proc_control_B.in3[139] = proc_control_B.t96_tmp_b * in3[31] * in3[32];
  proc_control_B.in3[140] = proc_control_B.t23_p;
  proc_control_B.in3[141] = proc_control_B.t100_tmp_k * in3[31] * in3[32];
  proc_control_B.in3[142] = proc_control_B.t119_tmp_l * in3[31] * in3[32];
  proc_control_B.in3[143] = in3[30] * proc_control_B.t80;
  proc_control_B.in3[144] = in3[30] * proc_control_B.t81;
  proc_control_B.in3[145] = in3[30] * proc_control_B.t82;
  proc_control_B.in3[146] = in3[30] * proc_control_B.t83_b;
  proc_control_B.in3[147] = in3[30] * proc_control_B.t84_c;
  proc_control_B.in3[148] = in3[30] * proc_control_B.t85_g;
  proc_control_B.in3[149] = in3[30] * proc_control_B.t86_c;
  proc_control_B.in3[150] = in3[30] * proc_control_B.t87_i;
  proc_control_B.in3[151] = in3[30] * proc_control_B.t88_k;
  proc_control_B.in3[152] = in3[30] * proc_control_B.t89_g;
  proc_control_B.in3[153] = in3[30] * proc_control_B.t90_p;
  proc_control_B.in3[154] = in3[30] * proc_control_B.t91_f;
  proc_control_B.in3[155] = in3[32] * proc_control_B.t80;
  proc_control_B.in3[156] = in3[32] * proc_control_B.t81;
  proc_control_B.in3[157] = in3[32] * proc_control_B.t82;
  proc_control_B.in3[158] = in3[32] * proc_control_B.t83_b;
  proc_control_B.in3[159] = in3[32] * proc_control_B.t84_c;
  proc_control_B.in3[160] = in3[32] * proc_control_B.t85_g;
  proc_control_B.in3[161] = in3[31] * proc_control_B.t92_m;
  proc_control_B.in3[162] = in3[31] * proc_control_B.t93_m;
  proc_control_B.in3[163] = in3[32] * proc_control_B.t92_m;
  proc_control_B.in3[164] = in3[32] * proc_control_B.t93_m;
  proc_control_B.in3[165] = in3[31] * proc_control_B.t96_m;
  proc_control_B.in3[166] = in3[31] * proc_control_B.t97_j;
  proc_control_B.in3[167] = in3[32] * proc_control_B.t94_l;
  proc_control_B.in3[168] = in3[32] * proc_control_B.t95_j;
  proc_control_B.in3[169] = in3[31] * proc_control_B.t100_i;
  proc_control_B.in3[170] = in3[31] * proc_control_B.t101;
  proc_control_B.in3[171] = in3[32] * proc_control_B.t96_m;
  proc_control_B.in3[172] = in3[32] * proc_control_B.t97_j;
  proc_control_B.in3[173] = in3[32] * proc_control_B.t100_i;
  proc_control_B.in3[174] = in3[32] * proc_control_B.t101;
  proc_control_B.in3[175] = in3[32] * proc_control_B.t102;
  proc_control_B.in3[176] = proc_control_B.t27_e;
  proc_control_B.in3[177] = in3[32] * proc_control_B.t103_a;
  proc_control_B.in3[178] = in3[31] * proc_control_B.t108_i;
  proc_control_B.in3[179] = in3[32] * proc_control_B.t104_h;
  proc_control_B.in3[180] = in3[32] * proc_control_B.t105_d;
  proc_control_B.in3[181] = in3[31] * proc_control_B.t111_h;
  proc_control_B.in3[182] = in3[32] * proc_control_B.t108_i;
  proc_control_B.in3[183] = in3[32] * proc_control_B.t111_h;
  proc_control_B.in3[184] = in3[32] * proc_control_B.t112;
  proc_control_B.in3_tmp_k = proc_control_B.in3_tmp_n * in3[30];
  proc_control_B.in3[185] = proc_control_B.in3_tmp_k * in3[31] * in3[0];
  proc_control_B.in3_tmp_au = proc_control_B.in3_tmp_p * in3[30];
  proc_control_B.in3[186] = proc_control_B.in3_tmp_au * in3[31] * in3[0];
  proc_control_B.in3_tmp_m2 = proc_control_B.in3_tmp_f * in3[30];
  proc_control_B.in3[187] = proc_control_B.in3_tmp_m2 * in3[31] * in3[0];
  proc_control_B.t92_tmp_c = proc_control_B.in3_tmp_ko * in3[30];
  proc_control_B.in3[188] = proc_control_B.t92_tmp_c * in3[31] * in3[0];
  proc_control_B.in3[189] = in3[31] * proc_control_B.t115_d;
  proc_control_B.in3[190] = in3[32] * proc_control_B.t113;
  proc_control_B.t96_tmp_b = proc_control_B.t81_tmp * in3[30];
  proc_control_B.in3[191] = proc_control_B.t96_tmp_b * in3[32] * in3[0];
  proc_control_B.t100_tmp_k = proc_control_B.t82_tmp * in3[30];
  proc_control_B.in3[192] = proc_control_B.t100_tmp_k * in3[32] * in3[0];
  proc_control_B.t100_i = proc_control_B.t92_tmp_tmp * in3[30];
  proc_control_B.in3[193] = proc_control_B.t100_i * in3[32] * in3[0];
  proc_control_B.t102 = proc_control_B.t93_tmp_tmp * in3[30];
  proc_control_B.in3[194] = proc_control_B.t102 * in3[32] * in3[0];
  proc_control_B.in3[195] = in3[32] * proc_control_B.t115_d;
  proc_control_B.t104_h = proc_control_B.t80_tmp_tmp * in3[31];
  proc_control_B.in3[196] = proc_control_B.t104_h * in3[32] * in3[0];
  proc_control_B.in3[197] = proc_control_B.t29_p;
  proc_control_B.t119_tmp_l = proc_control_B.t82_tmp_tmp * in3[31];
  proc_control_B.in3[198] = proc_control_B.t119_tmp_l * in3[32] * in3[0];
  proc_control_B.in3_tmp_oa = proc_control_B.t96_tmp_tmp_d * in3[31];
  proc_control_B.in3[199] = proc_control_B.in3_tmp_oa * in3[32] * in3[0];
  proc_control_B.in3_tmp_k2 = proc_control_B.t97_tmp_tmp * in3[31];
  proc_control_B.in3[200] = proc_control_B.in3_tmp_k2 * in3[32] * in3[0];
  proc_control_B.in3_tmp_mw = proc_control_B.in3_tmp_e * in3[30];
  proc_control_B.in3[201] = proc_control_B.in3_tmp_mw * in3[31] * in3[0];
  proc_control_B.in3[202] = in3[32] * proc_control_B.t117;
  proc_control_B.in3[203] = in3[31] * proc_control_B.t119;
  proc_control_B.in3_tmp_ob = proc_control_B.in3_tmp_na * in3[30];
  proc_control_B.in3[204] = proc_control_B.in3_tmp_ob * in3[32] * in3[0];
  proc_control_B.in3[205] = in3[32] * proc_control_B.t119;
  proc_control_B.t119 = proc_control_B.in3_tmp_o * in3[30];
  proc_control_B.in3[206] = proc_control_B.t119 * in3[31] * in3[0];
  proc_control_B.in3_tmp_ocx = proc_control_B.t111_tmp_tmp_f * in3[31];
  proc_control_B.in3[207] = proc_control_B.in3_tmp_ocx * in3[32] * in3[0];
  proc_control_B.in3_tmp_bc = proc_control_B.t108_tmp_tmp * in3[31];
  proc_control_B.in3[208] = proc_control_B.in3_tmp_bc * in3[32] * in3[0];
  proc_control_B.in3[209] = in3[32] * proc_control_B.t120_l;
  proc_control_B.t120_l = proc_control_B.t119_tmp * in3[30];
  proc_control_B.in3[210] = proc_control_B.t120_l * in3[32] * in3[0];
  proc_control_B.in3_tmp_ii = proc_control_B.in3_tmp_ad * in3[30];
  proc_control_B.in3[211] = proc_control_B.in3_tmp_ii * in3[31] * in3[0];
  proc_control_B.in3_tmp_mu = proc_control_B.in3_tmp_b * in3[30];
  proc_control_B.in3[212] = proc_control_B.in3_tmp_mu * in3[31] * in3[0];
  proc_control_B.in3_tmp_ml = proc_control_B.in3_tmp * in3[30];
  proc_control_B.in3[213] = proc_control_B.in3_tmp_ml * in3[32] * in3[0];
  proc_control_B.in3_tmp_ih = proc_control_B.t115_tmp_tmp * in3[31];
  proc_control_B.in3[214] = proc_control_B.in3_tmp_ih * in3[32] * in3[0];
  proc_control_B.in3_tmp_no = proc_control_B.in3_tmp_m * in3[30];
  proc_control_B.in3[215] = proc_control_B.in3_tmp_no * in3[32] * in3[0];
  proc_control_B.in3_tmp_jv = proc_control_B.in3_tmp_a * in3[31];
  proc_control_B.in3[216] = proc_control_B.in3_tmp_jv * in3[32] * in3[0];
  proc_control_B.in3_tmp_ej = proc_control_B.in3_tmp_ba * in3[30];
  proc_control_B.in3[217] = proc_control_B.in3_tmp_ej * in3[32] * in3[0];
  proc_control_B.in3_tmp_k4 = proc_control_B.in3_tmp_mg * in3[30];
  proc_control_B.in3[218] = proc_control_B.in3_tmp_k4 * in3[31] * in3[0];
  proc_control_B.in3_tmp_id = proc_control_B.t119_tmp_tmp * in3[31];
  proc_control_B.in3[219] = proc_control_B.in3_tmp_id * in3[32] * in3[0];
  proc_control_B.in3_tmp_l = proc_control_B.in3_tmp_mc * in3[30];
  proc_control_B.in3[220] = proc_control_B.in3_tmp_l * in3[31] * in3[0];
  proc_control_B.in3_tmp_eh = proc_control_B.in3_tmp_i * in3[31];
  proc_control_B.in3[221] = proc_control_B.in3_tmp_eh * in3[32] * in3[0];
  proc_control_B.in3_tmp_ld = proc_control_B.in3_tmp_ir * in3[30];
  proc_control_B.in3[222] = proc_control_B.in3_tmp_ld * in3[32] * in3[0];
  proc_control_B.in3[223] = proc_control_B.t20_b + proc_control_B.t24_l;
  proc_control_B.in3[224] = proc_control_B.t20_b + proc_control_B.t28_e;
  proc_control_B.in3[225] = proc_control_B.t24_l + proc_control_B.t28_e;
  proc_control_B.in3[226] = proc_control_B.t30_j + proc_control_B.t31_g;
  proc_control_B.in3[227] = -proc_control_B.t80;
  proc_control_B.in3[228] = -proc_control_B.t83_b;
  proc_control_B.in3[229] = -proc_control_B.t84_c;
  proc_control_B.in3[230] = -proc_control_B.t86_c;
  proc_control_B.in3[231] = -proc_control_B.t89_g;
  proc_control_B.in3[232] = in1[7] * in3[30];
  proc_control_B.in3[233] = -proc_control_B.t90_p;
  proc_control_B.in3[234] = -proc_control_B.t93_m;
  proc_control_B.in3[235] = -proc_control_B.t95_j;
  proc_control_B.in3[236] = -proc_control_B.t97_j;
  proc_control_B.in3[237] = -(proc_control_B.t93_tmp * in3[32] * in3[0]);
  proc_control_B.in3[238] = -proc_control_B.t101;
  proc_control_B.in3[239] = -proc_control_B.t103_a;
  proc_control_B.in3[240] = -proc_control_B.t105_d;
  proc_control_B.in3[241] = -(proc_control_B.t97_tmp * in3[32] * in3[0]);
  proc_control_B.in3[242] = -proc_control_B.t108_i;
  proc_control_B.in3[243] = in1[8] * in3[31];
  proc_control_B.in3[244] = -(proc_control_B.t101_tmp * in3[32] * in3[0]);
  proc_control_B.in3[245] = -proc_control_B.t111_h;
  proc_control_B.in3[246] = -proc_control_B.t112;
  proc_control_B.in3[247] = -proc_control_B.t113;
  proc_control_B.in3[248] = -(proc_control_B.t108_tmp * in3[32] * in3[0]);
  proc_control_B.in3[249] = -proc_control_B.t115_d;
  proc_control_B.in3[250] = -(proc_control_B.t111_tmp_g * in3[32] * in3[0]);
  proc_control_B.in3[251] = -proc_control_B.t117;
  proc_control_B.in3[252] = -(proc_control_B.t115_tmp * in3[32] * in3[0]);
  proc_control_B.in3[253] = in1[9] * in3[32];
  proc_control_B.in3[254] = proc_control_B.t36_j;
  proc_control_B.in3[255] = in3[12] * proc_control_B.t41_m *
    proc_control_B.t52_m;
  proc_control_B.in3[256] = in3[13] * proc_control_B.t38_d *
    proc_control_B.t52_m;
  proc_control_B.in3[257] = in3[12] * proc_control_B.t44_m *
    proc_control_B.t52_m;
  proc_control_B.in3[258] = proc_control_B.t37_p;
  proc_control_B.in3[259] = in3[14] * proc_control_B.t38_d *
    proc_control_B.t52_m;
  proc_control_B.in3[260] = in3[13] * proc_control_B.t44_m *
    proc_control_B.t52_m;
  proc_control_B.in3[261] = in3[14] * proc_control_B.t41_m *
    proc_control_B.t52_m;
  proc_control_B.in3[262] = proc_control_B.t38_d;
  proc_control_B.in3[263] = proc_control_B.t39_k;
  proc_control_B.in3[264] = proc_control_B.t81_tmp_tmp * in3[13] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[265] = proc_control_B.t83_tmp_tmp_d * in3[12] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[266] = proc_control_B.t84_tmp_tmp_a * in3[13] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[267] = proc_control_B.t85_tmp_tmp_b * in3[12] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[268] = proc_control_B.t37_p * proc_control_B.t37_p;
  proc_control_B.in3[269] = proc_control_B.in3_tmp_kw * in3[13] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[270] = proc_control_B.in3_tmp_mcj * in3[13] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[271] = proc_control_B.in3_tmp_h * in3[12] * in3[13] *
    proc_control_B.t50;
  proc_control_B.in3[272] = proc_control_B.in3_tmp_i1 * in3[12] * in3[13] *
    proc_control_B.t50;
  proc_control_B.in3[273] = proc_control_B.t41_m;
  proc_control_B.in3[274] = proc_control_B.in3_tmp_c * in3[12] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[275] = proc_control_B.in3_tmp_ni * in3[12] * in3[13] *
    proc_control_B.t50;
  proc_control_B.in3[276] = proc_control_B.in3_tmp_il * in3[12] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[277] = proc_control_B.in3_tmp_oc * in3[12] * in3[13] *
    proc_control_B.t50;
  proc_control_B.in3[278] = proc_control_B.t42_f;
  proc_control_B.in3[279] = proc_control_B.t39_k * proc_control_B.t39_k;
  proc_control_B.in3[280] = proc_control_B.in3_tmp_hy * in3[13] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[281] = proc_control_B.in3_tmp_pj * in3[13] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[282] = proc_control_B.t44_m;
  proc_control_B.in3[283] = proc_control_B.in3_tmp_g * in3[12] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[284] = proc_control_B.in3_tmp_cy * in3[12] * in3[14] *
    proc_control_B.t50;
  proc_control_B.in3[285] = proc_control_B.t42_f * proc_control_B.t42_f;
  proc_control_B.in3[286] = proc_control_B.in3_tmp_gn * in3[12] * in3[13] *
    proc_control_B.t50;
  proc_control_B.in3[287] = proc_control_B.in3_tmp_bb * in3[12] * in3[13] *
    proc_control_B.t50;
  proc_control_B.in3[288] = proc_control_B.t96_tmp_b * proc_control_B.t49_n;
  proc_control_B.in3[289] = proc_control_B.t100_tmp_k * proc_control_B.t49_n;
  proc_control_B.in3[290] = proc_control_B.t85_tmp_l * in3[30] *
    proc_control_B.t49_n;
  proc_control_B.in3[291] = proc_control_B.t96_tmp_f * in3[30] *
    proc_control_B.t49_n;
  proc_control_B.in3[292] = proc_control_B.in3_tmp_j * in3[30] *
    proc_control_B.t49_n;
  proc_control_B.in3[293] = proc_control_B.in3_tmp_ha * in3[30] *
    proc_control_B.t49_n;
  proc_control_B.in3[294] = proc_control_B.in3_tmp_k * proc_control_B.t49_n;
  proc_control_B.in3[295] = proc_control_B.in3_tmp_au * proc_control_B.t49_n;
  proc_control_B.in3[296] = proc_control_B.in3_tmp_m2 * proc_control_B.t49_n;
  proc_control_B.in3[297] = proc_control_B.t92_tmp_c * proc_control_B.t49_n;
  proc_control_B.in3[298] = proc_control_B.t100_i * proc_control_B.t49_n;
  proc_control_B.in3[299] = proc_control_B.t102 * proc_control_B.t49_n;
  proc_control_B.in3[300] = proc_control_B.t104_h * proc_control_B.t49_n;
  proc_control_B.in3[301] = proc_control_B.t119_tmp_l * proc_control_B.t49_n;
  proc_control_B.in3[302] = proc_control_B.t100_tmp_gy * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[303] = proc_control_B.in3_tmp_d * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[304] = proc_control_B.in3_tmp_n * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[305] = proc_control_B.in3_tmp_p * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[306] = proc_control_B.in3_tmp_oa * proc_control_B.t49_n;
  proc_control_B.in3[307] = proc_control_B.in3_tmp_k2 * proc_control_B.t49_n;
  proc_control_B.in3[308] = proc_control_B.in3_tmp_jw * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[309] = proc_control_B.in3_tmp_de * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[310] = proc_control_B.in3_tmp_f * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[311] = proc_control_B.in3_tmp_ko * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[312] = proc_control_B.t49_n;
  proc_control_B.in3[313] = proc_control_B.t81_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[314] = proc_control_B.t82_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[315] = proc_control_B.t80_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[316] = proc_control_B.t82_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[317] = proc_control_B.t96_tmp_tmp_d * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[318] = proc_control_B.t97_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[319] = proc_control_B.in3_tmp_fs * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[320] = proc_control_B.in3_tmp_aq * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[321] = proc_control_B.in3_tmp_eg * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[322] = proc_control_B.t50;
  proc_control_B.in3[323] = proc_control_B.in3_tmp_ns * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[324] = proc_control_B.t92_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[325] = proc_control_B.t93_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[326] = proc_control_B.in3_tmp_ob * proc_control_B.t49_n;
  proc_control_B.in3[327] = proc_control_B.in3_tmp_dk * in3[30] *
    proc_control_B.t49_n;
  proc_control_B.in3[328] = proc_control_B.in3_tmp_cu * in3[30] *
    proc_control_B.t49_n;
  proc_control_B.in3[329] = proc_control_B.in3_tmp_mw * proc_control_B.t49_n;
  proc_control_B.in3[330] = proc_control_B.t49_n * proc_control_B.t49_n;
  proc_control_B.in3[331] = proc_control_B.in3_tmp_ocx * proc_control_B.t49_n;
  proc_control_B.in3[332] = proc_control_B.in3_tmp_e * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[333] = proc_control_B.t52_m;
  proc_control_B.in3[334] = proc_control_B.in3_tmp_bc * proc_control_B.t49_n;
  proc_control_B.in3[335] = proc_control_B.t120_l * proc_control_B.t49_n;
  proc_control_B.in3[336] = proc_control_B.t119 * proc_control_B.t49_n;
  proc_control_B.in3[337] = proc_control_B.in3_tmp_ml * proc_control_B.t49_n;
  proc_control_B.in3[338] = proc_control_B.in3_tmp_na * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[339] = proc_control_B.t111_tmp_tmp_f * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[340] = proc_control_B.t108_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[341] = in1[4] * in1[5] * 2.0;
  proc_control_B.in3[342] = proc_control_B.in3_tmp_ii * proc_control_B.t49_n;
  proc_control_B.in3[343] = proc_control_B.in3_tmp_ih * proc_control_B.t49_n;
  proc_control_B.in3[344] = proc_control_B.in3_tmp_g5 * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[345] = proc_control_B.in3_tmp_mu * proc_control_B.t49_n;
  proc_control_B.in3[346] = proc_control_B.in3_tmp_no * proc_control_B.t49_n;
  proc_control_B.in3[347] = proc_control_B.in3_tmp_ca * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[348] = proc_control_B.in3_tmp_o * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[349] = proc_control_B.t119_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[350] = proc_control_B.in3_tmp_ad * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[351] = proc_control_B.t29_p * 2.0;
  proc_control_B.in3[352] = proc_control_B.t115_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[353] = proc_control_B.in3_tmp_jv * proc_control_B.t49_n;
  proc_control_B.in3[354] = proc_control_B.in3_tmp_b * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[355] = proc_control_B.in3_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[356] = proc_control_B.in3_tmp_ej * proc_control_B.t49_n;
  proc_control_B.in3[357] = proc_control_B.in3_tmp_a * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[358] = proc_control_B.in3_tmp_ep * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[359] = proc_control_B.in3_tmp_kr * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[360] = proc_control_B.in3_tmp_m * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[361] = proc_control_B.t30_j * 2.0;
  proc_control_B.in3[362] = proc_control_B.in3_tmp_k4 * proc_control_B.t49_n;
  proc_control_B.in3[363] = proc_control_B.in3_tmp_id * proc_control_B.t49_n;
  proc_control_B.in3[364] = proc_control_B.in3_tmp_ba * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[365] = proc_control_B.in3_tmp_mg * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[366] = proc_control_B.t119_tmp_tmp * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3[367] = proc_control_B.in3_tmp_eh * proc_control_B.t49_n;
  proc_control_B.in3_tmp_k = in3[7] * in3[12] * in3[14];
  proc_control_B.in3[368] = proc_control_B.in3_tmp_k * in3[30] *
    proc_control_B.t50;
  proc_control_B.in3_tmp_au = in3[11] * in3[12] * in3[13];
  proc_control_B.in3[369] = proc_control_B.in3_tmp_au * in3[30] *
    proc_control_B.t50;
  proc_control_B.in3[370] = proc_control_B.in3_tmp_l * proc_control_B.t49_n;
  proc_control_B.in3[371] = proc_control_B.t31_g * 2.0;
  proc_control_B.in3[372] = proc_control_B.in3_tmp_ld * proc_control_B.t49_n;
  proc_control_B.in3[373] = proc_control_B.in3_tmp_i * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3_tmp_m2 = in3[3] * in3[13] * in3[14];
  proc_control_B.in3[374] = proc_control_B.in3_tmp_m2 * in3[31] *
    proc_control_B.t50;
  proc_control_B.in3[375] = proc_control_B.in3_tmp_au * in3[31] *
    proc_control_B.t50;
  proc_control_B.in3[376] = proc_control_B.in3_tmp_mc * in3[31] *
    proc_control_B.t49_n;
  proc_control_B.in3[377] = proc_control_B.in3_tmp_m2 * in3[32] *
    proc_control_B.t50;
  proc_control_B.in3[378] = proc_control_B.in3_tmp_k * in3[32] *
    proc_control_B.t50;
  proc_control_B.in3[379] = proc_control_B.in3_tmp_ir * in3[32] *
    proc_control_B.t49_n;
  proc_control_B.in3_tmp_k = in3[13] * in3[33] * in3[14];
  proc_control_B.in3[380] = proc_control_B.in3_tmp_k * in3[31] *
    proc_control_B.t50;
  proc_control_B.in3_tmp_au = in3[12] * in3[34] * in3[14];
  proc_control_B.in3[381] = proc_control_B.in3_tmp_au * in3[30] *
    proc_control_B.t50;
  proc_control_B.in3[382] = proc_control_B.t32_l * 2.0;
  proc_control_B.in3[383] = proc_control_B.in3_tmp_k * in3[32] *
    proc_control_B.t50;
  proc_control_B.in3_tmp_k = in3[12] * in3[35] * in3[13];
  proc_control_B.in3[384] = proc_control_B.in3_tmp_k * in3[30] *
    proc_control_B.t50;
  proc_control_B.in3[385] = proc_control_B.in3_tmp_k * in3[31] *
    proc_control_B.t50;
  proc_control_B.in3[386] = proc_control_B.in3_tmp_au * in3[32] *
    proc_control_B.t50;
  proc_control_B.in3[387] = in1[3] * in1[6] * 2.0;
  proc_control_B.in3_tmp_k = proc_control_B.t80_tmp * in3[30];
  proc_control_B.in3[388] = -(proc_control_B.in3_tmp_k * in3[0]);
  proc_control_B.in3_tmp_au = proc_control_B.t83_tmp_f * in3[30];
  proc_control_B.in3[389] = -(proc_control_B.in3_tmp_au * in3[0]);
  proc_control_B.in3_tmp_m2 = proc_control_B.t84_tmp_l * in3[30];
  proc_control_B.in3[390] = -(proc_control_B.in3_tmp_m2 * in3[0]);
  proc_control_B.in3[391] = in3[27] * std::abs(in1[10]);
  proc_control_B.in3[392] = in3[28] * std::abs(in1[11]);
  proc_control_B.in3[393] = in3[29] * std::abs(in1[12]);
  proc_control_B.in3[394] = -(proc_control_B.in3_tmp_k * in3[31] * in3[32]);
  proc_control_B.in3[395] = -(proc_control_B.in3_tmp_au * in3[31] * in3[32]);
  proc_control_B.in3[396] = in3[24] * std::abs(in1[7]);
  proc_control_B.in3[397] = -(proc_control_B.in3_tmp_m2 * in3[31] * in3[32]);
  proc_control_B.in3[398] = -(proc_control_B.t93_tmp_l * in3[31] * in3[32]);
  proc_control_B.in3[399] = -(proc_control_B.t97_tmp_o * in3[31] * in3[32]);
  proc_control_B.in3[400] = -(proc_control_B.t101_tmp_i * in3[31] * in3[32]);
  proc_control_B.in3[401] = -(proc_control_B.t108_tmp_e * in3[31] * in3[32]);
  proc_control_B.in3[402] = -(proc_control_B.t111_tmp_l * in3[31] * in3[32]);
  proc_control_B.in3[403] = -(proc_control_B.t115_tmp_n * in3[31] * in3[32]);
  proc_control_B.in3[404] = in3[25] * std::abs(in1[8]);
  proc_control_B.in3[405] = in3[26] * std::abs(in1[9]);
  proc_control_B.in3[406] = -(in1[10] * in3[33]);
  proc_control_B.in3[407] = -(in1[11] * in3[34]);
  proc_control_B.in3[408] = -(in1[12] * in3[35]);
  proc_control_B.in3[409] = -proc_control_B.t22_i;
  proc_control_B.in3[410] = -proc_control_B.t23_p;
  proc_control_B.in3[411] = -proc_control_B.t27_e;
  proc_control_B.in3[412] = in1[4] * in1[4] * 2.0;
  proc_control_B.in3[413] = in1[5] * in1[5] * 2.0;
  proc_control_B.in3[414] = in1[6] * in1[6] * 2.0;
  proc_control_B.in3[415] = -proc_control_B.t32_l;
  proc_control_B.in3[416] = -proc_control_B.t36_j;
  proc_control_B.in3[417] = in1[11] * in3[14] + in1[7];
  proc_control_B.in3[418] = in1[10] * in3[13] + in1[9];
  proc_control_B.in3[419] = in3[12] * in1[12] + in1[8];
  proc_control_B.in3[420] = in3[3] * in1[10];
  proc_control_B.in3[421] = proc_control_B.t81;
  proc_control_B.in3[422] = proc_control_B.t82;
  proc_control_B.in3[423] = proc_control_B.t85_g;
  proc_control_B.in3[424] = proc_control_B.t87_i;
  proc_control_B.in3[425] = proc_control_B.t88_k;
  proc_control_B.in3[426] = in3[6] * in1[10];
  proc_control_B.in3[427] = proc_control_B.t91_f;
  proc_control_B.in3[428] = proc_control_B.t92_m;
  proc_control_B.in3[429] = proc_control_B.t94_l;
  proc_control_B.in3[430] = proc_control_B.t96_m;
  proc_control_B.in3[431] = proc_control_B.t92_tmp * in3[32] * in3[0];
  proc_control_B.in3[432] = in1[7];
  proc_control_B.in3[433] = in1[8];
  proc_control_B.in3[434] = in1[9];
  proc_control_ft_1_p(proc_control_B.in3, out1);
}

real_T proc_control::proc_control_norm_pr(const real_T x[4])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;

  // Start for MATLABSystem: '<S140>/MATLAB System'
  absxk = std::abs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  absxk = std::abs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  absxk = std::abs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  // Start for MATLABSystem: '<S140>/MATLAB System'
  absxk = std::abs(x[3]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * std::sqrt(y);
}

void proc_control::proc_control_TrimPlant_stepImpl(TrimPlant_proc_control_T
  *b_this, const real_T u[8], real_T y[13], real_T ref[130], real_T constMec_rho,
  real_T constMec_g, real_T constMec_mass, real_T constMec_volume, real_T
  constMec_sub_height, const real_T constMec_rg[3], const real_T constMec_rb[3],
  const real_T constMec_cdl[6], const real_T constMec_cdq[6], const real_T
  constMec_added_mass[6], const real_T constMec_I[9], const real_T
  constMec_thrusters[48], real_T A[169], real_T B[104], real_T C[169], real_T D
  [104], real_T U[8], real_T Y[13], real_T X[13], real_T DX[13], real_T Z[13])
{
  // Start for MATLABSystem: '<S140>/MATLAB System'
  //  Step fonction
  // ------------------------------------------------------------------------------ 
  //  check if block need to be init
  //  fonction qui initialise les constante mec
  // ------------------------------------------------------------------------------ 
  if (!b_this->init) {
    b_this->constValues[0] = constMec_mass;
    b_this->constValues[1] = constMec_volume;
    b_this->constValues[2] = constMec_sub_height;
    std::memcpy(&b_this->constValues[3], &constMec_I[0], 9U * sizeof(real_T));
    b_this->constValues[12] = constMec_rg[0];
    b_this->constValues[15] = constMec_rb[0];
    b_this->constValues[13] = constMec_rg[1];
    b_this->constValues[16] = constMec_rb[1];
    b_this->constValues[14] = constMec_rg[2];
    b_this->constValues[17] = constMec_rb[2];
    for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 6;
         proc_control_B.b_i_g++) {
      b_this->constValues[proc_control_B.b_i_g + 18] =
        constMec_cdl[proc_control_B.b_i_g];
      b_this->constValues[proc_control_B.b_i_g + 24] =
        constMec_cdq[proc_control_B.b_i_g];
      b_this->constValues[proc_control_B.b_i_g + 30] =
        constMec_added_mass[proc_control_B.b_i_g];
    }

    b_this->constValues[36] = constMec_rho;
    b_this->constValues[37] = constMec_g;

    //  Fonction qui genere la matrice B
    // ------------------------------------------------------------------------------ 
    //  Crée la matrice thrusters
    proc_control_B.constMec_rg = constMec_rg[0];
    proc_control_B.constMec_rg_a = constMec_rg[1];
    proc_control_B.constMec_rg_h = constMec_rg[2];
    proc_control_B.b_i_g = 0;
    for (proc_control_B.b_i = 0; proc_control_B.b_i < 8; proc_control_B.b_i++) {
      proc_control_B.dv24[0] = constMec_thrusters[proc_control_B.b_i + 24] *
        0.017453292519943295;
      proc_control_B.dv24[1] = constMec_thrusters[proc_control_B.b_i + 32] *
        0.017453292519943295;
      proc_control_B.dv24[2] = constMec_thrusters[proc_control_B.b_i + 40] *
        0.017453292519943295;
      proc_control_eul2quat(proc_control_B.dv24, proc_control_B.qt);

      //  convertir les angle d'euler en uaternion
      // ThrusterVector
      //     Tt = ThrusterVector(IN1,IN2,IN3)
      //     This function was generated by the Symbolic Math Toolbox version 9.1. 
      //     12-Jul-2022 16:58:54
      proc_control_B.t5 = proc_control_B.qt[2] * proc_control_B.qt[3] * 2.0;
      proc_control_B.t6_i = proc_control_B.qt[0] * proc_control_B.qt[1] * 2.0;
      proc_control_B.t14_e = proc_control_B.constMec_rg -
        constMec_thrusters[proc_control_B.b_i];
      proc_control_B.t15_j = proc_control_B.constMec_rg_a -
        constMec_thrusters[proc_control_B.b_i + 8];
      proc_control_B.t16_o = proc_control_B.constMec_rg_h -
        constMec_thrusters[proc_control_B.b_i + 16];
      proc_control_B.t17_f = proc_control_B.qt[1] * proc_control_B.qt[3] * 2.0 +
        proc_control_B.qt[0] * proc_control_B.qt[2] * 2.0;
      proc_control_B.t18 = proc_control_B.t5 - proc_control_B.t6_i;
      proc_control_B.t19_m = (proc_control_B.qt[1] * proc_control_B.qt[1] * 2.0
        + proc_control_B.qt[2] * proc_control_B.qt[2] * 2.0) - 1.0;
      proc_control_B.Tm[proc_control_B.b_i_g] = -proc_control_B.t17_f;
      proc_control_B.Tm[proc_control_B.b_i_g + 1] = -proc_control_B.t5 +
        proc_control_B.t6_i;
      proc_control_B.Tm[proc_control_B.b_i_g + 2] = proc_control_B.t19_m;
      proc_control_B.Tm[proc_control_B.b_i_g + 3] = -proc_control_B.t15_j *
        proc_control_B.t19_m - proc_control_B.t16_o * proc_control_B.t18;
      proc_control_B.Tm[proc_control_B.b_i_g + 4] = proc_control_B.t14_e *
        proc_control_B.t19_m + proc_control_B.t16_o * proc_control_B.t17_f;
      proc_control_B.Tm[proc_control_B.b_i_g + 5] = proc_control_B.t14_e *
        proc_control_B.t18 - proc_control_B.t15_j * proc_control_B.t17_f;

      //  Calculer le vecteur thrusters
      proc_control_B.b_i_g += 6;
    }

    //  prendre la matrice M
    // AUVModelMatrices
    //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
    //     This function was generated by the Symbolic Math Toolbox version 9.1. 
    //     12-Jul-2022 16:58:53
    proc_control_B.t5 = b_this->constValues[0] * b_this->constValues[12];
    proc_control_B.t14_e = b_this->constValues[0] * b_this->constValues[13];
    proc_control_B.t15_j = b_this->constValues[0] * b_this->constValues[14];

    //  M inverse * Tm
    proc_control_B.b_this_m1[0] = -b_this->constValues[30] + b_this->
      constValues[0];
    proc_control_B.b_this_m1[1] = 0.0;
    proc_control_B.b_this_m1[2] = 0.0;
    proc_control_B.b_this_m1[3] = 0.0;
    proc_control_B.b_this_m1[4] = proc_control_B.t15_j;
    proc_control_B.b_this_m1[5] = -proc_control_B.t14_e;
    proc_control_B.b_this_m1[6] = 0.0;
    proc_control_B.b_this_m1[7] = -b_this->constValues[31] + b_this->
      constValues[0];
    proc_control_B.b_this_m1[8] = 0.0;
    proc_control_B.b_this_m1[9] = -proc_control_B.t15_j;
    proc_control_B.b_this_m1[10] = 0.0;
    proc_control_B.b_this_m1[11] = proc_control_B.t5;
    proc_control_B.b_this_m1[12] = 0.0;
    proc_control_B.b_this_m1[13] = 0.0;
    proc_control_B.b_this_m1[14] = -b_this->constValues[32] +
      b_this->constValues[0];
    proc_control_B.b_this_m1[15] = proc_control_B.t14_e;
    proc_control_B.b_this_m1[16] = -proc_control_B.t5;
    proc_control_B.b_this_m1[17] = 0.0;
    proc_control_B.b_this_m1[18] = 0.0;
    proc_control_B.b_this_m1[19] = -proc_control_B.t15_j;
    proc_control_B.b_this_m1[20] = proc_control_B.t14_e;
    proc_control_B.b_this_m1[21] = b_this->constValues[3] - b_this->constValues
      [33];
    proc_control_B.b_this_m1[22] = b_this->constValues[6];
    proc_control_B.b_this_m1[23] = b_this->constValues[9];
    proc_control_B.b_this_m1[24] = proc_control_B.t15_j;
    proc_control_B.b_this_m1[25] = 0.0;
    proc_control_B.b_this_m1[26] = -proc_control_B.t5;
    proc_control_B.b_this_m1[27] = b_this->constValues[4];
    proc_control_B.b_this_m1[28] = b_this->constValues[7] - b_this->constValues
      [34];
    proc_control_B.b_this_m1[29] = b_this->constValues[10];
    proc_control_B.b_this_m1[30] = -proc_control_B.t14_e;
    proc_control_B.b_this_m1[31] = proc_control_B.t5;
    proc_control_B.b_this_m1[32] = 0.0;
    proc_control_B.b_this_m1[33] = b_this->constValues[5];
    proc_control_B.b_this_m1[34] = b_this->constValues[8];
    proc_control_B.b_this_m1[35] = b_this->constValues[11] - b_this->
      constValues[35];
    proc_control_mldivide_pr351(proc_control_B.b_this_m1, proc_control_B.Tm);
    for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 8;
         proc_control_B.b_i_g++) {
      for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 7;
           proc_control_B.b_k_i++) {
        b_this->Bc[proc_control_B.b_k_i + 13 * proc_control_B.b_i_g] = 0.0;
      }

      for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 6;
           proc_control_B.b_k_i++) {
        b_this->Bc[(proc_control_B.b_k_i + 13 * proc_control_B.b_i_g) + 7] =
          proc_control_B.Tm[6 * proc_control_B.b_i_g + proc_control_B.b_k_i];
      }
    }

    b_this->init = true;
  }

  //  Regarder la discontinuité entre le qk et qk-1 pour la mesure
  // =================================================================
  //  Fonction qui assure la continuité entre 2 quaternions
  //  Regarder la discontinuité entre le qk et qk-1
  proc_control_B.qt[0] = y[3];
  proc_control_B.qt[1] = y[4];
  proc_control_B.qt[2] = y[5];
  proc_control_B.qt[3] = y[6];
  if (((b_this->qkm[0] * y[3] + b_this->qkm[1] * y[4]) + b_this->qkm[2] * y[5])
      + b_this->qkm[3] * y[6] < 0.0) {
    proc_control_B.qt[0] = -y[3];
    proc_control_B.qt[1] = -y[4];
    proc_control_B.qt[2] = -y[5];
    proc_control_B.qt[3] = -y[6];
  }

  //  Regarder la discontinuité entre le qk et qk + p pour la trajectoire
  //  Fonction qui regarde la discontinuiter entre 2 generations du planner
  // ------------------------------------------------------------------------------ 
  //  check fist ref
  // =================================================================
  //  Fonction qui assure la continuité entre 2 quaternions
  //  Regarder la discontinuité entre le qk et qk-1
  y[3] = proc_control_B.qt[0];
  b_this->qkm[0] = proc_control_B.qt[0];
  proc_control_B.qt[0] = ref[30];
  y[4] = proc_control_B.qt[1];
  b_this->qkm[1] = proc_control_B.qt[1];
  proc_control_B.qt[1] = ref[40];
  y[5] = proc_control_B.qt[2];
  b_this->qkm[2] = proc_control_B.qt[2];
  proc_control_B.qt[2] = ref[50];
  y[6] = proc_control_B.qt[3];
  b_this->qkm[3] = proc_control_B.qt[3];
  proc_control_B.qt[3] = ref[60];
  if (((b_this->qkt[0] * ref[30] + b_this->qkt[1] * ref[40]) + b_this->qkt[2] *
       ref[50]) + b_this->qkt[3] * ref[60] < 0.0) {
    proc_control_B.qt[0] = -ref[30];
    proc_control_B.qt[1] = -ref[40];
    proc_control_B.qt[2] = -ref[50];
    proc_control_B.qt[3] = -ref[60];
  }

  ref[30] = proc_control_B.qt[0];
  ref[40] = proc_control_B.qt[1];
  ref[50] = proc_control_B.qt[2];
  ref[60] = proc_control_B.qt[3];
  for (proc_control_B.b_i = 0; proc_control_B.b_i < 9; proc_control_B.b_i++) {
    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    proc_control_B.constMec_rg = ref[proc_control_B.b_i + 31];
    proc_control_B.qt[0] = proc_control_B.constMec_rg;
    proc_control_B.constMec_rg_a = ref[proc_control_B.b_i + 41];
    proc_control_B.qt[1] = proc_control_B.constMec_rg_a;
    proc_control_B.constMec_rg_h = ref[proc_control_B.b_i + 51];
    proc_control_B.qt[2] = proc_control_B.constMec_rg_h;
    proc_control_B.t5 = ref[proc_control_B.b_i + 61];
    proc_control_B.qt[3] = proc_control_B.t5;
    if (((ref[proc_control_B.b_i + 30] * proc_control_B.constMec_rg +
          ref[proc_control_B.b_i + 40] * proc_control_B.constMec_rg_a) +
         ref[proc_control_B.b_i + 50] * proc_control_B.constMec_rg_h) +
        ref[proc_control_B.b_i + 60] * proc_control_B.t5 < 0.0) {
      proc_control_B.qt[0] = -proc_control_B.constMec_rg;
      proc_control_B.qt[1] = -proc_control_B.constMec_rg_a;
      proc_control_B.qt[2] = -proc_control_B.constMec_rg_h;
      proc_control_B.qt[3] = -proc_control_B.t5;
    }

    ref[proc_control_B.b_i + 31] = proc_control_B.qt[0];
    ref[proc_control_B.b_i + 41] = proc_control_B.qt[1];
    ref[proc_control_B.b_i + 51] = proc_control_B.qt[2];
    ref[proc_control_B.b_i + 61] = proc_control_B.qt[3];
  }

  //  save quat for next step
  b_this->qkt[0] = ref[30];
  b_this->qkt[1] = ref[40];
  b_this->qkt[2] = ref[50];
  b_this->qkt[3] = ref[60];

  //  Calculer le residue de mesure
  //  Fonction qui calcule le residue de mesure
  // ------------------------------------------------------------------------------ 
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 13; proc_control_B.b_i_g
       ++) {
    Z[proc_control_B.b_i_g] = y[proc_control_B.b_i_g] - b_this->
      xl[proc_control_B.b_i_g];
  }

  //  compute the quaternion error
  //  https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6864719/
  proc_control_B.t14_e = ((b_this->xl[3] * b_this->xl[3] + b_this->xl[4] *
    b_this->xl[4]) + b_this->xl[5] * b_this->xl[5]) + b_this->xl[6] * b_this->
    xl[6];
  proc_control_B.qt[0] = b_this->xl[3] / proc_control_B.t14_e;
  proc_control_B.qt[1] = -b_this->xl[4] / proc_control_B.t14_e;
  proc_control_B.qt[2] = -b_this->xl[5] / proc_control_B.t14_e;
  proc_control_B.qt[3] = -b_this->xl[6] / proc_control_B.t14_e;
  proc_control_quatmultiply(&y[3], proc_control_B.qt, &Z[3]);

  //  Linéariser le systeme.
  //  Fonction qui linéarise le systeme
  // ------------------------------------------------------------------------------ 
  //  Lineariser le système
  proc_cont_AUVQuatJacobianMatrix(y, b_this->constValues, proc_control_B.Ac);
  std::memcpy(&C[0], &b_this->C[0], 169U * sizeof(real_T));
  std::memcpy(&D[0], &b_this->D[0], 104U * sizeof(real_T));

  //  Discrétiser le système.
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 169;
       proc_control_B.b_i_g++) {
    proc_control_B.Ac_m[proc_control_B.b_i_g] =
      proc_control_B.Ac[proc_control_B.b_i_g] * 0.1;
  }

  proc_control_expm(proc_control_B.Ac_m, A);

  //  Fossen 2021 Eq B.10/B.9 page 662
  std::memset(&proc_control_B.b_this_m1[0], 0, 36U * sizeof(real_T));
  proc_control_B.b_k_i = 0;
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 6; proc_control_B.b_i_g
       ++) {
    proc_control_B.b_this_m1[proc_control_B.b_k_i] = 1.0;
    proc_control_B.b_k_i += 7;
  }

  proc_control_B.b_i_g = 0;
  proc_control_B.b_k_i = 0;
  for (proc_control_B.b_i = 0; proc_control_B.b_i < 6; proc_control_B.b_i++) {
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 6; proc_control_B.i_n++) {
      proc_control_B.b_I_tmp = proc_control_B.i_n + proc_control_B.b_i_g;
      proc_control_B.b_I_tmp_a = (proc_control_B.i_n + proc_control_B.b_k_i) +
        98;
      proc_control_B.b_this_m1[proc_control_B.b_I_tmp] =
        A[proc_control_B.b_I_tmp_a] -
        proc_control_B.b_this_m1[proc_control_B.b_I_tmp];
      proc_control_B.Ac_j[proc_control_B.b_I_tmp] =
        proc_control_B.Ac[proc_control_B.b_I_tmp_a];
    }

    proc_control_B.b_i_g += 6;
    proc_control_B.b_k_i += 13;
  }

  proc_control_mldivide_pr351e(proc_control_B.Ac_j, proc_control_B.b_this_m1);

  //  Fossen 2021 Eq B.11 p 662
  //  Calculer F(x(k),u(k))
  for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n++) {
    DX[proc_control_B.i_n] = y[proc_control_B.i_n];
    proc_control_B.x_dot_kk[proc_control_B.i_n] = 0.0;
  }

  for (proc_control_B.b_i = 0; proc_control_B.b_i < 10; proc_control_B.b_i++) {
    //  X(k+1) = A(xk)*xk + B*xk
    proc_control_AUVQuatSimFcn(DX, b_this->constValues, proc_control_B.dv14);

    //  Intégration trapezoidale
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n++)
    {
      proc_control_B.constMec_rg = 0.0;
      proc_control_B.b_i_g = 0;
      for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 8;
           proc_control_B.b_k_i++) {
        proc_control_B.constMec_rg += b_this->Bc[proc_control_B.b_i_g +
          proc_control_B.i_n] * u[proc_control_B.b_k_i];
        proc_control_B.b_i_g += 13;
      }

      proc_control_B.constMec_rg += proc_control_B.dv14[proc_control_B.i_n];
      DX[proc_control_B.i_n] += (proc_control_B.constMec_rg +
        proc_control_B.x_dot_kk[proc_control_B.i_n]) * 0.01 / 2.0;
      proc_control_B.x_dot_kk[proc_control_B.i_n] = proc_control_B.constMec_rg;
    }

    //  correct Quaternion
    // =================================================================
    //  Fonction qui normalise un quaternion.
    //  quatnormalize de matlab demande areospace block set pour etre compilable. 
    //  Fossen(2021) eq 2.86 p.37
    proc_control_B.constMec_rg = proc_control_norm_pr(&DX[3]);
    DX[3] /= proc_control_B.constMec_rg;
    DX[4] /= proc_control_B.constMec_rg;
    DX[5] /= proc_control_B.constMec_rg;
    DX[6] /= proc_control_B.constMec_rg;
  }

  //  Nominal conditions for discrete-time plant
  // (Cc*x + Dc*u).';
  //  save prediction for next step
  std::memcpy(&b_this->xl[0], &DX[0], 13U * sizeof(real_T));
  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 6; proc_control_B.b_i_g
       ++) {
    proc_control_B.b_k_i = 0;
    proc_control_B.b_i = 0;
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 8; proc_control_B.i_n++) {
      proc_control_B.constMec_rg = 0.0;
      proc_control_B.b_I_tmp_a = 0;
      for (proc_control_B.b_I_tmp = 0; proc_control_B.b_I_tmp < 6;
           proc_control_B.b_I_tmp++) {
        proc_control_B.constMec_rg += b_this->Bc[(proc_control_B.b_I_tmp +
          proc_control_B.b_i) + 7] *
          proc_control_B.b_this_m1[proc_control_B.b_I_tmp_a +
          proc_control_B.b_i_g];
        proc_control_B.b_I_tmp_a += 6;
      }

      proc_control_B.Tm[proc_control_B.b_k_i + proc_control_B.b_i_g] =
        proc_control_B.constMec_rg;
      proc_control_B.b_k_i += 6;
      proc_control_B.b_i += 13;
    }
  }

  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 8; proc_control_B.b_i_g
       ++) {
    for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 7;
         proc_control_B.b_k_i++) {
      B[proc_control_B.b_k_i + 13 * proc_control_B.b_i_g] = 0.0;
    }

    for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 6;
         proc_control_B.b_k_i++) {
      B[(proc_control_B.b_k_i + 13 * proc_control_B.b_i_g) + 7] =
        proc_control_B.Tm[6 * proc_control_B.b_i_g + proc_control_B.b_k_i];
    }

    U[proc_control_B.b_i_g] = u[proc_control_B.b_i_g];
  }

  for (proc_control_B.b_i_g = 0; proc_control_B.b_i_g < 13; proc_control_B.b_i_g
       ++) {
    proc_control_B.constMec_rg = y[proc_control_B.b_i_g];
    Y[proc_control_B.b_i_g] = proc_control_B.constMec_rg;
    X[proc_control_B.b_i_g] = proc_control_B.constMec_rg;
    DX[proc_control_B.b_i_g] -= proc_control_B.constMec_rg;
  }

  // End of Start for MATLABSystem: '<S140>/MATLAB System'
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_kron(const int32_T b_A_size[1], real_T K_data[],
  int32_T K_size[2])
{
  int32_T b;
  int32_T kidx;
  static const int8_T b_B[64]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  K_size[0] = b_A_size[0] << 3;
  K_size[1] = 8;
  kidx = -1;
  b = b_A_size[0];
  for (int32_T j2{0}; j2 < 8; j2++) {
    for (int32_T i1{0}; i1 < b; i1++) {
      for (int32_T i2{0}; i2 < 8; i2++) {
        K_data[(kidx + i2) + 1] = b_B[(j2 << 3) + i2];
      }

      kidx += 8;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T b;
  proc_control_B.mc = b_A_size[0] - 1;
  b_C_size[0] = b_A_size[0];
  b = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (int32_T j{0}; j < b; j++) {
    int32_T c;
    proc_control_B.coffset = (proc_control_B.mc + 1) * j;
    proc_control_B.boffset = j * b_B_size[0];
    if (proc_control_B.mc >= 0) {
      std::memset(&b_C_data[proc_control_B.coffset], 0, static_cast<uint32_T>
                  (((proc_control_B.mc + proc_control_B.coffset) -
                    proc_control_B.coffset) + 1) * sizeof(real_T));
    }

    c = b_A_size[1];
    for (int32_T i{0}; i < c; i++) {
      proc_control_B.aoffset = i * b_A_size[0];
      proc_control_B.bkj = b_B_data[proc_control_B.boffset + i];
      for (int32_T b_i{0}; b_i <= proc_control_B.mc; b_i++) {
        int32_T tmp;
        tmp = proc_control_B.coffset + b_i;
        b_C_data[tmp] += b_A_data[proc_control_B.aoffset + b_i] *
          proc_control_B.bkj;
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_constraintcoef(const real_T b_A[441], const
  real_T Bu[168], const real_T Bv[21], const real_T b_C[273], const real_T Dv[13],
  const real_T Jm_data[], const int32_T Jm_size[2], real_T SuJm_data[], int32_T
  SuJm_size[2], real_T Sx_data[], int32_T Sx_size[2], real_T Su1_data[], int32_T
  Su1_size[2], real_T Hv_data[], int32_T Hv_size[2])
{
  int8_T tmp;
  uint8_T i;
  proc_control_B.b_p = static_cast<real_T>(Jm_size[0]) / 8.0;
  proc_control_B.pny1 = (proc_control_B.b_p - 1.0) * 13.0;
  proc_control_B.loop_ub_tmp = static_cast<int32_T>(proc_control_B.b_p - 1.0) +
    2;
  for (proc_control_B.i_i = 0; proc_control_B.i_i < 13; proc_control_B.i_i++) {
    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 21;
         proc_control_B.loop_ub_b++) {
      proc_control_B.CA_on = 0.0;
      for (proc_control_B.input_sizes_idx_0 = 0;
           proc_control_B.input_sizes_idx_0 < 21;
           proc_control_B.input_sizes_idx_0++) {
        proc_control_B.CA_on += b_C[13 * proc_control_B.input_sizes_idx_0 +
          proc_control_B.i_i] * b_A[21 * proc_control_B.loop_ub_b +
          proc_control_B.input_sizes_idx_0];
      }

      proc_control_B.CA[proc_control_B.i_i + 13 * proc_control_B.loop_ub_b] =
        proc_control_B.CA_on;
    }

    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 8;
         proc_control_B.loop_ub_b++) {
      proc_control_B.CA_on = 0.0;
      for (proc_control_B.input_sizes_idx_0 = 0;
           proc_control_B.input_sizes_idx_0 < 21;
           proc_control_B.input_sizes_idx_0++) {
        proc_control_B.CA_on += b_C[13 * proc_control_B.input_sizes_idx_0 +
          proc_control_B.i_i] * Bu[21 * proc_control_B.loop_ub_b +
          proc_control_B.input_sizes_idx_0];
      }

      proc_control_B.Sum_k[proc_control_B.i_i + 13 * proc_control_B.loop_ub_b] =
        proc_control_B.CA_on;
    }

    proc_control_B.CA_on = 0.0;
    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 21;
         proc_control_B.loop_ub_b++) {
      proc_control_B.CA_on += b_C[13 * proc_control_B.loop_ub_b +
        proc_control_B.i_i] * Bv[proc_control_B.loop_ub_b];
    }

    proc_control_B.varargin_1_data_j[proc_control_B.i_i] = proc_control_B.CA_on;
    proc_control_B.varargin_1_data_j[proc_control_B.i_i + 13] =
      Dv[proc_control_B.i_i];
  }

  proc_control_B.loop_ub_b = static_cast<int32_T>(proc_control_B.b_p - 1.0) * 13;
  if (proc_control_B.loop_ub_b - 1 >= 0) {
    std::memset(&proc_control_B.varargin_1_data_j[26], 0, static_cast<uint32_T>
                (proc_control_B.loop_ub_b) * sizeof(real_T));
  }

  if (static_cast<int32_T>(proc_control_B.pny1) != 0) {
    proc_control_B.input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.pny1);
    tmp = static_cast<int8_T>(static_cast<int32_T>(proc_control_B.pny1));
  } else {
    proc_control_B.input_sizes_idx_0 = 0;
    tmp = 0;
  }

  Hv_size[0] = tmp + 13;
  Hv_size[1] = static_cast<int32_T>(proc_control_B.b_p - 1.0) + 2;
  for (proc_control_B.i_i = 0; proc_control_B.i_i < proc_control_B.loop_ub_tmp;
       proc_control_B.i_i++) {
    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
         proc_control_B.loop_ub_b++) {
      Hv_data[proc_control_B.loop_ub_b + (tmp + 13) * proc_control_B.i_i] =
        proc_control_B.varargin_1_data_j[13 * proc_control_B.i_i +
        proc_control_B.loop_ub_b];
    }

    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b <
         proc_control_B.input_sizes_idx_0; proc_control_B.loop_ub_b++) {
      Hv_data[(proc_control_B.loop_ub_b + (tmp + 13) * proc_control_B.i_i) + 13]
        = 0.0;
    }
  }

  proc_control_B.input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.pny1);
  Sx_size[0] = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Sx_size[1] = 21;
  for (proc_control_B.i_i = 0; proc_control_B.i_i < 21; proc_control_B.i_i++) {
    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
         proc_control_B.loop_ub_b++) {
      Sx_data[proc_control_B.loop_ub_b + (static_cast<int32_T>
        (proc_control_B.pny1) + 13) * proc_control_B.i_i] = proc_control_B.CA[13
        * proc_control_B.i_i + proc_control_B.loop_ub_b];
    }

    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b <
         proc_control_B.input_sizes_idx_0; proc_control_B.loop_ub_b++) {
      Sx_data[(proc_control_B.loop_ub_b + (static_cast<int32_T>
                (proc_control_B.pny1) + 13) * proc_control_B.i_i) + 13] = 0.0;
    }
  }

  Su1_size[0] = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Su1_size[1] = 8;
  for (proc_control_B.i_i = 0; proc_control_B.i_i < 8; proc_control_B.i_i++) {
    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
         proc_control_B.loop_ub_b++) {
      Su1_data[proc_control_B.loop_ub_b + (static_cast<int32_T>
        (proc_control_B.pny1) + 13) * proc_control_B.i_i] =
        proc_control_B.Sum_k[13 * proc_control_B.i_i + proc_control_B.loop_ub_b];
    }

    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b <
         proc_control_B.input_sizes_idx_0; proc_control_B.loop_ub_b++) {
      Su1_data[(proc_control_B.loop_ub_b + (static_cast<int32_T>
                 (proc_control_B.pny1) + 13) * proc_control_B.i_i) + 13] = 0.0;
    }
  }

  proc_control_B.CA_on = (proc_control_B.b_p - 1.0) * 8.0;
  proc_control_B.input_sizes_idx_0_tmp = static_cast<int32_T>
    (proc_control_B.CA_on) + 8;
  std::memcpy(&proc_control_B.varargin_1_data_j[0], &proc_control_B.Sum_k[0],
              104U * sizeof(real_T));
  proc_control_B.loop_ub_tmp = static_cast<int32_T>(proc_control_B.CA_on) * 13;
  if (proc_control_B.loop_ub_tmp - 1 >= 0) {
    std::memset(&proc_control_B.varargin_1_data_j[104], 0, static_cast<uint32_T>
                (proc_control_B.loop_ub_tmp) * sizeof(real_T));
  }

  if ((static_cast<int32_T>(proc_control_B.pny1) != 0) && (static_cast<int32_T>
       (proc_control_B.b_p * 8.0) != 0)) {
    proc_control_B.b_input_sizes_idx_0 = static_cast<int32_T>
      (proc_control_B.pny1);
    tmp = static_cast<int8_T>(static_cast<int32_T>(proc_control_B.pny1));
  } else {
    proc_control_B.b_input_sizes_idx_0 = 0;
    tmp = 0;
  }

  proc_control_B.Su_size[0] = tmp + 13;
  proc_control_B.Su_size[1] = static_cast<int32_T>(proc_control_B.CA_on) + 8;
  for (proc_control_B.i_i = 0; proc_control_B.i_i <
       proc_control_B.input_sizes_idx_0_tmp; proc_control_B.i_i++) {
    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
         proc_control_B.loop_ub_b++) {
      proc_control_B.Su_data[proc_control_B.loop_ub_b + (tmp + 13) *
        proc_control_B.i_i] = proc_control_B.varargin_1_data_j[13 *
        proc_control_B.i_i + proc_control_B.loop_ub_b];
    }

    for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b <
         proc_control_B.b_input_sizes_idx_0; proc_control_B.loop_ub_b++) {
      proc_control_B.Su_data[(proc_control_B.loop_ub_b + (tmp + 13) *
        proc_control_B.i_i) + 13] = 0.0;
    }
  }

  proc_control_B.b_input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.b_p -
    1.0);
  if (static_cast<int32_T>(proc_control_B.b_p - 1.0) - 1 >= 0) {
    if (proc_control_B.CA_on < 1.0) {
      proc_control_B.loop_ub_e = -1;
    } else {
      proc_control_B.loop_ub_e = static_cast<int32_T>(proc_control_B.CA_on) - 1;
    }

    proc_control_B.loop_ub_h = static_cast<int32_T>(proc_control_B.b_p);
  }

  for (proc_control_B.input_sizes_idx_0_tmp = 0;
       proc_control_B.input_sizes_idx_0_tmp < proc_control_B.b_input_sizes_idx_0;
       proc_control_B.input_sizes_idx_0_tmp++) {
    i = static_cast<uint8_T>(static_cast<uint32_T>
      (proc_control_B.input_sizes_idx_0_tmp + 1) * 13U + 1U);
    for (proc_control_B.i_i = 0; proc_control_B.i_i < 13; proc_control_B.i_i++)
    {
      proc_control_B.rows[proc_control_B.i_i] = static_cast<uint8_T>(
        static_cast<uint32_T>(proc_control_B.i_i) + i);
      proc_control_B.loop_ub_b = 0;
      proc_control_B.input_sizes_idx_0 = 0;
      for (proc_control_B.loop_ub_tmp = 0; proc_control_B.loop_ub_tmp < 8;
           proc_control_B.loop_ub_tmp++) {
        proc_control_B.CA_on = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++)
        {
          proc_control_B.CA_on += proc_control_B.CA[proc_control_B.Sum_tmp +
            proc_control_B.i_i] * Bu[proc_control_B.i1 +
            proc_control_B.input_sizes_idx_0];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.Sum_tmp = proc_control_B.loop_ub_b + proc_control_B.i_i;
        proc_control_B.Sum_k[proc_control_B.Sum_tmp] += proc_control_B.CA_on;
        proc_control_B.loop_ub_b += 13;
        proc_control_B.input_sizes_idx_0 += 21;
      }
    }

    proc_control_B.input_sizes_idx_0 = proc_control_B.loop_ub_e + 9;
    for (proc_control_B.i_i = 0; proc_control_B.i_i < 8; proc_control_B.i_i++) {
      for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
           proc_control_B.loop_ub_b++) {
        proc_control_B.loop_ub_tmp = 13 * proc_control_B.i_i +
          proc_control_B.loop_ub_b;
        proc_control_B.CA_on = proc_control_B.Sum_k[proc_control_B.loop_ub_tmp];
        Su1_data[(proc_control_B.rows[proc_control_B.loop_ub_b] +
                  (static_cast<int32_T>(proc_control_B.pny1) + 13) *
                  proc_control_B.i_i) - 1] = proc_control_B.CA_on;
        proc_control_B.varargin_1_data_j[proc_control_B.loop_ub_tmp] =
          proc_control_B.CA_on;
      }
    }

    for (proc_control_B.i_i = 0; proc_control_B.i_i <= proc_control_B.loop_ub_e;
         proc_control_B.i_i++) {
      for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
           proc_control_B.loop_ub_b++) {
        proc_control_B.varargin_1_data_j[proc_control_B.loop_ub_b + 13 *
          (proc_control_B.i_i + 8)] = proc_control_B.Su_data[((tmp + 13) *
          proc_control_B.i_i + proc_control_B.rows[proc_control_B.loop_ub_b]) -
          14];
      }
    }

    for (proc_control_B.i_i = 0; proc_control_B.i_i <
         proc_control_B.input_sizes_idx_0; proc_control_B.i_i++) {
      for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
           proc_control_B.loop_ub_b++) {
        proc_control_B.Su_data[(proc_control_B.rows[proc_control_B.loop_ub_b] +
          (tmp + 13) * proc_control_B.i_i) - 1] =
          proc_control_B.varargin_1_data_j[13 * proc_control_B.i_i +
          proc_control_B.loop_ub_b];
      }
    }

    for (proc_control_B.i_i = 0; proc_control_B.i_i < 13; proc_control_B.i_i++)
    {
      proc_control_B.CA_on = 0.0;
      proc_control_B.loop_ub_b = 0;
      for (proc_control_B.input_sizes_idx_0 = 0;
           proc_control_B.input_sizes_idx_0 < 21;
           proc_control_B.input_sizes_idx_0++) {
        proc_control_B.CA_on += proc_control_B.CA[proc_control_B.loop_ub_b +
          proc_control_B.i_i] * Bv[proc_control_B.input_sizes_idx_0];
        proc_control_B.loop_ub_b += 13;
      }

      proc_control_B.CA_d[proc_control_B.i_i] = proc_control_B.CA_on;
    }

    proc_control_B.loop_ub_tmp = static_cast<int32_T>(proc_control_B.b_p) + 1;
    std::memcpy(&proc_control_B.CA_data[0], &proc_control_B.CA_d[0], 13U *
                sizeof(real_T));
    for (proc_control_B.i_i = 0; proc_control_B.i_i < proc_control_B.loop_ub_h;
         proc_control_B.i_i++) {
      for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
           proc_control_B.loop_ub_b++) {
        proc_control_B.CA_data[proc_control_B.loop_ub_b + 13 *
          (proc_control_B.i_i + 1)] = Hv_data[(Hv_size[0] * proc_control_B.i_i +
          proc_control_B.rows[proc_control_B.loop_ub_b]) - 14];
      }
    }

    for (proc_control_B.i_i = 0; proc_control_B.i_i < proc_control_B.loop_ub_tmp;
         proc_control_B.i_i++) {
      for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
           proc_control_B.loop_ub_b++) {
        Hv_data[(proc_control_B.rows[proc_control_B.loop_ub_b] + Hv_size[0] *
                 proc_control_B.i_i) - 1] = proc_control_B.CA_data[13 *
          proc_control_B.i_i + proc_control_B.loop_ub_b];
      }
    }

    for (proc_control_B.i_i = 0; proc_control_B.i_i < 13; proc_control_B.i_i++)
    {
      proc_control_B.loop_ub_b = 0;
      proc_control_B.input_sizes_idx_0 = 0;
      for (proc_control_B.loop_ub_tmp = 0; proc_control_B.loop_ub_tmp < 21;
           proc_control_B.loop_ub_tmp++) {
        proc_control_B.CA_on = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++)
        {
          proc_control_B.CA_on += proc_control_B.CA[proc_control_B.Sum_tmp +
            proc_control_B.i_i] * b_A[proc_control_B.i1 +
            proc_control_B.input_sizes_idx_0];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.CA_o[proc_control_B.loop_ub_b + proc_control_B.i_i] =
          proc_control_B.CA_on;
        proc_control_B.loop_ub_b += 13;
        proc_control_B.input_sizes_idx_0 += 21;
      }
    }

    std::memcpy(&proc_control_B.CA[0], &proc_control_B.CA_o[0], 273U * sizeof
                (real_T));
    for (proc_control_B.i_i = 0; proc_control_B.i_i < 21; proc_control_B.i_i++)
    {
      for (proc_control_B.loop_ub_b = 0; proc_control_B.loop_ub_b < 13;
           proc_control_B.loop_ub_b++) {
        Sx_data[(proc_control_B.rows[proc_control_B.loop_ub_b] +
                 (static_cast<int32_T>(proc_control_B.pny1) + 13) *
                 proc_control_B.i_i) - 1] = proc_control_B.CA[13 *
          proc_control_B.i_i + proc_control_B.loop_ub_b];
      }
    }
  }

  proc_control_mtimes(proc_control_B.Su_data, proc_control_B.Su_size, Jm_data,
                      Jm_size, SuJm_data, SuJm_size);
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape(boolean_T isMrows_data[], real_T
  Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436], const
  real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p)
{
  int32_T loop_ub_tmp;
  loop_ub_tmp = b_p * 13;
  if (loop_ub_tmp - 1 >= 0) {
    std::memcpy(&isMrows_data[0], &isMrows0[0], static_cast<uint32_T>
                (loop_ub_tmp) * sizeof(boolean_T));
  }

  if (loop_ub_tmp - 1 >= 0) {
    std::memcpy(&Mlimfull_data[0], &Mlimfull0[0], static_cast<uint32_T>
                (loop_ub_tmp) * sizeof(real_T));
  }

  if (loop_ub_tmp - 1 >= 0) {
    std::memcpy(&Vfull_data[0], &Vfull0[0], static_cast<uint32_T>(loop_ub_tmp) *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_h(boolean_T isMrows_data[], real_T
  Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436], const
  real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T ioff)
{
  int32_T i_0;
  int32_T j;
  int32_T loop_ub_tmp;
  i_0 = b_p * 13 + ioff;
  if (ioff + 1 > i_0) {
    j = 0;
  } else {
    j = ioff;
  }

  loop_ub_tmp = b_p * 13 - 1;
  for (int32_T i{0}; i <= loop_ub_tmp; i++) {
    isMrows_data[j + i] = isMrows0[i + 130];
  }

  if (ioff + 1 > i_0) {
    j = 0;
  } else {
    j = ioff;
  }

  for (int32_T i{0}; i <= loop_ub_tmp; i++) {
    Mlimfull_data[j + i] = Mlimfull0[i + 130];
  }

  if (ioff + 1 > i_0) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i_0 = 0; i_0 <= loop_ub_tmp; i_0++) {
    Vfull_data[j + i_0] = Vfull0[i_0 + 130];
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_hn(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  int32_T i;
  int32_T j;
  int32_T loop_ub_tmp;
  int32_T tmp;
  i = b_p << 3;
  tmp = i + ioff;
  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  loop_ub_tmp = i - 1;
  for (i = 0; i <= loop_ub_tmp; i++) {
    isMrows_data[j + i] = isMrows0[i + 260];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Mlimfull_data[j + i] = Mlimfull0[i + 260];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Vfull_data[j + i] = Vfull0[i + 260];
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_hny(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  int32_T i;
  int32_T j;
  int32_T loop_ub_tmp;
  int32_T tmp;
  i = b_p << 3;
  tmp = i + ioff;
  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  loop_ub_tmp = i - 1;
  for (i = 0; i <= loop_ub_tmp; i++) {
    isMrows_data[j + i] = isMrows0[i + 340];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Mlimfull_data[j + i] = Mlimfull0[i + 340];
  }

  if (ioff + 1 > tmp) {
    j = 0;
  } else {
    j = ioff;
  }

  for (i = 0; i <= loop_ub_tmp; i++) {
    Vfull_data[j + i] = Vfull0[i + 340];
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_hnyc(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  if (b_p <= 1) {
    int32_T b_k;
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    db_tmp = b_p << 3;
    b_k = db_tmp;
    if (db_tmp + 420 < 421) {
      isMrows_tmp = 0;
      b_k = -420;
    } else {
      isMrows_tmp = 420;
    }

    hb_tmp = db_tmp + ioff;
    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 419; b_k++) {
      isMrows_data[db + b_k] = isMrows0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 420 < 421) {
      isMrows_tmp = 0;
      b_k = -420;
    } else {
      isMrows_tmp = 420;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 419; b_k++) {
      Mlimfull_data[db + b_k] = Mlimfull0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 420 < 421) {
      isMrows_tmp = 0;
      b_k = -420;
    } else {
      isMrows_tmp = 420;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (hb_tmp = 0; hb_tmp <= fb + 419; hb_tmp++) {
      Vfull_data[db + hb_tmp] = Vfull0[isMrows_tmp + hb_tmp];
    }
  } else {
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    std::memcpy(&Mlimfull_data[ioff], &Mlimfull0[420], sizeof(real_T) << 3U);
    std::memcpy(&Vfull_data[ioff], &Vfull0[420], sizeof(real_T) << 3U);
    for (hb_tmp = 0; hb_tmp < 8; hb_tmp++) {
      isMrows_data[((hb_tmp + ioff) + 1) - 1] = isMrows0[hb_tmp + 420];
    }

    db_tmp = (b_p << 3) + ioff;
    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    hb_tmp = static_cast<uint8_T>(b_p - 1);
    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      int32_T ibcol;
      ibcol = isMrows_tmp << 3;
      for (int32_T b_k{0}; b_k < 8; b_k++) {
        proc_control_B.gb_data_c[ibcol + b_k] = isMrows0[b_k + 420];
      }
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k{0}; b_k < isMrows_tmp; b_k++) {
      isMrows_data[fb + b_k] = proc_control_B.gb_data_c[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      std::memcpy(&proc_control_B.y_data_a[isMrows_tmp << 3], &Mlimfull0[420],
                  sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k{0}; b_k < isMrows_tmp; b_k++) {
      Mlimfull_data[fb + b_k] = proc_control_B.y_data_a[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      std::memcpy(&proc_control_B.y_data_a[isMrows_tmp << 3], &Vfull0[420],
                  sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (hb_tmp = 0; hb_tmp < isMrows_tmp; hb_tmp++) {
      Vfull_data[fb + hb_tmp] = proc_control_B.y_data_a[hb_tmp];
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_contro_Mrows_reshape_hnycd(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  if (b_p <= 1) {
    int32_T b_k;
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    db_tmp = b_p << 3;
    b_k = db_tmp;
    if (db_tmp + 428 < 429) {
      isMrows_tmp = 0;
      b_k = -428;
    } else {
      isMrows_tmp = 428;
    }

    hb_tmp = db_tmp + ioff;
    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 427; b_k++) {
      isMrows_data[db + b_k] = isMrows0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 428 < 429) {
      isMrows_tmp = 0;
      b_k = -428;
    } else {
      isMrows_tmp = 428;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (b_k = 0; b_k <= fb + 427; b_k++) {
      Mlimfull_data[db + b_k] = Mlimfull0[isMrows_tmp + b_k];
    }

    b_k = db_tmp;
    if (db_tmp + 428 < 429) {
      isMrows_tmp = 0;
      b_k = -428;
    } else {
      isMrows_tmp = 428;
    }

    if (ioff + 1 > hb_tmp) {
      db = 0;
    } else {
      db = ioff;
    }

    fb = b_k - isMrows_tmp;
    for (hb_tmp = 0; hb_tmp <= fb + 427; hb_tmp++) {
      Vfull_data[db + hb_tmp] = Vfull0[isMrows_tmp + hb_tmp];
    }
  } else {
    int32_T db;
    int32_T db_tmp;
    int32_T fb;
    int32_T hb_tmp;
    int32_T isMrows_tmp;
    std::memcpy(&Mlimfull_data[ioff], &Mlimfull0[428], sizeof(real_T) << 3U);
    std::memcpy(&Vfull_data[ioff], &Vfull0[428], sizeof(real_T) << 3U);
    for (hb_tmp = 0; hb_tmp < 8; hb_tmp++) {
      isMrows_data[((hb_tmp + ioff) + 1) - 1] = isMrows0[hb_tmp + 428];
    }

    db_tmp = (b_p << 3) + ioff;
    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    hb_tmp = static_cast<uint8_T>(b_p - 1);
    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      int32_T ibcol;
      ibcol = isMrows_tmp << 3;
      for (int32_T b_k{0}; b_k < 8; b_k++) {
        proc_control_B.gb_data[ibcol + b_k] = isMrows0[b_k + 428];
      }
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k{0}; b_k < isMrows_tmp; b_k++) {
      isMrows_data[fb + b_k] = proc_control_B.gb_data[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      std::memcpy(&proc_control_B.y_data_f[isMrows_tmp << 3], &Mlimfull0[428],
                  sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (int32_T b_k{0}; b_k < isMrows_tmp; b_k++) {
      Mlimfull_data[fb + b_k] = proc_control_B.y_data_f[b_k];
    }

    db = db_tmp;
    if (ioff + 9 > db_tmp) {
      fb = 0;
      db = 0;
    } else {
      fb = ioff + 8;
    }

    for (isMrows_tmp = 0; isMrows_tmp < hb_tmp; isMrows_tmp++) {
      std::memcpy(&proc_control_B.y_data_f[isMrows_tmp << 3], &Vfull0[428],
                  sizeof(real_T) << 3U);
    }

    isMrows_tmp = db - fb;
    for (hb_tmp = 0; hb_tmp < isMrows_tmp; hb_tmp++) {
      Vfull_data[fb + hb_tmp] = proc_control_B.y_data_f[hb_tmp];
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
int32_T proc_control::proc_cont_combineVectorElements(const boolean_T x_data[],
  const int32_T x_size[1])
{
  int32_T vlen;
  int32_T y;
  vlen = x_size[0];
  y = x_data[0];
  for (int32_T k{2}; k <= vlen; k++) {
    y += x_data[k - 1];
  }

  return y;
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_tril(real_T x_data[], const int32_T x_size[2])
{
  int32_T n;
  n = x_size[1];
  if (x_size[1] > 1) {
    int32_T iend;
    iend = 0;
    for (int32_T j{2}; j <= n; j++) {
      for (int32_T i{0}; i <= iend; i++) {
        x_data[i + x_size[0] * (j - 1)] = 0.0;
      }

      if (iend + 1 < x_size[0]) {
        iend++;
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_eye(real_T b_I[64])
{
  int32_T k_0;
  std::memset(&b_I[0], 0, sizeof(real_T) << 6U);
  k_0 = 0;
  for (int32_T k{0}; k < 8; k++) {
    b_I[k_0] = 1.0;
    k_0 += 9;
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_kron_b(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B[64], real_T K_data[], int32_T K_size[2])
{
  int32_T c;
  int32_T d;
  int32_T kidx;
  K_size[0] = b_A_size[0] << 3;
  K_size[1] = b_A_size[1] << 3;
  kidx = -1;
  c = b_A_size[1];
  d = b_A_size[0];
  for (int32_T b_j1{0}; b_j1 < c; b_j1++) {
    for (int32_T j2{0}; j2 < 8; j2++) {
      for (int32_T i1{0}; i1 < d; i1++) {
        for (int32_T i2{0}; i2 < 8; i2++) {
          K_data[(kidx + i2) + 1] = b_B[(j2 << 3) + i2] * b_A_data[b_A_size[0] *
            b_j1 + i1];
        }

        kidx += 8;
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_eye_f(int32_T varargin_1, real_T b_I_data[],
  int32_T b_I_size[2])
{
  int32_T loop_ub;
  b_I_size[0] = varargin_1;
  b_I_size[1] = varargin_1;
  loop_ub = varargin_1 * varargin_1;
  if (loop_ub - 1 >= 0) {
    std::memset(&b_I_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  if (varargin_1 > 0) {
    loop_ub = static_cast<uint8_T>(varargin_1);
    for (int32_T k{0}; k < loop_ub; k++) {
      b_I_data[k + varargin_1 * k] = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_updateWeights(const real_T b_signal[13], real_T
  W[13])
{
  for (int32_T ct{0}; ct < 13; ct++) {
    real_T b_signal_0;
    b_signal_0 = b_signal[ct];
    if (b_signal_0 < 0.0) {
      W[ct] = 0.0;
    } else {
      W[ct] = b_signal_0 * b_signal_0;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_updateWeights_c(const real_T b_signal[8], real_T
  W[8])
{
  for (int32_T ct{0}; ct < 8; ct++) {
    real_T b_signal_0;
    b_signal_0 = b_signal[ct];
    if (b_signal_0 < 0.0) {
      W[ct] = 0.0;
    } else {
      W[ct] = b_signal_0 * b_signal_0;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_WtMult(const real_T W[8], const real_T M_data[],
  const int32_T M_size[2], real_T WM_data[], int32_T WM_size[2])
{
  int32_T c;
  int32_T loop_ub;
  int32_T tmp;
  int16_T ixw;
  c = M_size[0];
  WM_size[0] = M_size[0];
  tmp = M_size[1];
  WM_size[1] = M_size[1];
  loop_ub = M_size[0] * M_size[1];
  if (loop_ub - 1 >= 0) {
    std::memset(&WM_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  ixw = 1;
  for (loop_ub = 0; loop_ub < c; loop_ub++) {
    real_T W_0;
    W_0 = W[ixw - 1];
    for (int32_T i{0}; i < tmp; i++) {
      WM_data[loop_ub + WM_size[0] * i] = M_data[M_size[0] * i + loop_ub] * W_0;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 8) {
      ixw = 1;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_a(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T b;
  proc_control_B.mc_j = b_A_size[1] - 1;
  b_C_size[0] = b_A_size[1];
  b = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (int32_T j{0}; j < b; j++) {
    int32_T c;
    proc_control_B.coffset_k = (proc_control_B.mc_j + 1) * j;
    proc_control_B.boffset_m = j * b_B_size[0];
    if (proc_control_B.mc_j >= 0) {
      std::memset(&b_C_data[proc_control_B.coffset_k], 0, static_cast<uint32_T>
                  (((proc_control_B.mc_j + proc_control_B.coffset_k) -
                    proc_control_B.coffset_k) + 1) * sizeof(real_T));
    }

    c = b_A_size[0];
    for (int32_T i{0}; i < c; i++) {
      proc_control_B.bkj_b = b_B_data[proc_control_B.boffset_m + i];
      for (int32_T b_i{0}; b_i <= proc_control_B.mc_j; b_i++) {
        int32_T tmp;
        tmp = proc_control_B.coffset_k + b_i;
        b_C_data[tmp] += b_A_data[b_i * b_A_size[0] + i] * proc_control_B.bkj_b;
      }
    }
  }
}

void proc_control::proc_control_binary_expand_op_4(real_T in1_data[], int32_T
  in1_size[2], const real_T in2_data[], const int32_T in2_size[2], const real_T
  in3_data[], const int32_T in3_size[2], const real_T in4_data[], const int32_T
  in4_size[2], const real_T in5[8], const real_T in6_data[], const int32_T
  in6_size[2], const real_T in7_data[], const int32_T in7_size[2])
{
  proc_control_mtimes_a(in2_data, in2_size, in3_data, in3_size,
                        proc_control_B.tmp_data_m, proc_control_B.tmp_size_ge);
  proc_control_WtMult(in5, in4_data, in4_size, proc_control_B.tmp_data_j,
                      proc_control_B.tmp_size_e);
  proc_control_mtimes_a(in4_data, in4_size, proc_control_B.tmp_data_j,
                        proc_control_B.tmp_size_e, proc_control_B.tmp_data_n,
                        proc_control_B.tmp_size_n);
  proc_control_mtimes_a(in6_data, in6_size, in7_data, in7_size,
                        proc_control_B.tmp_data_pp, proc_control_B.tmp_size_e);
  proc_control_B.loop_ub_n = proc_control_B.tmp_size_e[0] == 1 ?
    proc_control_B.tmp_size_n[0] == 1 ? proc_control_B.tmp_size_ge[0] :
    proc_control_B.tmp_size_n[0] : proc_control_B.tmp_size_e[0];
  in1_size[0] = proc_control_B.loop_ub_n;
  proc_control_B.loop_ub_i3 = proc_control_B.tmp_size_e[1] == 1 ?
    proc_control_B.tmp_size_n[1] == 1 ? proc_control_B.tmp_size_ge[1] :
    proc_control_B.tmp_size_n[1] : proc_control_B.tmp_size_e[1];
  in1_size[1] = proc_control_B.loop_ub_i3;
  proc_control_B.stride_0_0 = (proc_control_B.tmp_size_ge[0] != 1);
  proc_control_B.stride_0_1 = (proc_control_B.tmp_size_ge[1] != 1);
  proc_control_B.stride_1_0 = (proc_control_B.tmp_size_n[0] != 1);
  proc_control_B.stride_1_1 = (proc_control_B.tmp_size_n[1] != 1);
  proc_control_B.stride_2_0 = (proc_control_B.tmp_size_e[0] != 1);
  proc_control_B.stride_2_1 = (proc_control_B.tmp_size_e[1] != 1);
  proc_control_B.aux_0_1 = 0;
  proc_control_B.aux_1_1 = 0;
  proc_control_B.aux_2_1 = 0;
  for (proc_control_B.i16 = 0; proc_control_B.i16 < proc_control_B.loop_ub_i3;
       proc_control_B.i16++) {
    for (proc_control_B.i15 = 0; proc_control_B.i15 < proc_control_B.loop_ub_n;
         proc_control_B.i15++) {
      in1_data[proc_control_B.i15 + in1_size[0] * proc_control_B.i16] =
        (proc_control_B.tmp_data_m[proc_control_B.i15 *
         proc_control_B.stride_0_0 + proc_control_B.tmp_size_ge[0] *
         proc_control_B.aux_0_1] + proc_control_B.tmp_data_n[proc_control_B.i15 *
         proc_control_B.stride_1_0 + proc_control_B.tmp_size_n[0] *
         proc_control_B.aux_1_1]) +
        proc_control_B.tmp_data_pp[proc_control_B.i15 *
        proc_control_B.stride_2_0 + proc_control_B.tmp_size_e[0] *
        proc_control_B.aux_2_1];
    }

    proc_control_B.aux_2_1 += proc_control_B.stride_2_1;
    proc_control_B.aux_1_1 += proc_control_B.stride_1_1;
    proc_control_B.aux_0_1 += proc_control_B.stride_0_1;
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_af(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T b;
  b_C_size[0] = 8;
  b = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (int32_T j{0}; j < b; j++) {
    int32_T i;
    proc_control_B.coffset_e = j << 3;
    proc_control_B.boffset_k = j * b_B_size[0];
    std::memset(&b_C_data[proc_control_B.coffset_e], 0, sizeof(real_T) << 3U);
    i = b_A_size[0];
    for (int32_T k{0}; k < i; k++) {
      proc_control_B.bkj_k = b_B_data[proc_control_B.boffset_k + k];
      for (int32_T b_i{0}; b_i < 8; b_i++) {
        int32_T tmp;
        tmp = proc_control_B.coffset_e + b_i;
        b_C_data[tmp] += b_A_data[b_i * b_A_size[0] + k] * proc_control_B.bkj_k;
      }
    }
  }
}

void proc_control::proc_control_binary_expand_op_3(real_T in1_data[], int32_T
  in1_size[2], const real_T in2_data[], const int32_T in2_size[2], const real_T
  in3_data[], const int32_T in3_size[2], const real_T in4_data[], const int32_T
  in4_size[2], const real_T in5_data[], const int32_T in5_size[2])
{
  proc_control_mtimes_af(in2_data, in2_size, in3_data, in3_size,
    proc_control_B.tmp_data_h, proc_control_B.tmp_size_p);
  proc_control_mtimes_af(in4_data, in4_size, in5_data, in5_size,
    proc_control_B.tmp_data_c0, proc_control_B.tmp_size_bq);
  in1_size[0] = 8;
  proc_control_B.loop_ub_dlm = proc_control_B.tmp_size_bq[1] == 1 ?
    proc_control_B.tmp_size_p[1] : proc_control_B.tmp_size_bq[1];
  in1_size[1] = proc_control_B.loop_ub_dlm;
  proc_control_B.stride_0_1_h = (proc_control_B.tmp_size_p[1] != 1);
  proc_control_B.stride_1_1_g = (proc_control_B.tmp_size_bq[1] != 1);
  proc_control_B.aux_0_1_b = 0;
  proc_control_B.aux_1_1_a = 0;
  for (proc_control_B.i19 = 0; proc_control_B.i19 < proc_control_B.loop_ub_dlm;
       proc_control_B.i19++) {
    for (proc_control_B.i18 = 0; proc_control_B.i18 < 8; proc_control_B.i18++) {
      in1_data[proc_control_B.i18 + (proc_control_B.i19 << 3)] =
        proc_control_B.tmp_data_h[(proc_control_B.aux_0_1_b << 3) +
        proc_control_B.i18] + proc_control_B.tmp_data_c0
        [(proc_control_B.aux_1_1_a << 3) + proc_control_B.i18];
    }

    proc_control_B.aux_1_1_a += proc_control_B.stride_1_1_g;
    proc_control_B.aux_0_1_b += proc_control_B.stride_0_1_h;
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_contr_mpc_calculatehessian(const real_T b_Wy[13], const
  real_T b_Wu[8], const real_T b_Wdu[8], const real_T SuJm_data[], const int32_T
  SuJm_size[2], const real_T I2Jm_data[], const int32_T I2Jm_size[2], const
  real_T Jm_data[], const int32_T Jm_size[2], const real_T I1_data[], const
  int32_T I1_size[2], const real_T Su1_data[], const int32_T Su1_size[2], const
  real_T Sx_data[], const int32_T Sx_size[2], const real_T Hv_data[], const
  int32_T Hv_size[2], real_T b_H_data[], int32_T b_H_size[2], real_T Ku1_data[],
  int32_T Ku1_size[2], real_T Kut_data[], int32_T Kut_size[2], real_T Kx_data[],
  int32_T Kx_size[2], real_T Kv_data[], int32_T Kv_size[2], real_T Kr_data[],
  int32_T Kr_size[2])
{
  int16_T ixw;
  proc_control_B.c_hj = SuJm_size[0];
  Kr_size[0] = SuJm_size[0];
  proc_control_B.unnamed_idx_1 = SuJm_size[1];
  Kr_size[1] = SuJm_size[1];
  proc_control_B.loop_ub_lo = SuJm_size[0] * SuJm_size[1];
  if (proc_control_B.loop_ub_lo - 1 >= 0) {
    std::memset(&Kr_data[0], 0, static_cast<uint32_T>(proc_control_B.loop_ub_lo)
                * sizeof(real_T));
  }

  ixw = 1;
  for (proc_control_B.loop_ub_lo = 0; proc_control_B.loop_ub_lo <
       proc_control_B.c_hj; proc_control_B.loop_ub_lo++) {
    proc_control_B.bkj_i = b_Wy[ixw - 1];
    for (proc_control_B.i14 = 0; proc_control_B.i14 <
         proc_control_B.unnamed_idx_1; proc_control_B.i14++) {
      Kr_data[proc_control_B.loop_ub_lo + Kr_size[0] * proc_control_B.i14] =
        SuJm_data[SuJm_size[0] * proc_control_B.i14 + proc_control_B.loop_ub_lo]
        * proc_control_B.bkj_i;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_WtMult(b_Wu, I2Jm_data, I2Jm_size, Kut_data, Kut_size);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, proc_control_B.tmp_size_g);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_p, proc_control_B.tmp_size_m);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                      proc_control_B.tmp_size_ju);
  proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l,
                        proc_control_B.tmp_size_ju, proc_control_B.tmp_data_b,
                        proc_control_B.tmp_size_f);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                      proc_control_B.tmp_size_ju);
  proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l,
                        proc_control_B.tmp_size_ju, proc_control_B.tmp_data_b,
                        proc_control_B.tmp_size_jx);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, proc_control_B.tmp_size_ju);
  proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, proc_control_B.tmp_size_d);
  proc_control_mtimes_a(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                        proc_control_B.tmp_data_b, proc_control_B.tmp_size_ls);
  proc_control_mtimes_a(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                        proc_control_B.tmp_data_b, proc_control_B.tmp_size_dk);
  if ((proc_control_B.tmp_size_ju[0] == proc_control_B.tmp_size_f[0]) &&
      (proc_control_B.tmp_size_d[1] == proc_control_B.tmp_size_jx[1]) &&
      ((proc_control_B.tmp_size_g[0] == 1 ? proc_control_B.tmp_size_f[0] :
        proc_control_B.tmp_size_g[0]) == proc_control_B.tmp_size_ls[0]) &&
      ((proc_control_B.tmp_size_m[1] == 1 ? proc_control_B.tmp_size_jx[1] :
        proc_control_B.tmp_size_m[1]) == proc_control_B.tmp_size_dk[1])) {
    proc_control_mtimes_a(SuJm_data, SuJm_size, Kr_data, Kr_size,
                          proc_control_B.tmp_data_b, proc_control_B.tmp_size_g);
    proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_l,
                        proc_control_B.tmp_size_ju);
    proc_control_mtimes_a(Jm_data, Jm_size, proc_control_B.tmp_data_l,
                          proc_control_B.tmp_size_ju, proc_control_B.tmp_data_p,
                          proc_control_B.tmp_size_m);
    proc_control_mtimes_a(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                          proc_control_B.tmp_data_c, proc_control_B.tmp_size_m);
    b_H_size[0] = proc_control_B.tmp_size_g[0];
    b_H_size[1] = proc_control_B.tmp_size_g[1];
    proc_control_B.loop_ub_lo = proc_control_B.tmp_size_g[0] *
      proc_control_B.tmp_size_g[1];
    for (proc_control_B.i14 = 0; proc_control_B.i14 < proc_control_B.loop_ub_lo;
         proc_control_B.i14++) {
      b_H_data[proc_control_B.i14] =
        (proc_control_B.tmp_data_b[proc_control_B.i14] +
         proc_control_B.tmp_data_p[proc_control_B.i14]) +
        proc_control_B.tmp_data_c[proc_control_B.i14];
    }
  } else {
    proc_control_binary_expand_op_4(b_H_data, b_H_size, SuJm_data, SuJm_size,
      Kr_data, Kr_size, Jm_data, Jm_size, b_Wdu, I2Jm_data, I2Jm_size, Kut_data,
      Kut_size);
  }

  proc_control_mtimes_af(Su1_data, Su1_size, Kr_data, Kr_size,
    proc_control_B.tmp_data_ja, proc_control_B.tmp_size_g);
  proc_control_mtimes_af(I1_data, I1_size, Kut_data, Kut_size,
    proc_control_B.tmp_data_ja, proc_control_B.tmp_size_m);
  if (proc_control_B.tmp_size_g[1] == proc_control_B.tmp_size_m[1]) {
    proc_control_mtimes_af(Su1_data, Su1_size, Kr_data, Kr_size,
      proc_control_B.tmp_data_ja, proc_control_B.tmp_size_g);
    proc_control_mtimes_af(I1_data, I1_size, Kut_data, Kut_size,
      proc_control_B.tmp_data_m3, proc_control_B.tmp_size_m);
    Ku1_size[0] = 8;
    Ku1_size[1] = proc_control_B.tmp_size_g[1];
    proc_control_B.loop_ub_lo = proc_control_B.tmp_size_g[1] << 3;
    for (proc_control_B.i14 = 0; proc_control_B.i14 < proc_control_B.loop_ub_lo;
         proc_control_B.i14++) {
      Ku1_data[proc_control_B.i14] =
        proc_control_B.tmp_data_ja[proc_control_B.i14] +
        proc_control_B.tmp_data_m3[proc_control_B.i14];
    }
  } else {
    proc_control_binary_expand_op_3(Ku1_data, Ku1_size, Su1_data, Su1_size,
      Kr_data, Kr_size, I1_data, I1_size, Kut_data, Kut_size);
  }

  proc_control_B.unnamed_idx_1 = Kut_size[0] * Kut_size[1];
  for (proc_control_B.i14 = 0; proc_control_B.i14 < proc_control_B.unnamed_idx_1;
       proc_control_B.i14++) {
    Kut_data[proc_control_B.i14] = -Kut_data[proc_control_B.i14];
  }

  Kx_size[0] = 21;
  proc_control_B.c_hj = SuJm_size[1];
  Kx_size[1] = SuJm_size[1];
  for (proc_control_B.loop_ub_lo = 0; proc_control_B.loop_ub_lo <
       proc_control_B.c_hj; proc_control_B.loop_ub_lo++) {
    proc_control_B.coffset_a = proc_control_B.loop_ub_lo * 21;
    proc_control_B.boffset_i = proc_control_B.loop_ub_lo * Kr_size[0];
    std::memset(&Kx_data[proc_control_B.coffset_a], 0, 21U * sizeof(real_T));
    proc_control_B.unnamed_idx_1 = Sx_size[0];
    for (proc_control_B.k_c = 0; proc_control_B.k_c <
         proc_control_B.unnamed_idx_1; proc_control_B.k_c++) {
      proc_control_B.bkj_i = Kr_data[proc_control_B.boffset_i +
        proc_control_B.k_c];
      for (proc_control_B.c_i = 0; proc_control_B.c_i < 21; proc_control_B.c_i++)
      {
        proc_control_B.i14 = proc_control_B.coffset_a + proc_control_B.c_i;
        Kx_data[proc_control_B.i14] += Sx_data[proc_control_B.c_i * Sx_size[0] +
          proc_control_B.k_c] * proc_control_B.bkj_i;
      }
    }
  }

  proc_control_mtimes_a(Hv_data, Hv_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_b, proc_control_B.tmp_size_g);
  Kv_size[0] = proc_control_B.tmp_size_g[0];
  Kv_size[1] = proc_control_B.tmp_size_g[1];
  proc_control_B.loop_ub_lo = proc_control_B.tmp_size_g[0] *
    proc_control_B.tmp_size_g[1];
  if (proc_control_B.loop_ub_lo - 1 >= 0) {
    std::memcpy(&Kv_data[0], &proc_control_B.tmp_data_b[0], static_cast<uint32_T>
                (proc_control_B.loop_ub_lo) * sizeof(real_T));
  }

  proc_control_B.unnamed_idx_1 = SuJm_size[0] * SuJm_size[1];
  for (proc_control_B.i14 = 0; proc_control_B.i14 < proc_control_B.unnamed_idx_1;
       proc_control_B.i14++) {
    Kr_data[proc_control_B.i14] = -Kr_data[proc_control_B.i14];
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf(int32_T n, real_T b_A_data[], int32_T
  lda)
{
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_B.j_f = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.j_f <= static_cast<uint8_T>(n) - 1)) {
    int32_T b_k;
    proc_control_B.idxAjj = proc_control_B.j_f * lda + proc_control_B.j_f;
    proc_control_B.ssq = 0.0;
    if (proc_control_B.j_f >= 1) {
      for (b_k = 0; b_k < proc_control_B.j_f; b_k++) {
        proc_control_B.c_g = b_A_data[b_k * lda + proc_control_B.j_f];
        proc_control_B.ssq += proc_control_B.c_g * proc_control_B.c_g;
      }
    }

    proc_control_B.ssq = b_A_data[proc_control_B.idxAjj] - proc_control_B.ssq;
    if (proc_control_B.ssq > 0.0) {
      proc_control_B.ssq = std::sqrt(proc_control_B.ssq);
      b_A_data[proc_control_B.idxAjj] = proc_control_B.ssq;
      if (proc_control_B.j_f + 1 < n) {
        int32_T b_iy;
        b_iy = (n - proc_control_B.j_f) - 1;
        if ((b_iy != 0) && (proc_control_B.j_f != 0)) {
          int32_T b;
          proc_control_B.ix_g = proc_control_B.j_f;
          b = ((proc_control_B.j_f - 1) * lda + proc_control_B.j_f) + 2;
          for (b_k = proc_control_B.j_f + 2; lda < 0 ? b_k >= b : b_k <= b; b_k +=
               lda) {
            int32_T d;
            proc_control_B.c_g = -b_A_data[proc_control_B.ix_g];
            d = (b_k + b_iy) - 1;
            for (int32_T b_ix{b_k}; b_ix <= d; b_ix++) {
              int32_T tmp;
              tmp = ((proc_control_B.idxAjj + b_ix) - b_k) + 1;
              b_A_data[tmp] += b_A_data[b_ix - 1] * proc_control_B.c_g;
            }

            proc_control_B.ix_g += lda;
          }
        }

        proc_control_B.ssq = 1.0 / proc_control_B.ssq;
        b_k = proc_control_B.idxAjj + b_iy;
        for (int32_T b_ix{proc_control_B.idxAjj + 2}; b_ix <= b_k + 1; b_ix++) {
          b_A_data[b_ix - 1] *= proc_control_B.ssq;
        }
      }

      proc_control_B.j_f++;
    } else {
      b_A_data[proc_control_B.idxAjj] = proc_control_B.ssq;
      info = proc_control_B.j_f + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_diag(const real_T v_data[], const int32_T
  v_size[2], real_T d_data[], int32_T d_size[1])
{
  if ((v_size[0] == 1) && (v_size[1] == 1)) {
    d_size[0] = 1;
    d_data[0] = v_data[0];
  } else {
    int32_T dlen;
    if (v_size[1] > 0) {
      if (v_size[0] <= v_size[1]) {
        dlen = v_size[0];
      } else {
        dlen = v_size[1];
      }
    } else {
      dlen = 0;
    }

    d_size[0] = dlen;
    for (int32_T k{0}; k < dlen; k++) {
      d_data[k] = v_data[v_size[0] * k + k];
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
real_T proc_control::proc_control_minimum(const real_T x_data[], const int32_T
  x_size[1])
{
  real_T ex;
  int32_T last;
  last = x_size[0];
  if (static_cast<uint8_T>(x_size[0] - 1) + 1 <= 2) {
    if (static_cast<uint8_T>(x_size[0] - 1) + 1 == 1) {
      ex = x_data[0];
    } else {
      ex = x_data[x_size[0] - 1];
      if (!(x_data[0] > ex)) {
        if (std::isnan(x_data[0])) {
          if (std::isnan(ex)) {
            ex = x_data[0];
          }
        } else {
          ex = x_data[0];
        }
      }
    }
  } else {
    int32_T idx;
    int32_T k;
    if (!std::isnan(x_data[0])) {
      idx = 1;
    } else {
      boolean_T exitg1;
      idx = 0;
      k = 2;
      exitg1 = false;
      while ((!exitg1) && (k <= last)) {
        if (!std::isnan(x_data[k - 1])) {
          idx = k;
          exitg1 = true;
        } else {
          k++;
        }
      }
    }

    if (idx == 0) {
      ex = x_data[0];
    } else {
      ex = x_data[idx - 1];
      for (k = idx + 1; k <= last; k++) {
        real_T x;
        x = x_data[k - 1];
        if (ex > x) {
          ex = x;
        }
      }
    }
  }

  return ex;
}

void proc_control::proc_control_binary_expand_op_5(real_T in1_data[], int32_T
  in1_size[2], real_T in2, const int8_T in3_data[], const int32_T in3_size[2])
{
  int32_T loop_ub;
  int32_T loop_ub_0;
  int32_T stride_0_0;
  int32_T stride_0_1;
  int32_T stride_1_0;
  int32_T stride_1_1;
  loop_ub_0 = in3_size[0] == 1 ? in1_size[0] : in3_size[0];
  loop_ub = in3_size[1] == 1 ? in1_size[1] : in3_size[1];
  stride_0_0 = (in1_size[0] != 1);
  stride_0_1 = (in1_size[1] != 1);
  stride_1_0 = (in3_size[0] != 1);
  stride_1_1 = (in3_size[1] != 1);
  proc_control_B.aux_0_1_m = 0;
  proc_control_B.aux_1_1_i = 0;
  for (proc_control_B.i21 = 0; proc_control_B.i21 < loop_ub; proc_control_B.i21
       ++) {
    for (proc_control_B.i20 = 0; proc_control_B.i20 < loop_ub_0;
         proc_control_B.i20++) {
      proc_control_B.in1_data[proc_control_B.i20 + loop_ub_0 *
        proc_control_B.i21] = static_cast<real_T>(in3_data[proc_control_B.i20 *
        stride_1_0 + in3_size[0] * proc_control_B.aux_1_1_i]) * in2 +
        in1_data[proc_control_B.i20 * stride_0_0 + in1_size[0] *
        proc_control_B.aux_0_1_m];
    }

    proc_control_B.aux_1_1_i += stride_1_1;
    proc_control_B.aux_0_1_m += stride_0_1;
  }

  in1_size[0] = loop_ub_0;
  in1_size[1] = loop_ub;
  for (proc_control_B.i21 = 0; proc_control_B.i21 < loop_ub; proc_control_B.i21
       ++) {
    for (proc_control_B.i20 = 0; proc_control_B.i20 < loop_ub_0;
         proc_control_B.i20++) {
      in1_data[proc_control_B.i20 + in1_size[0] * proc_control_B.i21] =
        proc_control_B.in1_data[loop_ub_0 * proc_control_B.i21 +
        proc_control_B.i20];
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_checkhessian(real_T b_H_data[], int32_T
  b_H_size[2], real_T L_data[], int32_T L_size[2], real_T *BadH)
{
  boolean_T MATRIX_INPUT_AND_P_IS_INF;
  boolean_T VECTOR_INPUT_AND_P_IS_INF;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  proc_control_B.b_degrees_tmp = b_H_size[0];
  *BadH = 0.0;
  proc_control_B.emlN_tmp = b_H_size[1];
  L_size[0] = b_H_size[0];
  L_size[1] = b_H_size[1];
  proc_control_B.loop_ub_tmp_a = b_H_size[0] * b_H_size[1];
  if (proc_control_B.loop_ub_tmp_a - 1 >= 0) {
    std::memcpy(&L_data[0], &b_H_data[0], static_cast<uint32_T>
                (proc_control_B.loop_ub_tmp_a) * sizeof(real_T));
  }

  proc_control_B.Tries_g = proc_control_xpotrf(b_H_size[1], L_data, b_H_size[1]);
  guard1 = false;
  if (proc_control_B.Tries_g == 0) {
    proc_control_diag(L_data, L_size, proc_control_B.tmp_data_jg,
                      proc_control_B.tmp_size_p0);
    if (proc_control_minimum(proc_control_B.tmp_data_jg,
         proc_control_B.tmp_size_p0) > 1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    VECTOR_INPUT_AND_P_IS_INF = false;
    MATRIX_INPUT_AND_P_IS_INF = false;
    if ((b_H_size[0] == 1) || (b_H_size[1] == 1)) {
      VECTOR_INPUT_AND_P_IS_INF = true;
    } else {
      MATRIX_INPUT_AND_P_IS_INF = true;
    }

    if ((b_H_size[0] == 0) || (b_H_size[1] == 0)) {
      proc_control_B.normH_d = 0.0;
    } else if (MATRIX_INPUT_AND_P_IS_INF) {
      proc_control_B.normH_d = 0.0;
      proc_control_B.Tries_g = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.Tries_g <= b_H_size[0] - 1)) {
        proc_control_B.absx = 0.0;
        for (proc_control_B.b_k_g = 0; proc_control_B.b_k_g <
             proc_control_B.emlN_tmp; proc_control_B.b_k_g++) {
          proc_control_B.absx += std::abs(b_H_data[b_H_size[0] *
            proc_control_B.b_k_g + proc_control_B.Tries_g]);
        }

        if (std::isnan(proc_control_B.absx)) {
          proc_control_B.normH_d = (rtNaN);
          exitg2 = true;
        } else {
          if (proc_control_B.absx > proc_control_B.normH_d) {
            proc_control_B.normH_d = proc_control_B.absx;
          }

          proc_control_B.Tries_g++;
        }
      }
    } else if (VECTOR_INPUT_AND_P_IS_INF) {
      proc_control_B.normH_d = 0.0;
      for (proc_control_B.b_k_g = 0; proc_control_B.b_k_g <
           proc_control_B.loop_ub_tmp_a; proc_control_B.b_k_g++) {
        proc_control_B.absx = std::abs(b_H_data[proc_control_B.b_k_g]);
        if (std::isnan(proc_control_B.absx)) {
          proc_control_B.normH_d = (rtNaN);
        } else if (proc_control_B.absx > proc_control_B.normH_d) {
          proc_control_B.normH_d = proc_control_B.absx;
        }
      }
    } else {
      proc_control_B.normH_d = (rtNaN);
    }

    if (proc_control_B.normH_d >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      proc_control_B.Tries_g = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.Tries_g <= 4)) {
        proc_control_B.normH_d = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_B.Tries_g)) * 1.4901161193847656E-7;
        proc_control_B.b_size_l[0] = proc_control_B.b_degrees_tmp;
        proc_control_B.b_size_l[1] = proc_control_B.b_degrees_tmp;
        proc_control_B.loop_ub_tmp_a = proc_control_B.b_degrees_tmp *
          proc_control_B.b_degrees_tmp;
        if (proc_control_B.loop_ub_tmp_a - 1 >= 0) {
          std::memset(&proc_control_B.b_data[0], 0, static_cast<uint32_T>
                      (proc_control_B.loop_ub_tmp_a) * sizeof(int8_T));
        }

        if (proc_control_B.b_degrees_tmp > 0) {
          for (proc_control_B.b_k_g = 0; proc_control_B.b_k_g <
               proc_control_B.b_degrees_tmp; proc_control_B.b_k_g++) {
            proc_control_B.b_data[proc_control_B.b_k_g +
              proc_control_B.b_degrees_tmp * proc_control_B.b_k_g] = 1;
          }
        }

        if ((b_H_size[0] == proc_control_B.b_degrees_tmp) && (b_H_size[1] ==
             proc_control_B.b_degrees_tmp)) {
          proc_control_B.loop_ub_tmp_a = b_H_size[0] * b_H_size[1];
          for (proc_control_B.b_k_g = 0; proc_control_B.b_k_g <
               proc_control_B.loop_ub_tmp_a; proc_control_B.b_k_g++) {
            b_H_data[proc_control_B.b_k_g] += static_cast<real_T>
              (proc_control_B.b_data[proc_control_B.b_k_g]) *
              proc_control_B.normH_d;
          }
        } else {
          proc_control_binary_expand_op_5(b_H_data, b_H_size,
            proc_control_B.normH_d, proc_control_B.b_data,
            proc_control_B.b_size_l);
        }

        L_size[0] = b_H_size[0];
        L_size[1] = b_H_size[1];
        proc_control_B.loop_ub_tmp_a = b_H_size[0] * b_H_size[1];
        if (proc_control_B.loop_ub_tmp_a - 1 >= 0) {
          std::memcpy(&L_data[0], &b_H_data[0], static_cast<uint32_T>
                      (proc_control_B.loop_ub_tmp_a) * sizeof(real_T));
        }

        proc_control_B.b_k_g = proc_control_xpotrf(proc_control_B.emlN_tmp,
          L_data, proc_control_B.emlN_tmp);
        guard2 = false;
        if (proc_control_B.b_k_g == 0) {
          proc_control_diag(L_data, L_size, proc_control_B.tmp_data_jg,
                            proc_control_B.tmp_size_p0);
          if (proc_control_minimum(proc_control_B.tmp_data_jg,
               proc_control_B.tmp_size_p0) > 1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          proc_control_B.Tries_g++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_eye_f3(int32_T varargin_1, real_T b_I_data[],
  int32_T b_I_size[2])
{
  int32_T loop_ub;
  b_I_size[0] = varargin_1;
  b_I_size[1] = varargin_1;
  loop_ub = varargin_1 * varargin_1;
  if (loop_ub - 1 >= 0) {
    std::memset(&b_I_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }

  if (varargin_1 > 0) {
    loop_ub = static_cast<uint8_T>(varargin_1);
    for (int32_T k{0}; k < loop_ub; k++) {
      b_I_data[k + varargin_1 * k] = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_trisolve(const real_T b_A_data[], const int32_T
  b_A_size[2], real_T b_B_data[], const int32_T b_B_size[2])
{
  int32_T y;
  if (b_A_size[0] <= b_A_size[1]) {
    y = b_A_size[0];
  } else {
    y = b_A_size[1];
  }

  if (y > b_B_size[0]) {
    y = b_B_size[0];
  }

  if ((b_B_size[1] != 0) && ((b_B_size[0] != 0) && (b_B_size[1] != 0))) {
    int32_T b;
    b = b_B_size[1];
    for (int32_T j{0}; j < b; j++) {
      proc_control_B.jBcol = b_B_size[0] * j;
      for (int32_T b_k{0}; b_k < y; b_k++) {
        int32_T tmp;
        proc_control_B.kAcol_n = b_A_size[0] * b_k;
        tmp = b_k + proc_control_B.jBcol;
        proc_control_B.d39 = b_B_data[tmp];
        if (proc_control_B.d39 != 0.0) {
          b_B_data[tmp] = proc_control_B.d39 / b_A_data[b_k +
            proc_control_B.kAcol_n];
          for (int32_T i{b_k + 2}; i <= y; i++) {
            int32_T tmp_0;
            tmp_0 = (i + proc_control_B.jBcol) - 1;
            b_B_data[tmp_0] -= b_A_data[(i + proc_control_B.kAcol_n) - 1] *
              b_B_data[tmp];
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_linsolve(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  proc_control_B.nA_tmp = b_A_size[1];
  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minszA = b_A_size[0];
  } else {
    proc_control_B.minszA = b_A_size[1];
  }

  proc_control_B.minszA--;
  b_C_size[0] = b_A_size[1];
  proc_control_B.c_kl = b_B_size[1];
  b_C_size[1] = b_B_size[1];
  for (proc_control_B.j_jx = 0; proc_control_B.j_jx < proc_control_B.c_kl;
       proc_control_B.j_jx++) {
    for (proc_control_B.i_ff = 0; proc_control_B.i_ff <= proc_control_B.minszA;
         proc_control_B.i_ff++) {
      b_C_data[proc_control_B.i_ff + b_C_size[0] * proc_control_B.j_jx] =
        b_B_data[b_B_size[0] * proc_control_B.j_jx + proc_control_B.i_ff];
    }

    for (proc_control_B.i_ff = proc_control_B.minszA + 2; proc_control_B.i_ff <=
         proc_control_B.nA_tmp; proc_control_B.i_ff++) {
      b_C_data[(proc_control_B.i_ff + b_C_size[0] * proc_control_B.j_jx) - 1] =
        0.0;
    }
  }

  proc_control_trisolve(b_A_data, b_A_size, b_C_data, b_C_size);
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afa(const coder::array<real_T, 2U> &b_A,
  const real_T b_B[21], coder::array<real_T, 1U> &b_C)
{
  int32_T mc;
  mc = b_A.size(0) - 1;
  b_C.set_size(b_A.size(0));
  for (int32_T i{0}; i <= mc; i++) {
    b_C[i] = 0.0;
  }

  for (int32_T i{0}; i < 21; i++) {
    int32_T aoffset;
    aoffset = i * b_A.size(0);
    for (int32_T b_i{0}; b_i <= mc; b_i++) {
      b_C[b_i] = b_A[aoffset + b_i] * b_B[i] + b_C[b_i];
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afai(const coder::array<real_T, 2U> &b_A,
  const real_T b_B[8], coder::array<real_T, 1U> &b_C)
{
  int32_T b_m_tmp;
  b_m_tmp = b_A.size(0);
  b_C.set_size(b_A.size(0));
  for (int32_T i{0}; i < b_m_tmp; i++) {
    real_T s;
    s = 0.0;
    for (int32_T k{0}; k < 8; k++) {
      s += b_A[k * b_A.size(0) + i] * b_B[k];
    }

    b_C[i] = s;
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afai0(const coder::array<real_T, 2U> &b_A,
  const coder::array<real_T, 1U> &b_B, coder::array<real_T, 1U> &b_C)
{
  int32_T i;
  int32_T mc;
  mc = b_A.size(0) - 1;
  b_C.set_size(b_A.size(0));
  for (i = 0; i <= mc; i++) {
    b_C[i] = 0.0;
  }

  i = b_A.size(1);
  for (int32_T k{0}; k < i; k++) {
    int32_T aoffset;
    aoffset = k * b_A.size(0);
    for (int32_T b_i{0}; b_i <= mc; b_i++) {
      b_C[b_i] = b_A[aoffset + b_i] * b_B[k] + b_C[b_i];
    }
  }
}

void proc_control::proc_control_binary_expand_op_8(coder::array<real_T, 1U> &in1,
  const coder::array<real_T, 1U> &in2, const coder::array<real_T, 2U> &in3,
  const real_T in4[21], const coder::array<real_T, 2U> &in5, const real_T in6[8],
  const coder::array<real_T, 2U> &in7, const coder::array<real_T, 1U> &in8)
{
  int32_T loop_ub;
  int32_T stride_3_0;
  proc_control_mtimes_afa(in3, in4, proc_control_B.r8);
  proc_control_mtimes_afai(in5, in6, proc_control_B.r9);
  proc_control_mtimes_afai0(in7, in8, proc_control_B.r10);
  loop_ub = proc_control_B.r10.size(0) == 1 ? proc_control_B.r9.size(0) == 1 ?
    proc_control_B.r8.size(0) == 1 ? in2.size(0) : proc_control_B.r8.size(0) :
    proc_control_B.r9.size(0) : proc_control_B.r10.size(0);
  in1.set_size(loop_ub);
  proc_control_B.stride_0_0_i = (in2.size(0) != 1);
  proc_control_B.stride_1_0_p = (proc_control_B.r8.size(0) != 1);
  proc_control_B.stride_2_0_h = (proc_control_B.r9.size(0) != 1);
  stride_3_0 = (proc_control_B.r10.size(0) != 1);
  for (proc_control_B.i17 = 0; proc_control_B.i17 < loop_ub; proc_control_B.i17
       ++) {
    in1[proc_control_B.i17] = -(((in2[proc_control_B.i17 *
      proc_control_B.stride_0_0_i] + proc_control_B.r8[proc_control_B.i17 *
      proc_control_B.stride_1_0_p]) + proc_control_B.r9[proc_control_B.i17 *
      proc_control_B.stride_2_0_h]) + proc_control_B.r10[proc_control_B.i17 *
      stride_3_0]);
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
real_T proc_control::proc_control_norm(const real_T x_data[], const int32_T
  x_size[1])
{
  real_T y;
  if (x_size[0] == 0) {
    y = 0.0;
  } else {
    y = 0.0;
    if (x_size[0] == 1) {
      y = std::abs(x_data[0]);
    } else {
      int32_T b;
      proc_control_B.scale_fy = 3.3121686421112381E-170;
      b = x_size[0];
      for (int32_T k{0}; k < b; k++) {
        real_T absxk;
        absxk = std::abs(x_data[k]);
        if (absxk > proc_control_B.scale_fy) {
          real_T t;
          t = proc_control_B.scale_fy / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_fy = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_fy;
          y += t * t;
        }
      }

      y = proc_control_B.scale_fy * std::sqrt(y);
    }
  }

  return y;
}

void proc_control::proc_control_binary_expand_op_6(real_T in1_data[], int32_T
  in1_size[2], const coder::array<real_T, 2U> &in2, int32_T in3, const real_T
  in4_data[], const int32_T in4_size[1])
{
  int32_T loop_ub;
  int32_T stride_0_1;
  int32_T stride_1_1;
  in1_size[0] = 1;
  loop_ub = in4_size[0] == 1 ? in2.size(1) : in4_size[0];
  in1_size[1] = loop_ub;
  stride_0_1 = (in2.size(1) != 1);
  stride_1_1 = (in4_size[0] != 1);
  for (int32_T i{0}; i < loop_ub; i++) {
    in1_data[i] = in2[i * stride_0_1 * in2.size(0) + in3] * in4_data[i *
      stride_1_1];
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_afai05(const real_T b_A_data[], const
  int32_T b_A_size[2], const real_T b_B_data[], real_T b_C_data[], int32_T
  b_C_size[1])
{
  int32_T b;
  int32_T b_0;
  b_0 = b_A_size[0];
  b_C_size[0] = b_A_size[0];
  if (b_0 - 1 >= 0) {
    std::memset(&b_C_data[0], 0, static_cast<uint32_T>(b_0) * sizeof(real_T));
  }

  b = b_A_size[1];
  for (int32_T i{0}; i < b; i++) {
    int32_T aoffset;
    aoffset = i * b_0;
    for (int32_T b_i{0}; b_i < b_0; b_i++) {
      b_C_data[b_i] += b_A_data[aoffset + b_i] * b_B_data[i];
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
real_T proc_control::proc_control_xnrm2(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_m = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_n = std::abs(x_data[k - 1]);
        if (proc_control_B.absxk_n > proc_control_B.scale_m) {
          proc_control_B.t_m = proc_control_B.scale_m / proc_control_B.absxk_n;
          y = y * proc_control_B.t_m * proc_control_B.t_m + 1.0;
          proc_control_B.scale_m = proc_control_B.absxk_n;
        } else {
          proc_control_B.t_m = proc_control_B.absxk_n / proc_control_B.scale_m;
          y += proc_control_B.t_m * proc_control_B.t_m;
        }
      }

      y = proc_control_B.scale_m * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_xgemv(int32_T b_m, int32_T n, const real_T
  b_A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iy;
    if (n - 1 >= 0) {
      std::memset(&y_data[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));
    }

    iy = 0;
    b = (n - 1) * lda + ia0;
    for (int32_T b_iy{ia0}; lda < 0 ? b_iy >= b : b_iy <= b; b_iy += lda) {
      int32_T d;
      proc_control_B.c_n = 0.0;
      d = (b_iy + b_m) - 1;
      for (int32_T iyend{b_iy}; iyend <= d; iyend++) {
        proc_control_B.c_n += x_data[((ix0 + iyend) - b_iy) - 1] *
          b_A_data[iyend - 1];
      }

      y_data[iy] += proc_control_B.c_n;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_xgerc(int32_T b_m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T b_A_data[], int32_T ia0, int32_T
  lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j{0}; j < n; j++) {
      proc_control_B.temp_b = y_data[j];
      if (proc_control_B.temp_b != 0.0) {
        int32_T b;
        proc_control_B.temp_b *= alpha1;
        b = b_m + jA;
        for (int32_T ijA{jA}; ijA < b; ijA++) {
          b_A_data[ijA - 1] += b_A_data[((ix0 + ijA) - jA) - 1] *
            proc_control_B.temp_b;
        }
      }

      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_xgeqrf(real_T b_A_data[], const int32_T
  b_A_size[2], real_T tau_data[], int32_T tau_size[1])
{
  int32_T exitg1;
  int32_T n_tmp;
  boolean_T exitg2;
  proc_control_B.b_m_tmp = b_A_size[0];
  n_tmp = b_A_size[1];
  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minmana = b_A_size[0];
  } else {
    proc_control_B.minmana = b_A_size[1];
  }

  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minmn = b_A_size[0];
  } else {
    proc_control_B.minmn = b_A_size[1];
  }

  tau_size[0] = proc_control_B.minmana;
  if (proc_control_B.minmana - 1 >= 0) {
    std::memset(&tau_data[0], 0, static_cast<uint32_T>(proc_control_B.minmana) *
                sizeof(real_T));
  }

  if ((b_A_size[0] != 0) && (b_A_size[1] != 0) && (proc_control_B.minmn >= 1)) {
    tau_size[0] = proc_control_B.minmana;
    if (proc_control_B.minmana - 1 >= 0) {
      std::memset(&tau_data[0], 0, static_cast<uint32_T>(proc_control_B.minmana)
                  * sizeof(real_T));
    }

    if (n_tmp - 1 >= 0) {
      std::memset(&proc_control_B.work_data_m[0], 0, static_cast<uint32_T>(n_tmp)
                  * sizeof(real_T));
    }

    proc_control_B.b_ij = proc_control_B.minmn;
    for (proc_control_B.minmn = 0; proc_control_B.minmn < proc_control_B.b_ij;
         proc_control_B.minmn++) {
      proc_control_B.ii = proc_control_B.minmn * proc_control_B.b_m_tmp +
        proc_control_B.minmn;
      proc_control_B.mmi = proc_control_B.b_m_tmp - proc_control_B.minmn;
      if (proc_control_B.minmn + 1 < proc_control_B.b_m_tmp) {
        proc_control_B.atmp = b_A_data[proc_control_B.ii];
        proc_control_B.ix0_pf = proc_control_B.ii + 2;
        tau_data[proc_control_B.minmn] = 0.0;
        if (proc_control_B.mmi > 0) {
          proc_control_B.xnorm = proc_control_xnrm2(proc_control_B.mmi - 1,
            b_A_data, proc_control_B.ii + 2);
          if (proc_control_B.xnorm != 0.0) {
            proc_control_B.xnorm = proc_control_rt_hypotd_snf
              (b_A_data[proc_control_B.ii], proc_control_B.xnorm);
            if (b_A_data[proc_control_B.ii] >= 0.0) {
              proc_control_B.xnorm = -proc_control_B.xnorm;
            }

            if (std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292) {
              proc_control_B.minmana = 0;
              proc_control_B.coltop_c = proc_control_B.ii + proc_control_B.mmi;
              do {
                proc_control_B.minmana++;
                for (proc_control_B.mmip1 = proc_control_B.ix0_pf;
                     proc_control_B.mmip1 <= proc_control_B.coltop_c;
                     proc_control_B.mmip1++) {
                  b_A_data[proc_control_B.mmip1 - 1] *= 9.9792015476736E+291;
                }

                proc_control_B.xnorm *= 9.9792015476736E+291;
                proc_control_B.atmp *= 9.9792015476736E+291;
              } while ((std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292)
                       && (proc_control_B.minmana < 20));

              proc_control_B.xnorm = proc_control_rt_hypotd_snf
                (proc_control_B.atmp, proc_control_xnrm2(proc_control_B.mmi - 1,
                  b_A_data, proc_control_B.ii + 2));
              if (proc_control_B.atmp >= 0.0) {
                proc_control_B.xnorm = -proc_control_B.xnorm;
              }

              tau_data[proc_control_B.minmn] = (proc_control_B.xnorm -
                proc_control_B.atmp) / proc_control_B.xnorm;
              proc_control_B.atmp = 1.0 / (proc_control_B.atmp -
                proc_control_B.xnorm);
              for (proc_control_B.mmip1 = proc_control_B.ix0_pf;
                   proc_control_B.mmip1 <= proc_control_B.coltop_c;
                   proc_control_B.mmip1++) {
                b_A_data[proc_control_B.mmip1 - 1] *= proc_control_B.atmp;
              }

              for (proc_control_B.ix0_pf = 0; proc_control_B.ix0_pf <
                   proc_control_B.minmana; proc_control_B.ix0_pf++) {
                proc_control_B.xnorm *= 1.0020841800044864E-292;
              }

              proc_control_B.atmp = proc_control_B.xnorm;
            } else {
              tau_data[proc_control_B.minmn] = (proc_control_B.xnorm -
                b_A_data[proc_control_B.ii]) / proc_control_B.xnorm;
              proc_control_B.atmp = 1.0 / (b_A_data[proc_control_B.ii] -
                proc_control_B.xnorm);
              proc_control_B.mmip1 = proc_control_B.ii + proc_control_B.mmi;
              for (proc_control_B.minmana = proc_control_B.ix0_pf;
                   proc_control_B.minmana <= proc_control_B.mmip1;
                   proc_control_B.minmana++) {
                b_A_data[proc_control_B.minmana - 1] *= proc_control_B.atmp;
              }

              proc_control_B.atmp = proc_control_B.xnorm;
            }
          }
        }

        b_A_data[proc_control_B.ii] = proc_control_B.atmp;
      } else {
        tau_data[proc_control_B.minmn] = 0.0;
      }

      if (proc_control_B.minmn + 1 < n_tmp) {
        proc_control_B.xnorm = b_A_data[proc_control_B.ii];
        b_A_data[proc_control_B.ii] = 1.0;
        proc_control_B.ix0_pf = (proc_control_B.ii + proc_control_B.b_m_tmp) + 1;
        if (tau_data[proc_control_B.minmn] != 0.0) {
          proc_control_B.mmip1 = proc_control_B.ii + proc_control_B.mmi;
          while ((proc_control_B.mmi > 0) && (b_A_data[proc_control_B.mmip1 - 1]
                  == 0.0)) {
            proc_control_B.mmi--;
            proc_control_B.mmip1--;
          }

          proc_control_B.mmip1 = (n_tmp - proc_control_B.minmn) - 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.mmip1 > 0)) {
            proc_control_B.coltop_c = (proc_control_B.mmip1 - 1) *
              proc_control_B.b_m_tmp + proc_control_B.ix0_pf;
            proc_control_B.minmana = proc_control_B.coltop_c;
            do {
              exitg1 = 0;
              if (proc_control_B.minmana <= (proc_control_B.coltop_c +
                   proc_control_B.mmi) - 1) {
                if (b_A_data[proc_control_B.minmana - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.minmana++;
                }
              } else {
                proc_control_B.mmip1--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.mmi = 0;
          proc_control_B.mmip1 = 0;
        }

        if (proc_control_B.mmi > 0) {
          proc_control_xgemv(proc_control_B.mmi, proc_control_B.mmip1, b_A_data,
                             proc_control_B.ix0_pf, proc_control_B.b_m_tmp,
                             b_A_data, proc_control_B.ii + 1,
                             proc_control_B.work_data_m);
          proc_control_xgerc(proc_control_B.mmi, proc_control_B.mmip1,
                             -tau_data[proc_control_B.minmn], proc_control_B.ii
                             + 1, proc_control_B.work_data_m, b_A_data,
                             proc_control_B.ix0_pf, proc_control_B.b_m_tmp);
        }

        b_A_data[proc_control_B.ii] = proc_control_B.xnorm;
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_xorgqr(int32_T b_m, int32_T n, int32_T k, real_T
  b_A_data[], const int32_T b_A_size[2], int32_T lda, const real_T tau_data[])
{
  int32_T exitg1;
  int32_T loop_ub;
  boolean_T exitg2;
  if (n >= 1) {
    for (proc_control_B.itau_d = k; proc_control_B.itau_d < n;
         proc_control_B.itau_d++) {
      proc_control_B.ia_p = proc_control_B.itau_d * lda;
      if (b_m - 1 >= 0) {
        std::memset(&b_A_data[proc_control_B.ia_p], 0, static_cast<uint32_T>
                    ((b_m + proc_control_B.ia_p) - proc_control_B.ia_p) * sizeof
                    (real_T));
      }

      b_A_data[proc_control_B.ia_p + proc_control_B.itau_d] = 1.0;
    }

    proc_control_B.itau_d = k - 1;
    loop_ub = b_A_size[1];
    if (loop_ub - 1 >= 0) {
      std::memset(&proc_control_B.work_data_e[0], 0, static_cast<uint32_T>
                  (loop_ub) * sizeof(real_T));
    }

    proc_control_B.i_l = k;
    while (proc_control_B.i_l >= 1) {
      proc_control_B.ia_p = (proc_control_B.i_l - 1) * lda + proc_control_B.i_l;
      if (proc_control_B.i_l < n) {
        b_A_data[proc_control_B.ia_p - 1] = 1.0;
        proc_control_B.lastc_b = (b_m - proc_control_B.i_l) - 1;
        loop_ub = proc_control_B.ia_p + lda;
        if (tau_data[proc_control_B.itau_d] != 0.0) {
          proc_control_B.lastv_h = proc_control_B.lastc_b + 2;
          proc_control_B.lastc_b += proc_control_B.ia_p;
          while ((proc_control_B.lastv_h > 0) &&
                 (b_A_data[proc_control_B.lastc_b] == 0.0)) {
            proc_control_B.lastv_h--;
            proc_control_B.lastc_b--;
          }

          proc_control_B.lastc_b = n - proc_control_B.i_l;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc_b > 0)) {
            proc_control_B.coltop_l = (proc_control_B.lastc_b - 1) * lda +
              loop_ub;
            proc_control_B.b_ia = proc_control_B.coltop_l;
            do {
              exitg1 = 0;
              if (proc_control_B.b_ia <= (proc_control_B.coltop_l +
                   proc_control_B.lastv_h) - 1) {
                if (b_A_data[proc_control_B.b_ia - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.b_ia++;
                }
              } else {
                proc_control_B.lastc_b--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.lastv_h = 0;
          proc_control_B.lastc_b = 0;
        }

        if (proc_control_B.lastv_h > 0) {
          proc_control_xgemv(proc_control_B.lastv_h, proc_control_B.lastc_b,
                             b_A_data, loop_ub, lda, b_A_data,
                             proc_control_B.ia_p, proc_control_B.work_data_e);
          proc_control_xgerc(proc_control_B.lastv_h, proc_control_B.lastc_b,
                             -tau_data[proc_control_B.itau_d],
                             proc_control_B.ia_p, proc_control_B.work_data_e,
                             b_A_data, loop_ub, lda);
        }
      }

      if (proc_control_B.i_l < b_m) {
        proc_control_B.lastv_h = (proc_control_B.ia_p + b_m) -
          proc_control_B.i_l;
        for (loop_ub = proc_control_B.ia_p + 1; loop_ub <=
             proc_control_B.lastv_h; loop_ub++) {
          b_A_data[loop_ub - 1] *= -tau_data[proc_control_B.itau_d];
        }
      }

      b_A_data[proc_control_B.ia_p - 1] = 1.0 - tau_data[proc_control_B.itau_d];
      proc_control_B.lastv_h = static_cast<uint8_T>(proc_control_B.i_l - 1);
      for (loop_ub = 0; loop_ub < proc_control_B.lastv_h; loop_ub++) {
        b_A_data[(proc_control_B.ia_p - loop_ub) - 2] = 0.0;
      }

      proc_control_B.itau_d--;
      proc_control_B.i_l--;
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
real_T proc_control::proc_control_KWIKfactor(const coder::array<real_T, 2U>
  &b_Ac, const coder::array<int32_T, 1U> &iC, int32_T nA, const real_T
  Linv_data[], const int32_T Linv_size[2], real_T RLinv_data[], const int32_T
  RLinv_size[2], real_T b_D_data[], const int32_T b_D_size[2], real_T b_H_data[],
  const int32_T b_H_size[2], int32_T n)
{
  real_T Status;
  int32_T exitg1;
  proc_control_B.loop_ub_d = Linv_size[0];
  proc_control_B.TL_size_idx_0 = Linv_size[0];
  Status = 1.0;
  proc_control_B.RLinv_idx_0_tmp = RLinv_size[0];
  proc_control_B.RLinv_idx_1_tmp = RLinv_size[1];
  for (proc_control_B.i_j = 0; proc_control_B.i_j <
       proc_control_B.RLinv_idx_1_tmp; proc_control_B.i_j++) {
    for (proc_control_B.b_m = 0; proc_control_B.b_m <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.b_m++) {
      RLinv_data[proc_control_B.b_m + RLinv_size[0] * proc_control_B.i_j] = 0.0;
    }
  }

  for (proc_control_B.b_m = 0; proc_control_B.b_m < nA; proc_control_B.b_m++) {
    proc_control_B.iC_n = iC[proc_control_B.b_m];
    proc_control_B.b_n = b_Ac.size(1);
    for (proc_control_B.i_j = 0; proc_control_B.i_j < proc_control_B.b_n;
         proc_control_B.i_j++) {
      proc_control_B.b_Ac_data[proc_control_B.i_j] = b_Ac[(b_Ac.size(0) *
        proc_control_B.i_j + proc_control_B.iC_n) - 1];
    }

    proc_control_mtimes_afai05(Linv_data, Linv_size, proc_control_B.b_Ac_data,
      proc_control_B.tau_data, proc_control_B.tau_size);
    for (proc_control_B.i_j = 0; proc_control_B.i_j <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.i_j++) {
      RLinv_data[proc_control_B.i_j + RLinv_size[0] * proc_control_B.b_m] =
        proc_control_B.tau_data[proc_control_B.i_j];
    }
  }

  proc_control_B.b_m = RLinv_size[0] - 1;
  proc_control_B.Q_size[0] = RLinv_size[0];
  proc_control_B.Q_size[1] = RLinv_size[0];
  proc_control_B.R_size_idx_0 = RLinv_size[0];
  if (RLinv_size[0] > RLinv_size[1]) {
    for (proc_control_B.b_n = 0; proc_control_B.b_n <
         proc_control_B.RLinv_idx_1_tmp; proc_control_B.b_n++) {
      for (proc_control_B.i_j = 0; proc_control_B.i_j <= proc_control_B.b_m;
           proc_control_B.i_j++) {
        proc_control_B.Q_data[proc_control_B.i_j + proc_control_B.Q_size[0] *
          proc_control_B.b_n] = RLinv_data[RLinv_size[0] * proc_control_B.b_n +
          proc_control_B.i_j];
      }
    }

    proc_control_B.iC_n = RLinv_size[1] + 1;
    for (proc_control_B.b_n = proc_control_B.iC_n; proc_control_B.b_n <=
         proc_control_B.b_m + 1; proc_control_B.b_n++) {
      for (proc_control_B.i_j = 0; proc_control_B.i_j <= proc_control_B.b_m;
           proc_control_B.i_j++) {
        proc_control_B.Q_data[proc_control_B.i_j + proc_control_B.Q_size[0] *
          (proc_control_B.b_n - 1)] = 0.0;
      }
    }

    proc_control_xgeqrf(proc_control_B.Q_data, proc_control_B.Q_size,
                        proc_control_B.tau_data, proc_control_B.tau_size);
    for (proc_control_B.b_n = 0; proc_control_B.b_n <
         proc_control_B.RLinv_idx_1_tmp; proc_control_B.b_n++) {
      for (proc_control_B.i_j = 0; proc_control_B.i_j <= proc_control_B.b_n;
           proc_control_B.i_j++) {
        proc_control_B.R_data[proc_control_B.i_j + proc_control_B.R_size_idx_0 *
          proc_control_B.b_n] = proc_control_B.Q_data[proc_control_B.Q_size[0] *
          proc_control_B.b_n + proc_control_B.i_j];
      }

      for (proc_control_B.i_j = proc_control_B.b_n + 2; proc_control_B.i_j <=
           proc_control_B.b_m + 1; proc_control_B.i_j++) {
        proc_control_B.R_data[(proc_control_B.i_j + proc_control_B.R_size_idx_0 *
          proc_control_B.b_n) - 1] = 0.0;
      }
    }

    proc_control_xorgqr(RLinv_size[0], RLinv_size[0], RLinv_size[1],
                        proc_control_B.Q_data, proc_control_B.Q_size,
                        RLinv_size[0], proc_control_B.tau_data);
  } else {
    proc_control_B.b_A_size[0] = RLinv_size[0];
    proc_control_B.b_A_size[1] = RLinv_size[1];
    proc_control_B.iC_n = RLinv_size[0] * RLinv_size[1];
    if (proc_control_B.iC_n - 1 >= 0) {
      std::memcpy(&proc_control_B.b_A_data[0], &RLinv_data[0],
                  static_cast<uint32_T>(proc_control_B.iC_n) * sizeof(real_T));
    }

    proc_control_xgeqrf(proc_control_B.b_A_data, proc_control_B.b_A_size,
                        proc_control_B.tau_data, proc_control_B.tau_size);
    for (proc_control_B.i_j = 0; proc_control_B.i_j <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.i_j++) {
      for (proc_control_B.iC_n = 0; proc_control_B.iC_n <= proc_control_B.i_j;
           proc_control_B.iC_n++) {
        proc_control_B.R_data[proc_control_B.iC_n + proc_control_B.R_size_idx_0 *
          proc_control_B.i_j] = proc_control_B.b_A_data[proc_control_B.b_A_size
          [0] * proc_control_B.i_j + proc_control_B.iC_n];
      }

      for (proc_control_B.iC_n = proc_control_B.i_j + 2; proc_control_B.iC_n <=
           proc_control_B.b_m + 1; proc_control_B.iC_n++) {
        proc_control_B.R_data[(proc_control_B.iC_n + proc_control_B.R_size_idx_0
          * proc_control_B.i_j) - 1] = 0.0;
      }
    }

    proc_control_B.b_n = RLinv_size[0] + 1;
    for (proc_control_B.i_j = proc_control_B.b_n; proc_control_B.i_j <=
         proc_control_B.RLinv_idx_1_tmp; proc_control_B.i_j++) {
      for (proc_control_B.iC_n = 0; proc_control_B.iC_n <= proc_control_B.b_m;
           proc_control_B.iC_n++) {
        proc_control_B.R_data[proc_control_B.iC_n + proc_control_B.R_size_idx_0 *
          (proc_control_B.i_j - 1)] = proc_control_B.b_A_data
          [(proc_control_B.i_j - 1) * proc_control_B.b_A_size[0] +
          proc_control_B.iC_n];
      }
    }

    proc_control_xorgqr(RLinv_size[0], RLinv_size[0], RLinv_size[0],
                        proc_control_B.b_A_data, proc_control_B.b_A_size,
                        RLinv_size[0], proc_control_B.tau_data);
    for (proc_control_B.b_n = 0; proc_control_B.b_n <
         proc_control_B.RLinv_idx_0_tmp; proc_control_B.b_n++) {
      for (proc_control_B.i_j = 0; proc_control_B.i_j <= proc_control_B.b_m;
           proc_control_B.i_j++) {
        proc_control_B.Q_data[proc_control_B.i_j + proc_control_B.Q_size[0] *
          proc_control_B.b_n] = proc_control_B.b_A_data[proc_control_B.b_A_size
          [0] * proc_control_B.b_n + proc_control_B.i_j];
      }
    }
  }

  proc_control_B.b_m = 0;
  do {
    exitg1 = 0;
    if (proc_control_B.b_m <= nA - 1) {
      if (std::abs(proc_control_B.R_data[proc_control_B.R_size_idx_0 *
                   proc_control_B.b_m + proc_control_B.b_m]) < 1.0E-12) {
        Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.b_m++;
      }
    } else {
      proc_control_B.i_j_tmp = static_cast<uint8_T>(n);
      for (proc_control_B.b_m = 0; proc_control_B.b_m < proc_control_B.i_j_tmp;
           proc_control_B.b_m++) {
        for (proc_control_B.b_n = 0; proc_control_B.b_n < proc_control_B.i_j_tmp;
             proc_control_B.b_n++) {
          proc_control_B.Linv = 0.0;
          for (proc_control_B.i_j = 0; proc_control_B.i_j <
               proc_control_B.loop_ub_d; proc_control_B.i_j++) {
            proc_control_B.Linv += Linv_data[Linv_size[0] * proc_control_B.b_m +
              proc_control_B.i_j] * proc_control_B.Q_data[proc_control_B.Q_size
              [0] * proc_control_B.b_n + proc_control_B.i_j];
          }

          proc_control_B.TL_data[proc_control_B.b_m +
            proc_control_B.TL_size_idx_0 * proc_control_B.b_n] =
            proc_control_B.Linv;
        }
      }

      for (proc_control_B.i_j = 0; proc_control_B.i_j <
           proc_control_B.RLinv_idx_1_tmp; proc_control_B.i_j++) {
        for (proc_control_B.b_m = 0; proc_control_B.b_m <
             proc_control_B.RLinv_idx_0_tmp; proc_control_B.b_m++) {
          RLinv_data[proc_control_B.b_m + RLinv_size[0] * proc_control_B.i_j] =
            0.0;
        }
      }

      for (proc_control_B.b_m = nA; proc_control_B.b_m >= 1; proc_control_B.b_m
           --) {
        RLinv_data[(proc_control_B.b_m + RLinv_size[0] * (proc_control_B.b_m - 1))
          - 1] = 1.0;
        for (proc_control_B.b_n = proc_control_B.b_m; proc_control_B.b_n <= nA;
             proc_control_B.b_n++) {
          proc_control_B.loop_ub_d = ((proc_control_B.b_n - 1) * RLinv_size[0] +
            proc_control_B.b_m) - 1;
          RLinv_data[proc_control_B.loop_ub_d] /= proc_control_B.R_data
            [((proc_control_B.b_m - 1) * proc_control_B.R_size_idx_0 +
              proc_control_B.b_m) - 1];
        }

        if (proc_control_B.b_m > 1) {
          proc_control_B.iC_n = static_cast<uint8_T>(proc_control_B.b_m - 1);
          for (proc_control_B.b_n = 0; proc_control_B.b_n < proc_control_B.iC_n;
               proc_control_B.b_n++) {
            for (proc_control_B.i_j = proc_control_B.b_m; proc_control_B.i_j <=
                 nA; proc_control_B.i_j++) {
              proc_control_B.loop_ub_d = (proc_control_B.i_j - 1) * RLinv_size[0];
              proc_control_B.RLinv_idx_0_tmp = proc_control_B.b_n +
                proc_control_B.loop_ub_d;
              RLinv_data[proc_control_B.RLinv_idx_0_tmp] -=
                proc_control_B.R_data[(proc_control_B.b_m - 1) *
                proc_control_B.R_size_idx_0 + proc_control_B.b_n] * RLinv_data
                [(proc_control_B.b_m + proc_control_B.loop_ub_d) - 1];
            }
          }
        }
      }

      for (proc_control_B.b_m = 0; proc_control_B.b_m < proc_control_B.i_j_tmp;
           proc_control_B.b_m++) {
        for (proc_control_B.b_n = proc_control_B.b_m + 1; proc_control_B.b_n <=
             n; proc_control_B.b_n++) {
          proc_control_B.loop_ub_d = (proc_control_B.b_n - 1) * b_H_size[0] +
            proc_control_B.b_m;
          b_H_data[proc_control_B.loop_ub_d] = 0.0;
          for (proc_control_B.i_j = nA + 1; proc_control_B.i_j <= n;
               proc_control_B.i_j++) {
            proc_control_B.RLinv_idx_0_tmp = (proc_control_B.i_j - 1) *
              proc_control_B.TL_size_idx_0;
            b_H_data[proc_control_B.loop_ub_d] -= proc_control_B.TL_data
              [(proc_control_B.b_n + proc_control_B.RLinv_idx_0_tmp) - 1] *
              proc_control_B.TL_data[proc_control_B.b_m +
              proc_control_B.RLinv_idx_0_tmp];
          }

          b_H_data[(proc_control_B.b_n + b_H_size[0] * proc_control_B.b_m) - 1] =
            b_H_data[proc_control_B.loop_ub_d];
        }
      }

      for (proc_control_B.b_m = 0; proc_control_B.b_m < nA; proc_control_B.b_m++)
      {
        for (proc_control_B.b_n = 0; proc_control_B.b_n < proc_control_B.i_j_tmp;
             proc_control_B.b_n++) {
          proc_control_B.loop_ub_d = b_D_size[0] * proc_control_B.b_m +
            proc_control_B.b_n;
          b_D_data[proc_control_B.loop_ub_d] = 0.0;
          for (proc_control_B.i_j = proc_control_B.b_m + 1; proc_control_B.i_j <=
               nA; proc_control_B.i_j++) {
            b_D_data[proc_control_B.loop_ub_d] += proc_control_B.TL_data
              [(proc_control_B.i_j - 1) * proc_control_B.TL_size_idx_0 +
              proc_control_B.b_n] * RLinv_data[(proc_control_B.i_j - 1) *
              RLinv_size[0] + proc_control_B.b_m];
          }
        }
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return Status;
}

void proc_control::proc_control_binary_expand_op_7(real_T in1_data[], int32_T
  in1_size[1], real_T in2, const real_T in3_data[], const int32_T in3_size[1])
{
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_1_0;
  loop_ub = in3_size[0] == 1 ? in1_size[0] : in3_size[0];
  stride_0_0 = (in1_size[0] != 1);
  stride_1_0 = (in3_size[0] != 1);
  for (int32_T i{0}; i < loop_ub; i++) {
    proc_control_B.in1_data_m[i] = in3_data[i * stride_1_0] * in2 + in1_data[i *
      stride_0_0];
  }

  in1_size[0] = loop_ub;
  if (loop_ub - 1 >= 0) {
    std::memcpy(&in1_data[0], &proc_control_B.in1_data_m[0],
                static_cast<uint32_T>(loop_ub) * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_solveQP(const real_T xQP[21], int32_T nCon,
  int32_T b_degrees, const real_T Kx_data[], const real_T Kr_data[], const
  int32_T Kr_size[2], const coder::array<real_T, 1U> &rseq, const real_T
  Ku1_data[], const real_T old_u[8], const real_T Kv_data[], const int32_T
  Kv_size[2], const coder::array<real_T, 1U> &vseq, const real_T Kut_data[],
  const int32_T Kut_size[2], const real_T b_utarget_data[], const real_T
  Linv_data[], const int32_T Linv_size[2], const real_T Hinv_data[], const
  int32_T Hinv_size[2], const coder::array<real_T, 2U> &b_Ac, const coder::array<
  real_T, 1U> &Bc, const coder::array<boolean_T, 1U> &iA, real_T zopt_data[],
  int32_T zopt_size[1], real_T f_data[], int32_T f_size[1], real_T *status)
{
  int32_T exitg1;
  boolean_T cTolComputed;
  boolean_T exitg2;
  boolean_T exitg3;
  boolean_T guard1;
  boolean_T isT1Inf;
  boolean_T tempOK;
  f_size[0] = b_degrees;
  if (b_degrees - 1 >= 0) {
    std::memset(&f_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof(real_T));
  }

  for (proc_control_B.nA_o = 0; proc_control_B.nA_o <= b_degrees - 2;
       proc_control_B.nA_o++) {
    proc_control_B.rMin_c = 0.0;
    for (proc_control_B.idx_g = 0; proc_control_B.idx_g < 21;
         proc_control_B.idx_g++) {
      proc_control_B.rMin_c += Kx_data[21 * proc_control_B.nA_o +
        proc_control_B.idx_g] * xQP[proc_control_B.idx_g];
    }

    proc_control_B.Xnorm0_b = 0.0;
    proc_control_B.loop_ub_pd = Kr_size[0];
    for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
         proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
      proc_control_B.Xnorm0_b += Kr_data[Kr_size[0] * proc_control_B.nA_o +
        proc_control_B.idx_g] * rseq[proc_control_B.idx_g];
    }

    proc_control_B.cMin_l = 0.0;
    for (proc_control_B.idx_g = 0; proc_control_B.idx_g < 8;
         proc_control_B.idx_g++) {
      proc_control_B.cMin_l += Ku1_data[(proc_control_B.nA_o << 3) +
        proc_control_B.idx_g] * old_u[proc_control_B.idx_g];
    }

    proc_control_B.cVal_o = 0.0;
    proc_control_B.loop_ub_pd = Kv_size[0];
    for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
         proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
      proc_control_B.cVal_o += Kv_data[Kv_size[0] * proc_control_B.nA_o +
        proc_control_B.idx_g] * vseq[proc_control_B.idx_g];
    }

    proc_control_B.t_dd = 0.0;
    proc_control_B.loop_ub_pd = Kut_size[0];
    for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
         proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
      proc_control_B.t_dd += Kut_data[Kut_size[0] * proc_control_B.nA_o +
        proc_control_B.idx_g] * b_utarget_data[proc_control_B.idx_g];
    }

    f_data[proc_control_B.nA_o] = (((proc_control_B.rMin_c +
      proc_control_B.Xnorm0_b) + proc_control_B.cMin_l) + proc_control_B.cVal_o)
      + proc_control_B.t_dd;
  }

  proc_control_B.loop_ub_pd = iA.size(0);
  proc_control_B.b_iA.set_size(iA.size(0));
  for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
       proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
    proc_control_B.b_iA[proc_control_B.idx_g] = iA[proc_control_B.idx_g];
  }

  proc_control_B.a__1.set_size(nCon);
  for (proc_control_B.idx_g = 0; proc_control_B.idx_g < nCon;
       proc_control_B.idx_g++) {
    proc_control_B.a__1[proc_control_B.idx_g] = 0.0;
  }

  proc_control_B.TotalFreeMoves_k = 1;
  if (nCon == 0) {
    zopt_size[0] = b_degrees;
    if (b_degrees - 1 >= 0) {
      std::memset(&zopt_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof
                  (real_T));
    }

    proc_control_B.nA_o = static_cast<uint8_T>(b_degrees);
    for (proc_control_B.kNext = 0; proc_control_B.kNext < proc_control_B.nA_o;
         proc_control_B.kNext++) {
      proc_control_B.Xnorm0_b = 0.0;
      proc_control_B.loop_ub_pd = Hinv_size[1];
      for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
           proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
        proc_control_B.Xnorm0_b += -Hinv_data[Hinv_size[0] *
          proc_control_B.idx_g + proc_control_B.kNext] *
          f_data[proc_control_B.idx_g];
      }

      zopt_data[proc_control_B.kNext] = proc_control_B.Xnorm0_b;
    }
  } else {
    if (b_degrees - 1 >= 0) {
      std::memset(&proc_control_B.r_data[0], 0, static_cast<uint32_T>(b_degrees)
                  * sizeof(real_T));
    }

    proc_control_B.rMin_c = 0.0;
    proc_control_B.RLinv_size[0] = Linv_size[0];
    proc_control_B.RLinv_size[1] = Linv_size[1];
    proc_control_B.b_D_size[0] = Linv_size[0];
    proc_control_B.b_D_size[1] = Linv_size[1];
    proc_control_B.b_H_size_a[0] = Linv_size[0];
    proc_control_B.b_H_size_a[1] = Linv_size[1];
    proc_control_B.cTol.set_size(nCon);
    cTolComputed = false;
    proc_control_B.iC.set_size(nCon);
    for (proc_control_B.idx_g = 0; proc_control_B.idx_g < nCon;
         proc_control_B.idx_g++) {
      proc_control_B.cTol[proc_control_B.idx_g] = 1.0;
      proc_control_B.iC[proc_control_B.idx_g] = 0;
    }

    proc_control_B.nA_o = -1;
    zopt_size[0] = b_degrees;
    if (b_degrees - 1 >= 0) {
      std::memset(&zopt_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof
                  (real_T));
    }

    proc_control_B.kNext = static_cast<uint8_T>(b_degrees);
    for (proc_control_B.kDrop = 0; proc_control_B.kDrop < proc_control_B.kNext;
         proc_control_B.kDrop++) {
      proc_control_B.Xnorm0_b = 0.0;
      proc_control_B.loop_ub_pd = Hinv_size[1];
      for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
           proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
        proc_control_B.Xnorm0_b += -Hinv_data[Hinv_size[0] *
          proc_control_B.idx_g + proc_control_B.kDrop] *
          f_data[proc_control_B.idx_g];
      }

      zopt_data[proc_control_B.kDrop] = proc_control_B.Xnorm0_b;
    }

    proc_control_B.Xnorm0_b = proc_control_norm(zopt_data, zopt_size);
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.TotalFreeMoves_k <= 940)) {
      proc_control_B.cMin_l = -0.01;
      proc_control_B.kNext = -1;
      for (proc_control_B.kDrop = 0; proc_control_B.kDrop < nCon;
           proc_control_B.kDrop++) {
        if (!cTolComputed) {
          proc_control_B.loop_ub_pd = b_Ac.size(1);
          if (zopt_size[0] == b_Ac.size(1)) {
            proc_control_B.AcRow_size[0] = 1;
            proc_control_B.AcRow_size[1] = b_Ac.size(1);
            for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                 proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
              proc_control_B.AcRow_data[proc_control_B.idx_g] = b_Ac[b_Ac.size(0)
                * proc_control_B.idx_g + proc_control_B.kDrop] *
                zopt_data[proc_control_B.idx_g];
            }
          } else {
            proc_control_binary_expand_op_6(proc_control_B.AcRow_data,
              proc_control_B.AcRow_size, b_Ac, proc_control_B.kDrop, zopt_data,
              zopt_size);
          }

          proc_control_B.last = proc_control_B.AcRow_size[1];
          for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
               proc_control_B.last; proc_control_B.idx_g++) {
            proc_control_B.z_data[proc_control_B.idx_g] = std::abs
              (proc_control_B.AcRow_data[proc_control_B.idx_g]);
          }

          if (static_cast<uint8_T>(proc_control_B.AcRow_size[1] - 1) + 1 <= 2) {
            if (static_cast<uint8_T>(proc_control_B.AcRow_size[1] - 1) + 1 == 1)
            {
              proc_control_B.cVal_o = proc_control_B.z_data[0];
            } else {
              proc_control_B.cVal_o =
                proc_control_B.z_data[proc_control_B.AcRow_size[1] - 1];
              proc_control_B.idx_g = 0;
              proc_control_B.t_dd = proc_control_B.z_data[proc_control_B.idx_g];
              if (!(proc_control_B.t_dd < proc_control_B.cVal_o)) {
                if (std::isnan(proc_control_B.z_data[proc_control_B.idx_g])) {
                  if (std::isnan(proc_control_B.cVal_o)) {
                    proc_control_B.cVal_o = proc_control_B.t_dd;
                  }
                } else {
                  proc_control_B.cVal_o = proc_control_B.t_dd;
                }
              }
            }
          } else {
            proc_control_B.cVal_o = proc_control_B.z_data[0];
            if (!std::isnan(proc_control_B.cVal_o)) {
              proc_control_B.idx_g = 1;
            } else {
              proc_control_B.idx_g = 0;
              proc_control_B.loop_ub_pd = 2;
              exitg3 = false;
              while ((!exitg3) && (proc_control_B.loop_ub_pd <=
                                   proc_control_B.last)) {
                if (!std::isnan(proc_control_B.z_data[proc_control_B.loop_ub_pd
                                - 1])) {
                  proc_control_B.idx_g = proc_control_B.loop_ub_pd;
                  exitg3 = true;
                } else {
                  proc_control_B.loop_ub_pd++;
                }
              }
            }

            if (proc_control_B.idx_g == 0) {
            } else {
              proc_control_B.cVal_o = proc_control_B.z_data[proc_control_B.idx_g
                - 1];
              for (proc_control_B.loop_ub_pd = proc_control_B.idx_g + 1;
                   proc_control_B.loop_ub_pd <= proc_control_B.last;
                   proc_control_B.loop_ub_pd++) {
                proc_control_B.t_dd =
                  proc_control_B.z_data[proc_control_B.loop_ub_pd - 1];
                if (proc_control_B.cVal_o < proc_control_B.t_dd) {
                  proc_control_B.cVal_o = proc_control_B.t_dd;
                }
              }
            }
          }

          proc_control_B.cTol[proc_control_B.kDrop] = std::fmax
            (proc_control_B.cTol[proc_control_B.kDrop], proc_control_B.cVal_o);
        }

        if (!proc_control_B.b_iA[proc_control_B.kDrop]) {
          proc_control_B.t_dd = 0.0;
          proc_control_B.loop_ub_pd = b_Ac.size(1);
          for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
               proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
            proc_control_B.t_dd += b_Ac[b_Ac.size(0) * proc_control_B.idx_g +
              proc_control_B.kDrop] * zopt_data[proc_control_B.idx_g];
          }

          proc_control_B.cVal_o = (proc_control_B.t_dd - Bc[proc_control_B.kDrop])
            / proc_control_B.cTol[proc_control_B.kDrop];
          if (proc_control_B.cVal_o < proc_control_B.cMin_l) {
            proc_control_B.cMin_l = proc_control_B.cVal_o;
            proc_control_B.kNext = proc_control_B.kDrop;
          }
        }
      }

      cTolComputed = true;
      if (proc_control_B.kNext + 1 <= 0) {
        exitg2 = true;
      } else if (proc_control_B.TotalFreeMoves_k == 940) {
        proc_control_B.TotalFreeMoves_k = 0;
        exitg2 = true;
      } else {
        do {
          exitg1 = 0;
          if ((proc_control_B.kNext + 1 > 0) && (proc_control_B.TotalFreeMoves_k
               <= 940)) {
            proc_control_B.AcRow_size[0] = 1;
            proc_control_B.loop_ub_pd = b_Ac.size(1);
            proc_control_B.AcRow_size[1] = b_Ac.size(1);
            for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                 proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
              proc_control_B.AcRow_data[proc_control_B.idx_g] = b_Ac[b_Ac.size(0)
                * proc_control_B.idx_g + proc_control_B.kNext];
            }

            guard1 = false;
            if (proc_control_B.nA_o + 1 == 0) {
              proc_control_mtimes_afai05(Hinv_data, Hinv_size,
                proc_control_B.AcRow_data, proc_control_B.z_data,
                proc_control_B.z_size);
              guard1 = true;
            } else {
              proc_control_B.cMin_l = proc_control_KWIKfactor(b_Ac,
                proc_control_B.iC, proc_control_B.nA_o + 1, Linv_data, Linv_size,
                proc_control_B.RLinv_data, proc_control_B.RLinv_size,
                proc_control_B.b_D_data, proc_control_B.b_D_size,
                proc_control_B.b_H_data, proc_control_B.b_H_size_a, b_degrees);
              if (proc_control_B.cMin_l <= 0.0) {
                proc_control_B.TotalFreeMoves_k = -2;
                exitg1 = 1;
              } else {
                proc_control_B.b_H_size_n[0] = proc_control_B.b_H_size_a[0];
                proc_control_B.b_H_size_n[1] = proc_control_B.b_H_size_a[1];
                proc_control_B.kDrop = proc_control_B.b_H_size_a[0] *
                  proc_control_B.b_H_size_a[1];
                for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                     proc_control_B.kDrop; proc_control_B.idx_g++) {
                  proc_control_B.b_H_data_f[proc_control_B.idx_g] =
                    -proc_control_B.b_H_data[proc_control_B.idx_g];
                }

                proc_control_mtimes_afai05(proc_control_B.b_H_data_f,
                  proc_control_B.b_H_size_n, proc_control_B.AcRow_data,
                  proc_control_B.z_data, proc_control_B.z_size);
                for (proc_control_B.kDrop = 0; proc_control_B.kDrop <=
                     proc_control_B.nA_o; proc_control_B.kDrop++) {
                  proc_control_B.cMin_l = 0.0;
                  for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                       proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
                    proc_control_B.cMin_l +=
                      proc_control_B.b_D_data[proc_control_B.b_D_size[0] *
                      proc_control_B.kDrop + proc_control_B.idx_g] *
                      proc_control_B.AcRow_data[proc_control_B.idx_g];
                  }

                  proc_control_B.r_data[proc_control_B.kDrop] =
                    proc_control_B.cMin_l;
                }

                guard1 = true;
              }
            }

            if (guard1) {
              proc_control_B.kDrop = 0;
              proc_control_B.cMin_l = 0.0;
              isT1Inf = true;
              tempOK = true;
              if (proc_control_B.nA_o + 1 > 0) {
                proc_control_B.last = 0;
                exitg3 = false;
                while ((!exitg3) && (proc_control_B.last <= proc_control_B.nA_o))
                {
                  if (proc_control_B.r_data[proc_control_B.last] >= 1.0E-12) {
                    tempOK = false;
                    exitg3 = true;
                  } else {
                    proc_control_B.last++;
                  }
                }
              }

              if ((proc_control_B.nA_o + 1 != 0) && (!tempOK)) {
                for (proc_control_B.last = 0; proc_control_B.last <=
                     proc_control_B.nA_o; proc_control_B.last++) {
                  proc_control_B.cVal_o =
                    proc_control_B.r_data[proc_control_B.last];
                  if (proc_control_B.cVal_o > 1.0E-12) {
                    proc_control_B.cVal_o =
                      proc_control_B.a__1[proc_control_B.iC[proc_control_B.last]
                      - 1] / proc_control_B.cVal_o;
                    if ((proc_control_B.kDrop == 0) || (proc_control_B.cVal_o <
                         proc_control_B.rMin_c)) {
                      proc_control_B.rMin_c = proc_control_B.cVal_o;
                      proc_control_B.kDrop = proc_control_B.last + 1;
                    }
                  }
                }

                if (proc_control_B.kDrop > 0) {
                  proc_control_B.cMin_l = proc_control_B.rMin_c;
                  isT1Inf = false;
                }
              }

              proc_control_B.cVal_o = 0.0;
              if (proc_control_B.z_size[0] >= 1) {
                proc_control_B.last = proc_control_B.z_size[0];
                for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                     proc_control_B.last; proc_control_B.idx_g++) {
                  proc_control_B.cVal_o += b_Ac[b_Ac.size(0) *
                    proc_control_B.idx_g + proc_control_B.kNext] *
                    proc_control_B.z_data[proc_control_B.idx_g];
                }
              }

              if (proc_control_B.cVal_o <= 0.0) {
                proc_control_B.cVal_o = 0.0;
                tempOK = true;
              } else {
                proc_control_B.t_dd = 0.0;
                for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                     proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
                  proc_control_B.t_dd += b_Ac[b_Ac.size(0) *
                    proc_control_B.idx_g + proc_control_B.kNext] *
                    zopt_data[proc_control_B.idx_g];
                }

                proc_control_B.cVal_o = (Bc[proc_control_B.kNext] -
                  proc_control_B.t_dd) / proc_control_B.cVal_o;
                tempOK = false;
              }

              if (isT1Inf && tempOK) {
                proc_control_B.TotalFreeMoves_k = -1;
                exitg1 = 1;
              } else {
                if (tempOK) {
                  proc_control_B.t_dd = proc_control_B.cMin_l;
                } else if (isT1Inf) {
                  proc_control_B.t_dd = proc_control_B.cVal_o;
                } else if (proc_control_B.cMin_l < proc_control_B.cVal_o) {
                  proc_control_B.t_dd = proc_control_B.cMin_l;
                } else {
                  proc_control_B.t_dd = proc_control_B.cVal_o;
                }

                for (proc_control_B.last = 0; proc_control_B.last <=
                     proc_control_B.nA_o; proc_control_B.last++) {
                  proc_control_B.idx_g = proc_control_B.iC[proc_control_B.last];
                  proc_control_B.a__1[proc_control_B.idx_g - 1] =
                    proc_control_B.a__1[proc_control_B.idx_g - 1] -
                    proc_control_B.t_dd *
                    proc_control_B.r_data[proc_control_B.last];
                  if ((proc_control_B.idx_g <= nCon) &&
                      (proc_control_B.a__1[proc_control_B.idx_g - 1] < 0.0)) {
                    proc_control_B.a__1[proc_control_B.idx_g - 1] = 0.0;
                  }
                }

                proc_control_B.a__1[proc_control_B.kNext] =
                  proc_control_B.a__1[proc_control_B.kNext] +
                  proc_control_B.t_dd;
                if ((std::abs(proc_control_B.t_dd - proc_control_B.cMin_l) <
                     2.2204460492503131E-16) && (proc_control_B.kDrop > 0)) {
                  proc_control_B.b_iA[proc_control_B.iC[proc_control_B.kDrop - 1]
                    - 1] = false;
                  if (proc_control_B.kDrop < proc_control_B.nA_o + 1) {
                    for (proc_control_B.last = proc_control_B.kDrop;
                         proc_control_B.last <= proc_control_B.nA_o;
                         proc_control_B.last++) {
                      proc_control_B.iC[proc_control_B.last - 1] =
                        proc_control_B.iC[proc_control_B.last];
                    }
                  }

                  proc_control_B.iC[proc_control_B.nA_o] = 0;
                  proc_control_B.nA_o--;
                }

                if (!tempOK) {
                  if (zopt_size[0] == proc_control_B.z_size[0]) {
                    proc_control_B.loop_ub_pd = zopt_size[0];
                    for (proc_control_B.idx_g = 0; proc_control_B.idx_g <
                         proc_control_B.loop_ub_pd; proc_control_B.idx_g++) {
                      zopt_data[proc_control_B.idx_g] += proc_control_B.t_dd *
                        proc_control_B.z_data[proc_control_B.idx_g];
                    }
                  } else {
                    proc_control_binary_expand_op_7(zopt_data, zopt_size,
                      proc_control_B.t_dd, proc_control_B.z_data,
                      proc_control_B.z_size);
                  }

                  if (std::abs(proc_control_B.t_dd - proc_control_B.cVal_o) <
                      2.2204460492503131E-16) {
                    if (proc_control_B.nA_o + 1 == b_degrees) {
                      proc_control_B.TotalFreeMoves_k = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA_o++;
                      proc_control_B.iC[proc_control_B.nA_o] =
                        proc_control_B.kNext + 1;
                      proc_control_B.kDrop = proc_control_B.nA_o;
                      exitg3 = false;
                      while ((!exitg3) && (proc_control_B.kDrop + 1 > 1)) {
                        proc_control_B.idx_g =
                          proc_control_B.iC[proc_control_B.kDrop - 1];
                        if (proc_control_B.iC[proc_control_B.kDrop] >
                            proc_control_B.idx_g) {
                          exitg3 = true;
                        } else {
                          proc_control_B.last =
                            proc_control_B.iC[proc_control_B.kDrop];
                          proc_control_B.iC[proc_control_B.kDrop] =
                            proc_control_B.idx_g;
                          proc_control_B.iC[proc_control_B.kDrop - 1] =
                            proc_control_B.last;
                          proc_control_B.kDrop--;
                        }
                      }

                      proc_control_B.b_iA[proc_control_B.kNext] = true;
                      proc_control_B.kNext = -1;
                      proc_control_B.TotalFreeMoves_k++;
                    }
                  } else {
                    proc_control_B.TotalFreeMoves_k++;
                  }
                } else {
                  proc_control_B.TotalFreeMoves_k++;
                }
              }
            }
          } else {
            proc_control_B.cMin_l = proc_control_norm(zopt_data, zopt_size);
            if (std::abs(proc_control_B.cMin_l - proc_control_B.Xnorm0_b) >
                0.001) {
              proc_control_B.Xnorm0_b = proc_control_B.cMin_l;
              proc_control_B.kNext = Bc.size(0);
              proc_control_B.cTol.set_size(Bc.size(0));
              for (proc_control_B.kDrop = 0; proc_control_B.kDrop <
                   proc_control_B.kNext; proc_control_B.kDrop++) {
                proc_control_B.cTol[proc_control_B.kDrop] = std::abs
                  (Bc[proc_control_B.kDrop]);
                proc_control_B.cTol[proc_control_B.kDrop] = std::fmax
                  (proc_control_B.cTol[proc_control_B.kDrop], 1.0);
              }

              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }

  *status = proc_control_B.TotalFreeMoves_k;
  if ((proc_control_B.TotalFreeMoves_k < 0) || (proc_control_B.TotalFreeMoves_k ==
       0)) {
    zopt_size[0] = b_degrees;
    if (b_degrees - 1 >= 0) {
      std::memset(&zopt_data[0], 0, static_cast<uint32_T>(b_degrees) * sizeof
                  (real_T));
    }
  }
}

// Function for MATLAB Function: '<S176>/VariableHorizonOptimizer'
void proc_control::proc_contr_mpcblock_optimizerPM(const coder::array<real_T, 1U>
  &rseq, const coder::array<real_T, 1U> &vseq, const real_T umin[8], const
  real_T umax[8], const real_T x[21], const real_T old_u[8], const real_T Mlim0
  [226], const real_T utargetseq[80], int32_T b_p, int32_T moves, const real_T
  b_uoff[8], const real_T H0[81], const real_T Ac0[2034], const real_T ywt[13],
  const real_T uwt[8], const real_T duwt[8], const real_T b_A[441], const coder::
  array<real_T, 3U> &Bu, const coder::array<real_T, 3U> &Bv, const real_T b_C
  [273], const coder::array<real_T, 3U> &Dv, real_T u[8], real_T useq[88],
  real_T *status)
{
  int8_T empty_non_axis_sizes_3[2];
  int8_T empty_non_axis_sizes_4[2];
  int8_T empty_non_axis_sizes_5[2];
  int8_T sizes_idx_1;
  uint8_T empty_non_axis_sizes_0[2];
  uint8_T empty_non_axis_sizes_1[2];
  uint8_T empty_non_axis_sizes_2[2];
  uint8_T varargin_1[2];
  boolean_T empty_non_axis_sizes;
  boolean_T tmp;
  static const int16_T v[226]{ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141,
    142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162,
    163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180,
    181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201,
    202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219,
    220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240,
    241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258,
    259, 260, 261, 262, 263, 264, 265, 266, 267, 340, 341, 342, 343, 344, 345,
    346, 347 };

  boolean_T exitg1;
  std::memset(&useq[0], 0, 88U * sizeof(real_T));
  if (b_p > 10) {
    b_p = 10;
  }

  if (b_p <= 1) {
    b_p = 1;
  }

  proc_control_B.pny = b_p * 13;
  proc_control_B.pny_l = b_p << 3;
  if (b_p <= moves) {
    proc_control_B.nmoves = b_p;
  } else {
    proc_control_B.nmoves = moves;
  }

  proc_control_B.TotalFreeMoves = proc_control_B.nmoves << 3;
  proc_control_B.Jm_size[0] = proc_control_B.pny_l;
  proc_control_B.Jm_size[1] = proc_control_B.TotalFreeMoves;
  proc_control_B.loop_ub = proc_control_B.pny_l * proc_control_B.TotalFreeMoves;
  if (proc_control_B.loop_ub - 1 >= 0) {
    std::memset(&proc_control_B.Jm_data[0], 0, static_cast<uint32_T>
                (proc_control_B.loop_ub) * sizeof(real_T));
  }

  proc_control_B.j = 0;
  for (proc_control_B.ioff = 0; proc_control_B.ioff < proc_control_B.nmoves;
       proc_control_B.ioff++) {
    for (proc_control_B.b_j_n = 0; proc_control_B.b_j_n < 8;
         proc_control_B.b_j_n++) {
      proc_control_B.Jm_data[((proc_control_B.j << 3) + proc_control_B.b_j_n) +
        proc_control_B.pny_l * ((proc_control_B.ioff << 3) +
        proc_control_B.b_j_n)] = 1.0;
    }

    proc_control_B.j++;
  }

  proc_control_B.tmp_size_c[0] = b_p;
  proc_control_kron(proc_control_B.tmp_size_c, proc_control_B.I1_data,
                    proc_control_B.I1_size);
  proc_control_mpc_constraintcoef(b_A, &(*(coder::array<real_T, 3U> *)&Bu)[0],
    &(*(coder::array<real_T, 3U> *)&Bv)[0], b_C, &(*(coder::array<real_T, 3U> *)
    &Dv)[0], proc_control_B.Jm_data, proc_control_B.Jm_size,
    proc_control_B.SuJm_data, proc_control_B.SuJm_size, proc_control_B.Sx_data_g,
    proc_control_B.Sx_size, proc_control_B.Su1_data_o, proc_control_B.Su1_size,
    proc_control_B.Hv_data, proc_control_B.Hv_size);
  proc_control_B.nmoves_tmp = proc_control_B.TotalFreeMoves << 1;
  proc_control_B.nmoves = (b_p << 1) * 21 + proc_control_B.nmoves_tmp;
  std::memset(&proc_control_B.isMrows0[0], 0, 436U * sizeof(boolean_T));
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 226; proc_control_B.i_e++) {
    proc_control_B.isMrows0[v[proc_control_B.i_e]] = true;
  }

  std::memset(&proc_control_B.Mlimfull0[0], 0, 436U * sizeof(real_T));
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 226; proc_control_B.i_e++) {
    proc_control_B.Mlimfull0[v[proc_control_B.i_e]] = Mlim0[proc_control_B.i_e];
  }

  std::memset(&proc_control_B.Vfull0[0], 0, 436U * sizeof(real_T));
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 226; proc_control_B.i_e++) {
    proc_control_B.Vfull0[v[proc_control_B.i_e]] = Ac0[proc_control_B.i_e + 1808];
  }

  proc_control_B.isMrows_size[0] = proc_control_B.nmoves;
  if (proc_control_B.nmoves - 1 >= 0) {
    std::memset(&proc_control_B.isMrows_data[0], 0, static_cast<uint32_T>
                (proc_control_B.nmoves) * sizeof(boolean_T));
  }

  if (proc_control_B.nmoves - 1 >= 0) {
    std::memset(&proc_control_B.Mlimfull_data[0], 0, static_cast<uint32_T>
                (proc_control_B.nmoves) * sizeof(real_T));
  }

  if (proc_control_B.nmoves - 1 >= 0) {
    std::memset(&proc_control_B.Vfull_data[0], 0, static_cast<uint32_T>
                (proc_control_B.nmoves) * sizeof(real_T));
  }

  proc_control_Mrows_reshape(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p);
  proc_control_Mrows_reshape_h(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.pny);
  proc_control_B.ioff = b_p * 13 + proc_control_B.pny;
  proc_control_Mrows_reshape_hn(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.ioff);
  proc_control_B.ioff += proc_control_B.pny_l;
  proc_control_Mrows_reshape_hny(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.ioff);
  proc_control_B.ioff += proc_control_B.pny_l;
  proc_control_B.b_q_tmp = static_cast<uint32_T>(proc_control_B.TotalFreeMoves) >>
    3;
  proc_control_B.b_q = proc_control_B.b_q_tmp;
  proc_control_B.u = static_cast<uint32_T>(proc_control_B.TotalFreeMoves) -
    (proc_control_B.b_q_tmp << 3);
  if (proc_control_B.u >= 4U) {
    proc_control_B.b_q = proc_control_B.b_q_tmp + 1U;
  }

  proc_control_Mrows_reshape_hnyc(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    static_cast<int32_T>(proc_control_B.b_q), proc_control_B.ioff);
  proc_control_B.ioff += proc_control_B.TotalFreeMoves;
  proc_control_B.b_q = proc_control_B.b_q_tmp;
  if (proc_control_B.u >= 4U) {
    proc_control_B.b_q = proc_control_B.b_q_tmp + 1U;
  }

  proc_contro_Mrows_reshape_hnycd(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    static_cast<int32_T>(proc_control_B.b_q), proc_control_B.ioff);
  proc_control_B.ioff = proc_cont_combineVectorElements
    (proc_control_B.isMrows_data, proc_control_B.isMrows_size);
  proc_control_B.b_Mrows.set_size(proc_control_B.ioff);
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.ioff;
       proc_control_B.i_e++) {
    proc_control_B.b_Mrows[proc_control_B.i_e] = 0U;
  }

  proc_control_B.b_j_n = -1;
  proc_control_B.j = static_cast<uint16_T>(proc_control_B.nmoves);
  for (proc_control_B.nmoves = 0; proc_control_B.nmoves < proc_control_B.j;
       proc_control_B.nmoves++) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.b_j_n++;
      proc_control_B.b_Mrows[proc_control_B.b_j_n] = static_cast<uint16_T>
        (proc_control_B.nmoves + 1);
    }
  }

  proc_control_B.b_Ac.set_size(proc_control_B.ioff,
    proc_control_B.TotalFreeMoves + 1);
  proc_control_B.loop_ub = (proc_control_B.TotalFreeMoves + 1) *
    proc_control_B.ioff;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.b_Ac[proc_control_B.i_e] = 0.0;
  }

  proc_control_B.b_Mx.set_size(proc_control_B.ioff, 21);
  proc_control_B.loop_ub = proc_control_B.ioff * 21;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.b_Mx[proc_control_B.i_e] = 0.0;
  }

  proc_control_B.b_Mu1.set_size(proc_control_B.ioff, 8);
  proc_control_B.loop_ub = proc_control_B.ioff << 3;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.b_Mu1[proc_control_B.i_e] = 0.0;
  }

  proc_control_B.b_Mv_j = proc_control_B.Hv_size[1];
  proc_control_B.b_Mv.set_size(proc_control_B.ioff, proc_control_B.Hv_size[1]);
  proc_control_B.loop_ub = proc_control_B.ioff * proc_control_B.Hv_size[1];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.b_Mv[proc_control_B.i_e] = 0.0;
  }

  proc_control_B.b_Mlim.set_size(proc_control_B.ioff);
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.ioff;
       proc_control_B.i_e++) {
    proc_control_B.b_Mlim[proc_control_B.i_e] = 0.0;
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.b_j_n = 0;
  } else {
    proc_control_B.b_j_n = proc_control_B.ioff;
  }

  proc_control_B.loop_ub = proc_control_B.isMrows_size[0] - 1;
  proc_control_B.nmoves = 0;
  for (proc_control_B.i_e = 0; proc_control_B.i_e <= proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    if (proc_control_B.isMrows_data[proc_control_B.i_e]) {
      proc_control_B.nmoves++;
    }
  }

  proc_control_B.s_size_idx_0 = proc_control_B.nmoves;
  proc_control_B.nmoves = 0;
  for (proc_control_B.i_e = 0; proc_control_B.i_e <= proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    if (proc_control_B.isMrows_data[proc_control_B.i_e]) {
      proc_control_B.s_data[proc_control_B.nmoves] = static_cast<int16_T>
        (proc_control_B.i_e);
      proc_control_B.nmoves++;
    }
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_j_n;
       proc_control_B.i_e++) {
    proc_control_B.b_Mlim[proc_control_B.i_e] =
      proc_control_B.Mlimfull_data[proc_control_B.s_data[proc_control_B.i_e]];
  }

  proc_control_B.w_size[0] = b_p;
  proc_control_B.w_size[1] = b_p;
  proc_control_B.b_j_n = b_p * b_p;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_j_n;
       proc_control_B.i_e++) {
    proc_control_B.w_data[proc_control_B.i_e] = 1.0;
  }

  proc_control_tril(proc_control_B.w_data, proc_control_B.w_size);
  proc_control_eye(proc_control_B.y_tmp);
  proc_control_kron_b(proc_control_B.w_data, proc_control_B.w_size,
                      proc_control_B.y_tmp, proc_control_B.I2Jm_data,
                      proc_control_B.tmp_size_i);
  proc_control_mtimes(proc_control_B.I2Jm_data, proc_control_B.tmp_size_i,
                      proc_control_B.Jm_data, proc_control_B.Jm_size,
                      proc_control_B.y_data_c, proc_control_B.y_size);
  proc_control_B.w_size[0] = b_p;
  proc_control_B.w_size[1] = b_p;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_j_n;
       proc_control_B.i_e++) {
    proc_control_B.w_data[proc_control_B.i_e] = 1.0;
  }

  proc_control_tril(proc_control_B.w_data, proc_control_B.w_size);
  proc_control_kron_b(proc_control_B.w_data, proc_control_B.w_size,
                      proc_control_B.y_tmp, proc_control_B.I2Jm_data,
                      proc_control_B.tmp_size_i);
  proc_control_mtimes(proc_control_B.I2Jm_data, proc_control_B.tmp_size_i,
                      proc_control_B.Jm_data, proc_control_B.Jm_size,
                      proc_control_B.varargin_2_data, proc_control_B.w_size);
  proc_control_B.loop_ub = proc_control_B.w_size[0] * proc_control_B.w_size[1];
  if (proc_control_B.loop_ub - 1 >= 0) {
    std::memcpy(&proc_control_B.I2Jm_data[0], &proc_control_B.varargin_2_data[0],
                static_cast<uint32_T>(proc_control_B.loop_ub) * sizeof(real_T));
  }

  proc_control_eye_f(proc_control_B.TotalFreeMoves, proc_control_B.I3_data,
                     proc_control_B.I3_size);
  proc_control_B.loop_ub = proc_control_B.SuJm_size[0] *
    proc_control_B.SuJm_size[1];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.varargin_2_data[proc_control_B.i_e] =
      -proc_control_B.SuJm_data[proc_control_B.i_e];
  }

  proc_control_B.loop_ub = proc_control_B.y_size[0] * proc_control_B.y_size[1];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.varargin_4_data[proc_control_B.i_e] =
      -proc_control_B.y_data_c[proc_control_B.i_e];
  }

  proc_control_B.loop_ub = proc_control_B.I3_size[0] * proc_control_B.I3_size[1];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.varargin_6_data[proc_control_B.i_e] =
      -proc_control_B.I3_data[proc_control_B.i_e];
  }

  tmp = ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1] != 0));
  if (tmp) {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.SuJm_size[1]);
  } else if (tmp) {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.SuJm_size[1]);
  } else if ((proc_control_B.w_size[0] != 0) && (proc_control_B.w_size[1] != 0))
  {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.y_size[1]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.y_size[1]);
  } else {
    empty_non_axis_sizes = ((proc_control_B.I3_size[0] != 0) &&
      (proc_control_B.I3_size[1] != 0));
    if (empty_non_axis_sizes) {
      sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
    } else if (empty_non_axis_sizes) {
      sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
    } else {
      proc_control_B.b_j_n = proc_control_B.SuJm_size[1];
      if (proc_control_B.y_size[1] > proc_control_B.b_j_n) {
        proc_control_B.b_j_n = proc_control_B.y_size[1];
      }

      if (proc_control_B.y_size[1] > proc_control_B.b_j_n) {
        proc_control_B.b_j_n = proc_control_B.y_size[1];
      }

      if (proc_control_B.I3_size[1] > proc_control_B.b_j_n) {
        proc_control_B.b_j_n = proc_control_B.I3_size[1];
      }

      if (proc_control_B.I3_size[1] > proc_control_B.b_j_n) {
        sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
      } else {
        sizes_idx_1 = static_cast<int8_T>(proc_control_B.b_j_n);
      }
    }
  }

  empty_non_axis_sizes = (sizes_idx_1 == 0);
  if (empty_non_axis_sizes) {
    empty_non_axis_sizes_0[0] = static_cast<uint8_T>(proc_control_B.SuJm_size[0]);
  } else if (tmp) {
    empty_non_axis_sizes_0[0] = static_cast<uint8_T>(proc_control_B.SuJm_size[0]);
  } else {
    empty_non_axis_sizes_0[0] = 0U;
  }

  if (empty_non_axis_sizes) {
    empty_non_axis_sizes_1[0] = static_cast<uint8_T>(proc_control_B.SuJm_size[0]);
  } else if (tmp) {
    empty_non_axis_sizes_1[0] = static_cast<uint8_T>(proc_control_B.SuJm_size[0]);
  } else {
    empty_non_axis_sizes_1[0] = 0U;
  }

  if (empty_non_axis_sizes) {
    empty_non_axis_sizes_2[0] = static_cast<uint8_T>(proc_control_B.y_size[0]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    empty_non_axis_sizes_2[0] = static_cast<uint8_T>(proc_control_B.y_size[0]);
  } else {
    empty_non_axis_sizes_2[0] = 0U;
  }

  if (empty_non_axis_sizes) {
    empty_non_axis_sizes_3[0] = static_cast<int8_T>(proc_control_B.y_size[0]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    empty_non_axis_sizes_3[0] = static_cast<int8_T>(proc_control_B.y_size[0]);
  } else {
    empty_non_axis_sizes_3[0] = 0;
  }

  if (empty_non_axis_sizes) {
    empty_non_axis_sizes_4[0] = static_cast<int8_T>(proc_control_B.I3_size[0]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    empty_non_axis_sizes_4[0] = static_cast<int8_T>(proc_control_B.I3_size[0]);
  } else {
    empty_non_axis_sizes_4[0] = 0;
  }

  if (empty_non_axis_sizes) {
    empty_non_axis_sizes_5[0] = static_cast<int8_T>(proc_control_B.I3_size[0]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    empty_non_axis_sizes_5[0] = static_cast<int8_T>(proc_control_B.I3_size[0]);
  } else {
    empty_non_axis_sizes_5[0] = 0;
  }

  proc_control_B.Mu_size_idx_0 = ((((empty_non_axis_sizes_0[0] +
    empty_non_axis_sizes_1[0]) + empty_non_axis_sizes_2[0]) +
    empty_non_axis_sizes_3[0]) + empty_non_axis_sizes_4[0]) +
    empty_non_axis_sizes_5[0];
  proc_control_B.b_j_n = sizes_idx_1;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_j_n;
       proc_control_B.i_e++) {
    proc_control_B.loop_ub = empty_non_axis_sizes_0[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data[proc_control_B.I2Jm_m +
        proc_control_B.Mu_size_idx_0 * proc_control_B.i_e] =
        proc_control_B.SuJm_data[empty_non_axis_sizes_0[0] * proc_control_B.i_e
        + proc_control_B.I2Jm_m];
    }

    proc_control_B.loop_ub = empty_non_axis_sizes_1[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data[(proc_control_B.I2Jm_m + empty_non_axis_sizes_0[0])
        + proc_control_B.Mu_size_idx_0 * proc_control_B.i_e] =
        proc_control_B.varargin_2_data[empty_non_axis_sizes_1[0] *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
    }

    proc_control_B.loop_ub = empty_non_axis_sizes_2[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data[((proc_control_B.I2Jm_m + empty_non_axis_sizes_0[0])
        + empty_non_axis_sizes_1[0]) + proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_e] = proc_control_B.I2Jm_data[empty_non_axis_sizes_2[0]
        * proc_control_B.i_e + proc_control_B.I2Jm_m];
    }

    proc_control_B.loop_ub = empty_non_axis_sizes_3[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data[(((proc_control_B.I2Jm_m + empty_non_axis_sizes_0[0])
        + empty_non_axis_sizes_1[0]) + empty_non_axis_sizes_2[0]) +
        proc_control_B.Mu_size_idx_0 * proc_control_B.i_e] =
        proc_control_B.varargin_4_data[empty_non_axis_sizes_3[0] *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
    }

    proc_control_B.loop_ub = empty_non_axis_sizes_4[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data[((((proc_control_B.I2Jm_m + empty_non_axis_sizes_0
        [0]) + empty_non_axis_sizes_1[0]) + empty_non_axis_sizes_2[0]) +
        empty_non_axis_sizes_3[0]) + proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_e] = proc_control_B.I3_data[empty_non_axis_sizes_4[0] *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
    }

    proc_control_B.loop_ub = empty_non_axis_sizes_5[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data[(((((proc_control_B.I2Jm_m +
        empty_non_axis_sizes_0[0]) + empty_non_axis_sizes_1[0]) +
        empty_non_axis_sizes_2[0]) + empty_non_axis_sizes_3[0]) +
        empty_non_axis_sizes_4[0]) + proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_e] =
        proc_control_B.varargin_6_data[empty_non_axis_sizes_5[0] *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
    }
  }

  proc_control_B.nmoves = (proc_control_B.pny_l + proc_control_B.TotalFreeMoves)
    << 1;
  proc_control_B.loop_ub = proc_control_B.Hv_size[0] * proc_control_B.Hv_size[1];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.loop_ub;
       proc_control_B.i_e++) {
    proc_control_B.varargin_1_data_a[proc_control_B.i_e] =
      -proc_control_B.Hv_data[proc_control_B.i_e];
  }

  tmp = ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0));
  if (tmp) {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else if (tmp) {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else if ((proc_control_B.nmoves != 0) && (proc_control_B.Hv_size[1] != 0)) {
    sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else {
    proc_control_B.j = proc_control_B.Hv_size[1];
    if (proc_control_B.Hv_size[1] > proc_control_B.j) {
      sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
    } else {
      sizes_idx_1 = static_cast<int8_T>(proc_control_B.j);
    }
  }

  if (tmp) {
    varargin_1[0] = static_cast<uint8_T>(proc_control_B.Hv_size[0]);
  } else {
    varargin_1[0] = 0U;
  }

  if ((proc_control_B.nmoves != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.j = proc_control_B.nmoves;
  } else {
    proc_control_B.j = 0;
  }

  if (tmp) {
    empty_non_axis_sizes_0[0] = static_cast<uint8_T>(proc_control_B.Hv_size[0]);
  } else {
    empty_non_axis_sizes_0[0] = 0U;
  }

  proc_control_B.i_input_sizes_idx_1_tmp = sizes_idx_1;
  proc_control_B.Mv_aux_size_idx_0 = (varargin_1[0] + empty_non_axis_sizes_0[0])
    + proc_control_B.j;
  for (proc_control_B.i_e = 0; proc_control_B.i_e <
       proc_control_B.i_input_sizes_idx_1_tmp; proc_control_B.i_e++) {
    proc_control_B.loop_ub = varargin_1[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mv_aux_data[proc_control_B.I2Jm_m +
        proc_control_B.Mv_aux_size_idx_0 * proc_control_B.i_e] =
        proc_control_B.varargin_1_data_a[varargin_1[0] * proc_control_B.i_e +
        proc_control_B.I2Jm_m];
    }

    proc_control_B.loop_ub = empty_non_axis_sizes_0[0];
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.loop_ub; proc_control_B.I2Jm_m++) {
      proc_control_B.Mv_aux_data[(proc_control_B.I2Jm_m + varargin_1[0]) +
        proc_control_B.Mv_aux_size_idx_0 * proc_control_B.i_e] =
        proc_control_B.Hv_data[empty_non_axis_sizes_0[0] * proc_control_B.i_e +
        proc_control_B.I2Jm_m];
    }

    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.j;
         proc_control_B.I2Jm_m++) {
      proc_control_B.Mv_aux_data[((proc_control_B.I2Jm_m + varargin_1[0]) +
        empty_non_axis_sizes_0[0]) + proc_control_B.Mv_aux_size_idx_0 *
        proc_control_B.i_e] = 0.0;
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.j = 0;
  } else {
    proc_control_B.j = proc_control_B.ioff;
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_j_n;
       proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.s_size_idx_0; proc_control_B.I2Jm_m++) {
      proc_control_B.Mu_data_c[proc_control_B.I2Jm_m +
        proc_control_B.s_size_idx_0 * proc_control_B.i_e] =
        -proc_control_B.Mu_data[proc_control_B.Mu_size_idx_0 *
        proc_control_B.i_e + proc_control_B.s_data[proc_control_B.I2Jm_m]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.loop_ub = 0;
  } else {
    proc_control_B.loop_ub = proc_control_B.ioff;
  }

  if (static_cast<real_T>(proc_control_B.TotalFreeMoves + 1) - 1.0 < 1.0) {
    proc_control_B.b_j_n = 0;
  } else {
    proc_control_B.b_j_n = proc_control_B.TotalFreeMoves;
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_j_n;
       proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.j;
         proc_control_B.I2Jm_m++) {
      proc_control_B.b_Ac[proc_control_B.I2Jm_m + proc_control_B.b_Ac.size(0) *
        proc_control_B.i_e] = proc_control_B.Mu_data_c[proc_control_B.loop_ub *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.j = 0;
  } else {
    proc_control_B.j = proc_control_B.ioff;
  }

  proc_control_B.I2Jm_m = proc_control_B.b_Ac.size(1);
  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.j;
       proc_control_B.i_e++) {
    proc_control_B.b_Ac[proc_control_B.i_e + proc_control_B.b_Ac.size(0) *
      (proc_control_B.I2Jm_m - 1)] =
      proc_control_B.Vfull_data[proc_control_B.s_data[proc_control_B.i_e]];
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.j = 0;
  } else {
    proc_control_B.j = proc_control_B.ioff;
  }

  proc_control_B.loop_ub = (proc_control_B.Sx_size[0] + proc_control_B.Sx_size[0])
    + proc_control_B.nmoves;
  proc_control_B.b_j_n = proc_control_B.Sx_size[0];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 21; proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.b_j_n;
         proc_control_B.I2Jm_m++) {
      proc_control_B.Sx_data_tmp =
        proc_control_B.Sx_data_g[proc_control_B.Sx_size[0] * proc_control_B.i_e
        + proc_control_B.I2Jm_m];
      proc_control_B.Mu_size_idx_0 = proc_control_B.loop_ub * proc_control_B.i_e;
      proc_control_B.Sx_data[proc_control_B.I2Jm_m +
        proc_control_B.Mu_size_idx_0] = -proc_control_B.Sx_data_tmp;
      proc_control_B.Sx_data[(proc_control_B.I2Jm_m + proc_control_B.Sx_size[0])
        + proc_control_B.Mu_size_idx_0] = proc_control_B.Sx_data_tmp;
    }

    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.nmoves; proc_control_B.I2Jm_m++) {
      proc_control_B.Sx_data[((proc_control_B.I2Jm_m + proc_control_B.Sx_size[0])
        + proc_control_B.Sx_size[0]) + proc_control_B.loop_ub *
        proc_control_B.i_e] = 0.0;
    }
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < 21; proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.j;
         proc_control_B.I2Jm_m++) {
      proc_control_B.b_Mx[proc_control_B.I2Jm_m + proc_control_B.b_Mx.size(0) *
        proc_control_B.i_e] = proc_control_B.Sx_data[proc_control_B.loop_ub *
        proc_control_B.i_e + proc_control_B.s_data[proc_control_B.I2Jm_m]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.nmoves = 0;
  } else {
    proc_control_B.nmoves = proc_control_B.ioff;
  }

  proc_control_B.loop_ub = (((proc_control_B.Su1_size[0] +
    proc_control_B.Su1_size[0]) + proc_control_B.I1_size[0]) +
    proc_control_B.I1_size[0]) + proc_control_B.nmoves_tmp;
  proc_control_B.j = proc_control_B.Su1_size[0];
  proc_control_B.b_j_n = proc_control_B.I1_size[0];
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.j;
         proc_control_B.I2Jm_m++) {
      proc_control_B.Sx_data_tmp =
        proc_control_B.Su1_data_o[proc_control_B.Su1_size[0] *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
      proc_control_B.Mu_size_idx_0 = proc_control_B.loop_ub * proc_control_B.i_e;
      proc_control_B.Su1_data[proc_control_B.I2Jm_m +
        proc_control_B.Mu_size_idx_0] = -proc_control_B.Sx_data_tmp;
      proc_control_B.Su1_data[(proc_control_B.I2Jm_m + proc_control_B.Su1_size[0])
        + proc_control_B.Mu_size_idx_0] = proc_control_B.Sx_data_tmp;
    }

    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.b_j_n;
         proc_control_B.I2Jm_m++) {
      proc_control_B.Su1_data[((proc_control_B.I2Jm_m + proc_control_B.Su1_size
        [0]) + proc_control_B.Su1_size[0]) + proc_control_B.loop_ub *
        proc_control_B.i_e] = -proc_control_B.I1_data[proc_control_B.I1_size[0] *
        proc_control_B.i_e + proc_control_B.I2Jm_m];
    }

    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.b_j_n;
         proc_control_B.I2Jm_m++) {
      proc_control_B.Su1_data[(((proc_control_B.I2Jm_m +
        proc_control_B.Su1_size[0]) + proc_control_B.Su1_size[0]) +
        proc_control_B.I1_size[0]) + proc_control_B.loop_ub * proc_control_B.i_e]
        = proc_control_B.I1_data[proc_control_B.I1_size[0] * proc_control_B.i_e
        + proc_control_B.I2Jm_m];
    }

    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.nmoves_tmp; proc_control_B.I2Jm_m++) {
      proc_control_B.Su1_data[((((proc_control_B.I2Jm_m +
        proc_control_B.Su1_size[0]) + proc_control_B.Su1_size[0]) +
        proc_control_B.I1_size[0]) + proc_control_B.I1_size[0]) +
        proc_control_B.loop_ub * proc_control_B.i_e] = 0.0;
    }
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.nmoves; proc_control_B.I2Jm_m++) {
      proc_control_B.b_Mu1[proc_control_B.I2Jm_m + proc_control_B.b_Mu1.size(0) *
        proc_control_B.i_e] = proc_control_B.Su1_data[proc_control_B.loop_ub *
        proc_control_B.i_e + proc_control_B.s_data[proc_control_B.I2Jm_m]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.b_j_n = 0;
  } else {
    proc_control_B.b_j_n = proc_control_B.ioff;
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e <
       proc_control_B.i_input_sizes_idx_1_tmp; proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m <
         proc_control_B.s_size_idx_0; proc_control_B.I2Jm_m++) {
      proc_control_B.Mv_aux_data_d[proc_control_B.I2Jm_m +
        proc_control_B.s_size_idx_0 * proc_control_B.i_e] =
        proc_control_B.Mv_aux_data[proc_control_B.Mv_aux_size_idx_0 *
        proc_control_B.i_e + proc_control_B.s_data[proc_control_B.I2Jm_m]];
    }
  }

  if (proc_control_B.ioff < 1) {
    proc_control_B.nmoves = 0;
  } else {
    proc_control_B.nmoves = proc_control_B.ioff;
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.b_Mv_j;
       proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.b_j_n;
         proc_control_B.I2Jm_m++) {
      proc_control_B.b_Mv[proc_control_B.I2Jm_m + proc_control_B.b_Mv.size(0) *
        proc_control_B.i_e] = proc_control_B.Mv_aux_data_d[proc_control_B.nmoves
        * proc_control_B.i_e + proc_control_B.I2Jm_m];
    }
  }

  proc_control_B.b_H_size[0] = proc_control_B.TotalFreeMoves + 1;
  proc_control_B.b_H_size[1] = proc_control_B.TotalFreeMoves + 1;
  proc_control_B.loop_ub = (proc_control_B.TotalFreeMoves + 1) *
    (proc_control_B.TotalFreeMoves + 1);
  if (proc_control_B.loop_ub - 1 >= 0) {
    std::memset(&proc_control_B.b_H_data_g[0], 0, static_cast<uint32_T>
                (proc_control_B.loop_ub) * sizeof(real_T));
  }

  proc_control_B.b_H_data_g[proc_control_B.TotalFreeMoves +
    (proc_control_B.TotalFreeMoves + 1) * proc_control_B.TotalFreeMoves] = H0[80];
  proc_control_updateWeights(ywt, proc_control_B.dv13);
  proc_control_updateWeights_c(uwt, proc_control_B.umax_incr);
  proc_control_updateWeights_c(duwt, proc_control_B.umin_incr);
  proc_contr_mpc_calculatehessian(proc_control_B.dv13, proc_control_B.umax_incr,
    proc_control_B.umin_incr, proc_control_B.SuJm_data, proc_control_B.SuJm_size,
    proc_control_B.y_data_c, proc_control_B.y_size, proc_control_B.Jm_data,
    proc_control_B.Jm_size, proc_control_B.I1_data, proc_control_B.I1_size,
    proc_control_B.Su1_data_o, proc_control_B.Su1_size, proc_control_B.Sx_data_g,
    proc_control_B.Sx_size, proc_control_B.Hv_data, proc_control_B.Hv_size,
    proc_control_B.I2Jm_data, proc_control_B.tmp_size_i, proc_control_B.Ku1_data,
    proc_control_B.Ku1_size, proc_control_B.I3_data, proc_control_B.I3_size,
    proc_control_B.Kx_data, proc_control_B.Kx_size,
    proc_control_B.varargin_4_data, proc_control_B.varargin_4_size,
    proc_control_B.varargin_2_data, proc_control_B.w_size);
  if (proc_control_B.TotalFreeMoves < 1) {
    proc_control_B.b_j_n = 0;
    proc_control_B.nmoves = 0;
  } else {
    proc_control_B.b_j_n = proc_control_B.TotalFreeMoves;
    proc_control_B.nmoves = proc_control_B.TotalFreeMoves;
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.nmoves;
       proc_control_B.i_e++) {
    for (proc_control_B.I2Jm_m = 0; proc_control_B.I2Jm_m < proc_control_B.b_j_n;
         proc_control_B.I2Jm_m++) {
      proc_control_B.b_H_data_g[proc_control_B.I2Jm_m +
        (proc_control_B.TotalFreeMoves + 1) * proc_control_B.i_e] =
        proc_control_B.I2Jm_data[proc_control_B.b_j_n * proc_control_B.i_e +
        proc_control_B.I2Jm_m];
    }
  }

  proc_control_mpc_checkhessian(proc_control_B.b_H_data_g,
    proc_control_B.b_H_size, proc_control_B.b_Linv_data, proc_control_B.Jm_size,
    &proc_control_B.Sx_data_tmp);
  if (proc_control_B.Sx_data_tmp > 1.0) {
    proc_control_B.pny = 0;
    for (proc_control_B.pny_l = 0; proc_control_B.pny_l < 8;
         proc_control_B.pny_l++) {
      u[proc_control_B.pny_l] = old_u[proc_control_B.pny_l] +
        b_uoff[proc_control_B.pny_l];
      for (proc_control_B.i_e = 0; proc_control_B.i_e < 11; proc_control_B.i_e++)
      {
        useq[proc_control_B.i_e + proc_control_B.pny] = u[proc_control_B.pny_l];
      }

      proc_control_B.pny += 11;
    }

    *status = -2.0;
  } else {
    proc_control_eye_f3(proc_control_B.TotalFreeMoves + 1,
                        proc_control_B.tmp_data_g, proc_control_B.tmp_size_i);
    proc_control_linsolve(proc_control_B.b_Linv_data, proc_control_B.Jm_size,
                          proc_control_B.tmp_data_g, proc_control_B.tmp_size_i,
                          proc_control_B.b_H_data_g, proc_control_B.b_H_size);
    proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r7);
    proc_control_B.i_e = proc_control_B.r7.size(0);
    proc_control_mtimes_afai(proc_control_B.b_Mu1, old_u, proc_control_B.r6);
    proc_control_B.I2Jm_m = proc_control_B.r6.size(0);
    proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r5);
    proc_control_B.nmoves_tmp = proc_control_B.b_Mlim.size(0) == 1 ?
      proc_control_B.r5.size(0) : proc_control_B.b_Mlim.size(0);
    proc_control_mtimes_afai0(proc_control_B.b_Mv, vseq, proc_control_B.r4);
    if ((proc_control_B.b_Mlim.size(0) == proc_control_B.i_e) &&
        ((proc_control_B.b_Mlim.size(0) == 1 ? proc_control_B.i_e :
          proc_control_B.b_Mlim.size(0)) == proc_control_B.I2Jm_m) &&
        ((proc_control_B.nmoves_tmp == 1 ? proc_control_B.I2Jm_m :
          proc_control_B.nmoves_tmp) == proc_control_B.r4.size(0))) {
      proc_control_mtimes_afa(proc_control_B.b_Mx, x, proc_control_B.r);
      proc_control_mtimes_afai(proc_control_B.b_Mu1, old_u, proc_control_B.r1);
      proc_control_mtimes_afai0(proc_control_B.b_Mv, vseq, proc_control_B.r2);
      proc_control_B.Bc.set_size(proc_control_B.ioff);
      for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.ioff;
           proc_control_B.i_e++) {
        proc_control_B.Bc[proc_control_B.i_e] =
          -(((proc_control_B.b_Mlim[proc_control_B.i_e] +
              proc_control_B.r[proc_control_B.i_e]) +
             proc_control_B.r1[proc_control_B.i_e]) +
            proc_control_B.r2[proc_control_B.i_e]);
      }
    } else {
      proc_control_binary_expand_op_8(proc_control_B.Bc, proc_control_B.b_Mlim,
        proc_control_B.b_Mx, x, proc_control_B.b_Mu1, old_u, proc_control_B.b_Mv,
        vseq);
    }

    std::memset(&proc_control_B.umax_incr[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.umin_incr[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      proc_control_B.umax_incr_flag[proc_control_B.i_e] = false;
      proc_control_B.umin_incr_flag[proc_control_B.i_e] = false;
    }

    if ((proc_control_B.b_Mrows.size(0) != 0) && (proc_control_B.b_Mrows[0] > 0))
    {
      proc_control_B.b_j_n = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_j_n <= proc_control_B.b_Mrows.size(0)
                           - 1)) {
        if (proc_control_B.b_Mrows[proc_control_B.b_j_n] <= proc_control_B.pny)
        {
          proc_control_B.b_j_n++;
        } else {
          proc_control_B.i_e = proc_control_B.pny << 1;
          if (proc_control_B.b_Mrows[proc_control_B.b_j_n] <= proc_control_B.i_e)
          {
            proc_control_B.b_j_n++;
          } else if (proc_control_B.b_Mrows[proc_control_B.b_j_n] <=
                     proc_control_B.i_e + proc_control_B.pny_l) {
            proc_control_B.j = (proc_control_B.b_Mrows[proc_control_B.b_j_n] -
                                proc_control_B.i_e) - 1;
            proc_control_B.nmoves_tmp = proc_control_B.j - ((proc_control_B.j >>
              3) << 3);
            if (!proc_control_B.umax_incr_flag[proc_control_B.nmoves_tmp]) {
              proc_control_B.Sx_data_tmp = -(umax[proc_control_B.nmoves_tmp] -
                b_uoff[proc_control_B.nmoves_tmp]) -
                (-proc_control_B.b_Mlim[proc_control_B.b_j_n]);
            } else {
              proc_control_B.Sx_data_tmp =
                proc_control_B.umax_incr[proc_control_B.nmoves_tmp];
            }

            proc_control_B.umax_incr[proc_control_B.nmoves_tmp] =
              proc_control_B.Sx_data_tmp;
            proc_control_B.umax_incr_flag[proc_control_B.nmoves_tmp] = true;
            proc_control_B.Bc[proc_control_B.b_j_n] =
              proc_control_B.Bc[proc_control_B.b_j_n] +
              proc_control_B.Sx_data_tmp;
            proc_control_B.b_j_n++;
          } else if (proc_control_B.b_Mrows[proc_control_B.b_j_n] <=
                     ((proc_control_B.pny + proc_control_B.pny_l) << 1)) {
            proc_control_B.j = ((proc_control_B.b_Mrows[proc_control_B.b_j_n] -
                                 proc_control_B.i_e) - proc_control_B.pny_l) - 1;
            proc_control_B.nmoves_tmp = proc_control_B.j - ((proc_control_B.j >>
              3) << 3);
            if (!proc_control_B.umin_incr_flag[proc_control_B.nmoves_tmp]) {
              proc_control_B.Sx_data_tmp = (umin[proc_control_B.nmoves_tmp] -
                b_uoff[proc_control_B.nmoves_tmp]) -
                (-proc_control_B.b_Mlim[proc_control_B.b_j_n]);
            } else {
              proc_control_B.Sx_data_tmp =
                proc_control_B.umin_incr[proc_control_B.nmoves_tmp];
            }

            proc_control_B.umin_incr[proc_control_B.nmoves_tmp] =
              proc_control_B.Sx_data_tmp;
            proc_control_B.umin_incr_flag[proc_control_B.nmoves_tmp] = true;
            proc_control_B.Bc[proc_control_B.b_j_n] =
              proc_control_B.Bc[proc_control_B.b_j_n] +
              proc_control_B.Sx_data_tmp;
            proc_control_B.b_j_n++;
          } else {
            exitg1 = true;
          }
        }
      }
    }

    std::memcpy(&proc_control_B.utargetseq_data[0], &utargetseq[0],
                static_cast<uint32_T>(proc_control_B.pny_l) * sizeof(real_T));
    proc_control_B.r3.set_size(proc_control_B.ioff);
    for (proc_control_B.i_e = 0; proc_control_B.i_e < proc_control_B.ioff;
         proc_control_B.i_e++) {
      proc_control_B.r3[proc_control_B.i_e] = false;
    }

    proc_control_mtimes_a(proc_control_B.b_H_data_g, proc_control_B.b_H_size,
                          proc_control_B.b_H_data_g, proc_control_B.b_H_size,
                          proc_control_B.tmp_data_g, proc_control_B.tmp_size_i);
    proc_control_mpc_solveQP(x, proc_control_B.ioff,
      proc_control_B.TotalFreeMoves + 1, proc_control_B.Kx_data,
      proc_control_B.varargin_2_data, proc_control_B.w_size, rseq,
      proc_control_B.Ku1_data, old_u, proc_control_B.varargin_4_data,
      proc_control_B.varargin_4_size, vseq, proc_control_B.I3_data,
      proc_control_B.I3_size, proc_control_B.utargetseq_data,
      proc_control_B.b_H_data_g, proc_control_B.b_H_size,
      proc_control_B.tmp_data_g, proc_control_B.tmp_size_i, proc_control_B.b_Ac,
      proc_control_B.Bc, proc_control_B.r3, proc_control_B.zopt_data,
      proc_control_B.tmp_size_c, proc_control_B.f_data,
      proc_control_B.isMrows_size, status);
    for (proc_control_B.pny = 0; proc_control_B.pny < 8; proc_control_B.pny++) {
      u[proc_control_B.pny] = (old_u[proc_control_B.pny] +
        proc_control_B.zopt_data[proc_control_B.pny]) +
        b_uoff[proc_control_B.pny];
    }
  }
}

boolean_T proc_control::proc_control_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control::proc_control_isequal_p(const real_T varargin_1[6], const
  real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
real_T proc_control::proc_control_norm_nt(const real_T x[169])
{
  real_T y;
  int32_T j;
  boolean_T exitg1;
  y = 0.0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j < 13)) {
    real_T s;
    s = 0.0;
    for (int32_T i{0}; i < 13; i++) {
      s += std::abs(x[13 * j + i]);
    }

    if (std::isnan(s)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (s > y) {
        y = s;
      }

      j++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_mpower_g(const real_T a[169], real_T b, real_T
  c[169])
{
  proc_control_B.e_g = std::abs(b);
  if (proc_control_B.e_g <= 2.147483647E+9) {
    int32_T b_n;
    int32_T n;
    int32_T nb;
    int32_T nbitson;
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    n = static_cast<int32_T>(proc_control_B.e_g);
    b_n = static_cast<int32_T>(proc_control_B.e_g);
    nbitson = 0;
    nb = -2;
    while (b_n > 0) {
      nb++;
      if ((static_cast<uint32_T>(b_n) & 1U) != 0U) {
        nbitson++;
      }

      b_n >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_g) <= 2) {
      if (b == 2.0) {
        b_n = 0;
        for (int32_T i_1{0}; i_1 < 13; i_1++) {
          for (int32_T i{0}; i < 13; i++) {
            int32_T tmp;
            proc_control_B.e_g = 0.0;
            tmp = 0;
            for (int32_T i_0{0}; i_0 < 13; i_0++) {
              proc_control_B.e_g += a[tmp + i] * a[i_0 + b_n];
              tmp += 13;
            }

            c[i + b_n] = proc_control_B.e_g;
          }

          b_n += 13;
        }
      } else {
        boolean_T firstmult;
        firstmult = false;
        for (n = 0; n < 169; n++) {
          if (!firstmult) {
            firstmult = std::isnan(a[n]);
          }
        }

        if (firstmult) {
          for (b_n = 0; b_n < 169; b_n++) {
            c[b_n] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          b_n = 0;
          for (n = 0; n < 13; n++) {
            c[b_n] = 1.0;
            b_n += 14;
          }
        }
      }
    } else {
      int32_T i_1;
      int32_T tmp;
      boolean_T aBufferInUse;
      boolean_T cBufferInUse;
      boolean_T firstmult;
      firstmult = true;
      aBufferInUse = false;
      cBufferInUse = ((static_cast<uint32_T>(nbitson) & 1U) == 0U);
      for (nbitson = 0; nbitson <= nb; nbitson++) {
        if ((static_cast<uint32_T>(n) & 1U) != 0U) {
          if (firstmult) {
            firstmult = false;
            if (cBufferInUse) {
              if (aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer_o[0],
                            &proc_control_B.aBuffer_b[0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer_o[0], &proc_control_B.b_a[0],
                            169U * sizeof(real_T));
              }
            } else if (aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer_b[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            }
          } else {
            if (aBufferInUse) {
              if (cBufferInUse) {
                for (b_n = 0; b_n < 13; b_n++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    proc_control_B.e_g = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      proc_control_B.e_g += proc_control_B.cBuffer_o[tmp + b_n] *
                        proc_control_B.aBuffer_b[i_0 + i_1];
                      tmp += 13;
                    }

                    c[i_1 + b_n] = proc_control_B.e_g;
                    i_1 += 13;
                  }
                }
              } else {
                for (b_n = 0; b_n < 13; b_n++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    proc_control_B.e_g = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      proc_control_B.e_g += c[tmp + b_n] *
                        proc_control_B.aBuffer_b[i_0 + i_1];
                      tmp += 13;
                    }

                    proc_control_B.cBuffer_o[i_1 + b_n] = proc_control_B.e_g;
                    i_1 += 13;
                  }
                }
              }
            } else if (cBufferInUse) {
              for (b_n = 0; b_n < 13; b_n++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  proc_control_B.e_g = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    proc_control_B.e_g += proc_control_B.cBuffer_o[tmp + b_n] *
                      proc_control_B.b_a[i_0 + i_1];
                    tmp += 13;
                  }

                  c[i_1 + b_n] = proc_control_B.e_g;
                  i_1 += 13;
                }
              }
            } else {
              for (b_n = 0; b_n < 13; b_n++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  proc_control_B.e_g = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    proc_control_B.e_g += c[tmp + b_n] * proc_control_B.b_a[i_0
                      + i_1];
                    tmp += 13;
                  }

                  proc_control_B.cBuffer_o[i_1 + b_n] = proc_control_B.e_g;
                  i_1 += 13;
                }
              }
            }

            cBufferInUse = !cBufferInUse;
          }
        }

        n >>= 1;
        if (aBufferInUse) {
          for (b_n = 0; b_n < 13; b_n++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              proc_control_B.ed2_e = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.ed2_e += proc_control_B.aBuffer_b[tmp + b_n] *
                  proc_control_B.aBuffer_b[i_0 + i_1];
                tmp += 13;
              }

              proc_control_B.b_a[i_1 + b_n] = proc_control_B.ed2_e;
              i_1 += 13;
            }
          }
        } else {
          for (b_n = 0; b_n < 13; b_n++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              proc_control_B.e_g = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.e_g += proc_control_B.b_a[tmp + b_n] *
                  proc_control_B.b_a[i_0 + i_1];
                tmp += 13;
              }

              proc_control_B.aBuffer_b[i_1 + b_n] = proc_control_B.e_g;
              i_1 += 13;
            }
          }
        }

        aBufferInUse = !aBufferInUse;
      }

      b_n = 0;
      for (i_1 = 0; i_1 < 13; i_1++) {
        for (int32_T i{0}; i < 13; i++) {
          proc_control_B.e_g = 0.0;
          proc_control_B.ed2_e = 0.0;
          tmp = 0;
          for (int32_T i_0{0}; i_0 < 13; i_0++) {
            proc_control_B.cBuffer_i = proc_control_B.cBuffer_o[tmp + i];
            n = i_0 + b_n;
            proc_control_B.e_g += proc_control_B.aBuffer_b[n] *
              proc_control_B.cBuffer_i;
            proc_control_B.ed2_e += proc_control_B.b_a[n] *
              proc_control_B.cBuffer_i;
            tmp += 13;
          }

          n = i + b_n;
          proc_control_B.cBuffer_g[n] = proc_control_B.ed2_e;
          proc_control_B.cBuffer_a[n] = proc_control_B.e_g;
        }

        b_n += 13;
      }

      for (b_n = 0; b_n < 169; b_n++) {
        if (firstmult) {
          if (aBufferInUse) {
            c[b_n] = proc_control_B.aBuffer_b[b_n];
          } else {
            c[b_n] = proc_control_B.b_a[b_n];
          }
        } else if (aBufferInUse) {
          c[b_n] = proc_control_B.cBuffer_a[b_n];
        } else {
          c[b_n] = proc_control_B.cBuffer_g[b_n];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      boolean_T firstmult;
      firstmult = true;
      int32_T exitg1;
      do {
        int32_T i_1;
        int32_T tmp;
        exitg1 = 0;
        proc_control_B.ed2_e = std::floor(proc_control_B.e_g / 2.0);
        if (2.0 * proc_control_B.ed2_e != proc_control_B.e_g) {
          if (firstmult) {
            std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            firstmult = false;
          } else {
            for (int32_T b_n{0}; b_n < 13; b_n++) {
              i_1 = 0;
              for (int32_T i{0}; i < 13; i++) {
                proc_control_B.e_g = 0.0;
                tmp = 0;
                for (int32_T i_0{0}; i_0 < 13; i_0++) {
                  proc_control_B.e_g += c[tmp + b_n] * proc_control_B.b_a[i_0 +
                    i_1];
                  tmp += 13;
                }

                proc_control_B.cBuffer_o[i_1 + b_n] = proc_control_B.e_g;
                i_1 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer_o[0], 169U * sizeof
                        (real_T));
          }
        }

        if (proc_control_B.ed2_e == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_g = proc_control_B.ed2_e;
          for (int32_T b_n{0}; b_n < 13; b_n++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              proc_control_B.ed2_e = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.ed2_e += proc_control_B.b_a[tmp + b_n] *
                  proc_control_B.b_a[i_0 + i_1];
                tmp += 13;
              }

              proc_control_B.cBuffer_o[i_1 + b_n] = proc_control_B.ed2_e;
              i_1 += 13;
            }
          }

          std::memcpy(&proc_control_B.b_a[0], &proc_control_B.cBuffer_o[0], 169U
                      * sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (int32_T b_n{0}; b_n < 169; b_n++) {
        c[b_n] = (rtNaN);
      }
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
real_T proc_control::proc_control_log2_o(real_T x)
{
  real_T f;
  int32_T inte;
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!std::isinf(x)) && (!std::isnan(x))) {
    real_T t;
    t = std::frexp(x, &inte);
    if (t == 0.5) {
      f = static_cast<real_T>(inte) - 1.0;
    } else if ((inte == 1) && (t < 0.75)) {
      f = std::log(2.0 * t) / 0.69314718055994529;
    } else {
      f = std::log(t) / 0.69314718055994529 + static_cast<real_T>(inte);
    }
  } else {
    f = x;
  }

  return f;
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_contro_padeApproximation_b(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  int32_T b_ix;
  int32_T e_k;
  int32_T e_k_0;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  switch (m) {
   case 3:
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 60.0;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A[iy + jj] * F[ix + e_k_0];
          iy += 13;
        }

        proc_control_B.A6_h[jj + e_k_0] = proc_control_B.d_k;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = proc_control_B.A6_h[e_k_0];
      proc_control_B.V_f[e_k_0] = 12.0 * A2[e_k_0];
    }

    proc_control_B.d_k = 120.0;
    break;

   case 5:
    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = 420.0 * A2[e_k_0] + A4[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 15120.0;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A[iy + jj] * F[ix + e_k_0];
          iy += 13;
        }

        proc_control_B.A6_h[jj + e_k_0] = proc_control_B.d_k;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = proc_control_B.A6_h[e_k_0];
      proc_control_B.V_f[e_k_0] = 30.0 * A4[e_k_0] + 3360.0 * A2[e_k_0];
    }

    proc_control_B.d_k = 30240.0;
    break;

   case 7:
    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = (1512.0 * A4[e_k_0] + A6[e_k_0]) + 277200.0 * A2[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 8.64864E+6;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A[iy + jj] * F[ix + e_k_0];
          iy += 13;
        }

        proc_control_B.A6_h[jj + e_k_0] = proc_control_B.d_k;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = proc_control_B.A6_h[e_k_0];
      proc_control_B.V_f[e_k_0] = (56.0 * A6[e_k_0] + 25200.0 * A4[e_k_0]) +
        1.99584E+6 * A2[e_k_0];
    }

    proc_control_B.d_k = 1.729728E+7;
    break;

   case 9:
    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A6[iy + jj] * A2[ix + e_k_0];
          iy += 13;
        }

        proc_control_B.V_f[jj + e_k_0] = proc_control_B.d_k;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = ((3960.0 * A6[e_k_0] + proc_control_B.V_f[e_k_0]) + 2.16216E+6 *
                  A4[e_k_0]) + 3.027024E+8 * A2[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 8.8216128E+9;
      e_k_0 += 14;
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A[iy + jj] * F[ix + e_k_0];
          iy += 13;
        }

        proc_control_B.A6_h[jj + e_k_0] = proc_control_B.d_k;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = proc_control_B.A6_h[e_k_0];
      proc_control_B.V_f[e_k_0] = ((90.0 * proc_control_B.V_f[e_k_0] + 110880.0 *
        A6[e_k_0]) + 3.027024E+7 * A4[e_k_0]) + 2.0756736E+9 * A2[e_k_0];
    }

    proc_control_B.d_k = 1.76432256E+10;
    break;

   default:
    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      F[e_k_0] = (3.352212864E+10 * A6[e_k_0] + 1.05594705216E+13 * A4[e_k_0]) +
        1.1873537964288E+15 * A2[e_k_0];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 3.238237626624E+16;
      e_k_0 += 14;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      proc_control_B.V_f[e_k_0] = (16380.0 * A4[e_k_0] + A6[e_k_0]) + 4.08408E+7
        * A2[e_k_0];
    }

    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      e_k = 0;
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A6[iy + e_k_0] * proc_control_B.V_f[ix + e_k];
          iy += 13;
        }

        iy = e_k + e_k_0;
        proc_control_B.A6_h[iy] = F[iy] + proc_control_B.d_k;
        e_k += 13;
      }
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A[iy + jj] * proc_control_B.A6_h[ix + e_k_0];
          iy += 13;
        }

        F[jj + e_k_0] = proc_control_B.d_k;
      }

      e_k_0 += 13;
    }

    for (e_k_0 = 0; e_k_0 < 169; e_k_0++) {
      proc_control_B.A6_h[e_k_0] = (182.0 * A6[e_k_0] + 960960.0 * A4[e_k_0]) +
        1.32324192E+9 * A2[e_k_0];
    }

    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      e_k = 0;
      for (jj = 0; jj < 13; jj++) {
        proc_control_B.d_k = 0.0;
        iy = 0;
        for (ix = 0; ix < 13; ix++) {
          proc_control_B.d_k += A6[iy + e_k_0] * proc_control_B.A6_h[ix + e_k];
          iy += 13;
        }

        iy = e_k + e_k_0;
        proc_control_B.V_f[iy] = ((A6[iy] * 6.704425728E+11 + proc_control_B.d_k)
          + A4[iy] * 1.29060195264E+14) + A2[iy] * 7.7717703038976E+15;
        e_k += 13;
      }
    }

    proc_control_B.d_k = 6.476475253248E+16;
    break;
  }

  e_k_0 = 0;
  for (e_k = 0; e_k < 13; e_k++) {
    proc_control_B.V_f[e_k_0] += proc_control_B.d_k;
    e_k_0 += 14;
  }

  for (e_k = 0; e_k < 169; e_k++) {
    proc_control_B.d_k = F[e_k];
    proc_control_B.V_f[e_k] -= proc_control_B.d_k;
    F[e_k] = 2.0 * proc_control_B.d_k;
  }

  for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
    proc_control_B.ipiv_h[e_k_0] = static_cast<int8_T>(e_k_0 + 1);
  }

  for (e_k = 0; e_k < 12; e_k++) {
    jj = e_k * 14;
    iy = 13 - e_k;
    b_ix = 0;
    ix = jj;
    proc_control_B.d_k = std::abs(proc_control_B.V_f[jj]);
    for (int32_T k_k{2}; k_k <= iy; k_k++) {
      ix++;
      proc_control_B.s_m = std::abs(proc_control_B.V_f[ix]);
      if (proc_control_B.s_m > proc_control_B.d_k) {
        b_ix = k_k - 1;
        proc_control_B.d_k = proc_control_B.s_m;
      }
    }

    if (proc_control_B.V_f[jj + b_ix] != 0.0) {
      if (b_ix != 0) {
        iy = e_k + b_ix;
        proc_control_B.ipiv_h[e_k] = static_cast<int8_T>(iy + 1);
        for (ix = 0; ix < 13; ix++) {
          e_k_0 = ix * 13 + e_k;
          proc_control_B.d_k = proc_control_B.V_f[e_k_0];
          proc_control_B.V_f[e_k_0] = proc_control_B.V_f[iy];
          proc_control_B.V_f[iy] = proc_control_B.d_k;
          iy += 13;
        }
      }

      iy = (jj - e_k) + 13;
      for (b_ix = jj + 2; b_ix <= iy; b_ix++) {
        proc_control_B.V_f[b_ix - 1] /= proc_control_B.V_f[jj];
      }
    }

    iy = jj + 13;
    b_ix = jj + 15;
    ix = 11 - e_k;
    for (int32_T k_k{0}; k_k <= ix; k_k++) {
      proc_control_B.d_k = proc_control_B.V_f[iy];
      if (proc_control_B.V_f[iy] != 0.0) {
        e_k_0 = (b_ix - e_k) + 11;
        for (ijA = b_ix; ijA <= e_k_0; ijA++) {
          proc_control_B.V_f[ijA - 1] += proc_control_B.V_f[((jj + ijA) - b_ix)
            + 1] * -proc_control_B.d_k;
        }
      }

      iy += 13;
      b_ix += 13;
    }
  }

  for (e_k = 0; e_k < 12; e_k++) {
    int8_T ipiv;
    ipiv = proc_control_B.ipiv_h[e_k];
    if (e_k + 1 != ipiv) {
      for (iy = 0; iy < 13; iy++) {
        e_k_0 = 13 * iy + e_k;
        proc_control_B.d_k = F[e_k_0];
        ijA = (13 * iy + ipiv) - 1;
        F[e_k_0] = F[ijA];
        F[ijA] = proc_control_B.d_k;
      }
    }
  }

  for (e_k = 0; e_k < 13; e_k++) {
    jj = 13 * e_k;
    for (iy = 0; iy < 13; iy++) {
      b_ix = 13 * iy;
      e_k_0 = iy + jj;
      if (F[e_k_0] != 0.0) {
        for (ix = iy + 2; ix < 14; ix++) {
          ijA = (ix + jj) - 1;
          F[ijA] -= proc_control_B.V_f[(ix + b_ix) - 1] * F[e_k_0];
        }
      }
    }
  }

  for (e_k = 0; e_k < 13; e_k++) {
    jj = 13 * e_k;
    for (iy = 12; iy >= 0; iy--) {
      b_ix = 13 * iy;
      e_k_0 = iy + jj;
      proc_control_B.d_k = F[e_k_0];
      if (proc_control_B.d_k != 0.0) {
        F[e_k_0] = proc_control_B.d_k / proc_control_B.V_f[iy + b_ix];
        for (int32_T k_k{0}; k_k < iy; k_k++) {
          ijA = k_k + jj;
          F[ijA] -= proc_control_B.V_f[k_k + b_ix] * F[e_k_0];
        }
      }
    }
  }

  e_k_0 = 0;
  for (e_k = 0; e_k < 13; e_k++) {
    F[e_k_0]++;
    e_k_0 += 14;
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_contr_recomputeBlockDiag_a(const real_T A[169], real_T
  F[169], const int32_T blockFormat[12])
{
  for (int32_T j{0}; j < 12; j++) {
    switch (blockFormat[j]) {
     case 0:
      break;

     case 1:
      {
        real_T A_0;
        real_T A_1;
        real_T expa;
        real_T sinchdelta;
        int32_T A_tmp;
        int32_T A_tmp_0;
        A_tmp_0 = 13 * j + j;
        A_0 = A[A_tmp_0];
        proc_control_B.delta = std::exp(A_0);
        A_tmp = (j + 1) * 13 + j;
        A_1 = A[A_tmp + 1];
        expa = std::exp(A_1);
        sinchdelta = (A_1 + A_0) / 2.0;
        if (std::fmax(sinchdelta, std::abs(A_0 - A_1) / 2.0) < 709.782712893384)
        {
          A_0 = (A_1 - A_0) / 2.0;
          if (A_0 == 0.0) {
            A_0 = 1.0;
          } else {
            A_0 = std::sinh(A_0) / A_0;
          }

          sinchdelta = A[A_tmp] * std::exp(sinchdelta) * A_0;
        } else {
          sinchdelta = (expa - proc_control_B.delta) * A[A_tmp] / (A_1 - A_0);
        }

        F[A_tmp_0] = proc_control_B.delta;
        F[A_tmp] = sinchdelta;
        F[A_tmp + 1] = expa;
      }
      break;

     default:
      {
        real_T A_0;
        real_T A_1;
        real_T expa;
        real_T sinchdelta;
        int32_T A_tmp;
        int32_T A_tmp_0;
        A_tmp_0 = (j + 1) * 13 + j;
        A_0 = A[A_tmp_0];
        A_tmp = 13 * j + j;
        A_1 = A[A_tmp + 1];
        proc_control_B.delta = std::sqrt(std::abs(A_0 * A_1));
        expa = std::exp(A[A_tmp]);
        if (proc_control_B.delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(proc_control_B.delta) / proc_control_B.delta;
        }

        proc_control_B.delta = expa * std::cos(proc_control_B.delta);
        F[A_tmp] = proc_control_B.delta;
        F[A_tmp + 1] = A_1 * expa * sinchdelta;
        F[A_tmp_0] = A_0 * expa * sinchdelta;
        F[A_tmp_0 + 1] = proc_control_B.delta;
      }
      break;
    }
  }

  if (blockFormat[11] == 0) {
    F[168] = std::exp(A[168]);
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
real_T proc_control::proc_control_xnrm2_h(int32_T n, const real_T x[169],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_es = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_m = std::abs(x[k - 1]);
        if (proc_control_B.absxk_m > proc_control_B.scale_es) {
          proc_control_B.t_oh = proc_control_B.scale_es / proc_control_B.absxk_m;
          y = y * proc_control_B.t_oh * proc_control_B.t_oh + 1.0;
          proc_control_B.scale_es = proc_control_B.absxk_m;
        } else {
          proc_control_B.t_oh = proc_control_B.absxk_m / proc_control_B.scale_es;
          y += proc_control_B.t_oh * proc_control_B.t_oh;
        }
      }

      y = proc_control_B.scale_es * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_xzsyhetrd_c(real_T A[169], real_T D[13], real_T
  E[12], real_T tau[12])
{
  int32_T b_ix;
  int32_T b_ix_tmp;
  int32_T b_iy;
  int32_T b_iy_tmp;
  int32_T i;
  int32_T knt;
  int32_T tau_tmp_tmp;
  int32_T temp2_tmp_tmp_tmp;
  for (i = 0; i < 12; i++) {
    temp2_tmp_tmp_tmp = 13 * i + i;
    proc_control_B.temp2 = A[temp2_tmp_tmp_tmp + 1];
    if (i + 3 <= 13) {
      b_iy = i + 3;
    } else {
      b_iy = 13;
    }

    proc_control_B.iv_g = i * 13 + b_iy;
    proc_control_B.taui = 0.0;
    proc_control_B.xnorm_b = proc_control_xnrm2_h(11 - i, A, proc_control_B.iv_g);
    if (proc_control_B.xnorm_b != 0.0) {
      proc_control_B.xnorm_b = proc_control_rt_hypotd_snf(proc_control_B.temp2,
        proc_control_B.xnorm_b);
      if (proc_control_B.temp2 >= 0.0) {
        proc_control_B.xnorm_b = -proc_control_B.xnorm_b;
      }

      if (std::abs(proc_control_B.xnorm_b) < 1.0020841800044864E-292) {
        knt = 0;
        b_iy_tmp = (proc_control_B.iv_g - i) + 10;
        do {
          knt++;
          for (b_ix = proc_control_B.iv_g; b_ix <= b_iy_tmp; b_ix++) {
            A[b_ix - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_b *= 9.9792015476736E+291;
          proc_control_B.temp2 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_b) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.xnorm_b = proc_control_rt_hypotd_snf(proc_control_B.temp2,
          proc_control_xnrm2_h(11 - i, A, proc_control_B.iv_g));
        if (proc_control_B.temp2 >= 0.0) {
          proc_control_B.xnorm_b = -proc_control_B.xnorm_b;
        }

        proc_control_B.taui = (proc_control_B.xnorm_b - proc_control_B.temp2) /
          proc_control_B.xnorm_b;
        proc_control_B.temp2 = 1.0 / (proc_control_B.temp2 -
          proc_control_B.xnorm_b);
        for (b_ix = proc_control_B.iv_g; b_ix <= b_iy_tmp; b_ix++) {
          A[b_ix - 1] *= proc_control_B.temp2;
        }

        for (proc_control_B.iv_g = 0; proc_control_B.iv_g < knt;
             proc_control_B.iv_g++) {
          proc_control_B.xnorm_b *= 1.0020841800044864E-292;
        }

        proc_control_B.temp2 = proc_control_B.xnorm_b;
      } else {
        proc_control_B.taui = (proc_control_B.xnorm_b - proc_control_B.temp2) /
          proc_control_B.xnorm_b;
        proc_control_B.temp2 = 1.0 / (proc_control_B.temp2 -
          proc_control_B.xnorm_b);
        b_ix = (proc_control_B.iv_g - i) + 10;
        for (knt = proc_control_B.iv_g; knt <= b_ix; knt++) {
          A[knt - 1] *= proc_control_B.temp2;
        }

        proc_control_B.temp2 = proc_control_B.xnorm_b;
      }
    }

    E[i] = proc_control_B.temp2;
    if (proc_control_B.taui != 0.0) {
      A[temp2_tmp_tmp_tmp + 1] = 1.0;
      for (proc_control_B.iv_g = i + 1; proc_control_B.iv_g < 13;
           proc_control_B.iv_g++) {
        tau[proc_control_B.iv_g - 1] = 0.0;
      }

      b_ix_tmp = 11 - i;
      b_iy_tmp = 12 - i;
      for (proc_control_B.iv_g = 0; proc_control_B.iv_g <= b_ix_tmp;
           proc_control_B.iv_g++) {
        b_ix = i + proc_control_B.iv_g;
        proc_control_B.xnorm_b = A[(13 * i + b_ix) + 1] * proc_control_B.taui;
        proc_control_B.temp2 = 0.0;
        b_iy = (b_ix + 1) * 13 + i;
        tau[b_ix] += A[(b_iy + proc_control_B.iv_g) + 1] *
          proc_control_B.xnorm_b;
        for (knt = proc_control_B.iv_g + 2; knt <= b_iy_tmp; knt++) {
          tau_tmp_tmp = i + knt;
          proc_control_B.tau_tmp = A[b_iy + knt];
          tau[tau_tmp_tmp - 1] += proc_control_B.tau_tmp *
            proc_control_B.xnorm_b;
          proc_control_B.temp2 += A[13 * i + tau_tmp_tmp] *
            proc_control_B.tau_tmp;
        }

        tau[b_ix] += proc_control_B.taui * proc_control_B.temp2;
      }

      proc_control_B.iv_g = temp2_tmp_tmp_tmp + 1;
      b_ix = i;
      b_iy = temp2_tmp_tmp_tmp + 1;
      proc_control_B.xnorm_b = 0.0;
      for (knt = 0; knt <= b_ix_tmp; knt++) {
        proc_control_B.xnorm_b += tau[b_ix] * A[b_iy];
        b_ix++;
        b_iy++;
      }

      proc_control_B.xnorm_b *= -0.5 * proc_control_B.taui;
      if (!(proc_control_B.xnorm_b == 0.0)) {
        b_ix = i;
        for (knt = 0; knt <= b_ix_tmp; knt++) {
          tau[b_ix] += proc_control_B.xnorm_b * A[proc_control_B.iv_g];
          proc_control_B.iv_g++;
          b_ix++;
        }
      }

      for (proc_control_B.iv_g = 0; proc_control_B.iv_g <= b_ix_tmp;
           proc_control_B.iv_g++) {
        b_ix = i + proc_control_B.iv_g;
        proc_control_B.xnorm_b = A[(13 * i + b_ix) + 1];
        proc_control_B.temp2 = tau[b_ix];
        proc_control_B.tau_tmp = proc_control_B.temp2 * proc_control_B.xnorm_b;
        b_iy = (b_ix + 1) * 13;
        tau_tmp_tmp = b_iy + i;
        A[(b_ix + b_iy) + 1] = (A[(tau_tmp_tmp + proc_control_B.iv_g) + 1] -
          proc_control_B.tau_tmp) - proc_control_B.tau_tmp;
        for (knt = proc_control_B.iv_g + 2; knt <= b_iy_tmp; knt++) {
          b_ix = i + knt;
          A[b_ix + b_iy] = (A[tau_tmp_tmp + knt] - tau[b_ix - 1] *
                            proc_control_B.xnorm_b) - A[13 * i + b_ix] *
            proc_control_B.temp2;
        }
      }
    }

    A[temp2_tmp_tmp_tmp + 1] = E[i];
    D[i] = A[temp2_tmp_tmp_tmp];
    tau[i] = proc_control_B.taui;
  }

  D[12] = A[168];
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_xzlascl_g(real_T cfrom, real_T cto, int32_T m,
  real_T A[13], int32_T iA0)
{
  boolean_T notdone;
  proc_control_B.cfromc_i = cfrom;
  proc_control_B.ctoc_b = cto;
  notdone = true;
  while (notdone) {
    proc_control_B.cfrom1_e = proc_control_B.cfromc_i * 2.0041683600089728E-292;
    proc_control_B.cto1_pr = proc_control_B.ctoc_b / 4.9896007738368E+291;
    if ((std::abs(proc_control_B.cfrom1_e) > std::abs(proc_control_B.ctoc_b)) &&
        (proc_control_B.ctoc_b != 0.0)) {
      proc_control_B.mul_o = 2.0041683600089728E-292;
      proc_control_B.cfromc_i = proc_control_B.cfrom1_e;
    } else if (std::abs(proc_control_B.cto1_pr) > std::abs
               (proc_control_B.cfromc_i)) {
      proc_control_B.mul_o = 4.9896007738368E+291;
      proc_control_B.ctoc_b = proc_control_B.cto1_pr;
    } else {
      proc_control_B.mul_o = proc_control_B.ctoc_b / proc_control_B.cfromc_i;
      notdone = false;
    }

    for (int32_T b_i{0}; b_i < m; b_i++) {
      int32_T tmp;
      tmp = (b_i + iA0) - 1;
      A[tmp] *= proc_control_B.mul_o;
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_xzlascl_gj(real_T cfrom, real_T cto, int32_T m,
  real_T A[12], int32_T iA0)
{
  boolean_T notdone;
  proc_control_B.cfromc_b = cfrom;
  proc_control_B.ctoc_f = cto;
  notdone = true;
  while (notdone) {
    proc_control_B.cfrom1_l = proc_control_B.cfromc_b * 2.0041683600089728E-292;
    proc_control_B.cto1_p = proc_control_B.ctoc_f / 4.9896007738368E+291;
    if ((std::abs(proc_control_B.cfrom1_l) > std::abs(proc_control_B.ctoc_f)) &&
        (proc_control_B.ctoc_f != 0.0)) {
      proc_control_B.mul_n = 2.0041683600089728E-292;
      proc_control_B.cfromc_b = proc_control_B.cfrom1_l;
    } else if (std::abs(proc_control_B.cto1_p) > std::abs
               (proc_control_B.cfromc_b)) {
      proc_control_B.mul_n = 4.9896007738368E+291;
      proc_control_B.ctoc_f = proc_control_B.cto1_p;
    } else {
      proc_control_B.mul_n = proc_control_B.ctoc_f / proc_control_B.cfromc_b;
      notdone = false;
    }

    for (int32_T b_i{0}; b_i < m; b_i++) {
      int32_T tmp;
      tmp = (b_i + iA0) - 1;
      A[tmp] *= proc_control_B.mul_n;
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_xzlartg_c(real_T f, real_T g, real_T *cs, real_T
  *sn, real_T *r)
{
  real_T f1;
  f1 = std::abs(f);
  *r = std::abs(g);
  if (g == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
    *r = f;
  } else if (f == 0.0) {
    *cs = 0.0;
    if (g >= 0.0) {
      *sn = 1.0;
    } else {
      *sn = -1.0;
    }
  } else if ((f1 > 1.4916681462400413E-154) && (f1 < 4.7403759540545887E+153) &&
             (*r > 1.4916681462400413E-154) && (*r < 4.7403759540545887E+153)) {
    *r = std::sqrt(f * f + g * g);
    *cs = f1 / *r;
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = g / *r;
  } else {
    real_T fs;
    real_T gs;
    f1 = std::fmin(4.49423283715579E+307, std::fmax(2.2250738585072014E-308, std::
      fmax(f1, *r)));
    fs = f / f1;
    gs = g / f1;
    *r = std::sqrt(fs * fs + gs * gs);
    *cs = std::abs(fs) / *r;
    if (!(f >= 0.0)) {
      *r = -*r;
    }

    *sn = gs / *r;
    *r *= f1;
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_rotateRight_nh(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  for (int32_T b_j{0}; b_j <= n - 2; b_j++) {
    int32_T offsetj;
    int32_T offsetjp1;
    proc_control_B.ctemp_fr = cs[(ic0 + b_j) - 1];
    proc_control_B.stemp_h = cs[(is0 + b_j) - 1];
    offsetj = (b_j * 13 + iz0) - 1;
    offsetjp1 = ((b_j + 1) * 13 + iz0) - 1;
    if ((proc_control_B.ctemp_fr != 1.0) || (proc_control_B.stemp_h != 0.0)) {
      for (int32_T j{0}; j < 13; j++) {
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = offsetjp1 + j;
        proc_control_B.temp_l = z[temp_tmp];
        tmp = offsetj + j;
        z[temp_tmp] = proc_control_B.ctemp_fr * proc_control_B.temp_l - z[tmp] *
          proc_control_B.stemp_h;
        z[tmp] = z[tmp] * proc_control_B.ctemp_fr + proc_control_B.stemp_h *
          proc_control_B.temp_l;
      }
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_xdlaev2_d(real_T a, real_T b, real_T c, real_T
  *rt1, real_T *rt2, real_T *cs1, real_T *sn1)
{
  int32_T sgn1;
  int32_T sgn2;
  proc_control_B.sm = a + c;
  proc_control_B.df = a - c;
  proc_control_B.adf = std::abs(proc_control_B.df);
  proc_control_B.tb = b + b;
  proc_control_B.ab = std::abs(proc_control_B.tb);
  if (std::abs(a) > std::abs(c)) {
    proc_control_B.acmx = a;
    proc_control_B.acmn = c;
  } else {
    proc_control_B.acmx = c;
    proc_control_B.acmn = a;
  }

  if (proc_control_B.adf > proc_control_B.ab) {
    proc_control_B.b_a_d = proc_control_B.ab / proc_control_B.adf;
    proc_control_B.adf *= std::sqrt(proc_control_B.b_a_d * proc_control_B.b_a_d
      + 1.0);
  } else if (proc_control_B.adf < proc_control_B.ab) {
    proc_control_B.adf /= proc_control_B.ab;
    proc_control_B.adf = std::sqrt(proc_control_B.adf * proc_control_B.adf + 1.0)
      * proc_control_B.ab;
  } else {
    proc_control_B.adf = proc_control_B.ab * 1.4142135623730951;
  }

  if (proc_control_B.sm < 0.0) {
    *rt1 = (proc_control_B.sm - proc_control_B.adf) * 0.5;
    sgn1 = -1;
    *rt2 = proc_control_B.acmx / *rt1 * proc_control_B.acmn - b / *rt1 * b;
  } else if (proc_control_B.sm > 0.0) {
    *rt1 = (proc_control_B.sm + proc_control_B.adf) * 0.5;
    sgn1 = 1;
    *rt2 = proc_control_B.acmx / *rt1 * proc_control_B.acmn - b / *rt1 * b;
  } else {
    *rt1 = 0.5 * proc_control_B.adf;
    *rt2 = -0.5 * proc_control_B.adf;
    sgn1 = 1;
  }

  if (proc_control_B.df >= 0.0) {
    proc_control_B.df += proc_control_B.adf;
    sgn2 = 1;
  } else {
    proc_control_B.df -= proc_control_B.adf;
    sgn2 = -1;
  }

  if (std::abs(proc_control_B.df) > proc_control_B.ab) {
    proc_control_B.tb = -proc_control_B.tb / proc_control_B.df;
    *sn1 = 1.0 / std::sqrt(proc_control_B.tb * proc_control_B.tb + 1.0);
    *cs1 = proc_control_B.tb * *sn1;
  } else if (proc_control_B.ab == 0.0) {
    *cs1 = 1.0;
    *sn1 = 0.0;
  } else {
    proc_control_B.tb = -proc_control_B.df / proc_control_B.tb;
    *cs1 = 1.0 / std::sqrt(proc_control_B.tb * proc_control_B.tb + 1.0);
    *sn1 = proc_control_B.tb * *cs1;
  }

  if (sgn1 == sgn2) {
    proc_control_B.tb = *cs1;
    *cs1 = -*sn1;
    *sn1 = proc_control_B.tb;
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_rotateRight_n(int32_T n, real_T z[169], int32_T
  iz0, const real_T cs[24], int32_T ic0, int32_T is0)
{
  for (int32_T j{n - 1}; j >= 1; j--) {
    int32_T offsetj;
    int32_T offsetjp1;
    proc_control_B.ctemp_f = cs[(ic0 + j) - 2];
    proc_control_B.stemp_d = cs[(is0 + j) - 2];
    offsetj = ((j - 1) * 13 + iz0) - 1;
    offsetjp1 = (j * 13 + iz0) - 1;
    if ((proc_control_B.ctemp_f != 1.0) || (proc_control_B.stemp_d != 0.0)) {
      for (int32_T i{0}; i < 13; i++) {
        int32_T temp_tmp;
        int32_T tmp;
        temp_tmp = offsetjp1 + i;
        proc_control_B.temp_i = z[temp_tmp];
        tmp = offsetj + i;
        z[temp_tmp] = proc_control_B.ctemp_f * proc_control_B.temp_i - z[tmp] *
          proc_control_B.stemp_d;
        z[tmp] = z[tmp] * proc_control_B.ctemp_f + proc_control_B.stemp_d *
          proc_control_B.temp_i;
      }
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
int32_T proc_control::proc_control_xzsteqr_h(real_T d[13], real_T e[12], real_T
  z[169])
{
  int32_T b_anorm_tmp;
  int32_T exitg1;
  int32_T exitg3;
  int32_T exitg4;
  int32_T i;
  int32_T info;
  int32_T iscale;
  int32_T n_tmp;
  boolean_T exitg2;
  info = 0;
  std::memset(&proc_control_B.work[0], 0, 24U * sizeof(real_T));
  i = 0;
  proc_control_B.l1 = 1;
  do {
    exitg1 = 0;
    if (proc_control_B.l1 > 13) {
      for (i = 0; i < 12; i++) {
        proc_control_B.l_e = i;
        proc_control_B.p_b = d[i];
        for (proc_control_B.l1 = i + 2; proc_control_B.l1 < 14;
             proc_control_B.l1++) {
          proc_control_B.tst = d[proc_control_B.l1 - 1];
          if (proc_control_B.tst < proc_control_B.p_b) {
            proc_control_B.l_e = proc_control_B.l1 - 1;
            proc_control_B.p_b = proc_control_B.tst;
          }
        }

        if (proc_control_B.l_e != i) {
          d[proc_control_B.l_e] = d[i];
          d[i] = proc_control_B.p_b;
          proc_control_B.m_p = i * 13;
          proc_control_B.l_e *= 13;
          for (proc_control_B.l1 = 0; proc_control_B.l1 < 13; proc_control_B.l1
               ++) {
            proc_control_B.lsv_f = proc_control_B.m_p + proc_control_B.l1;
            proc_control_B.tst = z[proc_control_B.lsv_f];
            proc_control_B.lend_e = proc_control_B.l_e + proc_control_B.l1;
            z[proc_control_B.lsv_f] = z[proc_control_B.lend_e];
            z[proc_control_B.lend_e] = proc_control_B.tst;
          }
        }
      }

      exitg1 = 1;
    } else {
      if (proc_control_B.l1 > 1) {
        e[proc_control_B.l1 - 2] = 0.0;
      }

      proc_control_B.m_p = proc_control_B.l1;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.m_p < 13)) {
        proc_control_B.tst = std::abs(e[proc_control_B.m_p - 1]);
        if (proc_control_B.tst == 0.0) {
          exitg2 = true;
        } else if (proc_control_B.tst <= std::sqrt(std::abs(d[proc_control_B.m_p
          - 1])) * std::sqrt(std::abs(d[proc_control_B.m_p])) *
                   2.2204460492503131E-16) {
          e[proc_control_B.m_p - 1] = 0.0;
          exitg2 = true;
        } else {
          proc_control_B.m_p++;
        }
      }

      proc_control_B.l_e = proc_control_B.l1 - 1;
      proc_control_B.lsv_f = proc_control_B.l1;
      proc_control_B.lend_e = proc_control_B.m_p;
      proc_control_B.lendsv_o = proc_control_B.m_p;
      proc_control_B.l1 = proc_control_B.m_p + 1;
      if (proc_control_B.l_e + 1 == proc_control_B.m_p) {
      } else {
        n_tmp = proc_control_B.m_p - proc_control_B.l_e;
        if (n_tmp <= 0) {
          proc_control_B.tst = 0.0;
        } else {
          proc_control_B.tst = std::abs(d[(proc_control_B.l_e + n_tmp) - 1]);
          iscale = 0;
          exitg2 = false;
          while ((!exitg2) && (iscale <= n_tmp - 2)) {
            b_anorm_tmp = proc_control_B.l_e + iscale;
            proc_control_B.b_anorm = std::abs(d[b_anorm_tmp]);
            if (std::isnan(proc_control_B.b_anorm)) {
              proc_control_B.tst = (rtNaN);
              exitg2 = true;
            } else {
              if (proc_control_B.b_anorm > proc_control_B.tst) {
                proc_control_B.tst = proc_control_B.b_anorm;
              }

              proc_control_B.b_anorm = std::abs(e[b_anorm_tmp]);
              if (std::isnan(proc_control_B.b_anorm)) {
                proc_control_B.tst = (rtNaN);
                exitg2 = true;
              } else {
                if (proc_control_B.b_anorm > proc_control_B.tst) {
                  proc_control_B.tst = proc_control_B.b_anorm;
                }

                iscale++;
              }
            }
          }
        }

        iscale = 0;
        if (proc_control_B.tst == 0.0) {
        } else if (std::isinf(proc_control_B.tst) || std::isnan
                   (proc_control_B.tst)) {
          for (i = 0; i < 13; i++) {
            d[i] = (rtNaN);
          }

          for (proc_control_B.lend_e = 0; proc_control_B.lend_e < 169;
               proc_control_B.lend_e++) {
            z[proc_control_B.lend_e] = (rtNaN);
          }

          exitg1 = 1;
        } else {
          if (proc_control_B.tst > 2.2346346549904327E+153) {
            iscale = 1;
            proc_control_xzlascl_g(proc_control_B.tst, 2.2346346549904327E+153,
              n_tmp, d, proc_control_B.l_e + 1);
            proc_control_xzlascl_gj(proc_control_B.tst, 2.2346346549904327E+153,
              n_tmp - 1, e, proc_control_B.l_e + 1);
          } else if (proc_control_B.tst < 3.02546243347603E-123) {
            iscale = 2;
            proc_control_xzlascl_g(proc_control_B.tst, 3.02546243347603E-123,
              n_tmp, d, proc_control_B.l_e + 1);
            proc_control_xzlascl_gj(proc_control_B.tst, 3.02546243347603E-123,
              n_tmp - 1, e, proc_control_B.l_e + 1);
          }

          if (std::abs(d[proc_control_B.m_p - 1]) < std::abs
              (d[proc_control_B.l_e])) {
            proc_control_B.lend_e = proc_control_B.lsv_f;
            proc_control_B.l_e = proc_control_B.m_p - 1;
          }

          if (proc_control_B.lend_e > proc_control_B.l_e + 1) {
            do {
              exitg4 = 0;
              if (proc_control_B.l_e + 1 != proc_control_B.lend_e) {
                proc_control_B.m_p = proc_control_B.l_e;
                exitg2 = false;
                while ((!exitg2) && (proc_control_B.m_p + 1 <
                                     proc_control_B.lend_e)) {
                  proc_control_B.b_anorm = std::abs(e[proc_control_B.m_p]);
                  if (proc_control_B.b_anorm * proc_control_B.b_anorm <=
                      4.9303806576313238E-32 * std::abs(d[proc_control_B.m_p]) *
                      std::abs(d[proc_control_B.m_p + 1]) +
                      2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    proc_control_B.m_p++;
                  }
                }
              } else {
                proc_control_B.m_p = proc_control_B.lend_e - 1;
              }

              if (proc_control_B.m_p + 1 < proc_control_B.lend_e) {
                e[proc_control_B.m_p] = 0.0;
              }

              if (proc_control_B.m_p + 1 == proc_control_B.l_e + 1) {
                proc_control_B.l_e++;
                if (proc_control_B.l_e + 1 > proc_control_B.lend_e) {
                  exitg4 = 1;
                }
              } else if (proc_control_B.m_p + 1 == proc_control_B.l_e + 2) {
                proc_control_xdlaev2_d(d[proc_control_B.l_e],
                  e[proc_control_B.l_e], d[proc_control_B.l_e + 1],
                  &d[proc_control_B.l_e], &proc_control_B.b_anorm,
                  &proc_control_B.work[proc_control_B.l_e], &proc_control_B.s_c);
                d[proc_control_B.l_e + 1] = proc_control_B.b_anorm;
                proc_control_B.work[proc_control_B.l_e + 12] =
                  proc_control_B.s_c;
                proc_control_rotateRight_n(2, z, proc_control_B.l_e * 13 + 1,
                  proc_control_B.work, proc_control_B.l_e + 1,
                  proc_control_B.l_e + 13);
                e[proc_control_B.l_e] = 0.0;
                proc_control_B.l_e += 2;
                if (proc_control_B.l_e + 1 > proc_control_B.lend_e) {
                  exitg4 = 1;
                }
              } else if (i == 390) {
                exitg4 = 1;
              } else {
                i++;
                proc_control_B.b_anorm = (d[proc_control_B.l_e + 1] -
                  d[proc_control_B.l_e]) / (2.0 * e[proc_control_B.l_e]);
                proc_control_B.s_c = proc_control_rt_hypotd_snf
                  (proc_control_B.b_anorm, 1.0);
                if (!(proc_control_B.b_anorm >= 0.0)) {
                  proc_control_B.s_c = -proc_control_B.s_c;
                }

                proc_control_B.b_anorm = e[proc_control_B.l_e] /
                  (proc_control_B.b_anorm + proc_control_B.s_c) +
                  (d[proc_control_B.m_p] - d[proc_control_B.l_e]);
                proc_control_B.s_c = 1.0;
                proc_control_B.c_h = 1.0;
                proc_control_B.p_b = 0.0;
                for (n_tmp = proc_control_B.m_p; n_tmp >= proc_control_B.l_e + 1;
                     n_tmp--) {
                  proc_control_B.e_n = e[n_tmp - 1];
                  proc_control_B.b_f = proc_control_B.c_h * proc_control_B.e_n;
                  proc_control_xzlartg_c(proc_control_B.b_anorm,
                    proc_control_B.s_c * proc_control_B.e_n, &proc_control_B.c_h,
                    &proc_control_B.b_s, &proc_control_B.r_d);
                  proc_control_B.s_c = proc_control_B.b_s;
                  if (n_tmp != proc_control_B.m_p) {
                    e[n_tmp] = proc_control_B.r_d;
                  }

                  proc_control_B.b_anorm = d[n_tmp] - proc_control_B.p_b;
                  proc_control_B.r_d = (d[n_tmp - 1] - proc_control_B.b_anorm) *
                    proc_control_B.b_s + 2.0 * proc_control_B.c_h *
                    proc_control_B.b_f;
                  proc_control_B.p_b = proc_control_B.b_s * proc_control_B.r_d;
                  d[n_tmp] = proc_control_B.b_anorm + proc_control_B.p_b;
                  proc_control_B.b_anorm = proc_control_B.c_h *
                    proc_control_B.r_d - proc_control_B.b_f;
                  proc_control_B.work[n_tmp - 1] = proc_control_B.c_h;
                  proc_control_B.work[n_tmp + 11] = -proc_control_B.b_s;
                }

                proc_control_rotateRight_n((proc_control_B.m_p -
                  proc_control_B.l_e) + 1, z, proc_control_B.l_e * 13 + 1,
                  proc_control_B.work, proc_control_B.l_e + 1,
                  proc_control_B.l_e + 13);
                d[proc_control_B.l_e] -= proc_control_B.p_b;
                e[proc_control_B.l_e] = proc_control_B.b_anorm;
              }
            } while (exitg4 == 0);
          } else {
            do {
              exitg3 = 0;
              if (proc_control_B.l_e + 1 != proc_control_B.lend_e) {
                proc_control_B.m_p = proc_control_B.l_e + 1;
                exitg2 = false;
                while ((!exitg2) && (proc_control_B.m_p > proc_control_B.lend_e))
                {
                  proc_control_B.b_anorm = std::abs(e[proc_control_B.m_p - 2]);
                  if (proc_control_B.b_anorm * proc_control_B.b_anorm <= std::
                      abs(d[proc_control_B.m_p - 1]) * 4.9303806576313238E-32 *
                      std::abs(d[proc_control_B.m_p - 2]) +
                      2.2250738585072014E-308) {
                    exitg2 = true;
                  } else {
                    proc_control_B.m_p--;
                  }
                }
              } else {
                proc_control_B.m_p = proc_control_B.lend_e;
              }

              if (proc_control_B.m_p > proc_control_B.lend_e) {
                e[proc_control_B.m_p - 2] = 0.0;
              }

              if (proc_control_B.l_e + 1 == proc_control_B.m_p) {
                proc_control_B.l_e--;
                if (proc_control_B.l_e + 1 < proc_control_B.lend_e) {
                  exitg3 = 1;
                }
              } else if (proc_control_B.m_p == proc_control_B.l_e) {
                proc_control_xdlaev2_d(d[proc_control_B.l_e - 1],
                  e[proc_control_B.l_e - 1], d[proc_control_B.l_e],
                  &d[proc_control_B.l_e - 1], &proc_control_B.b_anorm,
                  &proc_control_B.work[proc_control_B.m_p - 1],
                  &proc_control_B.s_c);
                d[proc_control_B.l_e] = proc_control_B.b_anorm;
                proc_control_B.work[proc_control_B.m_p + 11] =
                  proc_control_B.s_c;
                proc_control_rotateRight_nh(2, z, (proc_control_B.l_e - 1) * 13
                  + 1, proc_control_B.work, proc_control_B.m_p,
                  proc_control_B.m_p + 12);
                e[proc_control_B.l_e - 1] = 0.0;
                proc_control_B.l_e -= 2;
                if (proc_control_B.l_e + 1 < proc_control_B.lend_e) {
                  exitg3 = 1;
                }
              } else if (i == 390) {
                exitg3 = 1;
              } else {
                i++;
                proc_control_B.p_b = e[proc_control_B.l_e - 1];
                proc_control_B.b_anorm = (d[proc_control_B.l_e - 1] -
                  d[proc_control_B.l_e]) / (proc_control_B.p_b * 2.0);
                proc_control_B.s_c = proc_control_rt_hypotd_snf
                  (proc_control_B.b_anorm, 1.0);
                if (!(proc_control_B.b_anorm >= 0.0)) {
                  proc_control_B.s_c = -proc_control_B.s_c;
                }

                proc_control_B.b_anorm = (d[proc_control_B.m_p - 1] -
                  d[proc_control_B.l_e]) + proc_control_B.p_b /
                  (proc_control_B.b_anorm + proc_control_B.s_c);
                proc_control_B.s_c = 1.0;
                proc_control_B.c_h = 1.0;
                proc_control_B.p_b = 0.0;
                for (n_tmp = proc_control_B.m_p; n_tmp <= proc_control_B.l_e;
                     n_tmp++) {
                  proc_control_B.e_n = e[n_tmp - 1];
                  proc_control_B.b_f = proc_control_B.c_h * proc_control_B.e_n;
                  proc_control_xzlartg_c(proc_control_B.b_anorm,
                    proc_control_B.s_c * proc_control_B.e_n, &proc_control_B.c_h,
                    &proc_control_B.b_s, &proc_control_B.r_d);
                  proc_control_B.s_c = proc_control_B.b_s;
                  if (n_tmp != proc_control_B.m_p) {
                    e[n_tmp - 2] = proc_control_B.r_d;
                  }

                  proc_control_B.b_anorm = d[n_tmp - 1] - proc_control_B.p_b;
                  proc_control_B.r_d = (d[n_tmp] - proc_control_B.b_anorm) *
                    proc_control_B.b_s + 2.0 * proc_control_B.c_h *
                    proc_control_B.b_f;
                  proc_control_B.p_b = proc_control_B.b_s * proc_control_B.r_d;
                  d[n_tmp - 1] = proc_control_B.b_anorm + proc_control_B.p_b;
                  proc_control_B.b_anorm = proc_control_B.c_h *
                    proc_control_B.r_d - proc_control_B.b_f;
                  proc_control_B.work[n_tmp - 1] = proc_control_B.c_h;
                  proc_control_B.work[n_tmp + 11] = proc_control_B.b_s;
                }

                proc_control_rotateRight_nh((proc_control_B.l_e -
                  proc_control_B.m_p) + 2, z, (proc_control_B.m_p - 1) * 13 + 1,
                  proc_control_B.work, proc_control_B.m_p, proc_control_B.m_p +
                  12);
                d[proc_control_B.l_e] -= proc_control_B.p_b;
                e[proc_control_B.l_e - 1] = proc_control_B.b_anorm;
              }
            } while (exitg3 == 0);
          }

          switch (iscale) {
           case 1:
            proc_control_B.lend_e = proc_control_B.lendsv_o -
              proc_control_B.lsv_f;
            proc_control_xzlascl_g(2.2346346549904327E+153, proc_control_B.tst,
              proc_control_B.lend_e + 1, d, proc_control_B.lsv_f);
            proc_control_xzlascl_gj(2.2346346549904327E+153, proc_control_B.tst,
              proc_control_B.lend_e, e, proc_control_B.lsv_f);
            break;

           case 2:
            proc_control_B.lend_e = proc_control_B.lendsv_o -
              proc_control_B.lsv_f;
            proc_control_xzlascl_g(3.02546243347603E-123, proc_control_B.tst,
              proc_control_B.lend_e + 1, d, proc_control_B.lsv_f);
            proc_control_xzlascl_gj(3.02546243347603E-123, proc_control_B.tst,
              proc_control_B.lend_e, e, proc_control_B.lsv_f);
            break;
          }

          if (i >= 390) {
            for (i = 0; i < 12; i++) {
              if (e[i] != 0.0) {
                info++;
              }
            }

            exitg1 = 1;
          }
        }
      }
    }
  } while (exitg1 == 0);

  return info;
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_xsyheev_c(real_T A[169], int32_T *info, real_T
  W[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T iscale;
  boolean_T notdone;
  *info = 0;
  proc_control_B.anrm = 0.0;
  proc_control_B.e_i_i = 0;
  exitg2 = false;
  while ((!exitg2) && (proc_control_B.e_i_i < 13)) {
    proc_control_B.itau = 0;
    do {
      exitg1 = 0;
      if (proc_control_B.itau <= proc_control_B.e_i_i) {
        proc_control_B.absx_h = std::abs(A[13 * proc_control_B.e_i_i +
          proc_control_B.itau]);
        if (std::isnan(proc_control_B.absx_h)) {
          proc_control_B.anrm = (rtNaN);
          exitg1 = 1;
        } else {
          if (proc_control_B.absx_h > proc_control_B.anrm) {
            proc_control_B.anrm = proc_control_B.absx_h;
          }

          proc_control_B.itau++;
        }
      } else {
        proc_control_B.e_i_i++;
        exitg1 = 2;
      }
    } while (exitg1 == 0);

    if (exitg1 == 1) {
      exitg2 = true;
    }
  }

  if (std::isinf(proc_control_B.anrm) || std::isnan(proc_control_B.anrm)) {
    for (proc_control_B.e_i_i = 0; proc_control_B.e_i_i < 13;
         proc_control_B.e_i_i++) {
      W[proc_control_B.e_i_i] = (rtNaN);
    }

    for (proc_control_B.lastc = 0; proc_control_B.lastc < 169;
         proc_control_B.lastc++) {
      A[proc_control_B.lastc] = (rtNaN);
    }
  } else {
    iscale = false;
    guard1 = false;
    if ((proc_control_B.anrm > 0.0) && (proc_control_B.anrm <
         1.0010415475915505E-146)) {
      iscale = true;
      proc_control_B.anrm = 1.0010415475915505E-146 / proc_control_B.anrm;
      guard1 = true;
    } else if (proc_control_B.anrm > 9.9895953610111751E+145) {
      iscale = true;
      proc_control_B.anrm = 9.9895953610111751E+145 / proc_control_B.anrm;
      guard1 = true;
    }

    if (guard1) {
      proc_control_B.absx_h = proc_control_B.anrm;
      proc_control_B.cfromc = 1.0;
      notdone = true;
      while (notdone) {
        proc_control_B.cfrom1 = proc_control_B.cfromc * 2.0041683600089728E-292;
        proc_control_B.cto1 = proc_control_B.absx_h / 4.9896007738368E+291;
        if ((std::abs(proc_control_B.cfrom1) > proc_control_B.absx_h) &&
            (proc_control_B.absx_h != 0.0)) {
          proc_control_B.mul = 2.0041683600089728E-292;
          proc_control_B.cfromc = proc_control_B.cfrom1;
        } else if (proc_control_B.cto1 > std::abs(proc_control_B.cfromc)) {
          proc_control_B.mul = 4.9896007738368E+291;
          proc_control_B.absx_h = proc_control_B.cto1;
        } else {
          proc_control_B.mul = proc_control_B.absx_h / proc_control_B.cfromc;
          notdone = false;
        }

        for (proc_control_B.lastc = 0; proc_control_B.lastc < 169;
             proc_control_B.lastc++) {
          A[proc_control_B.lastc] *= proc_control_B.mul;
        }
      }
    }

    proc_control_xzsyhetrd_c(A, W, proc_control_B.e, proc_control_B.tau);
    proc_control_B.coltop = 143;
    for (proc_control_B.e_i_i = 11; proc_control_B.e_i_i >= 0;
         proc_control_B.e_i_i--) {
      A[proc_control_B.coltop + 13] = 0.0;
      for (proc_control_B.itau = proc_control_B.e_i_i + 3; proc_control_B.itau <
           14; proc_control_B.itau++) {
        proc_control_B.lastc = proc_control_B.itau + proc_control_B.coltop;
        A[proc_control_B.lastc + 12] = A[proc_control_B.lastc - 1];
      }

      proc_control_B.coltop += -13;
    }

    A[0] = 1.0;
    std::memset(&A[1], 0, 12U * sizeof(real_T));
    std::memset(&proc_control_B.work_e[0], 0, 13U * sizeof(real_T));
    for (proc_control_B.e_i_i = 11; proc_control_B.e_i_i >= 0;
         proc_control_B.e_i_i--) {
      proc_control_B.iaii = (proc_control_B.e_i_i * 13 + proc_control_B.e_i_i) +
        28;
      if (proc_control_B.e_i_i + 1 < 12) {
        A[proc_control_B.iaii - 14] = 1.0;
        if (proc_control_B.tau[proc_control_B.e_i_i] != 0.0) {
          proc_control_B.itau = 12 - proc_control_B.e_i_i;
          proc_control_B.lastc = proc_control_B.iaii - proc_control_B.e_i_i;
          while ((proc_control_B.itau > 0) && (A[proc_control_B.lastc - 3] ==
                  0.0)) {
            proc_control_B.itau--;
            proc_control_B.lastc--;
          }

          proc_control_B.lastc = 10 - proc_control_B.e_i_i;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc + 1 > 0)) {
            proc_control_B.coltop = proc_control_B.lastc * 13 +
              proc_control_B.iaii;
            proc_control_B.jy = proc_control_B.coltop;
            do {
              exitg1 = 0;
              if (proc_control_B.jy <= (proc_control_B.coltop +
                   proc_control_B.itau) - 1) {
                if (A[proc_control_B.jy - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.jy++;
                }
              } else {
                proc_control_B.lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.itau = 0;
          proc_control_B.lastc = -1;
        }

        if (proc_control_B.itau > 0) {
          if (proc_control_B.lastc + 1 != 0) {
            std::memset(&proc_control_B.work_e[0], 0, static_cast<uint32_T>
                        (proc_control_B.lastc + 1) * sizeof(real_T));
            proc_control_B.f = 13 * proc_control_B.lastc + proc_control_B.iaii;
            for (proc_control_B.coltop = proc_control_B.iaii;
                 proc_control_B.coltop <= proc_control_B.f;
                 proc_control_B.coltop += 13) {
              proc_control_B.absx_h = 0.0;
              proc_control_B.g_c = (proc_control_B.coltop + proc_control_B.itau)
                - 1;
              for (proc_control_B.jy = proc_control_B.coltop; proc_control_B.jy <=
                   proc_control_B.g_c; proc_control_B.jy++) {
                proc_control_B.absx_h += A[((proc_control_B.iaii +
                  proc_control_B.jy) - proc_control_B.coltop) - 14] *
                  A[proc_control_B.jy - 1];
              }

              proc_control_B.jy = div_nde_s32_floor(proc_control_B.coltop -
                proc_control_B.iaii, 13);
              proc_control_B.work_e[proc_control_B.jy] += proc_control_B.absx_h;
            }
          }

          if (!(-proc_control_B.tau[proc_control_B.e_i_i] == 0.0)) {
            proc_control_B.coltop = proc_control_B.iaii;
            proc_control_B.f = proc_control_B.lastc;
            for (proc_control_B.lastc = 0; proc_control_B.lastc <=
                 proc_control_B.f; proc_control_B.lastc++) {
              proc_control_B.absx_h = proc_control_B.work_e[proc_control_B.lastc];
              if (proc_control_B.absx_h != 0.0) {
                proc_control_B.absx_h *=
                  -proc_control_B.tau[proc_control_B.e_i_i];
                proc_control_B.g_c = proc_control_B.itau + proc_control_B.coltop;
                for (proc_control_B.jy = proc_control_B.coltop;
                     proc_control_B.jy < proc_control_B.g_c; proc_control_B.jy++)
                {
                  A[proc_control_B.jy - 1] += A[((proc_control_B.iaii +
                    proc_control_B.jy) - proc_control_B.coltop) - 14] *
                    proc_control_B.absx_h;
                }
              }

              proc_control_B.coltop += 13;
            }
          }
        }

        proc_control_B.lastc = (proc_control_B.iaii - proc_control_B.e_i_i) - 2;
        for (proc_control_B.itau = proc_control_B.iaii - 12; proc_control_B.itau
             <= proc_control_B.lastc; proc_control_B.itau++) {
          A[proc_control_B.itau - 1] *= -proc_control_B.tau[proc_control_B.e_i_i];
        }
      }

      A[proc_control_B.iaii - 14] = 1.0 -
        proc_control_B.tau[proc_control_B.e_i_i];
      for (proc_control_B.itau = 0; proc_control_B.itau < proc_control_B.e_i_i;
           proc_control_B.itau++) {
        A[(proc_control_B.iaii - proc_control_B.itau) - 15] = 0.0;
      }
    }

    *info = proc_control_xzsteqr_h(W, proc_control_B.e, A);
    if (*info != 0) {
      for (proc_control_B.e_i_i = 0; proc_control_B.e_i_i < 13;
           proc_control_B.e_i_i++) {
        W[proc_control_B.e_i_i] = (rtNaN);
      }

      for (proc_control_B.lastc = 0; proc_control_B.lastc < 169;
           proc_control_B.lastc++) {
        A[proc_control_B.lastc] = (rtNaN);
      }
    } else if (iscale) {
      proc_control_B.anrm = 1.0 / proc_control_B.anrm;
      for (proc_control_B.e_i_i = 0; proc_control_B.e_i_i < 13;
           proc_control_B.e_i_i++) {
        W[proc_control_B.e_i_i] *= proc_control_B.anrm;
      }
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_expm_l(real_T A[169], real_T F[169])
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  boolean_T guard3;
  boolean_T guard4;
  boolean_T recomputeDiags;
  recomputeDiags = true;
  for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 169;
       proc_control_B.e_j_b++) {
    if (recomputeDiags) {
      proc_control_B.exptj_p = A[proc_control_B.e_j_b];
      if (std::isinf(proc_control_B.exptj_p) || std::isnan
          (proc_control_B.exptj_p)) {
        recomputeDiags = false;
      }
    }
  }

  if (!recomputeDiags) {
    for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 169;
         proc_control_B.e_i_g++) {
      F[proc_control_B.e_i_g] = (rtNaN);
    }
  } else {
    proc_control_B.e_j_b = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.e_j_b < 13)) {
      proc_control_B.e_i_g = 0;
      do {
        exitg1 = 0;
        if (proc_control_B.e_i_g < 13) {
          if ((proc_control_B.e_i_g != proc_control_B.e_j_b) && (!(A[13 *
                proc_control_B.e_j_b + proc_control_B.e_i_g] == 0.0))) {
            recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.e_i_g++;
          }
        } else {
          proc_control_B.e_j_b++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.e_i_g = 0;
      for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
           proc_control_B.b_s_f++) {
        F[proc_control_B.e_i_g] = std::exp(A[proc_control_B.e_i_g]);
        proc_control_B.e_i_g += 14;
      }
    } else {
      recomputeDiags = true;
      proc_control_B.e_j_b = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.e_j_b < 13)) {
        proc_control_B.e_i_g = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.e_i_g <= proc_control_B.e_j_b) {
            if (!(A[13 * proc_control_B.e_j_b + proc_control_B.e_i_g] == A[13 *
                  proc_control_B.e_i_g + proc_control_B.e_j_b])) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.e_i_g++;
            }
          } else {
            proc_control_B.e_j_b++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        std::memcpy(&proc_control_B.A2_p[0], &A[0], 169U * sizeof(real_T));
        proc_control_xsyheev_c(proc_control_B.A2_p, &proc_control_B.b_s_f,
          proc_control_B.w_h);
        proc_control_B.e_i_g = 0;
        for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
             proc_control_B.b_s_f++) {
          proc_control_B.exptj_p = std::exp
            (proc_control_B.w_h[proc_control_B.b_s_f]);
          for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 13;
               proc_control_B.e_j_b++) {
            proc_control_B.F_tmp = proc_control_B.e_j_b + proc_control_B.e_i_g;
            F[proc_control_B.F_tmp] = proc_control_B.A2_p[proc_control_B.F_tmp] *
              proc_control_B.exptj_p;
          }

          proc_control_B.e_i_g += 13;
        }

        for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 13;
             proc_control_B.e_i_g++) {
          proc_control_B.i10 = 0;
          for (proc_control_B.i8 = 0; proc_control_B.i8 < 13; proc_control_B.i8
               ++) {
            proc_control_B.exptj_p = 0.0;
            proc_control_B.i9 = 0;
            for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                 proc_control_B.F_tmp++) {
              proc_control_B.exptj_p += F[proc_control_B.i9 +
                proc_control_B.e_i_g] * proc_control_B.A2_p[proc_control_B.i9 +
                proc_control_B.i8];
              proc_control_B.i9 += 13;
            }

            proc_control_B.A4_p[proc_control_B.i10 + proc_control_B.e_i_g] =
              proc_control_B.exptj_p;
            proc_control_B.i10 += 13;
          }
        }

        std::memcpy(&F[0], &proc_control_B.A4_p[0], 169U * sizeof(real_T));
        proc_control_B.e_i_g = 0;
        for (proc_control_B.i10 = 0; proc_control_B.i10 < 13; proc_control_B.i10
             ++) {
          proc_control_B.i8 = 0;
          for (proc_control_B.i9 = 0; proc_control_B.i9 < 13; proc_control_B.i9
               ++) {
            proc_control_B.F_tmp = proc_control_B.i9 + proc_control_B.e_i_g;
            proc_control_B.A4_p[proc_control_B.F_tmp] = (F[proc_control_B.i8 +
              proc_control_B.i10] + F[proc_control_B.F_tmp]) / 2.0;
            proc_control_B.i8 += 13;
          }

          proc_control_B.e_i_g += 13;
        }

        std::memcpy(&F[0], &proc_control_B.A4_p[0], 169U * sizeof(real_T));
      } else {
        recomputeDiags = true;
        proc_control_B.e_j_b = 3;
        while (recomputeDiags && (proc_control_B.e_j_b <= 13)) {
          proc_control_B.e_i_g = proc_control_B.e_j_b;
          while (recomputeDiags && (proc_control_B.e_i_g <= 13)) {
            recomputeDiags = (A[((proc_control_B.e_j_b - 3) * 13 +
                                 proc_control_B.e_i_g) - 1] == 0.0);
            proc_control_B.e_i_g++;
          }

          proc_control_B.e_j_b++;
        }

        if (recomputeDiags) {
          proc_control_B.e_j_b = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.e_j_b - 1 < 12)) {
            proc_control_B.e_i_g = (proc_control_B.e_j_b - 1) * 13 +
              proc_control_B.e_j_b;
            proc_control_B.d6_og = A[proc_control_B.e_i_g];
            if (proc_control_B.d6_og != 0.0) {
              if ((proc_control_B.e_j_b != 12) && (A[(13 * proc_control_B.e_j_b
                    + proc_control_B.e_j_b) + 1] != 0.0)) {
                recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.i10 = 13 * proc_control_B.e_j_b +
                  proc_control_B.e_j_b;
                if (A[proc_control_B.e_i_g - 1] != A[proc_control_B.i10]) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.exptj_p = A[proc_control_B.i10 - 1];
                  if (std::isnan(proc_control_B.d6_og)) {
                    proc_control_B.d6_og = (rtNaN);
                  } else if (proc_control_B.d6_og < 0.0) {
                    proc_control_B.d6_og = -1.0;
                  } else {
                    proc_control_B.d6_og = (proc_control_B.d6_og > 0.0);
                  }

                  if (std::isnan(proc_control_B.exptj_p)) {
                    proc_control_B.exptj_p = (rtNaN);
                  } else if (proc_control_B.exptj_p < 0.0) {
                    proc_control_B.exptj_p = -1.0;
                  } else {
                    proc_control_B.exptj_p = (proc_control_B.exptj_p > 0.0);
                  }

                  if (proc_control_B.d6_og * proc_control_B.exptj_p != -1.0) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.e_j_b++;
                  }
                }
              }
            } else {
              proc_control_B.e_j_b++;
            }
          }
        }

        proc_control_B.exptj_p = 0.0;
        proc_control_B.e_i_g = 0;
        for (proc_control_B.i10 = 0; proc_control_B.i10 < 13; proc_control_B.i10
             ++) {
          for (proc_control_B.i8 = 0; proc_control_B.i8 < 13; proc_control_B.i8
               ++) {
            proc_control_B.d6_og = 0.0;
            proc_control_B.i9 = 0;
            for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                 proc_control_B.F_tmp++) {
              proc_control_B.d6_og += A[proc_control_B.i9 + proc_control_B.i8] *
                A[proc_control_B.F_tmp + proc_control_B.e_i_g];
              proc_control_B.i9 += 13;
            }

            proc_control_B.A2_p[proc_control_B.i8 + proc_control_B.e_i_g] =
              proc_control_B.d6_og;
          }

          proc_control_B.e_i_g += 13;
        }

        for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 13;
             proc_control_B.e_i_g++) {
          for (proc_control_B.i10 = 0; proc_control_B.i10 < 13;
               proc_control_B.i10++) {
            proc_control_B.A4_o = 0.0;
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.A4_o += proc_control_B.A2_p[13 * proc_control_B.i8
                + proc_control_B.e_i_g] * proc_control_B.A2_p[13 *
                proc_control_B.i10 + proc_control_B.i8];
            }

            proc_control_B.A4_p[proc_control_B.e_i_g + 13 * proc_control_B.i10] =
              proc_control_B.A4_o;
          }

          for (proc_control_B.i10 = 0; proc_control_B.i10 < 13;
               proc_control_B.i10++) {
            proc_control_B.d6_og = 0.0;
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.d6_og += proc_control_B.A4_p[13 * proc_control_B.i8
                + proc_control_B.e_i_g] * proc_control_B.A2_p[13 *
                proc_control_B.i10 + proc_control_B.i8];
            }

            proc_control_B.A6_a[proc_control_B.e_i_g + 13 * proc_control_B.i10] =
              proc_control_B.d6_og;
          }
        }

        proc_control_B.d6_og = rt_powd_snf(proc_control_norm_nt
          (proc_control_B.A6_a), 0.16666666666666666);
        proc_control_B.eta1_m = std::fmax(rt_powd_snf(proc_control_norm_nt
          (proc_control_B.A4_p), 0.25), proc_control_B.d6_og);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1_m <= 0.01495585217958292) {
          for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 169;
               proc_control_B.e_j_b++) {
            proc_control_B.A4_e[proc_control_B.e_j_b] = 0.19285012468241128 *
              std::abs(A[proc_control_B.e_j_b]);
          }

          proc_control_mpower_g(proc_control_B.A4_e, 7.0, proc_control_B.dv4);
          if (std::fmax(std::ceil(proc_control_log2_o(proc_control_norm_nt
                 (proc_control_B.dv4) / proc_control_norm_nt(A) * 2.0 /
                 2.2204460492503131E-16) / 6.0), 0.0) == 0.0) {
            proc_control_B.b_s_f = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1_m <= 0.253939833006323) {
            for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 169;
                 proc_control_B.e_j_b++) {
              proc_control_B.A4_e[proc_control_B.e_j_b] = 0.12321872304378752 *
                std::abs(A[proc_control_B.e_j_b]);
            }

            proc_control_mpower_g(proc_control_B.A4_e, 11.0, proc_control_B.dv4);
            if (std::fmax(std::ceil(proc_control_log2_o(proc_control_norm_nt
                   (proc_control_B.dv4) / proc_control_norm_nt(A) * 2.0 /
                   2.2204460492503131E-16) / 10.0), 0.0) == 0.0) {
              proc_control_B.b_s_f = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower_g(proc_control_B.A4_p, 2.0, proc_control_B.dv4);
          proc_control_B.eta1_m = rt_powd_snf(proc_control_norm_nt
            (proc_control_B.dv4), 0.125);
          proc_control_B.d6_og = std::fmax(proc_control_B.d6_og,
            proc_control_B.eta1_m);
          if (proc_control_B.d6_og <= 0.95041789961629319) {
            for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 169;
                 proc_control_B.e_j_b++) {
              proc_control_B.A4_e[proc_control_B.e_j_b] = 0.090475336558796943 *
                std::abs(A[proc_control_B.e_j_b]);
            }

            proc_control_mpower_g(proc_control_B.A4_e, 15.0, proc_control_B.dv4);
            if (std::fmax(std::ceil(proc_control_log2_o(proc_control_norm_nt
                   (proc_control_B.dv4) / proc_control_norm_nt(A) * 2.0 /
                   2.2204460492503131E-16) / 14.0), 0.0) == 0.0) {
              proc_control_B.b_s_f = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_og <= 2.097847961257068) {
            for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 169;
                 proc_control_B.e_j_b++) {
              proc_control_B.A4_e[proc_control_B.e_j_b] = 0.071467735648795785 *
                std::abs(A[proc_control_B.e_j_b]);
            }

            proc_control_mpower_g(proc_control_B.A4_e, 19.0, proc_control_B.dv4);
            if (std::fmax(std::ceil(proc_control_log2_o(proc_control_norm_nt
                   (proc_control_B.dv4) / proc_control_norm_nt(A) * 2.0 /
                   2.2204460492503131E-16) / 18.0), 0.0) == 0.0) {
              proc_control_B.b_s_f = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          proc_control_B.e_i_g = 0;
          for (proc_control_B.i10 = 0; proc_control_B.i10 < 13;
               proc_control_B.i10++) {
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.A4_o = 0.0;
              proc_control_B.i9 = 0;
              for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                   proc_control_B.F_tmp++) {
                proc_control_B.A4_o += proc_control_B.A4_p[proc_control_B.i9 +
                  proc_control_B.i8] * proc_control_B.A6_a[proc_control_B.F_tmp
                  + proc_control_B.e_i_g];
                proc_control_B.i9 += 13;
              }

              proc_control_B.A4_e[proc_control_B.i8 + proc_control_B.e_i_g] =
                proc_control_B.A4_o;
            }

            proc_control_B.e_i_g += 13;
          }

          proc_control_B.exptj_p = std::fmax(std::ceil(proc_control_log2_o(std::
            fmin(proc_control_B.d6_og, std::fmax(proc_control_B.eta1_m,
            rt_powd_snf(proc_control_norm_nt(proc_control_B.A4_e), 0.1))) /
            5.3719203511481517)), 0.0);
          proc_control_B.d6_og = rt_powd_snf(2.0, proc_control_B.exptj_p);
          for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 169;
               proc_control_B.e_j_b++) {
            proc_control_B.A4_o = A[proc_control_B.e_j_b] / proc_control_B.d6_og;
            proc_control_B.T_j[proc_control_B.e_j_b] = proc_control_B.A4_o;
            proc_control_B.A4_e[proc_control_B.e_j_b] = 0.05031554467093536 *
              std::abs(proc_control_B.A4_o);
          }

          proc_control_mpower_g(proc_control_B.A4_e, 27.0, proc_control_B.dv4);
          proc_control_B.exptj_p += std::fmax(std::ceil(proc_control_log2_o
            (proc_control_norm_nt(proc_control_B.dv4) / proc_control_norm_nt
             (proc_control_B.T_j) * 2.0 / 2.2204460492503131E-16) / 26.0), 0.0);
          if (std::isinf(proc_control_B.exptj_p)) {
            proc_control_B.d6_og = proc_control_norm_nt(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.d6_og)) && (!std::isnan
                 (proc_control_B.d6_og))) {
              proc_control_B.d6_og = std::frexp(proc_control_B.d6_og,
                &proc_control_B.b_s_f);
            } else {
              proc_control_B.b_s_f = 0;
            }

            proc_control_B.exptj_p = proc_control_B.b_s_f;
            if (proc_control_B.d6_og == 0.5) {
              proc_control_B.exptj_p = static_cast<real_T>(proc_control_B.b_s_f)
                - 1.0;
            }
          }

          proc_control_B.b_s_f = 13;
        }

        if (proc_control_B.exptj_p != 0.0) {
          proc_control_B.d6_og = rt_powd_snf(2.0, proc_control_B.exptj_p);
          for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 169;
               proc_control_B.e_i_g++) {
            A[proc_control_B.e_i_g] /= proc_control_B.d6_og;
          }

          proc_control_B.d6_og = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj_p);
          for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 169;
               proc_control_B.e_i_g++) {
            proc_control_B.A2_p[proc_control_B.e_i_g] /= proc_control_B.d6_og;
          }

          proc_control_B.d6_og = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj_p);
          for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 169;
               proc_control_B.e_i_g++) {
            proc_control_B.A4_p[proc_control_B.e_i_g] /= proc_control_B.d6_og;
          }

          proc_control_B.d6_og = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj_p);
          for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 169;
               proc_control_B.e_i_g++) {
            proc_control_B.A6_a[proc_control_B.e_i_g] /= proc_control_B.d6_og;
          }
        }

        if (recomputeDiags) {
          for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b < 12;
               proc_control_B.e_j_b++) {
            proc_control_B.blockFormat_o[proc_control_B.e_j_b] = 0;
          }

          proc_control_B.e_j_b = 0;
          while (proc_control_B.e_j_b + 1 < 12) {
            proc_control_B.d6_og = A[(13 * proc_control_B.e_j_b +
              proc_control_B.e_j_b) + 1];
            if (proc_control_B.d6_og != 0.0) {
              proc_control_B.blockFormat_o[proc_control_B.e_j_b] = 2;
              proc_control_B.blockFormat_o[proc_control_B.e_j_b + 1] = 0;
              proc_control_B.e_j_b += 2;
            } else if ((proc_control_B.d6_og == 0.0) && (A
                        [((proc_control_B.e_j_b + 1) * 13 + proc_control_B.e_j_b)
                        + 2] == 0.0)) {
              proc_control_B.blockFormat_o[proc_control_B.e_j_b] = 1;
              proc_control_B.e_j_b++;
            } else {
              proc_control_B.blockFormat_o[proc_control_B.e_j_b] = 0;
              proc_control_B.e_j_b++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat_o[11] = 2;
          } else {
            switch (proc_control_B.blockFormat_o[10]) {
             case 0:
              proc_control_B.blockFormat_o[11] = 1;
              break;

             case 1:
              proc_control_B.blockFormat_o[11] = 1;
              break;
            }
          }
        }

        proc_contro_padeApproximation_b(A, proc_control_B.A2_p,
          proc_control_B.A4_p, proc_control_B.A6_a, proc_control_B.b_s_f, F);
        if (recomputeDiags) {
          proc_contr_recomputeBlockDiag_a(A, F, proc_control_B.blockFormat_o);
        }

        proc_control_B.b_s_f = static_cast<int32_T>(proc_control_B.exptj_p);
        for (proc_control_B.e_j_b = 0; proc_control_B.e_j_b <
             proc_control_B.b_s_f; proc_control_B.e_j_b++) {
          for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 13;
               proc_control_B.e_i_g++) {
            proc_control_B.i10 = 0;
            for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                 proc_control_B.i8++) {
              proc_control_B.exptj_p = 0.0;
              proc_control_B.i9 = 0;
              for (proc_control_B.F_tmp = 0; proc_control_B.F_tmp < 13;
                   proc_control_B.F_tmp++) {
                proc_control_B.exptj_p += F[proc_control_B.i9 +
                  proc_control_B.e_i_g] * F[proc_control_B.F_tmp +
                  proc_control_B.i10];
                proc_control_B.i9 += 13;
              }

              proc_control_B.A4_p[proc_control_B.i10 + proc_control_B.e_i_g] =
                proc_control_B.exptj_p;
              proc_control_B.i10 += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.A4_p[0], 169U * sizeof(real_T));
          if (recomputeDiags) {
            for (proc_control_B.e_i_g = 0; proc_control_B.e_i_g < 169;
                 proc_control_B.e_i_g++) {
              A[proc_control_B.e_i_g] *= 2.0;
            }

            proc_contr_recomputeBlockDiag_a(A, F, proc_control_B.blockFormat_o);
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
void proc_control::proc_control_mldivide_jo(const real_T A[36], real_T B[36])
{
  int32_T b_ix;
  int32_T e;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  int8_T ipiv[6];
  std::memcpy(&proc_control_B.b_A_d[0], &A[0], 36U * sizeof(real_T));
  for (ijA = 0; ijA < 6; ijA++) {
    ipiv[ijA] = static_cast<int8_T>(ijA + 1);
  }

  for (int32_T b_j{0}; b_j < 5; b_j++) {
    jj = b_j * 7;
    iy = 6 - b_j;
    b_ix = 0;
    ix = jj;
    proc_control_B.smax_d = std::abs(proc_control_B.b_A_d[jj]);
    for (int32_T c_k{2}; c_k <= iy; c_k++) {
      ix++;
      proc_control_B.s_b4 = std::abs(proc_control_B.b_A_d[ix]);
      if (proc_control_B.s_b4 > proc_control_B.smax_d) {
        b_ix = c_k - 1;
        proc_control_B.smax_d = proc_control_B.s_b4;
      }
    }

    if (proc_control_B.b_A_d[jj + b_ix] != 0.0) {
      if (b_ix != 0) {
        iy = b_j + b_ix;
        ipiv[b_j] = static_cast<int8_T>(iy + 1);
        for (ix = 0; ix < 6; ix++) {
          b_ix = ix * 6 + b_j;
          proc_control_B.smax_d = proc_control_B.b_A_d[b_ix];
          proc_control_B.b_A_d[b_ix] = proc_control_B.b_A_d[iy];
          proc_control_B.b_A_d[iy] = proc_control_B.smax_d;
          iy += 6;
        }
      }

      iy = (jj - b_j) + 6;
      for (b_ix = jj + 2; b_ix <= iy; b_ix++) {
        proc_control_B.b_A_d[b_ix - 1] /= proc_control_B.b_A_d[jj];
      }
    }

    iy = jj + 6;
    b_ix = jj + 8;
    ix = 4 - b_j;
    for (int32_T c_k{0}; c_k <= ix; c_k++) {
      proc_control_B.smax_d = proc_control_B.b_A_d[iy];
      if (proc_control_B.b_A_d[iy] != 0.0) {
        e = (b_ix - b_j) + 4;
        for (ijA = b_ix; ijA <= e; ijA++) {
          proc_control_B.b_A_d[ijA - 1] += proc_control_B.b_A_d[((jj + ijA) -
            b_ix) + 1] * -proc_control_B.smax_d;
        }
      }

      iy += 6;
      b_ix += 6;
    }
  }

  for (int32_T b_j{0}; b_j < 5; b_j++) {
    int8_T ipiv_0;
    ipiv_0 = ipiv[b_j];
    if (b_j + 1 != ipiv_0) {
      for (iy = 0; iy < 6; iy++) {
        b_ix = 6 * iy + b_j;
        proc_control_B.smax_d = B[b_ix];
        ijA = (6 * iy + ipiv_0) - 1;
        B[b_ix] = B[ijA];
        B[ijA] = proc_control_B.smax_d;
      }
    }
  }

  for (int32_T b_j{0}; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 0; iy < 6; iy++) {
      b_ix = 6 * iy;
      ijA = iy + jj;
      if (B[ijA] != 0.0) {
        for (ix = iy + 2; ix < 7; ix++) {
          e = (ix + jj) - 1;
          B[e] -= proc_control_B.b_A_d[(ix + b_ix) - 1] * B[ijA];
        }
      }
    }
  }

  for (int32_T b_j{0}; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 5; iy >= 0; iy--) {
      b_ix = 6 * iy;
      ijA = iy + jj;
      proc_control_B.smax_d = B[ijA];
      if (proc_control_B.smax_d != 0.0) {
        B[ijA] = proc_control_B.smax_d / proc_control_B.b_A_d[iy + b_ix];
        for (int32_T c_k{0}; c_k < iy; c_k++) {
          e = c_k + jj;
          B[e] -= proc_control_B.b_A_d[c_k + b_ix] * B[ijA];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_AUV8QuatSimFcn(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  proc_control_B.t8_n = in1[4] * in1[4];
  proc_control_B.t9_i = in1[5] * in1[5];
  proc_control_B.t11_e = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp = in1[4] * in1[6];
  proc_control_B.t12_e = proc_control_B.t12_tmp * 2.0;
  proc_control_B.t13_tmp = in1[5] * in1[6];
  proc_control_B.t13_b = proc_control_B.t13_tmp * 2.0;
  proc_control_B.t14_tmp = in1[3] * in1[4];
  proc_control_B.t14_i = proc_control_B.t14_tmp * 2.0;
  proc_control_B.t15_tmp = in1[3] * in1[5];
  proc_control_B.t15_k = proc_control_B.t15_tmp * 2.0;
  proc_control_B.t16_d = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_ke = in1[11] / 500.0;
  proc_control_B.t29_a = in1[10] / 1000.0;
  proc_control_B.t31_i = in1[12] * 0.018;
  proc_control_B.t50_b = in1[7] * 32.4648;
  proc_control_B.t53 = in1[8] * 43.6156;
  proc_control_B.t54 = in1[9] * 46.7695;
  proc_control_B.t17_e = proc_control_B.t8_n * 2.0;
  proc_control_B.t18_l = proc_control_B.t9_i * 2.0;
  proc_control_B.t19_i = in1[6] * in1[6] * 2.0;
  proc_control_B.t57_b = proc_control_B.t25_ke + proc_control_B.t31_i;
  proc_control_B.t25_ke += proc_control_B.t29_a;
  proc_control_B.t29_a += proc_control_B.t31_i;
  proc_control_B.t31_i = in1[11] * 0.558 + proc_control_B.t50_b;
  proc_control_B.t64 = in1[10] * 0.062 + proc_control_B.t54;
  proc_control_B.t65_e = in1[12] * 0.031 + proc_control_B.t53;
  proc_control_B.t68_b = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t50_b = in1[12] * 0.062 - proc_control_B.t50_b;
  proc_control_B.t53 = in1[10] * 0.558 - proc_control_B.t53;
  proc_control_B.t54 = in1[11] * 0.031 - proc_control_B.t54;
  proc_control_B.t69 = (in1[10] / 250.0 - in1[11] / 1000.0) + in1[12] * 1.8864;
  proc_control_B.t70_i = (in1[10] / 125.0 - in1[12] / 1000.0) + in1[11] * 1.7228;
  out1[0] = (((proc_control_B.t18_l + proc_control_B.t19_i) - 1.0) * -in1[7] +
             (proc_control_B.t12_e + proc_control_B.t15_k) * in1[9]) +
    (proc_control_B.t11_e - proc_control_B.t16_d) * in1[8];
  out1[1] = ((proc_control_B.t11_e + proc_control_B.t16_d) * in1[7] -
             ((proc_control_B.t17_e + proc_control_B.t19_i) - 1.0) * in1[8]) +
    (proc_control_B.t13_b - proc_control_B.t14_i) * in1[9];
  out1[2] = ((proc_control_B.t13_b + proc_control_B.t14_i) * in1[8] -
             ((proc_control_B.t17_e + proc_control_B.t18_l) - 1.0) * in1[9]) +
    (proc_control_B.t12_e - proc_control_B.t15_k) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_e = in1[10] * proc_control_B.t57_b;
  proc_control_B.t12_e = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t13_b = in1[10] * proc_control_B.t64;
  proc_control_B.t14_i = in1[10] * proc_control_B.t53;
  proc_control_B.t15_k = in1[10] * proc_control_B.t69;
  proc_control_B.t16_d = in1[10] * proc_control_B.t70_i;
  proc_control_B.t17_e = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_l = in1[11] * proc_control_B.t29_a;
  proc_control_B.t19_i = in1[11] * proc_control_B.t31_i;
  proc_control_B.out1_tmp_m1 = in1[11] * proc_control_B.t54;
  proc_control_B.out1_tmp_l4 = in1[11] * proc_control_B.t68_b;
  proc_control_B.t69 *= in1[11];
  proc_control_B.out1_tmp_ool = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_nm1 = in1[12] * proc_control_B.t25_ke;
  proc_control_B.out1_tmp_in = in1[12] * proc_control_B.t50_b;
  proc_control_B.out1_tmp_or = in1[12] * proc_control_B.t65_e;
  proc_control_B.t68_b *= in1[12];
  proc_control_B.t70_i *= in1[12];
  proc_control_B.out1_tmp_mre = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t57_b *= in1[7];
  proc_control_B.t65_e *= in1[7];
  proc_control_B.t54 *= in1[7];
  proc_control_B.out1_tmp_iwt = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t29_a *= in1[8];
  proc_control_B.t50_b *= in1[8];
  proc_control_B.t64 *= in1[8];
  out1_tmp = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_B.t25_ke *= in1[9];
  proc_control_B.t31_i *= in1[9];
  proc_control_B.t53 *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_B.t8_n * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_B.t9_i * -0.0063195296824236141) + in2[1] *
                       1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - proc_control_B.t12_tmp * 0.4138016519122657)) +
                    ((proc_control_B.t13_tmp * -0.0013017970932508 -
                      proc_control_B.t14_tmp * 0.0013017970932508) +
                     proc_control_B.t15_tmp * 0.4138016519122657)) +
                   (((proc_control_B.t11_e * -0.96028628902704993 -
                      proc_control_B.t12_e * 0.0001303522588356414) +
                     proc_control_B.t13_b * 9.4803055144857715E-7) -
                    proc_control_B.t14_i * 6.8231348244175949E-6)) +
                  (((proc_control_B.t15_k * -0.010033314971702871 -
                     proc_control_B.t16_d * 0.0010125044874363649) +
                    proc_control_B.t17_e * 0.010033314971702871) -
                   proc_control_B.t18_l * 2.9388947094905889E-5)) +
                 (((proc_control_B.t19_i * -6.8231348244175949E-6 +
                    proc_control_B.out1_tmp_m1 * 0.030976977065388711) +
                   proc_control_B.out1_tmp_l4 * 0.0010125044874363649) -
                  proc_control_B.t69 * 0.0001303522588356414)) +
                (((proc_control_B.out1_tmp_ool * -0.0010125044874363649 +
                   proc_control_B.out1_tmp_nm1 * 0.0002115171795569455) +
                  proc_control_B.out1_tmp_in * 9.4803055144857715E-7) +
                 proc_control_B.out1_tmp_or * 0.030976977065388711)) +
               (((proc_control_B.t68_b * 0.010033314971702871 +
                  proc_control_B.t70_i * 0.0001303522588356414) -
                 proc_control_B.out1_tmp_mre * 0.030976977065388711) +
                proc_control_B.t57_b * 0.0040409200239048832)) +
              (((proc_control_B.t65_e * -0.0010125044874363649 +
                 proc_control_B.t54 * 0.010033314971702871) -
                proc_control_B.out1_tmp_iwt * 9.4803055144857715E-7) -
               proc_control_B.t29_a * 0.311032764122789)) +
             (((proc_control_B.t50_b * -0.0010125044874363649 -
                proc_control_B.t64 * 0.0001303522588356414) + out1_tmp *
               6.8231348244175949E-6) + proc_control_B.t25_ke *
              0.031387639110527318)) + ((proc_control_B.t31_i *
    0.010033314971702871 - proc_control_B.t53 * 0.0001303522588356414) +
    0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_B.t8_n * 0.02693023120923067)) +
                      ((proc_control_B.t9_i * -0.02693023120923067 - in2[0] *
                        1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_B.t12_tmp * 0.00099202109956931486)) +
                    ((proc_control_B.t13_tmp * -0.51979016069898065 -
                      proc_control_B.t14_tmp * 0.51979016069898065) +
                     proc_control_B.t15_tmp * 0.00099202109956931486)) +
                   (((proc_control_B.t11_e * -2.9388947094905889E-5 -
                      proc_control_B.t12_e * 0.021882274381510681) +
                     proc_control_B.t13_b * 0.02320783323245932) -
                    proc_control_B.t14_i * 2.9076309096921531E-5)) +
                  (((proc_control_B.t15_k * -0.0001026911824132076 +
                     proc_control_B.t16_d * 0.00042780737967584029) +
                    proc_control_B.t17_e * 0.0001026911824132076) -
                   proc_control_B.t18_l * 0.71944283020623911)) +
                 (((proc_control_B.t19_i * -2.9076309096921531E-5 +
                    proc_control_B.out1_tmp_m1 * 9.4803055144857715E-7) -
                   proc_control_B.out1_tmp_l4 * 0.00042780737967584029) -
                  proc_control_B.t69 * 0.021882274381510681)) +
                (((proc_control_B.out1_tmp_ool * 0.00042780737967584029 +
                   proc_control_B.out1_tmp_nm1 * 0.00090136558200456737) +
                  proc_control_B.out1_tmp_in * 0.02320783323245932) +
                 proc_control_B.out1_tmp_or * 9.4803055144857715E-7)) +
               (((proc_control_B.t68_b * 0.0001026911824132076 +
                  proc_control_B.t70_i * 0.021882274381510681) -
                 proc_control_B.out1_tmp_mre * 9.4803055144857715E-7) +
                proc_control_B.t57_b * 0.678350505826831)) +
              (((proc_control_B.t65_e * 0.00042780737967584029 +
                 proc_control_B.t54 * 0.0001026911824132076) -
                proc_control_B.out1_tmp_iwt * 0.02320783323245932) -
               proc_control_B.t29_a * 0.0031834266548094372)) +
             (((proc_control_B.t50_b * 0.00042780737967584029 -
                proc_control_B.t64 * 0.021882274381510681) + out1_tmp *
               2.9076309096921531E-5) - proc_control_B.t25_ke *
              0.013262028769951049)) + ((proc_control_B.t31_i *
    0.0001026911824132076 - proc_control_B.t53 * 0.021882274381510681) +
    0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_B.t8_n * 0.18635748921352191)) +
                      ((proc_control_B.t9_i * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_B.t12_tmp * 0.0058758415205803329)) +
                    ((proc_control_B.t13_tmp * 0.033540735888224739 +
                      proc_control_B.t14_tmp * 0.033540735888224739) -
                     proc_control_B.t15_tmp * 0.0058758415205803329)) +
                   (((proc_control_B.t11_e * 0.0002115171795569455 +
                      proc_control_B.t12_e * 0.002272431716587712) -
                     proc_control_B.t13_b * 2.9076309096921531E-5) +
                    proc_control_B.t14_i * 0.021384731826702759)) +
                  (((proc_control_B.t15_k * 0.00039756137245743289 -
                     proc_control_B.t16_d * 5.2828771531483014E-6) -
                    proc_control_B.t17_e * 0.00039756137245743289) +
                   proc_control_B.t18_l * 0.00090136558200456737)) +
                 (((proc_control_B.t19_i * 0.021384731826702759 -
                    proc_control_B.out1_tmp_m1 * 6.8231348244175949E-6) +
                   proc_control_B.out1_tmp_l4 * 5.2828771531483014E-6) +
                  proc_control_B.t69 * 0.002272431716587712)) +
                (((proc_control_B.out1_tmp_ool * -5.2828771531483014E-6 -
                   proc_control_B.out1_tmp_nm1 * 0.66292668662778553) -
                  proc_control_B.out1_tmp_in * 2.9076309096921531E-5) -
                 proc_control_B.out1_tmp_or * 6.8231348244175949E-6)) +
               (((proc_control_B.t68_b * -0.00039756137245743289 -
                  proc_control_B.t70_i * 0.002272431716587712) +
                 proc_control_B.out1_tmp_mre * 6.8231348244175949E-6) -
                proc_control_B.t57_b * 0.070445383214219059)) +
              (((proc_control_B.t65_e * -5.2828771531483014E-6 -
                 proc_control_B.t54 * 0.00039756137245743289) +
                proc_control_B.out1_tmp_iwt * 2.9076309096921531E-5) +
               proc_control_B.t29_a * 0.01232440254618042)) +
             (((proc_control_B.t50_b * -5.2828771531483014E-6 +
                proc_control_B.t64 * 0.002272431716587712) - out1_tmp *
               0.021384731826702759) + proc_control_B.t25_ke *
              0.00016376919174759729)) + ((proc_control_B.t31_i *
    -0.00039756137245743289 + proc_control_B.t53 * 0.002272431716587712) -
    0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_B.t8_n * 2.1047070084068991)) + ((in2[0]
    * 1.4142135623730951 * 0.043593198825375247 + proc_control_B.t9_i *
    -2.1047070084068991) - in2[1] * 1.4142135623730951 * 0.043051831063235027))
                        + ((in2[2] * 1.4142135623730951 * 0.043593198825375247 -
    in2[3] * 1.4142135623730951 * 0.043976565543532631) - proc_control_B.t12_tmp
    * 0.1138522338822895)) + ((proc_control_B.t13_tmp * -25.242114556122988 -
    proc_control_B.t14_tmp * 25.242114556122988) + proc_control_B.t15_tmp *
    0.1138522338822895)) + ((proc_control_B.t11_e * -0.0040409200239048832 -
    proc_control_B.t12_e * 1.71018810547529) + proc_control_B.t13_b *
    0.021882274381510681)) + ((proc_control_B.t14_i * -0.002272431716587712 -
    proc_control_B.t15_k * 0.0080268590155159435) + proc_control_B.t16_d *
    0.0039859244840414)) + ((proc_control_B.t17_e * 0.0080268590155159435 -
    proc_control_B.t18_l * 0.678350505826831) - proc_control_B.t19_i *
    0.002272431716587712)) + ((proc_control_B.out1_tmp_m1 *
    0.0001303522588356414 - proc_control_B.out1_tmp_l4 * 0.0039859244840414) -
    proc_control_B.t69 * 1.71018810547529)) + (((proc_control_B.out1_tmp_ool *
    0.0039859244840414 + proc_control_B.out1_tmp_nm1 * 0.070445383214219059) +
    proc_control_B.out1_tmp_in * 0.021882274381510681) +
    proc_control_B.out1_tmp_or * 0.0001303522588356414)) +
                 ((proc_control_B.t68_b * 0.0080268590155159435 +
                   proc_control_B.t70_i * 1.71018810547529) -
                  proc_control_B.out1_tmp_mre * 0.0001303522588356414)) +
                ((proc_control_B.t57_b * 53.015831269733987 +
                  proc_control_B.t65_e * 0.0039859244840414) +
                 proc_control_B.t54 * 0.0080268590155159435)) +
               ((proc_control_B.out1_tmp_iwt * -0.021882274381510681 -
                 proc_control_B.t29_a * 0.2488326294809943) +
                proc_control_B.t50_b * 0.0039859244840414)) +
              ((proc_control_B.t64 * -1.71018810547529 + out1_tmp *
                0.002272431716587712) - proc_control_B.t25_ke *
               0.1235636590052834)) + ((proc_control_B.t31_i *
    0.0080268590155159435 - proc_control_B.t53 * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_B.t8_n * 0.36821797582524962)) + ((in2[0]
    * 1.4142135623730951 * 0.013457654526727991 + proc_control_B.t9_i *
    0.36821797582524962) + in2[1] * 1.4142135623730951 * 0.013869054980635681))
                       + ((in2[2] * 1.4142135623730951 * 0.013457654526727991 +
    in2[3] * 1.4142135623730951 * 0.01386868232130781) + proc_control_B.t12_tmp *
    8.6371397256799973)) + ((proc_control_B.t13_tmp * 0.1184627304742461 +
    proc_control_B.t14_tmp * 0.1184627304742461) - proc_control_B.t15_tmp *
    8.6371397256799973)) + (((proc_control_B.t11_e * 0.311032764122789 +
    proc_control_B.t12_e * 0.0080268590155159435) - proc_control_B.t13_b *
    0.0001026911824132076) + proc_control_B.t14_i * 0.00039756137245743289)) +
                    ((proc_control_B.t15_k * 0.58374455968341665 +
                      proc_control_B.t16_d * 1.606290206365557E-6) -
                     proc_control_B.t17_e * 0.58374455968341665)) +
                   (((proc_control_B.t18_l * 0.0031834266548094372 +
                      proc_control_B.t19_i * 0.00039756137245743289) -
                     proc_control_B.out1_tmp_m1 * 0.010033314971702871) -
                    proc_control_B.out1_tmp_l4 * 1.606290206365557E-6)) +
                  (((proc_control_B.t69 * 0.0080268590155159435 +
                     proc_control_B.out1_tmp_ool * 1.606290206365557E-6) -
                    proc_control_B.out1_tmp_nm1 * 0.01232440254618042) -
                   proc_control_B.out1_tmp_in * 0.0001026911824132076)) +
                 ((proc_control_B.out1_tmp_or * -0.010033314971702871 -
                   proc_control_B.t68_b * 0.58374455968341665) -
                  proc_control_B.t70_i * 0.0080268590155159435)) +
                ((proc_control_B.out1_tmp_mre * 0.010033314971702871 -
                  proc_control_B.t57_b * 0.2488326294809943) +
                 proc_control_B.t65_e * 1.606290206365557E-6)) +
               ((proc_control_B.t54 * -0.58374455968341665 +
                 proc_control_B.out1_tmp_iwt * 0.0001026911824132076) +
                proc_control_B.t29_a * 18.096081350185919)) +
              (((proc_control_B.t50_b * 1.606290206365557E-6 +
                 proc_control_B.t64 * 0.0080268590155159435) - out1_tmp *
                0.00039756137245743289) - proc_control_B.t25_ke *
               4.9794996397332282E-5)) + ((proc_control_B.t31_i *
    -0.58374455968341665 + proc_control_B.t53 * 0.0080268590155159435) -
    0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_B.t8_n * 0.0048929560732764686)) +
                        ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 +
    proc_control_B.t9_i * 0.0048929560732764686) - in2[1] * 1.4142135623730951 *
    0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_B.t12_tmp * 0.65361132374006825)) +
                      ((proc_control_B.t13_tmp * 0.38451002147839958 +
                        proc_control_B.t14_tmp * 0.38451002147839958) +
                       proc_control_B.t15_tmp * 0.65361132374006825)) +
                     (((proc_control_B.t11_e * -0.031387639110527318 +
                        proc_control_B.t12_e * 0.0039859244840414) -
                       proc_control_B.t13_b * 0.00042780737967584029) +
                      proc_control_B.t14_i * 5.2828771531483014E-6)) +
                    (((proc_control_B.t15_k * -1.606290206365557E-6 -
                       proc_control_B.t16_d * 0.53015902215788635) +
                      proc_control_B.t17_e * 1.606290206365557E-6) +
                     proc_control_B.t18_l * 0.013262028769951049)) +
                   (((proc_control_B.t19_i * 5.2828771531483014E-6 +
                      proc_control_B.out1_tmp_m1 * 0.0010125044874363649) +
                     proc_control_B.out1_tmp_l4 * 0.53015902215788635) +
                    proc_control_B.t69 * 0.0039859244840414)) +
                  ((proc_control_B.out1_tmp_ool * -0.53015902215788635 -
                    proc_control_B.out1_tmp_nm1 * 0.00016376919174759729) -
                   proc_control_B.out1_tmp_in * 0.00042780737967584029)) +
                 (((proc_control_B.out1_tmp_or * 0.0010125044874363649 +
                    proc_control_B.t68_b * 1.606290206365557E-6) -
                   proc_control_B.t70_i * 0.0039859244840414) -
                  proc_control_B.out1_tmp_mre * 0.0010125044874363649)) +
                ((proc_control_B.t57_b * -0.1235636590052834 -
                  proc_control_B.t65_e * 0.53015902215788635) +
                 proc_control_B.t54 * 1.606290206365557E-6)) +
               ((proc_control_B.out1_tmp_iwt * 0.00042780737967584029 -
                 proc_control_B.t29_a * 4.9794996397332282E-5) -
                proc_control_B.t50_b * 0.53015902215788635)) +
              (((proc_control_B.t64 * 0.0039859244840414 - out1_tmp *
                 5.2828771531483014E-6) + proc_control_B.t25_ke *
                16.434929686894481) + proc_control_B.t31_i *
               1.606290206365557E-6)) + (proc_control_B.t53 * 0.0039859244840414
    - 0.0024464780366382352);
}

// Function for MATLAB Function: '<S141>/MATLAB Function'
real_T proc_control::proc_control_norm_nti(const real_T x[4])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;
  absxk = std::abs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = std::abs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = std::abs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = std::abs(x[3]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * std::sqrt(y);
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_mpc_plantupdate(const real_T a[169], real_T b
  [104], const real_T c[169], real_T b_A[441], real_T b_B[630], real_T b_C[273],
  const real_T b_D[390], const int32_T b_mvindex[8], const int32_T b_myindex[13],
  const real_T b_Uscale[8], const real_T b_Yscale[13], real_T Bu[168], real_T
  Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13], real_T QQ[441], real_T
  RR[169], real_T NN[273])
{
  int32_T b_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (int32_T i{0}; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i{0}; i < 13; i++) {
    for (b_tmp = 0; b_tmp < 13; b_tmp++) {
      i_2 = b_tmp + i_1;
      b_C[i_2] = c[i_2] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[i_2];
    }

    i_1 += 13;
    i_0 += 21;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 21 * i_1] = b[(b_mvindex[i_1] - 1) * 13 + i_0];
    }

    std::memcpy(&Bu[i_1 * 21], &b_B[i_1 * 21], 21U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    Bv[i_1] = b_B[i_1 + 168];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[b_myindex[i_1] + 103];
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    proc_control_B.UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_B.UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    proc_control_B.UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 21; i_0++) {
      proc_control_B.b_tmp[i_0 + 34 * i_1] = b_B[(proc_control_B.UnknownIn[i_1]
        - 1) * 21 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.b_tmp[(i_0 + 34 * i_1) + 21] = b_D
        [((proc_control_B.UnknownIn[i_1] - 1) * 13 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 34; i_1++) {
    i_0 = 0;
    for (int32_T i{0}; i < 34; i++) {
      real_T CovMat;
      CovMat = 0.0;
      b_tmp = 0;
      for (i_2 = 0; i_2 < 29; i_2++) {
        CovMat += proc_control_B.b_tmp[b_tmp + i_1] * proc_control_B.b_tmp[b_tmp
          + i];
        b_tmp += 34;
      }

      proc_control_B.CovMat[i_0 + i_1] = CovMat;
      i_0 += 34;
    }
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i{0}; i < 21; i++) {
    std::memcpy(&QQ[i_1], &proc_control_B.CovMat[i_0], 21U * sizeof(real_T));
    i_1 += 21;
    i_0 += 34;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    std::memcpy(&RR[i_1 * 13], &proc_control_B.CovMat[i_1 * 34 + 735], 13U *
                sizeof(real_T));
    std::memcpy(&NN[i_1 * 21], &proc_control_B.CovMat[i_1 * 34 + 714], 21U *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_cont_mpc_constraintcoefLTV(const real_T b_A[4851], const
  real_T Bu[1848], const real_T Bv[231], const real_T b_C[3003], const real_T
  Dv[143], const real_T b_Jm[640], real_T b_SuJm[1040], real_T b_Sx[2730],
  real_T b_Su1[1040], real_T b_Hv[1430])
{
  real_T b_C_0;
  int32_T b_Su1_tmp;
  int32_T i_1;
  int32_T i_2;
  int32_T i_3;
  int32_T j;
  for (i_2 = 0; i_2 < 13; i_2++) {
    b_C_0 = 0.0;
    i_3 = 0;
    for (i_1 = 0; i_1 < 21; i_1++) {
      b_C_0 += b_C[(i_3 + i_2) + 273] * Bv[i_1];
      i_3 += 13;
    }

    b_Hv[i_2] = b_C_0;
    b_Hv[i_2 + 130] = Dv[i_2 + 13];
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 9; i_3++) {
    std::memset(&b_Hv[i_2 + 260], 0, 13U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 11; i_3++) {
    std::memset(&b_Hv[i_2 + 13], 0, 117U * sizeof(real_T));
    i_2 += 130;
  }

  for (i_2 = 0; i_2 < 21; i_2++) {
    for (i_3 = 0; i_3 < 13; i_3++) {
      b_C_0 = 0.0;
      for (i_1 = 0; i_1 < 21; i_1++) {
        b_C_0 += b_C[(13 * i_1 + i_3) + 273] * b_A[21 * i_2 + i_1];
      }

      b_Sx[i_3 + 130 * i_2] = b_C_0;
    }

    std::memset(&b_Sx[i_2 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (i_2 = 0; i_2 < 8; i_2++) {
    for (i_3 = 0; i_3 < 13; i_3++) {
      b_C_0 = 0.0;
      for (i_1 = 0; i_1 < 21; i_1++) {
        b_C_0 += b_C[(13 * i_1 + i_3) + 273] * Bu[21 * i_2 + i_1];
      }

      b_Su1[i_3 + 130 * i_2] = b_C_0;
    }

    std::memset(&b_Su1[i_2 * 130 + 13], 0, 117U * sizeof(real_T));
    std::memcpy(&proc_control_B.a[i_2 * 130], &b_Su1[i_2 * 130], 13U * sizeof
                (real_T));
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 72; i_3++) {
    std::memset(&proc_control_B.a[i_2 + 1040], 0, 13U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 80; i_3++) {
    std::memset(&proc_control_B.a[i_2 + 13], 0, 117U * sizeof(real_T));
    i_2 += 130;
  }

  std::memcpy(&proc_control_B.AA[0], &b_A[441], 441U * sizeof(real_T));
  std::memset(&proc_control_B.AA[441], 0, 3528U * sizeof(real_T));
  for (int32_T i{0}; i < 9; i++) {
    uint8_T i_0;
    uint8_T rows;
    i_0 = static_cast<uint8_T>(static_cast<uint32_T>(i + 1) * 13U + 1U);
    for (i_2 = 0; i_2 < 13; i_2++) {
      rows = static_cast<uint8_T>(static_cast<uint32_T>(i_2) + i_0);
      proc_control_B.rows_o[i_2] = rows;
      for (i_3 = 0; i_3 < 8; i_3++) {
        b_Su1_tmp = (130 * i_3 + rows) - 1;
        b_Su1[b_Su1_tmp] = 0.0;
        for (i_1 = 0; i_1 < 21; i_1++) {
          b_Su1[b_Su1_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) * 273] * Bu[(21 *
            i_3 + i_1) + (i + 1) * 168];
        }
      }
    }

    i_1 = (i + 1) << 3;
    for (i_2 = 0; i_2 < 8; i_2++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        rows = proc_control_B.rows_o[i_3];
        proc_control_B.a[(rows + 130 * (i_2 + i_1)) - 1] = b_Su1[(130 * i_2 +
          rows) - 1];
      }
    }

    for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
      j = i - b_Su1_tmp;
      std::memcpy(&proc_control_B.AA_p[0], &proc_control_B.AA[i * 441 +
                  b_Su1_tmp * -441], 441U * sizeof(real_T));
      for (i_2 = 0; i_2 < 13; i_2++) {
        for (i_3 = 0; i_3 < 21; i_3++) {
          b_C_0 = 0.0;
          for (i_1 = 0; i_1 < 21; i_1++) {
            b_C_0 += b_C[(13 * i_1 + i_2) + (i + 2) * 273] *
              proc_control_B.AA_p[21 * i_3 + i_1];
          }

          proc_control_B.b_C_i[i_2 + 13 * i_3] = b_C_0;
        }

        for (i_3 = 0; i_3 < 8; i_3++) {
          b_C_0 = 0.0;
          for (i_1 = 0; i_1 < 21; i_1++) {
            b_C_0 += Bu[(21 * i_3 + i_1) + 168 * j] * proc_control_B.b_C_i[13 *
              i_1 + i_2];
          }

          proc_control_B.b_Su1_o[i_2 + 13 * i_3] = b_Su1[(130 * i_3 +
            proc_control_B.rows_o[i_2]) - 1] + b_C_0;
        }
      }

      for (i_2 = 0; i_2 < 8; i_2++) {
        for (i_3 = 0; i_3 < 13; i_3++) {
          b_Su1[(proc_control_B.rows_o[i_3] + 130 * i_2) - 1] =
            proc_control_B.b_Su1_o[13 * i_2 + i_3];
        }
      }

      j <<= 3;
      for (i_2 = 0; i_2 < 8; i_2++) {
        for (i_3 = 0; i_3 < 13; i_3++) {
          rows = proc_control_B.rows_o[i_3];
          proc_control_B.a[(rows + 130 * (i_2 + j)) - 1] = b_Su1[(130 * i_2 +
            rows) - 1];
        }
      }
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      b_Hv[(proc_control_B.rows_o[i_2] + 130 * (i + 2)) - 1] = Dv[(i + 2) * 13 +
        i_2];
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      j = ((i + 1) * 130 + proc_control_B.rows_o[i_2]) - 1;
      b_Hv[j] = 0.0;
      for (i_3 = 0; i_3 < 21; i_3++) {
        b_Hv[j] += b_C[(13 * i_3 + i_2) + (i + 2) * 273] * Bv[(i + 1) * 21 + i_3];
      }
    }

    for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
      std::memcpy(&proc_control_B.AA_p[0], &proc_control_B.AA[b_Su1_tmp * 441],
                  441U * sizeof(real_T));
      for (i_2 = 0; i_2 < 13; i_2++) {
        j = (130 * b_Su1_tmp + proc_control_B.rows_o[i_2]) - 1;
        b_Hv[j] = 0.0;
        for (i_3 = 0; i_3 < 21; i_3++) {
          b_C_0 = 0.0;
          for (i_1 = 0; i_1 < 21; i_1++) {
            b_C_0 += b_C[(13 * i_1 + i_2) + (i + 2) * 273] *
              proc_control_B.AA_p[21 * i_3 + i_1];
          }

          b_Hv[j] += Bv[21 * b_Su1_tmp + i_3] * b_C_0;
        }
      }
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      for (i_3 = 0; i_3 < 21; i_3++) {
        b_C_0 = 0.0;
        for (i_1 = 0; i_1 < 21; i_1++) {
          b_C_0 += b_C[(13 * i_1 + i_2) + (i + 2) * 273] * proc_control_B.AA[21 *
            i_3 + i_1];
        }

        proc_control_B.b_C_i[i_2 + 13 * i_3] = b_C_0;
      }

      rows = proc_control_B.rows_o[i_2];
      for (i_3 = 0; i_3 < 21; i_3++) {
        b_Su1_tmp = (130 * i_3 + rows) - 1;
        b_Sx[b_Su1_tmp] = 0.0;
        for (i_1 = 0; i_1 < 21; i_1++) {
          b_Sx[b_Su1_tmp] += proc_control_B.b_C_i[13 * i_1 + i_2] * b_A[21 * i_3
            + i_1];
        }
      }
    }

    if (i + 2 < 10) {
      for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
        std::memcpy(&proc_control_B.AA_p[0], &proc_control_B.AA[b_Su1_tmp * 441],
                    441U * sizeof(real_T));
        j = b_Su1_tmp * 21;
        for (i_2 = 0; i_2 < 21; i_2++) {
          for (i_3 = 0; i_3 < 21; i_3++) {
            int32_T AA_tmp;
            AA_tmp = (i_3 + j) * 21 + i_2;
            proc_control_B.AA[AA_tmp] = 0.0;
            for (i_1 = 0; i_1 < 21; i_1++) {
              proc_control_B.AA[AA_tmp] += b_A[(21 * i_1 + i_2) + (i + 2) * 441]
                * proc_control_B.AA_p[21 * i_3 + i_1];
            }
          }
        }
      }

      std::memcpy(&proc_control_B.AA[i * 441 + 441], &b_A[i * 441 + 882], 441U *
                  sizeof(real_T));
    }
  }

  i_2 = 0;
  i_3 = 0;
  for (i_1 = 0; i_1 < 8; i_1++) {
    for (int32_T i{0}; i < 130; i++) {
      b_C_0 = 0.0;
      b_Su1_tmp = 0;
      for (j = 0; j < 80; j++) {
        b_C_0 += proc_control_B.a[b_Su1_tmp + i] * b_Jm[j + i_3];
        b_Su1_tmp += 130;
      }

      b_SuJm[i + i_2] = b_C_0;
    }

    i_2 += 130;
    i_3 += 80;
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf_f(real_T b_A[81])
{
  int32_T info;
  int32_T j;
  boolean_T exitg1;
  info = 0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j < 9)) {
    real_T c;
    int32_T idxAjj;
    idxAjj = j * 9 + j;
    proc_control_B.ssq_d = 0.0;
    if (j >= 1) {
      for (int32_T b_k{0}; b_k < j; b_k++) {
        c = b_A[b_k * 9 + j];
        proc_control_B.ssq_d += c * c;
      }
    }

    proc_control_B.ssq_d = b_A[idxAjj] - proc_control_B.ssq_d;
    if (proc_control_B.ssq_d > 0.0) {
      proc_control_B.ssq_d = std::sqrt(proc_control_B.ssq_d);
      b_A[idxAjj] = proc_control_B.ssq_d;
      if (j + 1 < 9) {
        int32_T jm1;
        if (j != 0) {
          int32_T b_iy;
          b_iy = ((j - 1) * 9 + j) + 2;
          for (int32_T b_k{j + 2}; b_k <= b_iy; b_k += 9) {
            int32_T d;
            jm1 = b_k - j;
            c = -b_A[div_nde_s32_floor(jm1 - 2, 9) * 9 + j];
            d = jm1 + 7;
            for (jm1 = b_k; jm1 <= d; jm1++) {
              int32_T tmp;
              tmp = ((idxAjj + jm1) - b_k) + 1;
              b_A[tmp] += b_A[jm1 - 1] * c;
            }
          }
        }

        proc_control_B.ssq_d = 1.0 / proc_control_B.ssq_d;
        jm1 = (idxAjj - j) + 9;
        for (int32_T b_k{idxAjj + 2}; b_k <= jm1; b_k++) {
          b_A[b_k - 1] *= proc_control_B.ssq_d;
        }
      }

      j++;
    } else {
      b_A[idxAjj] = proc_control_B.ssq_d;
      info = j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
real_T proc_control::proc_control_minimum_l(const real_T x[9])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  if (!std::isnan(x[0])) {
    idx = 1;
  } else {
    boolean_T exitg1;
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 10)) {
      if (!std::isnan(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    for (k = idx + 1; k < 10; k++) {
      real_T x_0;
      x_0 = x[k - 1];
      if (ex > x_0) {
        ex = x_0;
      }
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_trisolve_g(const real_T b_A[81], real_T b_B[81])
{
  for (int32_T j{0}; j < 9; j++) {
    int32_T jBcol;
    jBcol = 9 * j;
    for (int32_T b_k{0}; b_k < 9; b_k++) {
      real_T b_B_0;
      int32_T b_B_tmp;
      int32_T kAcol;
      kAcol = 9 * b_k;
      b_B_tmp = b_k + jBcol;
      b_B_0 = b_B[b_B_tmp];
      if (b_B_0 != 0.0) {
        b_B[b_B_tmp] = b_B_0 / b_A[b_k + kAcol];
        for (int32_T i{b_k + 2}; i < 10; i++) {
          int32_T tmp;
          tmp = (i + jBcol) - 1;
          b_B[tmp] -= b_A[(i + kAcol) - 1] * b_B[b_B_tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
real_T proc_control::proc_control_norm_n(const real_T x[9])
{
  real_T scale;
  real_T y;
  y = 0.0;
  scale = 3.3121686421112381E-170;
  for (int32_T k{0}; k < 9; k++) {
    real_T absxk;
    absxk = std::abs(x[k]);
    if (absxk > scale) {
      real_T t;
      t = scale / absxk;
      y = y * t * t + 1.0;
      scale = absxk;
    } else {
      real_T t;
      t = absxk / scale;
      y += t * t;
    }
  }

  return scale * std::sqrt(y);
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
real_T proc_control::proc_control_maximum(const real_T x[9])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  if (!std::isnan(x[0])) {
    idx = 1;
  } else {
    boolean_T exitg1;
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 10)) {
      if (!std::isnan(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    for (k = idx + 1; k < 10; k++) {
      real_T x_0;
      x_0 = x[k - 1];
      if (ex < x_0) {
        ex = x_0;
      }
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
real_T proc_control::proc_control_xnrm2_g(int32_T n, const real_T x[81], int32_T
  ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_b = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_j = std::abs(x[k - 1]);
        if (proc_control_B.absxk_j > proc_control_B.scale_b) {
          proc_control_B.t_e = proc_control_B.scale_b / proc_control_B.absxk_j;
          y = y * proc_control_B.t_e * proc_control_B.t_e + 1.0;
          proc_control_B.scale_b = proc_control_B.absxk_j;
        } else {
          proc_control_B.t_e = proc_control_B.absxk_j / proc_control_B.scale_b;
          y += proc_control_B.t_e * proc_control_B.t_e;
        }
      }

      y = proc_control_B.scale_b * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_xgemv_f(int32_T b_m, int32_T n, const real_T
  b_A[81], int32_T ia0, const real_T x[81], int32_T ix0, real_T y[9])
{
  if ((b_m != 0) && (n != 0)) {
    int32_T b;
    if (n - 1 >= 0) {
      std::memset(&y[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));
    }

    b = (n - 1) * 9 + ia0;
    for (int32_T b_iy{ia0}; b_iy <= b; b_iy += 9) {
      int32_T d;
      int32_T iyend;
      proc_control_B.c_e = 0.0;
      d = (b_iy + b_m) - 1;
      for (iyend = b_iy; iyend <= d; iyend++) {
        proc_control_B.c_e += x[((ix0 + iyend) - b_iy) - 1] * b_A[iyend - 1];
      }

      iyend = div_nde_s32_floor(b_iy - ia0, 9);
      y[iyend] += proc_control_B.c_e;
    }
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_xgerc_g(int32_T b_m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y[9], real_T b_A[81], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j{0}; j < n; j++) {
      proc_control_B.temp_m0 = y[j];
      if (proc_control_B.temp_m0 != 0.0) {
        int32_T b;
        proc_control_B.temp_m0 *= alpha1;
        b = b_m + jA;
        for (int32_T ijA{jA}; ijA < b; ijA++) {
          b_A[ijA - 1] += b_A[((ix0 + ijA) - jA) - 1] * proc_control_B.temp_m0;
        }
      }

      jA += 9;
    }
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_KWIKfactor_k(const real_T b_Ac[2034], const
  int32_T iC[226], int32_T nA, const real_T b_Linv[81], real_T b_D[81], real_T
  b_H[81], int32_T n, real_T RLinv[81], real_T *Status)
{
  int32_T b_coltop;
  int32_T b_lastv;
  int32_T b_lastv_0;
  int32_T coltop;
  int32_T exitg1;
  int32_T ii;
  int32_T knt;
  boolean_T exitg2;
  *Status = 1.0;
  std::memset(&RLinv[0], 0, 81U * sizeof(real_T));
  for (proc_control_B.k_i = 0; proc_control_B.k_i < nA; proc_control_B.k_i++) {
    ii = iC[proc_control_B.k_i];
    for (b_coltop = 0; b_coltop < 9; b_coltop++) {
      proc_control_B.RLinv_o = 0.0;
      for (b_lastv = 0; b_lastv < 9; b_lastv++) {
        proc_control_B.RLinv_o += b_Ac[(226 * b_lastv + ii) - 1] * b_Linv[9 *
          b_lastv + b_coltop];
      }

      RLinv[b_coltop + 9 * proc_control_B.k_i] = proc_control_B.RLinv_o;
    }
  }

  std::memcpy(&proc_control_B.b_A_i[0], &RLinv[0], 81U * sizeof(real_T));
  std::memset(&proc_control_B.tau_j[0], 0, 9U * sizeof(real_T));
  std::memset(&proc_control_B.work_p[0], 0, 9U * sizeof(real_T));
  for (proc_control_B.k_i = 0; proc_control_B.k_i < 9; proc_control_B.k_i++) {
    ii = proc_control_B.k_i * 9 + proc_control_B.k_i;
    if (proc_control_B.k_i + 1 < 9) {
      proc_control_B.RLinv_o = proc_control_B.b_A_i[ii];
      b_lastv = ii + 2;
      proc_control_B.tau_j[proc_control_B.k_i] = 0.0;
      proc_control_B.beta1 = proc_control_xnrm2_g(8 - proc_control_B.k_i,
        proc_control_B.b_A_i, ii + 2);
      if (proc_control_B.beta1 != 0.0) {
        proc_control_B.b_A_j = proc_control_B.b_A_i[ii];
        proc_control_B.beta1 = proc_control_rt_hypotd_snf(proc_control_B.b_A_j,
          proc_control_B.beta1);
        if (proc_control_B.b_A_j >= 0.0) {
          proc_control_B.beta1 = -proc_control_B.beta1;
        }

        if (std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) {
          knt = 0;
          coltop = (ii - proc_control_B.k_i) + 9;
          do {
            knt++;
            for (b_coltop = b_lastv; b_coltop <= coltop; b_coltop++) {
              proc_control_B.b_A_i[b_coltop - 1] *= 9.9792015476736E+291;
            }

            proc_control_B.beta1 *= 9.9792015476736E+291;
            proc_control_B.RLinv_o *= 9.9792015476736E+291;
          } while ((std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) &&
                   (knt < 20));

          proc_control_B.beta1 = proc_control_rt_hypotd_snf
            (proc_control_B.RLinv_o, proc_control_xnrm2_g(8 - proc_control_B.k_i,
              proc_control_B.b_A_i, ii + 2));
          if (proc_control_B.RLinv_o >= 0.0) {
            proc_control_B.beta1 = -proc_control_B.beta1;
          }

          proc_control_B.tau_j[proc_control_B.k_i] = (proc_control_B.beta1 -
            proc_control_B.RLinv_o) / proc_control_B.beta1;
          proc_control_B.RLinv_o = 1.0 / (proc_control_B.RLinv_o -
            proc_control_B.beta1);
          for (b_coltop = b_lastv; b_coltop <= coltop; b_coltop++) {
            proc_control_B.b_A_i[b_coltop - 1] *= proc_control_B.RLinv_o;
          }

          for (b_lastv = 0; b_lastv < knt; b_lastv++) {
            proc_control_B.beta1 *= 1.0020841800044864E-292;
          }

          proc_control_B.RLinv_o = proc_control_B.beta1;
        } else {
          proc_control_B.tau_j[proc_control_B.k_i] = (proc_control_B.beta1 -
            proc_control_B.b_A_j) / proc_control_B.beta1;
          proc_control_B.RLinv_o = 1.0 / (proc_control_B.b_A_j -
            proc_control_B.beta1);
          b_coltop = (ii - proc_control_B.k_i) + 9;
          for (knt = b_lastv; knt <= b_coltop; knt++) {
            proc_control_B.b_A_i[knt - 1] *= proc_control_B.RLinv_o;
          }

          proc_control_B.RLinv_o = proc_control_B.beta1;
        }
      }

      proc_control_B.b_A_i[ii] = 1.0;
      if (proc_control_B.tau_j[proc_control_B.k_i] != 0.0) {
        b_lastv = 9 - proc_control_B.k_i;
        knt = (ii - proc_control_B.k_i) + 8;
        while ((b_lastv > 0) && (proc_control_B.b_A_i[knt] == 0.0)) {
          b_lastv--;
          knt--;
        }

        knt = 8 - proc_control_B.k_i;
        exitg2 = false;
        while ((!exitg2) && (knt > 0)) {
          b_coltop = ((knt - 1) * 9 + ii) + 9;
          coltop = b_coltop;
          do {
            exitg1 = 0;
            if (coltop + 1 <= b_coltop + b_lastv) {
              if (proc_control_B.b_A_i[coltop] != 0.0) {
                exitg1 = 1;
              } else {
                coltop++;
              }
            } else {
              knt--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        b_lastv = 0;
        knt = 0;
      }

      if (b_lastv > 0) {
        proc_control_xgemv_f(b_lastv, knt, proc_control_B.b_A_i, ii + 10,
                             proc_control_B.b_A_i, ii + 1, proc_control_B.work_p);
        proc_control_xgerc_g(b_lastv, knt,
                             -proc_control_B.tau_j[proc_control_B.k_i], ii + 1,
                             proc_control_B.work_p, proc_control_B.b_A_i, ii +
                             10);
      }

      proc_control_B.b_A_i[ii] = proc_control_B.RLinv_o;
    } else {
      proc_control_B.tau_j[8] = 0.0;
    }
  }

  for (proc_control_B.k_i = 0; proc_control_B.k_i < 9; proc_control_B.k_i++) {
    for (ii = 0; ii <= proc_control_B.k_i; ii++) {
      proc_control_B.R[ii + 9 * proc_control_B.k_i] = proc_control_B.b_A_i[9 *
        proc_control_B.k_i + ii];
    }

    for (ii = proc_control_B.k_i + 2; ii < 10; ii++) {
      proc_control_B.R[(ii + 9 * proc_control_B.k_i) - 1] = 0.0;
    }

    proc_control_B.work_p[proc_control_B.k_i] = 0.0;
  }

  for (proc_control_B.k_i = 8; proc_control_B.k_i >= 0; proc_control_B.k_i--) {
    b_lastv = (proc_control_B.k_i * 9 + proc_control_B.k_i) + 10;
    if (proc_control_B.k_i + 1 < 9) {
      proc_control_B.b_A_i[b_lastv - 10] = 1.0;
      if (proc_control_B.tau_j[proc_control_B.k_i] != 0.0) {
        knt = 9 - proc_control_B.k_i;
        b_coltop = b_lastv - proc_control_B.k_i;
        while ((knt > 0) && (proc_control_B.b_A_i[b_coltop - 2] == 0.0)) {
          knt--;
          b_coltop--;
        }

        b_coltop = 8 - proc_control_B.k_i;
        exitg2 = false;
        while ((!exitg2) && (b_coltop > 0)) {
          coltop = (b_coltop - 1) * 9 + b_lastv;
          ii = coltop;
          do {
            exitg1 = 0;
            if (ii <= (coltop + knt) - 1) {
              if (proc_control_B.b_A_i[ii - 1] != 0.0) {
                exitg1 = 1;
              } else {
                ii++;
              }
            } else {
              b_coltop--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        b_coltop = 0;
      }

      if (knt > 0) {
        proc_control_xgemv_f(knt, b_coltop, proc_control_B.b_A_i, b_lastv,
                             proc_control_B.b_A_i, b_lastv - 9,
                             proc_control_B.work_p);
        proc_control_xgerc_g(knt, b_coltop,
                             -proc_control_B.tau_j[proc_control_B.k_i], b_lastv
                             - 9, proc_control_B.work_p, proc_control_B.b_A_i,
                             b_lastv);
      }

      b_coltop = (b_lastv - proc_control_B.k_i) - 1;
      for (knt = b_lastv - 8; knt <= b_coltop; knt++) {
        proc_control_B.b_A_i[knt - 1] *=
          -proc_control_B.tau_j[proc_control_B.k_i];
      }
    }

    proc_control_B.b_A_i[b_lastv - 10] = 1.0 -
      proc_control_B.tau_j[proc_control_B.k_i];
    for (knt = 0; knt < proc_control_B.k_i; knt++) {
      proc_control_B.b_A_i[(b_lastv - knt) - 11] = 0.0;
    }
  }

  proc_control_B.k_i = 0;
  do {
    exitg1 = 0;
    if (proc_control_B.k_i <= nA - 1) {
      if (std::abs(proc_control_B.R[9 * proc_control_B.k_i + proc_control_B.k_i])
          < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.k_i++;
      }
    } else {
      knt = 0;
      for (proc_control_B.k_i = 0; proc_control_B.k_i < n; proc_control_B.k_i++)
      {
        coltop = 0;
        for (ii = 0; ii < n; ii++) {
          proc_control_B.RLinv_o = 0.0;
          for (b_coltop = 0; b_coltop < 9; b_coltop++) {
            proc_control_B.RLinv_o += b_Linv[b_coltop + knt] *
              proc_control_B.b_A_i[b_coltop + coltop];
          }

          proc_control_B.TL[coltop + proc_control_B.k_i] =
            proc_control_B.RLinv_o;
          coltop += 9;
        }

        knt += 9;
      }

      std::memset(&RLinv[0], 0, 81U * sizeof(real_T));
      for (proc_control_B.k_i = nA; proc_control_B.k_i >= 1; proc_control_B.k_i
           --) {
        b_coltop = (proc_control_B.k_i - 1) * 9;
        knt = (proc_control_B.k_i + b_coltop) - 1;
        RLinv[knt] = 1.0;
        for (ii = proc_control_B.k_i; ii <= nA; ii++) {
          coltop = ((ii - 1) * 9 + proc_control_B.k_i) - 1;
          RLinv[coltop] /= proc_control_B.R[knt];
        }

        if (proc_control_B.k_i > 1) {
          for (ii = 0; ii <= proc_control_B.k_i - 2; ii++) {
            for (b_lastv = proc_control_B.k_i; b_lastv <= nA; b_lastv++) {
              knt = (b_lastv - 1) * 9;
              coltop = knt + ii;
              RLinv[coltop] -= RLinv[(knt + proc_control_B.k_i) - 1] *
                proc_control_B.R[b_coltop + ii];
            }
          }
        }
      }

      knt = 0;
      for (proc_control_B.k_i = 0; proc_control_B.k_i < n; proc_control_B.k_i++)
      {
        coltop = (proc_control_B.k_i + 1) * 9;
        for (ii = proc_control_B.k_i + 1; ii <= n; ii++) {
          b_coltop = (coltop + proc_control_B.k_i) - 9;
          b_H[b_coltop] = 0.0;
          b_lastv_0 = (nA + 1) * 9;
          for (b_lastv = nA + 1; b_lastv <= n; b_lastv++) {
            b_H[b_coltop] -= proc_control_B.TL[(b_lastv_0 + ii) - 10] *
              proc_control_B.TL[(b_lastv_0 + proc_control_B.k_i) - 9];
            b_lastv_0 += 9;
          }

          b_H[(ii + knt) - 1] = b_H[b_coltop];
          coltop += 9;
        }

        knt += 9;
      }

      knt = 0;
      for (proc_control_B.k_i = 0; proc_control_B.k_i < nA; proc_control_B.k_i++)
      {
        for (ii = 0; ii < n; ii++) {
          b_coltop = ii + knt;
          b_D[b_coltop] = 0.0;
          b_lastv_0 = (proc_control_B.k_i + 1) * 9;
          for (b_lastv = proc_control_B.k_i + 1; b_lastv <= nA; b_lastv++) {
            b_D[b_coltop] += proc_control_B.TL[(b_lastv_0 + ii) - 9] * RLinv
              [(b_lastv_0 + proc_control_B.k_i) - 9];
            b_lastv_0 += 9;
          }
        }

        knt += 9;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_DropConstraint(int32_T kDrop, boolean_T iA[226],
  int32_T *nA, int32_T iC[226])
{
  if (kDrop > 0) {
    iA[iC[kDrop - 1] - 1] = false;
    if (kDrop < *nA) {
      for (int32_T i{kDrop}; i < *nA; i++) {
        iC[i - 1] = iC[i];
      }
    }

    iC[*nA - 1] = 0;
    (*nA)--;
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_qpkwik(const real_T b_Linv[81], const real_T
  b_Hinv[81], const real_T f[9], const real_T b_Ac[2034], const real_T b[226],
  boolean_T iA[226], int32_T maxiter, real_T FeasTol, real_T x[9], real_T
  lambda[226], int32_T *status)
{
  int32_T exitg1;
  int32_T exitg3;
  boolean_T ColdReset;
  boolean_T DualFeasible;
  boolean_T cTolComputed;
  boolean_T exitg2;
  boolean_T exitg4;
  boolean_T guard1;
  boolean_T guard2;
  std::memset(&x[0], 0, 9U * sizeof(real_T));
  std::memset(&lambda[0], 0, 226U * sizeof(real_T));
  *status = 1;
  std::memset(&proc_control_B.r_a[0], 0, 9U * sizeof(real_T));
  proc_control_B.rMin = 0.0;
  cTolComputed = false;
  for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 226; proc_control_B.i_hq++)
  {
    proc_control_B.cTol_p[proc_control_B.i_hq] = 1.0;
    proc_control_B.iC_i[proc_control_B.i_hq] = 0;
  }

  proc_control_B.nA = 0;
  for (proc_control_B.tmp = 0; proc_control_B.tmp < 226; proc_control_B.tmp++) {
    if (iA[proc_control_B.tmp]) {
      proc_control_B.nA++;
      proc_control_B.iC_i[proc_control_B.nA - 1] = proc_control_B.tmp + 1;
    }
  }

  guard1 = false;
  if (proc_control_B.nA > 0) {
    std::memset(&proc_control_B.Opt[0], 0, 18U * sizeof(real_T));
    for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 9; proc_control_B.i_hq++)
    {
      proc_control_B.Rhs[proc_control_B.i_hq] = f[proc_control_B.i_hq];
      proc_control_B.Rhs[proc_control_B.i_hq + 9] = 0.0;
    }

    DualFeasible = false;
    proc_control_B.tmp = static_cast<int32_T>(std::round(0.3 *
      static_cast<real_T>(proc_control_B.nA)));
    ColdReset = false;
    do {
      exitg3 = 0;
      if ((!DualFeasible) && (proc_control_B.nA > 0) && (*status <= maxiter)) {
        proc_control_KWIKfactor_k(b_Ac, proc_control_B.iC_i, proc_control_B.nA,
          b_Linv, proc_control_B.b_D_c, proc_control_B.b_H, 9,
          proc_control_B.RLinv, &proc_control_B.Xnorm0);
        if (proc_control_B.Xnorm0 < 0.0) {
          if (ColdReset) {
            *status = -2;
            exitg3 = 2;
          } else {
            proc_control_B.nA = 0;
            std::memset(&iA[0], 0, 226U * sizeof(boolean_T));
            std::memset(&proc_control_B.iC_i[0], 0, 226U * sizeof(int32_T));
            ColdReset = true;
          }
        } else {
          for (proc_control_B.i_hq = 0; proc_control_B.i_hq < proc_control_B.nA;
               proc_control_B.i_hq++) {
            proc_control_B.Rhs[proc_control_B.i_hq + 9] =
              b[proc_control_B.iC_i[proc_control_B.i_hq] - 1];
            for (proc_control_B.iSave = proc_control_B.i_hq + 1;
                 proc_control_B.iSave <= proc_control_B.nA; proc_control_B.iSave
                 ++) {
              proc_control_B.U_tmp = (9 * proc_control_B.i_hq +
                proc_control_B.iSave) - 1;
              proc_control_B.U_n[proc_control_B.U_tmp] = 0.0;
              for (proc_control_B.iC_c = 0; proc_control_B.iC_c <
                   proc_control_B.nA; proc_control_B.iC_c++) {
                proc_control_B.U_n[proc_control_B.U_tmp] +=
                  proc_control_B.RLinv[(9 * proc_control_B.iC_c +
                  proc_control_B.iSave) - 1] * proc_control_B.RLinv[9 *
                  proc_control_B.iC_c + proc_control_B.i_hq];
              }

              proc_control_B.U_n[proc_control_B.i_hq + 9 * (proc_control_B.iSave
                - 1)] = proc_control_B.U_n[proc_control_B.U_tmp];
            }
          }

          for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 9;
               proc_control_B.i_hq++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                 proc_control_B.iC_c++) {
              proc_control_B.Xnorm0 += proc_control_B.b_H[9 *
                proc_control_B.iC_c + proc_control_B.i_hq] *
                proc_control_B.Rhs[proc_control_B.iC_c];
            }

            proc_control_B.Opt[proc_control_B.i_hq] = proc_control_B.Xnorm0;
            for (proc_control_B.iSave = 0; proc_control_B.iSave <
                 proc_control_B.nA; proc_control_B.iSave++) {
              proc_control_B.Opt[proc_control_B.i_hq] += proc_control_B.b_D_c[9 *
                proc_control_B.iSave + proc_control_B.i_hq] *
                proc_control_B.Rhs[proc_control_B.iSave + 9];
            }
          }

          for (proc_control_B.i_hq = 0; proc_control_B.i_hq < proc_control_B.nA;
               proc_control_B.i_hq++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                 proc_control_B.iC_c++) {
              proc_control_B.Xnorm0 += proc_control_B.b_D_c[9 *
                proc_control_B.i_hq + proc_control_B.iC_c] *
                proc_control_B.Rhs[proc_control_B.iC_c];
            }

            proc_control_B.Opt[proc_control_B.i_hq + 9] = proc_control_B.Xnorm0;
            for (proc_control_B.iSave = 0; proc_control_B.iSave <
                 proc_control_B.nA; proc_control_B.iSave++) {
              proc_control_B.Opt[proc_control_B.i_hq + 9] += proc_control_B.U_n
                [9 * proc_control_B.iSave + proc_control_B.i_hq] *
                proc_control_B.Rhs[proc_control_B.iSave + 9];
            }
          }

          proc_control_B.Xnorm0 = -1.0E-12;
          proc_control_B.i_hq = -1;
          for (proc_control_B.iSave = 0; proc_control_B.iSave <
               proc_control_B.nA; proc_control_B.iSave++) {
            proc_control_B.cMin = proc_control_B.Opt[proc_control_B.iSave + 9];
            lambda[proc_control_B.iC_i[proc_control_B.iSave] - 1] =
              proc_control_B.cMin;
            if ((proc_control_B.cMin < proc_control_B.Xnorm0) &&
                (proc_control_B.iSave + 1 <= proc_control_B.nA)) {
              proc_control_B.i_hq = proc_control_B.iSave;
              proc_control_B.Xnorm0 = proc_control_B.cMin;
            }
          }

          if (proc_control_B.i_hq + 1 <= 0) {
            DualFeasible = true;
            std::memcpy(&x[0], &proc_control_B.Opt[0], 9U * sizeof(real_T));
          } else {
            (*status)++;
            if (proc_control_B.tmp <= 5) {
              proc_control_B.iC_c = 5;
            } else {
              proc_control_B.iC_c = proc_control_B.tmp;
            }

            if (*status > proc_control_B.iC_c) {
              proc_control_B.nA = 0;
              std::memset(&iA[0], 0, 226U * sizeof(boolean_T));
              std::memset(&proc_control_B.iC_i[0], 0, 226U * sizeof(int32_T));
              ColdReset = true;
            } else {
              lambda[proc_control_B.iC_i[proc_control_B.i_hq] - 1] = 0.0;
              proc_control_DropConstraint(proc_control_B.i_hq + 1, iA,
                &proc_control_B.nA, proc_control_B.iC_i);
            }
          }
        }
      } else {
        if (proc_control_B.nA <= 0) {
          std::memset(&lambda[0], 0, 226U * sizeof(real_T));
          for (proc_control_B.tmp = 0; proc_control_B.tmp < 9;
               proc_control_B.tmp++) {
            proc_control_B.Xnorm0 = 0.0;
            proc_control_B.iC_c = 0;
            for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 9;
                 proc_control_B.i_hq++) {
              proc_control_B.Xnorm0 += -b_Hinv[proc_control_B.iC_c +
                proc_control_B.tmp] * f[proc_control_B.i_hq];
              proc_control_B.iC_c += 9;
            }

            x[proc_control_B.tmp] = proc_control_B.Xnorm0;
          }
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    for (proc_control_B.tmp = 0; proc_control_B.tmp < 9; proc_control_B.tmp++) {
      proc_control_B.Xnorm0 = 0.0;
      proc_control_B.iC_c = 0;
      for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 9; proc_control_B.i_hq
           ++) {
        proc_control_B.Xnorm0 += -b_Hinv[proc_control_B.iC_c +
          proc_control_B.tmp] * f[proc_control_B.i_hq];
        proc_control_B.iC_c += 9;
      }

      x[proc_control_B.tmp] = proc_control_B.Xnorm0;
    }

    guard1 = true;
  }

  if (guard1) {
    proc_control_B.Xnorm0 = proc_control_norm_n(x);
    exitg2 = false;
    while ((!exitg2) && (*status <= maxiter)) {
      proc_control_B.cMin = -FeasTol;
      proc_control_B.tmp = -1;
      for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 226;
           proc_control_B.i_hq++) {
        if (!cTolComputed) {
          for (proc_control_B.iSave = 0; proc_control_B.iSave < 9;
               proc_control_B.iSave++) {
            proc_control_B.z_o[proc_control_B.iSave] = std::abs(b_Ac[226 *
              proc_control_B.iSave + proc_control_B.i_hq] *
              x[proc_control_B.iSave]);
          }

          proc_control_B.cTol_p[proc_control_B.i_hq] = std::fmax
            (proc_control_B.cTol_p[proc_control_B.i_hq], proc_control_maximum
             (proc_control_B.z_o));
        }

        if (!iA[proc_control_B.i_hq]) {
          proc_control_B.t_n = 0.0;
          for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
               proc_control_B.iC_c++) {
            proc_control_B.t_n += b_Ac[226 * proc_control_B.iC_c +
              proc_control_B.i_hq] * x[proc_control_B.iC_c];
          }

          proc_control_B.cVal = (proc_control_B.t_n - b[proc_control_B.i_hq]) /
            proc_control_B.cTol_p[proc_control_B.i_hq];
          if (proc_control_B.cVal < proc_control_B.cMin) {
            proc_control_B.cMin = proc_control_B.cVal;
            proc_control_B.tmp = proc_control_B.i_hq;
          }
        }
      }

      cTolComputed = true;
      if (proc_control_B.tmp + 1 <= 0) {
        exitg2 = true;
      } else if (*status == maxiter) {
        *status = 0;
        exitg2 = true;
      } else {
        do {
          exitg1 = 0;
          if ((proc_control_B.tmp + 1 > 0) && (*status <= maxiter)) {
            guard2 = false;
            if (proc_control_B.nA == 0) {
              for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                   proc_control_B.iC_c++) {
                proc_control_B.cMin = 0.0;
                for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 9;
                     proc_control_B.i_hq++) {
                  proc_control_B.cMin += b_Hinv[9 * proc_control_B.i_hq +
                    proc_control_B.iC_c] * b_Ac[226 * proc_control_B.i_hq +
                    proc_control_B.tmp];
                }

                proc_control_B.z_o[proc_control_B.iC_c] = proc_control_B.cMin;
              }

              guard2 = true;
            } else {
              proc_control_KWIKfactor_k(b_Ac, proc_control_B.iC_i,
                proc_control_B.nA, b_Linv, proc_control_B.b_D_c,
                proc_control_B.b_H, 9, proc_control_B.RLinv,
                &proc_control_B.cMin);
              if (proc_control_B.cMin <= 0.0) {
                *status = -2;
                exitg1 = 1;
              } else {
                for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 81;
                     proc_control_B.iC_c++) {
                  proc_control_B.U_n[proc_control_B.iC_c] =
                    -proc_control_B.b_H[proc_control_B.iC_c];
                }

                for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                     proc_control_B.iC_c++) {
                  proc_control_B.cMin = 0.0;
                  for (proc_control_B.i_hq = 0; proc_control_B.i_hq < 9;
                       proc_control_B.i_hq++) {
                    proc_control_B.cMin += proc_control_B.U_n[9 *
                      proc_control_B.i_hq + proc_control_B.iC_c] * b_Ac[226 *
                      proc_control_B.i_hq + proc_control_B.tmp];
                  }

                  proc_control_B.z_o[proc_control_B.iC_c] = proc_control_B.cMin;
                }

                for (proc_control_B.i_hq = 0; proc_control_B.i_hq <
                     proc_control_B.nA; proc_control_B.i_hq++) {
                  proc_control_B.t_n = 0.0;
                  for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                       proc_control_B.iC_c++) {
                    proc_control_B.t_n += b_Ac[226 * proc_control_B.iC_c +
                      proc_control_B.tmp] * proc_control_B.b_D_c[9 *
                      proc_control_B.i_hq + proc_control_B.iC_c];
                  }

                  proc_control_B.r_a[proc_control_B.i_hq] = proc_control_B.t_n;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              proc_control_B.i_hq = 0;
              proc_control_B.cMin = 0.0;
              DualFeasible = true;
              ColdReset = true;
              if (proc_control_B.nA > 0) {
                proc_control_B.iSave = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_B.iSave <= proc_control_B.nA -
                                     1)) {
                  if (proc_control_B.r_a[proc_control_B.iSave] >= 1.0E-12) {
                    ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_B.iSave++;
                  }
                }
              }

              if ((proc_control_B.nA != 0) && (!ColdReset)) {
                for (proc_control_B.iSave = 0; proc_control_B.iSave <
                     proc_control_B.nA; proc_control_B.iSave++) {
                  proc_control_B.cVal = proc_control_B.r_a[proc_control_B.iSave];
                  if (proc_control_B.cVal > 1.0E-12) {
                    proc_control_B.cVal =
                      lambda[proc_control_B.iC_i[proc_control_B.iSave] - 1] /
                      proc_control_B.cVal;
                    if ((proc_control_B.i_hq == 0) || (proc_control_B.cVal <
                         proc_control_B.rMin)) {
                      proc_control_B.rMin = proc_control_B.cVal;
                      proc_control_B.i_hq = proc_control_B.iSave + 1;
                    }
                  }
                }

                if (proc_control_B.i_hq > 0) {
                  proc_control_B.cMin = proc_control_B.rMin;
                  DualFeasible = false;
                }
              }

              proc_control_B.cVal = 0.0;
              for (proc_control_B.iSave = 0; proc_control_B.iSave < 9;
                   proc_control_B.iSave++) {
                proc_control_B.cVal += b_Ac[226 * proc_control_B.iSave +
                  proc_control_B.tmp] * proc_control_B.z_o[proc_control_B.iSave];
              }

              if (proc_control_B.cVal <= 0.0) {
                proc_control_B.cVal = 0.0;
                ColdReset = true;
              } else {
                proc_control_B.t_n = 0.0;
                for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                     proc_control_B.iC_c++) {
                  proc_control_B.t_n += b_Ac[226 * proc_control_B.iC_c +
                    proc_control_B.tmp] * x[proc_control_B.iC_c];
                }

                proc_control_B.cVal = (b[proc_control_B.tmp] -
                  proc_control_B.t_n) / proc_control_B.cVal;
                ColdReset = false;
              }

              if (DualFeasible && ColdReset) {
                *status = -1;
                exitg1 = 1;
              } else {
                if (ColdReset) {
                  proc_control_B.t_n = proc_control_B.cMin;
                } else if (DualFeasible) {
                  proc_control_B.t_n = proc_control_B.cVal;
                } else if (proc_control_B.cMin < proc_control_B.cVal) {
                  proc_control_B.t_n = proc_control_B.cMin;
                } else {
                  proc_control_B.t_n = proc_control_B.cVal;
                }

                for (proc_control_B.iSave = 0; proc_control_B.iSave <
                     proc_control_B.nA; proc_control_B.iSave++) {
                  proc_control_B.iC_c = proc_control_B.iC_i[proc_control_B.iSave];
                  lambda[proc_control_B.iC_c - 1] -= proc_control_B.t_n *
                    proc_control_B.r_a[proc_control_B.iSave];
                  if ((proc_control_B.iC_c <= 226) &&
                      (lambda[proc_control_B.iC_c - 1] < 0.0)) {
                    lambda[proc_control_B.iC_c - 1] = 0.0;
                  }
                }

                lambda[proc_control_B.tmp] += proc_control_B.t_n;
                std::frexp(1.0, &proc_control_B.exponent);
                if (std::abs(proc_control_B.t_n - proc_control_B.cMin) <
                    2.2204460492503131E-16) {
                  proc_control_DropConstraint(proc_control_B.i_hq, iA,
                    &proc_control_B.nA, proc_control_B.iC_i);
                }

                if (!ColdReset) {
                  for (proc_control_B.iC_c = 0; proc_control_B.iC_c < 9;
                       proc_control_B.iC_c++) {
                    x[proc_control_B.iC_c] += proc_control_B.t_n *
                      proc_control_B.z_o[proc_control_B.iC_c];
                  }

                  std::frexp(1.0, &proc_control_B.b_exponent);
                  if (std::abs(proc_control_B.t_n - proc_control_B.cVal) <
                      2.2204460492503131E-16) {
                    if (proc_control_B.nA == 9) {
                      *status = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA++;
                      proc_control_B.iC_i[proc_control_B.nA - 1] =
                        proc_control_B.tmp + 1;
                      proc_control_B.i_hq = proc_control_B.nA - 1;
                      exitg4 = false;
                      while ((!exitg4) && (proc_control_B.i_hq + 1 > 1)) {
                        proc_control_B.iC_c =
                          proc_control_B.iC_i[proc_control_B.i_hq - 1];
                        if (proc_control_B.iC_i[proc_control_B.i_hq] >
                            proc_control_B.iC_c) {
                          exitg4 = true;
                        } else {
                          proc_control_B.iSave =
                            proc_control_B.iC_i[proc_control_B.i_hq];
                          proc_control_B.iC_i[proc_control_B.i_hq] =
                            proc_control_B.iC_c;
                          proc_control_B.iC_i[proc_control_B.i_hq - 1] =
                            proc_control_B.iSave;
                          proc_control_B.i_hq--;
                        }
                      }

                      iA[proc_control_B.tmp] = true;
                      proc_control_B.tmp = -1;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_B.cMin = proc_control_norm_n(x);
            if (std::abs(proc_control_B.cMin - proc_control_B.Xnorm0) > 0.001) {
              proc_control_B.Xnorm0 = proc_control_B.cMin;
              for (proc_control_B.tmp = 0; proc_control_B.tmp < 226;
                   proc_control_B.tmp++) {
                proc_control_B.cTol_p[proc_control_B.tmp] = std::fmax(std::abs
                  (b[proc_control_B.tmp]), 1.0);
              }

              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S212>/FixedHorizonOptimizer'
void proc_control::proc_control_mpcblock_optimizer(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[21],
  const real_T old_u[8], const boolean_T iA[226], const real_T b_Mlim[226],
  real_T b_Mx[4746], real_T b_Mu1[1808], real_T b_Mv[2486], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[81], real_T b_Ac[2034],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[640], const real_T b_I1[640], const real_T b_A[4851], const real_T Bu
  [1848], const real_T Bv[231], const real_T b_C[3003], const real_T Dv[143],
  const int32_T b_Mrows[226], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[226])
{
  int16_T ixw;
  boolean_T b_Del_Save_Flag0;
  static const int8_T c_A[100]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T guard1;
  boolean_T guard2;
  std::memset(&iAout[0], 0, 226U * sizeof(boolean_T));
  proc_cont_mpc_constraintcoefLTV(b_A, Bu, Bv, b_C, Dv, b_Jm,
    proc_control_B.b_SuJm, proc_control_B.b_Sx, proc_control_B.b_Su1,
    proc_control_B.b_Hv);
  if (b_Mrows[0] > 0) {
    proc_control_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.kidx < 226)) {
      if (b_Mrows[proc_control_B.kidx] <= 130) {
        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8;
             proc_control_B.i_fo++) {
          b_Ac[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            -proc_control_B.b_SuJm[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 21;
             proc_control_B.i_fo++) {
          b_Mx[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            -proc_control_B.b_Sx[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8;
             proc_control_B.i_fo++) {
          b_Mu1[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            -proc_control_B.b_Su1[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 11;
             proc_control_B.i_fo++) {
          b_Mv[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            -proc_control_B.b_Hv[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 1];
        }

        proc_control_B.kidx++;
      } else if (b_Mrows[proc_control_B.kidx] <= 260) {
        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8;
             proc_control_B.i_fo++) {
          b_Ac[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            proc_control_B.b_SuJm[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 21;
             proc_control_B.i_fo++) {
          b_Mx[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            proc_control_B.b_Sx[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8;
             proc_control_B.i_fo++) {
          b_Mu1[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            proc_control_B.b_Su1[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.Tries = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 11;
             proc_control_B.i_fo++) {
          b_Mv[proc_control_B.kidx + 226 * proc_control_B.i_fo] =
            proc_control_B.b_Hv[(130 * proc_control_B.i_fo +
            proc_control_B.Tries) - 131];
        }

        proc_control_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 13; proc_control_B.kidx++)
  {
    proc_control_B.normH = ywt[proc_control_B.kidx];
    if (proc_control_B.normH < 0.0) {
      proc_control_B.b_Wy[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wy[proc_control_B.kidx] = proc_control_B.normH *
        proc_control_B.normH;
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.normH = uwt[proc_control_B.kidx];
    if (proc_control_B.normH < 0.0) {
      proc_control_B.b_Wu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wu[proc_control_B.kidx] = proc_control_B.normH *
        proc_control_B.normH;
    }

    proc_control_B.normH = duwt[proc_control_B.kidx];
    if (proc_control_B.normH < 0.0) {
      proc_control_B.b_Wdu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wdu[proc_control_B.kidx] = proc_control_B.normH *
        proc_control_B.normH;
    }
  }

  std::memset(&proc_control_B.b_B_d[0], 0, sizeof(real_T) << 6U);
  proc_control_B.kidx_g = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.b_B_d[proc_control_B.kidx_g] = 1.0;
    proc_control_B.kidx_g += 9;
  }

  proc_control_B.kidx = -1;
  for (proc_control_B.Tries = 0; proc_control_B.Tries < 10; proc_control_B.Tries
       ++) {
    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo++)
    {
      for (proc_control_B.kidx_g = 0; proc_control_B.kidx_g < 10;
           proc_control_B.kidx_g++) {
        for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 8;
             proc_control_B.i2_c++) {
          proc_control_B.a_m[(proc_control_B.kidx + proc_control_B.i2_c) + 1] =
            static_cast<int8_T>(c_A[10 * proc_control_B.Tries +
                                proc_control_B.kidx_g] * static_cast<int32_T>
                                (proc_control_B.b_B_d[(proc_control_B.i_fo << 3)
            + proc_control_B.i2_c]));
        }

        proc_control_B.kidx += 8;
      }
    }
  }

  proc_control_B.i_fo = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
         proc_control_B.Tries++) {
      proc_control_B.normH = 0.0;
      proc_control_B.kidx_g = 0;
      for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 80;
           proc_control_B.i2_c++) {
        proc_control_B.normH += static_cast<real_T>
          (proc_control_B.a_m[proc_control_B.kidx_g + proc_control_B.Tries]) *
          b_Jm[proc_control_B.i2_c + proc_control_B.i_fo];
        proc_control_B.kidx_g += 80;
      }

      proc_control_B.I2Jm[proc_control_B.Tries + proc_control_B.i_fo] =
        proc_control_B.normH;
    }

    proc_control_B.i_fo += 80;
  }

  ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 130; proc_control_B.kidx++)
  {
    proc_control_B.normH = proc_control_B.b_Wy[ixw - 1];
    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo++)
    {
      proc_control_B.Tries = 130 * proc_control_B.i_fo + proc_control_B.kidx;
      proc_control_B.WySuJm[proc_control_B.Tries] =
        proc_control_B.b_SuJm[proc_control_B.Tries] * proc_control_B.normH;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 80; proc_control_B.kidx++)
  {
    proc_control_B.normH = proc_control_B.b_Wu[ixw - 1];
    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo++)
    {
      proc_control_B.Tries = 80 * proc_control_B.i_fo + proc_control_B.kidx;
      proc_control_B.WuI2Jm[proc_control_B.Tries] =
        proc_control_B.I2Jm[proc_control_B.Tries] * proc_control_B.normH;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 8) {
      ixw = 1;
    }
  }

  ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 80; proc_control_B.kidx++)
  {
    proc_control_B.normH = proc_control_B.b_Wdu[ixw - 1];
    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo++)
    {
      proc_control_B.Tries = 80 * proc_control_B.i_fo + proc_control_B.kidx;
      proc_control_B.WduJm[proc_control_B.Tries] = b_Jm[proc_control_B.Tries] *
        proc_control_B.normH;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 8) {
      ixw = 1;
    }
  }

  for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo++)
  {
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.s_b = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 130;
           proc_control_B.Tries++) {
        proc_control_B.s_b += proc_control_B.b_SuJm[130 * proc_control_B.i_fo +
          proc_control_B.Tries] * proc_control_B.WySuJm[130 *
          proc_control_B.kidx + proc_control_B.Tries];
      }

      proc_control_B.normH = 0.0;
      proc_control_B.b_Jm = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
           proc_control_B.Tries++) {
        proc_control_B.kidx_g = 80 * proc_control_B.i_fo + proc_control_B.Tries;
        proc_control_B.i2_c = 80 * proc_control_B.kidx + proc_control_B.Tries;
        proc_control_B.b_Jm += b_Jm[proc_control_B.kidx_g] *
          proc_control_B.WduJm[proc_control_B.i2_c];
        proc_control_B.normH += proc_control_B.I2Jm[proc_control_B.kidx_g] *
          proc_control_B.WuI2Jm[proc_control_B.i2_c];
      }

      b_H[proc_control_B.i_fo + 9 * proc_control_B.kidx] = (proc_control_B.s_b +
        proc_control_B.b_Jm) + proc_control_B.normH;
      proc_control_B.normH = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 130;
           proc_control_B.Tries++) {
        proc_control_B.normH += proc_control_B.b_Su1[130 * proc_control_B.i_fo +
          proc_control_B.Tries] * proc_control_B.WySuJm[130 *
          proc_control_B.kidx + proc_control_B.Tries];
      }

      proc_control_B.kidx_g = (proc_control_B.kidx << 3) + proc_control_B.i_fo;
      proc_control_B.b_Su1_n[proc_control_B.kidx_g] = proc_control_B.normH;
      proc_control_B.normH = 0.0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
           proc_control_B.Tries++) {
        proc_control_B.normH += b_I1[80 * proc_control_B.i_fo +
          proc_control_B.Tries] * proc_control_B.WuI2Jm[80 * proc_control_B.kidx
          + proc_control_B.Tries];
      }

      proc_control_B.b_I1[proc_control_B.kidx_g] = proc_control_B.normH;
    }
  }

  for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 64; proc_control_B.i_fo++)
  {
    proc_control_B.b_B_d[proc_control_B.i_fo] =
      proc_control_B.b_Su1_n[proc_control_B.i_fo] +
      proc_control_B.b_I1[proc_control_B.i_fo];
  }

  for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 640; proc_control_B.i_fo++)
  {
    proc_control_B.WuI2Jm[proc_control_B.i_fo] =
      -proc_control_B.WuI2Jm[proc_control_B.i_fo];
  }

  proc_control_B.i_fo = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 21; proc_control_B.kidx++)
  {
    proc_control_B.Tries = 0;
    proc_control_B.kidx_g = 0;
    for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 8; proc_control_B.i2_c++)
    {
      proc_control_B.normH = 0.0;
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 130; proc_control_B.i4++)
      {
        proc_control_B.normH += proc_control_B.b_Sx[proc_control_B.i4 +
          proc_control_B.i_fo] * proc_control_B.WySuJm[proc_control_B.i4 +
          proc_control_B.kidx_g];
      }

      proc_control_B.b_Kx[proc_control_B.Tries + proc_control_B.kidx] =
        proc_control_B.normH;
      proc_control_B.Tries += 21;
      proc_control_B.kidx_g += 130;
    }

    proc_control_B.i_fo += 130;
  }

  proc_control_B.i_fo = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 11; proc_control_B.kidx++)
  {
    proc_control_B.Tries = 0;
    proc_control_B.kidx_g = 0;
    for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 8; proc_control_B.i2_c++)
    {
      proc_control_B.s_b = 0.0;
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 130; proc_control_B.i4++)
      {
        proc_control_B.s_b += proc_control_B.b_Hv[proc_control_B.i4 +
          proc_control_B.i_fo] * proc_control_B.WySuJm[proc_control_B.i4 +
          proc_control_B.kidx_g];
      }

      proc_control_B.b_Kv[proc_control_B.Tries + proc_control_B.kidx] =
        proc_control_B.s_b;
      proc_control_B.Tries += 11;
      proc_control_B.kidx_g += 130;
    }

    proc_control_B.i_fo += 130;
  }

  for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 1040; proc_control_B.i_fo
       ++) {
    proc_control_B.WySuJm[proc_control_B.i_fo] =
      -proc_control_B.WySuJm[proc_control_B.i_fo];
  }

  proc_control_B.kidx = 0;
  std::memcpy(&proc_control_B.L[0], &b_H[0], 81U * sizeof(real_T));
  proc_control_B.Tries = proc_control_xpotrf_f(proc_control_B.L);
  guard1 = false;
  if (proc_control_B.Tries == 0) {
    proc_control_B.i_fo = 0;
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 9;
         proc_control_B.Tries++) {
      proc_control_B.varargin_1_p[proc_control_B.Tries] =
        proc_control_B.L[proc_control_B.i_fo];
      proc_control_B.i_fo += 10;
    }

    if (proc_control_minimum_l(proc_control_B.varargin_1_p) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_B.normH = 0.0;
    proc_control_B.Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.Tries < 9)) {
      proc_control_B.s_b = 0.0;
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 9; proc_control_B.i_fo
           ++) {
        proc_control_B.s_b += std::abs(b_H[9 * proc_control_B.i_fo +
          proc_control_B.Tries]);
      }

      if (std::isnan(proc_control_B.s_b)) {
        proc_control_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_B.s_b > proc_control_B.normH) {
          proc_control_B.normH = proc_control_B.s_b;
        }

        proc_control_B.Tries++;
      }
    }

    if (proc_control_B.normH >= 1.0E+10) {
      proc_control_B.kidx = 2;
    } else {
      proc_control_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.Tries <= 4)) {
        proc_control_B.normH = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_B.Tries)) * 1.4901161193847656E-7;
        std::memset(&proc_control_B.b[0], 0, 81U * sizeof(int8_T));
        proc_control_B.kidx_g = 0;
        for (proc_control_B.kidx = 0; proc_control_B.kidx < 9;
             proc_control_B.kidx++) {
          proc_control_B.b[proc_control_B.kidx_g] = 1;
          proc_control_B.kidx_g += 10;
        }

        for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 81;
             proc_control_B.i_fo++) {
          proc_control_B.s_b = proc_control_B.normH * static_cast<real_T>
            (proc_control_B.b[proc_control_B.i_fo]) + b_H[proc_control_B.i_fo];
          b_H[proc_control_B.i_fo] = proc_control_B.s_b;
          proc_control_B.L[proc_control_B.i_fo] = proc_control_B.s_b;
        }

        proc_control_B.kidx = proc_control_xpotrf_f(proc_control_B.L);
        guard2 = false;
        if (proc_control_B.kidx == 0) {
          proc_control_B.kidx_g = 0;
          for (proc_control_B.kidx = 0; proc_control_B.kidx < 9;
               proc_control_B.kidx++) {
            proc_control_B.varargin_1_p[proc_control_B.kidx] =
              proc_control_B.L[proc_control_B.kidx_g];
            proc_control_B.kidx_g += 10;
          }

          if (proc_control_minimum_l(proc_control_B.varargin_1_p) >
              1.4901161193847656E-7) {
            proc_control_B.kidx = 1;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          proc_control_B.kidx = 3;
          proc_control_B.Tries++;
        }
      }
    }
  }

  if (proc_control_B.kidx > 1) {
    proc_control_B.kidx = 0;
    for (proc_control_B.kidx_g = 0; proc_control_B.kidx_g < 8;
         proc_control_B.kidx_g++) {
      u[proc_control_B.kidx_g] = old_u[proc_control_B.kidx_g] +
        b_uoff[proc_control_B.kidx_g];
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 11;
           proc_control_B.i_fo++) {
        useq[proc_control_B.i_fo + proc_control_B.kidx] =
          u[proc_control_B.kidx_g];
      }

      proc_control_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_B.b[0], 0, 81U * sizeof(int8_T));
    proc_control_B.kidx_g = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 9; proc_control_B.kidx++)
    {
      proc_control_B.b[proc_control_B.kidx_g] = 1;
      proc_control_B.kidx_g += 10;
    }

    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 81; proc_control_B.i_fo
         ++) {
      b_H[proc_control_B.i_fo] = proc_control_B.b[proc_control_B.i_fo];
    }

    proc_control_trisolve_g(proc_control_B.L, b_H);
    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 226; proc_control_B.i_fo
         ++) {
      proc_control_B.normH = 0.0;
      for (proc_control_B.kidx = 0; proc_control_B.kidx < 21;
           proc_control_B.kidx++) {
        proc_control_B.normH += b_Mx[226 * proc_control_B.kidx +
          proc_control_B.i_fo] * x[proc_control_B.kidx];
      }

      proc_control_B.s_b = 0.0;
      for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx
           ++) {
        proc_control_B.s_b += b_Mu1[226 * proc_control_B.kidx +
          proc_control_B.i_fo] * old_u[proc_control_B.kidx];
      }

      proc_control_B.b_Jm = 0.0;
      for (proc_control_B.kidx = 0; proc_control_B.kidx < 11;
           proc_control_B.kidx++) {
        proc_control_B.b_Jm += b_Mv[226 * proc_control_B.kidx +
          proc_control_B.i_fo] * vseq[proc_control_B.kidx];
      }

      proc_control_B.Bc_c[proc_control_B.i_fo] = -(((b_Mlim[proc_control_B.i_fo]
        + proc_control_B.normH) + proc_control_B.s_b) + proc_control_B.b_Jm);
    }

    std::memset(&proc_control_B.b_Wu[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.b_Wdu[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo++)
    {
      proc_control_B.umax_incr_flag_a[proc_control_B.i_fo] = false;
      proc_control_B.umin_incr_flag_o[proc_control_B.i_fo] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.kidx = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.kidx < 226)) {
        if ((b_Mrows[proc_control_B.kidx] <= 130) ||
            (b_Mrows[proc_control_B.kidx] <= 260)) {
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 340) {
          proc_control_B.Tries = (b_Mrows[proc_control_B.kidx] -
            (((b_Mrows[proc_control_B.kidx] - 261) >> 3) << 3)) - 261;
          b_Del_Save_Flag0 =
            proc_control_B.umax_incr_flag_a[proc_control_B.Tries];
          if (!proc_control_B.umax_incr_flag_a[proc_control_B.Tries]) {
            proc_control_B.normH = -(b_RMVscale[proc_control_B.Tries] *
              umax[proc_control_B.Tries] - b_uoff[proc_control_B.Tries]) -
              (-b_Mlim[proc_control_B.kidx]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.normH = proc_control_B.b_Wu[proc_control_B.Tries];
          }

          proc_control_B.b_Wu[proc_control_B.Tries] = proc_control_B.normH;
          proc_control_B.umax_incr_flag_a[proc_control_B.Tries] =
            b_Del_Save_Flag0;
          proc_control_B.Bc_c[proc_control_B.kidx] += proc_control_B.normH;
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 420) {
          proc_control_B.Tries = (b_Mrows[proc_control_B.kidx] -
            (((b_Mrows[proc_control_B.kidx] - 341) >> 3) << 3)) - 341;
          b_Del_Save_Flag0 =
            proc_control_B.umin_incr_flag_o[proc_control_B.Tries];
          if (!proc_control_B.umin_incr_flag_o[proc_control_B.Tries]) {
            proc_control_B.normH = (b_RMVscale[proc_control_B.Tries] *
              umin[proc_control_B.Tries] - b_uoff[proc_control_B.Tries]) -
              (-b_Mlim[proc_control_B.kidx]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.normH = proc_control_B.b_Wdu[proc_control_B.Tries];
          }

          proc_control_B.b_Wdu[proc_control_B.Tries] = proc_control_B.normH;
          proc_control_B.umin_incr_flag_o[proc_control_B.Tries] =
            b_Del_Save_Flag0;
          proc_control_B.Bc_c[proc_control_B.kidx] += proc_control_B.normH;
          proc_control_B.kidx++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_B.varargin_1_p[0], 0, 9U * sizeof(real_T));
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.normH = 0.0;
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 21;
           proc_control_B.i_fo++) {
        proc_control_B.normH += proc_control_B.b_Kx[21 * proc_control_B.kidx +
          proc_control_B.i_fo] * x[proc_control_B.i_fo];
      }

      proc_control_B.b_Jm = 0.0;
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 130;
           proc_control_B.i_fo++) {
        proc_control_B.b_Jm += proc_control_B.WySuJm[130 * proc_control_B.kidx +
          proc_control_B.i_fo] * rseq[proc_control_B.i_fo];
      }

      proc_control_B.b_B_h = 0.0;
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo
           ++) {
        proc_control_B.b_B_h += proc_control_B.b_B_d[(proc_control_B.kidx << 3)
          + proc_control_B.i_fo] * old_u[proc_control_B.i_fo];
      }

      proc_control_B.s_b = 0.0;
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 11;
           proc_control_B.i_fo++) {
        proc_control_B.s_b += proc_control_B.b_Kv[11 * proc_control_B.kidx +
          proc_control_B.i_fo] * vseq[proc_control_B.i_fo];
      }

      proc_control_B.WuI2Jm_p = 0.0;
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 80;
           proc_control_B.i_fo++) {
        proc_control_B.WuI2Jm_p += proc_control_B.WuI2Jm[80 *
          proc_control_B.kidx + proc_control_B.i_fo] *
          b_utarget[proc_control_B.i_fo];
      }

      proc_control_B.varargin_1_p[proc_control_B.kidx] = (((proc_control_B.normH
        + proc_control_B.b_Jm) + proc_control_B.b_B_h) + proc_control_B.s_b) +
        proc_control_B.WuI2Jm_p;
    }

    std::memcpy(&iAout[0], &iA[0], 226U * sizeof(boolean_T));
    proc_control_B.i_fo = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 9; proc_control_B.kidx++)
    {
      proc_control_B.Tries = 0;
      for (proc_control_B.kidx_g = 0; proc_control_B.kidx_g < 9;
           proc_control_B.kidx_g++) {
        proc_control_B.s_b = 0.0;
        for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 9;
             proc_control_B.i2_c++) {
          proc_control_B.s_b += b_H[proc_control_B.i2_c + proc_control_B.i_fo] *
            b_H[proc_control_B.i2_c + proc_control_B.Tries];
        }

        proc_control_B.L[proc_control_B.Tries + proc_control_B.kidx] =
          proc_control_B.s_b;
        proc_control_B.Tries += 9;
      }

      proc_control_B.i_fo += 9;
    }

    proc_control_qpkwik(b_H, proc_control_B.L, proc_control_B.varargin_1_p, b_Ac,
                        proc_control_B.Bc_c, iAout, 940, 0.01,
                        proc_control_B.zopt, proc_control_B.a__1_fm,
                        &proc_control_B.kidx);
    if ((proc_control_B.kidx < 0) || (proc_control_B.kidx == 0)) {
      std::memset(&proc_control_B.zopt[0], 0, 9U * sizeof(real_T));
    }

    *status = proc_control_B.kidx;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      u[proc_control_B.kidx] = (old_u[proc_control_B.kidx] +
        proc_control_B.zopt[proc_control_B.kidx]) + b_uoff[proc_control_B.kidx];
    }

    std::memset(&proc_control_B.b_B_d[0], 0, sizeof(real_T) << 6U);
    proc_control_B.kidx_g = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.b_B_d[proc_control_B.kidx_g] = 1.0;
      proc_control_B.kidx_g += 9;
    }

    proc_control_B.kidx = -1;
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 10;
         proc_control_B.Tries++) {
      for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 8; proc_control_B.i_fo
           ++) {
        for (proc_control_B.kidx_g = 0; proc_control_B.kidx_g < 10;
             proc_control_B.kidx_g++) {
          for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 8;
               proc_control_B.i2_c++) {
            proc_control_B.a_m[(proc_control_B.kidx + proc_control_B.i2_c) + 1] =
              static_cast<int8_T>(c_A[10 * proc_control_B.Tries +
                                  proc_control_B.kidx_g] * static_cast<int32_T>
                                  (proc_control_B.b_B_d[(proc_control_B.i_fo <<
              3) + proc_control_B.i2_c]));
          }

          proc_control_B.kidx += 8;
        }
      }
    }

    proc_control_B.i_fo = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 80;
           proc_control_B.Tries++) {
        proc_control_B.s_b = 0.0;
        proc_control_B.kidx_g = 0;
        for (proc_control_B.i2_c = 0; proc_control_B.i2_c < 80;
             proc_control_B.i2_c++) {
          proc_control_B.s_b += static_cast<real_T>
            (proc_control_B.a_m[proc_control_B.kidx_g + proc_control_B.Tries]) *
            b_Jm[proc_control_B.i2_c + proc_control_B.i_fo];
          proc_control_B.kidx_g += 80;
        }

        proc_control_B.I2Jm[proc_control_B.Tries + proc_control_B.i_fo] =
          proc_control_B.s_b;
      }

      proc_control_B.b_Wu[proc_control_B.kidx] = old_u[proc_control_B.kidx] +
        b_uoff[proc_control_B.kidx];
      proc_control_B.i_fo += 80;
    }

    for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 80; proc_control_B.i_fo
         ++) {
      proc_control_B.s_b = 0.0;
      proc_control_B.normH = 0.0;
      proc_control_B.kidx = 0;
      for (proc_control_B.Tries = 0; proc_control_B.Tries < 8;
           proc_control_B.Tries++) {
        proc_control_B.kidx_g = proc_control_B.kidx + proc_control_B.i_fo;
        proc_control_B.s_b += proc_control_B.I2Jm[proc_control_B.kidx_g] *
          proc_control_B.zopt[proc_control_B.Tries];
        proc_control_B.normH += b_I1[proc_control_B.kidx_g] *
          proc_control_B.b_Wu[proc_control_B.Tries];
        proc_control_B.kidx += 80;
      }

      proc_control_B.a_m0[proc_control_B.i_fo] = proc_control_B.s_b +
        proc_control_B.normH;
    }

    proc_control_B.i_fo = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      proc_control_B.Tries = 0;
      for (proc_control_B.kidx_g = 0; proc_control_B.kidx_g < 10;
           proc_control_B.kidx_g++) {
        useq[proc_control_B.kidx_g + proc_control_B.i_fo] =
          proc_control_B.a_m0[proc_control_B.Tries + proc_control_B.kidx];
        proc_control_B.Tries += 8;
      }

      useq[proc_control_B.i_fo + 10] = useq[proc_control_B.i_fo + 9];
      proc_control_B.i_fo += 11;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_isfinite(const real_T x[8], boolean_T b[8])
{
  for (int32_T i{0}; i < 8; i++) {
    real_T x_0;
    x_0 = x[i];
    b[i] = ((!std::isinf(x_0)) && (!std::isnan(x_0)));
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_mtimes_e(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2])
{
  int32_T mc;
  static const int8_T d[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  mc = A_size[0] - 1;
  C_size[0] = A_size[0];
  C_size[1] = 8;
  for (int32_T j{0}; j < 8; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = (mc + 1) * j;
    boffset = j * 80;
    if (mc >= 0) {
      std::memset(&C_data[coffset], 0, static_cast<uint32_T>(((mc + coffset) -
        coffset) + 1) * sizeof(real_T));
    }

    for (int32_T b{0}; b < 80; b++) {
      int32_T aoffset;
      int32_T bkj;
      aoffset = b * A_size[0];
      bkj = d[boffset + b];
      for (int32_T b_i{0}; b_i <= mc; b_i++) {
        int32_T tmp;
        tmp = coffset + b_i;
        C_data[tmp] += A_data[aoffset + b_i] * static_cast<real_T>(bkj);
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_getUBounds(const real_T runtimedata_lastMV[8],
  const real_T runtimedata_MVMin[80], const real_T runtimedata_MVMax[80], const
  real_T runtimedata_MVRateMin[80], const real_T runtimedata_MVRateMax[80],
  real_T A_data[], int32_T A_size[2], real_T Bu_data[], int32_T Bu_size[1])
{
  int32_T i;
  int32_T idx;
  boolean_T exitg1;
  std::memset(&proc_control_B.Au[0], 0, 25600U * sizeof(real_T));
  std::memset(&proc_control_B.b_Bu[0], 0, 320U * sizeof(real_T));
  std::memset(&proc_control_B.x[0], 0, 320U * sizeof(boolean_T));
  for (i = 0; i < 8; i++) {
    proc_control_B.ic_a[i] = static_cast<real_T>(i) + 1.0;
  }

  std::memset(&proc_control_B.As[0], 0, sizeof(int8_T) << 6U);
  i = 0;
  for (idx = 0; idx < 8; idx++) {
    proc_control_B.As[i] = 1;
    i += 9;
  }

  for (i = 0; i < 64; i++) {
    idx = proc_control_B.As[i];
    proc_control_B.Au_tmp[i] = static_cast<int8_T>(idx);
    proc_control_B.Au_tmp_i[i] = static_cast<int8_T>(-idx);
  }

  for (idx = 0; idx < 10; idx++) {
    for (i = 0; i < 8; i++) {
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMin[10 * i +
        idx];
    }

    proc_control_isfinite(proc_control_B.runtimedata_MVRateMin,
                          proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_a[i]) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMax[10 * i +
        idx];
    }

    proc_control_isfinite(proc_control_B.runtimedata_MVRateMin,
                          proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_a[i] + 8.0) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVMin[10 * i + idx];
    }

    proc_control_isfinite(proc_control_B.runtimedata_MVRateMin,
                          proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_a[i] + 16.0) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVMax[10 * i + idx];
    }

    proc_control_isfinite(proc_control_B.runtimedata_MVRateMin,
                          proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_a[i] + 24.0) - 1] =
        proc_control_B.bv3[i];
      for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_a[proc_control_B.k_p]) + 320 * i)
                           + 2560 * idx) - 1] = proc_control_B.Au_tmp_i[(i << 3)
          + proc_control_B.k_p];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_a[proc_control_B.k_p] + 8.0) +
                            320 * i) + 2560 * idx) - 1] = proc_control_B.Au_tmp
          [(i << 3) + proc_control_B.k_p];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_a[proc_control_B.k_p] + 16.0) +
                            320 * i) + 2560 * idx) - 1] =
          proc_control_B.Au_tmp_i[(i << 3) + proc_control_B.k_p];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_a[proc_control_B.k_p] + 24.0) +
                            320 * i) + 2560 * idx) - 1] = proc_control_B.Au_tmp
          [(i << 3) + proc_control_B.k_p];
      }

      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_a[i]) - 1] =
        -runtimedata_MVRateMin[10 * i + idx];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_a[i] + 8.0) - 1]
        = runtimedata_MVRateMax[10 * i + idx];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_a[i] + 16.0) -
        1] = -runtimedata_MVMin[10 * i + idx];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_a[i] + 24.0) -
        1] = runtimedata_MVMax[10 * i + idx];
    }

    if (idx + 1 == 1) {
      for (i = 0; i < 8; i++) {
        proc_control_B.d_i = runtimedata_lastMV[i];
        proc_control_B.d[i] = proc_control_B.d_i;
        proc_control_B.runtimedata_MVRateMin[i] = proc_control_B.b_Bu[
          static_cast<int32_T>(proc_control_B.ic_a[i]) - 1] - proc_control_B.d_i;
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_a[i]) - 1] =
          proc_control_B.runtimedata_MVRateMin[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.runtimedata_MVRateMin[i] = proc_control_B.b_Bu[
          static_cast<int32_T>(proc_control_B.ic_a[i] + 8.0) - 1] +
          proc_control_B.d[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_a[i] + 8.0) -
          1] = proc_control_B.runtimedata_MVRateMin[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_a[proc_control_B.k_p]) + 320 *
                              i) + 2560 * (idx - 1)) - 1] =
            proc_control_B.Au_tmp[(i << 3) + proc_control_B.k_p];
        }
      }

      for (i = 0; i < 8; i++) {
        for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_a[proc_control_B.k_p] + 8.0) +
                              320 * i) + 2560 * (idx - 1)) - 1] =
            proc_control_B.Au_tmp_i[(i << 3) + proc_control_B.k_p];
        }
      }
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.ic_a[i] += 32.0;
    }
  }

  idx = 0;
  i = 0;
  exitg1 = false;
  while ((!exitg1) && (i < 320)) {
    if (proc_control_B.x[i]) {
      idx++;
      proc_control_B.ii_data[idx - 1] = static_cast<int16_T>(i + 1);
      if (idx >= 320) {
        exitg1 = true;
      } else {
        i++;
      }
    } else {
      i++;
    }
  }

  if (idx < 1) {
    idx = 0;
  }

  if (idx > 0) {
    Bu_size[0] = idx;
    for (i = 0; i < idx; i++) {
      Bu_data[i] = proc_control_B.b_Bu[proc_control_B.ii_data[i] - 1];
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_p = 0; proc_control_B.k_p < 10; proc_control_B.k_p++)
      {
        for (proc_control_B.b_i_e = 0; proc_control_B.b_i_e < idx;
             proc_control_B.b_i_e++) {
          proc_control_B.Auf_data[(proc_control_B.b_i_e + idx * i) + (idx << 3) *
            proc_control_B.k_p] = proc_control_B.Au[((320 * i +
            proc_control_B.ii_data[proc_control_B.b_i_e]) + 2560 *
            proc_control_B.k_p) - 1];
        }
      }
    }

    proc_control_B.idx[0] = idx;
    proc_control_B.idx[1] = 80;
    proc_control_mtimes_e(proc_control_B.Auf_data, proc_control_B.idx,
                          proc_control_B.tmp_data_ld, proc_control_B.tmp_size_j);
    A_size[0] = idx;
    A_size[1] = 139;
    proc_control_B.k_p = idx * 130;
    std::memset(&A_data[0], 0, static_cast<uint32_T>(proc_control_B.k_p) *
                sizeof(real_T));
    proc_control_B.k_p = idx << 3;
    for (i = 0; i < proc_control_B.k_p; i++) {
      A_data[i + idx * 130] = proc_control_B.tmp_data_ld[i];
    }

    std::memset(&A_data[idx * 130 + proc_control_B.k_p], 0, static_cast<uint32_T>
                ((((idx + idx * 130) + proc_control_B.k_p) - idx * 130) -
                 proc_control_B.k_p) * sizeof(real_T));
  } else {
    Bu_size[0] = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_getXUe(const real_T z[139], const real_T x[13],
  real_T X[143], real_T U[88], real_T *e)
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  static const int8_T y_0[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1
  };

  std::memset(&X[0], 0, 143U * sizeof(real_T));
  std::memset(&proc_control_B.Umv[0], 0, 88U * sizeof(real_T));
  for (i = 0; i < 80; i++) {
    real_T y;
    y = 0.0;
    i_1 = 0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      y += static_cast<real_T>(y_0[i_1 + i]) * z[i_0 + 130];
      i_1 += 80;
    }

    proc_control_B.y_j[i] = y;
  }

  i = 0;
  for (i_1 = 0; i_1 < 8; i_1++) {
    i_0 = 0;
    for (int32_T U_tmp{0}; U_tmp < 10; U_tmp++) {
      proc_control_B.Umv[U_tmp + i] = proc_control_B.y_j[i_0 + i_1];
      i_0 += 8;
    }

    i += 11;
  }

  *e = z[138];
  std::memcpy(&proc_control_B.z_f[0], &z[0], 130U * sizeof(real_T));
  i = 0;
  for (i_1 = 0; i_1 < 13; i_1++) {
    i_0 = 0;
    for (int32_T U_tmp{0}; U_tmp < 10; U_tmp++) {
      X[(U_tmp + i) + 1] = proc_control_B.z_f[i_0 + i_1];
      i_0 += 13;
    }

    X[i] = x[i_1];
    i += 11;
  }

  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_B.Umv[i_1 + 10] = proc_control_B.Umv[i_1 + 9];
    std::memcpy(&U[i_1], &proc_control_B.Umv[i_1], 11U * sizeof(real_T));
    i_1 += 11;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_con_AUV8QuatJacobianMatrix(const real_T in1[13], real_T
  Anqv[169])
{
  real_T t29_tmp;
  proc_control_B.t2 = std::abs(in1[10]);
  proc_control_B.t3 = std::abs(in1[11]);
  proc_control_B.t4 = std::abs(in1[12]);
  proc_control_B.t5_c = std::abs(in1[7]);
  proc_control_B.t6_b = std::abs(in1[8]);
  proc_control_B.t7 = std::abs(in1[9]);
  if (std::isnan(in1[10])) {
    proc_control_B.t8 = (rtNaN);
  } else if (in1[10] < 0.0) {
    proc_control_B.t8 = -1.0;
  } else {
    proc_control_B.t8 = (in1[10] > 0.0);
  }

  if (std::isnan(in1[11])) {
    proc_control_B.t9 = (rtNaN);
  } else if (in1[11] < 0.0) {
    proc_control_B.t9 = -1.0;
  } else {
    proc_control_B.t9 = (in1[11] > 0.0);
  }

  if (std::isnan(in1[12])) {
    proc_control_B.t10 = (rtNaN);
  } else if (in1[12] < 0.0) {
    proc_control_B.t10 = -1.0;
  } else {
    proc_control_B.t10 = (in1[12] > 0.0);
  }

  if (std::isnan(in1[7])) {
    proc_control_B.t11 = (rtNaN);
  } else if (in1[7] < 0.0) {
    proc_control_B.t11 = -1.0;
  } else {
    proc_control_B.t11 = (in1[7] > 0.0);
  }

  if (std::isnan(in1[8])) {
    proc_control_B.t12 = (rtNaN);
  } else if (in1[8] < 0.0) {
    proc_control_B.t12 = -1.0;
  } else {
    proc_control_B.t12 = (in1[8] > 0.0);
  }

  if (std::isnan(in1[9])) {
    proc_control_B.t13_p = (rtNaN);
  } else if (in1[9] < 0.0) {
    proc_control_B.t13_p = -1.0;
  } else {
    proc_control_B.t13_p = (in1[9] > 0.0);
  }

  proc_control_B.t17_i = in1[4] * in1[5] * 2.0;
  proc_control_B.t18_o = in1[4] * in1[6] * 2.0;
  proc_control_B.t19_n = in1[5] * in1[6] * 2.0;
  proc_control_B.t20_m = in1[3] * in1[4] * 2.0;
  proc_control_B.t21_m = in1[3] * in1[5] * 2.0;
  proc_control_B.t22_d = in1[3] * in1[6] * 2.0;
  proc_control_B.t23_i = in1[4] * in1[7] * 2.0;
  proc_control_B.t24_tmp_d = in1[5] * in1[7];
  proc_control_B.t24_e = proc_control_B.t24_tmp_d * 2.0;
  proc_control_B.t25_tmp_p = in1[6] * in1[7];
  proc_control_B.t25_k = proc_control_B.t25_tmp_p * 2.0;
  proc_control_B.t26_p = in1[3] * in1[7] * 2.0;
  proc_control_B.t27_tmp = in1[4] * in1[8];
  proc_control_B.t27_j = proc_control_B.t27_tmp * 2.0;
  proc_control_B.t28_c = in1[5] * in1[8] * 2.0;
  t29_tmp = in1[6] * in1[8];
  proc_control_B.t29_b = t29_tmp * 2.0;
  proc_control_B.t30_l = in1[3] * in1[8] * 2.0;
  proc_control_B.t31_tmp = in1[4] * in1[9];
  proc_control_B.t31_n = proc_control_B.t31_tmp * 2.0;
  proc_control_B.t32_tmp_b = in1[5] * in1[9];
  proc_control_B.t32_a = proc_control_B.t32_tmp_b * 2.0;
  proc_control_B.t33_n = in1[6] * in1[9] * 2.0;
  proc_control_B.t34_d = in1[3] * in1[9] * 2.0;
  proc_control_B.t39_g = in1[4] / 2.0;
  proc_control_B.t40_f = in1[5] / 2.0;
  proc_control_B.t41_g = in1[6] / 2.0;
  proc_control_B.t42_l = in1[3] / 2.0;
  proc_control_B.t43_l = in1[10] / 2.0;
  proc_control_B.t44_o = in1[11] / 2.0;
  proc_control_B.t45_k = in1[12] / 2.0;
  proc_control_B.t55_g = in1[12] * 1.0571299073092789E-5;
  proc_control_B.t56_k = in1[11] * 9.7602896722846373E-5;
  proc_control_B.t57_j = in1[8] * 0.01129023503850542;
  proc_control_B.t58_k = in1[7] * 0.00477039452928936;
  proc_control_B.t59_g = in1[10] * 9.1703771260780813E-5;
  proc_control_B.t61_h = in1[9] * 0.143523560675718;
  proc_control_B.t62_m = in1[7] * 0.00568699616459184;
  proc_control_B.t65 = in1[9] * 0.069014505171846527;
  proc_control_B.t68_k = in1[8] * 0.0071670223909459834;
  proc_control_B.t35_c = in1[4] * in1[4] * 2.0;
  proc_control_B.t36_h = in1[5] * in1[5] * 2.0;
  proc_control_B.t37_h = in1[6] * in1[6] * 2.0;
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_B.t29_b + proc_control_B.t32_a;
  Anqv[40] = proc_control_B.t25_k - proc_control_B.t31_n;
  Anqv[41] = -proc_control_B.t24_e + proc_control_B.t27_j;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_B.t43_l;
  Anqv[44] = proc_control_B.t44_o;
  Anqv[45] = proc_control_B.t45_k;
  Anqv[46] = in1[4] * -0.0013017970932508 + in1[5] * 0.4138016519122657;
  Anqv[47] = in1[4] * -0.51979016069898065 + in1[5] * 0.00099202109956931486;
  Anqv[48] = in1[4] * 0.033540735888224739 - in1[5] * 0.0058758415205803329;
  Anqv[49] = in1[4] * -25.242114556122988 + in1[5] * 0.1138522338822895;
  Anqv[50] = in1[4] * 0.1184627304742461 - in1[5] * 8.6371397256799973;
  Anqv[51] = in1[4] * 0.38451002147839958 + in1[5] * 0.65361132374006825;
  Anqv[52] = proc_control_B.t28_c + proc_control_B.t33_n;
  Anqv[53] = (proc_control_B.t24_e - proc_control_B.t34_d) -
    proc_control_B.t27_tmp * 4.0;
  Anqv[54] = (proc_control_B.t25_k + proc_control_B.t30_l) -
    proc_control_B.t31_tmp * 4.0;
  Anqv[55] = -proc_control_B.t43_l;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_B.t45_k;
  Anqv[58] = proc_control_B.t44_o;
  Anqv[59] = (in1[4] * -0.01263905936484723 - in1[6] * 0.4138016519122657) -
    in1[3] * 0.0013017970932508;
  Anqv[60] = (in1[4] * -0.05386046241846134 - in1[6] * 0.00099202109956931486) -
    in1[3] * 0.51979016069898065;
  Anqv[61] = (in1[4] * 0.37271497842704371 + in1[6] * 0.0058758415205803329) +
    in1[3] * 0.033540735888224739;
  Anqv[62] = (in1[4] * -4.2094140168137981 - in1[6] * 0.1138522338822895) - in1
    [3] * 25.242114556122988;
  Anqv[63] = (in1[4] * 0.73643595165049924 + in1[6] * 8.6371397256799973) + in1
    [3] * 0.1184627304742461;
  Anqv[64] = (in1[4] * 0.009785912146552939 - in1[6] * 0.65361132374006825) +
    in1[3] * 0.38451002147839958;
  Anqv[65] = (proc_control_B.t27_j + proc_control_B.t34_d) -
    proc_control_B.t24_tmp_d * 4.0;
  Anqv[66] = proc_control_B.t23_i + proc_control_B.t33_n;
  Anqv[67] = (-proc_control_B.t26_p + proc_control_B.t29_b) -
    proc_control_B.t32_tmp_b * 4.0;
  Anqv[68] = -proc_control_B.t44_o;
  Anqv[69] = proc_control_B.t45_k;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_B.t43_l;
  Anqv[72] = (in1[5] * -0.01263905936484723 - in1[6] * 0.0013017970932508) +
    in1[3] * 0.4138016519122657;
  Anqv[73] = (in1[5] * -0.05386046241846134 - in1[6] * 0.51979016069898065) +
    in1[3] * 0.00099202109956931486;
  Anqv[74] = (in1[5] * 0.37271497842704371 + in1[6] * 0.033540735888224739) -
    in1[3] * 0.0058758415205803329;
  Anqv[75] = (in1[5] * -4.2094140168137981 - in1[6] * 25.242114556122988) + in1
    [3] * 0.1138522338822895;
  Anqv[76] = (in1[5] * 0.73643595165049924 + in1[6] * 0.1184627304742461) - in1
    [3] * 8.6371397256799973;
  Anqv[77] = (in1[5] * 0.009785912146552939 + in1[6] * 0.38451002147839958) +
    in1[3] * 0.65361132374006825;
  Anqv[78] = (-proc_control_B.t30_l + proc_control_B.t31_n) -
    proc_control_B.t25_tmp_p * 4.0;
  Anqv[79] = (proc_control_B.t26_p + proc_control_B.t32_a) - t29_tmp * 4.0;
  Anqv[80] = proc_control_B.t23_i + proc_control_B.t28_c;
  Anqv[81] = -proc_control_B.t45_k;
  Anqv[82] = -proc_control_B.t44_o;
  Anqv[83] = proc_control_B.t43_l;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.4138016519122657 - in1[5] * 0.0013017970932508;
  Anqv[86] = in1[4] * -0.00099202109956931486 - in1[5] * 0.51979016069898065;
  Anqv[87] = in1[4] * 0.0058758415205803329 + in1[5] * 0.033540735888224739;
  Anqv[88] = in1[4] * -0.1138522338822895 - in1[5] * 25.242114556122988;
  Anqv[89] = in1[4] * 8.6371397256799973 + in1[5] * 0.1184627304742461;
  Anqv[90] = in1[4] * -0.65361132374006825 + in1[5] * 0.38451002147839958;
  Anqv[91] = (-proc_control_B.t36_h - proc_control_B.t37_h) + 1.0;
  Anqv[92] = proc_control_B.t17_i + proc_control_B.t22_d;
  Anqv[93] = proc_control_B.t18_o - proc_control_B.t21_m;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_B.t11 *= in1[7];
  Anqv[98] = (((((proc_control_B.t5_c * -0.036243063166504788 +
                  proc_control_B.t55_g) + proc_control_B.t56_k) -
                proc_control_B.t57_j) - proc_control_B.t61_h) -
              proc_control_B.t11 * 0.036243063166504788) - 0.46465465598083061;
  Anqv[99] = (((in1[8] * 0.00477039452928936 - in1[9] * 0.001468966557066211) -
               proc_control_B.t11 * 1.109195745194835E-6) - 1.422045827172866E-5)
    + ((in1[11] * 0.00041592787873873338 - in1[12] * 0.74121409319149256) -
       proc_control_B.t5_c * 1.109195745194835E-6);
  Anqv[100] = (((in1[8] * -5.890830655932608E-5 + in1[9] * 0.00568699616459184)
                + proc_control_B.t11 * 7.9830677445685858E-6) +
               0.0001023470223662639) + ((in1[11] * 0.69409782663856512 - in1[12]
    * 0.00032422410747795261) + proc_control_B.t5_c * 7.9830677445685858E-6);
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - proc_control_B.t5_c * 0.0001525121428377004) + ((in1[8] *
    0.044446246736648841 - in1[9] * 0.1148218101592509) - proc_control_B.t11 *
    0.0001525121428377004)) - 0.0019552838825346208;
  Anqv[102] = (((in1[8] * 1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
                proc_control_B.t11 * 0.011738978516892359) + 0.150499724575543)
    + ((in1[11] * -0.00568699616459184 - in1[12] * 0.001145088836853196) +
       proc_control_B.t5_c * 0.011738978516892359);
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - proc_control_B.t5_c *
                0.0011846302503005471) + ((in1[8] * -5.91169722427816 - in1[9] *
    2.2977499514997389E-5) - proc_control_B.t11 * 0.0011846302503005471)) -
    0.015187567311545479;
  Anqv[104] = proc_control_B.t17_i - proc_control_B.t22_d;
  Anqv[105] = (-proc_control_B.t35_c - proc_control_B.t37_h) + 1.0;
  Anqv[106] = proc_control_B.t19_n + proc_control_B.t20_m;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_B.t11 = proc_control_B.t12 * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - proc_control_B.t6_b * 7.7738505218783331E-7) - in1[7] *
               0.01129023503850542) + ((in1[9] * -0.00041111798914172931 -
    proc_control_B.t11 * 7.7738505218783331E-7) - 1.8960611028971542E-5);
  Anqv[112] = (((((proc_control_B.t6_b * -0.01903042325061665 +
                   proc_control_B.t55_g) + proc_control_B.t58_k) -
                 proc_control_B.t59_g) - proc_control_B.t65) -
               proc_control_B.t11 * 0.01903042325061665) - 0.46415666464918648;
  Anqv[113] = (((in1[7] * -5.890830655932608E-5 + in1[9] * 0.0071670223909459834)
                + proc_control_B.t11 * 2.3842573459475649E-5) +
               0.00058152618193843065) + ((in1[10] * -0.93255469429176219 - in1
    [12] * 7.6083411800115719E-5) + proc_control_B.t6_b * 2.3842573459475649E-5);
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - proc_control_B.t6_b *
                0.017943464992838758) + ((in1[7] * 0.044446246736648841 - in1[9]
    * 5.3937622658585171) - proc_control_B.t11 * 0.017943464992838758)) -
    0.4376454876302136;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + proc_control_B.t6_b * 8.4206769578830268E-5) + in1[7] *
               1.7911420833141059E-5) + ((proc_control_B.t11 *
    8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
    0.0020538236482641531);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + proc_control_B.t6_b * 0.00035080205133418912) + ((in1[7] *
    -5.91169722427816 + in1[9] * 0.01257120723021817) + proc_control_B.t11 *
    0.00035080205133418912)) + 0.0085561475935168052;
  Anqv[117] = proc_control_B.t18_o + proc_control_B.t21_m;
  Anqv[118] = proc_control_B.t19_n - proc_control_B.t20_m;
  Anqv[119] = (-proc_control_B.t35_c - proc_control_B.t36_h) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_B.t11 = proc_control_B.t13_p * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + proc_control_B.t7 * 5.1582899272597018E-6) - in1[7] *
               0.143523560675718) + ((proc_control_B.t11 * 5.1582899272597018E-6
    + in1[8] * -0.00041111798914172931) + 0.0001592064792364106);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + proc_control_B.t7 * 2.1981689677272681E-5) + ((in1[7] *
    -0.001468966557066211 - in1[8] * 0.069014505171846527) + proc_control_B.t11 *
    2.1981689677272681E-5)) + 0.00067844721226150231;
  Anqv[126] = (((((proc_control_B.t7 * -0.01616685726098728 +
                   proc_control_B.t56_k) - proc_control_B.t59_g) +
                 proc_control_B.t62_m) + proc_control_B.t68_k) -
               proc_control_B.t11 * 0.01616685726098728) - 0.49897707595639768;
  Anqv[127] = (((in1[10] * 0.069014505171846527 - in1[11] *
                 0.0018646499569661989) + proc_control_B.t7 *
                0.00171795837774031) + ((in1[7] * -0.1148218101592509 - in1[8] *
    5.3937622658585171) + proc_control_B.t11 * 0.00171795837774031)) +
    0.053023406720379938;
  Anqv[128] = (((in1[10] * -0.00032387772021301561 + in1[11] * 0.143523560675718)
                - proc_control_B.t7 * 0.00030055639757781919) + ((in1[7] *
    8.3502908029033716 + in1[8] * 0.025315910649035739) - proc_control_B.t11 *
    0.00030055639757781919)) - 0.0092764320240067664;
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - proc_control_B.t7 * 3.993855127780116E-6)
               - in1[7] * 2.2977499514997389E-5) + ((in1[8] *
    0.01257120723021817 - proc_control_B.t11 * 3.993855127780116E-6) -
    0.00012326713357346041);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_B.t39_g;
  Anqv[134] = proc_control_B.t42_l;
  Anqv[135] = proc_control_B.t41_g;
  Anqv[136] = -proc_control_B.t40_f;
  proc_control_B.t11 = in1[10] * proc_control_B.t8;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) -
               proc_control_B.t2 * 2.1768827225552109E-5) + (((in1[8] *
    -2.1519484922730651E-5 + in1[9] * 2.989993556213668E-6) - proc_control_B.t11
    * 2.1768827225552109E-5) - 0.00043450752945213789);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                proc_control_B.t2 * 0.0036543398217122828) + ((in1[8] *
    -9.1703771260780813E-5 + in1[9] * 1.0731951852318531) - proc_control_B.t11 *
    0.0036543398217122828)) - 0.072940914605035587;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((proc_control_B.t2 * 0.0003794960966701478 - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5)) +
    (proc_control_B.t11 * 0.0003794960966701478 + 0.007574772388625705);
  Anqv[140] = ((((proc_control_B.t2 * -0.28560141361437341 + proc_control_B.t65)
                 - proc_control_B.t68_k) - proc_control_B.t11 *
                0.28560141361437341) - 5.7006270182509668) + ((in1[10] *
    0.00017692814721597281 - in1[11] * 0.00301187450220627) + in1[12] *
    0.0032852614324183722);
  Anqv[141] = (((in1[10] * 0.005100926963153893 + in1[11] * 7.54282242443926E-5)
                + in1[12] * 0.76112100692746432) + ((proc_control_B.t2 *
    0.0013404854555911631 + in1[8] * 0.0012538688125934979) - in1[9] *
    0.00032387772021301561)) + (proc_control_B.t11 * 0.0013404854555911631 +
    0.026756196718386482);
  Anqv[142] = (((in1[10] * -0.0085297096290247246 - in1[11] *
                 0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
               ((proc_control_B.t2 * 0.00066564938883491385 + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331)) +
    (proc_control_B.t11 * 0.00066564938883491385 + 0.013286414946804669);
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_B.t40_f;
  Anqv[147] = -proc_control_B.t41_g;
  Anqv[148] = proc_control_B.t42_l;
  Anqv[149] = proc_control_B.t39_g;
  proc_control_B.t11 = in1[11] * proc_control_B.t9;
  Anqv[150] = ((((in1[10] * -0.0030560301354578762 + in1[11] *
                  0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
                proc_control_B.t3 * 0.001003331497170287) + ((in1[7] *
    9.7602896722846373E-5 - in1[9] * 1.4431163638272659) + proc_control_B.t11 *
    0.001003331497170287)) + 0.0234110682673067;
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
               proc_control_B.t3 * 1.026911824132076E-5) + (((in1[7] *
    0.00041592787873873338 - in1[9] * 1.356129262930646E-5) + proc_control_B.t11
    * 1.026911824132076E-5) + 0.00023961275896415121);
  Anqv[152] = (((in1[10] * 4.0426879502317728E-6 + in1[11] *
                 0.023860477346842442) - in1[12] * 0.000941018323416786) +
               ((proc_control_B.t3 * -3.9756137245743291E-5 + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5)) +
    (proc_control_B.t11 * -3.9756137245743291E-5 - 0.00092764320240067675);
  Anqv[153] = (((in1[10] * -0.00301187450220627 + in1[11] *
                 0.00082864946354184129) - in1[12] * 0.291807921220024) +
               ((proc_control_B.t3 * 0.00080268590155159437 + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989)) +
    (proc_control_B.t11 * 0.00080268590155159437 + 0.018729337702870542);
  Anqv[154] = ((((proc_control_B.t3 * -0.058374455968341669 +
                  proc_control_B.t61_h) - proc_control_B.t62_m) -
                proc_control_B.t11 * 0.058374455968341669) - 1.362070639261306)
    + ((in1[10] * 7.54282242443926E-5 - in1[11] * 0.00019446645525741661) - in1
       [12] * 0.003324115892995542);
  Anqv[155] = ((((proc_control_B.t3 * 1.6062902063655571E-7 - in1[7] *
                  7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
                proc_control_B.t11 * 1.6062902063655571E-7) + ((in1[10] *
    -0.59953739020136265 + in1[11] * 0.0085432434746820687) + in1[12] *
    0.0030111351640179931)) + 3.7480104815196341E-6;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_B.t41_g;
  Anqv[160] = proc_control_B.t40_f;
  Anqv[161] = -proc_control_B.t39_g;
  Anqv[162] = proc_control_B.t42_l;
  proc_control_B.t11 = in1[12] * proc_control_B.t10;
  Anqv[163] = (((in1[10] * -0.030270009262121408 + in1[11] *
                 6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
               proc_control_B.t4 * 0.0001032754577185093) + (((in1[7] *
    1.0571299073092789E-5 + in1[8] * 1.3454180758607359) - proc_control_B.t11 *
    0.0001032754577185093) - 0.0050625224371818262);
  Anqv[164] = (((in1[10] * 4.2079285691049859E-5 - in1[11] *
                 0.016528998001422841) + in1[12] * 0.00283488707941543) +
               proc_control_B.t4 * 4.3636352726935713E-5) + (((in1[7] *
    -0.74121409319149256 + in1[8] * 1.0571299073092789E-5) + proc_control_B.t11 *
    4.3636352726935713E-5) + 0.0021390368983792022);
  Anqv[165] = ((((proc_control_B.t4 * -5.3885346962112674E-7 - in1[7] *
                  0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
                proc_control_B.t11 * 5.3885346962112674E-7) + ((in1[10] *
    -0.00016269010774240791 - in1[11] * 0.000941018323416786) - in1[12] *
    2.6641242336162E-6)) - 2.6414385765741509E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((proc_control_B.t4 *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (proc_control_B.t11 * 0.00040656429737222281 +
    0.019929622420207);
  Anqv[167] = ((((proc_control_B.t4 * 1.6384160104928689E-7 - in1[7] *
                  0.001145088836853196) - in1[8] * 0.1118794885864644) +
                proc_control_B.t11 * 1.6384160104928689E-7) + ((in1[10] *
    0.76112100692746432 - in1[11] * 0.003324115892995542) - in1[12] *
    0.005288701994301117)) + 8.0314510318277867E-6;
  Anqv[168] = ((((proc_control_B.t4 * -0.054076220260104418 +
                  proc_control_B.t57_j) - proc_control_B.t58_k) -
                proc_control_B.t11 * 0.054076220260104418) - 2.6507951107894319)
    + ((in1[10] * -6.8948828938803766E-5 + in1[11] * 0.0030111351640179931) +
       in1[12] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_stateEvolution(const real_T X[143], const real_T
  U[88], real_T c[130], real_T J[18070])
{
  int32_T Ak1_tmp;
  int32_T Jx_tmp;
  int32_T i;
  int32_T i_0;
  int32_T k;
  int32_T tmp;
  static const int8_T b[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T val[104]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  std::memset(&proc_control_B.Jx_k[0], 0, 16900U * sizeof(real_T));
  std::memset(&proc_control_B.Jmv[0], 0, 10400U * sizeof(real_T));
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
    proc_control_B.ic_o[Jx_tmp] = static_cast<real_T>(Jx_tmp) + 1.0;
  }

  Jx_tmp = 0;
  for (i = 0; i < 8; i++) {
    Ak1_tmp = 0;
    for (k = 0; k < 11; k++) {
      proc_control_B.b_U_p[Ak1_tmp + i] = U[k + Jx_tmp];
      Ak1_tmp += 8;
    }

    Jx_tmp += 11;
  }

  Jx_tmp = 0;
  for (k = 0; k < 11; k++) {
    i = 0;
    for (Ak1_tmp = 0; Ak1_tmp < 13; Ak1_tmp++) {
      proc_control_B.b_X_m[Ak1_tmp + Jx_tmp] = X[i + k];
      i += 11;
    }

    Jx_tmp += 13;
  }

  for (i = 0; i < 10; i++) {
    proc_con_AUV8QuatJacobianMatrix(&proc_control_B.b_X_m[13 * i],
      proc_control_B.Ak);
    Ak1_tmp = (i + 1) * 13;
    proc_con_AUV8QuatJacobianMatrix(&proc_control_B.b_X_m[Ak1_tmp],
      proc_control_B.Ak1);
    Jx_tmp = i << 3;
    proc_control_AUV8QuatSimFcn(&proc_control_B.b_X_m[13 * i],
      &proc_control_B.b_U_p[Jx_tmp], proc_control_B.dv16);
    proc_control_AUV8QuatSimFcn(&proc_control_B.b_X_m[Ak1_tmp],
      &proc_control_B.b_U_p[Jx_tmp], proc_control_B.dv17);
    for (k = 0; k < 13; k++) {
      c[static_cast<int32_T>(proc_control_B.ic_o[k]) - 1] =
        (proc_control_B.b_X_m[13 * i + k] + (proc_control_B.dv16[k] +
          proc_control_B.dv17[k]) * 0.05) - proc_control_B.b_X_m[Ak1_tmp + k];
      if (i + 1 > 1) {
        for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
          proc_control_B.Jx_k[((static_cast<int32_T>(proc_control_B.ic_o[Jx_tmp])
                                + 130 * k) + 1690 * (i - 1)) - 1] =
            proc_control_B.Ak[13 * k + Jx_tmp] * 0.05;
        }

        Jx_tmp = ((130 * k + static_cast<int32_T>(proc_control_B.ic_o[k])) + (i
                   - 1) * 1690) - 1;
        proc_control_B.Jx_k[Jx_tmp]++;
      }
    }

    for (k = 0; k < 13; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_B.Jx_k[((static_cast<int32_T>(proc_control_B.ic_o[Jx_tmp])
                              + 130 * k) + 1690 * i) - 1] = proc_control_B.Ak1
          [13 * k + Jx_tmp] * 0.05;
      }

      Jx_tmp = ((130 * k + static_cast<int32_T>(proc_control_B.ic_o[k])) + 1690 *
                i) - 1;
      proc_control_B.Jx_k[Jx_tmp]--;
    }

    for (k = 0; k < 8; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_B.Jmv[((static_cast<int32_T>(proc_control_B.ic_o[Jx_tmp]) +
                             130 * k) + 1040 * i) - 1] = val[13 * k + Jx_tmp];
      }
    }

    for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
      proc_control_B.ic_o[Jx_tmp] += 13.0;
    }
  }

  Jx_tmp = 0;
  for (i = 0; i < 8; i++) {
    Ak1_tmp = 0;
    for (k = 0; k < 130; k++) {
      proc_control_B.Jmv_e = 0.0;
      tmp = 0;
      for (i_0 = 0; i_0 < 80; i_0++) {
        proc_control_B.Jmv_e += proc_control_B.Jmv[tmp + k] * static_cast<real_T>
          (b[i_0 + Jx_tmp]);
        tmp += 130;
      }

      proc_control_B.Jmv_n[Ak1_tmp + i] = proc_control_B.Jmv_e;
      Ak1_tmp += 8;
    }

    Jx_tmp += 80;
  }

  for (Jx_tmp = 0; Jx_tmp < 130; Jx_tmp++) {
    for (i = 0; i < 130; i++) {
      J[i + 139 * Jx_tmp] = proc_control_B.Jx_k[130 * i + Jx_tmp];
    }

    std::memcpy(&J[Jx_tmp * 139 + 130], &proc_control_B.Jmv_n[Jx_tmp << 3],
                sizeof(real_T) << 3U);
    J[139 * Jx_tmp + 138] = 0.0;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_all(const boolean_T x[130], boolean_T y[13])
{
  int32_T i2;
  i2 = 1;
  for (int32_T i{0}; i < 13; i++) {
    int32_T a;
    int32_T ix;
    boolean_T exitg1;
    y[i] = true;
    a = i2 + 9;
    ix = i2;
    i2 += 10;
    exitg1 = false;
    while ((!exitg1) && (ix <= a)) {
      if (!x[ix - 1]) {
        y[i] = false;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
boolean_T proc_control::proc_control_any(const boolean_T x[26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (x[k]) {
      y = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T Je_size[1], real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_B.Jx_g[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.loop_ub_p = Jx_size[0];
    for (proc_control_B.i7 = 0; proc_control_B.i7 < proc_control_B.loop_ub_p;
         proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < 130; proc_control_B.i6++)
      {
        proc_control_B.varargin_1_data[proc_control_B.i6 + 130 *
          proc_control_B.i7] = Jx_data[proc_control_B.Jx_g[0] *
          proc_control_B.i6 + proc_control_B.i7];
      }
    }

    proc_control_B.Jx_h[0] = Jx_size[0];
    proc_control_B.Jx_h[1] = 80;
    proc_control_mtimes_e(Jmv_data, proc_control_B.Jx_h,
                          proc_control_B.tmp_data_d, proc_control_B.tmp_size_l);
    proc_control_B.loop_ub_a = proc_control_B.tmp_size_l[0];
    for (proc_control_B.i7 = 0; proc_control_B.i7 < proc_control_B.loop_ub_a;
         proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < 8; proc_control_B.i6++) {
        proc_control_B.varargin_2_data_d[proc_control_B.i6 + (proc_control_B.i7 <<
          3)] = proc_control_B.tmp_data_d[proc_control_B.tmp_size_l[0] *
          proc_control_B.i6 + proc_control_B.i7];
      }
    }

    proc_control_B.Jx_g[0] = 130;
    if (proc_control_B.tmp_size_l[0] != 0) {
      proc_control_B.varargin_2[0] = 8;
    } else {
      proc_control_B.varargin_2[0] = 0;
    }

    proc_control_B.loop_ub_a = Je_size[0];
    if (proc_control_B.loop_ub_a - 1 >= 0) {
      std::memcpy(&proc_control_B.Je_data[0], &Je_data[0], static_cast<uint32_T>
                  (proc_control_B.loop_ub_a) * sizeof(real_T));
    }

    proc_control_B.Je_p[0] = (Je_size[0] != 0);
    Jc_size[0] = (proc_control_B.varargin_2[0] + proc_control_B.Je_p[0]) + 130;
    Jc_size[1] = Jx_size[0];
    proc_control_B.loop_ub_a = proc_control_B.varargin_2[0];
    proc_control_B.loop_ub_ev = proc_control_B.Je_p[0];
    for (proc_control_B.i7 = 0; proc_control_B.i7 < proc_control_B.loop_ub_p;
         proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < 130; proc_control_B.i6++)
      {
        Jc_data[proc_control_B.i6 + Jc_size[0] * proc_control_B.i7] =
          proc_control_B.varargin_1_data[proc_control_B.Jx_g[0] *
          proc_control_B.i7 + proc_control_B.i6];
      }

      for (proc_control_B.i6 = 0; proc_control_B.i6 < proc_control_B.loop_ub_a;
           proc_control_B.i6++) {
        Jc_data[(proc_control_B.i6 + Jc_size[0] * proc_control_B.i7) + 130] =
          proc_control_B.varargin_2_data_d[proc_control_B.varargin_2[0] *
          proc_control_B.i7 + proc_control_B.i6];
      }

      if (proc_control_B.loop_ub_ev - 1 >= 0) {
        Jc_data[(proc_control_B.varargin_2[0] + Jc_size[0] * proc_control_B.i7)
          + 130] = proc_control_B.Je_data[proc_control_B.Je_p[0] *
          proc_control_B.i7];
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_outputBounds(const real_T runtimedata_OutputMin
  [130], const real_T runtimedata_OutputMax[130], const real_T X[143], real_T e,
  real_T c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 130; proc_control_B.i_f0++)
  {
    proc_control_B.bv2[proc_control_B.i_f0] = std::isinf
      (runtimedata_OutputMin[proc_control_B.i_f0]);
  }

  proc_control_all(proc_control_B.bv2, proc_control_B.x_g);
  y = true;
  proc_control_B.d_k_n = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.d_k_n < 13)) {
    if (!proc_control_B.x_g[proc_control_B.d_k_n]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_B.d_k_n++;
    }
  }

  if (y) {
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 130; proc_control_B.i_f0
         ++) {
      proc_control_B.bv2[proc_control_B.i_f0] = std::isinf
        (runtimedata_OutputMax[proc_control_B.i_f0]);
    }

    proc_control_all(proc_control_B.bv2, proc_control_B.x_g);
    proc_control_B.d_k_n = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.d_k_n < 13)) {
      if (!proc_control_B.x_g[proc_control_B.d_k_n]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_B.d_k_n++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 260; proc_control_B.i_f0
         ++) {
      proc_control_B.b_c_o[proc_control_B.i_f0] = 0.0;
      proc_control_B.icf_c[proc_control_B.i_f0] = true;
    }

    std::memset(&proc_control_B.Jx[0], 0, 33800U * sizeof(real_T));
    std::memset(&proc_control_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13; proc_control_B.i_f0
         ++) {
      proc_control_B.ic_i[proc_control_B.i_f0] = static_cast<real_T>
        (proc_control_B.i_f0) + 1.0;
    }

    for (proc_control_B.d_k_n = 0; proc_control_B.d_k_n < 10;
         proc_control_B.d_k_n++) {
      for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
           proc_control_B.i_f0++) {
        proc_control_B.runtimedata_OutputMin_i = runtimedata_OutputMin[10 *
          proc_control_B.i_f0 + proc_control_B.d_k_n];
        proc_control_B.icf_c[static_cast<int32_T>
          (proc_control_B.ic_i[proc_control_B.i_f0]) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMin_i)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMin_i)));
      }

      for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
           proc_control_B.i_f0++) {
        proc_control_B.runtimedata_OutputMin_i =
          proc_control_B.ic_i[proc_control_B.i_f0];
        proc_control_B.runtimedata_OutputMax_n = runtimedata_OutputMax[10 *
          proc_control_B.i_f0 + proc_control_B.d_k_n];
        proc_control_B.icf_c[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax_n)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax_n)));
        proc_control_B.ic_g[proc_control_B.i_f0] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i) - 1;
        proc_control_B.ic_g[proc_control_B.i_f0 + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i + 13.0) - 1;
      }

      for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 26;
           proc_control_B.i_f0++) {
        proc_control_B.icf_i[proc_control_B.i_f0] =
          proc_control_B.icf_c[proc_control_B.ic_g[proc_control_B.i_f0]];
      }

      if (proc_control_any(proc_control_B.icf_i)) {
        std::memset(&proc_control_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k
             ++) {
          proc_control_B.Ck[proc_control_B.c_k + 13 * proc_control_B.c_k] = 1;
          proc_control_B.b_c_o[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.c_k]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.c_k +
             proc_control_B.d_k_n] - e) - X[(11 * proc_control_B.c_k +
            proc_control_B.d_k_n) + 1];
        }

        for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
             proc_control_B.i_f0++) {
          proc_control_B.b_c_o[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.i_f0] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_f0 + proc_control_B.d_k_n) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_f0 +
            proc_control_B.d_k_n]) - e;
        }

        for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169;
             proc_control_B.i_f0++) {
          proc_control_B.val[proc_control_B.i_f0] = static_cast<int8_T>
            (-proc_control_B.Ck[proc_control_B.i_f0]);
        }

        for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k
             ++) {
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
               proc_control_B.i_f0++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_i[proc_control_B.i_f0]) + 260
                                * proc_control_B.c_k) + 3380 *
                               proc_control_B.d_k_n) - 1] = proc_control_B.val
              [13 * proc_control_B.c_k + proc_control_B.i_f0];
          }
        }

        for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k
             ++) {
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
               proc_control_B.i_f0++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_i[proc_control_B.i_f0] + 13.0)
                                + 260 * proc_control_B.c_k) + 3380 *
                               proc_control_B.d_k_n) - 1] = proc_control_B.Ck[13
              * proc_control_B.c_k + proc_control_B.i_f0];
          }

          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.c_k]) - 1] = -1;
        }

        for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
             proc_control_B.i_f0++) {
          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.i_f0] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
           proc_control_B.i_f0++) {
        proc_control_B.ic_i[proc_control_B.i_f0] += 26.0;
      }
    }

    proc_control_B.d_k_n = 0;
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 260; proc_control_B.i_f0
         ++) {
      if (proc_control_B.icf_c[proc_control_B.i_f0]) {
        proc_control_B.d_k_n++;
      }
    }

    proc_control_B.tmp_size_idx_0 = proc_control_B.d_k_n;
    proc_control_B.d_k_n = 0;
    proc_control_B.c_k = 0;
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 260; proc_control_B.i_f0
         ++) {
      if (proc_control_B.icf_c[proc_control_B.i_f0]) {
        proc_control_B.tmp_data_nr[proc_control_B.d_k_n] = static_cast<int16_T>
          (proc_control_B.i_f0);
        proc_control_B.c_k = proc_control_B.d_k_n + 1;
        proc_control_B.d_k_n++;
      }
    }

    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 <
         proc_control_B.tmp_size_idx_0; proc_control_B.i_f0++) {
      proc_control_B.b_c_data[proc_control_B.i_f0] =
        proc_control_B.b_c_o[proc_control_B.tmp_data_nr[proc_control_B.i_f0]];
    }

    c_size[0] = proc_control_B.c_k;
    c_size[1] = 1;
    if (proc_control_B.c_k - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data[0], static_cast<uint32_T>
                  (proc_control_B.c_k) * sizeof(real_T));
    }

    proc_control_B.Jx_size[0] = proc_control_B.tmp_size_idx_0;
    proc_control_B.Jx_size[1] = 13;
    proc_control_B.Jx_size[2] = 10;
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 10; proc_control_B.i_f0
         ++) {
      for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k++)
      {
        for (proc_control_B.d_k_n = 0; proc_control_B.d_k_n <
             proc_control_B.tmp_size_idx_0; proc_control_B.d_k_n++) {
          proc_control_B.Jx_data[(proc_control_B.d_k_n +
            proc_control_B.tmp_size_idx_0 * proc_control_B.c_k) +
            proc_control_B.tmp_size_idx_0 * 13 * proc_control_B.i_f0] =
            proc_control_B.Jx[(260 * proc_control_B.c_k +
                               proc_control_B.tmp_data_nr[proc_control_B.d_k_n])
            + 3380 * proc_control_B.i_f0];
        }
      }
    }

    proc_control_B.c_k = (proc_control_B.tmp_size_idx_0 << 3) * 10;
    if (proc_control_B.c_k - 1 >= 0) {
      std::memset(&proc_control_B.tmp_data[0], 0, static_cast<uint32_T>
                  (proc_control_B.c_k) * sizeof(real_T));
    }

    proc_control_B.b_c_size[0] = proc_control_B.tmp_size_idx_0;
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 <
         proc_control_B.tmp_size_idx_0; proc_control_B.i_f0++) {
      proc_control_B.b_c_data[proc_control_B.i_f0] =
        proc_control_B.Je[proc_control_B.tmp_data_nr[proc_control_B.i_f0]];
    }

    proc_control_reformJacobian(proc_control_B.Jx_data, proc_control_B.Jx_size,
      proc_control_B.tmp_data, proc_control_B.b_c_data, proc_control_B.b_c_size,
      Jc_data, Jc_size);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_c4_mpclib_anonFcn2(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[139], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[18070])
{
  int16_T tmp;
  uint8_T sizes_idx_0;
  boolean_T sizes_idx_1_tmp;
  proc_control_getXUe(z, runtimedata_x, proc_control_B.X_d, proc_control_B.U_m,
                      &proc_control_B.e_i);
  proc_control_stateEvolution(proc_control_B.X_d, proc_control_B.U_m,
    varargout_2, varargout_4);
  proc_control_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_d, proc_control_B.e_i, proc_control_B.varargin_1_data_c,
    proc_control_B.varargin_1_size_m, proc_control_B.b_varargin_1_data,
    proc_control_B.b_varargin_1_size);
  sizes_idx_1_tmp = ((proc_control_B.varargin_1_size_m[0] != 0) &&
                     (proc_control_B.varargin_1_size_m[1] != 0));
  if (!sizes_idx_1_tmp) {
    proc_control_B.sizes_k[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size_m[0]);
  } else if (sizes_idx_1_tmp) {
    proc_control_B.sizes_k[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size_m[0]);
  } else {
    proc_control_B.sizes_k[0] = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_k[0];
  varargout_1_size[1] = sizes_idx_1_tmp;
  proc_control_B.loop_ub_l = sizes_idx_1_tmp;
  for (proc_control_B.i5 = 0; proc_control_B.i5 < proc_control_B.loop_ub_l;
       proc_control_B.i5++) {
    proc_control_B.loop_ub_jv = proc_control_B.sizes_k[0];
    if (proc_control_B.loop_ub_jv - 1 >= 0) {
      std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_c[0],
                  static_cast<uint32_T>(proc_control_B.loop_ub_jv) * sizeof
                  (real_T));
    }
  }

  sizes_idx_1_tmp = ((proc_control_B.b_varargin_1_size[0] != 0) &&
                     (proc_control_B.b_varargin_1_size[1] != 0));
  if (sizes_idx_1_tmp) {
    sizes_idx_0 = static_cast<uint8_T>(proc_control_B.b_varargin_1_size[0]);
  } else {
    sizes_idx_0 = 0U;
  }

  varargout_3_size[0] = sizes_idx_0;
  if (sizes_idx_0 == 0) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    tmp = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
  } else {
    if (sizes_idx_1_tmp) {
      varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    } else {
      varargout_3_size[1] = 0;
    }

    if (sizes_idx_1_tmp) {
      tmp = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
    } else {
      tmp = 0;
    }
  }

  proc_control_B.loop_ub_l = sizes_idx_0 * tmp;
  if (proc_control_B.loop_ub_l - 1 >= 0) {
    std::memcpy(&varargout_3_data[0], &proc_control_B.b_varargin_1_data[0],
                static_cast<uint32_T>(proc_control_B.loop_ub_l) * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factoryConstruct(int32_T nVarMax, int32_T
  mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_KPwpEZDfdzkqudEdVwjGjF_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size[0] = mIneq;
  obj->cIneq_old.size[0] = mIneq;
  obj->grad.size[0] = nVarMax;
  obj->grad_old.size[0] = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size[0] = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambdasqp.data[0], 0, static_cast<uint32_T>(mConstrMax) *
                sizeof(real_T));
  }

  obj->lambdaStopTest.size[0] = mConstrMax;
  obj->lambdaStopTestPrev.size[0] = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size[0] = nVarMax;
  if (nVarMax - 1 >= 0) {
    std::memset(&obj->delta_x.data[0], 0, static_cast<uint32_T>(nVarMax) *
                sizeof(real_T));
  }

  obj->socDirection.size[0] = nVarMax;
  obj->workingset_old.size[0] = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size[0] = nVarMax;
  obj->delta_gradLag.size[0] = nVarMax;
  obj->xstar.size[0] = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size[0] = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambda.data[0], 0, static_cast<uint32_T>(mConstrMax) *
                sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size[0] = nVarMax;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_cont_factoryConstruct_p52k(int32_T MaxVars, int32_T
  obj_grad_size[1], int32_T obj_Hx_size[1], boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  obj_grad_size[0] = MaxVars;
  obj_Hx_size[0] = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_con_factoryConstruct_p52kz(int32_T mIneqMax, int32_T
  nVarMax, int32_T mConstrMax, s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj)
{
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 139;
  obj->nVarOrig = 139;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size[0] = mIneqMax * nVarMax;
  obj->bineq.size[0] = mIneqMax;
  obj->Aeq.size[0] = 130 * nVarMax;
  obj->lb.size[0] = nVarMax;
  obj->ub.size[0] = nVarMax;
  obj->indexLB.size[0] = nVarMax;
  obj->indexUB.size[0] = nVarMax;
  obj->indexFixed.size[0] = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size[0] = nVarMax * mConstrMax;
  obj->bwset.size[0] = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size[0] = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (int32_T i{0}; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size[0] = mConstrMax;
  obj->Wid.size[0] = mConstrMax;
  obj->Wlocalidx.size[0] = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::computeObjectiveAndUserGradient(const
  s_xJmQKnCTzvv6aUzMZcIqsF_proc_T *obj_next_next_next_next_next_ne, const real_T
  x[139], real_T grad_workspace_data[], real_T *fval, int32_T *status)
{
  int32_T i;
  int32_T i_0;
  int32_T idx_current;
  int32_T obj_next_next_next_next_next__0;
  boolean_T allFinite;
  static const int8_T b[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_getXUe(x, obj_next_next_next_next_next_ne->runtimedata.x,
                      proc_control_B.X_af, proc_control_B.U_a,
                      &proc_control_B.e_ge);
  std::memset(&proc_control_B.gfX[0], 0, 130U * sizeof(real_T));
  std::memset(&proc_control_B.gfU[0], 0, 80U * sizeof(real_T));
  proc_control_B.fs_g = 0.0;
  for (i = 0; i < 13; i++) {
    proc_control_B.ix[i] = static_cast<real_T>(i) + 1.0;
  }

  for (i = 0; i < 8; i++) {
    proc_control_B.iu[i] = static_cast<real_T>(i) + 1.0;
  }

  i = 0;
  for (obj_next_next_next_next_next__0 = 0; obj_next_next_next_next_next__0 < 11;
       obj_next_next_next_next_next__0++) {
    idx_current = 0;
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.b_X_p[i_0 + i] = proc_control_B.X_af[idx_current +
        obj_next_next_next_next_next__0];
      idx_current += 11;
    }

    i += 13;
  }

  i = 0;
  for (idx_current = 0; idx_current < 8; idx_current++) {
    i_0 = 0;
    for (obj_next_next_next_next_next__0 = 0; obj_next_next_next_next_next__0 <
         11; obj_next_next_next_next_next__0++) {
      proc_control_B.b_U_k[i_0 + idx_current] =
        proc_control_B.U_a[obj_next_next_next_next_next__0 + i];
      i_0 += 8;
    }

    i += 11;
  }

  for (idx_current = 0; idx_current < 10; idx_current++) {
    proc_control_B.wtYerr_g = 0.0;
    for (i = 0; i < 13; i++) {
      obj_next_next_next_next_next__0 = 10 * i + idx_current;
      proc_control_B.obj_next_next_next_next_next__d =
        obj_next_next_next_next_next_ne->
        runtimedata.OutputWeights[obj_next_next_next_next_next__0];
      proc_control_B.wtYerr_k = (proc_control_B.b_X_p[(idx_current + 1) * 13 + i]
        - obj_next_next_next_next_next_ne->
        runtimedata.ref[obj_next_next_next_next_next__0]) *
        proc_control_B.obj_next_next_next_next_next__d;
      proc_control_B.wtYerr_g += proc_control_B.wtYerr_k *
        proc_control_B.wtYerr_k;
      proc_control_B.obj_next_next_next_next_next_ne[i] =
        proc_control_B.obj_next_next_next_next_next__d * proc_control_B.wtYerr_k;
    }

    proc_control_B.fs_g += proc_control_B.wtYerr_g;
    for (i = 0; i < 13; i++) {
      proc_control_B.obj_next_next_next_next_next__d = 0.0;
      for (obj_next_next_next_next_next__0 = 0; obj_next_next_next_next_next__0 <
           13; obj_next_next_next_next_next__0++) {
        proc_control_B.obj_next_next_next_next_next__d += static_cast<real_T>(c
          [13 * obj_next_next_next_next_next__0 + i]) *
          proc_control_B.obj_next_next_next_next_next_ne[obj_next_next_next_next_next__0];
      }

      proc_control_B.gfX_n[i] = proc_control_B.gfX[static_cast<int32_T>
        (proc_control_B.ix[i]) - 1] +
        proc_control_B.obj_next_next_next_next_next__d;
    }

    for (i = 0; i < 13; i++) {
      proc_control_B.obj_next_next_next_next_next__d = proc_control_B.ix[i];
      proc_control_B.gfX[static_cast<int32_T>
        (proc_control_B.obj_next_next_next_next_next__d) - 1] =
        proc_control_B.gfX_n[i];
      proc_control_B.ix[i] = proc_control_B.obj_next_next_next_next_next__d +
        13.0;
    }

    std::memcpy(&proc_control_B.umvk_i[0], &proc_control_B.b_U_k[idx_current <<
                3], sizeof(real_T) << 3U);
    if (idx_current + 1 == 1) {
      for (i = 0; i < 8; i++) {
        proc_control_B.duk_k[i] = proc_control_B.umvk_i[i] -
          obj_next_next_next_next_next_ne->runtimedata.lastMV[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        proc_control_B.duk_k[i] = proc_control_B.umvk_i[i] -
          proc_control_B.b_U_k[((idx_current - 1) << 3) + i];
      }
    }

    for (i = 0; i < 8; i++) {
      obj_next_next_next_next_next__0 = 10 * i + idx_current;
      proc_control_B.obj_next_next_next_next_next__d =
        obj_next_next_next_next_next_ne->
        runtimedata.MVWeights[obj_next_next_next_next_next__0];
      proc_control_B.wtYerr_g = (proc_control_B.umvk_i[i] -
        obj_next_next_next_next_next_ne->
        runtimedata.MVScaledTarget[obj_next_next_next_next_next__0]) *
        proc_control_B.obj_next_next_next_next_next__d;
      proc_control_B.umvk_i[i] = proc_control_B.wtYerr_g;
      proc_control_B.gfU_f[i] = proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[i]) - 1] +
        proc_control_B.obj_next_next_next_next_next__d * proc_control_B.wtYerr_g;
    }

    proc_control_B.wtYerr_g = 0.0;
    proc_control_B.wtYerr_k = 0.0;
    for (i = 0; i < 8; i++) {
      proc_control_B.gfU[static_cast<int32_T>(proc_control_B.iu[i]) - 1] =
        proc_control_B.gfU_f[i];
      proc_control_B.obj_next_next_next_next_next__d =
        obj_next_next_next_next_next_ne->runtimedata.MVRateWeights[10 * i +
        idx_current];
      proc_control_B.duk_g = proc_control_B.obj_next_next_next_next_next__d *
        proc_control_B.duk_k[i];
      proc_control_B.duk_k[i] = proc_control_B.duk_g;
      proc_control_B.umvk_c = proc_control_B.umvk_i[i];
      proc_control_B.wtYerr_g += proc_control_B.umvk_c * proc_control_B.umvk_c;
      proc_control_B.wtYerr_k += proc_control_B.duk_g * proc_control_B.duk_g;
      proc_control_B.umvk_i[i] = proc_control_B.obj_next_next_next_next_next__d *
        proc_control_B.duk_g;
    }

    proc_control_B.fs_g = (proc_control_B.fs_g + proc_control_B.wtYerr_g) +
      proc_control_B.wtYerr_k;
    for (i = 0; i < 8; i++) {
      proc_control_B.gfU_f[i] = proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[i]) - 1] + proc_control_B.umvk_i[i];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.gfU[static_cast<int32_T>(proc_control_B.iu[i]) - 1] =
        proc_control_B.gfU_f[i];
    }

    if (idx_current + 1 > 1) {
      for (i = 0; i < 8; i++) {
        obj_next_next_next_next_next__0 = static_cast<int32_T>
          (proc_control_B.iu[i] - 8.0);
        proc_control_B.gfU_tmp[i] = obj_next_next_next_next_next__0;
        proc_control_B.gfU_f[i] =
          proc_control_B.gfU[obj_next_next_next_next_next__0 - 1] -
          proc_control_B.umvk_i[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.gfU[proc_control_B.gfU_tmp[i] - 1] =
          proc_control_B.gfU_f[i];
      }
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.iu[i] += 8.0;
    }
  }

  *fval = 100000.0 * proc_control_B.e_ge * proc_control_B.e_ge +
    proc_control_B.fs_g;
  for (i = 0; i < 8; i++) {
    proc_control_B.obj_next_next_next_next_next__d = 0.0;
    obj_next_next_next_next_next__0 = 0;
    for (idx_current = 0; idx_current < 80; idx_current++) {
      proc_control_B.obj_next_next_next_next_next__d += static_cast<real_T>
        (b[obj_next_next_next_next_next__0 + i]) * (2.0 *
        proc_control_B.gfU[idx_current]);
      obj_next_next_next_next_next__0 += 8;
    }

    proc_control_B.iu[i] = proc_control_B.obj_next_next_next_next_next__d;
  }

  for (i = 0; i < 130; i++) {
    proc_control_B.b_x[i] = 2.0 * proc_control_B.gfX[i];
  }

  std::memcpy(&proc_control_B.b_x[130], &proc_control_B.iu[0], sizeof(real_T) <<
              3U);
  proc_control_B.b_x[138] = 200000.0 * proc_control_B.e_ge;
  std::memcpy(&grad_workspace_data[0], &proc_control_B.b_x[0], 139U * sizeof
              (real_T));
  *status = 1;
  allFinite = std::isnan(*fval);
  if (std::isinf(*fval) || allFinite) {
    if (allFinite) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    allFinite = true;
    idx_current = -1;
    while (allFinite && (idx_current + 2 <= 139)) {
      proc_control_B.e_ge = grad_workspace_data[idx_current + 1];
      allFinite = ((!std::isinf(proc_control_B.e_ge)) && (!std::isnan
        (proc_control_B.e_ge)));
      idx_current++;
    }

    if (!allFinite) {
      if (std::isnan(grad_workspace_data[idx_current])) {
        *status = -3;
      } else if (grad_workspace_data[idx_current] < 0.0) {
        *status = -1;
      } else {
        *status = -2;
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
int32_T proc_control::proc_contr_checkVectorNonFinite(int32_T N, const real_T
  vec_data[], int32_T iv0)
{
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0 - 2;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current + 2 <= idx_end)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec_data[idx_current + 1];
    allFinite = ((!std::isinf(allFinite_tmp)) && (!std::isnan(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S217>/NLMPC'
int32_T proc_control::proc_con_checkVectorNonFinite_a(const real_T vec[130])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = -1;
  while (allFinite && (idx_current + 2 <= 130)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec[idx_current + 1];
    allFinite = ((!std::isinf(allFinite_tmp)) && (!std::isnan(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S217>/NLMPC'
int32_T proc_control::computeConstraintsAndUserJacobi(int32_T
  obj_next_next_next_next_next_b_, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *obj_next_next_next_next_next_ne, const real_T x[139], real_T
  Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130], real_T
  JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  boolean_T allFinite;
  if (obj_next_next_next_next_next_b_ > 0) {
    proc_control_c4_mpclib_anonFcn2(obj_next_next_next_next_next_ne->x,
      obj_next_next_next_next_next_ne->OutputMin,
      obj_next_next_next_next_next_ne->OutputMax, x, proc_control_B.a__3_data,
      proc_control_B.a__3_size, proc_control_B.b_x_p, proc_control_B.a__4_data,
      proc_control_B.a__4_size, proc_control_B.JacEqTrans_tmp);
    proc_control_B.col = static_cast<uint16_T>(obj_next_next_next_next_next_b_);
    for (proc_control_B.row = 0; proc_control_B.row < proc_control_B.col;
         proc_control_B.row++) {
      Cineq_workspace_data[(ineq0 + proc_control_B.row) - 1] =
        proc_control_B.a__3_data[proc_control_B.row];
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_p[0], 130U * sizeof
                (real_T));
    proc_control_B.col_end = proc_control_B.a__4_size[0];
    for (proc_control_B.row = 0; proc_control_B.row < proc_control_B.col_end;
         proc_control_B.row++) {
      proc_control_B.idx_mat = proc_control_B.a__4_size[1];
      for (proc_control_B.col = 0; proc_control_B.col < proc_control_B.idx_mat;
           proc_control_B.col++) {
        JacIneqTrans_workspace_data[proc_control_B.row + ldJI * ((iJI_col +
          proc_control_B.col) - 1)] =
          proc_control_B.a__4_data[proc_control_B.a__4_size[0] *
          proc_control_B.col + proc_control_B.row];
      }
    }

    for (proc_control_B.row = 0; proc_control_B.row < 139; proc_control_B.row++)
    {
      for (proc_control_B.col = 0; proc_control_B.col < 130; proc_control_B.col
           ++) {
        JacEqTrans_workspace_data[proc_control_B.row + ldJE * proc_control_B.col]
          = proc_control_B.JacEqTrans_tmp[139 * proc_control_B.col +
          proc_control_B.row];
      }
    }
  } else {
    proc_control_c4_mpclib_anonFcn2(obj_next_next_next_next_next_ne->x,
      obj_next_next_next_next_next_ne->OutputMin,
      obj_next_next_next_next_next_ne->OutputMax, x, proc_control_B.a__3_data,
      proc_control_B.a__3_size, proc_control_B.b_x_p, proc_control_B.a__4_data,
      proc_control_B.a__4_size, proc_control_B.JacEqTrans_tmp);
    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_p[0], 130U * sizeof
                (real_T));
    for (proc_control_B.row = 0; proc_control_B.row < 139; proc_control_B.row++)
    {
      for (proc_control_B.col = 0; proc_control_B.col < 130; proc_control_B.col
           ++) {
        JacEqTrans_workspace_data[proc_control_B.row + ldJE * proc_control_B.col]
          = proc_control_B.JacEqTrans_tmp[139 * proc_control_B.col +
          proc_control_B.row];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_next_next_next_next_next_b_,
    Cineq_workspace_data, ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_a(Ceq_workspace);
    if (status == 1) {
      allFinite = true;
      proc_control_B.row = -1;
      proc_control_B.col = iJI_col;
      proc_control_B.col_end = (iJI_col + obj_next_next_next_next_next_b_) - 1;
      while (allFinite && (proc_control_B.col <= proc_control_B.col_end)) {
        proc_control_B.row = -1;
        while (allFinite && (proc_control_B.row + 2 <= 139)) {
          proc_control_B.idx_mat = ((proc_control_B.col - 1) * ldJI +
            proc_control_B.row) + 1;
          allFinite = ((!std::isinf
                        (JacIneqTrans_workspace_data[proc_control_B.idx_mat])) &&
                       (!std::isnan
                        (JacIneqTrans_workspace_data[proc_control_B.idx_mat])));
          proc_control_B.row++;
        }

        proc_control_B.col++;
      }

      if (!allFinite) {
        proc_control_B.idx_mat = (proc_control_B.col - 2) * ldJI +
          proc_control_B.row;
        if (std::isnan(JacIneqTrans_workspace_data[proc_control_B.idx_mat])) {
          status = -3;
        } else if (JacIneqTrans_workspace_data[proc_control_B.idx_mat] < 0.0) {
          status = -1;
        } else {
          status = -2;
        }
      } else {
        proc_control_B.row = -1;
        proc_control_B.col = -1;
        while (allFinite && (proc_control_B.col + 2 <= 130)) {
          proc_control_B.row = -1;
          while (allFinite && (proc_control_B.row + 2 <= 139)) {
            proc_control_B.col_end = ((proc_control_B.col + 1) * ldJE +
              proc_control_B.row) + 1;
            allFinite = ((!std::isinf
                          (JacEqTrans_workspace_data[proc_control_B.col_end])) &&
                         (!std::isnan
                          (JacEqTrans_workspace_data[proc_control_B.col_end])));
            proc_control_B.row++;
          }

          proc_control_B.col++;
        }

        if (!allFinite) {
          proc_control_B.col_end = ldJE * proc_control_B.col +
            proc_control_B.row;
          if (std::isnan(JacEqTrans_workspace_data[proc_control_B.col_end])) {
            status = -3;
          } else if (JacEqTrans_workspace_data[proc_control_B.col_end] < 0.0) {
            status = -1;
          } else {
            status = -2;
          }
        }
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::evalObjAndConstrAndDerivatives(int32_T
  obj_next_next_next_next_next_b_, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *obj_next_next_next_next_next_ne, const s_xJmQKnCTzvv6aUzMZcIqsF_proc_T
  *obj_next_next_next_next_next__0, const real_T x[139], real_T
  grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0, real_T
  Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T iJI_col,
  int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE, real_T *fval,
  int32_T *status)
{
  computeObjectiveAndUserGradient(obj_next_next_next_next_next__0, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_next_next_next_next_next_b_,
      obj_next_next_next_next_next_ne, x, Cineq_workspace_data, ineq0,
      Ceq_workspace, JacIneqTrans_workspace_data, iJI_col, ldJI,
      JacEqTrans_workspace_data, ldJE);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_co_modifyOverheadPhaseOne_
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj)
{
  int32_T d;
  int32_T idxEq;
  idxEq = static_cast<uint16_T>(obj->sizes[0]);
  for (int32_T idx{0}; idx < idxEq; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (int32_T idx{0}; idx < 130; idx++) {
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  idxEq = static_cast<uint16_T>(obj->sizes[2]);
  for (int32_T idx{0}; idx < idxEq; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  idxEq = obj->isActiveIdx[2];
  d = obj->nActiveConstr;
  for (int32_T idx{idxEq}; idx <= d; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  idxEq = obj->isActiveIdx[4] - 1;
  if (obj->nWConstr[4] > 0) {
    d = obj->sizesNormal[4] - 1;
    for (int32_T idx{d}; idx >= 0; idx--) {
      int32_T tmp;
      tmp = idxEq + idx;
      obj->isActiveConstr.data[tmp] = obj->isActiveConstr.data[tmp - 1];
    }
  } else {
    obj->isActiveConstr.data[(obj->isActiveIdx[4] + obj->sizesNormal[4]) - 1] =
      false;
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_setProblemType(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T PROBLEM_TYPE)
{
  int32_T c;
  int32_T colOffsetATw;
  int32_T colOffsetAineq;
  int32_T d;
  int32_T idx_col;
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 139;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      proc_control_B.idxUpperExisting = obj->isActiveIdx[4] - 1;
      proc_control_B.offsetEq1 = static_cast<uint16_T>(obj->sizesNormal[4]);
      for (colOffsetATw = 0; colOffsetATw < proc_control_B.offsetEq1;
           colOffsetATw++) {
        proc_control_B.offsetEq2 = proc_control_B.idxUpperExisting +
          colOffsetATw;
        obj->isActiveConstr.data[(obj->isActiveIdxNormal[4] + colOffsetATw) - 1]
          = obj->isActiveConstr.data[proc_control_B.offsetEq2];
        obj->isActiveConstr.data[proc_control_B.offsetEq2] = false;
      }
    }

    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 5;
         proc_control_B.offsetEq2++) {
      obj->sizes[proc_control_B.offsetEq2] = obj->
        sizesNormal[proc_control_B.offsetEq2];
    }

    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 6;
         proc_control_B.offsetEq2++) {
      obj->isActiveIdx[proc_control_B.offsetEq2] = obj->
        isActiveIdxNormal[proc_control_B.offsetEq2];
    }
    break;

   case 1:
    obj->nVar = 140;
    obj->mConstr = obj->mConstrOrig + 1;
    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 5;
         proc_control_B.offsetEq2++) {
      obj->sizes[proc_control_B.offsetEq2] = obj->
        sizesPhaseOne[proc_control_B.offsetEq2];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 6;
         proc_control_B.offsetEq2++) {
      obj->isActiveIdx[proc_control_B.offsetEq2] = obj->
        isActiveIdxPhaseOne[proc_control_B.offsetEq2];
    }
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 5;
         proc_control_B.offsetEq2++) {
      obj->sizes[proc_control_B.offsetEq2] = obj->
        sizesRegularized[proc_control_B.offsetEq2];
    }

    if (obj->probType != 4) {
      proc_control_B.idxUpperExisting = obj->sizes[2] + 269;
      proc_control_B.offsetEq1 = obj->sizes[2] + 139;
      c = static_cast<uint16_T>(obj->sizes[0]);
      for (idx_col = 0; idx_col < c; idx_col++) {
        colOffsetATw = obj->ldA * idx_col;
        std::memset(&obj->ATwset.data[colOffsetATw + 139], 0,
                    static_cast<uint32_T>(((obj->nVar + colOffsetATw) -
          colOffsetATw) - 139) * sizeof(real_T));
      }

      idx_col = static_cast<uint16_T>(obj->sizes[2]);
      for (colOffsetATw = 0; colOffsetATw < idx_col; colOffsetATw++) {
        colOffsetAineq = obj->ldA * colOffsetATw - 1;
        for (c = 140; c <= colOffsetATw + 139; c++) {
          obj->Aineq.data[c + colOffsetAineq] = 0.0;
        }

        obj->Aineq.data[(colOffsetATw + colOffsetAineq) + 140] = -1.0;
        d = obj->nVar;
        for (c = colOffsetATw + 141; c <= d; c++) {
          obj->Aineq.data[c + colOffsetAineq] = 0.0;
        }
      }

      for (idx_col = 0; idx_col < 130; idx_col++) {
        colOffsetAineq = obj->ldA * idx_col - 1;
        colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA + colOffsetAineq;
        if (proc_control_B.offsetEq1 >= 140) {
          std::memset(&obj->Aeq.data[colOffsetAineq + 140], 0,
                      static_cast<uint32_T>(((proc_control_B.offsetEq1 +
            colOffsetAineq) - colOffsetAineq) - 139) * sizeof(real_T));
        }

        if (proc_control_B.offsetEq1 >= 140) {
          std::memset(&obj->ATwset.data[colOffsetATw + 140], 0,
                      static_cast<uint32_T>(((proc_control_B.offsetEq1 +
            colOffsetATw) - colOffsetATw) - 139) * sizeof(real_T));
        }

        c = proc_control_B.idxUpperExisting + idx_col;
        if (proc_control_B.idxUpperExisting - 129 <= c - 130) {
          std::memset(&obj->Aeq.data[(proc_control_B.idxUpperExisting +
            colOffsetAineq) + -129], 0, static_cast<uint32_T>(((((c - 130) +
            colOffsetAineq) - proc_control_B.idxUpperExisting) - colOffsetAineq)
            + 130) * sizeof(real_T));
        }

        if (proc_control_B.idxUpperExisting - 129 <= c - 130) {
          std::memset(&obj->ATwset.data[(proc_control_B.idxUpperExisting +
            colOffsetATw) + -129], 0, static_cast<uint32_T>(((((c - 130) +
            colOffsetATw) - proc_control_B.idxUpperExisting) - colOffsetATw) +
            130) * sizeof(real_T));
        }

        proc_control_B.offsetEq2 = c + colOffsetAineq;
        obj->Aeq.data[proc_control_B.offsetEq2 - 129] = -1.0;
        d = c + colOffsetATw;
        obj->ATwset.data[d - 129] = -1.0;
        if (c - 128 <= proc_control_B.idxUpperExisting) {
          std::memset(&obj->Aeq.data[(c - 128) + colOffsetAineq], 0,
                      static_cast<uint32_T>((((proc_control_B.idxUpperExisting +
            colOffsetAineq) - (c - 128)) - colOffsetAineq) + 1) * sizeof(real_T));
        }

        if (c - 128 <= proc_control_B.idxUpperExisting) {
          std::memset(&obj->ATwset.data[(c - 128) + colOffsetATw], 0,
                      static_cast<uint32_T>((((proc_control_B.idxUpperExisting +
            colOffsetATw) - (c - 128)) - colOffsetATw) + 1) * sizeof(real_T));
        }

        if (proc_control_B.idxUpperExisting + 1 <= c) {
          std::memset(&obj->Aeq.data[(proc_control_B.idxUpperExisting +
            colOffsetAineq) + 1], 0, static_cast<uint32_T>(((c + colOffsetAineq)
            - proc_control_B.idxUpperExisting) - colOffsetAineq) * sizeof(real_T));
        }

        if (proc_control_B.idxUpperExisting + 1 <= c) {
          std::memset(&obj->ATwset.data[(proc_control_B.idxUpperExisting +
            colOffsetATw) + 1], 0, static_cast<uint32_T>(((c + colOffsetATw) -
            proc_control_B.idxUpperExisting) - colOffsetATw) * sizeof(real_T));
        }

        obj->Aeq.data[proc_control_B.offsetEq2 + 1] = 1.0;
        obj->ATwset.data[d + 1] = 1.0;
        proc_control_B.offsetEq2 = obj->nVar;
        if (c + 2 <= proc_control_B.offsetEq2) {
          std::memset(&obj->Aeq.data[(c + 2) + colOffsetAineq], 0,
                      static_cast<uint32_T>((((proc_control_B.offsetEq2 +
            colOffsetAineq) - (c + 2)) - colOffsetAineq) + 1) * sizeof(real_T));
        }

        if (c + 2 <= proc_control_B.offsetEq2) {
          std::memset(&obj->ATwset.data[(c + 2) + colOffsetATw], 0,
                      static_cast<uint32_T>((((proc_control_B.offsetEq2 +
            colOffsetATw) - (c + 2)) - colOffsetATw) + 1) * sizeof(real_T));
        }
      }

      proc_control_B.idxUpperExisting = 139;
      proc_control_B.offsetEq1 = obj->sizesNormal[3] + 1;
      proc_control_B.offsetEq2 = obj->sizesRegularized[3];
      for (colOffsetATw = proc_control_B.offsetEq1; colOffsetATw <=
           proc_control_B.offsetEq2; colOffsetATw++) {
        proc_control_B.idxUpperExisting++;
        obj->indexLB.data[colOffsetATw - 1] = proc_control_B.idxUpperExisting;
      }

      if (obj->nWConstr[4] > 0) {
        proc_control_B.idxUpperExisting = static_cast<uint16_T>
          (obj->sizesRegularized[4]);
        for (colOffsetATw = 0; colOffsetATw < proc_control_B.idxUpperExisting;
             colOffsetATw++) {
          obj->isActiveConstr.data[obj->isActiveIdxRegularized[4] + colOffsetATw]
            = obj->isActiveConstr.data[(obj->isActiveIdx[4] + colOffsetATw) - 1];
        }
      }

      proc_control_B.idxUpperExisting = obj->isActiveIdx[4];
      proc_control_B.offsetEq1 = obj->isActiveIdxRegularized[4] - 1;
      if (proc_control_B.idxUpperExisting <= proc_control_B.offsetEq1) {
        std::memset(&obj->isActiveConstr.data[proc_control_B.idxUpperExisting +
                    -1], 0, static_cast<uint32_T>((proc_control_B.offsetEq1 -
          proc_control_B.idxUpperExisting) + 1) * sizeof(boolean_T));
      }

      proc_control_B.idxUpperExisting = obj->sizes[2] + 399;
      std::memset(&obj->lb.data[139], 0, static_cast<uint32_T>
                  (proc_control_B.idxUpperExisting - 139) * sizeof(real_T));
      proc_control_B.offsetEq1 = obj->isActiveIdx[2];
      proc_control_B.offsetEq2 = obj->nActiveConstr;
      for (proc_control_B.idxUpperExisting = proc_control_B.offsetEq1;
           proc_control_B.idxUpperExisting <= proc_control_B.offsetEq2;
           proc_control_B.idxUpperExisting++) {
        colOffsetATw = (proc_control_B.idxUpperExisting - 1) * obj->ldA - 1;
        if (obj->Wid.data[proc_control_B.idxUpperExisting - 1] == 3) {
          c = obj->Wlocalidx.data[proc_control_B.idxUpperExisting - 1];
          if (c + 138 >= 140) {
            std::memset(&obj->ATwset.data[colOffsetATw + 140], 0, static_cast<
                        uint32_T>((((c + 138) + colOffsetATw) - colOffsetATw) -
                                  139) * sizeof(real_T));
          }

          obj->ATwset.data[(c + colOffsetATw) + 139] = -1.0;
          if (c + 140 <= obj->nVar) {
            std::memset(&obj->ATwset.data[(c + 140) + colOffsetATw], 0,
                        static_cast<uint32_T>((((obj->nVar + colOffsetATw) - (c
              + 140)) - colOffsetATw) + 1) * sizeof(real_T));
          }
        } else {
          std::memset(&obj->ATwset.data[colOffsetATw + 140], 0,
                      static_cast<uint32_T>(((obj->nVar + colOffsetATw) -
            colOffsetATw) - 139) * sizeof(real_T));
        }
      }
    }

    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 6;
         proc_control_B.offsetEq2++) {
      obj->isActiveIdx[proc_control_B.offsetEq2] = obj->
        isActiveIdxRegularized[proc_control_B.offsetEq2];
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 5;
         proc_control_B.offsetEq2++) {
      obj->sizes[proc_control_B.offsetEq2] = obj->
        sizesRegPhaseOne[proc_control_B.offsetEq2];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    for (proc_control_B.offsetEq2 = 0; proc_control_B.offsetEq2 < 6;
         proc_control_B.offsetEq2++) {
      obj->isActiveIdx[proc_control_B.offsetEq2] = obj->
        isActiveIdxRegPhaseOne[proc_control_B.offsetEq2];
    }
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_initActiveSet(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj)
{
  proc_control_setProblemType(obj, 3);
  proc_control_B.idxFillStart = obj->isActiveIdx[2];
  proc_control_B.colOffsetATw = obj->mConstrMax;
  if (proc_control_B.idxFillStart <= proc_control_B.colOffsetATw) {
    std::memset(&obj->isActiveConstr.data[proc_control_B.idxFillStart + -1], 0,
                static_cast<uint32_T>((proc_control_B.colOffsetATw -
      proc_control_B.idxFillStart) + 1) * sizeof(boolean_T));
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  proc_control_B.idxFillStart = static_cast<uint16_T>(obj->sizes[0]);
  for (proc_control_B.idx_i = 0; proc_control_B.idx_i <
       proc_control_B.idxFillStart; proc_control_B.idx_i++) {
    obj->Wid.data[proc_control_B.idx_i] = 1;
    obj->Wlocalidx.data[proc_control_B.idx_i] = proc_control_B.idx_i + 1;
    obj->isActiveConstr.data[proc_control_B.idx_i] = true;
    proc_control_B.colOffsetATw = obj->ldA * proc_control_B.idx_i;
    proc_control_B.iATw0 = static_cast<uint8_T>(obj->
      indexFixed.data[proc_control_B.idx_i] - 1);
    if (proc_control_B.iATw0 - 1 >= 0) {
      std::memset(&obj->ATwset.data[proc_control_B.colOffsetATw], 0,
                  static_cast<uint32_T>((proc_control_B.iATw0 +
        proc_control_B.colOffsetATw) - proc_control_B.colOffsetATw) * sizeof
                  (real_T));
    }

    obj->ATwset.data[(obj->indexFixed.data[proc_control_B.idx_i] +
                      proc_control_B.colOffsetATw) - 1] = 1.0;
    proc_control_B.iATw0 = obj->indexFixed.data[proc_control_B.idx_i] + 1;
    proc_control_B.f_c = obj->nVar;
    if (proc_control_B.iATw0 <= proc_control_B.f_c) {
      std::memset(&obj->ATwset.data[(proc_control_B.iATw0 +
        proc_control_B.colOffsetATw) + -1], 0, static_cast<uint32_T>
                  ((((proc_control_B.f_c + proc_control_B.colOffsetATw) -
                     proc_control_B.iATw0) - proc_control_B.colOffsetATw) + 1) *
                  sizeof(real_T));
    }

    obj->bwset.data[proc_control_B.idx_i] = obj->ub.data[obj->
      indexFixed.data[proc_control_B.idx_i] - 1];
  }

  for (proc_control_B.idx_i = 0; proc_control_B.idx_i < 130;
       proc_control_B.idx_i++) {
    proc_control_B.colOffsetATw = obj->sizes[0] + proc_control_B.idx_i;
    obj->Wid.data[proc_control_B.colOffsetATw] = 2;
    obj->Wlocalidx.data[proc_control_B.colOffsetATw] = proc_control_B.idx_i + 1;
    obj->isActiveConstr.data[proc_control_B.colOffsetATw] = true;
    proc_control_B.iAeq0 = obj->ldA * proc_control_B.idx_i;
    proc_control_B.iATw0 = obj->ldA * proc_control_B.colOffsetATw;
    proc_control_B.f_c = obj->nVar - 1;
    for (proc_control_B.idxFillStart = 0; proc_control_B.idxFillStart <=
         proc_control_B.f_c; proc_control_B.idxFillStart++) {
      obj->ATwset.data[proc_control_B.iATw0 + proc_control_B.idxFillStart] =
        obj->Aeq.data[proc_control_B.iAeq0 + proc_control_B.idxFillStart];
    }

    obj->bwset.data[proc_control_B.colOffsetATw] = obj->beq[proc_control_B.idx_i];
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_contro_factoryConstruct_p5(int32_T maxRows, int32_T
  maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[],
  int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T obj_jpvt_size[1],
  int32_T *obj_mrows, int32_T *obj_ncols, int32_T obj_tau_size[1], int32_T
  *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows;
  if (loop_ub - 1 >= 0) {
    std::memset(&obj_Q_data[0], 0, static_cast<uint32_T>(loop_ub) * sizeof
                (real_T));
  }

  obj_jpvt_size[0] = maxCols;
  if (maxCols - 1 >= 0) {
    std::memset(&obj_jpvt_data[0], 0, static_cast<uint32_T>(maxCols) * sizeof
                (int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows <= maxCols) {
    obj_tau_size[0] = maxRows;
  } else {
    obj_tau_size[0] = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_contr_factoryConstruct_p52(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_computeGradLag(real_T workspace_data[], int32_T
  ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T b;
  int32_T f;
  int32_T g;
  int32_T iL0;
  int32_T ix;
  int32_T tmp;
  std::memcpy(&workspace_data[0], &grad_data[0], static_cast<uint16_T>(nVar) *
              sizeof(real_T));
  b = static_cast<uint16_T>(mFixed);
  for (iL0 = 0; iL0 < b; iL0++) {
    ix = finiteFixed_data[iL0];
    workspace_data[ix - 1] += lambda_data[iL0];
  }

  ix = mFixed;
  f = ldA * 129 + 1;
  for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
    g = (iL0 + nVar) - 1;
    for (b = iL0; b <= g; b++) {
      tmp = b - iL0;
      workspace_data[tmp] += AeqTrans_data[b - 1] * lambda_data[ix];
    }

    ix++;
  }

  if (mIneq != 0) {
    ix = mFixed + 130;
    f = (mIneq - 1) * ldA + 1;
    for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
      g = (iL0 + nVar) - 1;
      for (b = iL0; b <= g; b++) {
        tmp = b - iL0;
        workspace_data[tmp] += AineqTrans_data[b - 1] * lambda_data[ix];
      }

      ix++;
    }
  }

  iL0 = (mFixed + mIneq) + 130;
  ix = static_cast<uint16_T>(mLB);
  for (b = 0; b < ix; b++) {
    f = finiteLB_data[b];
    workspace_data[f - 1] -= lambda_data[iL0 + b];
  }

  iL0 = static_cast<uint16_T>(mLB) - 1 < 0 ? iL0 : iL0 + static_cast<uint16_T>
    (mLB);
  ix = static_cast<uint16_T>(mUB);
  for (b = 0; b < ix; b++) {
    f = finiteUB_data[b];
    workspace_data[f - 1] += lambda_data[iL0 + b];
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_con_computePrimalFeasError(const real_T x[139],
  int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
  cEq[130], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[139],
  const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (int32_T idx{0}; idx < 130; idx++) {
    feasError = std::fmax(feasError, std::abs(cEq[idx]));
  }

  for (int32_T idx{0}; idx < mIneq; idx++) {
    feasError = std::fmax(feasError, cIneq_data[idx]);
  }

  mIneq = static_cast<uint16_T>(mLB);
  for (int32_T idx{0}; idx < mIneq; idx++) {
    int32_T finiteLB;
    finiteLB = finiteLB_data[idx];
    feasError = std::fmax(feasError, lb[finiteLB - 1] - x[finiteLB - 1]);
  }

  mIneq = static_cast<uint16_T>(mUB);
  for (int32_T idx{0}; idx < mIneq; idx++) {
    feasError = std::fmax(feasError, x[finiteUB_data[idx] - 1] - (rtInf));
  }

  return feasError;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  idx = 0;
  exitg1 = false;
  while ((!exitg1) && (idx <= static_cast<uint16_T>(nVar) - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[idx])) && (!std::isnan(gradLag_data[idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[idx]));
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_saveJacobian(s_KPwpEZDfdzkqudEdVwjGjF_proc_T
  *obj, int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  int32_T b;
  int32_T iCol;
  int32_T iCol_old;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = 0;
  b = mIneq - ineqCol0;
  for (int32_T idx_col{0}; idx_col <= b; idx_col++) {
    int32_T c;
    int32_T loop_ub_tmp;
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (loop_ub_tmp - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data[0], &obj->JacCineqTrans_old.data[0],
                  static_cast<uint32_T>(loop_ub_tmp) * sizeof(real_T));
    }

    c = static_cast<uint16_T>(nVar);
    for (int32_T k{0}; k < c; k++) {
      proc_control_B.y_data[iCol_old + k] = JacCineqTrans_data[iCol + k];
    }

    if (loop_ub_tmp - 1 >= 0) {
      std::memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_B.y_data[0],
                  static_cast<uint32_T>(loop_ub_tmp) * sizeof(real_T));
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = 0;
  iCol_old = 0;
  b = static_cast<uint16_T>(nVar);
  for (int32_T idx_col{0}; idx_col < 130; idx_col++) {
    for (int32_T k{0}; k < b; k++) {
      obj->JacCeqTrans_old.data[iCol_old + k] = JacCeqTrans_data[iCol + k];
    }

    iCol += ldJ;
    iCol_old = iCol;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_control_computeComplError(const int32_T
  fscales_lineq_constraint_size[1], const int32_T fscales_cineq_constraint_size
  [1], const real_T xCurrent[139], int32_T mIneq, const real_T cIneq_data[],
  const int32_T finiteLB_data[], int32_T mLB, const real_T lb[139], const
  int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  int32_T mLinIneq;
  nlpComplError = 0.0;
  mLinIneq = fscales_lineq_constraint_size[0];
  if ((mIneq + mLB) + mUB > 0) {
    real_T lbDelta;
    real_T lbLambda;
    int32_T iLineq0;
    int32_T idx;
    for (idx = 0; idx < mLinIneq; idx++) {
      lbDelta = cIneq_data[idx];
      lbLambda = lambda_data[(iL0 + idx) - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbDelta *
        lbLambda), std::fmin(std::abs(lbDelta), lbLambda)));
    }

    iLineq0 = (iL0 + fscales_lineq_constraint_size[0]) - 1;
    idx = fscales_cineq_constraint_size[0];
    for (int32_T b_idx{0}; b_idx < idx; b_idx++) {
      lbDelta = cIneq_data[mLinIneq + b_idx];
      lbLambda = lambda_data[iLineq0 + b_idx];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbDelta *
        lbLambda), std::fmin(std::abs(lbDelta), lbLambda)));
    }

    iLineq0 = (iL0 + mIneq) - 1;
    mLinIneq = iLineq0 + mLB;
    idx = static_cast<uint16_T>(mLB);
    for (int32_T b_idx{0}; b_idx < idx; b_idx++) {
      int32_T finiteLB;
      finiteLB = finiteLB_data[b_idx];
      lbDelta = xCurrent[finiteLB - 1] - lb[finiteLB - 1];
      lbLambda = lambda_data[iLineq0 + b_idx];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbDelta *
        lbLambda), std::fmin(std::abs(lbDelta), lbLambda)));
    }

    iLineq0 = static_cast<uint16_T>(mUB);
    for (idx = 0; idx < iLineq0; idx++) {
      lbDelta = lambda_data[mLinIneq + idx];
      lbLambda = (rtInf) - xCurrent[finiteUB_data[idx] - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        lbDelta), std::fmin(lbLambda, lbDelta)));
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_computeGradLag_l(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T f;
  int32_T g;
  int32_T i;
  int32_T iL0;
  int32_T ix;
  int32_T tmp;
  std::memcpy(&workspace_data[0], &grad_data[0], static_cast<uint16_T>(nVar) *
              sizeof(real_T));
  i = static_cast<uint16_T>(mFixed);
  for (iL0 = 0; iL0 < i; iL0++) {
    ix = finiteFixed_data[iL0];
    workspace_data[ix - 1] += lambda_data[iL0];
  }

  ix = mFixed;
  f = ldA * 129 + 1;
  for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
    g = (iL0 + nVar) - 1;
    for (i = iL0; i <= g; i++) {
      tmp = i - iL0;
      workspace_data[tmp] += AeqTrans_data[i - 1] * lambda_data[ix];
    }

    ix++;
  }

  if (mIneq != 0) {
    ix = mFixed + 130;
    f = (mIneq - 1) * ldA + 1;
    for (iL0 = 1; ldA < 0 ? iL0 >= f : iL0 <= f; iL0 += ldA) {
      g = (iL0 + nVar) - 1;
      for (i = iL0; i <= g; i++) {
        tmp = i - iL0;
        workspace_data[tmp] += AineqTrans_data[i - 1] * lambda_data[ix];
      }

      ix++;
    }
  }

  iL0 = (mFixed + mIneq) + 130;
  ix = static_cast<uint16_T>(mLB);
  for (i = 0; i < ix; i++) {
    f = finiteLB_data[i];
    workspace_data[f - 1] -= lambda_data[iL0 + i];
  }

  iL0 = static_cast<uint16_T>(mLB) - 1 < 0 ? iL0 : iL0 + static_cast<uint16_T>
    (mLB);
  ix = static_cast<uint16_T>(mUB);
  for (i = 0; i < ix; i++) {
    f = finiteUB_data[i];
    workspace_data[f - 1] += lambda_data[iL0 + i];
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_con_computeDualFeasError_n(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  idx = 0;
  exitg1 = false;
  while ((!exitg1) && (idx <= static_cast<uint16_T>(nVar) - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[idx])) && (!std::isnan(gradLag_data[idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[idx]));
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_c_updateWorkingSetForNewQP(const real_T xk[139],
  s_PAtG1CW05sRYOWrqzwRQyC_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[139], int32_T mUB, int32_T mFixed)
{
  int32_T i;
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T idx{0}; idx < 130; idx++) {
    WorkingSet->beq[idx] = -cEq[idx];
    WorkingSet->bwset.data[mFixed + idx] = WorkingSet->beq[idx];
    for (i = 0; i < nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  i = static_cast<uint16_T>(mIneq);
  for (int32_T idx{0}; idx < i; idx++) {
    WorkingSet->bineq.data[idx] = -cIneq_data[idx];
  }

  i = static_cast<uint16_T>(mLB);
  for (int32_T idx{0}; idx < i; idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[idx] - 1] = -lb
      [WorkingSet->indexLB.data[idx] - 1] + xk[WorkingSet->indexLB.data[idx] - 1];
  }

  i = static_cast<uint16_T>(mUB);
  for (int32_T idx{0}; idx < i; idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[idx] - 1];
  }

  i = static_cast<uint16_T>(mFixed);
  for (int32_T idx{0}; idx < i; idx++) {
    real_T tmp;
    tmp = (rtInf) - xk[WorkingSet->indexFixed.data[idx] - 1];
    WorkingSet->ub.data[WorkingSet->indexFixed.data[idx] - 1] = tmp;
    WorkingSet->bwset.data[idx] = tmp;
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    iw0 = WorkingSet->nActiveConstr;
    for (int32_T idx{mFixed + 131}; idx <= iw0; idx++) {
      switch (WorkingSet->Wid.data[idx - 1]) {
       case 4:
        WorkingSet->bwset.data[idx - 1] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[idx - 1] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[idx - 1] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[idx - 1] - 1] - 1];
        break;

       default:
        {
          i = WorkingSet->Wlocalidx.data[idx - 1];
          WorkingSet->bwset.data[idx - 1] = WorkingSet->bineq.data[i - 1];
          if ((mNonlinIneq > 0) && (i > mIneq - mNonlinIneq)) {
            int32_T g;
            int32_T ix0;
            iEq0 = (idx - 1) * WorkingSet->ldA;
            ix0 = (i - 1) * WorkingSet->ldA;
            g = static_cast<uint16_T>(nVar);
            for (i = 0; i < g; i++) {
              WorkingSet->ATwset.data[iEq0 + i] = WorkingSet->Aineq.data[ix0 + i];
            }
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0)
{
  for (int32_T k{0}; k < n; k++) {
    real_T temp;
    int32_T temp_tmp;
    int32_T tmp;
    temp_tmp = (ix0 + k) - 1;
    temp = x_data[temp_tmp];
    tmp = (iy0 + k) - 1;
    x_data[temp_tmp] = x_data[tmp];
    x_data[tmp] = temp;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_control_xnrm2_a(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_d = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_g = std::abs(x_data[k - 1]);
        if (proc_control_B.absxk_g > proc_control_B.scale_d) {
          proc_control_B.t_j = proc_control_B.scale_d / proc_control_B.absxk_g;
          y = y * proc_control_B.t_j * proc_control_B.t_j + 1.0;
          proc_control_B.scale_d = proc_control_B.absxk_g;
        } else {
          proc_control_B.t_j = proc_control_B.absxk_g / proc_control_B.scale_d;
          y += proc_control_B.t_j * proc_control_B.t_j;
        }
      }

      y = proc_control_B.scale_d * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_control_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  real_T tau;
  int32_T c_tmp;
  int32_T d;
  int32_T knt;
  tau = 0.0;
  if (n > 0) {
    proc_control_B.xnorm_l = proc_control_xnrm2_a(n - 1, x_data, ix0);
    if (proc_control_B.xnorm_l != 0.0) {
      proc_control_B.xnorm_l = proc_control_rt_hypotd_snf(*alpha1,
        proc_control_B.xnorm_l);
      if (*alpha1 >= 0.0) {
        proc_control_B.xnorm_l = -proc_control_B.xnorm_l;
      }

      if (std::abs(proc_control_B.xnorm_l) < 1.0020841800044864E-292) {
        knt = 0;
        c_tmp = (ix0 + n) - 2;
        do {
          knt++;
          for (d = ix0; d <= c_tmp; d++) {
            x_data[d - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_l *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_l) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.xnorm_l = proc_control_rt_hypotd_snf(*alpha1,
          proc_control_xnrm2_a(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_B.xnorm_l = -proc_control_B.xnorm_l;
        }

        tau = (proc_control_B.xnorm_l - *alpha1) / proc_control_B.xnorm_l;
        proc_control_B.a_h = 1.0 / (*alpha1 - proc_control_B.xnorm_l);
        for (d = ix0; d <= c_tmp; d++) {
          x_data[d - 1] *= proc_control_B.a_h;
        }

        for (d = 0; d < knt; d++) {
          proc_control_B.xnorm_l *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_B.xnorm_l;
      } else {
        tau = (proc_control_B.xnorm_l - *alpha1) / proc_control_B.xnorm_l;
        proc_control_B.a_h = 1.0 / (*alpha1 - proc_control_B.xnorm_l);
        d = (ix0 + n) - 2;
        for (knt = ix0; knt <= d; knt++) {
          x_data[knt - 1] *= proc_control_B.a_h;
        }

        *alpha1 = proc_control_B.xnorm_l;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_j(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iy;
    if (n - 1 >= 0) {
      std::memset(&y_data[0], 0, static_cast<uint32_T>(n) * sizeof(real_T));
    }

    iy = 0;
    b = (n - 1) * lda + ia0;
    for (int32_T b_iy{ia0}; lda < 0 ? b_iy >= b : b_iy <= b; b_iy += lda) {
      int32_T d;
      proc_control_B.c_pi = 0.0;
      d = (b_iy + m) - 1;
      for (int32_T iyend{b_iy}; iyend <= d; iyend++) {
        proc_control_B.c_pi += x_data[((ix0 + iyend) - b_iy) - 1] * A_data[iyend
          - 1];
      }

      y_data[iy] += proc_control_B.c_pi;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgerc_a(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j{0}; j < n; j++) {
      proc_control_B.temp_c = y_data[j];
      if (proc_control_B.temp_c != 0.0) {
        int32_T b;
        proc_control_B.temp_c *= alpha1;
        b = m + jA;
        for (int32_T ijA{jA}; ijA < b; ijA++) {
          A_data[ijA - 1] += A_data[((ix0 + ijA) - jA) - 1] *
            proc_control_B.temp_c;
        }
      }

      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  int32_T coltop;
  int32_T exitg1;
  int32_T ia;
  int32_T lastc;
  int32_T lastv;
  boolean_T exitg2;
  if (tau != 0.0) {
    lastv = m;
    lastc = iv0 + m;
    while ((lastv > 0) && (C_data[lastc - 2] == 0.0)) {
      lastv--;
      lastc--;
    }

    lastc = n;
    exitg2 = false;
    while ((!exitg2) && (lastc > 0)) {
      coltop = (lastc - 1) * ldc + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + lastv) - 1) {
          if (C_data[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    lastv = 0;
    lastc = 0;
  }

  if (lastv > 0) {
    proc_control_xgemv_j(lastv, lastc, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_xgerc_a(lastv, lastc, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_B.lda = A_size[0];
  proc_control_B.loop_ub_b5 = A_size[1];
  if (proc_control_B.loop_ub_b5 - 1 >= 0) {
    std::memset(&proc_control_B.work_data[0], 0, static_cast<uint32_T>
                (proc_control_B.loop_ub_b5) * sizeof(real_T));
  }

  proc_control_B.loop_ub_b5 = static_cast<uint16_T>(nfxd);
  for (proc_control_B.i_m = 0; proc_control_B.i_m < proc_control_B.loop_ub_b5;
       proc_control_B.i_m++) {
    proc_control_B.ii_i = proc_control_B.i_m * proc_control_B.lda +
      proc_control_B.i_m;
    proc_control_B.mmi_o = m - proc_control_B.i_m;
    if (proc_control_B.i_m + 1 < m) {
      proc_control_B.b_atmp = A_data[proc_control_B.ii_i];
      proc_control_B.tau_b = proc_control_xzlarfg(proc_control_B.mmi_o,
        &proc_control_B.b_atmp, A_data, proc_control_B.ii_i + 2);
      tau_data[proc_control_B.i_m] = proc_control_B.tau_b;
      A_data[proc_control_B.ii_i] = proc_control_B.b_atmp;
    } else {
      proc_control_B.tau_b = 0.0;
      tau_data[proc_control_B.i_m] = 0.0;
    }

    if (proc_control_B.i_m + 1 < n) {
      proc_control_B.b_atmp = A_data[proc_control_B.ii_i];
      A_data[proc_control_B.ii_i] = 1.0;
      proc_control_xzlarf(proc_control_B.mmi_o, (n - proc_control_B.i_m) - 1,
                          proc_control_B.ii_i + 1, proc_control_B.tau_b, A_data,
                          (proc_control_B.ii_i + proc_control_B.lda) + 1,
                          proc_control_B.lda, proc_control_B.work_data);
      A_data[proc_control_B.ii_i] = proc_control_B.b_atmp;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  proc_control_B.ma = A_size[0];
  if (m <= n) {
    proc_control_B.minmn_m = m;
  } else {
    proc_control_B.minmn_m = n;
  }

  proc_control_B.pvt = A_size[1];
  if (proc_control_B.pvt - 1 >= 0) {
    std::memset(&proc_control_B.work_data_b[0], 0, static_cast<uint32_T>
                (proc_control_B.pvt) * sizeof(real_T));
  }

  if (proc_control_B.pvt - 1 >= 0) {
    std::memset(&proc_control_B.vn1_data[0], 0, static_cast<uint32_T>
                (proc_control_B.pvt) * sizeof(real_T));
  }

  if (proc_control_B.pvt - 1 >= 0) {
    std::memset(&proc_control_B.vn2_data[0], 0, static_cast<uint32_T>
                (proc_control_B.pvt) * sizeof(real_T));
  }

  for (proc_control_B.j_j = nfxd + 1; proc_control_B.j_j <= n;
       proc_control_B.j_j++) {
    proc_control_B.vn1 = proc_control_xnrm2_a(m - nfxd, A_data,
      ((proc_control_B.j_j - 1) * proc_control_B.ma + nfxd) + 1);
    proc_control_B.vn1_data[proc_control_B.j_j - 1] = proc_control_B.vn1;
    proc_control_B.vn2_data[proc_control_B.j_j - 1] = proc_control_B.vn1;
  }

  for (proc_control_B.j_j = nfxd + 1; proc_control_B.j_j <=
       proc_control_B.minmn_m; proc_control_B.j_j++) {
    proc_control_B.ii_tmp = (proc_control_B.j_j - 1) * proc_control_B.ma;
    proc_control_B.ii_m = (proc_control_B.ii_tmp + proc_control_B.j_j) - 1;
    proc_control_B.nmi = n - proc_control_B.j_j;
    proc_control_B.mmi_p = m - proc_control_B.j_j;
    if (proc_control_B.nmi + 1 < 1) {
      proc_control_B.itemp = -2;
    } else {
      proc_control_B.itemp = -1;
      if (proc_control_B.nmi + 1 > 1) {
        proc_control_B.smax_l = std::abs
          (proc_control_B.vn1_data[proc_control_B.j_j - 1]);
        for (proc_control_B.pvt = 2; proc_control_B.pvt <= proc_control_B.nmi +
             1; proc_control_B.pvt++) {
          proc_control_B.s_o = std::abs(proc_control_B.vn1_data
            [(proc_control_B.j_j + proc_control_B.pvt) - 2]);
          if (proc_control_B.s_o > proc_control_B.smax_l) {
            proc_control_B.itemp = proc_control_B.pvt - 2;
            proc_control_B.smax_l = proc_control_B.s_o;
          }
        }
      }
    }

    proc_control_B.pvt = proc_control_B.j_j + proc_control_B.itemp;
    if (proc_control_B.pvt + 1 != proc_control_B.j_j) {
      proc_control_xswap(m, A_data, proc_control_B.pvt * proc_control_B.ma + 1,
                         proc_control_B.ii_tmp + 1);
      proc_control_B.itemp = jpvt_data[proc_control_B.pvt];
      jpvt_data[proc_control_B.pvt] = jpvt_data[proc_control_B.j_j - 1];
      jpvt_data[proc_control_B.j_j - 1] = proc_control_B.itemp;
      proc_control_B.vn1_data[proc_control_B.pvt] =
        proc_control_B.vn1_data[proc_control_B.j_j - 1];
      proc_control_B.vn2_data[proc_control_B.pvt] =
        proc_control_B.vn2_data[proc_control_B.j_j - 1];
    }

    if (proc_control_B.j_j < m) {
      proc_control_B.smax_l = A_data[proc_control_B.ii_m];
      proc_control_B.vn1 = proc_control_xzlarfg(proc_control_B.mmi_p + 1,
        &proc_control_B.smax_l, A_data, proc_control_B.ii_m + 2);
      tau_data[proc_control_B.j_j - 1] = proc_control_B.vn1;
      A_data[proc_control_B.ii_m] = proc_control_B.smax_l;
    } else {
      proc_control_B.vn1 = 0.0;
      tau_data[proc_control_B.j_j - 1] = 0.0;
    }

    if (proc_control_B.j_j < n) {
      proc_control_B.smax_l = A_data[proc_control_B.ii_m];
      A_data[proc_control_B.ii_m] = 1.0;
      proc_control_xzlarf(proc_control_B.mmi_p + 1, proc_control_B.nmi,
                          proc_control_B.ii_m + 1, proc_control_B.vn1, A_data,
                          (proc_control_B.ii_m + proc_control_B.ma) + 1,
                          proc_control_B.ma, proc_control_B.work_data_b);
      A_data[proc_control_B.ii_m] = proc_control_B.smax_l;
    }

    for (proc_control_B.pvt = proc_control_B.j_j + 1; proc_control_B.pvt <= n;
         proc_control_B.pvt++) {
      proc_control_B.ii_m = (proc_control_B.pvt - 1) * proc_control_B.ma +
        proc_control_B.j_j;
      proc_control_B.vn1 = proc_control_B.vn1_data[proc_control_B.pvt - 1];
      if (proc_control_B.vn1 != 0.0) {
        proc_control_B.smax_l = std::abs(A_data[proc_control_B.ii_m - 1]) /
          proc_control_B.vn1;
        proc_control_B.smax_l = 1.0 - proc_control_B.smax_l *
          proc_control_B.smax_l;
        if (proc_control_B.smax_l < 0.0) {
          proc_control_B.smax_l = 0.0;
        }

        proc_control_B.s_o = proc_control_B.vn1 /
          proc_control_B.vn2_data[proc_control_B.pvt - 1];
        proc_control_B.s_o = proc_control_B.s_o * proc_control_B.s_o *
          proc_control_B.smax_l;
        if (proc_control_B.s_o <= 1.4901161193847656E-8) {
          if (proc_control_B.j_j < m) {
            proc_control_B.vn1 = proc_control_xnrm2_a(proc_control_B.mmi_p,
              A_data, proc_control_B.ii_m + 1);
            proc_control_B.vn1_data[proc_control_B.pvt - 1] = proc_control_B.vn1;
            proc_control_B.vn2_data[proc_control_B.pvt - 1] = proc_control_B.vn1;
          } else {
            proc_control_B.vn1_data[proc_control_B.pvt - 1] = 0.0;
            proc_control_B.vn2_data[proc_control_B.pvt - 1] = 0.0;
          }
        } else {
          proc_control_B.vn1_data[proc_control_B.pvt - 1] = proc_control_B.vn1 *
            std::sqrt(proc_control_B.smax_l);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  tau_size[1])
{
  proc_control_B.ma_tmp = A_size[0];
  if (m <= n) {
    proc_control_B.minmn_g5 = m;
  } else {
    proc_control_B.minmn_g5 = n;
  }

  if (A_size[0] <= A_size[1]) {
    proc_control_B.nfxd = A_size[0];
  } else {
    proc_control_B.nfxd = A_size[1];
  }

  tau_size[0] = proc_control_B.nfxd;
  if (proc_control_B.nfxd - 1 >= 0) {
    std::memset(&tau_data[0], 0, static_cast<uint32_T>(proc_control_B.nfxd) *
                sizeof(real_T));
  }

  if (proc_control_B.minmn_g5 < 1) {
    for (proc_control_B.b_j_p = 0; proc_control_B.b_j_p < n;
         proc_control_B.b_j_p++) {
      jpvt_data[proc_control_B.b_j_p] = proc_control_B.b_j_p + 1;
    }
  } else {
    proc_control_B.nfxd = -1;
    for (proc_control_B.b_j_p = 0; proc_control_B.b_j_p < n;
         proc_control_B.b_j_p++) {
      if (jpvt_data[proc_control_B.b_j_p] != 0) {
        proc_control_B.nfxd++;
        if (proc_control_B.b_j_p + 1 != proc_control_B.nfxd + 1) {
          proc_control_xswap(m, A_data, proc_control_B.b_j_p *
                             proc_control_B.ma_tmp + 1, proc_control_B.nfxd *
                             proc_control_B.ma_tmp + 1);
          jpvt_data[proc_control_B.b_j_p] = jpvt_data[proc_control_B.nfxd];
          jpvt_data[proc_control_B.nfxd] = proc_control_B.b_j_p + 1;
        } else {
          jpvt_data[proc_control_B.b_j_p] = proc_control_B.b_j_p + 1;
        }
      } else {
        jpvt_data[proc_control_B.b_j_p] = proc_control_B.b_j_p + 1;
      }
    }

    if (proc_control_B.nfxd + 1 <= proc_control_B.minmn_g5) {
      proc_control_B.nfxd++;
    } else {
      proc_control_B.nfxd = proc_control_B.minmn_g5;
    }

    proc_control_qrf(A_data, A_size, m, n, proc_control_B.nfxd, tau_data);
    if (proc_control_B.nfxd < proc_control_B.minmn_g5) {
      proc_control_qrpf(A_data, A_size, m, n, proc_control_B.nfxd, tau_data,
                        jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factorQRE(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  boolean_T guard1;
  proc_control_B.idx_n = mrows * ncols;
  guard1 = false;
  if (proc_control_B.idx_n > 0) {
    for (proc_control_B.idx_n = 0; proc_control_B.idx_n < ncols;
         proc_control_B.idx_n++) {
      proc_control_B.ix0_f = ldA * proc_control_B.idx_n;
      proc_control_B.iy0_k = obj->ldq * proc_control_B.idx_n;
      proc_control_B.b_hn = static_cast<uint16_T>(mrows);
      for (proc_control_B.k_b = 0; proc_control_B.k_b < proc_control_B.b_hn;
           proc_control_B.k_b++) {
        obj->QR.data[proc_control_B.iy0_k + proc_control_B.k_b] =
          A_data[proc_control_B.ix0_f + proc_control_B.k_b];
      }
    }

    guard1 = true;
  } else if (proc_control_B.idx_n == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, obj->tau.size);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xorgqr_l(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  if (n >= 1) {
    for (proc_control_B.itau_l = k; proc_control_B.itau_l < n;
         proc_control_B.itau_l++) {
      proc_control_B.ia_b = proc_control_B.itau_l * lda;
      std::memset(&A_data[proc_control_B.ia_b], 0, static_cast<uint32_T>((m +
        proc_control_B.ia_b) - proc_control_B.ia_b) * sizeof(real_T));
      A_data[proc_control_B.ia_b + proc_control_B.itau_l] = 1.0;
    }

    proc_control_B.itau_l = k - 1;
    proc_control_B.loop_ub_m = A_size[1];
    if (proc_control_B.loop_ub_m - 1 >= 0) {
      std::memset(&proc_control_B.work_data_l[0], 0, static_cast<uint32_T>
                  (proc_control_B.loop_ub_m) * sizeof(real_T));
    }

    proc_control_B.i_k3 = k;
    while (proc_control_B.i_k3 >= 1) {
      proc_control_B.ia_b = (proc_control_B.i_k3 - 1) * lda +
        proc_control_B.i_k3;
      if (proc_control_B.i_k3 < n) {
        A_data[proc_control_B.ia_b - 1] = 1.0;
        proc_control_xzlarf((m - proc_control_B.i_k3) + 1, n -
                            proc_control_B.i_k3, proc_control_B.ia_b,
                            tau_data[proc_control_B.itau_l], A_data,
                            proc_control_B.ia_b + lda, lda,
                            proc_control_B.work_data_l);
      }

      if (proc_control_B.i_k3 < m) {
        proc_control_B.c_b = (proc_control_B.ia_b + m) - proc_control_B.i_k3;
        for (proc_control_B.loop_ub_m = proc_control_B.ia_b + 1;
             proc_control_B.loop_ub_m <= proc_control_B.c_b;
             proc_control_B.loop_ub_m++) {
          A_data[proc_control_B.loop_ub_m - 1] *=
            -tau_data[proc_control_B.itau_l];
        }
      }

      A_data[proc_control_B.ia_b - 1] = 1.0 - tau_data[proc_control_B.itau_l];
      proc_control_B.c_b = static_cast<uint16_T>(proc_control_B.i_k3 - 1);
      for (proc_control_B.loop_ub_m = 0; proc_control_B.loop_ub_m <
           proc_control_B.c_b; proc_control_B.loop_ub_m++) {
        A_data[(proc_control_B.ia_b - proc_control_B.loop_ub_m) - 2] = 0.0;
      }

      proc_control_B.itau_l--;
      proc_control_B.i_k3--;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  if (WorkingSet_nActiveConstr != 0) {
    int32_T currentMplier;
    int32_T idxOffset;
    int32_T mAll;
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    if (static_cast<uint16_T>(mAll + 1) - 1 >= 0) {
      std::memcpy(&workspace_data[0], &lambda_data[0], static_cast<uint16_T>
                  (mAll + 1) * sizeof(real_T));
    }

    if (mAll >= 0) {
      std::memset(&lambda_data[0], 0, static_cast<uint32_T>(mAll + 1) * sizeof
                  (real_T));
    }

    currentMplier = 0;
    mAll = 0;
    while ((mAll + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[mAll] <=
            2)) {
      if (WorkingSet_Wid_data[mAll] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[mAll]) - 2] =
        workspace_data[currentMplier];
      currentMplier++;
      mAll++;
    }

    while (mAll + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[mAll]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[mAll]) - 2] =
        workspace_data[currentMplier];
      currentMplier++;
      mAll++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T fscales_lineq_constraint_size[1], const int32_T
  fscales_cineq_constraint_size[1], s_PAtG1CW05sRYOWrqzwRQyC_proc_T *WorkingSet,
  s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState, s_o1KzuWoPqzc62zOgqamCNH_proc_T
  *QRManager, const real_T lb[139])
{
  boolean_T dxTooSmall;
  boolean_T exitg1;
  boolean_T guard1;
  boolean_T isFeasible;
  proc_control_B.nVar_ft = WorkingSet->nVar;
  proc_control_B.idx_max_tmp = static_cast<uint16_T>((((WorkingSet->sizes[0] +
    WorkingSet->sizes[2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 130);
  if (proc_control_B.idx_max_tmp - 1 >= 0) {
    std::memcpy(&TrialState->lambdaStopTest.data[0], &TrialState->
                lambdasqp.data[0], static_cast<uint32_T>
                (proc_control_B.idx_max_tmp) * sizeof(real_T));
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  if (WorkingSet->nVar < 1) {
    proc_control_B.idx_max_l = 0;
  } else {
    proc_control_B.idx_max_l = 1;
    if (WorkingSet->nVar > 1) {
      proc_control_B.smax_mm = std::abs(TrialState->grad.data[0]);
      for (proc_control_B.ix_a = 2; proc_control_B.ix_a <=
           proc_control_B.nVar_ft; proc_control_B.ix_a++) {
        proc_control_B.s_d = std::abs(TrialState->grad.data[proc_control_B.ix_a
          - 1]);
        if (proc_control_B.s_d > proc_control_B.smax_mm) {
          proc_control_B.idx_max_l = proc_control_B.ix_a;
          proc_control_B.smax_mm = proc_control_B.s_d;
        }
      }
    }
  }

  proc_control_B.smax_mm = std::fmax(1.0, std::abs(TrialState->
    grad.data[proc_control_B.idx_max_l - 1]));
  if (std::isinf(proc_control_B.smax_mm)) {
    proc_control_B.smax_mm = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    MeritFunction->feasRelativeFactor = std::fmax(1.0,
      MeritFunction->nlpPrimalFeasError);
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &Flags->gradOK, &MeritFunction->nlpDualFeasError);
  if (!Flags->gradOK) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control_computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      MeritFunction->nlpComplError);
    if (TrialState->sqpIterations > 1) {
      proc_control_computeGradLag_l(memspace->workspace_float.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_n(WorkingSet->nVar,
        memspace->workspace_float.data, &dxTooSmall, &proc_control_B.s_d);
      proc_control_B.nlpComplErrorTmp = proc_control_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      if ((proc_control_B.s_d < MeritFunction->nlpDualFeasError) &&
          (proc_control_B.nlpComplErrorTmp < MeritFunction->nlpComplError)) {
        MeritFunction->nlpDualFeasError = proc_control_B.s_d;
        MeritFunction->nlpComplError = proc_control_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = std::fmax(proc_control_B.s_d,
          proc_control_B.nlpComplErrorTmp);
        if (proc_control_B.idx_max_tmp - 1 >= 0) {
          std::memcpy(&TrialState->lambdaStopTest.data[0],
                      &TrialState->lambdaStopTestPrev.data[0],
                      static_cast<uint32_T>(proc_control_B.idx_max_tmp) * sizeof
                      (real_T));
        }
      } else if (proc_control_B.idx_max_tmp - 1 >= 0) {
        std::memcpy(&TrialState->lambdaStopTestPrev.data[0],
                    &TrialState->lambdaStopTest.data[0], static_cast<uint32_T>
                    (proc_control_B.idx_max_tmp) * sizeof(real_T));
      }
    } else if (proc_control_B.idx_max_tmp - 1 >= 0) {
      std::memcpy(&TrialState->lambdaStopTestPrev.data[0],
                  &TrialState->lambdaStopTest.data[0], static_cast<uint32_T>
                  (proc_control_B.idx_max_tmp) * sizeof(real_T));
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_B.smax_mm) && (MeritFunction->nlpComplError <=
         0.02 * proc_control_B.smax_mm)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          dxTooSmall = true;
          proc_control_B.ix_a = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_B.ix_a <= static_cast<uint16_T>
                               (WorkingSet->nVar) - 1)) {
            if (0.1 * std::fmax(1.0, std::abs(TrialState->
                  xstarsqp[proc_control_B.ix_a])) <= std::abs
                (TrialState->delta_x.data[proc_control_B.ix_a])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_B.ix_a++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else {
              proc_control_B.idx_max_l = WorkingSet->nActiveConstr - 1;
              if (WorkingSet->nActiveConstr == 0) {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              } else {
                proc_c_updateWorkingSetForNewQP(TrialState->xstarsqp, WorkingSet,
                  WorkingSet->sizes[2], TrialState->mNonlinIneq,
                  TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                  lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
                if (proc_control_B.idx_max_l >= 0) {
                  std::memset(&TrialState->lambda.data[0], 0,
                              static_cast<uint32_T>(proc_control_B.idx_max_l + 1)
                              * sizeof(real_T));
                }

                proc_control_factorQRE(QRManager, WorkingSet->ATwset.data,
                  WorkingSet->nVar, WorkingSet->nActiveConstr, WorkingSet->ldA);
                proc_control_B.rankR = QRManager->minRowCol;
                for (proc_control_B.idx_max_l = 0; proc_control_B.idx_max_l <
                     proc_control_B.rankR; proc_control_B.idx_max_l++) {
                  proc_control_B.iQR0_c = QRManager->ldq *
                    proc_control_B.idx_max_l + proc_control_B.idx_max_l;
                  proc_control_B.b_n_a = QRManager->mrows -
                    proc_control_B.idx_max_l;
                  if (proc_control_B.b_n_a - 2 >= 0) {
                    std::memcpy(&QRManager->Q.data[proc_control_B.iQR0_c + 1],
                                &QRManager->QR.data[proc_control_B.iQR0_c + 1],
                                static_cast<uint32_T>(((proc_control_B.b_n_a +
                      proc_control_B.iQR0_c) - proc_control_B.iQR0_c) - 1) *
                                sizeof(real_T));
                  }
                }

                proc_control_xorgqr_l(QRManager->mrows, QRManager->mrows,
                                      QRManager->minRowCol, QRManager->Q.data,
                                      QRManager->Q.size, QRManager->ldq,
                                      QRManager->tau.data);
                proc_control_B.rankR = QRManager->ldq;
                proc_control_B.idx_max_l = static_cast<uint16_T>
                  (WorkingSet->nVar);
                std::memset(&memspace->workspace_float.data[0], 0, static_cast<
                            uint32_T>(proc_control_B.idx_max_l) * sizeof(real_T));
                proc_control_B.iQR0_c = 0;
                proc_control_B.b_n_a = (WorkingSet->nVar - 1) * QRManager->ldq +
                  1;
                for (proc_control_B.idx_max_l = 1; proc_control_B.rankR < 0 ?
                     proc_control_B.idx_max_l >= proc_control_B.b_n_a :
                     proc_control_B.idx_max_l <= proc_control_B.b_n_a;
                     proc_control_B.idx_max_l += proc_control_B.rankR) {
                  proc_control_B.s_d = 0.0;
                  proc_control_B.c_ix_f = (proc_control_B.idx_max_l +
                    proc_control_B.nVar_ft) - 1;
                  for (proc_control_B.ix_a = proc_control_B.idx_max_l;
                       proc_control_B.ix_a <= proc_control_B.c_ix_f;
                       proc_control_B.ix_a++) {
                    proc_control_B.s_d += QRManager->Q.data[proc_control_B.ix_a
                      - 1] * TrialState->grad.data[proc_control_B.ix_a -
                      proc_control_B.idx_max_l];
                  }

                  memspace->workspace_float.data[proc_control_B.iQR0_c] -=
                    proc_control_B.s_d;
                  proc_control_B.iQR0_c++;
                }

                if (WorkingSet->nVar >= WorkingSet->nActiveConstr) {
                  proc_control_B.c_ix_f = WorkingSet->nVar;
                } else {
                  proc_control_B.c_ix_f = WorkingSet->nActiveConstr;
                }

                proc_control_B.s_d = std::fmin(1.4901161193847656E-8,
                  static_cast<real_T>(proc_control_B.c_ix_f) *
                  2.2204460492503131E-16) * std::abs(QRManager->QR.data[0]);
                if (WorkingSet->nVar <= WorkingSet->nActiveConstr) {
                  proc_control_B.ix_a = WorkingSet->nVar;
                } else {
                  proc_control_B.ix_a = WorkingSet->nActiveConstr;
                }

                proc_control_B.rankR = 0;
                proc_control_B.nVar_ft = 0;
                while ((proc_control_B.rankR < proc_control_B.ix_a) && (std::abs
                        (QRManager->QR.data[proc_control_B.nVar_ft]) >
                        proc_control_B.s_d)) {
                  proc_control_B.rankR++;
                  proc_control_B.nVar_ft = (proc_control_B.nVar_ft +
                    QRManager->ldq) + 1;
                }

                if (proc_control_B.rankR != 0) {
                  for (proc_control_B.nVar_ft = proc_control_B.rankR;
                       proc_control_B.nVar_ft >= 1; proc_control_B.nVar_ft--) {
                    proc_control_B.iQR0_c = ((proc_control_B.nVar_ft - 1) *
                      QRManager->ldq + proc_control_B.nVar_ft) - 2;
                    memspace->workspace_float.data[proc_control_B.nVar_ft - 1] /=
                      QRManager->QR.data[proc_control_B.iQR0_c + 1];
                    for (proc_control_B.idx_max_l = 0; proc_control_B.idx_max_l <=
                         proc_control_B.nVar_ft - 2; proc_control_B.idx_max_l++)
                    {
                      proc_control_B.c_ix_f = (proc_control_B.nVar_ft -
                        proc_control_B.idx_max_l) - 2;
                      memspace->workspace_float.data[proc_control_B.c_ix_f] -=
                        memspace->workspace_float.data[proc_control_B.nVar_ft -
                        1] * QRManager->QR.data[proc_control_B.iQR0_c -
                        proc_control_B.idx_max_l];
                    }
                  }
                }

                if (WorkingSet->nActiveConstr <= proc_control_B.ix_a) {
                  proc_control_B.ix_a = WorkingSet->nActiveConstr;
                }

                for (proc_control_B.nVar_ft = 0; proc_control_B.nVar_ft <
                     proc_control_B.ix_a; proc_control_B.nVar_ft++) {
                  TrialState->lambda.data[QRManager->
                    jpvt.data[proc_control_B.nVar_ft] - 1] =
                    memspace->workspace_float.data[proc_control_B.nVar_ft];
                }

                proc_control_sortLambdaQP(TrialState->lambda.data,
                  WorkingSet->nActiveConstr, WorkingSet->sizes,
                  WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                  WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
                proc_control_computeGradLag_l(memspace->workspace_float.data,
                  WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
                  WorkingSet->sizes[2], WorkingSet->Aineq.data,
                  WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
                  WorkingSet->sizes[0], WorkingSet->indexLB.data,
                  WorkingSet->sizes[3], WorkingSet->indexUB.data,
                  WorkingSet->sizes[4], TrialState->lambda.data);
                proc_con_computeDualFeasError_n(WorkingSet->nVar,
                  memspace->workspace_float.data, &isFeasible,
                  &proc_control_B.s_d);
                proc_control_B.nlpComplErrorTmp = proc_control_computeComplError
                  (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                   TrialState->xstarsqp, WorkingSet->sizes[2],
                   TrialState->cIneq.data, WorkingSet->indexLB.data,
                   WorkingSet->sizes[3], lb, WorkingSet->indexUB.data,
                   WorkingSet->sizes[4], TrialState->lambda.data,
                   WorkingSet->sizes[0] + 131);
                proc_control_B.d38 = std::fmax(proc_control_B.s_d,
                  proc_control_B.nlpComplErrorTmp);
                if (proc_control_B.d38 <= std::fmax
                    (MeritFunction->nlpDualFeasError,
                     MeritFunction->nlpComplError)) {
                  MeritFunction->nlpDualFeasError = proc_control_B.s_d;
                  MeritFunction->nlpComplError = proc_control_B.nlpComplErrorTmp;
                  MeritFunction->firstOrderOpt = proc_control_B.d38;
                  if (proc_control_B.idx_max_tmp - 1 >= 0) {
                    std::memcpy(&TrialState->lambdaStopTest.data[0],
                                &TrialState->lambda.data[0],
                                static_cast<uint32_T>(proc_control_B.idx_max_tmp)
                                * sizeof(real_T));
                  }
                }

                if ((MeritFunction->nlpDualFeasError <= 0.02 *
                     proc_control_B.smax_mm) && (MeritFunction->nlpComplError <=
                     0.02 * proc_control_B.smax_mm)) {
                  TrialState->sqpExitFlag = 1;
                } else {
                  TrialState->sqpExitFlag = 2;
                }

                Flags->done = true;
                guard1 = true;
              }
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 13900) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
boolean_T proc_control::proc_control_BFGSUpdate(int32_T nvar, real_T Bk[19321],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  int32_T b;
  int32_T b_ix;
  int32_T b_jA;
  int32_T b_tmp;
  int32_T ix;
  int32_T jy;
  boolean_T success;
  proc_control_B.dotSY = 0.0;
  if (nvar >= 1) {
    b = static_cast<uint16_T>(nvar);
    for (ix = 0; ix < b; ix++) {
      proc_control_B.dotSY += sk_data[ix] * yk_data[ix];
    }
  }

  b_tmp = static_cast<uint16_T>(nvar);
  std::memset(&workspace_data[0], 0, static_cast<uint16_T>(nvar) * sizeof(real_T));
  ix = 0;
  jy = (nvar - 1) * 139 + 1;
  for (b = 1; b <= jy; b += 139) {
    b_ix = (b + nvar) - 1;
    for (b_jA = b; b_jA <= b_ix; b_jA++) {
      int32_T tmp;
      tmp = b_jA - b;
      workspace_data[tmp] += Bk[b_jA - 1] * sk_data[ix];
    }

    ix++;
  }

  proc_control_B.curvatureS = 0.0;
  if (nvar >= 1) {
    for (b = 0; b < b_tmp; b++) {
      proc_control_B.curvatureS += workspace_data[b] * sk_data[b];
    }
  }

  if (proc_control_B.dotSY < 0.2 * proc_control_B.curvatureS) {
    proc_control_B.dotSY = 0.8 * proc_control_B.curvatureS /
      (proc_control_B.curvatureS - proc_control_B.dotSY);
    for (ix = 0; ix < b_tmp; ix++) {
      yk_data[ix] *= proc_control_B.dotSY;
    }

    if (!(1.0 - proc_control_B.dotSY == 0.0)) {
      for (b = 0; b < nvar; b++) {
        yk_data[b] += (1.0 - proc_control_B.dotSY) * workspace_data[b];
      }
    }

    proc_control_B.dotSY = 0.0;
    if (nvar >= 1) {
      for (ix = 0; ix < b_tmp; ix++) {
        proc_control_B.dotSY += sk_data[ix] * yk_data[ix];
      }
    }
  }

  success = ((proc_control_B.curvatureS > 2.2204460492503131E-16) &&
             (proc_control_B.dotSY > 2.2204460492503131E-16));
  if (success) {
    proc_control_B.curvatureS = -1.0 / proc_control_B.curvatureS;
    if (!(proc_control_B.curvatureS == 0.0)) {
      ix = 1;
      for (b = 0; b < b_tmp; b++) {
        if (workspace_data[b] != 0.0) {
          real_T temp;
          temp = workspace_data[b] * proc_control_B.curvatureS;
          b_ix = nvar + ix;
          for (b_jA = ix; b_jA < b_ix; b_jA++) {
            Bk[b_jA - 1] += workspace_data[b_jA - ix] * temp;
          }
        }

        ix += 139;
      }
    }

    proc_control_B.dotSY = 1.0 / proc_control_B.dotSY;
    if (!(proc_control_B.dotSY == 0.0)) {
      b_jA = 1;
      for (ix = 0; ix < b_tmp; ix++) {
        proc_control_B.curvatureS = yk_data[ix];
        if (proc_control_B.curvatureS != 0.0) {
          proc_control_B.curvatureS *= proc_control_B.dotSY;
          b_ix = nvar + b_jA;
          for (b = b_jA; b < b_ix; b++) {
            Bk[b - 1] += yk_data[b - b_jA] * proc_control_B.curvatureS;
          }
        }

        b_jA += 139;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factorQRE_f(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, obj->tau.size);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_countsort(int32_T x_data[], int32_T xLen,
  int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  if ((xLen > 1) && (xMax > xMin)) {
    int32_T idxEnd;
    int32_T idxEnd_tmp;
    int32_T idxStart;
    int32_T maxOffset_tmp;
    idxEnd_tmp = xMax - xMin;
    if (idxEnd_tmp >= 0) {
      std::memset(&workspace_data[0], 0, static_cast<uint32_T>(idxEnd_tmp + 1) *
                  sizeof(int32_T));
    }

    maxOffset_tmp = idxEnd_tmp - 1;
    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 2; idxStart <= maxOffset_tmp + 2; idxStart++) {
      workspace_data[idxStart - 1] += workspace_data[idxStart - 2];
    }

    idxStart = 1;
    idxEnd = workspace_data[0];
    for (int32_T maxOffset{0}; maxOffset <= maxOffset_tmp; maxOffset++) {
      for (idxEnd_tmp = idxStart; idxEnd_tmp <= idxEnd; idxEnd_tmp++) {
        x_data[idxEnd_tmp - 1] = maxOffset + xMin;
      }

      idxStart = workspace_data[maxOffset] + 1;
      idxEnd = workspace_data[maxOffset + 1];
    }

    for (int32_T maxOffset{idxStart}; maxOffset <= idxEnd; maxOffset++) {
      x_data[maxOffset - 1] = xMax;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_removeConstr(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  if (idx_global < obj->nActiveConstr) {
    int32_T b;
    obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
    obj->Wlocalidx.data[idx_global - 1] = obj->Wlocalidx.data[obj->nActiveConstr
      - 1];
    b = static_cast<uint16_T>(obj->nVar);
    for (int32_T idx{0}; idx < b; idx++) {
      obj->ATwset.data[idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
        [(obj->nActiveConstr - 1) * obj->ldA + idx];
    }

    obj->bwset.data[idx_global - 1] = obj->bwset.data[obj->nActiveConstr - 1];
  }

  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S217>/NLMPC'
int32_T proc_control::proc_control_RemoveDependentEq_
  (s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
   *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager)
{
  int32_T nDepInd;
  boolean_T exitg1;
  proc_control_B.mWorkingFixed = workingset->nWConstr[0];
  proc_control_B.mTotalWorkingEq_tmp_tmp = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_B.mTotalWorkingEq_tmp_tmp > 0) {
    proc_control_B.c_tmp_tmp = static_cast<uint16_T>(workingset->nVar);
    for (proc_control_B.totalRank = 0; proc_control_B.totalRank <
         proc_control_B.mTotalWorkingEq_tmp_tmp; proc_control_B.totalRank++) {
      for (proc_control_B.nVar_f = 0; proc_control_B.nVar_f <
           proc_control_B.c_tmp_tmp; proc_control_B.nVar_f++) {
        qrmanager->QR.data[proc_control_B.totalRank + qrmanager->ldq *
          proc_control_B.nVar_f] = workingset->ATwset.data[workingset->ldA *
          proc_control_B.totalRank + proc_control_B.nVar_f];
      }
    }

    proc_control_B.nVar_f = proc_control_B.mTotalWorkingEq_tmp_tmp -
      workingset->nVar;
    if (proc_control_B.nVar_f > 0) {
      nDepInd = proc_control_B.nVar_f;
    }

    std::memset(&qrmanager->jpvt.data[0], 0, static_cast<uint32_T>
                (proc_control_B.c_tmp_tmp) * sizeof(int32_T));
    proc_control_factorQRE_f(qrmanager, proc_control_B.mTotalWorkingEq_tmp_tmp,
      workingset->nVar);
    proc_control_B.tol = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar <= proc_control_B.mTotalWorkingEq_tmp_tmp) {
      proc_control_B.totalRank = workingset->nVar;
    } else {
      proc_control_B.totalRank = proc_control_B.mTotalWorkingEq_tmp_tmp;
    }

    proc_control_B.totalRank += (proc_control_B.totalRank - 1) * qrmanager->ldq;
    while ((proc_control_B.totalRank > 0) && (std::abs(qrmanager->
             QR.data[proc_control_B.totalRank - 1]) < proc_control_B.tol)) {
      proc_control_B.totalRank = (proc_control_B.totalRank - qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      proc_control_B.ix_i = qrmanager->minRowCol;
      for (proc_control_B.nVar_f = 0; proc_control_B.nVar_f <
           proc_control_B.ix_i; proc_control_B.nVar_f++) {
        proc_control_B.totalRank = qrmanager->ldq * proc_control_B.nVar_f +
          proc_control_B.nVar_f;
        proc_control_B.mTotalWorkingEq = qrmanager->mrows -
          proc_control_B.nVar_f;
        if (proc_control_B.mTotalWorkingEq - 2 >= 0) {
          std::memcpy(&qrmanager->Q.data[proc_control_B.totalRank + 1],
                      &qrmanager->QR.data[proc_control_B.totalRank + 1],
                      static_cast<uint32_T>(((proc_control_B.mTotalWorkingEq +
            proc_control_B.totalRank) - proc_control_B.totalRank) - 1) * sizeof
                      (real_T));
        }
      }

      proc_control_xorgqr_l(qrmanager->mrows, qrmanager->mrows,
                            qrmanager->minRowCol, qrmanager->Q.data,
                            qrmanager->Q.size, qrmanager->ldq,
                            qrmanager->tau.data);
      proc_control_B.mTotalWorkingEq = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.mTotalWorkingEq <= nDepInd - 1)) {
        proc_control_B.ix_i = ((proc_control_B.mTotalWorkingEq_tmp_tmp -
          proc_control_B.mTotalWorkingEq) - 1) * qrmanager->ldq;
        proc_control_B.qtb = 0.0;
        for (proc_control_B.nVar_f = 0; proc_control_B.nVar_f <
             proc_control_B.mTotalWorkingEq_tmp_tmp; proc_control_B.nVar_f++) {
          proc_control_B.qtb += qrmanager->Q.data[proc_control_B.ix_i +
            proc_control_B.nVar_f] * workingset->
            bwset.data[proc_control_B.nVar_f];
        }

        if (std::abs(proc_control_B.qtb) >= proc_control_B.tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_B.mTotalWorkingEq++;
        }
      }
    }

    if (nDepInd > 0) {
      for (proc_control_B.totalRank = 0; proc_control_B.totalRank <
           proc_control_B.mTotalWorkingEq_tmp_tmp; proc_control_B.totalRank++) {
        proc_control_B.mTotalWorkingEq = qrmanager->ldq *
          proc_control_B.totalRank;
        proc_control_B.ix_i = workingset->ldA * proc_control_B.totalRank;
        for (proc_control_B.nVar_f = 0; proc_control_B.nVar_f <
             proc_control_B.c_tmp_tmp; proc_control_B.nVar_f++) {
          qrmanager->QR.data[proc_control_B.mTotalWorkingEq +
            proc_control_B.nVar_f] = workingset->ATwset.data[proc_control_B.ix_i
            + proc_control_B.nVar_f];
        }
      }

      for (proc_control_B.nVar_f = 0; proc_control_B.nVar_f <
           proc_control_B.mWorkingFixed; proc_control_B.nVar_f++) {
        qrmanager->jpvt.data[proc_control_B.nVar_f] = 1;
      }

      proc_control_B.nVar_f = workingset->nWConstr[0] + 1;
      if (proc_control_B.nVar_f <= proc_control_B.mTotalWorkingEq_tmp_tmp) {
        std::memset(&qrmanager->jpvt.data[proc_control_B.nVar_f + -1], 0,
                    static_cast<uint32_T>
                    ((proc_control_B.mTotalWorkingEq_tmp_tmp -
                      proc_control_B.nVar_f) + 1) * sizeof(int32_T));
      }

      proc_control_factorQRE_f(qrmanager, workingset->nVar,
        proc_control_B.mTotalWorkingEq_tmp_tmp);
      for (proc_control_B.mWorkingFixed = 0; proc_control_B.mWorkingFixed <
           nDepInd; proc_control_B.mWorkingFixed++) {
        memspace->workspace_int.data[proc_control_B.mWorkingFixed] =
          qrmanager->jpvt.data[(proc_control_B.mTotalWorkingEq_tmp_tmp - nDepInd)
          + proc_control_B.mWorkingFixed];
      }

      proc_control_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_B.mTotalWorkingEq_tmp_tmp);
      for (proc_control_B.mTotalWorkingEq = nDepInd;
           proc_control_B.mTotalWorkingEq >= 1; proc_control_B.mTotalWorkingEq--)
      {
        proc_control_B.totalRank = workingset->nWConstr[0] +
          workingset->nWConstr[1];
        if (proc_control_B.totalRank != 0) {
          proc_control_B.nVar_f = memspace->
            workspace_int.data[proc_control_B.mTotalWorkingEq - 1];
          if (proc_control_B.nVar_f <= proc_control_B.totalRank) {
            if ((proc_control_B.totalRank == workingset->nActiveConstr) ||
                (proc_control_B.totalRank == proc_control_B.nVar_f)) {
              workingset->mEqRemoved++;
              workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
                workingset->Wlocalidx.data[proc_control_B.nVar_f - 1];
              proc_control_removeConstr(workingset, proc_control_B.nVar_f);
            } else {
              workingset->mEqRemoved++;
              proc_control_B.mTotalWorkingEq_tmp_tmp = workingset->
                Wid.data[proc_control_B.nVar_f - 1] - 1;
              proc_control_B.mWorkingFixed = workingset->
                Wlocalidx.data[proc_control_B.nVar_f - 1];
              workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
                proc_control_B.mWorkingFixed;
              workingset->isActiveConstr.data[(workingset->
                isActiveIdx[proc_control_B.mTotalWorkingEq_tmp_tmp] +
                proc_control_B.mWorkingFixed) - 2] = false;
              workingset->Wid.data[proc_control_B.nVar_f - 1] =
                workingset->Wid.data[proc_control_B.totalRank - 1];
              workingset->Wlocalidx.data[proc_control_B.nVar_f - 1] =
                workingset->Wlocalidx.data[proc_control_B.totalRank - 1];
              for (proc_control_B.mWorkingFixed = 0;
                   proc_control_B.mWorkingFixed < proc_control_B.c_tmp_tmp;
                   proc_control_B.mWorkingFixed++) {
                workingset->ATwset.data[proc_control_B.mWorkingFixed +
                  workingset->ldA * (proc_control_B.nVar_f - 1)] =
                  workingset->ATwset.data[(proc_control_B.totalRank - 1) *
                  workingset->ldA + proc_control_B.mWorkingFixed];
              }

              workingset->bwset.data[proc_control_B.nVar_f - 1] =
                workingset->bwset.data[proc_control_B.totalRank - 1];
              workingset->Wid.data[proc_control_B.totalRank - 1] =
                workingset->Wid.data[workingset->nActiveConstr - 1];
              workingset->Wlocalidx.data[proc_control_B.totalRank - 1] =
                workingset->Wlocalidx.data[workingset->nActiveConstr - 1];
              for (proc_control_B.mWorkingFixed = 0;
                   proc_control_B.mWorkingFixed < proc_control_B.c_tmp_tmp;
                   proc_control_B.mWorkingFixed++) {
                workingset->ATwset.data[proc_control_B.mWorkingFixed +
                  workingset->ldA * (proc_control_B.totalRank - 1)] =
                  workingset->ATwset.data[(workingset->nActiveConstr - 1) *
                  workingset->ldA + proc_control_B.mWorkingFixed];
              }

              workingset->bwset.data[proc_control_B.totalRank - 1] =
                workingset->bwset.data[workingset->nActiveConstr - 1];
              workingset->nActiveConstr--;
              workingset->nWConstr[proc_control_B.mTotalWorkingEq_tmp_tmp]--;
            }
          }
        }
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_contr_RemoveDependentIneq_
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *
   qrmanager, s_z8miyzCNLMZx998HtZciUB_proc_T *memspace)
{
  proc_control_B.nActiveConstr_tmp_m = workingset->nActiveConstr;
  proc_control_B.nFixedConstr_g = workingset->nWConstr[0] + workingset->
    nWConstr[1];
  proc_control_B.nVar_b = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_B.tol_f = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    for (proc_control_B.nDepIneq_m = 0; proc_control_B.nDepIneq_m <
         proc_control_B.nFixedConstr_g; proc_control_B.nDepIneq_m++) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq_m] = 1;
    }

    if (proc_control_B.nFixedConstr_g + 1 <= proc_control_B.nActiveConstr_tmp_m)
    {
      std::memset(&qrmanager->jpvt.data[proc_control_B.nFixedConstr_g], 0,
                  static_cast<uint32_T>(proc_control_B.nActiveConstr_tmp_m -
        proc_control_B.nFixedConstr_g) * sizeof(int32_T));
    }

    for (proc_control_B.nDepIneq_m = 0; proc_control_B.nDepIneq_m <
         proc_control_B.nActiveConstr_tmp_m; proc_control_B.nDepIneq_m++) {
      proc_control_B.iy0_e = qrmanager->ldq * proc_control_B.nDepIneq_m;
      proc_control_B.ix0_f1 = workingset->ldA * proc_control_B.nDepIneq_m;
      proc_control_B.c_d = static_cast<uint16_T>(proc_control_B.nVar_b);
      for (proc_control_B.nActiveConstr_e = 0; proc_control_B.nActiveConstr_e <
           proc_control_B.c_d; proc_control_B.nActiveConstr_e++) {
        qrmanager->QR.data[proc_control_B.iy0_e + proc_control_B.nActiveConstr_e]
          = workingset->ATwset.data[proc_control_B.ix0_f1 +
          proc_control_B.nActiveConstr_e];
      }
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_B.nDepIneq_m = 0;
    proc_control_B.nActiveConstr_e = workingset->nActiveConstr - 1;
    while (proc_control_B.nActiveConstr_e + 1 > proc_control_B.nVar_b) {
      proc_control_B.nDepIneq_m++;
      memspace->workspace_int.data[proc_control_B.nDepIneq_m - 1] =
        qrmanager->jpvt.data[proc_control_B.nActiveConstr_e];
      proc_control_B.nActiveConstr_e--;
    }

    if (proc_control_B.nActiveConstr_e + 1 <= workingset->nVar) {
      proc_control_B.nVar_b = qrmanager->ldq * proc_control_B.nActiveConstr_e +
        proc_control_B.nActiveConstr_e;
      while ((proc_control_B.nActiveConstr_e + 1 > proc_control_B.nFixedConstr_g)
             && (std::abs(qrmanager->QR.data[proc_control_B.nVar_b]) <
                 proc_control_B.tol_f)) {
        proc_control_B.nDepIneq_m++;
        memspace->workspace_int.data[proc_control_B.nDepIneq_m - 1] =
          qrmanager->jpvt.data[proc_control_B.nActiveConstr_e];
        proc_control_B.nActiveConstr_e--;
        proc_control_B.nVar_b = (proc_control_B.nVar_b - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data,
      proc_control_B.nDepIneq_m, memspace->workspace_sort.data,
      proc_control_B.nFixedConstr_g + 1, workingset->nActiveConstr);
    for (proc_control_B.nFixedConstr_g = proc_control_B.nDepIneq_m;
         proc_control_B.nFixedConstr_g >= 1; proc_control_B.nFixedConstr_g--) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_B.nFixedConstr_g - 1]);
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgeqrf_e(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T tau_size[1])
{
  if (m <= n) {
    proc_control_B.minmn_g = m;
  } else {
    proc_control_B.minmn_g = n;
  }

  if (A_size[0] <= A_size[1]) {
    proc_control_B.loop_ub_k = A_size[0];
  } else {
    proc_control_B.loop_ub_k = A_size[1];
  }

  tau_size[0] = proc_control_B.loop_ub_k;
  if (proc_control_B.loop_ub_k - 1 >= 0) {
    std::memset(&tau_data[0], 0, static_cast<uint32_T>(proc_control_B.loop_ub_k)
                * sizeof(real_T));
  }

  if (proc_control_B.minmn_g >= 1) {
    proc_control_qrf(A_data, A_size, m, n, proc_control_B.minmn_g, tau_data);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factorQR_a(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  boolean_T guard1;
  proc_control_B.idx_h = mrows * ncols;
  guard1 = false;
  if (proc_control_B.idx_h > 0) {
    for (proc_control_B.idx_h = 0; proc_control_B.idx_h < ncols;
         proc_control_B.idx_h++) {
      proc_control_B.ix0 = ldA * proc_control_B.idx_h;
      proc_control_B.iy0 = obj->ldq * proc_control_B.idx_h;
      proc_control_B.b_ce = static_cast<uint16_T>(mrows);
      for (proc_control_B.k_fy = 0; proc_control_B.k_fy < proc_control_B.b_ce;
           proc_control_B.k_fy++) {
        obj->QR.data[proc_control_B.iy0 + proc_control_B.k_fy] =
          A_data[proc_control_B.ix0 + proc_control_B.k_fy];
      }
    }

    guard1 = true;
  } else if (proc_control_B.idx_h == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    for (proc_control_B.idx_h = 0; proc_control_B.idx_h < ncols;
         proc_control_B.idx_h++) {
      obj->jpvt.data[proc_control_B.idx_h] = proc_control_B.idx_h + 1;
    }

    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqrf_e(obj->QR.data, obj->QR.size, mrows, ncols,
                          obj->tau.data, obj->tau.size);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factorQR(s_o1KzuWoPqzc62zOgqamCNH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  proc_control_B.b_d = static_cast<uint16_T>(ncols);
  for (proc_control_B.idx_hb = 0; proc_control_B.idx_hb < proc_control_B.b_d;
       proc_control_B.idx_hb++) {
    obj->jpvt.data[proc_control_B.idx_hb] = proc_control_B.idx_hb + 1;
  }

  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqrf_e(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                        obj->tau.size);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_jh(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T d;
    int32_T iy;
    b = static_cast<uint16_T>(n);
    for (int32_T b_iy{0}; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    d = (n - 1) * lda + 1;
    for (int32_T b_iy{1}; lda < 0 ? b_iy >= d : b_iy <= d; b_iy += lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (b = b_iy; b <= e; b++) {
        c += x_data[b - b_iy] * A_data[b - 1];
      }

      y_data[iy] += c;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_con_maxConstraintViolation
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T g_tmp;
  int32_T k;
  if (obj->probType == 2) {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
                    static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jh(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
                            x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        proc_control_B.obj_l = obj->maxConstrWorkspace.data[k] - x_data[k + 139];
        obj->maxConstrWorkspace.data[k] = proc_control_B.obj_l;
        v = std::fmax(v, proc_control_B.obj_l);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_jh(139, 130, obj->Aeq.data, obj->ldA, x_data,
                          obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      g_tmp = obj->sizes[2] + k;
      obj->maxConstrWorkspace.data[k] = (obj->maxConstrWorkspace.data[k] -
        x_data[g_tmp + 139]) + x_data[g_tmp + 269];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[k]));
    }
  } else {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
                    static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jh(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
                            x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_jh(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
                          obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[k]));
    }
  }

  if (obj->sizes[3] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[3]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[k] - 1] - obj->lb.data
                    [obj->indexLB.data[k] - 1]);
    }
  }

  if (obj->sizes[4] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[4]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, x_data[obj->indexUB.data[k] - 1] - obj->ub.data
                    [obj->indexUB.data[k] - 1]);
    }
  }

  if (obj->sizes[0] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[0]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[k] - 1] -
        obj->ub.data[obj->indexFixed.data[k] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_jhn(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T d;
    int32_T iy;
    b = static_cast<uint16_T>(n);
    for (int32_T b_iy{0}; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    d = (n - 1) * lda + 1;
    for (int32_T b_iy{1}; lda < 0 ? b_iy >= d : b_iy <= d; b_iy += lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (b = b_iy; b <= e; b++) {
        c += x_data[((ix0 + b) - b_iy) - 1] * A_data[b - 1];
      }

      y_data[iy] += c;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_c_maxConstraintViolation_a
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  int32_T g_tmp;
  int32_T k;
  if (obj->probType == 2) {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
                    static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhn(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        proc_control_B.obj_i = obj->maxConstrWorkspace.data[k] - x_data[(ix0 + k)
          + 138];
        obj->maxConstrWorkspace.data[k] = proc_control_B.obj_i;
        v = std::fmax(v, proc_control_B.obj_i);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_jhn(139, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      g_tmp = (ix0 + obj->sizes[2]) + k;
      obj->maxConstrWorkspace.data[k] = (obj->maxConstrWorkspace.data[k] -
        x_data[g_tmp + 138]) + x_data[g_tmp + 268];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[k]));
    }
  } else {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
                    static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhn(obj->nVar, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_jhn(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[k]));
    }
  }

  if (obj->sizes[3] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[3]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, -x_data[(ix0 + obj->indexLB.data[k]) - 2] - obj->
                    lb.data[obj->indexLB.data[k] - 1]);
    }
  }

  if (obj->sizes[4] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[4]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, x_data[(ix0 + obj->indexUB.data[k]) - 2] - obj->
                    ub.data[obj->indexUB.data[k] - 1]);
    }
  }

  if (obj->sizes[0] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[0]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, std::abs(x_data[(ix0 + obj->indexFixed.data[k]) - 2] -
        obj->ub.data[obj->indexFixed.data[k] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S217>/NLMPC'
boolean_T proc_control::proc_co_feasibleX0ForWorkingSet(real_T workspace_data[],
  const int32_T workspace_size[2], real_T xCurrent_data[],
  s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T
  *qrmanager)
{
  int32_T exitg1;
  boolean_T nonDegenerateWset;
  proc_control_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_B.nVar_m = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    for (proc_control_B.ix_j = 0; proc_control_B.ix_j <=
         proc_control_B.mWConstr_tmp_tmp; proc_control_B.ix_j++) {
      workspace_data[proc_control_B.ix_j] = workingset->
        bwset.data[proc_control_B.ix_j];
      workspace_data[proc_control_B.ix_j + workspace_size[0]] =
        workingset->bwset.data[proc_control_B.ix_j];
    }

    proc_control_B.ldw = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_B.iy_m = 0;
      proc_control_B.iQR0_i = (workingset->nActiveConstr - 1) * workingset->ldA
        + 1;
      for (proc_control_B.ldq = 1; proc_control_B.ldw < 0 ? proc_control_B.ldq >=
           proc_control_B.iQR0_i : proc_control_B.ldq <= proc_control_B.iQR0_i;
           proc_control_B.ldq += proc_control_B.ldw) {
        proc_control_B.c_a = 0.0;
        proc_control_B.e_d0 = (proc_control_B.ldq + proc_control_B.nVar_m) - 1;
        for (proc_control_B.ix_j = proc_control_B.ldq; proc_control_B.ix_j <=
             proc_control_B.e_d0; proc_control_B.ix_j++) {
          proc_control_B.c_a += workingset->ATwset.data[proc_control_B.ix_j - 1]
            * xCurrent_data[proc_control_B.ix_j - proc_control_B.ldq];
        }

        workspace_data[proc_control_B.iy_m] -= proc_control_B.c_a;
        proc_control_B.iy_m++;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_B.ldw = static_cast<uint16_T>(workingset->nVar);
      for (proc_control_B.ix_j = 0; proc_control_B.ix_j < proc_control_B.ldw;
           proc_control_B.ix_j++) {
        proc_control_B.iy_m = qrmanager->ldq * proc_control_B.ix_j;
        for (proc_control_B.ldq = 0; proc_control_B.ldq <=
             proc_control_B.mWConstr_tmp_tmp; proc_control_B.ldq++) {
          qrmanager->QR.data[proc_control_B.ldq + proc_control_B.iy_m] =
            workingset->ATwset.data[workingset->ldA * proc_control_B.ldq +
            proc_control_B.ix_j];
        }
      }

      proc_control_factorQR(qrmanager, workingset->nActiveConstr,
                            workingset->nVar);
      proc_control_B.iy_m = qrmanager->minRowCol;
      for (proc_control_B.ldq = 0; proc_control_B.ldq < proc_control_B.iy_m;
           proc_control_B.ldq++) {
        proc_control_B.iQR0_i = qrmanager->ldq * proc_control_B.ldq +
          proc_control_B.ldq;
        proc_control_B.ix_j = qrmanager->mrows - proc_control_B.ldq;
        if (proc_control_B.ix_j - 2 >= 0) {
          std::memcpy(&qrmanager->Q.data[proc_control_B.iQR0_i + 1],
                      &qrmanager->QR.data[proc_control_B.iQR0_i + 1],
                      static_cast<uint32_T>(((proc_control_B.ix_j +
            proc_control_B.iQR0_i) - proc_control_B.iQR0_i) - 1) * sizeof(real_T));
        }
      }

      proc_control_xorgqr_l(qrmanager->mrows, qrmanager->mrows,
                            qrmanager->minRowCol, qrmanager->Q.data,
                            qrmanager->Q.size, qrmanager->ldq,
                            qrmanager->tau.data);
      proc_control_B.ldq = qrmanager->ldq;
      proc_control_B.ldw = workspace_size[0];
      proc_control_B.ix_j = workspace_size[0] * workspace_size[1];
      if (proc_control_B.ix_j - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0],
                    static_cast<uint32_T>(proc_control_B.ix_j) * sizeof(real_T));
      }

      for (proc_control_B.ix_j = 0; proc_control_B.ldw < 0 ? proc_control_B.ix_j
           >= proc_control_B.ldw : proc_control_B.ix_j <= proc_control_B.ldw;
           proc_control_B.ix_j += proc_control_B.ldw) {
        proc_control_B.iQR0_i = proc_control_B.ix_j + proc_control_B.nVar_m;
        for (proc_control_B.iy_m = proc_control_B.ix_j + 1; proc_control_B.iy_m <=
             proc_control_B.iQR0_i; proc_control_B.iy_m++) {
          workspace_data[proc_control_B.iy_m - 1] = 0.0;
        }
      }

      proc_control_B.iy_m = -1;
      for (proc_control_B.iQR0_i = 0; proc_control_B.ldw < 0 ?
           proc_control_B.iQR0_i >= proc_control_B.ldw : proc_control_B.iQR0_i <=
           proc_control_B.ldw; proc_control_B.iQR0_i += proc_control_B.ldw) {
        proc_control_B.iAcol = -1;
        proc_control_B.ar = proc_control_B.iQR0_i + proc_control_B.nVar_m;
        for (proc_control_B.ix_j = proc_control_B.iQR0_i + 1;
             proc_control_B.ix_j <= proc_control_B.ar; proc_control_B.ix_j++) {
          proc_control_B.c_a = 0.0;
          for (proc_control_B.e_d0 = 0; proc_control_B.e_d0 <=
               proc_control_B.mWConstr_tmp_tmp; proc_control_B.e_d0++) {
            proc_control_B.c_a += qrmanager->Q.data[(proc_control_B.e_d0 +
              proc_control_B.iAcol) + 1] * proc_control_B.B_data
              [(proc_control_B.e_d0 + proc_control_B.iy_m) + 1];
          }

          workspace_data[proc_control_B.ix_j - 1] += proc_control_B.c_a;
          proc_control_B.iAcol += proc_control_B.ldq;
        }

        proc_control_B.iy_m += proc_control_B.ldw;
      }

      for (proc_control_B.iQR0_i = 0; proc_control_B.iQR0_i < 2;
           proc_control_B.iQR0_i++) {
        proc_control_B.iy_m = proc_control_B.ldw * proc_control_B.iQR0_i - 1;
        for (proc_control_B.ix_j = proc_control_B.nVar_m; proc_control_B.ix_j >=
             1; proc_control_B.ix_j--) {
          proc_control_B.iAcol = (proc_control_B.ix_j - 1) * proc_control_B.ldq;
          proc_control_B.c_tmp = proc_control_B.ix_j + proc_control_B.iy_m;
          proc_control_B.c_a = workspace_data[proc_control_B.c_tmp];
          if (proc_control_B.c_a != 0.0) {
            workspace_data[proc_control_B.c_tmp] = proc_control_B.c_a /
              qrmanager->QR.data[(proc_control_B.ix_j + proc_control_B.iAcol) -
              1];
            proc_control_B.ar = static_cast<uint16_T>(proc_control_B.ix_j - 1);
            for (proc_control_B.e_d0 = 0; proc_control_B.e_d0 <
                 proc_control_B.ar; proc_control_B.e_d0++) {
              proc_control_B.mWConstr_tmp_tmp = (proc_control_B.e_d0 +
                proc_control_B.iy_m) + 1;
              workspace_data[proc_control_B.mWConstr_tmp_tmp] -=
                qrmanager->QR.data[proc_control_B.e_d0 + proc_control_B.iAcol] *
                workspace_data[proc_control_B.c_tmp];
            }
          }
        }
      }
    } else {
      proc_control_factorQR_a(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_B.iy_m = qrmanager->minRowCol;
      for (proc_control_B.ldq = 0; proc_control_B.ldq < proc_control_B.iy_m;
           proc_control_B.ldq++) {
        proc_control_B.iQR0_i = qrmanager->ldq * proc_control_B.ldq +
          proc_control_B.ldq;
        proc_control_B.ix_j = qrmanager->mrows - proc_control_B.ldq;
        if (proc_control_B.ix_j - 2 >= 0) {
          std::memcpy(&qrmanager->Q.data[proc_control_B.iQR0_i + 1],
                      &qrmanager->QR.data[proc_control_B.iQR0_i + 1],
                      static_cast<uint32_T>(((proc_control_B.ix_j +
            proc_control_B.iQR0_i) - proc_control_B.iQR0_i) - 1) * sizeof(real_T));
        }
      }

      proc_control_xorgqr_l(qrmanager->mrows, qrmanager->minRowCol,
                            qrmanager->minRowCol, qrmanager->Q.data,
                            qrmanager->Q.size, qrmanager->ldq,
                            qrmanager->tau.data);
      proc_control_B.ldq = qrmanager->ldq;
      proc_control_B.ldw = workspace_size[0];
      for (proc_control_B.iQR0_i = 0; proc_control_B.iQR0_i < 2;
           proc_control_B.iQR0_i++) {
        proc_control_B.iy_m = proc_control_B.ldw * proc_control_B.iQR0_i;
        for (proc_control_B.ix_j = 0; proc_control_B.ix_j <=
             proc_control_B.mWConstr_tmp_tmp; proc_control_B.ix_j++) {
          proc_control_B.iAcol = proc_control_B.ldq * proc_control_B.ix_j;
          proc_control_B.c_tmp = proc_control_B.ix_j + proc_control_B.iy_m;
          proc_control_B.c_a = workspace_data[proc_control_B.c_tmp];
          proc_control_B.ar = static_cast<uint16_T>(proc_control_B.ix_j);
          for (proc_control_B.e_d0 = 0; proc_control_B.e_d0 < proc_control_B.ar;
               proc_control_B.e_d0++) {
            proc_control_B.c_a -= qrmanager->QR.data[proc_control_B.e_d0 +
              proc_control_B.iAcol] * workspace_data[proc_control_B.e_d0 +
              proc_control_B.iy_m];
          }

          workspace_data[proc_control_B.c_tmp] = proc_control_B.c_a /
            qrmanager->QR.data[proc_control_B.ix_j + proc_control_B.iAcol];
        }
      }

      proc_control_B.ix_j = workspace_size[0] * workspace_size[1];
      if (proc_control_B.ix_j - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0],
                    static_cast<uint32_T>(proc_control_B.ix_j) * sizeof(real_T));
      }

      for (proc_control_B.ix_j = 0; proc_control_B.ldw < 0 ? proc_control_B.ix_j
           >= proc_control_B.ldw : proc_control_B.ix_j <= proc_control_B.ldw;
           proc_control_B.ix_j += proc_control_B.ldw) {
        proc_control_B.iQR0_i = proc_control_B.ix_j + proc_control_B.nVar_m;
        for (proc_control_B.iy_m = proc_control_B.ix_j + 1; proc_control_B.iy_m <=
             proc_control_B.iQR0_i; proc_control_B.iy_m++) {
          workspace_data[proc_control_B.iy_m - 1] = 0.0;
        }
      }

      proc_control_B.iAcol = 1;
      for (proc_control_B.ix_j = 0; proc_control_B.ldw < 0 ? proc_control_B.ix_j
           >= proc_control_B.ldw : proc_control_B.ix_j <= proc_control_B.ldw;
           proc_control_B.ix_j += proc_control_B.ldw) {
        proc_control_B.ar = -1;
        proc_control_B.c_tmp = proc_control_B.iAcol +
          proc_control_B.mWConstr_tmp_tmp;
        for (proc_control_B.e_d0 = proc_control_B.iAcol; proc_control_B.e_d0 <=
             proc_control_B.c_tmp; proc_control_B.e_d0++) {
          proc_control_B.iQR0_i = proc_control_B.ix_j + proc_control_B.nVar_m;
          for (proc_control_B.iy_m = proc_control_B.ix_j + 1;
               proc_control_B.iy_m <= proc_control_B.iQR0_i; proc_control_B.iy_m
               ++) {
            workspace_data[proc_control_B.iy_m - 1] += qrmanager->Q.data
              [(proc_control_B.ar + proc_control_B.iy_m) - proc_control_B.ix_j] *
              proc_control_B.B_data[proc_control_B.e_d0 - 1];
          }

          proc_control_B.ar += proc_control_B.ldq;
        }

        proc_control_B.iAcol += proc_control_B.ldw;
      }
    }

    proc_control_B.iQR0_i = 0;
    do {
      exitg1 = 0;
      if (proc_control_B.iQR0_i <= static_cast<uint16_T>(proc_control_B.nVar_m)
          - 1) {
        proc_control_B.c_a = workspace_data[proc_control_B.iQR0_i];
        if (std::isinf(proc_control_B.c_a) || std::isnan(proc_control_B.c_a)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_B.c_a = workspace_data[proc_control_B.iQR0_i +
            workspace_size[0]];
          if (std::isinf(proc_control_B.c_a) || std::isnan(proc_control_B.c_a))
          {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_B.iQR0_i++;
          }
        }
      } else {
        for (proc_control_B.iQR0_i = 0; proc_control_B.iQR0_i <
             proc_control_B.nVar_m; proc_control_B.iQR0_i++) {
          workspace_data[proc_control_B.iQR0_i] +=
            xCurrent_data[proc_control_B.iQR0_i];
        }

        proc_control_B.c_a = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_B.constrViolation_basicX = proc_c_maxConstraintViolation_a
          (workingset, workspace_data, workspace_size[0] + 1);
        if ((proc_control_B.c_a <= 2.2204460492503131E-16) ||
            (proc_control_B.c_a < proc_control_B.constrViolation_basicX)) {
          proc_control_B.iQR0_i = static_cast<uint16_T>(proc_control_B.nVar_m);
          std::memcpy(&xCurrent_data[0], &workspace_data[0],
                      static_cast<uint32_T>(proc_control_B.iQR0_i) * sizeof
                      (real_T));
        } else {
          proc_control_B.iQR0_i = static_cast<uint16_T>(proc_control_B.nVar_m);
          for (proc_control_B.nVar_m = 0; proc_control_B.nVar_m <
               proc_control_B.iQR0_i; proc_control_B.nVar_m++) {
            xCurrent_data[proc_control_B.nVar_m] =
              workspace_data[workspace_size[0] + proc_control_B.nVar_m];
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_con_RemoveDependentIneq__m
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *
   qrmanager, s_z8miyzCNLMZx998HtZciUB_proc_T *memspace)
{
  proc_control_B.nActiveConstr_tmp = workingset->nActiveConstr;
  proc_control_B.nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  proc_control_B.nVar_fl = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_B.tol_m = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    for (proc_control_B.nDepIneq = 0; proc_control_B.nDepIneq <
         proc_control_B.nFixedConstr; proc_control_B.nDepIneq++) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq] = 1;
    }

    if (proc_control_B.nFixedConstr + 1 <= proc_control_B.nActiveConstr_tmp) {
      std::memset(&qrmanager->jpvt.data[proc_control_B.nFixedConstr], 0,
                  static_cast<uint32_T>(proc_control_B.nActiveConstr_tmp -
        proc_control_B.nFixedConstr) * sizeof(int32_T));
    }

    for (proc_control_B.nDepIneq = 0; proc_control_B.nDepIneq <
         proc_control_B.nActiveConstr_tmp; proc_control_B.nDepIneq++) {
      proc_control_B.iy0_l = qrmanager->ldq * proc_control_B.nDepIneq;
      proc_control_B.ix0_n = workingset->ldA * proc_control_B.nDepIneq;
      proc_control_B.c_a5 = static_cast<uint16_T>(proc_control_B.nVar_fl);
      for (proc_control_B.nActiveConstr = 0; proc_control_B.nActiveConstr <
           proc_control_B.c_a5; proc_control_B.nActiveConstr++) {
        qrmanager->QR.data[proc_control_B.iy0_l + proc_control_B.nActiveConstr] =
          workingset->ATwset.data[proc_control_B.ix0_n +
          proc_control_B.nActiveConstr];
      }
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_B.nDepIneq = 0;
    proc_control_B.nActiveConstr = workingset->nActiveConstr - 1;
    while (proc_control_B.nActiveConstr + 1 > proc_control_B.nVar_fl) {
      proc_control_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_B.nActiveConstr];
      proc_control_B.nActiveConstr--;
    }

    if (proc_control_B.nActiveConstr + 1 <= workingset->nVar) {
      proc_control_B.nVar_fl = qrmanager->ldq * proc_control_B.nActiveConstr +
        proc_control_B.nActiveConstr;
      while ((proc_control_B.nActiveConstr + 1 > proc_control_B.nFixedConstr) &&
             (std::abs(qrmanager->QR.data[proc_control_B.nVar_fl]) <
              proc_control_B.tol_m)) {
        proc_control_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_B.nActiveConstr];
        proc_control_B.nActiveConstr--;
        proc_control_B.nVar_fl = (proc_control_B.nVar_fl - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, proc_control_B.nDepIneq,
      memspace->workspace_sort.data, proc_control_B.nFixedConstr + 1,
      workingset->nActiveConstr);
    for (proc_control_B.nFixedConstr = proc_control_B.nDepIneq;
         proc_control_B.nFixedConstr >= 1; proc_control_B.nFixedConstr--) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_B.nFixedConstr - 1]);
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_jhnw(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T d;
    int32_T iy;
    b = static_cast<uint16_T>(n);
    for (int32_T b_iy{0}; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    d = (n - 1) * lda + 1;
    for (int32_T b_iy{1}; lda < 0 ? b_iy >= d : b_iy <= d; b_iy += lda) {
      real_T c;
      int32_T e;
      c = 0.0;
      e = (b_iy + m) - 1;
      for (b = b_iy; b <= e; b++) {
        c += A_data[b - 1] * x_data[b - b_iy];
      }

      y_data[iy] += c;
      iy++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc__maxConstraintViolation_ah
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T g_tmp;
  int32_T k;
  if (obj->probType == 2) {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
                    static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhnw(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        proc_control_B.obj_b = obj->maxConstrWorkspace.data[k] - x_data[k + 139];
        obj->maxConstrWorkspace.data[k] = proc_control_B.obj_b;
        v = std::fmax(v, proc_control_B.obj_b);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_jhnw(139, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      g_tmp = obj->sizes[2] + k;
      obj->maxConstrWorkspace.data[k] = (obj->maxConstrWorkspace.data[k] -
        x_data[g_tmp + 139]) + x_data[g_tmp + 269];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[k]));
    }
  } else {
    v = 0.0;
    if (obj->Aineq.size[0] != 0) {
      g_tmp = static_cast<uint16_T>(obj->sizes[2]);
      if (g_tmp - 1 >= 0) {
        std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->bineq.data[0],
                    static_cast<uint32_T>(g_tmp) * sizeof(real_T));
      }

      proc_control_xgemv_jhnw(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (k = 0; k < g_tmp; k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_jhnw(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (k = 0; k < 130; k++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[k]));
    }
  }

  if (obj->sizes[3] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[3]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[k] - 1] - obj->lb.data
                    [obj->indexLB.data[k] - 1]);
    }
  }

  if (obj->sizes[4] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[4]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, x_data[obj->indexUB.data[k] - 1] - obj->ub.data
                    [obj->indexUB.data[k] - 1]);
    }
  }

  if (obj->sizes[0] > 0) {
    g_tmp = static_cast<uint16_T>(obj->sizes[0]);
    for (k = 0; k < g_tmp; k++) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[k] - 1] -
        obj->ub.data[obj->indexFixed.data[k] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_PresolveWorkingSet
  (s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution, s_z8miyzCNLMZx998HtZciUB_proc_T
   *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T *workingset,
   s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager)
{
  boolean_T guard1;
  boolean_T okWorkingSet;
  solution->state = 82;
  proc_control_B.b_i2 = proc_control_RemoveDependentEq_(memspace, workingset,
    qrmanager);
  if ((proc_control_B.b_i2 != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_float.data, memspace->workspace_float.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__m(workingset, qrmanager, memspace);
      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_float.data, memspace->workspace_float.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_B.constrViolation = proc__maxConstraintViolation_ah
          (workingset, solution->xstar.data);
        if (proc_control_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_control_B.idxStartIneq_tmp_b = workingset->nWConstr[0] +
      workingset->nWConstr[1];
    proc_control_B.idxStartIneq_f = proc_control_B.idxStartIneq_tmp_b + 1;
    proc_control_B.idxEndIneq_l = workingset->nActiveConstr;
    for (proc_control_B.b_i2 = proc_control_B.idxStartIneq_f;
         proc_control_B.b_i2 <= proc_control_B.idxEndIneq_l; proc_control_B.b_i2
         ++) {
      workingset->isActiveConstr.data[(workingset->isActiveIdx
        [workingset->Wid.data[proc_control_B.b_i2 - 1] - 1] +
        workingset->Wlocalidx.data[proc_control_B.b_i2 - 1]) - 2] = false;
    }

    workingset->nWConstr[2] = 0;
    workingset->nWConstr[3] = 0;
    workingset->nWConstr[4] = 0;
    workingset->nActiveConstr = proc_control_B.idxStartIneq_tmp_b;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_jhnw4(int32_T m, int32_T n, const real_T
  A[19321], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if ((m != 0) && (n != 0)) {
    int32_T c;
    int32_T ix;
    std::memset(&y_data[0], 0, static_cast<uint16_T>(m) * sizeof(real_T));
    ix = 0;
    c = (n - 1) * lda + 1;
    for (int32_T b_iy{1}; lda < 0 ? b_iy >= c : b_iy <= c; b_iy += lda) {
      int32_T d;
      d = (b_iy + m) - 1;
      for (int32_T b{b_iy}; b <= d; b++) {
        int32_T tmp;
        tmp = b - b_iy;
        y_data[tmp] += A[b - 1] * x_data[ix];
      }

      ix++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_contro_computeGrad_StoreHx
  (s_bsf2Fsale81D2LTDCKuKhG_proc_T *obj, const real_T H[19321], const real_T
   f_data[], const real_T x_data[])
{
  int32_T idx;
  int32_T iy;
  int32_T maxRegVar;
  switch (obj->objtype) {
   case 5:
    if (obj->nvar - 2 >= 0) {
      std::memset(&obj->grad.data[0], 0, static_cast<uint32_T>(obj->nvar - 1) *
                  sizeof(real_T));
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_xgemv_jhnw4(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    if (static_cast<uint16_T>(obj->nvar) - 1 >= 0) {
      std::memcpy(&obj->grad.data[0], &obj->Hx.data[0], static_cast<uint16_T>
                  (obj->nvar) * sizeof(real_T));
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      maxRegVar = obj->nvar - 1;
      for (idx = 0; idx <= maxRegVar; idx++) {
        obj->grad.data[idx] += f_data[idx];
      }
    }
    break;

   default:
    maxRegVar = obj->maxVar - 1;
    proc_control_xgemv_jhnw4(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    iy = obj->nvar + 1;
    for (idx = iy; idx <= maxRegVar; idx++) {
      obj->Hx.data[idx - 1] = x_data[idx - 1] * obj->beta;
    }

    std::memcpy(&obj->grad.data[0], &obj->Hx.data[0], static_cast<uint16_T>
                (obj->maxVar - 1) * sizeof(real_T));
    if (obj->hasLinear && (obj->nvar >= 1)) {
      maxRegVar = obj->nvar - 1;
      for (idx = 0; idx <= maxRegVar; idx++) {
        obj->grad.data[idx] += f_data[idx];
      }
    }

    maxRegVar = (obj->maxVar - obj->nvar) - 1;
    if (maxRegVar >= 1) {
      for (idx = 0; idx < maxRegVar; idx++) {
        iy = obj->nvar + idx;
        obj->grad.data[iy] += obj->rho;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_contro_computeFval_ReuseHx(const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    {
      if (obj->hasLinear) {
        int32_T j;
        j = static_cast<uint16_T>(obj->nvar);
        for (int32_T maxRegVar{0}; maxRegVar < j; maxRegVar++) {
          workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
            f_data[maxRegVar];
        }

        val = 0.0;
        if (obj->nvar >= 1) {
          for (int32_T b_k{0}; b_k < j; b_k++) {
            val += workspace_data[b_k] * x_data[b_k];
          }
        }
      } else {
        val = 0.0;
        if (obj->nvar >= 1) {
          int32_T b_k;
          b_k = static_cast<uint16_T>(obj->nvar);
          for (int32_T maxRegVar{0}; maxRegVar < b_k; maxRegVar++) {
            val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
          }
        }

        val *= 0.5;
      }
    }
    break;

   default:
    {
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      if (obj->hasLinear) {
        int32_T b_k;
        if (static_cast<uint16_T>(obj->nvar) - 1 >= 0) {
          std::memcpy(&workspace_data[0], &f_data[0], static_cast<uint16_T>
                      (obj->nvar) * sizeof(real_T));
        }

        b_k = obj->maxVar - obj->nvar;
        for (maxRegVar = 0; maxRegVar <= b_k - 2; maxRegVar++) {
          workspace_data[obj->nvar + maxRegVar] = obj->rho;
        }

        maxRegVar = static_cast<uint16_T>(obj->maxVar - 1);
        for (b_k = 0; b_k < maxRegVar; b_k++) {
          workspace_data[b_k] += 0.5 * obj->Hx.data[b_k];
        }

        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (b_k = 0; b_k < maxRegVar; b_k++) {
            val += workspace_data[b_k] * x_data[b_k];
          }
        }
      } else {
        int32_T j;
        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          j = static_cast<uint16_T>(obj->maxVar - 1);
          for (int32_T b_k{0}; b_k < j; b_k++) {
            val += x_data[b_k] * obj->Hx.data[b_k];
          }
        }

        val *= 0.5;
        j = obj->nvar + 1;
        for (int32_T b_k{j}; b_k <= maxRegVar; b_k++) {
          val += x_data[b_k - 1] * obj->rho;
        }
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xrotg(real_T *a, real_T *b, real_T *c, real_T *s)
{
  proc_control_B.roe = *b;
  proc_control_B.absa = std::abs(*a);
  proc_control_B.absb = std::abs(*b);
  if (proc_control_B.absa > proc_control_B.absb) {
    proc_control_B.roe = *a;
  }

  proc_control_B.scale_h = proc_control_B.absa + proc_control_B.absb;
  if (proc_control_B.scale_h == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *a = 0.0;
    *b = 0.0;
  } else {
    proc_control_B.ads = proc_control_B.absa / proc_control_B.scale_h;
    proc_control_B.bds = proc_control_B.absb / proc_control_B.scale_h;
    proc_control_B.scale_h *= std::sqrt(proc_control_B.ads * proc_control_B.ads
      + proc_control_B.bds * proc_control_B.bds);
    if (proc_control_B.roe < 0.0) {
      proc_control_B.scale_h = -proc_control_B.scale_h;
    }

    *c = *a / proc_control_B.scale_h;
    *s = *b / proc_control_B.scale_h;
    if (proc_control_B.absa > proc_control_B.absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }

    *a = proc_control_B.scale_h;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_deleteColMoveEnd(s_o1KzuWoPqzc62zOgqamCNH_proc_T
  *obj, int32_T idx)
{
  int32_T QRk0;
  int32_T b_ix;
  int32_T b_temp_tmp;
  int32_T b_temp_tmp_0;
  int32_T e;
  int32_T endIdx;
  int32_T i;
  int32_T idxRotGCol;
  int32_T ix;
  if (obj->usedPivoting) {
    i = 1;
    while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
      i++;
    }

    idx = i;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    e = obj->minRowCol;
    for (endIdx = 0; endIdx < e; endIdx++) {
      obj->QR.data[endIdx + obj->ldq * (idx - 1)] = obj->QR.data[(obj->ncols - 1)
        * obj->ldq + endIdx];
    }

    obj->ncols--;
    if (obj->mrows <= obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      if (obj->mrows - 1 <= obj->ncols) {
        endIdx = obj->mrows - 1;
      } else {
        endIdx = obj->ncols;
      }

      e = endIdx;
      idxRotGCol = (idx - 1) * obj->ldq;
      while (e >= idx) {
        b_temp_tmp = e + idxRotGCol;
        proc_control_B.b_temp = obj->QR.data[b_temp_tmp];
        proc_control_xrotg(&obj->QR.data[b_temp_tmp - 1], &proc_control_B.b_temp,
                           &proc_control_B.c_c, &proc_control_B.b_s_a);
        obj->QR.data[b_temp_tmp] = proc_control_B.b_temp;
        obj->QR.data[e + obj->ldq * (e - 1)] = 0.0;
        QRk0 = obj->ldq * idx + e;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (i = 0; i < b_ix; i++) {
            proc_control_B.b_temp = obj->QR.data[ix] * proc_control_B.c_c +
              obj->QR.data[QRk0] * proc_control_B.b_s_a;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_B.c_c -
              obj->QR.data[ix] * proc_control_B.b_s_a;
            obj->QR.data[ix] = proc_control_B.b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        i = (e - 1) * obj->ldq;
        QRk0 = obj->mrows;
        if (obj->mrows >= 1) {
          ix = obj->ldq + i;
          for (b_ix = 0; b_ix < QRk0; b_ix++) {
            b_temp_tmp = ix + b_ix;
            b_temp_tmp_0 = i + b_ix;
            proc_control_B.b_temp = obj->Q.data[b_temp_tmp_0] *
              proc_control_B.c_c + obj->Q.data[b_temp_tmp] *
              proc_control_B.b_s_a;
            obj->Q.data[b_temp_tmp] = obj->Q.data[b_temp_tmp] *
              proc_control_B.c_c - obj->Q.data[b_temp_tmp_0] *
              proc_control_B.b_s_a;
            obj->Q.data[b_temp_tmp_0] = proc_control_B.b_temp;
          }
        }

        e--;
      }

      for (e = idx + 1; e <= endIdx; e++) {
        ix = (e - 1) * obj->ldq;
        b_temp_tmp = e + ix;
        proc_control_B.b_temp = obj->QR.data[b_temp_tmp];
        proc_control_xrotg(&obj->QR.data[b_temp_tmp - 1], &proc_control_B.b_temp,
                           &proc_control_B.c_c, &proc_control_B.b_s_a);
        obj->QR.data[b_temp_tmp] = proc_control_B.b_temp;
        QRk0 = (obj->ldq + 1) * e;
        i = obj->ncols - e;
        if (i >= 1) {
          b_ix = QRk0 - 1;
          for (idxRotGCol = 0; idxRotGCol < i; idxRotGCol++) {
            proc_control_B.b_temp = obj->QR.data[b_ix] * proc_control_B.c_c +
              obj->QR.data[QRk0] * proc_control_B.b_s_a;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_B.c_c -
              obj->QR.data[b_ix] * proc_control_B.b_s_a;
            obj->QR.data[b_ix] = proc_control_B.b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        idxRotGCol = obj->mrows;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + ix;
          for (i = 0; i < idxRotGCol; i++) {
            b_temp_tmp = b_ix + i;
            b_temp_tmp_0 = ix + i;
            proc_control_B.b_temp = obj->Q.data[b_temp_tmp_0] *
              proc_control_B.c_c + obj->Q.data[b_temp_tmp] *
              proc_control_B.b_s_a;
            obj->Q.data[b_temp_tmp] = obj->Q.data[b_temp_tmp] *
              proc_control_B.c_c - obj->Q.data[b_temp_tmp_0] *
              proc_control_B.b_s_a;
            obj->Q.data[b_temp_tmp_0] = proc_control_B.b_temp;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
boolean_T proc_control::proc_control_strcmp(const char_T a[7])
{
  int32_T ret;
  static const char_T b[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[19321], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T br;
    int32_T lastColC;
    br = ib0;
    lastColC = (n - 1) * ldc;
    for (int32_T cr{0}; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      b = cr + m;
      for (int32_T ic{cr + 1}; ic <= b; ic++) {
        C_data[ic - 1] = 0.0;
      }
    }

    for (int32_T cr{0}; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      int32_T ar;
      int32_T c;
      ar = -1;
      c = br + k;
      for (int32_T ic{br}; ic < c; ic++) {
        int32_T d;
        d = cr + m;
        for (b = cr + 1; b <= d; b++) {
          C_data[b - 1] += A[(ar + b) - cr] * B_data[ic - 1];
        }

        ar += lda;
      }

      br += ldb;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemm_k(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T br;
    int32_T lastColC;
    lastColC = (n - 1) * ldc;
    for (int32_T cr{0}; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      b = cr + m;
      for (int32_T ic{cr + 1}; ic <= b; ic++) {
        C_data[ic - 1] = 0.0;
      }
    }

    br = -1;
    for (int32_T cr{0}; ldc < 0 ? cr >= lastColC : cr <= lastColC; cr += ldc) {
      int32_T ar;
      int32_T c;
      ar = ia0;
      c = cr + m;
      for (int32_T ic{cr + 1}; ic <= c; ic++) {
        real_T temp;
        temp = 0.0;
        for (b = 0; b < k; b++) {
          temp += A_data[(b + ar) - 1] * B_data[(b + br) + 1];
        }

        C_data[ic - 1] += temp;
        ar += lda;
      }

      br += ldb;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_fullColLDL2_(s_962gqykB8vLiRVqsLdGQIG_proc_T
  *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T LDimSizeP1;
  LDimSizeP1 = obj->ldm;
  for (int32_T k{0}; k < NColsRemain; k++) {
    int32_T LD_diagOffset;
    int32_T b_k;
    int32_T subMatrixDim;
    LD_diagOffset = (LDimSizeP1 + 1) * k + LD_offset;
    proc_control_B.alpha1 = -1.0 / obj->FMat.data[LD_diagOffset - 1];
    subMatrixDim = (NColsRemain - k) - 2;
    for (b_k = 0; b_k <= subMatrixDim; b_k++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + b_k];
    }

    proc_control_B.y_lx = obj->workspace_;
    if (!(proc_control_B.alpha1 == 0.0)) {
      int32_T jA;
      jA = LD_diagOffset + LDimSizeP1;
      for (b_k = 0; b_k <= subMatrixDim; b_k++) {
        if (proc_control_B.y_lx != 0.0) {
          int32_T b;
          proc_control_B.temp_m = proc_control_B.y_lx * proc_control_B.alpha1;
          b = (subMatrixDim + jA) + 1;
          for (int32_T ijA{jA + 1}; ijA <= b; ijA++) {
            obj->FMat.data[ijA - 1] += obj->workspace_ * proc_control_B.temp_m;
          }
        }

        jA += obj->ldm;
      }
    }

    proc_control_B.alpha1 = 1.0 / obj->FMat.data[LD_diagOffset - 1];
    b_k = (LD_diagOffset + subMatrixDim) + 1;
    for (subMatrixDim = LD_diagOffset + 1; subMatrixDim <= b_k; subMatrixDim++)
    {
      obj->FMat.data[subMatrixDim - 1] *= proc_control_B.alpha1;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_partialColLDL3_(s_962gqykB8vLiRVqsLdGQIG_proc_T *
  obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T br;
  int32_T c;
  int32_T c_idx;
  int32_T ix;
  int32_T lastColC;
  int32_T numStrictLowerRows;
  proc_control_B.LDimSizeP1_e = obj->ldm + 1;
  for (int32_T k{0}; k < 48; k++) {
    proc_control_B.subRows = (NColsRemain - k) - 1;
    proc_control_B.LD_diagOffset_g = (proc_control_B.LDimSizeP1_e * k +
      LD_offset) - 1;
    for (numStrictLowerRows = 0; numStrictLowerRows <= proc_control_B.subRows;
         numStrictLowerRows++) {
      obj->workspace_ = obj->FMat.data[proc_control_B.LD_diagOffset_g +
        numStrictLowerRows];
    }

    for (c_idx = 0; c_idx < NColsRemain; c_idx++) {
      obj->workspace2_ = obj->workspace_;
    }

    br = obj->ldm;
    proc_control_B.y_pj = obj->workspace2_;
    if ((NColsRemain != 0) && (k != 0)) {
      ix = LD_offset + k;
      c = (k - 1) * obj->ldm + 1;
      for (numStrictLowerRows = 1; br < 0 ? numStrictLowerRows >= c :
           numStrictLowerRows <= c; numStrictLowerRows += br) {
        lastColC = (numStrictLowerRows + NColsRemain) - 1;
        for (proc_control_B.idx_j = numStrictLowerRows; proc_control_B.idx_j <=
             lastColC; proc_control_B.idx_j++) {
          proc_control_B.y_pj += -obj->FMat.data[ix - 1] * obj->workspace_;
        }

        ix += obj->ldm;
      }
    }

    obj->workspace2_ = proc_control_B.y_pj;
    for (c_idx = 0; c_idx < NColsRemain; c_idx++) {
      obj->workspace_ = proc_control_B.y_pj;
    }

    for (c_idx = 0; c_idx <= proc_control_B.subRows; c_idx++) {
      obj->FMat.data[proc_control_B.LD_diagOffset_g + c_idx] = obj->workspace_;
    }

    numStrictLowerRows = proc_control_B.subRows;
    for (proc_control_B.subRows = 0; proc_control_B.subRows < numStrictLowerRows;
         proc_control_B.subRows++) {
      ix = (proc_control_B.subRows + proc_control_B.LD_diagOffset_g) + 1;
      obj->FMat.data[ix] /= obj->FMat.data[proc_control_B.LD_diagOffset_g];
    }
  }

  for (int32_T k{48}; k <= NColsRemain - 1; k += 48) {
    int32_T numStrictLowerRows_tmp;
    int32_T u1_tmp;
    u1_tmp = NColsRemain - k;
    if (u1_tmp >= 48) {
      proc_control_B.LD_diagOffset_g = 48;
    } else {
      proc_control_B.LD_diagOffset_g = u1_tmp;
    }

    numStrictLowerRows_tmp = k + proc_control_B.LD_diagOffset_g;
    numStrictLowerRows = numStrictLowerRows_tmp - 1;
    for (proc_control_B.subRows = k; proc_control_B.subRows <=
         numStrictLowerRows; proc_control_B.subRows++) {
      proc_control_B.idx_j = numStrictLowerRows_tmp - proc_control_B.subRows;
      for (br = 0; br < 48; br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset + proc_control_B.subRows)
          + br * obj->ldm) - 1];
      }

      ix = obj->ldm;
      if (proc_control_B.idx_j != 0) {
        c = (obj->ldm * 47 + proc_control_B.subRows) + 1;
        for (c_idx = proc_control_B.subRows + 1; ix < 0 ? c_idx >= c : c_idx <=
             c; c_idx += ix) {
          lastColC = (c_idx + proc_control_B.idx_j) - 1;
          for (br = c_idx; br <= lastColC; br++) {
            // Check node always fails. would cause program termination and was eliminated 
          }
        }
      }
    }

    if (numStrictLowerRows_tmp < NColsRemain) {
      proc_control_B.subRows = u1_tmp - proc_control_B.LD_diagOffset_g;
      numStrictLowerRows = ((LD_offset + proc_control_B.LD_diagOffset_g) +
                            proc_control_B.LDimSizeP1_e * k) - 1;
      for (proc_control_B.idx_j = 0; proc_control_B.idx_j < 48;
           proc_control_B.idx_j++) {
        ix = (LD_offset + k) + proc_control_B.idx_j * obj->ldm;
        for (br = 0; br < proc_control_B.LD_diagOffset_g; br++) {
          obj->workspace2_ = obj->FMat.data[(ix + br) - 1];
        }
      }

      c_idx = obj->ldm;
      if ((proc_control_B.subRows != 0) && (proc_control_B.LD_diagOffset_g != 0))
      {
        lastColC = (proc_control_B.LD_diagOffset_g - 1) * obj->ldm +
          numStrictLowerRows;
        br = 0;
        for (proc_control_B.LD_diagOffset_g = numStrictLowerRows; c_idx < 0 ?
             proc_control_B.LD_diagOffset_g >= lastColC :
             proc_control_B.LD_diagOffset_g <= lastColC;
             proc_control_B.LD_diagOffset_g += c_idx) {
          br++;
          proc_control_B.idx_j = c_idx * 47 + br;
          for (ix = br; c_idx < 0 ? ix >= proc_control_B.idx_j : ix <=
               proc_control_B.idx_j; ix += c_idx) {
            u1_tmp = proc_control_B.LD_diagOffset_g + proc_control_B.subRows;
            for (c = proc_control_B.LD_diagOffset_g + 1; c <= u1_tmp; c++) {
              obj->FMat.data[c - 1] += -obj->workspace2_ * obj->workspace_;
            }
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
int32_T proc_control::proc_control_xpotrf_g(int32_T n, real_T A_data[], int32_T
  lda)
{
  int32_T b_j;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j <= n - 1)) {
    int32_T idxA1j;
    int32_T idxAjj;
    int32_T nmj;
    idxA1j = b_j * lda;
    idxAjj = idxA1j + b_j;
    proc_control_B.ssq_i = 0.0;
    if (b_j >= 1) {
      for (nmj = 0; nmj < b_j; nmj++) {
        proc_control_B.c_h4 = A_data[idxA1j + nmj];
        proc_control_B.ssq_i += proc_control_B.c_h4 * proc_control_B.c_h4;
      }
    }

    proc_control_B.ssq_i = A_data[idxAjj] - proc_control_B.ssq_i;
    if (proc_control_B.ssq_i > 0.0) {
      proc_control_B.ssq_i = std::sqrt(proc_control_B.ssq_i);
      A_data[idxAjj] = proc_control_B.ssq_i;
      if (b_j + 1 < n) {
        nmj = (n - b_j) - 2;
        proc_control_B.jm1 = (idxA1j + lda) + 1;
        idxAjj += lda;
        if ((b_j != 0) && (nmj + 1 != 0)) {
          int32_T b;
          int32_T iy;
          iy = idxAjj;
          b = lda * nmj + proc_control_B.jm1;
          for (int32_T b_ix{proc_control_B.jm1}; lda < 0 ? b_ix >= b : b_ix <= b;
               b_ix += lda) {
            int32_T d;
            proc_control_B.c_h4 = 0.0;
            d = (b_ix + b_j) - 1;
            for (int32_T b_iy{b_ix}; b_iy <= d; b_iy++) {
              proc_control_B.c_h4 += A_data[(idxA1j + b_iy) - b_ix] *
                A_data[b_iy - 1];
            }

            A_data[iy] -= proc_control_B.c_h4;
            iy += lda;
          }
        }

        proc_control_B.ssq_i = 1.0 / proc_control_B.ssq_i;
        idxA1j = (lda * nmj + idxAjj) + 1;
        for (nmj = idxAjj + 1; lda < 0 ? nmj >= idxA1j : nmj <= idxA1j; nmj +=
             lda) {
          A_data[nmj - 1] *= proc_control_B.ssq_i;
        }
      }

      b_j++;
    } else {
      A_data[idxAjj] = proc_control_B.ssq_i;
      info = b_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_jhnw4q(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T ix;
    std::memset(&y_data[0], 0, static_cast<uint32_T>(m) * sizeof(real_T));
    ix = 0;
    b = (n - 1) * lda + ia0;
    for (int32_T b_iy{ia0}; lda < 0 ? b_iy >= b : b_iy <= b; b_iy += lda) {
      int32_T c;
      c = (b_iy + m) - 1;
      for (int32_T iyend{b_iy}; iyend <= c; iyend++) {
        int32_T tmp;
        tmp = iyend - b_iy;
        y_data[tmp] += A_data[iyend - 1] * x_data[ix];
      }

      ix++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factor(s_962gqykB8vLiRVqsLdGQIG_proc_T *obj,
  const real_T A[19321], int32_T ndims, int32_T ldA)
{
  obj->ndims = ndims;
  for (proc_control_B.idx_f = 0; proc_control_B.idx_f < ndims;
       proc_control_B.idx_f++) {
    proc_control_B.ix0_p = ldA * proc_control_B.idx_f;
    proc_control_B.iy0_i = obj->ldm * proc_control_B.idx_f;
    for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < ndims;
         proc_control_B.b_k_k++) {
      obj->FMat.data[proc_control_B.iy0_i + proc_control_B.b_k_k] =
        A[proc_control_B.b_k_k + proc_control_B.ix0_p];
    }
  }

  obj->info = proc_control_xpotrf_g(ndims, obj->FMat.data, obj->ldm);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_solve(const s_962gqykB8vLiRVqsLdGQIG_proc_T *obj,
  real_T rhs_data[])
{
  int32_T n_tmp;
  n_tmp = obj->ndims;
  if (obj->ndims != 0) {
    int32_T jA;
    for (int32_T j{0}; j < n_tmp; j++) {
      real_T temp;
      jA = j * obj->ldm;
      temp = rhs_data[j];
      for (int32_T i{0}; i < j; i++) {
        temp -= obj->FMat.data[jA + i] * rhs_data[i];
      }

      rhs_data[j] = temp / obj->FMat.data[jA + j];
    }

    for (int32_T j{n_tmp}; j >= 1; j--) {
      jA = ((j - 1) * obj->ldm + j) - 2;
      rhs_data[j - 1] /= obj->FMat.data[jA + 1];
      for (int32_T i{0}; i <= j - 2; i++) {
        int32_T ix;
        ix = (j - i) - 2;
        rhs_data[ix] -= obj->FMat.data[jA - i] * rhs_data[j - 1];
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_factor_h(s_962gqykB8vLiRVqsLdGQIG_proc_T *obj,
  const real_T A[19321], int32_T ndims, int32_T ldA)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_B.LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  for (proc_control_B.A_maxDiag_idx = 0; proc_control_B.A_maxDiag_idx < ndims;
       proc_control_B.A_maxDiag_idx++) {
    proc_control_B.ix_if = ldA * proc_control_B.A_maxDiag_idx;
    proc_control_B.iy0_n = obj->ldm * proc_control_B.A_maxDiag_idx;
    for (proc_control_B.LD_diagOffset = 0; proc_control_B.LD_diagOffset < ndims;
         proc_control_B.LD_diagOffset++) {
      obj->FMat.data[proc_control_B.iy0_n + proc_control_B.LD_diagOffset] =
        A[proc_control_B.LD_diagOffset + proc_control_B.ix_if];
    }
  }

  if (ndims < 1) {
    proc_control_B.A_maxDiag_idx = -1;
  } else {
    proc_control_B.A_maxDiag_idx = 0;
    if (ndims > 1) {
      proc_control_B.smax_o = std::abs(obj->FMat.data[0]);
      for (proc_control_B.LD_diagOffset = 2; proc_control_B.LD_diagOffset <=
           ndims; proc_control_B.LD_diagOffset++) {
        proc_control_B.s_l = std::abs(obj->FMat.data
          [(proc_control_B.LD_diagOffset - 1) * proc_control_B.LDimSizeP1]);
        if (proc_control_B.s_l > proc_control_B.smax_o) {
          proc_control_B.A_maxDiag_idx = proc_control_B.LD_diagOffset - 1;
          proc_control_B.smax_o = proc_control_B.s_l;
        }
      }
    }
  }

  obj->regTol_ = std::fmax(std::abs(obj->FMat.data[obj->ldm *
    proc_control_B.A_maxDiag_idx + proc_control_B.A_maxDiag_idx]) *
    2.2204460492503131E-16, 0.0);
  if (ndims > 128) {
    proc_control_B.A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.A_maxDiag_idx < ndims)) {
      proc_control_B.LD_diagOffset = proc_control_B.LDimSizeP1 *
        proc_control_B.A_maxDiag_idx + 1;
      proc_control_B.ix_if = ndims - proc_control_B.A_maxDiag_idx;
      if (proc_control_B.A_maxDiag_idx + 48 <= ndims) {
        proc_control_partialColLDL3_(obj, proc_control_B.LD_diagOffset,
          proc_control_B.ix_if);
        proc_control_B.A_maxDiag_idx += 48;
      } else {
        proc_control_fullColLDL2_(obj, proc_control_B.LD_diagOffset,
          proc_control_B.ix_if);
        exitg1 = true;
      }
    }
  } else {
    proc_control_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_B.LDimSizeP1 = 0;
    do {
      exitg2 = 0;
      if (proc_control_B.LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_B.LDimSizeP1 +
            proc_control_B.LDimSizeP1] <= 0.0) {
          obj->info = -proc_control_B.LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          proc_control_B.LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_solve_f(const s_962gqykB8vLiRVqsLdGQIG_proc_T
  *obj, real_T rhs_data[])
{
  int32_T jjA;
  int32_T n;
  n = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (int32_T b_j{0}; b_j <= n; b_j++) {
      int32_T c;
      jjA = b_j * obj->ldm + b_j;
      c = n - b_j;
      for (int32_T b_i{0}; b_i < c; b_i++) {
        int32_T ix;
        ix = (b_i + b_j) + 1;
        rhs_data[ix] -= obj->FMat.data[(b_i + jjA) + 1] * rhs_data[b_j];
      }
    }
  }

  n = obj->ndims;
  for (int32_T b_j{0}; b_j < n; b_j++) {
    rhs_data[b_j] /= obj->FMat.data[obj->ldm * b_j + b_j];
  }

  if (obj->ndims != 0) {
    for (int32_T b_j{n}; b_j >= 1; b_j--) {
      real_T temp;
      jjA = (b_j - 1) * obj->ldm;
      temp = rhs_data[b_j - 1];
      for (int32_T b_i{n}; b_i >= b_j + 1; b_i--) {
        temp -= obj->FMat.data[(jjA + b_i) - 1] * rhs_data[b_i - 1];
      }

      rhs_data[b_j - 1] = temp;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_compute_deltax(const real_T H[19321],
  s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution, s_z8miyzCNLMZx998HtZciUB_proc_T
  *memspace, const s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *objective, boolean_T alwaysPositiveDef)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_B.nVar_mb = qrmanager->mrows - 1;
  proc_control_B.mNull_tmp = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_B.mNull_tmp <= 0) {
    if (proc_control_B.nVar_mb >= 0) {
      std::memset(&solution->searchDir.data[0], 0, static_cast<uint32_T>
                  (proc_control_B.nVar_mb + 1) * sizeof(real_T));
    }
  } else {
    for (proc_control_B.nullStartIdx = 0; proc_control_B.nullStartIdx <=
         proc_control_B.nVar_mb; proc_control_B.nullStartIdx++) {
      solution->searchDir.data[proc_control_B.nullStartIdx] =
        -objective->grad.data[proc_control_B.nullStartIdx];
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
        } else {
          proc_control_factor_h(cholmanager, H, qrmanager->mrows,
                                qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_solve_f(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, objective->nvar, objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_solve(cholmanager, solution->searchDir.data);
            proc_control_B.smax_m = 1.0 / objective->beta;
            proc_control_B.nullStartIdx = objective->nvar + 1;
            proc_control_B.b_mNull = qrmanager->mrows;
            for (proc_control_B.c_mNull = proc_control_B.nullStartIdx;
                 proc_control_B.c_mNull <= proc_control_B.b_mNull;
                 proc_control_B.c_mNull++) {
              solution->searchDir.data[proc_control_B.c_mNull - 1] *=
                proc_control_B.smax_m;
            }
          }
        }
        break;
      }
    } else {
      proc_control_B.nullStartIdx_tmp = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        for (proc_control_B.nullStart = 0; proc_control_B.nullStart <
             proc_control_B.mNull_tmp; proc_control_B.nullStart++) {
          memspace->workspace_float.data[proc_control_B.nullStart] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_B.nullStart) *
            qrmanager->ldq + proc_control_B.nVar_mb];
        }

        proc_control_xgemv_jhnw4q(qrmanager->mrows, proc_control_B.mNull_tmp,
          qrmanager->Q.data, proc_control_B.nullStartIdx_tmp, qrmanager->ldq,
          memspace->workspace_float.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_xgemm(qrmanager->mrows, proc_control_B.mNull_tmp,
                             qrmanager->mrows, H, qrmanager->mrows,
                             qrmanager->Q.data, proc_control_B.nullStartIdx_tmp,
                             qrmanager->ldq, memspace->workspace_float.data,
                             memspace->workspace_float.size[0]);
          proc_control_xgemm_k(proc_control_B.mNull_tmp,
                               proc_control_B.mNull_tmp, qrmanager->mrows,
                               qrmanager->Q.data,
                               proc_control_B.nullStartIdx_tmp, qrmanager->ldq,
                               memspace->workspace_float.data,
                               memspace->workspace_float.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_B.nullStartIdx = qrmanager->mrows;
          proc_control_xgemm(objective->nvar, proc_control_B.mNull_tmp,
                             objective->nvar, H, objective->nvar,
                             qrmanager->Q.data, proc_control_B.nullStartIdx_tmp,
                             qrmanager->ldq, memspace->workspace_float.data,
                             memspace->workspace_float.size[0]);
          for (proc_control_B.b_mNull = 0; proc_control_B.b_mNull <
               proc_control_B.mNull_tmp; proc_control_B.b_mNull++) {
            proc_control_B.b_jjA = objective->nvar + 1;
            for (proc_control_B.nullStart = proc_control_B.b_jjA;
                 proc_control_B.nullStart <= proc_control_B.nullStartIdx;
                 proc_control_B.nullStart++) {
              memspace->workspace_float.data[(proc_control_B.nullStart +
                memspace->workspace_float.size[0] * proc_control_B.b_mNull) - 1]
                = qrmanager->Q.data[((proc_control_B.b_mNull + qrmanager->ncols)
                * qrmanager->Q.size[0] + proc_control_B.nullStart) - 1] *
                objective->beta;
            }
          }

          proc_control_xgemm_k(proc_control_B.mNull_tmp,
                               proc_control_B.mNull_tmp, qrmanager->mrows,
                               qrmanager->Q.data,
                               proc_control_B.nullStartIdx_tmp, qrmanager->ldq,
                               memspace->workspace_float.data,
                               memspace->workspace_float.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_B.mNull_tmp;
          cholmanager->info = proc_control_xpotrf_g(proc_control_B.mNull_tmp,
            cholmanager->FMat.data, cholmanager->ldm);
        } else {
          proc_control_B.nullStart = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_B.mNull_tmp;
          proc_control_B.nullStartIdx = 0;
          if (proc_control_B.mNull_tmp > 1) {
            proc_control_B.smax_m = std::abs(cholmanager->FMat.data[0]);
            for (proc_control_B.b_mNull = 2; proc_control_B.b_mNull <=
                 proc_control_B.mNull_tmp; proc_control_B.b_mNull++) {
              proc_control_B.s_ax = std::abs(cholmanager->FMat.data
                [(proc_control_B.b_mNull - 1) * proc_control_B.nullStart]);
              if (proc_control_B.s_ax > proc_control_B.smax_m) {
                proc_control_B.nullStartIdx = proc_control_B.b_mNull - 1;
                proc_control_B.smax_m = proc_control_B.s_ax;
              }
            }
          }

          cholmanager->regTol_ = std::fmax(std::abs(cholmanager->
            FMat.data[cholmanager->ldm * proc_control_B.nullStartIdx +
            proc_control_B.nullStartIdx]) * 2.2204460492503131E-16, 0.0);
          if (proc_control_B.mNull_tmp > 128) {
            proc_control_B.b_mNull = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_B.b_mNull <
                                 proc_control_B.mNull_tmp)) {
              proc_control_B.nullStartIdx = proc_control_B.nullStart *
                proc_control_B.b_mNull + 1;
              proc_control_B.c_mNull = proc_control_B.mNull_tmp -
                proc_control_B.b_mNull;
              if (proc_control_B.b_mNull + 48 <= proc_control_B.mNull_tmp) {
                proc_control_partialColLDL3_(cholmanager,
                  proc_control_B.nullStartIdx, proc_control_B.c_mNull);
                proc_control_B.b_mNull += 48;
              } else {
                proc_control_fullColLDL2_(cholmanager,
                  proc_control_B.nullStartIdx, proc_control_B.c_mNull);
                exitg1 = true;
              }
            }
          } else {
            proc_control_fullColLDL2_(cholmanager, 1, proc_control_B.mNull_tmp);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_B.b_mNull = 0;
            do {
              exitg2 = 0;
              if (proc_control_B.b_mNull <= proc_control_B.mNull_tmp - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_B.b_mNull + proc_control_B.b_mNull] <= 0.0) {
                  cholmanager->info = -proc_control_B.b_mNull - 1;
                  exitg2 = 1;
                } else {
                  proc_control_B.b_mNull++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_B.c_mNull = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            std::memset(&memspace->workspace_float.data[0], 0,
                        static_cast<uint32_T>(proc_control_B.mNull_tmp) * sizeof
                        (real_T));
            proc_control_B.b_mNull = 0;
            proc_control_B.b_jjA = (proc_control_B.mNull_tmp - 1) *
              qrmanager->ldq + proc_control_B.nullStartIdx_tmp;
            for (proc_control_B.nullStart = proc_control_B.nullStartIdx_tmp;
                 proc_control_B.c_mNull < 0 ? proc_control_B.nullStart >=
                 proc_control_B.b_jjA : proc_control_B.nullStart <=
                 proc_control_B.b_jjA; proc_control_B.nullStart +=
                 proc_control_B.c_mNull) {
              proc_control_B.smax_m = 0.0;
              proc_control_B.d_ix = proc_control_B.nullStart +
                proc_control_B.nVar_mb;
              for (proc_control_B.nullStartIdx = proc_control_B.nullStart;
                   proc_control_B.nullStartIdx <= proc_control_B.d_ix;
                   proc_control_B.nullStartIdx++) {
                proc_control_B.smax_m += qrmanager->
                  Q.data[proc_control_B.nullStartIdx - 1] * objective->
                  grad.data[proc_control_B.nullStartIdx -
                  proc_control_B.nullStart];
              }

              memspace->workspace_float.data[proc_control_B.b_mNull] -=
                proc_control_B.smax_m;
              proc_control_B.b_mNull++;
            }
          }

          if (alwaysPositiveDef) {
            proc_control_B.c_mNull = cholmanager->ndims;
            if (cholmanager->ndims != 0) {
              for (proc_control_B.nullStart = 0; proc_control_B.nullStart <
                   proc_control_B.c_mNull; proc_control_B.nullStart++) {
                proc_control_B.b_mNull = proc_control_B.nullStart *
                  cholmanager->ldm;
                proc_control_B.smax_m = memspace->
                  workspace_float.data[proc_control_B.nullStart];
                for (proc_control_B.nullStartIdx = 0;
                     proc_control_B.nullStartIdx < proc_control_B.nullStart;
                     proc_control_B.nullStartIdx++) {
                  proc_control_B.smax_m -= cholmanager->
                    FMat.data[proc_control_B.b_mNull +
                    proc_control_B.nullStartIdx] *
                    memspace->workspace_float.data[proc_control_B.nullStartIdx];
                }

                memspace->workspace_float.data[proc_control_B.nullStart] =
                  proc_control_B.smax_m / cholmanager->
                  FMat.data[proc_control_B.b_mNull + proc_control_B.nullStart];
              }
            }

            proc_control_B.b_mNull = cholmanager->ndims;
            if (cholmanager->ndims != 0) {
              for (proc_control_B.nullStartIdx = proc_control_B.b_mNull;
                   proc_control_B.nullStartIdx >= 1; proc_control_B.nullStartIdx
                   --) {
                proc_control_B.b_jjA = ((proc_control_B.nullStartIdx - 1) *
                  cholmanager->ldm + proc_control_B.nullStartIdx) - 2;
                memspace->workspace_float.data[proc_control_B.nullStartIdx - 1] /=
                  cholmanager->FMat.data[proc_control_B.b_jjA + 1];
                for (proc_control_B.c_mNull = 0; proc_control_B.c_mNull <=
                     proc_control_B.nullStartIdx - 2; proc_control_B.c_mNull++)
                {
                  proc_control_B.d_ix = (proc_control_B.nullStartIdx -
                    proc_control_B.c_mNull) - 2;
                  memspace->workspace_float.data[proc_control_B.d_ix] -=
                    memspace->workspace_float.data[proc_control_B.nullStartIdx -
                    1] * cholmanager->FMat.data[proc_control_B.b_jjA -
                    proc_control_B.c_mNull];
                }
              }
            }
          } else {
            proc_control_B.b_mNull = cholmanager->ndims - 1;
            if (cholmanager->ndims != 0) {
              for (proc_control_B.nullStartIdx = 0; proc_control_B.nullStartIdx <=
                   proc_control_B.b_mNull; proc_control_B.nullStartIdx++) {
                proc_control_B.nullStart = proc_control_B.nullStartIdx *
                  cholmanager->ldm + proc_control_B.nullStartIdx;
                proc_control_B.d_ix = proc_control_B.b_mNull -
                  proc_control_B.nullStartIdx;
                for (proc_control_B.c_mNull = 0; proc_control_B.c_mNull <
                     proc_control_B.d_ix; proc_control_B.c_mNull++) {
                  proc_control_B.nVar_mb = (proc_control_B.c_mNull +
                    proc_control_B.nullStartIdx) + 1;
                  memspace->workspace_float.data[proc_control_B.nVar_mb] -=
                    cholmanager->FMat.data[(proc_control_B.c_mNull +
                    proc_control_B.nullStart) + 1] *
                    memspace->workspace_float.data[proc_control_B.nullStartIdx];
                }
              }
            }

            proc_control_B.nullStartIdx = cholmanager->ndims;
            for (proc_control_B.nullStart = 0; proc_control_B.nullStart <
                 proc_control_B.nullStartIdx; proc_control_B.nullStart++) {
              memspace->workspace_float.data[proc_control_B.nullStart] /=
                cholmanager->FMat.data[cholmanager->ldm *
                proc_control_B.nullStart + proc_control_B.nullStart];
            }

            proc_control_B.c_mNull = cholmanager->ndims;
            if (cholmanager->ndims != 0) {
              for (proc_control_B.nullStart = proc_control_B.c_mNull;
                   proc_control_B.nullStart >= 1; proc_control_B.nullStart--) {
                proc_control_B.b_mNull = (proc_control_B.nullStart - 1) *
                  cholmanager->ldm;
                proc_control_B.smax_m = memspace->
                  workspace_float.data[proc_control_B.nullStart - 1];
                for (proc_control_B.nullStartIdx = proc_control_B.c_mNull;
                     proc_control_B.nullStartIdx >= proc_control_B.nullStart + 1;
                     proc_control_B.nullStartIdx--) {
                  proc_control_B.smax_m -= cholmanager->FMat.data
                    [(proc_control_B.b_mNull + proc_control_B.nullStartIdx) - 1]
                    * memspace->workspace_float.data[proc_control_B.nullStartIdx
                    - 1];
                }

                memspace->workspace_float.data[proc_control_B.nullStart - 1] =
                  proc_control_B.smax_m;
              }
            }
          }

          proc_control_xgemv_jhnw4q(qrmanager->mrows, proc_control_B.mNull_tmp,
            qrmanager->Q.data, proc_control_B.nullStartIdx_tmp, qrmanager->ldq,
            memspace->workspace_float.data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_control_xnrm2_ap(int32_T n, const real_T x_data[])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[0]);
    } else {
      int32_T b;
      proc_control_B.scale_k = 3.3121686421112381E-170;
      b = static_cast<uint16_T>(n);
      for (int32_T k{0}; k < b; k++) {
        proc_control_B.absxk_n5 = std::abs(x_data[k]);
        if (proc_control_B.absxk_n5 > proc_control_B.scale_k) {
          proc_control_B.t_j3 = proc_control_B.scale_k / proc_control_B.absxk_n5;
          y = y * proc_control_B.t_j3 * proc_control_B.t_j3 + 1.0;
          proc_control_B.scale_k = proc_control_B.absxk_n5;
        } else {
          proc_control_B.t_j3 = proc_control_B.absxk_n5 / proc_control_B.scale_k;
          y += proc_control_B.t_j3 * proc_control_B.t_j3;
        }
      }

      y = proc_control_B.scale_k * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_xgemv_jhnw4qt(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T d;
    b = static_cast<uint16_T>(n);
    for (int32_T b_iy{0}; b_iy < b; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    b = 0;
    d = (n - 1) * lda + 1;
    for (int32_T b_iy{1}; lda < 0 ? b_iy >= d : b_iy <= d; b_iy += lda) {
      int32_T e;
      proc_control_B.c_gk = 0.0;
      e = (b_iy + m) - 1;
      for (int32_T ia{b_iy}; ia <= e; ia++) {
        proc_control_B.c_gk += A_data[ia - 1] * x_data[ia - b_iy];
      }

      y_data[b] += proc_control_B.c_gk;
      b++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  int32_T d_tmp;
  int32_T e;
  int32_T f;
  int32_T ldw_tmp;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_B.denomTol = 2.2204460492503131E-13 * proc_control_xnrm2_ap
    (workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    d_tmp = static_cast<uint16_T>(workingset_sizes[2]);
    if (d_tmp - 1 >= 0) {
      std::memcpy(&workspace_data[0], &workingset_bineq_data[0], static_cast<
                  uint32_T>(d_tmp) * sizeof(real_T));
    }

    proc_control_xgemv_jhnw4qt(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    ldw_tmp = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      proc_control_B.iyend_g = workspace_size[0] + workingset_sizes[2];
      if (ldw_tmp + 1 <= proc_control_B.iyend_g) {
        std::memset(&workspace_data[ldw_tmp], 0, static_cast<uint32_T>
                    (proc_control_B.iyend_g - ldw_tmp) * sizeof(real_T));
      }

      proc_control_B.iyend_g = workspace_size[0];
      e = (workingset_sizes[2] - 1) * workingset_ldA + 1;
      for (proc_control_B.d_l = 1; workingset_ldA < 0 ? proc_control_B.d_l >= e :
           proc_control_B.d_l <= e; proc_control_B.d_l += workingset_ldA) {
        proc_control_B.b_c_k = 0.0;
        f = (proc_control_B.d_l + workingset_nVar) - 1;
        for (proc_control_B.ldw_b = proc_control_B.d_l; proc_control_B.ldw_b <=
             f; proc_control_B.ldw_b++) {
          proc_control_B.b_c_k += workingset_Aineq_data[proc_control_B.ldw_b - 1]
            * solution_searchDir_data[proc_control_B.ldw_b - proc_control_B.d_l];
        }

        workspace_data[proc_control_B.iyend_g] += proc_control_B.b_c_k;
        proc_control_B.iyend_g++;
      }
    }

    for (proc_control_B.d_l = 0; proc_control_B.d_l < d_tmp; proc_control_B.d_l
         ++) {
      proc_control_B.b_c_k = workspace_data[ldw_tmp + proc_control_B.d_l];
      if ((proc_control_B.b_c_k > proc_control_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[2] +
            proc_control_B.d_l) - 1])) {
        proc_control_B.alphaTemp = std::fmin(std::abs
          (workspace_data[proc_control_B.d_l]), 0.02 -
          workspace_data[proc_control_B.d_l]) / proc_control_B.b_c_k;
        if (proc_control_B.alphaTemp < *alpha) {
          *alpha = proc_control_B.alphaTemp;
          *constrType = 3;
          *constrIdx = proc_control_B.d_l + 1;
          *newBlocking = true;
        }
      }
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_B.b_c_k = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    proc_control_B.phaseOneCorrectionP = solution_searchDir_data[workingset_nVar
      - 1] * static_cast<real_T>(isPhaseOne);
    proc_control_B.d_l = workingset_sizes[3];
    for (proc_control_B.ldw_b = 0; proc_control_B.ldw_b <= proc_control_B.d_l -
         2; proc_control_B.ldw_b++) {
      d_tmp = workingset_indexLB_data[proc_control_B.ldw_b];
      proc_control_B.alphaTemp = -solution_searchDir_data[d_tmp - 1] -
        proc_control_B.phaseOneCorrectionP;
      if ((proc_control_B.alphaTemp > proc_control_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_B.ldw_b) - 1])) {
        proc_control_B.ratio = (-solution_xstar_data[d_tmp - 1] -
          workingset_lb_data[d_tmp - 1]) - proc_control_B.b_c_k;
        proc_control_B.alphaTemp = std::fmin(std::abs(proc_control_B.ratio),
          0.02 - proc_control_B.ratio) / proc_control_B.alphaTemp;
        if (proc_control_B.alphaTemp < *alpha) {
          *alpha = proc_control_B.alphaTemp;
          *constrType = 4;
          *constrIdx = proc_control_B.ldw_b + 1;
          *newBlocking = true;
        }
      }
    }

    proc_control_B.d_l = workingset_indexLB_data[workingset_sizes[3] - 1] - 1;
    proc_control_B.b_c_k = -solution_searchDir_data[proc_control_B.d_l];
    if ((proc_control_B.b_c_k > proc_control_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_B.ratio = -solution_xstar_data[proc_control_B.d_l] -
        workingset_lb_data[proc_control_B.d_l];
      proc_control_B.alphaTemp = std::fmin(std::abs(proc_control_B.ratio), 0.02
        - proc_control_B.ratio) / proc_control_B.b_c_k;
      if (proc_control_B.alphaTemp < *alpha) {
        *alpha = proc_control_B.alphaTemp;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    *alpha = std::fmin(*alpha, 1.0);
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_c_checkUnboundedOrIllPosed
  (s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution, const
   s_bsf2Fsale81D2LTDCKuKhG_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_xnrm2_ap(objective->nvar, solution->searchDir.data) > 100.0
        * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_addBoundToActiveSetMatrix_
  (s_PAtG1CW05sRYOWrqzwRQyC_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  if (static_cast<uint16_T>(idx_bnd_local - 1) - 1 >= 0) {
    std::memset(&obj->ATwset.data[colOffset + 1], 0, static_cast<uint32_T>((
      static_cast<uint16_T>(idx_bnd_local - 1) + colOffset) - colOffset) *
                sizeof(real_T));
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  if (idx_bnd_local + 1 <= obj->nVar) {
    std::memset(&obj->ATwset.data[(idx_bnd_local + colOffset) + 1], 0,
                static_cast<uint32_T>(((obj->nVar + colOffset) - idx_bnd_local)
      - colOffset) * sizeof(real_T));
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_addAineqConstr(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T idx_local)
{
  int32_T b;
  int32_T iAineq0;
  int32_T iAw0;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  b = obj->nVar - 1;
  for (int32_T idx{0}; idx <= b; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID,
  const real_T f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *objective, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  *updateFval)
{
  boolean_T nonDegenerateWset;
  solution->iterations++;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    solution->maxConstr = proc__maxConstraintViolation_ah(workingset,
      solution->xstar.data);
    proc_control_B.tempMaxConstr = solution->maxConstr;
    if (objective->objtype == 5) {
      proc_control_B.tempMaxConstr = solution->maxConstr - solution->
        xstar.data[objective->nvar - 1];
    }

    if (proc_control_B.tempMaxConstr > 0.02) {
      proc_control_B.loop_ub_dl = solution->searchDir.size[0];
      proc_control_B.loop_ub_g = solution->searchDir.size[0];
      if (proc_control_B.loop_ub_g - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_e[0], &solution->searchDir.data[0],
                    static_cast<uint32_T>(proc_control_B.loop_ub_g) * sizeof
                    (real_T));
      }

      proc_control_B.loop_ub_g = static_cast<uint16_T>(objective->nvar);
      if (proc_control_B.loop_ub_g - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_e[0], &solution->xstar.data[0],
                    static_cast<uint32_T>(proc_control_B.loop_ub_g) * sizeof
                    (real_T));
      }

      if (proc_control_B.loop_ub_dl - 1 >= 0) {
        std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_e[0],
                    static_cast<uint32_T>(proc_control_B.loop_ub_dl) * sizeof
                    (real_T));
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_float.data, memspace->workspace_float.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_B.tempMaxConstr = proc__maxConstraintViolation_ah(workingset,
        solution->searchDir.data);
      if (proc_control_B.tempMaxConstr < solution->maxConstr) {
        if (proc_control_B.loop_ub_g - 1 >= 0) {
          std::memcpy(&solution->xstar.data[0], &solution->searchDir.data[0],
                      static_cast<uint32_T>(proc_control_B.loop_ub_g) * sizeof
                      (real_T));
        }

        solution->maxConstr = proc_control_B.tempMaxConstr;
      }
    }
  }

  if (*updateFval) {
    if (options_ObjectiveLimit > (rtMinusInf)) {
      solution->fstar = proc_contro_computeFval_ReuseHx(objective,
        memspace->workspace_float.data, f_data, solution->xstar.data);
      if ((solution->fstar < options_ObjectiveLimit) && ((solution->state != 0) ||
           (objective->objtype != 5))) {
        solution->state = 2;
      }
    } else {
      *updateFval = false;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_iterate(const real_T H[19321], const real_T
  f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  int32_T exitg1;
  boolean_T guard1;
  boolean_T guard11;
  boolean_T guard2;
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_B.activeSetChangeID = 0;
  proc_control_B.nVar_n = workingset->nVar;
  proc_control_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_float.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_B.iyend = workingset->mConstrMax;
  if (proc_control_B.iyend - 1 >= 0) {
    std::memset(&solution->lambda.data[0], 0, static_cast<uint32_T>
                (proc_control_B.iyend) * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (solution->state == -5) {
      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_B.activeSetChangeID) {
         case 1:
          proc_control_B.b_iyend = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows <= qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_B.b_iy_d = qrmanager->ldq * qrmanager->ncols;
          proc_control_B.iQR0 = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_B.iyend = proc_control_B.b_iy_d + qrmanager->mrows;
            if (proc_control_B.b_iy_d + 1 <= proc_control_B.iyend) {
              std::memset(&qrmanager->QR.data[proc_control_B.b_iy_d], 0,
                          static_cast<uint32_T>(proc_control_B.iyend -
                proc_control_B.b_iy_d) * sizeof(real_T));
            }

            proc_control_B.iy_o = (qrmanager->mrows - 1) * qrmanager->ldq + 1;
            for (proc_control_B.iyend = 1; proc_control_B.iQR0 < 0 ?
                 proc_control_B.iyend >= proc_control_B.iy_o :
                 proc_control_B.iyend <= proc_control_B.iy_o;
                 proc_control_B.iyend += proc_control_B.iQR0) {
              proc_control_B.normDelta = 0.0;
              proc_control_B.idxRotGCol = (proc_control_B.iyend +
                qrmanager->mrows) - 1;
              for (proc_control_B.idx_e = proc_control_B.iyend;
                   proc_control_B.idx_e <= proc_control_B.idxRotGCol;
                   proc_control_B.idx_e++) {
                proc_control_B.normDelta += workingset->ATwset.data
                  [(proc_control_B.b_iyend + proc_control_B.idx_e) -
                  proc_control_B.iyend] * qrmanager->Q.data[proc_control_B.idx_e
                  - 1];
              }

              qrmanager->QR.data[proc_control_B.b_iy_d] +=
                proc_control_B.normDelta;
              proc_control_B.b_iy_d++;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_B.idx_e = qrmanager->mrows - 2;
          while (proc_control_B.idx_e + 2 > qrmanager->ncols) {
            proc_control_B.iQR0 = (qrmanager->ncols - 1) * qrmanager->ldq +
              proc_control_B.idx_e;
            proc_control_B.temp = qrmanager->QR.data[proc_control_B.iQR0 + 1];
            proc_control_xrotg(&qrmanager->QR.data[proc_control_B.iQR0],
                               &proc_control_B.temp, &proc_control_B.normDelta,
                               &proc_control_B.s_bk);
            qrmanager->QR.data[proc_control_B.iQR0 + 1] = proc_control_B.temp;
            proc_control_B.idxRotGCol = qrmanager->ldq * proc_control_B.idx_e;
            proc_control_B.b_iyend = qrmanager->mrows;
            if (qrmanager->mrows >= 1) {
              proc_control_B.iy_o = qrmanager->ldq + proc_control_B.idxRotGCol;
              for (proc_control_B.iyend = 0; proc_control_B.iyend <
                   proc_control_B.b_iyend; proc_control_B.iyend++) {
                proc_control_B.iQR0 = proc_control_B.iy_o + proc_control_B.iyend;
                proc_control_B.b_iy_d = proc_control_B.idxRotGCol +
                  proc_control_B.iyend;
                proc_control_B.temp = qrmanager->Q.data[proc_control_B.b_iy_d] *
                  proc_control_B.normDelta + qrmanager->
                  Q.data[proc_control_B.iQR0] * proc_control_B.s_bk;
                qrmanager->Q.data[proc_control_B.iQR0] = qrmanager->
                  Q.data[proc_control_B.iQR0] * proc_control_B.normDelta -
                  qrmanager->Q.data[proc_control_B.b_iy_d] * proc_control_B.s_bk;
                qrmanager->Q.data[proc_control_B.b_iy_d] = proc_control_B.temp;
              }
            }

            proc_control_B.idx_e--;
          }
          break;

         case -1:
          proc_control_deleteColMoveEnd(qrmanager,
            proc_control_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_factorQR_a(qrmanager, workingset->ATwset.data,
            proc_control_B.nVar_n, workingset->nActiveConstr, workingset->ldA);
          proc_control_B.b_iyend = qrmanager->minRowCol;
          for (proc_control_B.iyend = 0; proc_control_B.iyend <
               proc_control_B.b_iyend; proc_control_B.iyend++) {
            proc_control_B.iQR0 = qrmanager->ldq * proc_control_B.iyend +
              proc_control_B.iyend;
            proc_control_B.b_iy_d = qrmanager->mrows - proc_control_B.iyend;
            if (proc_control_B.b_iy_d - 2 >= 0) {
              std::memcpy(&qrmanager->Q.data[proc_control_B.iQR0 + 1],
                          &qrmanager->QR.data[proc_control_B.iQR0 + 1],
                          static_cast<uint32_T>(((proc_control_B.b_iy_d +
                proc_control_B.iQR0) - proc_control_B.iQR0) - 1) * sizeof(real_T));
            }
          }

          proc_control_xorgqr_l(qrmanager->mrows, qrmanager->mrows,
                                qrmanager->minRowCol, qrmanager->Q.data,
                                qrmanager->Q.size, qrmanager->ldq,
                                qrmanager->tau.data);
          break;
        }

        proc_control_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_B.normDelta = proc_control_xnrm2_ap(proc_control_B.nVar_n,
            solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_B.iyend = solution->searchDir.size[0];
        proc_control_B.b_iyend = solution->searchDir.size[0];
        if (proc_control_B.b_iyend - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_d[0], &solution->searchDir.data[0],
                      static_cast<uint32_T>(proc_control_B.b_iyend) * sizeof
                      (real_T));
        }

        if (proc_control_B.nVar_n - 1 >= 0) {
          std::memset(&proc_control_B.y_data_d[0], 0, static_cast<uint32_T>
                      (proc_control_B.nVar_n) * sizeof(real_T));
        }

        if (proc_control_B.iyend - 1 >= 0) {
          std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_d[0],
                      static_cast<uint32_T>(proc_control_B.iyend) * sizeof
                      (real_T));
        }

        proc_control_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_B.nVar_n)) {
          proc_control_B.iyend = qrmanager->ncols;
          if (qrmanager->ncols > 0) {
            guard1 = false;
            if (objective->objtype != 4) {
              proc_control_B.normDelta = 100.0 * static_cast<real_T>
                (qrmanager->mrows) * 2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                proc_control_B.idxRotGCol = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  proc_control_B.idx_e = (qrmanager->ncols - 1) * qrmanager->ldq
                    + qrmanager->mrows;
                  while ((proc_control_B.idxRotGCol > qrmanager->mrows) && (std::
                          abs(qrmanager->QR.data[proc_control_B.idx_e - 1]) >=
                          proc_control_B.normDelta)) {
                    proc_control_B.idxRotGCol--;
                    proc_control_B.idx_e -= qrmanager->ldq;
                  }

                  updateFval = (proc_control_B.idxRotGCol == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  proc_control_B.idx_e = (proc_control_B.idxRotGCol - 1) *
                    qrmanager->ldq + proc_control_B.idxRotGCol;
                  while ((proc_control_B.idxRotGCol >= 1) && (std::abs
                          (qrmanager->QR.data[proc_control_B.idx_e - 1]) >=
                          proc_control_B.normDelta)) {
                    proc_control_B.idxRotGCol--;
                    proc_control_B.idx_e = (proc_control_B.idx_e -
                      qrmanager->ldq) - 1;
                  }

                  updateFval = (proc_control_B.idxRotGCol == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_B.idx_e = qrmanager->ldq;
              if (qrmanager->mrows != 0) {
                proc_control_B.b_iyend = qrmanager->ncols;
                std::memset(&memspace->workspace_float.data[0], 0,
                            static_cast<uint32_T>(proc_control_B.b_iyend) *
                            sizeof(real_T));
                proc_control_B.b_iy_d = 0;
                proc_control_B.iy_o = (qrmanager->ncols - 1) * qrmanager->ldq +
                  1;
                for (proc_control_B.b_iyend = 1; proc_control_B.idx_e < 0 ?
                     proc_control_B.b_iyend >= proc_control_B.iy_o :
                     proc_control_B.b_iyend <= proc_control_B.iy_o;
                     proc_control_B.b_iyend += proc_control_B.idx_e) {
                  proc_control_B.normDelta = 0.0;
                  proc_control_B.idxRotGCol = (proc_control_B.b_iyend +
                    qrmanager->mrows) - 1;
                  for (proc_control_B.iQR0 = proc_control_B.b_iyend;
                       proc_control_B.iQR0 <= proc_control_B.idxRotGCol;
                       proc_control_B.iQR0++) {
                    proc_control_B.normDelta += qrmanager->
                      Q.data[proc_control_B.iQR0 - 1] * objective->
                      grad.data[proc_control_B.iQR0 - proc_control_B.b_iyend];
                  }

                  memspace->workspace_float.data[proc_control_B.b_iy_d] +=
                    proc_control_B.normDelta;
                  proc_control_B.b_iy_d++;
                }
              }

              if (qrmanager->ncols != 0) {
                for (proc_control_B.b_iyend = proc_control_B.iyend;
                     proc_control_B.b_iyend >= 1; proc_control_B.b_iyend--) {
                  proc_control_B.iy_o = ((proc_control_B.b_iyend - 1) *
                    proc_control_B.idx_e + proc_control_B.b_iyend) - 2;
                  memspace->workspace_float.data[proc_control_B.b_iyend - 1] /=
                    qrmanager->QR.data[proc_control_B.iy_o + 1];
                  for (proc_control_B.iQR0 = 0; proc_control_B.iQR0 <=
                       proc_control_B.b_iyend - 2; proc_control_B.iQR0++) {
                    proc_control_B.idxRotGCol = (proc_control_B.b_iyend -
                      proc_control_B.iQR0) - 2;
                    memspace->workspace_float.data[proc_control_B.idxRotGCol] -=
                      memspace->workspace_float.data[proc_control_B.b_iyend - 1]
                      * qrmanager->QR.data[proc_control_B.iy_o -
                      proc_control_B.iQR0];
                  }
                }
              }

              for (proc_control_B.idxRotGCol = 0; proc_control_B.idxRotGCol <
                   proc_control_B.iyend; proc_control_B.idxRotGCol++) {
                solution->lambda.data[proc_control_B.idxRotGCol] =
                  -memspace->workspace_float.data[proc_control_B.idxRotGCol];
              }
            }
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_B.nVar_n)) {
            proc_control_B.iyend = 0;
            proc_control_B.normDelta = 0.0;
            proc_control_B.idx_e = (workingset->nWConstr[0] +
              workingset->nWConstr[1]) + 1;
            proc_control_B.b_iyend = workingset->nActiveConstr;
            for (proc_control_B.idxRotGCol = proc_control_B.idx_e;
                 proc_control_B.idxRotGCol <= proc_control_B.b_iyend;
                 proc_control_B.idxRotGCol++) {
              proc_control_B.temp = solution->
                lambda.data[proc_control_B.idxRotGCol - 1];
              if (proc_control_B.temp < proc_control_B.normDelta) {
                proc_control_B.normDelta = proc_control_B.temp;
                proc_control_B.iyend = proc_control_B.idxRotGCol;
              }
            }

            if (proc_control_B.iyend == 0) {
              solution->state = 1;
            } else {
              proc_control_B.activeSetChangeID = -1;
              proc_control_B.globalActiveConstrIdx = proc_control_B.iyend;
              subProblemChanged = true;
              proc_control_removeConstr(workingset, proc_control_B.iyend);
              if (proc_control_B.iyend < workingset->nActiveConstr + 1) {
                solution->lambda.data[proc_control_B.iyend - 1] =
                  solution->lambda.data[workingset->nActiveConstr];
              }

              solution->lambda.data[workingset->nActiveConstr] = 0.0;
            }
          } else {
            proc_control_B.iyend = workingset->nActiveConstr;
            proc_control_B.activeSetChangeID = 0;
            proc_control_B.globalActiveConstrIdx = workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_B.iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_float.data,
            memspace->workspace_float.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            (objective->objtype == 5), &proc_control_B.normDelta, &updateFval,
            &proc_control_B.idxRotGCol, &proc_control_B.iyend);
          if (updateFval) {
            switch (proc_control_B.idxRotGCol) {
             case 3:
              proc_control_addAineqConstr(workingset, proc_control_B.iyend);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_B.iyend);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_B.iyend);
              break;
            }

            proc_control_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_B.nVar_n >= 1) && (!(proc_control_B.normDelta == 0.0)))
          {
            for (proc_control_B.idxRotGCol = 0; proc_control_B.idxRotGCol <
                 proc_control_B.nVar_n; proc_control_B.idxRotGCol++) {
              solution->xstar.data[proc_control_B.idxRotGCol] +=
                proc_control_B.normDelta * solution->
                searchDir.data[proc_control_B.idxRotGCol];
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, &updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_float.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[19321], const real_T f_data[],
  const real_T x_data[])
{
  int32_T beta1;
  beta1 = 0;
  if (obj_hasLinear) {
    if (static_cast<uint16_T>(obj_nvar) - 1 >= 0) {
      std::memcpy(&workspace_data[0], &f_data[0], static_cast<uint16_T>(obj_nvar)
                  * sizeof(real_T));
    }

    beta1 = 1;
  }

  if (obj_nvar != 0) {
    int32_T e;
    int32_T ix;
    if (beta1 != 1) {
      std::memset(&workspace_data[0], 0, static_cast<uint16_T>(obj_nvar) *
                  sizeof(real_T));
    }

    ix = 0;
    e = (obj_nvar - 1) * obj_nvar + 1;
    for (beta1 = 1; obj_nvar < 0 ? beta1 >= e : beta1 <= e; beta1 += obj_nvar) {
      int32_T g;
      proc_control_B.c_o = 0.5 * x_data[ix];
      g = (beta1 + obj_nvar) - 1;
      for (int32_T b{beta1}; b <= g; b++) {
        int32_T tmp;
        tmp = b - beta1;
        workspace_data[tmp] += H[b - 1] * proc_control_B.c_o;
      }

      ix++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_control_computeFval(const
  s_bsf2Fsale81D2LTDCKuKhG_proc_T *obj, real_T workspace_data[], const real_T H
  [19321], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  int32_T b;
  int32_T c_tmp_tmp;
  int32_T idx;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      b = static_cast<uint16_T>(obj->nvar);
      for (idx = 0; idx < b; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;

   default:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    b = obj->nvar + 1;
    c_tmp_tmp = obj->maxVar - 1;
    for (idx = b; idx <= c_tmp_tmp; idx++) {
      workspace_data[idx - 1] = 0.5 * obj->beta * x_data[idx - 1] + obj->rho;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      b = static_cast<uint16_T>(obj->maxVar - 1);
      for (idx = 0; idx < b; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_phaseone(const real_T H[19321], const real_T
  f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options, const
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  boolean_T exitg1;
  proc_control_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_B.mConstr = 1;
  } else {
    proc_control_B.mConstr = 4;
  }

  proc_control_setProblemType(workingset, proc_control_B.mConstr);
  proc_control_B.idxStartIneq_tmp_k = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_B.idxStartIneq_p = proc_control_B.idxStartIneq_tmp_k + 1;
  proc_control_B.idxEndIneq_e = workingset->nActiveConstr;
  for (proc_control_B.mConstr = proc_control_B.idxStartIneq_p;
       proc_control_B.mConstr <= proc_control_B.idxEndIneq_e;
       proc_control_B.mConstr++) {
    workingset->isActiveConstr.data[(workingset->isActiveIdx
      [workingset->Wid.data[proc_control_B.mConstr - 1] - 1] +
      workingset->Wlocalidx.data[proc_control_B.mConstr - 1]) - 2] = false;
  }

  workingset->nWConstr[2] = 0;
  workingset->nWConstr[3] = 0;
  workingset->nWConstr[4] = 0;
  workingset->nActiveConstr = proc_control_B.idxStartIneq_tmp_k;
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = proc_control_computeFval(objective,
    memspace->workspace_float.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                       cholmanager, objective, options->SolverName,
                       options->StepTolerance, options->ObjectiveLimit,
                       runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    proc_control_B.mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.mConstr <= workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_B.mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_B.mConstr - 1] ==
           workingset->sizes[3])) {
        proc_control_removeConstr(workingset, proc_control_B.mConstr);
        exitg1 = true;
      } else {
        proc_control_B.mConstr++;
      }
    }
  }

  proc_control_B.mConstr = workingset->nActiveConstr;
  while ((proc_control_B.mConstr > workingset->sizes[0] + 130) &&
         (proc_control_B.mConstr > proc_control_B.nVar_tmp)) {
    proc_control_removeConstr(workingset, proc_control_B.mConstr);
    proc_control_B.mConstr--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_B.nVar_tmp];
  proc_control_setProblemType(workingset, proc_control_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_driver_m(const real_T H[19321], const real_T
  f_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *solution,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *workingset, s_o1KzuWoPqzc62zOgqamCNH_proc_T *qrmanager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *cholmanager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options,
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  boolean_T guard1;
  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_B.nVar_o = workingset->nVar;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_B.b_k0 = static_cast<uint16_T>(workingset->sizes[0]);
    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < proc_control_B.b_k0;
         proc_control_B.idx_p++) {
      solution->xstar.data[workingset->indexFixed.data[proc_control_B.idx_p] - 1]
        = workingset->ub.data[workingset->indexFixed.data[proc_control_B.idx_p]
        - 1];
    }

    proc_control_B.b_k0 = static_cast<uint16_T>(workingset->sizes[3]);
    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < proc_control_B.b_k0;
         proc_control_B.idx_p++) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_B.idx_p) - 1]) {
        solution->xstar.data[workingset->indexLB.data[proc_control_B.idx_p] - 1]
          = -workingset->lb.data[workingset->indexLB.data[proc_control_B.idx_p]
          - 1];
      }
    }

    proc_control_B.b_k0 = static_cast<uint16_T>(workingset->sizes[4]);
    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < proc_control_B.b_k0;
         proc_control_B.idx_p++) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_B.idx_p) - 1]) {
        solution->xstar.data[workingset->indexUB.data[proc_control_B.idx_p] - 1]
          = workingset->ub.data[workingset->indexUB.data[proc_control_B.idx_p] -
          1];
      }
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    solution->maxConstr = proc__maxConstraintViolation_ah(workingset,
      solution->xstar.data);
    if (solution->maxConstr > 0.02) {
      proc_control_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                            cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        solution->maxConstr = proc__maxConstraintViolation_ah(workingset,
          solution->xstar.data);
        if (solution->maxConstr > 0.02) {
          proc_control_B.idx_p = workingset->mConstrMax;
          if (proc_control_B.idx_p - 1 >= 0) {
            std::memset(&solution->lambda.data[0], 0, static_cast<uint32_T>
                        (proc_control_B.idx_p) * sizeof(real_T));
          }

          solution->fstar = proc_control_computeFval(objective,
            memspace->workspace_float.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (solution->maxConstr > 0.0) {
            proc_control_B.b_k0 = solution->searchDir.size[0];
            proc_control_B.idx_p = solution->searchDir.size[0];
            if (proc_control_B.idx_p - 1 >= 0) {
              std::memcpy(&proc_control_B.y_data_bn[0],
                          &solution->searchDir.data[0], static_cast<uint32_T>
                          (proc_control_B.idx_p) * sizeof(real_T));
            }

            proc_control_B.nVar_o = static_cast<uint16_T>(proc_control_B.nVar_o);
            if (proc_control_B.nVar_o - 1 >= 0) {
              std::memcpy(&proc_control_B.y_data_bn[0], &solution->xstar.data[0],
                          static_cast<uint32_T>(proc_control_B.nVar_o) * sizeof
                          (real_T));
            }

            if (proc_control_B.b_k0 - 1 >= 0) {
              std::memcpy(&solution->searchDir.data[0],
                          &proc_control_B.y_data_bn[0], static_cast<uint32_T>
                          (proc_control_B.b_k0) * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_B.maxConstr_new = proc__maxConstraintViolation_ah
              (workingset, solution->xstar.data);
            if (proc_control_B.maxConstr_new >= solution->maxConstr) {
              solution->maxConstr = proc_control_B.maxConstr_new;
              proc_control_B.b_k0 = solution->xstar.size[0];
              proc_control_B.idx_p = solution->xstar.size[0];
              if (proc_control_B.idx_p - 1 >= 0) {
                std::memcpy(&proc_control_B.y_data_bn[0], &solution->xstar.data
                            [0], static_cast<uint32_T>(proc_control_B.idx_p) *
                            sizeof(real_T));
              }

              if (proc_control_B.nVar_o - 1 >= 0) {
                std::memcpy(&proc_control_B.y_data_bn[0],
                            &solution->searchDir.data[0], static_cast<uint32_T>
                            (proc_control_B.nVar_o) * sizeof(real_T));
              }

              if (proc_control_B.b_k0 - 1 >= 0) {
                std::memcpy(&solution->xstar.data[0], &proc_control_B.y_data_bn
                            [0], static_cast<uint32_T>(proc_control_B.b_k0) *
                            sizeof(real_T));
              }
            }
          }

          proc_control_iterate(H, f_data, solution, memspace, workingset,
                               qrmanager, cholmanager, objective,
                               options->SolverName, options->StepTolerance,
                               options->ObjectiveLimit,
                               runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                           cholmanager, objective, options->SolverName,
                           options->StepTolerance, options->ObjectiveLimit,
                           runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_addAeqConstr(s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *obj, int32_T idx_local)
{
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    int32_T b_idx;
    int32_T iAeq0;
    int32_T iAw0;
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    b_idx = static_cast<uint16_T>(obj->nVar);
    for (totalEq = 0; totalEq < b_idx; totalEq++) {
      obj->ATwset.data[iAw0 + totalEq] = obj->Aeq.data[iAeq0 + totalEq];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    int32_T iAeq0;
    int32_T iAw0;
    int32_T iAw0_tmp;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = obj->Wlocalidx.data[totalEq];
    iAw0_tmp = static_cast<uint16_T>(obj->nVar);
    for (iAeq0 = 0; iAeq0 < iAw0_tmp; iAeq0++) {
      obj->ATwset.data[iAeq0 + obj->ldA * (obj->nActiveConstr - 1)] =
        obj->ATwset.data[obj->ldA * totalEq + iAeq0];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (int32_T b_idx{0}; b_idx < iAw0_tmp; b_idx++) {
      obj->ATwset.data[iAw0 + b_idx] = obj->Aeq.data[iAeq0 + b_idx];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
boolean_T proc_control::proc_control_soc(const real_T Hessian[19321], const
  real_T grad_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_B.nVar_c = WorkingSet->nVar;
  proc_control_B.idxStartIneq_tmp_tmp = static_cast<uint16_T>(WorkingSet->nVar);
  for (proc_control_B.idxIneqOffset = 0; proc_control_B.idxIneqOffset <
       proc_control_B.idxStartIneq_tmp_tmp; proc_control_B.idxIneqOffset++) {
    TrialState->xstarsqp[proc_control_B.idxIneqOffset] =
      TrialState->xstarsqp_old[proc_control_B.idxIneqOffset];
    TrialState->socDirection.data[proc_control_B.idxIneqOffset] =
      TrialState->xstar.data[proc_control_B.idxIneqOffset];
  }

  proc_control_B.idxStartIneq_tmp_e = static_cast<uint16_T>
    (WorkingSet->mConstrMax);
  if (proc_control_B.idxStartIneq_tmp_e - 1 >= 0) {
    std::memcpy(&TrialState->lambdaStopTest.data[0], &TrialState->lambda.data[0],
                static_cast<uint32_T>(proc_control_B.idxStartIneq_tmp_e) *
                sizeof(real_T));
  }

  proc_control_B.idxIneqOffset = WorkingSet->isActiveIdx[2];
  for (proc_control_B.idxStartIneq_h = 0; proc_control_B.idxStartIneq_h < 130;
       proc_control_B.idxStartIneq_h++) {
    WorkingSet->beq[proc_control_B.idxStartIneq_h] = -TrialState->
      cEq[proc_control_B.idxStartIneq_h];
  }

  proc_control_B.idx_lower = WorkingSet->ldA;
  proc_control_B.iy_g = 0;
  proc_control_B.n_f = WorkingSet->ldA * 129 + 1;
  for (proc_control_B.idxStartIneq_h = 1; proc_control_B.idx_lower < 0 ?
       proc_control_B.idxStartIneq_h >= proc_control_B.n_f :
       proc_control_B.idxStartIneq_h <= proc_control_B.n_f;
       proc_control_B.idxStartIneq_h += proc_control_B.idx_lower) {
    proc_control_B.b_c_m = 0.0;
    proc_control_B.ix_c = (proc_control_B.idxStartIneq_h + WorkingSet->nVar) - 1;
    for (proc_control_B.idx_Aineq = proc_control_B.idxStartIneq_h;
         proc_control_B.idx_Aineq <= proc_control_B.ix_c;
         proc_control_B.idx_Aineq++) {
      proc_control_B.b_c_m += WorkingSet->Aeq.data[proc_control_B.idx_Aineq - 1]
        * TrialState->searchDir.data[proc_control_B.idx_Aineq -
        proc_control_B.idxStartIneq_h];
    }

    WorkingSet->beq[proc_control_B.iy_g] += proc_control_B.b_c_m;
    proc_control_B.iy_g++;
  }

  for (proc_control_B.idxStartIneq_h = 0; proc_control_B.idxStartIneq_h < 130;
       proc_control_B.idxStartIneq_h++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_B.idxStartIneq_h]
      = WorkingSet->beq[proc_control_B.idxStartIneq_h];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_B.idx_Aineq = static_cast<uint16_T>(WorkingSet->sizes[2]);
    for (proc_control_B.idxStartIneq_h = 0; proc_control_B.idxStartIneq_h <
         proc_control_B.idx_Aineq; proc_control_B.idxStartIneq_h++) {
      WorkingSet->bineq.data[proc_control_B.idxStartIneq_h] =
        -TrialState->cIneq.data[proc_control_B.idxStartIneq_h];
    }

    proc_control_B.iy_g = 0;
    proc_control_B.n_f = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    for (proc_control_B.idxStartIneq_h = 1; proc_control_B.idx_lower < 0 ?
         proc_control_B.idxStartIneq_h >= proc_control_B.n_f :
         proc_control_B.idxStartIneq_h <= proc_control_B.n_f;
         proc_control_B.idxStartIneq_h += proc_control_B.idx_lower) {
      proc_control_B.b_c_m = 0.0;
      proc_control_B.ix_c = (proc_control_B.idxStartIneq_h + WorkingSet->nVar) -
        1;
      for (proc_control_B.idx_Aineq = proc_control_B.idxStartIneq_h;
           proc_control_B.idx_Aineq <= proc_control_B.ix_c;
           proc_control_B.idx_Aineq++) {
        proc_control_B.b_c_m += WorkingSet->Aineq.data[proc_control_B.idx_Aineq
          - 1] * TrialState->searchDir.data[proc_control_B.idx_Aineq -
          proc_control_B.idxStartIneq_h];
      }

      WorkingSet->bineq.data[proc_control_B.iy_g] += proc_control_B.b_c_m;
      proc_control_B.iy_g++;
    }

    proc_control_B.idx_Aineq = 1;
    proc_control_B.idx_lower = WorkingSet->sizes[2] + 1;
    proc_control_B.iy_g = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    proc_control_B.n_f = WorkingSet->nActiveConstr;
    for (proc_control_B.idxStartIneq_h = proc_control_B.idxIneqOffset;
         proc_control_B.idxStartIneq_h <= proc_control_B.n_f;
         proc_control_B.idxStartIneq_h++) {
      switch (WorkingSet->Wid.data[proc_control_B.idxStartIneq_h - 1]) {
       case 3:
        proc_control_B.ix_c = proc_control_B.idx_Aineq;
        proc_control_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_B.idxStartIneq_h - 1] =
          WorkingSet->bineq.data[WorkingSet->
          Wlocalidx.data[proc_control_B.idxStartIneq_h - 1] - 1];
        break;

       case 4:
        proc_control_B.ix_c = proc_control_B.idx_lower;
        proc_control_B.idx_lower++;
        break;

       default:
        proc_control_B.ix_c = proc_control_B.iy_g;
        proc_control_B.iy_g++;
        break;
      }

      TrialState->workingset_old.data[proc_control_B.ix_c - 1] =
        WorkingSet->Wlocalidx.data[proc_control_B.idxStartIneq_h - 1];
    }
  }

  std::memcpy(&TrialState->xstar.data[0], &TrialState->xstarsqp[0], static_cast<
              uint32_T>(proc_control_B.idxStartIneq_tmp_tmp) * sizeof(real_T));
  proc_control_B.qpoptions_f = *qpoptions;
  proc_control_B.qpoptions_c = *qpoptions;
  proc_control_driver_m(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective,
                        &proc_control_B.qpoptions_f, &proc_control_B.qpoptions_c);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_B.idxStartIneq_h = static_cast<uint16_T>(proc_control_B.nVar_c);
  for (proc_control_B.idxIneqOffset = 0; proc_control_B.idxIneqOffset <
       proc_control_B.idxStartIneq_h; proc_control_B.idxIneqOffset++) {
    proc_control_B.b_c_m = TrialState->
      socDirection.data[proc_control_B.idxIneqOffset];
    TrialState->socDirection.data[proc_control_B.idxIneqOffset] =
      TrialState->xstar.data[proc_control_B.idxIneqOffset] -
      proc_control_B.b_c_m;
    TrialState->xstar.data[proc_control_B.idxIneqOffset] = proc_control_B.b_c_m;
  }

  success = (proc_control_xnrm2_ap(proc_control_B.nVar_c,
              TrialState->socDirection.data) <= 2.0 * proc_control_xnrm2_ap
             (proc_control_B.nVar_c, TrialState->xstar.data));
  proc_control_B.idxIneqOffset = WorkingSet->sizes[2];
  for (proc_control_B.nVar_c = 0; proc_control_B.nVar_c < 130;
       proc_control_B.nVar_c++) {
    WorkingSet->beq[proc_control_B.nVar_c] = -TrialState->
      cEq[proc_control_B.nVar_c];
  }

  for (proc_control_B.nVar_c = 0; proc_control_B.nVar_c < 130;
       proc_control_B.nVar_c++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_B.nVar_c] =
      WorkingSet->beq[proc_control_B.nVar_c];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_B.idxStartIneq_h = static_cast<uint16_T>(WorkingSet->sizes[2]);
    for (proc_control_B.nVar_c = 0; proc_control_B.nVar_c <
         proc_control_B.idxStartIneq_h; proc_control_B.nVar_c++) {
      WorkingSet->bineq.data[proc_control_B.nVar_c] = -TrialState->
        cIneq.data[proc_control_B.nVar_c];
    }

    if (!success) {
      proc_control_B.idxStartIneq_tmp_tmp = WorkingSet->nWConstr[0] +
        WorkingSet->nWConstr[1];
      proc_control_B.idxStartIneq_h = proc_control_B.idxStartIneq_tmp_tmp + 1;
      proc_control_B.idx_Aineq = WorkingSet->nActiveConstr;
      for (proc_control_B.nVar_c = proc_control_B.idxStartIneq_h;
           proc_control_B.nVar_c <= proc_control_B.idx_Aineq;
           proc_control_B.nVar_c++) {
        WorkingSet->isActiveConstr.data[(WorkingSet->isActiveIdx
          [WorkingSet->Wid.data[proc_control_B.nVar_c - 1] - 1] +
          WorkingSet->Wlocalidx.data[proc_control_B.nVar_c - 1]) - 2] = false;
      }

      WorkingSet->nWConstr[2] = 0;
      WorkingSet->nWConstr[3] = 0;
      WorkingSet->nWConstr[4] = 0;
      WorkingSet->nActiveConstr = proc_control_B.idxStartIneq_tmp_tmp;
      for (proc_control_B.nVar_c = 0; proc_control_B.nVar_c <
           proc_control_B.nWIneq_old; proc_control_B.nVar_c++) {
        proc_control_addAineqConstr(WorkingSet, TrialState->
          workingset_old.data[proc_control_B.nVar_c]);
      }

      for (proc_control_B.nWIneq_old = 0; proc_control_B.nWIneq_old <
           proc_control_B.nWLower_old; proc_control_B.nWIneq_old++) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_B.nWIneq_old +
          proc_control_B.idxIneqOffset]);
      }

      for (proc_control_B.nWLower_old = 0; proc_control_B.nWLower_old <
           proc_control_B.nWUpper_old; proc_control_B.nWLower_old++) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_B.nWLower_old +
          proc_control_B.idxIneqOffset) + WorkingSet->sizes[3]]);
      }
    }
  }

  if (!success) {
    if (proc_control_B.idxStartIneq_tmp_e - 1 >= 0) {
      std::memcpy(&TrialState->lambda.data[0], &TrialState->lambdaStopTest.data
                  [0], static_cast<uint32_T>(proc_control_B.idxStartIneq_tmp_e) *
                  sizeof(real_T));
    }
  } else {
    proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
      WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
      WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
  }

  return success;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_normal(const real_T Hessian[19321], const real_T
  grad_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_B.qpoptions_fq = *qpoptions;
  proc_control_B.qpoptions_n = *qpoptions;
  proc_control_driver_m(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective,
                        &proc_control_B.qpoptions_fq,
                        &proc_control_B.qpoptions_n);
  if (TrialState->state > 0) {
    proc_control_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_B.constrViolationEq = 0.0;
    for (proc_control_B.k_n = 0; proc_control_B.k_n < 130; proc_control_B.k_n++)
    {
      proc_control_B.constrViolationEq += std::abs(TrialState->
        cEq[proc_control_B.k_n]);
    }

    proc_control_B.constrViolationIneq = 0.0;
    proc_control_B.b_b = static_cast<uint16_T>(WorkingSet->sizes[2]);
    for (proc_control_B.k_n = 0; proc_control_B.k_n < proc_control_B.b_b;
         proc_control_B.k_n++) {
      proc_control_B.TrialState_f = TrialState->cIneq.data[proc_control_B.k_n];
      if (proc_control_B.TrialState_f > 0.0) {
        proc_control_B.constrViolationIneq += proc_control_B.TrialState_f;
      }
    }

    proc_control_B.constrViolationEq += proc_control_B.constrViolationIneq;
    proc_control_B.constrViolationIneq = MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_B.constrViolationIneq += proc_control_B.constrViolationEq;
    if ((proc_control_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_B.penaltyParamTrial = 1.5;
      }

      proc_control_B.penaltyParamTrial = proc_control_B.penaltyParamTrial *
        TrialState->fstar / proc_control_B.constrViolationIneq;
    }

    if (proc_control_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_B.penaltyParamTrial *
        proc_control_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_B.penaltyParamTrial,
          1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_B.penaltyParamTrial,
        1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_B.constrViolationEq + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_B.constrViolationEq, 0.0);
  }

  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_B.k_n = 0; proc_control_B.k_n < 130; proc_control_B.k_n++)
    {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_B.k_n] =
        proc_control_B.k_n + 1;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_relaxed(const real_T Hessian[19321], const
  real_T grad_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T b_tf;
  boolean_T tf;
  proc_control_B.nVarOrig = WorkingSet->nVar - 1;
  proc_control_B.beta = 0.0;
  proc_control_B.idx_max_g = static_cast<uint16_T>(WorkingSet->nVar);
  proc_control_B.mLBOrig = 0;
  for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig <
       proc_control_B.idx_max_g; proc_control_B.mFiniteLBOrig++) {
    proc_control_B.beta += Hessian[proc_control_B.mLBOrig];
    proc_control_B.mLBOrig += 140;
  }

  proc_control_B.beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_B.mLBOrig = QPObjective->nvar;
    if (QPObjective->nvar < 1) {
      proc_control_B.idx_max_g = 0;
    } else {
      proc_control_B.idx_max_g = 1;
      if (QPObjective->nvar > 1) {
        proc_control_B.smax_b = std::abs(grad_data[0]);
        for (proc_control_B.mFiniteLBOrig = 2; proc_control_B.mFiniteLBOrig <=
             proc_control_B.mLBOrig; proc_control_B.mFiniteLBOrig++) {
          proc_control_B.s_h = std::abs(grad_data[proc_control_B.mFiniteLBOrig -
            1]);
          if (proc_control_B.s_h > proc_control_B.smax_b) {
            proc_control_B.idx_max_g = proc_control_B.mFiniteLBOrig;
            proc_control_B.smax_b = proc_control_B.s_h;
          }
        }
      }
    }

    proc_control_B.smax_b = std::fmax(1.0, std::abs
      (grad_data[proc_control_B.idx_max_g - 1])) * 100.0;
  } else {
    proc_control_B.mLBOrig = WorkingSet->mConstr;
    if (WorkingSet->mConstr < 1) {
      proc_control_B.idx_max_g = 0;
    } else {
      proc_control_B.idx_max_g = 1;
      if (WorkingSet->mConstr > 1) {
        proc_control_B.smax_b = std::abs(TrialState->lambdasqp.data[0]);
        for (proc_control_B.mFiniteLBOrig = 2; proc_control_B.mFiniteLBOrig <=
             proc_control_B.mLBOrig; proc_control_B.mFiniteLBOrig++) {
          proc_control_B.s_h = std::abs(TrialState->
            lambdasqp.data[proc_control_B.mFiniteLBOrig - 1]);
          if (proc_control_B.s_h > proc_control_B.smax_b) {
            proc_control_B.idx_max_g = proc_control_B.mFiniteLBOrig;
            proc_control_B.smax_b = proc_control_B.s_h;
          }
        }
      }
    }

    proc_control_B.smax_b = std::abs(TrialState->
      lambdasqp.data[proc_control_B.idx_max_g - 1]);
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->beta = proc_control_B.beta;
  QPObjective->rho = proc_control_B.smax_b;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 4;
  proc_control_B.b_WorkingSet = *WorkingSet;
  proc_control_setProblemType(&proc_control_B.b_WorkingSet, 2);
  proc_control_B.idx_max_g = proc_control_B.b_WorkingSet.sizes[2] + 1;
  proc_control_B.mLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
    proc_control_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_B.ix_tmp = static_cast<uint16_T>
    (proc_control_B.b_WorkingSet.sizes[2]);
  if (proc_control_B.ix_tmp - 1 >= 0) {
    std::memcpy(&memspace->workspace_float.data[0],
                &proc_control_B.b_WorkingSet.bineq.data[0], static_cast<uint32_T>
                (proc_control_B.ix_tmp) * sizeof(real_T));
  }

  proc_control_xgemv_jhnw4qt(WorkingSet->nVar,
    proc_control_B.b_WorkingSet.sizes[2], proc_control_B.b_WorkingSet.Aineq.data,
    proc_control_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_float.data);
  for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig <
       proc_control_B.ix_tmp; proc_control_B.mFiniteLBOrig++) {
    TrialState->xstar.data[(proc_control_B.nVarOrig +
      proc_control_B.mFiniteLBOrig) + 1] = static_cast<real_T>
      (memspace->workspace_float.data[proc_control_B.mFiniteLBOrig] > 0.0) *
      memspace->workspace_float.data[proc_control_B.mFiniteLBOrig];
  }

  std::memcpy(&memspace->workspace_float.data[0],
              &proc_control_B.b_WorkingSet.beq[0], 130U * sizeof(real_T));
  proc_control_xgemv_jhnw4qt(WorkingSet->nVar, 130,
    proc_control_B.b_WorkingSet.Aeq.data, proc_control_B.b_WorkingSet.ldA,
    TrialState->xstar.data, memspace->workspace_float.data);
  for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig < 130;
       proc_control_B.mFiniteLBOrig++) {
    proc_control_B.ix_tmp = proc_control_B.idx_max_g +
      proc_control_B.mFiniteLBOrig;
    if (memspace->workspace_float.data[proc_control_B.mFiniteLBOrig] <= 0.0) {
      TrialState->xstar.data[proc_control_B.nVarOrig + proc_control_B.ix_tmp] =
        0.0;
      TrialState->xstar.data[(proc_control_B.nVarOrig + proc_control_B.ix_tmp) +
        130] = -memspace->workspace_float.data[proc_control_B.mFiniteLBOrig];
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
        proc_control_B.mLBOrig + proc_control_B.ix_tmp);
      if (memspace->workspace_float.data[proc_control_B.mFiniteLBOrig] >= -0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          (proc_control_B.mLBOrig + proc_control_B.ix_tmp) + 130);
      }
    } else {
      proc_control_B.ix_gr = proc_control_B.nVarOrig + proc_control_B.ix_tmp;
      TrialState->xstar.data[proc_control_B.ix_gr] =
        memspace->workspace_float.data[proc_control_B.mFiniteLBOrig];
      TrialState->xstar.data[proc_control_B.ix_gr + 130] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
        (proc_control_B.mLBOrig + proc_control_B.ix_tmp) + 130);
      if (memspace->workspace_float.data[proc_control_B.mFiniteLBOrig] <= 0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          proc_control_B.mLBOrig + proc_control_B.ix_tmp);
      }
    }
  }

  proc_control_B.nVarOrig = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_B.b_WorkingSet.nVar) - WorkingSet->nVar;
  proc_control_B.qpoptions = *qpoptions;
  proc_control_B.qpoptions_j = *qpoptions;
  proc_control_driver_m(Hessian, grad_data, TrialState, memspace,
                        &proc_control_B.b_WorkingSet, QRManager, CholManager,
                        QPObjective, &proc_control_B.qpoptions,
                        &proc_control_B.qpoptions_j);
  qpoptions->MaxIterations = proc_control_B.nVarOrig;
  proc_control_B.idx_max_g = proc_control_B.b_WorkingSet.sizes[3] - 261;
  proc_control_B.nVarOrig = 0;
  for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig < 130;
       proc_control_B.mFiniteLBOrig++) {
    proc_control_B.mLBOrig = (proc_control_B.b_WorkingSet.isActiveIdx[3] +
      proc_control_B.idx_max_g) + proc_control_B.mFiniteLBOrig;
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data[proc_control_B.mLBOrig];
    b_tf =
      proc_control_B.b_WorkingSet.isActiveConstr.data[proc_control_B.mLBOrig +
      130];
    memspace->workspace_int.data[proc_control_B.mFiniteLBOrig] = tf;
    memspace->workspace_int.data[proc_control_B.mFiniteLBOrig + 130] = b_tf;
    proc_control_B.nVarOrig = (proc_control_B.nVarOrig + tf) + b_tf;
  }

  proc_control_B.mLBOrig = static_cast<uint16_T>
    (proc_control_B.b_WorkingSet.sizes[2]);
  for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig <
       proc_control_B.mLBOrig; proc_control_B.mFiniteLBOrig++) {
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data
      [((proc_control_B.b_WorkingSet.isActiveIdx[3] + proc_control_B.idx_max_g)
        - proc_control_B.b_WorkingSet.sizes[2]) + proc_control_B.mFiniteLBOrig];
    memspace->workspace_int.data[proc_control_B.mFiniteLBOrig + 260] = tf;
    proc_control_B.nVarOrig += tf;
  }

  if (TrialState->state != -6) {
    proc_control_B.idx_max_g = (proc_control_B.b_WorkingSet.nVarMax -
      WorkingSet->nVar) - 1;
    proc_control_B.ix_tmp = WorkingSet->nVar + 1;
    proc_control_B.s_h = 0.0;
    proc_control_B.qpfvalQuadExcess = 0.0;
    if (proc_control_B.idx_max_g >= 1) {
      proc_control_B.ix_gr = WorkingSet->nVar + proc_control_B.idx_max_g;
      for (proc_control_B.mFiniteLBOrig = proc_control_B.ix_tmp;
           proc_control_B.mFiniteLBOrig <= proc_control_B.ix_gr;
           proc_control_B.mFiniteLBOrig++) {
        proc_control_B.s_h += std::abs(TrialState->
          xstar.data[proc_control_B.mFiniteLBOrig - 1]);
      }

      proc_control_B.idx_max_g = static_cast<uint16_T>(proc_control_B.idx_max_g);
      for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig <
           proc_control_B.idx_max_g; proc_control_B.mFiniteLBOrig++) {
        proc_control_B.qpfvalQuadExcess_tmp = TrialState->xstar.data
          [WorkingSet->nVar + proc_control_B.mFiniteLBOrig];
        proc_control_B.qpfvalQuadExcess += proc_control_B.qpfvalQuadExcess_tmp *
          proc_control_B.qpfvalQuadExcess_tmp;
      }
    }

    proc_control_B.beta = (TrialState->fstar - proc_control_B.smax_b *
      proc_control_B.s_h) - proc_control_B.beta / 2.0 *
      proc_control_B.qpfvalQuadExcess;
    proc_control_B.mLBOrig = (WorkingSet->nVarMax - WorkingSet->nVar) - 1;
    proc_control_B.smax_b = MeritFunction->penaltyParam;
    proc_control_B.s_h = 0.0;
    for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig < 130;
         proc_control_B.mFiniteLBOrig++) {
      proc_control_B.s_h += std::abs(TrialState->
        cEq[proc_control_B.mFiniteLBOrig]);
    }

    proc_control_B.qpfvalQuadExcess = 0.0;
    proc_control_B.ix_gr = static_cast<uint16_T>(WorkingSet->sizes[2]);
    for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig <
         proc_control_B.ix_gr; proc_control_B.mFiniteLBOrig++) {
      proc_control_B.qpfvalQuadExcess_tmp = TrialState->
        cIneq.data[proc_control_B.mFiniteLBOrig];
      if (proc_control_B.qpfvalQuadExcess_tmp > 0.0) {
        proc_control_B.qpfvalQuadExcess += proc_control_B.qpfvalQuadExcess_tmp;
      }
    }

    proc_control_B.s_h += proc_control_B.qpfvalQuadExcess;
    proc_control_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_B.qpfvalQuadExcess_tmp = 0.0;
    if (proc_control_B.mLBOrig >= 1) {
      proc_control_B.mLBOrig += WorkingSet->nVar;
      for (proc_control_B.mFiniteLBOrig = proc_control_B.ix_tmp;
           proc_control_B.mFiniteLBOrig <= proc_control_B.mLBOrig;
           proc_control_B.mFiniteLBOrig++) {
        proc_control_B.qpfvalQuadExcess_tmp += std::abs(TrialState->
          xstar.data[proc_control_B.mFiniteLBOrig - 1]);
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_B.qpfvalQuadExcess_tmp;
    proc_control_B.qpfvalQuadExcess = (proc_control_B.s_h +
      proc_control_B.qpfvalQuadExcess) - proc_control_B.qpfvalQuadExcess_tmp;
    if ((proc_control_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_B.beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_B.smax_b = 1.0;
      } else {
        proc_control_B.smax_b = 1.5;
      }

      proc_control_B.smax_b = proc_control_B.smax_b * proc_control_B.beta /
        proc_control_B.qpfvalQuadExcess;
    }

    if (proc_control_B.smax_b < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_B.smax_b * proc_control_B.s_h +
        TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_B.smax_b +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_B.smax_b, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam * proc_control_B.s_h +
          TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_B.smax_b, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam * proc_control_B.s_h +
        TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(proc_control_B.beta -
      MeritFunction->penaltyParam * proc_control_B.s_h, 0.0);
    proc_control_B.idx_max_g = proc_control_B.b_WorkingSet.isActiveIdx[1] - 1;
    for (proc_control_B.mFiniteLBOrig = 0; proc_control_B.mFiniteLBOrig < 130;
         proc_control_B.mFiniteLBOrig++) {
      if (memspace->workspace_int.data[proc_control_B.mFiniteLBOrig] != 0) {
        tf = (memspace->workspace_int.data[proc_control_B.mFiniteLBOrig + 130]
              != 0);
      } else {
        tf = false;
      }

      proc_control_B.mLBOrig = proc_control_B.idx_max_g +
        proc_control_B.mFiniteLBOrig;
      TrialState->lambda.data[proc_control_B.mLBOrig] *= static_cast<real_T>(tf);
    }

    proc_control_B.idx_max_g = proc_control_B.b_WorkingSet.isActiveIdx[2];
    proc_control_B.mLBOrig = proc_control_B.b_WorkingSet.nActiveConstr;
    for (proc_control_B.mFiniteLBOrig = proc_control_B.idx_max_g;
         proc_control_B.mFiniteLBOrig <= proc_control_B.mLBOrig;
         proc_control_B.mFiniteLBOrig++) {
      if (proc_control_B.b_WorkingSet.Wid.data[proc_control_B.mFiniteLBOrig - 1]
          == 3) {
        TrialState->lambda.data[proc_control_B.mFiniteLBOrig - 1] *=
          static_cast<real_T>(memspace->
                              workspace_int.data[proc_control_B.b_WorkingSet.Wlocalidx.data
                              [proc_control_B.mFiniteLBOrig - 1] + 259]);
      }
    }
  }

  proc_control_B.c_WorkingSet = proc_control_B.b_WorkingSet;
  proc_control_B.mFiniteLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
    proc_control_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_B.idx_max_g = proc_control_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_B.idx_max_g > proc_control_B.b_WorkingSet.sizes[0] + 130)
         && (proc_control_B.nVarOrig > 0)) {
    if ((proc_control_B.c_WorkingSet.Wid.data[proc_control_B.idx_max_g - 1] == 4)
        && (proc_control_B.c_WorkingSet.Wlocalidx.data[proc_control_B.idx_max_g
            - 1] > proc_control_B.mFiniteLBOrig)) {
      proc_control_B.beta = TrialState->
        lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1];
      TrialState->lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1] =
        0.0;
      TrialState->lambda.data[proc_control_B.idx_max_g - 1] =
        proc_control_B.beta;
      proc_control_removeConstr(&proc_control_B.c_WorkingSet,
        proc_control_B.idx_max_g);
      proc_control_B.nVarOrig--;
    }

    proc_control_B.idx_max_g--;
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 3;
  *WorkingSet = proc_control_B.c_WorkingSet;
  proc_control_setProblemType(WorkingSet, 3);
  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_float.data);
}

// Function for MATLAB Function: '<S217>/NLMPC'
boolean_T proc_control::proc_control_step_k(int32_T *STEP_TYPE, real_T Hessian
  [19321], const real_T lb[139], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_z8miyzCNLMZx998HtZciUB_proc_T *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T
  *WorkingSet, s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager,
  s_962gqykB8vLiRVqsLdGQIG_proc_T *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  int32_T exitg1;
  boolean_T checkBoundViolation;
  boolean_T guard1;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_B.nVar = WorkingSet->nVar;
  if (*STEP_TYPE != 3) {
    proc_control_B.idxStartIneq = static_cast<uint16_T>(WorkingSet->nVar);
    std::memcpy(&TrialState->xstar.data[0], &TrialState->xstarsqp[0],
                static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                (real_T));
  } else {
    proc_control_B.idxEndIneq = TrialState->searchDir.size[0];
    proc_control_B.idxStartIneq = TrialState->searchDir.size[0];
    if (proc_control_B.idxStartIneq - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_h[0], &TrialState->searchDir.data[0],
                  static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                  (real_T));
    }

    proc_control_B.idxStartIneq = static_cast<uint16_T>(WorkingSet->nVar);
    if (proc_control_B.idxStartIneq - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_h[0], &TrialState->xstar.data[0],
                  static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                  (real_T));
    }

    if (proc_control_B.idxEndIneq - 1 >= 0) {
      std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_h[0],
                  static_cast<uint32_T>(proc_control_B.idxEndIneq) * sizeof
                  (real_T));
    }
  }

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_normal(Hessian, TrialState->grad.data, TrialState,
                          MeritFunction, memspace, WorkingSet, QRManager,
                          CholManager, QPObjective, qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_B.idxEndIneq = TrialState->delta_x.size[0];
        proc_control_B.idxStartIneq = TrialState->delta_x.size[0];
        if (proc_control_B.idxStartIneq - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_h[0], &TrialState->delta_x.data[0],
                      static_cast<uint32_T>(proc_control_B.idxStartIneq) *
                      sizeof(real_T));
        }

        proc_control_B.idxStartIneq = static_cast<uint16_T>(proc_control_B.nVar);
        if (proc_control_B.idxStartIneq - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_h[0], &TrialState->xstar.data[0],
                      static_cast<uint32_T>(proc_control_B.idxStartIneq) *
                      sizeof(real_T));
        }

        if (proc_control_B.idxEndIneq - 1 >= 0) {
          std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_h[0],
                      static_cast<uint32_T>(proc_control_B.idxEndIneq) * sizeof
                      (real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_control_B.idxStartIneq_tmp = WorkingSet->nWConstr[0] +
        WorkingSet->nWConstr[1];
      proc_control_B.idxStartIneq = proc_control_B.idxStartIneq_tmp + 1;
      proc_control_B.idxEndIneq = WorkingSet->nActiveConstr;
      for (proc_control_B.k_g = proc_control_B.idxStartIneq; proc_control_B.k_g <=
           proc_control_B.idxEndIneq; proc_control_B.k_g++) {
        WorkingSet->isActiveConstr.data[(WorkingSet->isActiveIdx
          [WorkingSet->Wid.data[proc_control_B.k_g - 1] - 1] +
          WorkingSet->Wlocalidx.data[proc_control_B.k_g - 1]) - 2] = false;
      }

      WorkingSet->nWConstr[2] = 0;
      WorkingSet->nWConstr[3] = 0;
      WorkingSet->nWConstr[4] = 0;
      WorkingSet->nActiveConstr = proc_control_B.idxStartIneq_tmp;
      proc_control_B.idxEndIneq = TrialState->xstar.size[0];
      proc_control_B.idxStartIneq = TrialState->xstar.size[0];
      if (proc_control_B.idxStartIneq - 1 >= 0) {
        std::memcpy(&proc_control_B.m_data[0], &TrialState->xstar.data[0],
                    static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                    (real_T));
      }

      proc_control_B.idxStartIneq = static_cast<uint16_T>(WorkingSet->sizes[3]);
      for (proc_control_B.k_g = 0; proc_control_B.k_g <
           proc_control_B.idxStartIneq; proc_control_B.k_g++) {
        proc_control_B.nrmGradInf = WorkingSet->lb.data[WorkingSet->
          indexLB.data[proc_control_B.k_g] - 1];
        if (-proc_control_B.m_data[WorkingSet->indexLB.data[proc_control_B.k_g]
            - 1] > proc_control_B.nrmGradInf) {
          proc_control_B.m_data[WorkingSet->indexLB.data[proc_control_B.k_g] - 1]
            = -proc_control_B.nrmGradInf + std::abs(proc_control_B.nrmGradInf);
        }
      }

      if (proc_control_B.idxEndIneq - 1 >= 0) {
        std::memcpy(&TrialState->xstar.data[0], &proc_control_B.m_data[0],
                    static_cast<uint32_T>(proc_control_B.idxEndIneq) * sizeof
                    (real_T));
      }

      proc_control_relaxed(Hessian, TrialState->grad.data, TrialState,
                           MeritFunction, memspace, WorkingSet, QRManager,
                           CholManager, QPObjective, qpoptions);
      proc_control_B.idxEndIneq = TrialState->delta_x.size[0];
      proc_control_B.idxStartIneq = TrialState->delta_x.size[0];
      if (proc_control_B.idxStartIneq - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_h[0], &TrialState->delta_x.data[0],
                    static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                    (real_T));
      }

      proc_control_B.idxStartIneq = static_cast<uint16_T>(proc_control_B.nVar);
      if (proc_control_B.idxStartIneq - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_h[0], &TrialState->xstar.data[0],
                    static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                    (real_T));
      }

      if (proc_control_B.idxEndIneq - 1 >= 0) {
        std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_h[0],
                    static_cast<uint32_T>(proc_control_B.idxEndIneq) * sizeof
                    (real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_soc(Hessian, TrialState->grad.data, TrialState,
        memspace, WorkingSet, QRManager, CholManager, QPObjective, qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_B.idxStartIneq = static_cast<uint16_T>(proc_control_B.nVar);
        for (proc_control_B.k_g = 0; proc_control_B.k_g <
             proc_control_B.idxStartIneq; proc_control_B.k_g++) {
          TrialState->delta_x.data[proc_control_B.k_g] = TrialState->
            xstar.data[proc_control_B.k_g] + TrialState->
            socDirection.data[proc_control_B.k_g];
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_B.nrmGradInf = 0.0;
        proc_control_B.nrmDirInf = 1.0;
        for (proc_control_B.k_g = 0; proc_control_B.k_g < 139;
             proc_control_B.k_g++) {
          proc_control_B.nrmGradInf = std::fmax(proc_control_B.nrmGradInf, std::
            abs(TrialState->grad.data[proc_control_B.k_g]));
          proc_control_B.nrmDirInf = std::fmax(proc_control_B.nrmDirInf, std::
            abs(TrialState->xstar.data[proc_control_B.k_g]));
        }

        proc_control_B.nrmGradInf = std::fmax(2.2204460492503131E-16,
          proc_control_B.nrmGradInf / proc_control_B.nrmDirInf);
        for (proc_control_B.k_g = 0; proc_control_B.k_g < 139;
             proc_control_B.k_g++) {
          proc_control_B.idxEndIneq = 139 * proc_control_B.k_g;
          for (proc_control_B.idxStartIneq = 0; proc_control_B.idxStartIneq <
               proc_control_B.k_g; proc_control_B.idxStartIneq++) {
            Hessian[proc_control_B.idxEndIneq + proc_control_B.idxStartIneq] =
              0.0;
          }

          proc_control_B.idxStartIneq_tmp = 139 * proc_control_B.k_g +
            proc_control_B.k_g;
          Hessian[proc_control_B.idxStartIneq_tmp] = proc_control_B.nrmGradInf;
          proc_control_B.idxEndIneq = 137 - proc_control_B.k_g;
          if (proc_control_B.idxEndIneq >= 0) {
            std::memset(&Hessian[proc_control_B.idxStartIneq_tmp + 1], 0,
                        static_cast<uint32_T>(((proc_control_B.idxEndIneq +
              proc_control_B.idxStartIneq_tmp) - proc_control_B.idxStartIneq_tmp)
              + 1) * sizeof(real_T));
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_B.idxEndIneq = TrialState->delta_x.size[0];
    proc_control_B.idxStartIneq = TrialState->delta_x.size[0];
    if (proc_control_B.idxStartIneq - 1 >= 0) {
      std::memcpy(&proc_control_B.m_data[0], &TrialState->delta_x.data[0],
                  static_cast<uint32_T>(proc_control_B.idxStartIneq) * sizeof
                  (real_T));
    }

    proc_control_B.k_g = static_cast<uint16_T>(WorkingSet->sizes[3]);
    for (proc_control_B.nVar = 0; proc_control_B.nVar < proc_control_B.k_g;
         proc_control_B.nVar++) {
      proc_control_B.nrmDirInf = proc_control_B.m_data[WorkingSet->
        indexLB.data[proc_control_B.nVar] - 1];
      proc_control_B.nrmGradInf = (TrialState->xstarsqp[WorkingSet->
        indexLB.data[proc_control_B.nVar] - 1] + proc_control_B.nrmDirInf) -
        lb[WorkingSet->indexLB.data[proc_control_B.nVar] - 1];
      if (proc_control_B.nrmGradInf < 0.0) {
        proc_control_B.m_data[WorkingSet->indexLB.data[proc_control_B.nVar] - 1]
          = proc_control_B.nrmDirInf - proc_control_B.nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_B.nVar] - 1]
          -= proc_control_B.nrmGradInf;
      }
    }

    if (proc_control_B.idxEndIneq - 1 >= 0) {
      std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.m_data[0],
                  static_cast<uint32_T>(proc_control_B.idxEndIneq) * sizeof
                  (real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_outputBounds_k(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  int32_T i;
  int32_T k;
  int32_T tmp_size_idx_0;
  boolean_T exitg1;
  boolean_T y;
  for (i = 0; i < 130; i++) {
    proc_control_B.bv1[i] = std::isinf(runtimedata_OutputMin[i]);
  }

  proc_control_all(proc_control_B.bv1, proc_control_B.x_j);
  y = true;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 13)) {
    if (!proc_control_B.x_j[k]) {
      y = false;
      exitg1 = true;
    } else {
      k++;
    }
  }

  if (y) {
    for (i = 0; i < 130; i++) {
      proc_control_B.bv1[i] = std::isinf(runtimedata_OutputMax[i]);
    }

    proc_control_all(proc_control_B.bv1, proc_control_B.x_j);
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 13)) {
      if (!proc_control_B.x_j[k]) {
        y = false;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (i = 0; i < 260; i++) {
      proc_control_B.b_c[i] = 0.0;
      proc_control_B.icf[i] = true;
    }

    for (i = 0; i < 13; i++) {
      proc_control_B.ic_j[i] = static_cast<real_T>(i) + 1.0;
    }

    for (k = 0; k < 10; k++) {
      for (i = 0; i < 13; i++) {
        proc_control_B.runtimedata_OutputMin = runtimedata_OutputMin[10 * i + k];
        proc_control_B.icf[static_cast<int32_T>(proc_control_B.ic_j[i]) - 1] =
          ((!std::isinf(proc_control_B.runtimedata_OutputMin)) && (!std::isnan
            (proc_control_B.runtimedata_OutputMin)));
      }

      for (i = 0; i < 13; i++) {
        proc_control_B.runtimedata_OutputMin = proc_control_B.ic_j[i];
        proc_control_B.runtimedata_OutputMax = runtimedata_OutputMax[10 * i + k];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax)));
        proc_control_B.ic[i] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin) - 1;
        proc_control_B.ic[i + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1;
      }

      for (i = 0; i < 26; i++) {
        proc_control_B.icf_h[i] = proc_control_B.icf[proc_control_B.ic[i]];
      }

      if (proc_control_any(proc_control_B.icf_h)) {
        for (i = 0; i < 13; i++) {
          proc_control_B.b_c[static_cast<int32_T>(proc_control_B.ic_j[i]) - 1] =
            (runtimedata_OutputMin[10 * i + k] - e) - X[(11 * i + k) + 1];
        }

        for (i = 0; i < 13; i++) {
          proc_control_B.b_c[static_cast<int32_T>(proc_control_B.ic_j[i] + 13.0)
            - 1] = (X[(11 * i + k) + 1] - runtimedata_OutputMax[10 * i + k]) - e;
        }
      }

      for (i = 0; i < 13; i++) {
        proc_control_B.ic_j[i] += 26.0;
      }
    }

    k = 0;
    for (i = 0; i < 260; i++) {
      if (proc_control_B.icf[i]) {
        k++;
      }
    }

    tmp_size_idx_0 = k;
    k = 0;
    for (i = 0; i < 260; i++) {
      if (proc_control_B.icf[i]) {
        proc_control_B.tmp_data_gl[k] = static_cast<int16_T>(i);
        k++;
      }
    }

    c_size[0] = tmp_size_idx_0;
    c_size[1] = 1;
    for (i = 0; i < tmp_size_idx_0; i++) {
      c_data[i] = proc_control_B.b_c[proc_control_B.tmp_data_gl[i]];
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_stateEvolution_f(const real_T X[143], const
  real_T U[88], real_T c[130])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_B.ic_c[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  i_0 = 0;
  for (i_1 = 0; i_1 < 8; i_1++) {
    i = 0;
    for (i_2 = 0; i_2 < 11; i_2++) {
      proc_control_B.b_U_b[i + i_1] = U[i_2 + i_0];
      i += 8;
    }

    i_0 += 11;
  }

  i_0 = 0;
  for (i_2 = 0; i_2 < 11; i_2++) {
    i_1 = 0;
    for (i = 0; i < 13; i++) {
      proc_control_B.b_X_o[i + i_0] = X[i_1 + i_2];
      i_1 += 11;
    }

    i_0 += 13;
  }

  for (i = 0; i < 10; i++) {
    i_0 = i << 3;
    proc_control_AUV8QuatSimFcn(&proc_control_B.b_X_o[13 * i],
      &proc_control_B.b_U_b[i_0], proc_control_B.dv18);
    i_1 = (i + 1) * 13;
    proc_control_AUV8QuatSimFcn(&proc_control_B.b_X_o[i_1],
      &proc_control_B.b_U_b[i_0], proc_control_B.dv19);
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.ic_gp = proc_control_B.ic_c[i_0];
      c[static_cast<int32_T>(proc_control_B.ic_gp) - 1] = (proc_control_B.b_X_o
        [13 * i + i_0] + (proc_control_B.dv18[i_0] + proc_control_B.dv19[i_0]) *
        0.05) - proc_control_B.b_X_o[i_1 + i_0];
      proc_control_B.ic_c[i_0] = proc_control_B.ic_gp + 13.0;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_contr_c4_mpclib_anonFcn2_n(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[139], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130])
{
  int32_T loop_ub;
  int32_T loop_ub_0;
  boolean_T sizes_idx_1_tmp;
  proc_control_getXUe(z, runtimedata_x, proc_control_B.X_a, proc_control_B.U_h,
                      &proc_control_B.e_d);
  proc_control_outputBounds_k(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_a, proc_control_B.e_d, proc_control_B.varargin_1_data_g,
    proc_control_B.varargin_1_size);
  sizes_idx_1_tmp = ((proc_control_B.varargin_1_size[0] != 0) &&
                     (proc_control_B.varargin_1_size[1] != 0));
  if (!sizes_idx_1_tmp) {
    proc_control_B.sizes[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size[0]);
  } else if (sizes_idx_1_tmp) {
    proc_control_B.sizes[0] = static_cast<int16_T>
      (proc_control_B.varargin_1_size[0]);
  } else {
    proc_control_B.sizes[0] = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes[0];
  varargout_1_size[1] = sizes_idx_1_tmp;
  loop_ub = sizes_idx_1_tmp;
  for (proc_control_B.i3 = 0; proc_control_B.i3 < loop_ub; proc_control_B.i3++)
  {
    loop_ub_0 = proc_control_B.sizes[0];
    if (loop_ub_0 - 1 >= 0) {
      std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_g[0],
                  static_cast<uint32_T>(loop_ub_0) * sizeof(real_T));
    }
  }

  proc_control_stateEvolution_f(proc_control_B.X_a, proc_control_B.U_h,
    varargout_2);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_evalObjAndConstr(int32_T
  obj_next_next_next_next_next_b_, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *obj_next_next_next_next_next_ne, const s_xJmQKnCTzvv6aUzMZcIqsF_proc_T
  *obj_next_next_next_next_next__0, const real_T x[139], real_T
  Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130], real_T *fval,
  int32_T *status)
{
  boolean_T tmp;
  proc_control_getXUe(x, obj_next_next_next_next_next__0->runtimedata.x,
                      proc_control_B.X_c, proc_control_B.U_f,
                      &proc_control_B.e_j5);
  proc_control_B.fs = 0.0;
  proc_control_B.i_kt = 0;
  for (proc_control_B.i_ej = 0; proc_control_B.i_ej < 11; proc_control_B.i_ej++)
  {
    proc_control_B.yk = 0;
    for (proc_control_B.ineqRange_size_idx_1 = 0;
         proc_control_B.ineqRange_size_idx_1 < 13;
         proc_control_B.ineqRange_size_idx_1++) {
      proc_control_B.b_X[proc_control_B.ineqRange_size_idx_1 +
        proc_control_B.i_kt] = proc_control_B.X_c[proc_control_B.yk +
        proc_control_B.i_ej];
      proc_control_B.yk += 11;
    }

    proc_control_B.i_kt += 13;
  }

  proc_control_B.i_kt = 0;
  for (proc_control_B.yk = 0; proc_control_B.yk < 8; proc_control_B.yk++) {
    proc_control_B.ineqRange_size_idx_1 = 0;
    for (proc_control_B.i_ej = 0; proc_control_B.i_ej < 11; proc_control_B.i_ej
         ++) {
      proc_control_B.b_U[proc_control_B.ineqRange_size_idx_1 + proc_control_B.yk]
        = proc_control_B.U_f[proc_control_B.i_ej + proc_control_B.i_kt];
      proc_control_B.ineqRange_size_idx_1 += 8;
    }

    proc_control_B.i_kt += 11;
  }

  for (proc_control_B.i_ej = 0; proc_control_B.i_ej < 10; proc_control_B.i_ej++)
  {
    proc_control_B.wtYerr = 0.0;
    for (proc_control_B.i_kt = 0; proc_control_B.i_kt < 13; proc_control_B.i_kt
         ++) {
      proc_control_B.yk = 10 * proc_control_B.i_kt + proc_control_B.i_ej;
      proc_control_B.wtYerr_i = (proc_control_B.b_X[(proc_control_B.i_ej + 1) *
        13 + proc_control_B.i_kt] -
        obj_next_next_next_next_next__0->runtimedata.ref[proc_control_B.yk]) *
        obj_next_next_next_next_next__0->
        runtimedata.OutputWeights[proc_control_B.yk];
      proc_control_B.wtYerr += proc_control_B.wtYerr_i * proc_control_B.wtYerr_i;
    }

    proc_control_B.fs += proc_control_B.wtYerr;
    std::memcpy(&proc_control_B.umvk[0], &proc_control_B.b_U[proc_control_B.i_ej
                << 3], sizeof(real_T) << 3U);
    if (proc_control_B.i_ej + 1 == 1) {
      for (proc_control_B.i_kt = 0; proc_control_B.i_kt < 8; proc_control_B.i_kt
           ++) {
        proc_control_B.duk[proc_control_B.i_kt] =
          proc_control_B.umvk[proc_control_B.i_kt] -
          obj_next_next_next_next_next__0->
          runtimedata.lastMV[proc_control_B.i_kt];
      }
    } else {
      for (proc_control_B.i_kt = 0; proc_control_B.i_kt < 8; proc_control_B.i_kt
           ++) {
        proc_control_B.duk[proc_control_B.i_kt] =
          proc_control_B.umvk[proc_control_B.i_kt] - proc_control_B.b_U
          [((proc_control_B.i_ej - 1) << 3) + proc_control_B.i_kt];
      }
    }

    proc_control_B.wtYerr = 0.0;
    proc_control_B.wtYerr_i = 0.0;
    for (proc_control_B.i_kt = 0; proc_control_B.i_kt < 8; proc_control_B.i_kt++)
    {
      proc_control_B.yk = 10 * proc_control_B.i_kt + proc_control_B.i_ej;
      proc_control_B.umvk_a = (proc_control_B.umvk[proc_control_B.i_kt] -
        obj_next_next_next_next_next__0->
        runtimedata.MVScaledTarget[proc_control_B.yk]) *
        obj_next_next_next_next_next__0->runtimedata.MVWeights[proc_control_B.yk];
      proc_control_B.umvk[proc_control_B.i_kt] = proc_control_B.umvk_a;
      proc_control_B.duk_h =
        obj_next_next_next_next_next__0->
        runtimedata.MVRateWeights[proc_control_B.yk] *
        proc_control_B.duk[proc_control_B.i_kt];
      proc_control_B.duk[proc_control_B.i_kt] = proc_control_B.duk_h;
      proc_control_B.wtYerr += proc_control_B.umvk_a * proc_control_B.umvk_a;
      proc_control_B.wtYerr_i += proc_control_B.duk_h * proc_control_B.duk_h;
    }

    proc_control_B.fs = (proc_control_B.fs + proc_control_B.wtYerr) +
      proc_control_B.wtYerr_i;
  }

  *fval = 100000.0 * proc_control_B.e_j5 * proc_control_B.e_j5 +
    proc_control_B.fs;
  tmp = std::isnan(*fval);
  if (std::isinf(*fval) || tmp) {
    if (tmp) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    if (obj_next_next_next_next_next_b_ - 1 < 0) {
      proc_control_B.i_kt = 0;
    } else {
      proc_control_B.i_kt = static_cast<uint16_T>
        (obj_next_next_next_next_next_b_ - 1) + 1;
    }

    proc_control_B.ineqRange_size_idx_1 = proc_control_B.i_kt;
    if (proc_control_B.i_kt > 0) {
      proc_control_B.ineqRange_data[0] = 0;
      proc_control_B.yk = 0;
      for (proc_control_B.i_ej = 2; proc_control_B.i_ej <= proc_control_B.i_kt;
           proc_control_B.i_ej++) {
        proc_control_B.yk++;
        proc_control_B.ineqRange_data[proc_control_B.i_ej - 1] =
          proc_control_B.yk;
      }
    }

    proc_control_B.i_ej = proc_control_B.i_kt - 1;
    for (proc_control_B.i_kt = 0; proc_control_B.i_kt <= proc_control_B.i_ej;
         proc_control_B.i_kt++) {
      proc_control_B.ineqRange_data[proc_control_B.i_kt] += ineq0;
    }

    proc_contr_c4_mpclib_anonFcn2_n(obj_next_next_next_next_next_ne->x,
      obj_next_next_next_next_next_ne->OutputMin,
      obj_next_next_next_next_next_ne->OutputMax, x, proc_control_B.b_data_f,
      proc_control_B.b_size, proc_control_B.c);
    for (proc_control_B.i_kt = 0; proc_control_B.i_kt <
         proc_control_B.ineqRange_size_idx_1; proc_control_B.i_kt++) {
      Cineq_workspace_data[proc_control_B.ineqRange_data[proc_control_B.i_kt] -
        1] = proc_control_B.b_data_f[proc_control_B.i_kt];
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.c[0], 130U * sizeof(real_T));
    *status = proc_contr_checkVectorNonFinite(obj_next_next_next_next_next_b_,
      Cineq_workspace_data, ineq0);
    if (*status == 1) {
      *status = proc_con_checkVectorNonFinite_a(Ceq_workspace);
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_con_computeLinearResiduals(const real_T x[139], int32_T
  nVar, real_T workspaceIneq_data[], const int32_T workspaceIneq_size[1],
  int32_T mLinIneq, const real_T AineqT_data[], const real_T bineq_data[],
  int32_T ldAi)
{
  if (mLinIneq > 0) {
    int32_T b_tmp;
    int32_T e;
    int32_T loop_ub;
    loop_ub = workspaceIneq_size[0];
    if (loop_ub - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_bj[0], &workspaceIneq_data[0],
                  static_cast<uint32_T>(loop_ub) * sizeof(real_T));
    }

    b_tmp = static_cast<uint16_T>(mLinIneq);
    if (static_cast<uint16_T>(mLinIneq) - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_bj[0], &bineq_data[0],
                  static_cast<uint16_T>(mLinIneq) * sizeof(real_T));
    }

    if (loop_ub - 1 >= 0) {
      std::memcpy(&workspaceIneq_data[0], &proc_control_B.y_data_bj[0],
                  static_cast<uint32_T>(loop_ub) * sizeof(real_T));
    }

    for (int32_T k{0}; k < b_tmp; k++) {
      workspaceIneq_data[k] = -workspaceIneq_data[k];
    }

    b_tmp = 0;
    e = (mLinIneq - 1) * ldAi + 1;
    for (int32_T k{1}; ldAi < 0 ? k >= e : k <= e; k += ldAi) {
      real_T c;
      int32_T f;
      c = 0.0;
      f = (k + nVar) - 1;
      for (loop_ub = k; loop_ub <= f; loop_ub++) {
        c += AineqT_data[loop_ub - 1] * x[loop_ub - k];
      }

      workspaceIneq_data[b_tmp] += c;
      b_tmp++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
real_T proc_control::proc_control_computeMeritFcn(real_T obj_penaltyParam,
  real_T fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T val;
  if (evalWellDefined) {
    real_T constrViolationEq;
    real_T constrViolationIneq;
    int32_T k;
    constrViolationEq = 0.0;
    for (k = 0; k < 130; k++) {
      constrViolationEq += std::abs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    k = static_cast<uint16_T>(mIneq);
    for (int32_T idx{0}; idx < k; idx++) {
      real_T Cineq_workspace;
      Cineq_workspace = Cineq_workspace_data[idx];
      if (Cineq_workspace > 0.0) {
        constrViolationIneq += Cineq_workspace;
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, int32_T
  FcnEvaluator_next_next_next_nex, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_next_next_next_n_0, const s_xJmQKnCTzvv6aUzMZcIqsF_proc_T
  *FcnEvaluator_next_next_next_n_1, boolean_T socTaken, real_T *alpha, int32_T
  *exitflag)
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T tooSmallX;
  proc_control_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_B.loop_ub_j = TrialState->searchDir.size[0];
  proc_control_B.loop_ub_i = TrialState->searchDir.size[0];
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_j[0], &TrialState->searchDir.data[0],
                static_cast<uint32_T>(proc_control_B.loop_ub_i) * sizeof(real_T));
  }

  proc_control_B.loop_ub_i = static_cast<uint16_T>(WorkingSet_nVar);
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_j[0], &TrialState->delta_x.data[0],
                static_cast<uint32_T>(proc_control_B.loop_ub_i) * sizeof(real_T));
  }

  if (proc_control_B.loop_ub_j - 1 >= 0) {
    std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_j[0],
                static_cast<uint32_T>(proc_control_B.loop_ub_j) * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 13900) {
      if ((*evalWellDefined) && (proc_control_B.phi_alpha <= *alpha * 0.0001 *
           MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        *alpha *= 0.7;
        for (proc_control_B.loop_ub_j = 0; proc_control_B.loop_ub_j <
             proc_control_B.loop_ub_i; proc_control_B.loop_ub_j++) {
          TrialState->delta_x.data[proc_control_B.loop_ub_j] = *alpha *
            TrialState->xstar.data[proc_control_B.loop_ub_j];
        }

        if (socTaken) {
          proc_control_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_B.phi_alpha == 0.0))) {
            for (proc_control_B.loop_ub_j = 0; proc_control_B.loop_ub_j <
                 WorkingSet_nVar; proc_control_B.loop_ub_j++) {
              TrialState->delta_x.data[proc_control_B.loop_ub_j] +=
                proc_control_B.phi_alpha * TrialState->
                socDirection.data[proc_control_B.loop_ub_j];
            }
          }
        }

        tooSmallX = true;
        proc_control_B.loop_ub_j = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.loop_ub_j <= static_cast<uint16_T>
                             (WorkingSet_nVar) - 1)) {
          if (0.1 * std::fmax(1.0, std::abs(TrialState->
                xstarsqp[proc_control_B.loop_ub_j])) <= std::abs
              (TrialState->delta_x.data[proc_control_B.loop_ub_j])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_B.loop_ub_j++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          for (proc_control_B.loop_ub_j = 0; proc_control_B.loop_ub_j <
               proc_control_B.loop_ub_i; proc_control_B.loop_ub_j++) {
            TrialState->xstarsqp[proc_control_B.loop_ub_j] =
              TrialState->xstarsqp_old[proc_control_B.loop_ub_j] +
              TrialState->delta_x.data[proc_control_B.loop_ub_j];
          }

          proc_control_evalObjAndConstr(FcnEvaluator_next_next_next_nex,
            FcnEvaluator_next_next_next_n_0, FcnEvaluator_next_next_next_n_1,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &TrialState->sqpFval, &proc_control_B.loop_ub_j);
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, TrialState->cIneq.size,
            proc_control_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_B.loop_ub_j == 1);
          proc_control_B.phi_alpha = proc_control_computeMeritFcn
            (MeritFunction_penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_driver(const real_T bineq_data[], const real_T
  lb[139], s_KPwpEZDfdzkqudEdVwjGjF_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  coder_internal_stickyStruct_2_T *FcnEvaluator, s_z8miyzCNLMZx998HtZciUB_proc_T
  *memspace, s_PAtG1CW05sRYOWrqzwRQyC_proc_T *WorkingSet,
  s_o1KzuWoPqzc62zOgqamCNH_proc_T *QRManager, s_962gqykB8vLiRVqsLdGQIG_proc_T
  *CholManager, s_bsf2Fsale81D2LTDCKuKhG_proc_T *QPObjective, const int32_T
  fscales_lineq_constraint_size[1], const int32_T fscales_cineq_constraint_size
  [1], real_T Hessian[19321])
{
  boolean_T isFeasible;
  static const int8_T ab[19321]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const char_T x[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  int32_T exitg1;
  for (proc_control_B.u1 = 0; proc_control_B.u1 < 19321; proc_control_B.u1++) {
    Hessian[proc_control_B.u1] = ab[proc_control_B.u1];
  }

  proc_control_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_B.mFixed = WorkingSet->sizes[0];
  proc_control_B.mIneq_b = WorkingSet->sizes[2];
  proc_control_B.mLB = WorkingSet->sizes[3];
  proc_control_B.mUB = WorkingSet->sizes[4];
  proc_control_B.mLinIneq_tmp = WorkingSet->sizes[2] - TrialState->mNonlinIneq;
  proc_control_B.u1 = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
                       WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar >= proc_control_B.u1) {
    proc_control_B.u1 = WorkingSet->nVar;
  }

  proc_control_B.qpoptions_MaxIterations = 10 * proc_control_B.u1;
  TrialState->steplength = 1.0;
  proc_control_B.Flags.fevalOK = true;
  proc_control_B.Flags.stepAccepted = false;
  proc_control_B.Flags.failedLineSearch = false;
  proc_control_B.Flags.stepType = 1;
  proc_control_B.u1_tmp = static_cast<uint16_T>((((WorkingSet->sizes[0] +
    WorkingSet->sizes[2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 130);
  if (proc_control_B.u1_tmp - 1 >= 0) {
    std::memcpy(&TrialState->lambdaStopTest.data[0], &TrialState->
                lambdasqp.data[0], static_cast<uint32_T>(proc_control_B.u1_tmp) *
                sizeof(real_T));
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  if (WorkingSet->nVar < 1) {
    proc_control_B.idx_max = 0;
  } else {
    proc_control_B.idx_max = 1;
    if (WorkingSet->nVar > 1) {
      proc_control_B.smax = std::abs(TrialState->grad.data[0]);
      for (proc_control_B.k_f = 2; proc_control_B.k_f <=
           proc_control_B.nVar_tmp_tmp; proc_control_B.k_f++) {
        proc_control_B.s_n = std::abs(TrialState->grad.data[proc_control_B.k_f -
          1]);
        if (proc_control_B.s_n > proc_control_B.smax) {
          proc_control_B.idx_max = proc_control_B.k_f;
          proc_control_B.smax = proc_control_B.s_n;
        }
      }
    }
  }

  proc_control_B.smax = std::fmax(1.0, std::abs(TrialState->
    grad.data[proc_control_B.idx_max - 1]));
  if (std::isinf(proc_control_B.smax)) {
    proc_control_B.smax = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, proc_control_B.mLinIneq_tmp, TrialState->mNonlinIneq,
     TrialState->cIneq.data, TrialState->cEq, WorkingSet->indexLB.data,
     WorkingSet->sizes[3], lb, WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  MeritFunction->feasRelativeFactor = std::fmax(1.0,
    MeritFunction->nlpPrimalFeasError);
  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &proc_control_B.Flags.gradOK, &MeritFunction->nlpDualFeasError);
  if (!proc_control_B.Flags.gradOK) {
    proc_control_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      0.0);
    if (proc_control_B.u1_tmp - 1 >= 0) {
      std::memcpy(&TrialState->lambdaStopTestPrev.data[0],
                  &TrialState->lambdaStopTest.data[0], static_cast<uint32_T>
                  (proc_control_B.u1_tmp) * sizeof(real_T));
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_B.smax)) {
      proc_control_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
    WorkingSet->ldA);
  TrialState->sqpFval_old = TrialState->sqpFval;
  for (proc_control_B.k_f = 0; proc_control_B.k_f < 139; proc_control_B.k_f++) {
    TrialState->xstarsqp_old[proc_control_B.k_f] = TrialState->
      xstarsqp[proc_control_B.k_f];
    TrialState->grad_old.data[proc_control_B.k_f] = TrialState->
      grad.data[proc_control_B.k_f];
  }

  proc_control_B.idx_max = TrialState->cIneq_old.size[0];
  proc_control_B.k_f = TrialState->cIneq_old.size[0];
  if (proc_control_B.k_f - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq_old.data[0],
                static_cast<uint32_T>(proc_control_B.k_f) * sizeof(real_T));
  }

  proc_control_B.b_nVar_tmp = static_cast<uint16_T>(TrialState->mIneq);
  if (proc_control_B.b_nVar_tmp - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0],
                static_cast<uint32_T>(proc_control_B.b_nVar_tmp) * sizeof(real_T));
  }

  if (proc_control_B.idx_max - 1 >= 0) {
    std::memcpy(&TrialState->cIneq_old.data[0], &proc_control_B.y_data_n[0],
                static_cast<uint32_T>(proc_control_B.idx_max) * sizeof(real_T));
  }

  std::memcpy(&TrialState->cEq_old[0], &TrialState->cEq[0], 130U * sizeof(real_T));
  if (!proc_control_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_B.Flags.done) {
    if ((!proc_control_B.Flags.stepAccepted) &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.expl_temp_lm.IterDisplayQP = false;
      proc_control_B.expl_temp_lm.RemainFeasible = false;
      proc_control_B.expl_temp_lm.ProbRelTolFactor = 1.0;
      proc_control_B.expl_temp_lm.ConstrRelTolFactor = 1.0;
      proc_control_B.expl_temp_lm.PricingTolerance = 0.0;
      proc_control_B.expl_temp_lm.ObjectiveLimit = (rtMinusInf);
      proc_control_B.expl_temp_lm.ConstraintTolerance = 0.02;
      proc_control_B.expl_temp_lm.OptimalityTolerance = 2.2204460492503131E-14;
      proc_control_B.expl_temp_lm.StepTolerance = 1.0E-6;
      proc_control_B.expl_temp_lm.MaxIterations =
        proc_control_B.qpoptions_MaxIterations;
      for (proc_control_B.u1 = 0; proc_control_B.u1 < 7; proc_control_B.u1++) {
        proc_control_B.expl_temp_lm.SolverName[proc_control_B.u1] =
          x[proc_control_B.u1];
      }
    }

    do {
      exitg1 = 0;
      isFeasible = !proc_control_B.Flags.failedLineSearch;
      if ((!proc_control_B.Flags.stepAccepted) && isFeasible) {
        if (proc_control_B.Flags.stepType != 3) {
          proc_c_updateWorkingSetForNewQP(TrialState->xstarsqp, WorkingSet,
            proc_control_B.mIneq_b, TrialState->mNonlinIneq,
            TrialState->cIneq.data, TrialState->cEq, proc_control_B.mLB, lb,
            proc_control_B.mUB, proc_control_B.mFixed);
        }

        proc_control_B.expl_temp_k = proc_control_B.expl_temp_lm;
        proc_control_B.Flags.stepAccepted = proc_control_step_k
          (&proc_control_B.Flags.stepType, Hessian, lb, TrialState,
           MeritFunction, memspace, WorkingSet, QRManager, CholManager,
           QPObjective, &proc_control_B.expl_temp_k);
        if (proc_control_B.Flags.stepAccepted) {
          proc_control_B.b_nVar = static_cast<uint16_T>
            (proc_control_B.nVar_tmp_tmp);
          for (proc_control_B.k_f = 0; proc_control_B.k_f <
               proc_control_B.b_nVar; proc_control_B.k_f++) {
            TrialState->xstarsqp[proc_control_B.k_f] += TrialState->
              delta_x.data[proc_control_B.k_f];
          }

          proc_control_evalObjAndConstr
            (FcnEvaluator->next.next.next.next.next.b_value,
             &FcnEvaluator->next.next.next.next.next.next.next.b_value.workspace.runtimedata,
             &FcnEvaluator->next.next.next.next.next.next.next.next.b_value.workspace,
             TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
             TrialState->cEq, &TrialState->sqpFval, &proc_control_B.k_f);
          proc_control_B.Flags.fevalOK = (proc_control_B.k_f == 1);
          TrialState->FunctionEvaluations++;
          proc_con_computeLinearResiduals(TrialState->xstarsqp,
            proc_control_B.nVar_tmp_tmp, TrialState->cIneq.data,
            TrialState->cIneq.size, proc_control_B.mLinIneq_tmp,
            WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
          MeritFunction->phiFullStep = proc_control_computeMeritFcn
            (MeritFunction->penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, proc_control_B.mIneq_b, TrialState->cEq,
             proc_control_B.Flags.fevalOK);
        }

        if ((proc_control_B.Flags.stepType == 1) &&
            proc_control_B.Flags.stepAccepted && proc_control_B.Flags.fevalOK &&
            (MeritFunction->phi < MeritFunction->phiFullStep) &&
            (TrialState->sqpFval < TrialState->sqpFval_old)) {
          proc_control_B.Flags.stepType = 3;
          proc_control_B.Flags.stepAccepted = false;
        } else {
          proc_control_linesearch(&proc_control_B.Flags.fevalOK, bineq_data,
            WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data,
            TrialState, MeritFunction->penaltyParam, MeritFunction->phi,
            MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
            FcnEvaluator->next.next.next.next.next.b_value,
            &FcnEvaluator->next.next.next.next.next.next.next.b_value.workspace.runtimedata,
            &FcnEvaluator->next.next.next.next.next.next.next.next.b_value.workspace,
            ((proc_control_B.Flags.stepType == 3) &&
             proc_control_B.Flags.stepAccepted), &proc_control_B.smax,
            &proc_control_B.k_f);
          TrialState->steplength = proc_control_B.smax;
          if (proc_control_B.k_f > 0) {
            proc_control_B.Flags.stepAccepted = true;
          } else {
            proc_control_B.Flags.failedLineSearch = true;
          }
        }
      } else {
        exitg1 = 1;
      }
    } while (exitg1 == 0);

    if (proc_control_B.Flags.stepAccepted && isFeasible) {
      proc_control_B.b_nVar = static_cast<uint16_T>(proc_control_B.nVar_tmp_tmp);
      for (proc_control_B.k_f = 0; proc_control_B.k_f < proc_control_B.b_nVar;
           proc_control_B.k_f++) {
        TrialState->xstarsqp[proc_control_B.k_f] = TrialState->
          xstarsqp_old[proc_control_B.k_f] + TrialState->
          delta_x.data[proc_control_B.k_f];
      }

      for (proc_control_B.k_f = 0; proc_control_B.k_f < proc_control_B.u1_tmp;
           proc_control_B.k_f++) {
        proc_control_B.smax = TrialState->lambdasqp.data[proc_control_B.k_f];
        TrialState->lambdasqp.data[proc_control_B.k_f] =
          (TrialState->lambda.data[proc_control_B.k_f] - proc_control_B.smax) *
          TrialState->steplength + proc_control_B.smax;
      }

      TrialState->sqpFval_old = TrialState->sqpFval;
      for (proc_control_B.k_f = 0; proc_control_B.k_f < 139; proc_control_B.k_f
           ++) {
        TrialState->xstarsqp_old[proc_control_B.k_f] = TrialState->
          xstarsqp[proc_control_B.k_f];
        TrialState->grad_old.data[proc_control_B.k_f] = TrialState->
          grad.data[proc_control_B.k_f];
      }

      proc_control_B.idx_max = TrialState->cIneq_old.size[0];
      proc_control_B.k_f = TrialState->cIneq_old.size[0];
      if (proc_control_B.k_f - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq_old.data[0],
                    static_cast<uint32_T>(proc_control_B.k_f) * sizeof(real_T));
      }

      if (proc_control_B.b_nVar_tmp - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0],
                    static_cast<uint32_T>(proc_control_B.b_nVar_tmp) * sizeof
                    (real_T));
      }

      if (proc_control_B.idx_max - 1 >= 0) {
        std::memcpy(&TrialState->cIneq_old.data[0], &proc_control_B.y_data_n[0],
                    static_cast<uint32_T>(proc_control_B.idx_max) * sizeof
                    (real_T));
      }

      std::memcpy(&TrialState->cEq_old[0], &TrialState->cEq[0], 130U * sizeof
                  (real_T));
      proc_control_B.Flags.gradOK = true;
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->next.next.next.next.next.b_value,
         &FcnEvaluator->next.next.next.next.next.next.next.b_value.workspace.runtimedata,
         &FcnEvaluator->next.next.next.next.next.next.next.next.b_value.workspace,
         TrialState->xstarsqp, TrialState->grad.data, TrialState->cIneq.data,
         TrialState->iNonIneq0, TrialState->cEq, WorkingSet->Aineq.data,
         TrialState->iNonIneq0, WorkingSet->ldA, WorkingSet->Aeq.data,
         WorkingSet->ldA, &TrialState->sqpFval, &proc_control_B.k_f);
      TrialState->FunctionEvaluations++;
      proc_control_B.Flags.fevalOK = (proc_control_B.k_f == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      std::memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 139U *
                  sizeof(real_T));
      proc_control_B.idx_max = TrialState->cIneq.size[0];
      proc_control_B.k_f = TrialState->cIneq.size[0];
      if (proc_control_B.k_f - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0],
                    static_cast<uint32_T>(proc_control_B.k_f) * sizeof(real_T));
      }

      if (proc_control_B.b_nVar_tmp - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq_old.data[0],
                    static_cast<uint32_T>(proc_control_B.b_nVar_tmp) * sizeof
                    (real_T));
      }

      if (proc_control_B.idx_max - 1 >= 0) {
        std::memcpy(&TrialState->cIneq.data[0], &proc_control_B.y_data_n[0],
                    static_cast<uint32_T>(proc_control_B.idx_max) * sizeof
                    (real_T));
      }

      std::memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof
                  (real_T));
    }

    proc_control_test_exit(&proc_control_B.Flags, memspace, MeritFunction,
      fscales_lineq_constraint_size, fscales_cineq_constraint_size, WorkingSet,
      TrialState, QRManager, lb);
    if ((!proc_control_B.Flags.done) && proc_control_B.Flags.stepAccepted) {
      proc_control_B.Flags.stepAccepted = false;
      proc_control_B.Flags.stepType = 1;
      proc_control_B.Flags.failedLineSearch = false;
      proc_control_B.b_nVar = (proc_control_B.mFixed + TrialState->iNonIneq0) +
        129;
      proc_control_B.k_f = WorkingSet->ldA;
      proc_control_B.idx_max = static_cast<uint16_T>(proc_control_B.nVar_tmp_tmp);
      std::memcpy(&TrialState->delta_gradLag.data[0], &TrialState->grad.data[0],
                  static_cast<uint32_T>(proc_control_B.idx_max) * sizeof(real_T));
      if (proc_control_B.nVar_tmp_tmp >= 1) {
        for (proc_control_B.mLambda = 0; proc_control_B.mLambda <
             proc_control_B.nVar_tmp_tmp; proc_control_B.mLambda++) {
          TrialState->delta_gradLag.data[proc_control_B.mLambda] -=
            TrialState->grad_old.data[proc_control_B.mLambda];
        }
      }

      proc_control_B.ix_b = proc_control_B.mFixed;
      proc_control_B.c_ix_tmp = WorkingSet->ldA * 129 + 1;
      for (proc_control_B.mLambda = 1; proc_control_B.k_f < 0 ?
           proc_control_B.mLambda >= proc_control_B.c_ix_tmp :
           proc_control_B.mLambda <= proc_control_B.c_ix_tmp;
           proc_control_B.mLambda += proc_control_B.k_f) {
        proc_control_B.b_iy = (proc_control_B.mLambda +
          proc_control_B.nVar_tmp_tmp) - 1;
        for (proc_control_B.idx_max = proc_control_B.mLambda;
             proc_control_B.idx_max <= proc_control_B.b_iy;
             proc_control_B.idx_max++) {
          proc_control_B.u1 = proc_control_B.idx_max - proc_control_B.mLambda;
          TrialState->delta_gradLag.data[proc_control_B.u1] +=
            WorkingSet->Aeq.data[proc_control_B.idx_max - 1] *
            TrialState->lambdasqp.data[proc_control_B.ix_b];
        }

        proc_control_B.ix_b++;
      }

      proc_control_B.c_ix = proc_control_B.mFixed;
      for (proc_control_B.mLambda = 1; proc_control_B.k_f < 0 ?
           proc_control_B.mLambda >= proc_control_B.c_ix_tmp :
           proc_control_B.mLambda <= proc_control_B.c_ix_tmp;
           proc_control_B.mLambda += proc_control_B.k_f) {
        proc_control_B.b_iy = (proc_control_B.mLambda +
          proc_control_B.nVar_tmp_tmp) - 1;
        for (proc_control_B.idx_max = proc_control_B.mLambda;
             proc_control_B.idx_max <= proc_control_B.b_iy;
             proc_control_B.idx_max++) {
          proc_control_B.u1 = proc_control_B.idx_max - proc_control_B.mLambda;
          TrialState->delta_gradLag.data[proc_control_B.u1] +=
            TrialState->JacCeqTrans_old.data[proc_control_B.idx_max - 1] *
            -TrialState->lambdasqp.data[proc_control_B.c_ix];
        }

        proc_control_B.c_ix++;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_B.ix_b = (TrialState->iNonIneq0 - 1) * WorkingSet->ldA + 1;
        proc_control_B.c_ix = proc_control_B.b_nVar;
        proc_control_B.c_ix_tmp = (TrialState->mNonlinIneq - 1) *
          WorkingSet->ldA;
        proc_control_B.iy = proc_control_B.c_ix_tmp + proc_control_B.ix_b;
        for (proc_control_B.mLambda = proc_control_B.ix_b; proc_control_B.k_f <
             0 ? proc_control_B.mLambda >= proc_control_B.iy :
             proc_control_B.mLambda <= proc_control_B.iy; proc_control_B.mLambda
             += proc_control_B.k_f) {
          proc_control_B.b_iy = (proc_control_B.mLambda +
            proc_control_B.nVar_tmp_tmp) - 1;
          for (proc_control_B.idx_max = proc_control_B.mLambda;
               proc_control_B.idx_max <= proc_control_B.b_iy;
               proc_control_B.idx_max++) {
            proc_control_B.u1 = proc_control_B.idx_max - proc_control_B.mLambda;
            TrialState->delta_gradLag.data[proc_control_B.u1] +=
              WorkingSet->Aineq.data[proc_control_B.idx_max - 1] *
              TrialState->lambdasqp.data[proc_control_B.c_ix];
          }

          proc_control_B.c_ix++;
        }

        proc_control_B.idx_max = proc_control_B.b_nVar;
        proc_control_B.c_ix = proc_control_B.c_ix_tmp + 1;
        for (proc_control_B.b_nVar = 1; proc_control_B.k_f < 0 ?
             proc_control_B.b_nVar >= proc_control_B.c_ix :
             proc_control_B.b_nVar <= proc_control_B.c_ix; proc_control_B.b_nVar
             += proc_control_B.k_f) {
          proc_control_B.b_iy = (proc_control_B.b_nVar +
            proc_control_B.nVar_tmp_tmp) - 1;
          for (proc_control_B.mLambda = proc_control_B.b_nVar;
               proc_control_B.mLambda <= proc_control_B.b_iy;
               proc_control_B.mLambda++) {
            proc_control_B.u1 = proc_control_B.mLambda - proc_control_B.b_nVar;
            TrialState->delta_gradLag.data[proc_control_B.u1] +=
              TrialState->JacCineqTrans_old.data[proc_control_B.mLambda - 1] *
              -TrialState->lambdasqp.data[proc_control_B.idx_max];
          }

          proc_control_B.idx_max++;
        }
      }

      proc_control_saveJacobian(TrialState, proc_control_B.nVar_tmp_tmp,
        proc_control_B.mIneq_b, WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, WorkingSet->ldA);
      proc_control_BFGSUpdate(proc_control_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_float.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S217>/NLMPC'
void proc_control::proc_control_fmincon(const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *fun_workspace_runtimedata, const sumhYdZsdukPgvAXm7nzHOD_proc__T
  *fun_workspace_userdata, const real_T x0[139], const real_T Aineq_data[],
  const real_T bineq_data[], const int32_T bineq_size[1], const real_T lb[139],
  const s_qYIvDqP9yRqtt40IDZ89JG_proc_T *nonlcon_workspace_runtimedata, const
  sumhYdZsdukPgvAXm7nzHOD_proc__T *nonlcon_workspace_userdata, real_T x[139],
  real_T *fval, real_T *exitflag, real_T *output_iterations, real_T
  *output_funcCount, char_T output_algorithm[3], real_T *output_constrviolation,
  real_T *output_stepsize, real_T *output_lssteplength, real_T
  *output_firstorderopt)
{
  int16_T WorkingSet_tmp;
  proc_control_c4_mpclib_anonFcn2(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0, proc_control_B.Cineq_data,
    proc_control_B.Cineq_size, proc_control_B.Ceq,
    proc_control_B.JacCineqTrans_data, proc_control_B.JacCineqTrans_size,
    proc_control_B.JacCeqTrans);
  proc_control_B.mNonlinIneq = proc_control_B.Cineq_size[0] *
    proc_control_B.Cineq_size[1];
  proc_control_B.mIneq = bineq_size[0] + proc_control_B.mNonlinIneq;
  proc_control_B.mConstrMax = (proc_control_B.mIneq + proc_control_B.mIneq) +
    669;
  if (proc_control_B.mIneq + 400 >= proc_control_B.mConstrMax) {
    proc_control_B.maxDims = proc_control_B.mIneq + 400;
  } else {
    proc_control_B.maxDims = proc_control_B.mConstrMax;
  }

  proc_control_factoryConstruct(proc_control_B.mIneq + 400,
    proc_control_B.mConstrMax, proc_control_B.mIneq, proc_control_B.mNonlinIneq,
    &proc_control_B.TrialState);
  std::memcpy(&proc_control_B.TrialState.xstarsqp[0], &x0[0], 139U * sizeof
              (real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.b_value =
    proc_control_B.mNonlinIneq;
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.x
     [0], &nonlcon_workspace_runtimedata->x[0], 13U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.lastMV
     [0], &nonlcon_workspace_runtimedata->lastMV[0], sizeof(real_T) << 3U);
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ref
     [0], &nonlcon_workspace_runtimedata->ref[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputWeights
     [0], &nonlcon_workspace_runtimedata->OutputWeights[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVWeights
     [0], &nonlcon_workspace_runtimedata->MVWeights[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateWeights
     [0], &nonlcon_workspace_runtimedata->MVRateWeights[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ECRWeight
    = nonlcon_workspace_runtimedata->ECRWeight;
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMin
     [0], &nonlcon_workspace_runtimedata->OutputMin[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMax
     [0], &nonlcon_workspace_runtimedata->OutputMax[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMin
     [0], &nonlcon_workspace_runtimedata->StateMin[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMax
     [0], &nonlcon_workspace_runtimedata->StateMax[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMin
     [0], &nonlcon_workspace_runtimedata->MVMin[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMax
     [0], &nonlcon_workspace_runtimedata->MVMax[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMin
     [0], &nonlcon_workspace_runtimedata->MVRateMin[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMax
     [0], &nonlcon_workspace_runtimedata->MVRateMax[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVScaledTarget
     [0], &nonlcon_workspace_runtimedata->MVScaledTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.userdata
    = *nonlcon_workspace_userdata;
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.x
     [0], &fun_workspace_runtimedata->x[0], 13U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.lastMV
     [0], &fun_workspace_runtimedata->lastMV[0], sizeof(real_T) << 3U);
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ref
     [0], &fun_workspace_runtimedata->ref[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputWeights
     [0], &fun_workspace_runtimedata->OutputWeights[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVWeights
     [0], &fun_workspace_runtimedata->MVWeights[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateWeights
     [0], &fun_workspace_runtimedata->MVRateWeights[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.ECRWeight
    = fun_workspace_runtimedata->ECRWeight;
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMin
     [0], &fun_workspace_runtimedata->OutputMin[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.OutputMax
     [0], &fun_workspace_runtimedata->OutputMax[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMin
     [0], &fun_workspace_runtimedata->StateMin[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.StateMax
     [0], &fun_workspace_runtimedata->StateMax[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMin
     [0], &fun_workspace_runtimedata->MVMin[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVMax
     [0], &fun_workspace_runtimedata->MVMax[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMin
     [0], &fun_workspace_runtimedata->MVRateMin[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVRateMax
     [0], &fun_workspace_runtimedata->MVRateMax[0], 80U * sizeof(real_T));
  std::memcpy
    (&proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.runtimedata.MVScaledTarget
     [0], &fun_workspace_runtimedata->MVScaledTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace.userdata
    = *fun_workspace_userdata;
  proc_cont_factoryConstruct_p52k(proc_control_B.mIneq + 400,
    proc_control_B.QPObjective.grad.size, proc_control_B.QPObjective.Hx.size,
    &proc_control_B.QPObjective.hasLinear, &proc_control_B.QPObjective.nvar,
    &proc_control_B.QPObjective.maxVar, &proc_control_B.QPObjective.beta,
    &proc_control_B.QPObjective.rho, &proc_control_B.QPObjective.objtype,
    &proc_control_B.QPObjective.prev_objtype,
    &proc_control_B.QPObjective.prev_nvar,
    &proc_control_B.QPObjective.prev_hasLinear,
    &proc_control_B.QPObjective.gammaScalar);
  proc_control_B.QPObjective.nvar = 139;
  proc_control_B.QPObjective.hasLinear = true;
  proc_control_B.QPObjective.objtype = 3;
  proc_control_B.memspace.workspace_float.size[0] = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_float.size[1] = proc_control_B.mIneq + 400;
  proc_control_B.memspace.workspace_int.size[0] = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_sort.size[0] = proc_control_B.maxDims;
  proc_con_factoryConstruct_p52kz(proc_control_B.mIneq, proc_control_B.mIneq +
    400, proc_control_B.mConstrMax, &proc_control_B.WorkingSet);
  proc_control_B.k = -1;
  for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 < 139; proc_control_B.iEq0++)
  {
    proc_control_B.b_c_j = lb[proc_control_B.iEq0];
    if ((!std::isinf(proc_control_B.b_c_j)) && (!std::isnan(proc_control_B.b_c_j)))
    {
      proc_control_B.k++;
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.k] =
        proc_control_B.iEq0 + 1;
    }
  }

  proc_control_B.WorkingSet.mConstrMax = proc_control_B.mConstrMax;
  proc_control_B.iEq0 = proc_control_B.mIneq + proc_control_B.k;
  proc_control_B.WorkingSet.mConstr = proc_control_B.iEq0 + 131;
  proc_control_B.WorkingSet.mConstrOrig = proc_control_B.iEq0 + 131;
  proc_control_B.WorkingSet_tmp[0] = 0;
  proc_control_B.WorkingSet_tmp[1] = 130;
  proc_control_B.WorkingSet_tmp[2] = static_cast<int16_T>(proc_control_B.mIneq);
  proc_control_B.WorkingSet_tmp[3] = static_cast<int16_T>(proc_control_B.k + 1);
  proc_control_B.WorkingSet_tmp[4] = 0;
  for (proc_control_B.i_he = 0; proc_control_B.i_he < 5; proc_control_B.i_he++)
  {
    WorkingSet_tmp = proc_control_B.WorkingSet_tmp[proc_control_B.i_he];
    proc_control_B.WorkingSet.sizes[proc_control_B.i_he] = WorkingSet_tmp;
    proc_control_B.WorkingSet.sizesNormal[proc_control_B.i_he] = WorkingSet_tmp;
  }

  proc_control_B.WorkingSet.sizesPhaseOne[0] = 0;
  proc_control_B.WorkingSet.sizesPhaseOne[1] = 130;
  proc_control_B.WorkingSet.sizesPhaseOne[2] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.sizesPhaseOne[3] = proc_control_B.k + 2;
  proc_control_B.WorkingSet.sizesPhaseOne[4] = 0;
  proc_control_B.WorkingSet.sizesRegularized[0] = 0;
  proc_control_B.WorkingSet.sizesRegularized[1] = 130;
  proc_control_B.WorkingSet.sizesRegularized[2] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.sizesRegularized[3] = proc_control_B.iEq0 + 261;
  proc_control_B.WorkingSet.sizesRegularized[4] = 0;
  proc_control_B.WorkingSet.sizesRegPhaseOne[0] = 0;
  proc_control_B.WorkingSet.sizesRegPhaseOne[1] = 130;
  proc_control_B.WorkingSet.sizesRegPhaseOne[2] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.sizesRegPhaseOne[3] = proc_control_B.iEq0 + 262;
  proc_control_B.WorkingSet.sizesRegPhaseOne[4] = 0;
  proc_control_B.WorkingSet.isActiveIdxNormal[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxNormal[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxNormal[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxNormal[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxNormal[4] = proc_control_B.k + 1;
  proc_control_B.WorkingSet.isActiveIdxNormal[5] = 0;
  for (proc_control_B.i_he = 0; proc_control_B.i_he < 6; proc_control_B.i_he++)
  {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_he] =
      proc_control_B.WorkingSet.isActiveIdxNormal[proc_control_B.i_he];
  }

  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  for (proc_control_B.i_he = 0; proc_control_B.i_he < 6; proc_control_B.i_he++)
  {
    proc_control_B.WorkingSet.isActiveIdx[proc_control_B.i_he] =
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_he];
  }

  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[4] = proc_control_B.k + 2;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[5] = 0;
  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxNormal[proc_control_B.mConstrMax + 1] +=
      proc_control_B.WorkingSet.isActiveIdxNormal[proc_control_B.mConstrMax];
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  for (proc_control_B.i_he = 0; proc_control_B.i_he < 6; proc_control_B.i_he++)
  {
    proc_control_B.WorkingSet.isActiveIdxPhaseOne[proc_control_B.i_he] =
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_he];
  }

  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[4] = proc_control_B.iEq0 +
    261;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[5] = 0;
  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  for (proc_control_B.i_he = 0; proc_control_B.i_he < 6; proc_control_B.i_he++)
  {
    proc_control_B.WorkingSet.isActiveIdxRegularized[proc_control_B.i_he] =
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.i_he];
  }

  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[0] = 1;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[1] = 0;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[2] = 130;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[3] = proc_control_B.mIneq;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[4] = proc_control_B.iEq0 +
    262;
  proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[5] = 0;
  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 5;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax +
      1] +=
      proc_control_B.WorkingSet.isActiveIdxRegPhaseOne[proc_control_B.mConstrMax];
  }

  if (proc_control_B.mIneq > 0) {
    proc_control_B.mConstrMax = bineq_size[0];
    for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 <
         proc_control_B.mConstrMax; proc_control_B.iEq0++) {
      for (proc_control_B.i_he = 0; proc_control_B.i_he < 139;
           proc_control_B.i_he++) {
        proc_control_B.WorkingSet.Aineq.data[proc_control_B.i_he +
          proc_control_B.WorkingSet.ldA * proc_control_B.iEq0] =
          Aineq_data[bineq_size[0] * proc_control_B.i_he + proc_control_B.iEq0];
      }
    }
  }

  for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 <= proc_control_B.k;
       proc_control_B.iEq0++) {
    proc_control_B.mConstrMax =
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.iEq0];
    proc_control_B.TrialState.xstarsqp[proc_control_B.mConstrMax - 1] = std::
      fmax(proc_control_B.TrialState.xstarsqp[proc_control_B.mConstrMax - 1],
           lb[proc_control_B.mConstrMax - 1]);
  }

  evalObjAndConstrAndDerivatives(proc_control_B.mNonlinIneq,
    &proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.b_value.workspace.runtimedata,
    &proc_control_B.FcnEvaluator.next.next.next.next.next.next.next.next.b_value.workspace,
    proc_control_B.TrialState.xstarsqp, proc_control_B.TrialState.grad.data,
    proc_control_B.TrialState.cIneq.data, proc_control_B.TrialState.iNonIneq0,
    proc_control_B.TrialState.cEq, proc_control_B.WorkingSet.Aineq.data,
    proc_control_B.TrialState.iNonIneq0, proc_control_B.WorkingSet.ldA,
    proc_control_B.WorkingSet.Aeq.data, proc_control_B.WorkingSet.ldA,
    &proc_control_B.TrialState.sqpFval, &proc_control_B.mConstrMax);
  proc_control_B.TrialState.FunctionEvaluations = 1;
  proc_control_B.mConstrMax = proc_control_B.WorkingSet.ldA;
  if (bineq_size[0] > 0) {
    proc_control_B.iEq0 = proc_control_B.TrialState.cIneq.size[0];
    if (proc_control_B.iEq0 - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_b[0],
                  &proc_control_B.TrialState.cIneq.data[0], static_cast<uint32_T>
                  (proc_control_B.iEq0) * sizeof(real_T));
    }

    proc_control_B.iEq0_tmp = bineq_size[0];
    std::memcpy(&proc_control_B.y_data_b[0], &bineq_data[0],
                static_cast<uint32_T>(proc_control_B.iEq0_tmp) * sizeof(real_T));
    if (proc_control_B.iEq0 - 1 >= 0) {
      std::memcpy(&proc_control_B.TrialState.cIneq.data[0],
                  &proc_control_B.y_data_b[0], static_cast<uint32_T>
                  (proc_control_B.iEq0) * sizeof(real_T));
    }

    for (proc_control_B.i_he = 0; proc_control_B.i_he < proc_control_B.iEq0_tmp;
         proc_control_B.i_he++) {
      proc_control_B.TrialState.cIneq.data[proc_control_B.i_he] =
        -proc_control_B.TrialState.cIneq.data[proc_control_B.i_he];
    }

    proc_control_B.iEq0 = 0;
    proc_control_B.i_he = (bineq_size[0] - 1) * proc_control_B.WorkingSet.ldA +
      1;
    for (proc_control_B.iEq0_tmp = 1; proc_control_B.mConstrMax < 0 ?
         proc_control_B.iEq0_tmp >= proc_control_B.i_he :
         proc_control_B.iEq0_tmp <= proc_control_B.i_he; proc_control_B.iEq0_tmp
         += proc_control_B.mConstrMax) {
      proc_control_B.b_c_j = 0.0;
      for (proc_control_B.ia = proc_control_B.iEq0_tmp; proc_control_B.ia <=
           proc_control_B.iEq0_tmp + 138; proc_control_B.ia++) {
        proc_control_B.b_c_j +=
          proc_control_B.WorkingSet.Aineq.data[proc_control_B.ia - 1] *
          proc_control_B.TrialState.xstarsqp[proc_control_B.ia -
          proc_control_B.iEq0_tmp];
      }

      proc_control_B.TrialState.cIneq.data[proc_control_B.iEq0] +=
        proc_control_B.b_c_j;
      proc_control_B.iEq0++;
    }
  }

  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax < 130;
       proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.beq[proc_control_B.mConstrMax] =
      -proc_control_B.TrialState.cEq[proc_control_B.mConstrMax];
    proc_control_B.WorkingSet.bwset.data[proc_control_B.mConstrMax] =
      proc_control_B.WorkingSet.beq[proc_control_B.mConstrMax];
  }

  proc_control_B.mConstrMax = 0;
  proc_control_B.iEq0 = 0;
  for (proc_control_B.i_he = 0; proc_control_B.i_he < 130; proc_control_B.i_he++)
  {
    std::memcpy(&proc_control_B.WorkingSet.ATwset.data[proc_control_B.mConstrMax],
                &proc_control_B.WorkingSet.Aeq.data[proc_control_B.iEq0], 139U *
                sizeof(real_T));
    proc_control_B.mConstrMax += proc_control_B.WorkingSet.ldA;
    proc_control_B.iEq0 = proc_control_B.mConstrMax;
  }

  for (proc_control_B.iEq0 = 0; proc_control_B.iEq0 < proc_control_B.mIneq;
       proc_control_B.iEq0++) {
    proc_control_B.WorkingSet.bineq.data[proc_control_B.iEq0] =
      -proc_control_B.TrialState.cIneq.data[proc_control_B.iEq0];
  }

  for (proc_control_B.mConstrMax = 0; proc_control_B.mConstrMax <=
       proc_control_B.k; proc_control_B.mConstrMax++) {
    proc_control_B.WorkingSet.lb.data[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax]
      - 1] =
      -lb[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1]
      + x0[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1];
  }

  proc_control_initActiveSet(&proc_control_B.WorkingSet);
  proc_control_B.MeritFunction.initFval = proc_control_B.TrialState.sqpFval;
  proc_control_B.MeritFunction.penaltyParam = 1.0;
  proc_control_B.MeritFunction.threshold = 0.0001;
  proc_control_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_B.b_c_j = 0.0;
  for (proc_control_B.k = 0; proc_control_B.k < 130; proc_control_B.k++) {
    proc_control_B.b_c_j += std::abs
      (proc_control_B.TrialState.cEq[proc_control_B.k]);
  }

  proc_control_B.MeritFunction.initConstrViolationEq = proc_control_B.b_c_j;
  proc_control_B.b_c_j = 0.0;
  for (proc_control_B.k = 0; proc_control_B.k < proc_control_B.mIneq;
       proc_control_B.k++) {
    proc_control_B.scale_lg =
      proc_control_B.TrialState.cIneq.data[proc_control_B.k];
    if (proc_control_B.scale_lg > 0.0) {
      proc_control_B.b_c_j += proc_control_B.scale_lg;
    }
  }

  proc_control_B.MeritFunction.initConstrViolationIneq = proc_control_B.b_c_j;
  proc_control_B.MeritFunction.phi = 0.0;
  proc_control_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_B.MeritFunction.phiFullStep = 0.0;
  proc_control_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_B.MeritFunction.nlpComplError = 0.0;
  proc_control_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_p5(proc_control_B.maxDims, proc_control_B.maxDims,
    &proc_control_B.QRManager.ldq, proc_control_B.QRManager.QR.size,
    proc_control_B.QRManager.Q.data, proc_control_B.QRManager.Q.size,
    proc_control_B.QRManager.jpvt.data, proc_control_B.QRManager.jpvt.size,
    &proc_control_B.QRManager.mrows, &proc_control_B.QRManager.ncols,
    proc_control_B.QRManager.tau.size, &proc_control_B.QRManager.minRowCol,
    &proc_control_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_p52(proc_control_B.maxDims,
    proc_control_B.CholManager.FMat.size, &proc_control_B.CholManager.ldm,
    &proc_control_B.CholManager.ndims, &proc_control_B.CholManager.info,
    &proc_control_B.CholManager.scaleFactor,
    &proc_control_B.CholManager.ConvexCheck, &proc_control_B.CholManager.regTol_,
    &proc_control_B.CholManager.workspace_,
    &proc_control_B.CholManager.workspace2_);
  proc_control_B.tmp_size_cb[0] = bineq_size[0];
  proc_control_B.tmp_size_ie[0] = proc_control_B.mNonlinIneq;
  proc_control_driver(bineq_data, lb, &proc_control_B.TrialState,
                      &proc_control_B.MeritFunction,
                      &proc_control_B.FcnEvaluator, &proc_control_B.memspace,
                      &proc_control_B.WorkingSet, &proc_control_B.QRManager,
                      &proc_control_B.CholManager, &proc_control_B.QPObjective,
                      proc_control_B.tmp_size_cb, proc_control_B.tmp_size_ie,
                      proc_control_B.unusedExpr);
  *fval = proc_control_B.TrialState.sqpFval;
  *exitflag = proc_control_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_B.MeritFunction.nlpPrimalFeasError;
  proc_control_B.b_c_j = 0.0;
  proc_control_B.scale_lg = 3.3121686421112381E-170;
  for (proc_control_B.mNonlinIneq = 0; proc_control_B.mNonlinIneq < 139;
       proc_control_B.mNonlinIneq++) {
    x[proc_control_B.mNonlinIneq] =
      proc_control_B.TrialState.xstarsqp[proc_control_B.mNonlinIneq];
    proc_control_B.absxk_k = std::abs
      (proc_control_B.TrialState.delta_x.data[proc_control_B.mNonlinIneq]);
    if (proc_control_B.absxk_k > proc_control_B.scale_lg) {
      proc_control_B.t_d = proc_control_B.scale_lg / proc_control_B.absxk_k;
      proc_control_B.b_c_j = proc_control_B.b_c_j * proc_control_B.t_d *
        proc_control_B.t_d + 1.0;
      proc_control_B.scale_lg = proc_control_B.absxk_k;
    } else {
      proc_control_B.t_d = proc_control_B.absxk_k / proc_control_B.scale_lg;
      proc_control_B.b_c_j += proc_control_B.t_d * proc_control_B.t_d;
    }
  }

  *output_stepsize = proc_control_B.scale_lg * std::sqrt(proc_control_B.b_c_j);
  *output_lssteplength = proc_control_B.TrialState.steplength;
  *output_firstorderopt = proc_control_B.MeritFunction.firstOrderOpt;
}

void proc_control::proc_co_AUV8QuatPerturbedSimFcn(const real_T in1[13], const
  real_T in2[6], const real_T in3[8], real_T out1[13])
{
  // Start for MATLABSystem: '<S3>/MATLAB System'
  // AUVQUATPERTURBEDSIMFCN
  //     OUT1 = AUVQUATPERTURBEDSIMFCN(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     19-Nov-2021 10:15:43
  proc_control_B.t8_f = in1[4] * in1[6];
  proc_control_B.t9_ip = in1[5] * in1[6];
  proc_control_B.t10_d = in1[3] * in1[4];
  proc_control_B.t11_f = in1[3] * in1[5];
  proc_control_B.t12_n = in1[4] * in1[4];
  proc_control_B.t13_d = in1[5] * in1[5];
  proc_control_B.t15_c = in1[4] * in1[5] * 2.0;
  proc_control_B.t20_bf = in1[3] * in1[6] * 2.0;
  proc_control_B.t33_b = in1[11] / 500.0;
  proc_control_B.t37_hh = in1[10] / 1000.0;
  proc_control_B.t39_gj = in1[12] * 0.018;
  proc_control_B.t63 = in1[7] * 32.4648;
  proc_control_B.t67 = in1[8] * 43.6156;
  proc_control_B.t68_c = in1[9] * 46.7695;
  proc_control_B.t16_dw = proc_control_B.t8_f * 2.0;
  proc_control_B.t17_a = proc_control_B.t9_ip * 2.0;
  proc_control_B.t18_h = proc_control_B.t10_d * 2.0;
  proc_control_B.t19_c = proc_control_B.t11_f * 2.0;
  proc_control_B.t21_c = proc_control_B.t12_n * 2.0;
  proc_control_B.t22_m = proc_control_B.t13_d * 2.0;

  // Start for MATLABSystem: '<S3>/MATLAB System'
  proc_control_B.t23_o = in1[6] * in1[6] * 2.0;
  proc_control_B.t71 = proc_control_B.t33_b + proc_control_B.t39_gj;
  proc_control_B.t33_b += proc_control_B.t37_hh;
  proc_control_B.t37_hh += proc_control_B.t39_gj;

  // Start for MATLABSystem: '<S3>/MATLAB System'
  proc_control_B.t39_gj = in1[11] * 0.558 + proc_control_B.t63;
  proc_control_B.t80_e = in1[10] * 0.062 + proc_control_B.t68_c;
  proc_control_B.t81_j = in1[12] * 0.031 + proc_control_B.t67;
  proc_control_B.t84_l = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t45_n = proc_control_B.t17_a + proc_control_B.t18_h;

  // Start for MATLABSystem: '<S3>/MATLAB System'
  proc_control_B.t55_e = proc_control_erf(in1[2] * 13.333333333333334 - 2.0);
  proc_control_B.t65_c = (proc_control_B.t21_c + proc_control_B.t22_m) - 1.0;

  // Start for MATLABSystem: '<S3>/MATLAB System'
  proc_control_B.t63 = in1[12] * 0.062 - proc_control_B.t63;
  proc_control_B.t67 = in1[10] * 0.558 - proc_control_B.t67;
  proc_control_B.t68_c = in1[11] * 0.031 - proc_control_B.t68_c;
  proc_control_B.t86_j = (in1[10] / 250.0 - in1[11] / 1000.0) + in1[12] * 1.8864;
  proc_control_B.t87_m = (in1[10] / 125.0 - in1[12] / 1000.0) + in1[11] * 1.7228;
  proc_control_B.t56_e = proc_control_B.t16_dw - proc_control_B.t19_c;
  proc_control_B.t85_h = proc_control_B.t55_e * 0.01575 + 0.01575;
  proc_control_B.t55_e = proc_control_B.t55_e * 15.7185 - 15.2815;
  out1[0] = (((proc_control_B.t22_m + proc_control_B.t23_o) - 1.0) * -in1[7] +
             (proc_control_B.t16_dw + proc_control_B.t19_c) * in1[9]) +
    (proc_control_B.t15_c - proc_control_B.t20_bf) * in1[8];
  out1[1] = ((proc_control_B.t15_c + proc_control_B.t20_bf) * in1[7] -
             ((proc_control_B.t21_c + proc_control_B.t23_o) - 1.0) * in1[8]) +
    (proc_control_B.t17_a - proc_control_B.t18_h) * in1[9];
  out1[2] = (proc_control_B.t56_e * in1[7] + proc_control_B.t45_n * in1[8]) -
    proc_control_B.t65_c * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t15_c = in1[10] * proc_control_B.t71;
  proc_control_B.t20_bf = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) *
    in1[10];
  proc_control_B.t16_dw = in1[10] * proc_control_B.t80_e;
  proc_control_B.t17_a = in1[10] * proc_control_B.t67;
  proc_control_B.t18_h = in1[10] * proc_control_B.t86_j;
  proc_control_B.t19_c = in1[10] * proc_control_B.t87_m;
  proc_control_B.t21_c = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t22_m = in1[11] * proc_control_B.t37_hh;
  proc_control_B.t23_o = in1[11] * proc_control_B.t39_gj;
  proc_control_B.out1_tmp_cfc = in1[11] * proc_control_B.t68_c;
  proc_control_B.out1_tmp_ji = in1[11] * proc_control_B.t84_l;
  proc_control_B.t86_j *= in1[11];
  proc_control_B.out1_tmp_ah = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_doo = in1[12] * proc_control_B.t33_b;
  proc_control_B.out1_tmp_bb = in1[12] * proc_control_B.t63;
  proc_control_B.out1_tmp_ck = in1[12] * proc_control_B.t81_j;
  proc_control_B.t84_l *= in1[12];
  proc_control_B.t87_m *= in1[12];
  proc_control_B.out1_tmp_ah5 = (proc_control_B.t9_ip + proc_control_B.t10_d) *
    proc_control_B.t55_e;
  proc_control_B.t45_n *= proc_control_B.t85_h;
  proc_control_B.out1_tmp_ir = (proc_control_B.t8_f - proc_control_B.t11_f) *
    proc_control_B.t55_e;
  proc_control_B.t56_e *= proc_control_B.t85_h;
  proc_control_B.t55_e *= proc_control_B.t65_c;
  proc_control_B.t65_c = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t71 *= in1[7];
  proc_control_B.t81_j *= in1[7];
  proc_control_B.t68_c *= in1[7];
  proc_control_B.t85_h = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t37_hh *= in1[8];
  proc_control_B.t63 *= in1[8];
  proc_control_B.t80_e *= in1[8];
  proc_control_B.out1_tmp_pdm = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t33_b *= in1[9];
  proc_control_B.t39_gj *= in1[9];
  proc_control_B.t67 *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_B.t8_f * 0.11107598193630119)) +
                        ((proc_control_B.t9_ip * -0.00081126583629370218 -
    proc_control_B.t10_d * 0.00081126583629370218) + proc_control_B.t11_f *
    0.11107598193630119)) + ((proc_control_B.t12_n * -0.0062610285338271466 -
    proc_control_B.t13_d * 0.0062610285338271466) + in3[0] * 1.4142135623730951 *
    0.015171119710606879)) + ((in3[1] * 1.4142135623730951 *
    0.014928824155507611 + in3[2] * 1.4142135623730951 * 0.015171119710606879) +
    in3[3] * 1.4142135623730951 * 0.01516372519659284)) +
                     (((proc_control_B.t15_c * -0.96028628902704993 -
                        proc_control_B.t20_bf * 0.0001303522588356414) +
                       proc_control_B.t16_dw * 9.4803055144857715E-7) -
                      proc_control_B.t17_a * 6.8231348244175949E-6)) +
                    (((proc_control_B.t18_h * -0.010033314971702871 -
                       proc_control_B.t19_c * 0.0010125044874363649) +
                      proc_control_B.t21_c * 0.010033314971702871) -
                     proc_control_B.t22_m * 2.9388947094905889E-5)) +
                   (((proc_control_B.t23_o * -6.8231348244175949E-6 +
                      proc_control_B.out1_tmp_cfc * 0.030976977065388711) +
                     proc_control_B.out1_tmp_ji * 0.0010125044874363649) -
                    proc_control_B.t86_j * 0.0001303522588356414)) +
                  (((proc_control_B.out1_tmp_ah * -0.0010125044874363649 +
                     proc_control_B.out1_tmp_doo * 0.0002115171795569455) +
                    proc_control_B.out1_tmp_bb * 9.4803055144857715E-7) +
                   proc_control_B.out1_tmp_ck * 0.030976977065388711)) +
                 ((proc_control_B.t84_l * 0.010033314971702871 +
                   proc_control_B.t87_m * 0.0001303522588356414) -
                  proc_control_B.out1_tmp_ah5 * 1.860035941942108E-5)) +
                ((proc_control_B.t45_n * -0.0076571888871557192 -
                  proc_control_B.out1_tmp_ir * 0.60776829002292643) -
                 proc_control_B.t56_e * 0.589379797395962)) +
               ((proc_control_B.t55_e * -6.6934952627536608E-5 -
                 proc_control_B.t65_c * 0.030976977065388711) +
                proc_control_B.t71 * 0.0040409200239048832)) +
              (((proc_control_B.t81_j * -0.0010125044874363649 +
                 proc_control_B.t68_c * 0.010033314971702871) -
                proc_control_B.t85_h * 9.4803055144857715E-7) -
               proc_control_B.t37_hh * 0.311032764122789)) +
             (((proc_control_B.t63 * -0.0010125044874363649 -
                proc_control_B.t80_e * 0.0001303522588356414) +
               proc_control_B.out1_tmp_pdm * 6.8231348244175949E-6) +
              proc_control_B.t33_b * 0.031387639110527318)) +
    ((proc_control_B.t39_gj * 0.010033314971702871 - proc_control_B.t67 *
      0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_B.t8_f * 0.00060385694847962161)) +
                        ((proc_control_B.t9_ip * -0.23982646564227009 -
    proc_control_B.t10_d * 0.23982646564227009) + proc_control_B.t11_f *
    0.00060385694847962161)) + ((proc_control_B.t12_n * -0.026680932679612211 -
    proc_control_B.t13_d * 0.026680932679612211) - in3[0] * 1.4142135623730951 *
    0.01090649593858282)) + ((in3[1] * 1.4142135623730951 * 0.011000123045544621
    - in3[2] * 1.4142135623730951 * 0.01090649593858282) + in3[3] *
    1.4142135623730951 * 0.01090087173345982)) + (((proc_control_B.t15_c *
    -2.9388947094905889E-5 - proc_control_B.t20_bf * 0.021882274381510681) +
    proc_control_B.t16_dw * 0.02320783323245932) - proc_control_B.t17_a *
    2.9076309096921531E-5)) + (((proc_control_B.t18_h * -0.0001026911824132076 +
    proc_control_B.t19_c * 0.00042780737967584029) + proc_control_B.t21_c *
    0.0001026911824132076) - proc_control_B.t22_m * 0.71944283020623911)) +
                   (((proc_control_B.t23_o * -2.9076309096921531E-5 +
                      proc_control_B.out1_tmp_cfc * 9.4803055144857715E-7) -
                     proc_control_B.out1_tmp_ji * 0.00042780737967584029) -
                    proc_control_B.t86_j * 0.021882274381510681)) +
                  (((proc_control_B.out1_tmp_ah * 0.00042780737967584029 +
                     proc_control_B.out1_tmp_doo * 0.00090136558200456737) +
                    proc_control_B.out1_tmp_bb * 0.02320783323245932) +
                   proc_control_B.out1_tmp_ck * 9.4803055144857715E-7)) +
                 ((proc_control_B.t84_l * 0.0001026911824132076 +
                   proc_control_B.t87_m * 0.021882274381510681) -
                  proc_control_B.out1_tmp_ah5 * 0.45533768802085189)) +
                ((proc_control_B.t45_n * -1.2854146887555269 -
                  proc_control_B.out1_tmp_ir * 1.860035941942108E-5) -
                 proc_control_B.t56_e * 0.0060323141908477191)) +
               (((proc_control_B.t55_e * -0.00028523859224080018 -
                  proc_control_B.t65_c * 9.4803055144857715E-7) +
                 proc_control_B.t71 * 0.678350505826831) + proc_control_B.t81_j *
                0.00042780737967584029)) + (((proc_control_B.t68_c *
    0.0001026911824132076 - proc_control_B.t85_h * 0.02320783323245932) -
    proc_control_B.t37_hh * 0.0031834266548094372) + proc_control_B.t63 *
    0.00042780737967584029)) + (((proc_control_B.t80_e * -0.021882274381510681 +
    proc_control_B.out1_tmp_pdm * 2.9076309096921531E-5) - proc_control_B.t33_b *
    0.013262028769951049) + proc_control_B.t39_gj * 0.0001026911824132076)) +
    (proc_control_B.t67 * -0.021882274381510681 + 0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_B.t8_f * 0.004346059700124901)) +
                        ((proc_control_B.t9_ip * 0.024881704687475689 +
    proc_control_B.t10_d * 0.024881704687475689) - proc_control_B.t11_f *
    0.004346059700124901)) + ((proc_control_B.t12_n * 0.0030060816152820162 +
    proc_control_B.t13_d * 0.0030060816152820162) - in3[0] * 1.4142135623730951 *
    4.8869263875916949E-5)) + ((in3[1] * 1.4142135623730951 *
    6.6264429389244648E-5 - in3[2] * 1.4142135623730951 * 4.8869263875916949E-5)
    + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5)) +
                     (((proc_control_B.t15_c * 0.0002115171795569455 +
                        proc_control_B.t20_bf * 0.002272431716587712) -
                       proc_control_B.t16_dw * 2.9076309096921531E-5) +
                      proc_control_B.t17_a * 0.021384731826702759)) +
                    (((proc_control_B.t18_h * 0.00039756137245743289 -
                       proc_control_B.t19_c * 5.2828771531483014E-6) -
                      proc_control_B.t21_c * 0.00039756137245743289) +
                     proc_control_B.t22_m * 0.00090136558200456737)) +
                   (((proc_control_B.t23_o * 0.021384731826702759 -
                      proc_control_B.out1_tmp_cfc * 6.8231348244175949E-6) +
                     proc_control_B.out1_tmp_ji * 5.2828771531483014E-6) +
                    proc_control_B.t86_j * 0.002272431716587712)) +
                  (((proc_control_B.out1_tmp_ah * -5.2828771531483014E-6 -
                     proc_control_B.out1_tmp_doo * 0.66292668662778553) -
                    proc_control_B.out1_tmp_bb * 2.9076309096921531E-5) -
                   proc_control_B.out1_tmp_ck * 6.8231348244175949E-6)) +
                 ((proc_control_B.t84_l * -0.00039756137245743289 -
                   proc_control_B.t87_m * 0.002272431716587712) +
                  proc_control_B.out1_tmp_ah5 * 0.00057047718448160036)) +
                ((proc_control_B.t45_n * 0.133487820176676 +
                  proc_control_B.out1_tmp_ir * 0.00013386990525507319) +
                 proc_control_B.t56_e * 0.023353661458078809)) +
               (((proc_control_B.t55_e * 0.2097842192199541 +
                  proc_control_B.t65_c * 6.8231348244175949E-6) -
                 proc_control_B.t71 * 0.070445383214219059) -
                proc_control_B.t81_j * 5.2828771531483014E-6)) +
              (((proc_control_B.t68_c * -0.00039756137245743289 +
                 proc_control_B.t85_h * 2.9076309096921531E-5) +
                proc_control_B.t37_hh * 0.01232440254618042) -
               proc_control_B.t63 * 5.2828771531483014E-6)) +
             (((proc_control_B.t80_e * 0.002272431716587712 -
                proc_control_B.out1_tmp_pdm * 0.021384731826702759) +
               proc_control_B.t33_b * 0.00016376919174759729) -
              proc_control_B.t39_gj * 0.00039756137245743289)) +
    (proc_control_B.t67 * 0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_B.t8_f * 0.0830290934481406)) +
    ((proc_control_B.t9_ip * -18.72549529020894 - proc_control_B.t10_d *
      18.72549529020894) + proc_control_B.t11_f * 0.0830290934481406)) +
    ((proc_control_B.t12_n * -2.0852233152147792 - proc_control_B.t13_d *
      2.0852233152147792) + in3[0] * 1.4142135623730951 * 0.043593198825375247))
    + ((in3[1] * 1.4142135623730951 * -0.043051831063235027 + in3[2] *
        1.4142135623730951 * 0.043593198825375247) - in3[3] * 1.4142135623730951
       * 0.043976565543532631)) + ((proc_control_B.t15_c *
    -0.0040409200239048832 - proc_control_B.t20_bf * 1.71018810547529) +
    proc_control_B.t16_dw * 0.021882274381510681)) + ((proc_control_B.t17_a *
    -0.002272431716587712 - proc_control_B.t18_h * 0.0080268590155159435) +
    proc_control_B.t19_c * 0.0039859244840414)) + ((proc_control_B.t21_c *
    0.0080268590155159435 - proc_control_B.t22_m * 0.678350505826831) -
    proc_control_B.t23_o * 0.002272431716587712)) +
                     ((proc_control_B.out1_tmp_cfc * 0.0001303522588356414 -
                       proc_control_B.out1_tmp_ji * 0.0039859244840414) -
                      proc_control_B.t86_j * 1.71018810547529)) +
                    (((proc_control_B.out1_tmp_ah * 0.0039859244840414 +
                       proc_control_B.out1_tmp_doo * 0.070445383214219059) +
                      proc_control_B.out1_tmp_bb * 0.021882274381510681) +
                     proc_control_B.out1_tmp_ck * 0.0001303522588356414)) +
                   ((proc_control_B.t84_l * 0.0080268590155159435 +
                     proc_control_B.t87_m * 1.71018810547529) -
                    proc_control_B.out1_tmp_ah5 * 0.42933022336523952)) +
                  ((proc_control_B.t45_n * -100.460348544499 -
                    proc_control_B.out1_tmp_ir * 0.0025575113183552841) -
                   proc_control_B.t56_e * 0.47151599980996189)) +
                 ((proc_control_B.t55_e * -0.022292555139725449 -
                   proc_control_B.t65_c * 0.0001303522588356414) +
                  proc_control_B.t71 * 53.015831269733987)) +
                ((proc_control_B.t81_j * 0.0039859244840414 +
                  proc_control_B.t68_c * 0.0080268590155159435) -
                 proc_control_B.t85_h * 0.021882274381510681)) +
               ((proc_control_B.t37_hh * -0.2488326294809943 +
                 proc_control_B.t63 * 0.0039859244840414) - proc_control_B.t80_e
                * 1.71018810547529)) + ((proc_control_B.out1_tmp_pdm *
    0.002272431716587712 - proc_control_B.t33_b * 0.1235636590052834) +
    proc_control_B.t39_gj * 0.0080268590155159435)) + (proc_control_B.t67 *
    -1.71018810547529 + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_B.t8_f * 6.3908140435873166)) +
    ((proc_control_B.t9_ip * 0.087876754449678615 + proc_control_B.t10_d *
      0.087876754449678615) - proc_control_B.t11_f * 6.3908140435873166)) +
    ((proc_control_B.t12_n * 0.36480930847148191 + proc_control_B.t13_d *
      0.36480930847148191) + in3[0] * 1.4142135623730951 * 0.013457654526727991))
                        + ((in3[1] * 1.4142135623730951 * 0.013869054980635681 +
    in3[2] * 1.4142135623730951 * 0.013457654526727991) + in3[3] *
    1.4142135623730951 * 0.01386868232130781)) + (((proc_control_B.t15_c *
    0.311032764122789 + proc_control_B.t20_bf * 0.0080268590155159435) -
    proc_control_B.t16_dw * 0.0001026911824132076) + proc_control_B.t17_a *
    0.00039756137245743289)) + ((proc_control_B.t18_h * 0.58374455968341665 +
    proc_control_B.t19_c * 1.606290206365557E-6) - proc_control_B.t21_c *
    0.58374455968341665)) + (((proc_control_B.t22_m * 0.0031834266548094372 +
    proc_control_B.t23_o * 0.00039756137245743289) - proc_control_B.out1_tmp_cfc
    * 0.010033314971702871) - proc_control_B.out1_tmp_ji * 1.606290206365557E-6))
                    + (((proc_control_B.t86_j * 0.0080268590155159435 +
    proc_control_B.out1_tmp_ah * 1.606290206365557E-6) -
                        proc_control_B.out1_tmp_doo * 0.01232440254618042) -
                       proc_control_B.out1_tmp_bb * 0.0001026911824132076)) +
                   ((proc_control_B.out1_tmp_ck * -0.010033314971702871 -
                     proc_control_B.t84_l * 0.58374455968341665) -
                    proc_control_B.t87_m * 0.0080268590155159435)) +
                  ((proc_control_B.out1_tmp_ah5 * 0.002014800998947134 +
                    proc_control_B.t45_n * 0.47151599980996189) +
                   proc_control_B.out1_tmp_ir * 0.19685363974481029)) +
                 ((proc_control_B.t56_e * 34.290486373399979 +
                   proc_control_B.t55_e * 0.003900077063807416) +
                  proc_control_B.t65_c * 0.010033314971702871)) +
                ((proc_control_B.t71 * -0.2488326294809943 +
                  proc_control_B.t81_j * 1.606290206365557E-6) -
                 proc_control_B.t68_c * 0.58374455968341665)) +
               (((proc_control_B.t85_h * 0.0001026911824132076 +
                  proc_control_B.t37_hh * 18.096081350185919) +
                 proc_control_B.t63 * 1.606290206365557E-6) +
                proc_control_B.t80_e * 0.0080268590155159435)) +
              ((proc_control_B.out1_tmp_pdm * -0.00039756137245743289 -
                proc_control_B.t33_b * 4.9794996397332282E-5) -
               proc_control_B.t39_gj * 0.58374455968341665)) +
    (proc_control_B.t67 * 0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_B.t8_f * 0.64492422651466708)) +
    ((proc_control_B.t9_ip * 0.3660910622711756 + proc_control_B.t10_d *
      0.3660910622711756) + proc_control_B.t11_f * 0.64492422651466708)) +
    ((proc_control_B.t12_n * 0.0048476610015380046 + proc_control_B.t13_d *
      0.0048476610015380046) + in3[0] * 1.4142135623730951 *
     0.00059255494878017434)) + ((in3[1] * 1.4142135623730951 *
    -0.1225770464045467 + in3[2] * 1.4142135623730951 * 0.00059255494878017434)
    + in3[3] * 1.4142135623730951 * 0.00041984673608298361)) +
                       (((proc_control_B.t15_c * -0.031387639110527318 +
    proc_control_B.t20_bf * 0.0039859244840414) - proc_control_B.t16_dw *
    0.00042780737967584029) + proc_control_B.t17_a * 5.2828771531483014E-6)) +
                      (((proc_control_B.t18_h * -1.606290206365557E-6 -
    proc_control_B.t19_c * 0.53015902215788635) + proc_control_B.t21_c *
                        1.606290206365557E-6) + proc_control_B.t22_m *
                       0.013262028769951049)) + (((proc_control_B.t23_o *
    5.2828771531483014E-6 + proc_control_B.out1_tmp_cfc * 0.0010125044874363649)
    + proc_control_B.out1_tmp_ji * 0.53015902215788635) + proc_control_B.t86_j *
    0.0039859244840414)) + ((proc_control_B.out1_tmp_ah * -0.53015902215788635 -
    proc_control_B.out1_tmp_doo * 0.00016376919174759729) -
    proc_control_B.out1_tmp_bb * 0.00042780737967584029)) +
                   (((proc_control_B.out1_tmp_ck * 0.0010125044874363649 +
                      proc_control_B.t84_l * 1.606290206365557E-6) -
                     proc_control_B.t87_m * 0.0039859244840414) +
                    proc_control_B.out1_tmp_ah5 * 0.008393580789239987)) +
                  ((proc_control_B.t45_n * 0.23414229210041551 -
                    proc_control_B.out1_tmp_ir * 0.01986533804350149) -
                   proc_control_B.t56_e * 9.4357149063583354E-5)) +
                 ((proc_control_B.t55_e * 5.1825024872384838E-5 -
                   proc_control_B.t65_c * 0.0010125044874363649) -
                  proc_control_B.t71 * 0.1235636590052834)) +
                (((proc_control_B.t81_j * -0.53015902215788635 +
                   proc_control_B.t68_c * 1.606290206365557E-6) +
                  proc_control_B.t85_h * 0.00042780737967584029) -
                 proc_control_B.t37_hh * 4.9794996397332282E-5)) +
               ((proc_control_B.t63 * -0.53015902215788635 +
                 proc_control_B.t80_e * 0.0039859244840414) -
                proc_control_B.out1_tmp_pdm * 5.2828771531483014E-6)) +
              ((proc_control_B.t33_b * 16.434929686894481 +
                proc_control_B.t39_gj * 1.606290206365557E-6) +
               proc_control_B.t67 * 0.0039859244840414)) - 0.0024238305007690032;
}

void proc_control::proc_control_rand(real_T r[3])
{
  uint32_T b_u[2];

  // Start for MATLABSystem: '<S48>/MATLAB System'
  if (proc_control_DW.method == 4U) {
    uint32_T r_0;
    uint32_T y;
    r_0 = proc_control_DW.state / 127773U;
    y = (proc_control_DW.state - r_0 * 127773U) * 16807U;
    r_0 *= 2836U;
    if (y < r_0) {
      y = ~(r_0 - y) & 2147483647U;
    } else {
      y -= r_0;
    }

    r[0] = static_cast<real_T>(y) * 4.6566128752457969E-10;
    r_0 = y / 127773U;
    y = (y - r_0 * 127773U) * 16807U;
    r_0 *= 2836U;
    if (y < r_0) {
      y = ~(r_0 - y) & 2147483647U;
    } else {
      y -= r_0;
    }

    r[1] = static_cast<real_T>(y) * 4.6566128752457969E-10;
    r_0 = y / 127773U;
    y = (y - r_0 * 127773U) * 16807U;
    r_0 *= 2836U;
    if (y < r_0) {
      y = ~(r_0 - y) & 2147483647U;
    } else {
      y -= r_0;
    }

    r[2] = static_cast<real_T>(y) * 4.6566128752457969E-10;
    proc_control_DW.state = y;
  } else if (proc_control_DW.method == 5U) {
    for (int32_T b_k{0}; b_k < 3; b_k++) {
      uint32_T r_0;
      uint32_T y;
      r_0 = 69069U * proc_control_DW.state_f[0] + 1234567U;
      y = proc_control_DW.state_f[1] << 13 ^ proc_control_DW.state_f[1];
      y ^= y >> 17;
      y ^= y << 5;
      proc_control_DW.state_f[0] = r_0;
      proc_control_DW.state_f[1] = y;
      r[b_k] = static_cast<real_T>(r_0 + y) * 2.328306436538696E-10;
    }
  } else {
    int32_T i;
    uint32_T r_0;
    if (!proc_control_DW.state_not_empty) {
      std::memset(&proc_control_DW.state_fo[0], 0, 625U * sizeof(uint32_T));
      r_0 = 5489U;
      proc_control_DW.state_fo[0] = 5489U;
      for (i = 0; i < 623; i++) {
        r_0 = ((r_0 >> 30U ^ r_0) * 1812433253U + static_cast<uint32_T>(i)) + 1U;
        proc_control_DW.state_fo[i + 1] = r_0;
      }

      proc_control_DW.state_fo[624] = 624U;
      proc_control_DW.state_not_empty = true;
    }

    for (int32_T b_k{0}; b_k < 3; b_k++) {
      real_T b_r;

      // ========================= COPYRIGHT NOTICE ============================ 
      //  This is a uniform (0,1) pseudorandom number generator based on:        
      //                                                                         
      //  A C-program for MT19937, with initialization improved 2002/1/26.       
      //  Coded by Takuji Nishimura and Makoto Matsumoto.                        
      //                                                                         
      //  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,      
      //  All rights reserved.                                                   
      //                                                                         
      //  Redistribution and use in source and binary forms, with or without     
      //  modification, are permitted provided that the following conditions     
      //  are met:                                                               
      //                                                                         
      //    1. Redistributions of source code must retain the above copyright    
      //       notice, this list of conditions and the following disclaimer.     
      //                                                                         
      //    2. Redistributions in binary form must reproduce the above copyright 
      //       notice, this list of conditions and the following disclaimer      
      //       in the documentation and/or other materials provided with the     
      //       distribution.                                                     
      //                                                                         
      //    3. The names of its contributors may not be used to endorse or       
      //       promote products derived from this software without specific      
      //       prior written permission.                                         
      //                                                                         
      //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    
      //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      
      //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  
      //  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT  
      //  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  
      //  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       
      //  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  
      //  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  
      //  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    
      //  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
      //  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
      //                                                                         
      // =============================   END   ================================= 
      int32_T exitg1;
      do {
        exitg1 = 0;
        for (i = 0; i < 2; i++) {
          uint32_T y;
          r_0 = proc_control_DW.state_fo[624] + 1U;
          if (proc_control_DW.state_fo[624] + 1U >= 625U) {
            for (int32_T b_kk{0}; b_kk < 227; b_kk++) {
              y = (proc_control_DW.state_fo[b_kk + 1] & 2147483647U) |
                (proc_control_DW.state_fo[b_kk] & 2147483648U);
              if ((y & 1U) == 0U) {
                r_0 = y >> 1U;
              } else {
                r_0 = y >> 1U ^ 2567483615U;
              }

              proc_control_DW.state_fo[b_kk] = proc_control_DW.state_fo[b_kk +
                397] ^ r_0;
            }

            for (int32_T b_kk{0}; b_kk < 396; b_kk++) {
              y = (proc_control_DW.state_fo[b_kk + 227] & 2147483648U) |
                (proc_control_DW.state_fo[b_kk + 228] & 2147483647U);
              if ((y & 1U) == 0U) {
                r_0 = y >> 1U;
              } else {
                r_0 = y >> 1U ^ 2567483615U;
              }

              proc_control_DW.state_fo[b_kk + 227] =
                proc_control_DW.state_fo[b_kk] ^ r_0;
            }

            y = (proc_control_DW.state_fo[623] & 2147483648U) |
              (proc_control_DW.state_fo[0] & 2147483647U);
            if ((y & 1U) == 0U) {
              r_0 = y >> 1U;
            } else {
              r_0 = y >> 1U ^ 2567483615U;
            }

            proc_control_DW.state_fo[623] = proc_control_DW.state_fo[396] ^ r_0;
            r_0 = 1U;
          }

          y = proc_control_DW.state_fo[static_cast<int32_T>(r_0) - 1];
          proc_control_DW.state_fo[624] = r_0;
          y ^= y >> 11U;
          y ^= y << 7U & 2636928640U;
          y ^= y << 15U & 4022730752U;
          b_u[i] = y >> 18U ^ y;
        }

        b_r = (static_cast<real_T>(b_u[0] >> 5U) * 6.7108864E+7 +
               static_cast<real_T>(b_u[1] >> 6U)) * 1.1102230246251565E-16;
        if (b_r == 0.0) {
          boolean_T b_isvalid;
          if ((proc_control_DW.state_fo[624] >= 1U) &&
              (proc_control_DW.state_fo[624] < 625U)) {
            boolean_T exitg2;
            b_isvalid = false;
            i = 0;
            exitg2 = false;
            while ((!exitg2) && (i + 1 < 625)) {
              if (proc_control_DW.state_fo[i] == 0U) {
                i++;
              } else {
                b_isvalid = true;
                exitg2 = true;
              }
            }
          } else {
            b_isvalid = false;
          }

          if (!b_isvalid) {
            r_0 = 5489U;
            proc_control_DW.state_fo[0] = 5489U;
            for (i = 0; i < 623; i++) {
              r_0 = ((r_0 >> 30U ^ r_0) * 1812433253U + static_cast<uint32_T>(i))
                + 1U;
              proc_control_DW.state_fo[i + 1] = r_0;
            }

            proc_control_DW.state_fo[624] = 624U;
          }
        } else {
          exitg1 = 1;
        }
      } while (exitg1 == 0);

      r[b_k] = b_r;
    }
  }

  // End of Start for MATLABSystem: '<S48>/MATLAB System'
}

void proc_control::proc_control_binary_expand_op(real_T in1[3], const int32_T
  in2_size[2], const real_T in3_data[], const real_T in4[4])
{
  int32_T i;
  int32_T in2_idx_0;

  // Outputs for Enabled SubSystem: '<Root>/Model System' incorporates:
  //   EnablePort: '<S3>/Enable'

  // MATLAB Function: '<S29>/MATLAB Function'
  in2_idx_0 = in2_size[1];
  for (i = 0; i < in2_idx_0; i++) {
    in1[0] = -in3_data[0] * 2.0 * rt_atan2d_snf(in4[1], in4[0]);
  }

  // End of MATLAB Function: '<S29>/MATLAB Function'
  // End of Outputs for SubSystem: '<Root>/Model System'
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  // Uniform random number generator (random number between 0 and 1)

  // #define IA      16807                      magic multiplier = 7^5
  // #define IM      2147483647                 modulus = 2^31-1
  // #define IQ      127773                     IM div IA
  // #define IR      2836                       IM modulo IA
  // #define S       4.656612875245797e-10      reciprocal of 2^31-1
  // test = IA * (seed % IQ) - IR * (seed/IQ)
  // seed = test < 0 ? (test + IM) : test
  // return (seed*S)

  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T sr;
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = std::sqrt(-2.0 * std::log(si) / si) * sr;
  return y;
}

void proc_control::proc_con_Subscriber_setupImpl_p(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[26]{ "/proc_simulation/imu_info" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S94>/SourceBlock'
  proc_control_B.deadline_ft.sec = 0.0;
  proc_control_B.deadline_ft.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_ft,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 26; i++) {
    // Start for MATLABSystem: '<S94>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_f0[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_209_83.createSubscriber(&proc_control_B.b_zeroDelimTopic_f0[0],
    qos_profile);
}

void proc_control::proc_co_Subscriber_setupImpl_pr(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[30]{ "/proc_simulation/dvl_velocity" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S95>/SourceBlock'
  proc_control_B.deadline_l.sec = 0.0;
  proc_control_B.deadline_l.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_l,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 30; i++) {
    // Start for MATLABSystem: '<S95>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_fn[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_209_84.createSubscriber(&proc_control_B.b_zeroDelimTopic_fn[0],
    qos_profile);
}

void proc_control::proc_c_Subscriber_setupImpl_pr3(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[23]{ "/proc_simulation/depth" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S96>/SourceBlock'
  proc_control_B.deadline_o.sec = 0.0;
  proc_control_B.deadline_o.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_o,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 23; i++) {
    // Start for MATLABSystem: '<S96>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_hz[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_209_85.createSubscriber(&proc_control_B.b_zeroDelimTopic_hz[0],
    qos_profile);
}

void proc_control::proc__Subscriber_setupImpl_pr35(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[23]{ "/provider_imu/imu_info" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S83>/SourceBlock'
  proc_control_B.deadline_mx.sec = 0.0;
  proc_control_B.deadline_mx.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_mx,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 23; i++) {
    // Start for MATLABSystem: '<S83>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_kq[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_209_4.createSubscriber(&proc_control_B.b_zeroDelimTopic_kq[0],
    qos_profile);
}

void proc_control::proc_Subscriber_setupImpl_pr351(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[27]{ "/provider_dvl/dvl_velocity" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S84>/SourceBlock'
  proc_control_B.deadline_dj.sec = 0.0;
  proc_control_B.deadline_dj.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_dj,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 27; i++) {
    // Start for MATLABSystem: '<S84>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_c[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_209_5.createSubscriber(&proc_control_B.b_zeroDelimTopic_c[0],
    qos_profile);
}

void proc_control::pro_Subscriber_setupImpl_pr351e(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[22]{ "/provider_depth/depth" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S85>/SourceBlock'
  proc_control_B.deadline_a.sec = 0.0;
  proc_control_B.deadline_a.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_a,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 22; i++) {
    // Start for MATLABSystem: '<S85>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_be[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_209_6.createSubscriber(&proc_control_B.b_zeroDelimTopic_be[0],
    qos_profile);
}

void proc_control::pr_ROS2PubSubBase_setQOSProfile(rmw_qos_profile_t rmwProfile,
  real_T qosDepth, real_T qosDeadline, real_T qosLifespan, real_T
  qosLeaseDuration, boolean_T qosAvoidROSNamespaceConventions)
{
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  real_T input;
  real_T sec;
  input = qosDeadline;

  // Start for MATLABSystem: '<S17>/SinkBlock' incorporates:
  //   MATLABSystem: '<S180>/SinkBlock'

  if (qosDeadline == (rtInf)) {
    input = 0.0;
  }

  sec = std::floor(input);
  proc_control_B.deadline_jy.sec = sec;

  // Start for MATLABSystem: '<S17>/SinkBlock' incorporates:
  //   MATLABSystem: '<S180>/SinkBlock'

  proc_control_B.deadline_jy.nsec = (input - sec) * 1.0E+9;
  input = qosLifespan;

  // Start for MATLABSystem: '<S17>/SinkBlock' incorporates:
  //   MATLABSystem: '<S180>/SinkBlock'

  if (qosLifespan == (rtInf)) {
    input = 0.0;
  }

  sec = std::floor(input);
  lifespan.sec = sec;

  // Start for MATLABSystem: '<S17>/SinkBlock' incorporates:
  //   MATLABSystem: '<S180>/SinkBlock'

  lifespan.nsec = (input - sec) * 1.0E+9;
  input = qosLeaseDuration;

  // Start for MATLABSystem: '<S17>/SinkBlock' incorporates:
  //   MATLABSystem: '<S180>/SinkBlock'

  if (qosLeaseDuration == (rtInf)) {
    input = 0.0;
  }

  sec = std::floor(input);
  liveliness_lease_duration.sec = sec;

  // Start for MATLABSystem: '<S17>/SinkBlock' incorporates:
  //   MATLABSystem: '<S180>/SinkBlock'

  liveliness_lease_duration.nsec = (input - sec) * 1.0E+9;
  SET_QOS_VALUES(rmwProfile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)qosDepth,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_jy,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 qosAvoidROSNamespaceConventions);
}

void proc_control::proc_contro_Publisher_setupImpl(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[24]{ "/proc_control/sensor_on" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S14>/SinkBlock'
  proc_control_B.deadline_gd.sec = 0.0;
  proc_control_B.deadline_gd.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_gd,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 24; i++) {
    // Start for MATLABSystem: '<S14>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_ew[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_500.createPublisher(&proc_control_B.b_zeroDelimTopic_ew[0],
    qos_profile);
}

void proc_control::proc_cont_PolyTrajSys_setupImpl
  (robotics_slcore_internal_bl_p_T *obj)
{
  int32_T b_j;
  for (b_j = 0; b_j < 6; b_j++) {
    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    obj->PrevOptInputs.f1[b_j] = 1.0;
  }

  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  obj->PrevOptInputs.f2[0] = 1.0;
  obj->PrevOptInputs.f2[1] = 1.0;
  proc_control_B.dv27[0] = 1.0;
  proc_control_B.dv27[1] = 1.0;
  for (b_j = 0; b_j < 3; b_j++) {
    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_B.obj[0] = obj->VelocityBoundaryCondition[b_j];
    proc_control_B.obj[1] = obj->VelocityBoundaryCondition[b_j + 3];
    proc_contro_generateCubicCoeffs(proc_control_B.dv27, proc_control_B.obj, 1.0,
      proc_control_B.modBreaks);
    proc_control_B.coefMat_o[b_j] = proc_control_B.modBreaks[0];
    proc_control_B.coefMat_o[b_j + 3] = proc_control_B.modBreaks[1];
    proc_control_B.coefMat_o[b_j + 6] = proc_control_B.modBreaks[2];
    proc_control_B.coefMat_o[b_j + 9] = proc_control_B.modBreaks[3];
  }

  proc_control_B.dv27[0] = 1.0;
  proc_control_B.dv27[1] = 2.0;
  pr_addFlatSegmentsToPPFormParts(proc_control_B.dv27, proc_control_B.coefMat_o,
    proc_control_B.modBreaks, proc_control_B.modCoeffs_k);

  // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
  PolyTrajSys_updateStoredPPForms(obj, proc_control_B.modBreaks,
    proc_control_B.modCoeffs_k);
  obj->PPFormUpdatedNeeded = false;
}

void proc_control::proc_con_Subscriber_setupImpl_g(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[23]{ "/proc_control/add_pose" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S321>/SourceBlock'
  proc_control_B.deadline_e.sec = 0.0;
  proc_control_B.deadline_e.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_e,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 23; i++) {
    // Start for MATLABSystem: '<S321>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_he[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_589.createSubscriber(&proc_control_B.b_zeroDelimTopic_he[0],
    qos_profile);
}

void proc_control::Subscriber_setupI_pr351ewpk3k4u(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[28]{ "/proc_control/set_mpc_gains" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S240>/SourceBlock'
  proc_control_B.deadline_lf.sec = 5.0;
  proc_control_B.deadline_lf.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_lf,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 28; i++) {
    // Start for MATLABSystem: '<S240>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_hn[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_780.createSubscriber(&proc_control_B.b_zeroDelimTopic_hn[0],
    qos_profile);
}

void proc_control::Subscriber_setup_pr351ewpk3k4u0(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[28]{ "/provider_power/current_not" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S241>/SourceBlock'
  proc_control_B.deadline_g.sec = 5.0;
  proc_control_B.deadline_g.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_g,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 28; i++) {
    // Start for MATLABSystem: '<S241>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_e[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_781.createSubscriber(&proc_control_B.b_zeroDelimTopic_e[0],
    qos_profile);
}

void proc_control::proc_cont_Publisher_setupImpl_p(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[32]{ "/provider_thruster/thruster_pwm" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S21>/SinkBlock'
  proc_control_B.deadline_f.sec = 0.0;
  proc_control_B.deadline_f.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_f,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 32; i++) {
    // Start for MATLABSystem: '<S21>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_n[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1380.createPublisher(&proc_control_B.b_zeroDelimTopic_n[0],
    qos_profile);
}

void proc_control::proc_con_Publisher_setupImpl_pr(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[27]{ "/telemetry/thruster_newton" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S22>/SinkBlock'
  proc_control_B.deadline_gv.sec = 0.0;
  proc_control_B.deadline_gv.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_gv,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 27; i++) {
    // Start for MATLABSystem: '<S22>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_o[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1386.createPublisher(&proc_control_B.b_zeroDelimTopic_o[0],
    qos_profile);
}

void proc_control::proc_co_Publisher_setupImpl_pr3(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[29]{ "proc_control/controller_info" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S25>/SinkBlock'
  proc_control_B.deadline_i.sec = 0.0;
  proc_control_B.deadline_i.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_i,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 29; i++) {
    // Start for MATLABSystem: '<S25>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_k[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1430.createPublisher(&proc_control_B.b_zeroDelimTopic_k[0],
    qos_profile);
}

void proc_control::proc_c_Publisher_setupImpl_pr35(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[30]{ "/proc_simulation/thruster_rpm" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S42>/SinkBlock'
  proc_control_B.deadline_d.sec = 5.0;
  proc_control_B.deadline_d.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_d,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 30; i++) {
    // Start for MATLABSystem: '<S42>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_a[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1184.createPublisher(&proc_control_B.b_zeroDelimTopic_a[0],
    qos_profile);
}

void proc_control::proc_contr_Subscriber_setupImpl(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[37]{
    "/proc_simulation/set_pinger_location" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S58>/SourceBlock'
  proc_control_B.deadline_k.sec = 5.0;
  proc_control_B.deadline_k.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_k,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 37; i++) {
    // Start for MATLABSystem: '<S58>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_d[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_1278.createSubscriber(&proc_control_B.b_zeroDelimTopic_d[0],
    qos_profile);
}

void proc_control::proc__Publisher_setupImpl_pr351(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[33]{ "/proc_simulation/pinger_location" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S57>/SinkBlock'
  proc_control_B.deadline_h.sec = 5.0;
  proc_control_B.deadline_h.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_h,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 33; i++) {
    // Start for MATLABSystem: '<S57>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_f[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1280.createPublisher(&proc_control_B.b_zeroDelimTopic_f[0],
    qos_profile);
}

void proc_control::p_Publisher_setupImpl_pr351ewpk(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[28]{ "proc_simulation/true_states" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S112>/SinkBlock'
  proc_control_B.deadline_m.sec = 0.0;
  proc_control_B.deadline_m.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_m,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 28; i++) {
    // Start for MATLABSystem: '<S112>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_h[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1321.createPublisher(&proc_control_B.b_zeroDelimTopic_h[0],
    qos_profile);
}

void proc_control::proc_Publisher_setupImpl_pr351e(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[39]{
    "/my_topic/proc_simulation/dvl_velocity" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S105>/SinkBlock'
  proc_control_B.deadline.sec = 0.0;
  proc_control_B.deadline.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 39; i++) {
    // Start for MATLABSystem: '<S105>/SinkBlock'
    proc_control_B.b_zeroDelimTopic[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1347.createPublisher(&proc_control_B.b_zeroDelimTopic[0],
    qos_profile);
}

void proc_control::pro_Publisher_setupImpl_pr351ew(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[23]{ "/proc_simulation/depth" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S107>/SinkBlock'
  proc_control_B.deadline_c.sec = 0.0;
  proc_control_B.deadline_c.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_c,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 23; i++) {
    // Start for MATLABSystem: '<S107>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_nn[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1353.createPublisher(&proc_control_B.b_zeroDelimTopic_nn[0],
    qos_profile);
}

void proc_control::pr_Publisher_setupImpl_pr351ewp(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[26]{ "/proc_simulation/imu_info" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S110>/SinkBlock'
  proc_control_B.deadline_mq.sec = 0.0;
  proc_control_B.deadline_mq.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_mq,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 26; i++) {
    // Start for MATLABSystem: '<S110>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_p[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_1342.createPublisher(&proc_control_B.b_zeroDelimTopic_p[0],
    qos_profile);
}

void proc_control::pr_Subscriber_setupImpl_pr351ew(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[23]{ "/proc_control/set_mode" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S125>/SourceBlock'
  proc_control_B.deadline_jc.sec = 0.0;
  proc_control_B.deadline_jc.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_jc,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 23; i++) {
    // Start for MATLABSystem: '<S125>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_cy[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_1.createSubscriber(&proc_control_B.b_zeroDelimTopic_cy[0],
    qos_profile);
}

void proc_control::p_Subscriber_setupImpl_pr351ewp(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[20]{ "/proc_nav/reset_pos" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S126>/SourceBlock'
  proc_control_B.deadline_ji.sec = 0.0;
  proc_control_B.deadline_ji.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_ji,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 20; i++) {
    // Start for MATLABSystem: '<S126>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_nq[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_1486.createSubscriber(&proc_control_B.b_zeroDelimTopic_nq[0],
    qos_profile);
}

void proc_control::Subscriber_setupImp_pr351ewpk3k(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[28]{ "/provider_rs485/kill_status" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S129>/SourceBlock'
  proc_control_B.deadline_h5.sec = 0.0;
  proc_control_B.deadline_h5.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_h5,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 28; i++) {
    // Start for MATLABSystem: '<S129>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_b[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_13.createSubscriber(&proc_control_B.b_zeroDelimTopic_b[0],
    qos_profile);
}

void proc_control::Subscriber_setupImpl_pr351ewpk3(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[27]{ "/proc_simulation/start_sim" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S128>/SourceBlock'
  proc_control_B.deadline_n.sec = 0.0;
  proc_control_B.deadline_n.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_n,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 27; i++) {
    // Start for MATLABSystem: '<S128>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_jw[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_40.createSubscriber(&proc_control_B.b_zeroDelimTopic_jw[0],
    qos_profile);
}

void proc_control::Subscriber_setupIm_pr351ewpk3k4(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[19]{ "/telemetry/dry_run" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S130>/SourceBlock'
  proc_control_B.deadline_ga.sec = 0.0;
  proc_control_B.deadline_ga.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_ga,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 19; i++) {
    // Start for MATLABSystem: '<S130>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_m[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_15.createSubscriber(&proc_control_B.b_zeroDelimTopic_m[0],
    qos_profile);
}

void proc_control::Subscriber_setupImpl_pr351ewpk(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[27]{ "/proc_nav/reset_trajectory" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S127>/SourceBlock'
  proc_control_B.deadline_m4.sec = 0.0;
  proc_control_B.deadline_m4.nsec = 0.0;
  lifespan.sec = 0.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 0.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)10.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_m4,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 27; i++) {
    // Start for MATLABSystem: '<S127>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_ku[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_16.createSubscriber(&proc_control_B.b_zeroDelimTopic_ku[0],
    qos_profile);
}

void proc_control::Subscriber_setu_pr351ewpk3k4u0o(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[16]{ "/spacenav/twist" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S314>/SourceBlock'
  proc_control_B.deadline_ee.sec = 0.0;
  proc_control_B.deadline_ee.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_ee,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 16; i++) {
    // Start for MATLABSystem: '<S314>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_jk[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_532.createSubscriber(&proc_control_B.b_zeroDelimTopic_jk[0],
    qos_profile);
}

void proc_control::proc_con_Subscriber_setupImpl_n(const
  ros_slros2_internal_block_Sub_T *obj)
{
  static const char_T b_zeroDelimTopic[35]{ "/proc_planner/send_trajectory_list"
  };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S316>/SourceBlock'
  proc_control_B.deadline_j.sec = 0.0;
  proc_control_B.deadline_j.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_j,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 35; i++) {
    // Start for MATLABSystem: '<S316>/SourceBlock'
    proc_control_B.b_zeroDelimTopic_dv[i] = b_zeroDelimTopic[i];
  }

  Sub_proc_control_572.createSubscriber(&proc_control_B.b_zeroDelimTopic_dv[0],
    qos_profile);
}

void proc_control::Publisher_setupImpl_pr351ewpk3(const
  ros_slros2_internal_block_Pub_T *obj)
{
  static const char_T b_zeroDelimTopic[29]{ "/proc_control/current_target" };

  rmw_qos_profile_t qos_profile;
  sJ4ih70VmKcvCeguWN0mNVF lifespan;
  sJ4ih70VmKcvCeguWN0mNVF liveliness_lease_duration;
  qos_profile = rmw_qos_profile_default;

  // Start for MATLABSystem: '<S312>/SinkBlock'
  proc_control_B.deadline_kg.sec = 0.0;
  proc_control_B.deadline_kg.nsec = 0.0;
  lifespan.sec = 5.0;
  lifespan.nsec = 0.0;
  liveliness_lease_duration.sec = 5.0;
  liveliness_lease_duration.nsec = 0.0;
  SET_QOS_VALUES(qos_profile, RMW_QOS_POLICY_HISTORY_KEEP_LAST, (size_t)1.0,
                 RMW_QOS_POLICY_DURABILITY_VOLATILE,
                 RMW_QOS_POLICY_RELIABILITY_RELIABLE, proc_control_B.deadline_kg,
                 lifespan, RMW_QOS_POLICY_LIVELINESS_AUTOMATIC,
                 liveliness_lease_duration, (bool)
                 obj->QOSAvoidROSNamespaceConventions);
  for (int32_T i{0}; i < 29; i++) {
    // Start for MATLABSystem: '<S312>/SinkBlock'
    proc_control_B.b_zeroDelimTopic_jz[i] = b_zeroDelimTopic[i];
  }

  Pub_proc_control_671.createPublisher(&proc_control_B.b_zeroDelimTopic_jz[0],
    qos_profile);
}

// Model step function
void proc_control::step()
{
  SL_Bus_sonia_common_ros2_KillStatus rtb_SourceBlock_o2_i_0;
  SL_Bus_std_msgs_Bool rtb_SourceBlock_o2_my_0;
  SL_Bus_std_msgs_UInt8 rtb_SourceBlock_o2_d2_0;
  boolean_T b_value;
  boolean_T mask1;
  static const real_T b_B[6930]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040302, -4.9246767934457643E-6,
    0.0052868326178782173, 0.0020754199270452169, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590372, 0.0014846744549160561, 7.0936716057342316E-6,
    -0.0051391900270571457, 0.0021227702215873057, -0.015228232305159619, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183288, -4.7070151263154071E-6,
    0.0050961555194273568, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017572, 7.3113332728645887E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.01539766274083806, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496928, -0.00048221414518065207, -0.0020535983066627922,
    -0.02239703294428403, 0.011382823490747533, 4.5300466257935381E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371,
    -0.0014603487861040302, -4.9246767934457643E-6, 0.0052868326178782173,
    0.0020754199270452169, -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020430568849590372,
    0.0014846744549160561, 7.0936716057342316E-6, -0.0051391900270571457,
    0.0021227702215873057, -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021016480453829815,
    -0.0014857887933183288, -4.7070151263154071E-6, 0.0050961555194273568,
    0.0020754929921346357, 0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021001536346134803,
    0.0014592344477017572, 7.3113332728645887E-6, -0.0053298671255080053,
    0.0021228432866767255, 0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496928,
    -0.00048221414518065207, -0.0020535983066627922, -0.02239703294428403,
    0.011382823490747533, 4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003062394217119654,
    0.00047731536664842925, 0.0020665268130396616, 0.022172426283366312,
    0.011387616330349713, -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829,
    0.000502570134369898, -0.0021189752999033816, 0.023341150699844014,
    -0.011594289336350715, -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542,
    -0.00049767135583767507, 0.0021060467935265117, -0.023116544038926296,
    -0.01117615048474652, 0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0003062394217119654, 0.00047731536664842925,
    0.0020665268130396616, 0.022172426283366312, 0.011387616330349713,
    -0.00015666644814812003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120829, 0.000502570134369898,
    -0.0021189752999033816, 0.023341150699844014, -0.011594289336350715,
    -4.8538698886608527E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572542, -0.00049767135583767507,
    0.0021060467935265117, -0.023116544038926296, -0.01117615048474652,
    0.00015990468077679308, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  SL_Bus_std_msgs_Bool BusAssignment_j;
  int16_T b_Mrows;
  char_T expl_temp[3];
  int8_T rtAction;
  int8_T rtPrevAction;
  uint8_T mode;
  uint8_T tmp;
  boolean_T rtb_NewDvlMsg;
  boolean_T rtb_Reset;
  boolean_T rtb_newPressureMsg;
  static const int8_T tmp_0[9]{ 0, 0, 0, 1, 0, 0, 0, 0, 0 };

  static const int8_T tmp_1[7]{ 0, 0, 0, 1, 0, 0, 0 };

  static const int8_T tmp_2[7]{ 3, 4, 5, 6, 10, 11, 12 };

  static real_T d[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0
  };

  static real_T f[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };

  static const real_T b[441]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422014, 0.00023231657375355515, 0.00085021850252945286,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531576,
    -1.8831321574108635, 0.0081315634991630872, 0.031843900678722038, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T c[630]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040302, -4.9246767934457643E-6,
    0.0052868326178782173, 0.0020754199270452169, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590372, 0.0014846744549160561, 7.0936716057342316E-6,
    -0.0051391900270571457, 0.0021227702215873057, -0.015228232305159619, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183288, -4.7070151263154071E-6,
    0.0050961555194273568, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017572, 7.3113332728645887E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.01539766274083806, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496928, -0.00048221414518065207, -0.0020535983066627922,
    -0.02239703294428403, 0.011382823490747533, 4.5300466257935381E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const int8_T d_0[273]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T e[226]{ 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0 };

  static const real_T f_0[21]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const int16_T b_Mrows_0[226]{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83,
    84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
    104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122,
    123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140,
    141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161,
    162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200,
    201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218,
    219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257,
    258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 341, 342, 343, 344,
    345, 346, 347, 348 };

  static const real_T old_yoff[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const int8_T a[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

  static const real_T g[81]{ 2.5651005531616526, 1.7832054070796954,
    -1.4357517509568314, -1.6576468970387899, 0.038415984331270484,
    0.3095395073701282, -0.036229291873675157, -0.31172619982772343, 0.0,
    1.7832054070796954, 2.5938374699880686, -1.6864513320323564,
    -1.4358192691239851, 0.3145650106035548, 0.034578475258585879,
    -0.32320230353911911, -0.025941182323021436, 0.0, -1.4357517509568314,
    -1.6864513320323564, 2.6637476660450403, 1.8530480849695157,
    0.06117543468629158, 0.34697869874687842, -0.059238726472737396,
    -0.34891540696043255, 0.0, -1.6576468970387899, -1.4358192691239853,
    1.8530480849695157, 2.6348757128843223, 0.33732446095857593,
    0.072017666635336319, -0.34621173813818135, -0.063130389455730726, 0.0,
    0.0384159843312705, 0.3145650106035548, 0.061175434686291587,
    0.337324460958576, 2.4332119794598022, 0.28387059424322519,
    -1.5303883889049394, -0.536694184798087, 0.0, 0.3095395073701282,
    0.034578475258585886, 0.34697869874687842, 0.072017666635336333,
    0.28387059424322514, 2.4635388544622838, -0.57357610916459878,
    -1.5238333395409092, 0.0, -0.036229291873675164, -0.32320230353911911,
    -0.059238726472737389, -0.3462117381381814, -1.5303883889049392,
    -0.57357610916459867, 2.5191280342931295, 0.23483646377640788, 0.0,
    -0.31172619982772343, -0.025941182323021422, -0.34891540696043261,
    -0.06313038945573074, -0.536694184798087, -1.5238333395409092,
    0.23483646377640785, 2.4756910605625873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 100000.0 };

  static const real_T h[2034]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040302, 4.9246767934457643E-6,
    -0.0052868326178782173, -0.0020754199270452169, 0.015163628780498446,
    3.1616010707720436E-7, -0.0, -0.00019811352068166413, -9.733336993428119E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442151,
    6.5614497023245073E-6, -0.0080792362290577832, -0.0038844512459874072,
    0.026788702408483002, 6.8512917620797546E-7, -0.0, -0.00049104314225850373,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228137, 6.1601073524460925E-6, -0.0091991288332427812,
    -0.0053836032115810936, 0.035691534155111788, 9.515955241686091E-7, -0.0,
    -0.00081150591943762143, -0.00052435232813021946, 0.0034085439914897236,
    -0.0077185036154530772, 0.00563726604148579, 4.6396980079752287E-6,
    -0.0092690633506094088, -0.00654832074431959, 0.042501234100522735,
    1.0377937756639656E-6, -0.0, -0.0011189252136054859, -0.00082088448415742121,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424437,
    2.6414509523473813E-6, -0.0087398966293815786, -0.0073714321358738892,
    0.047702538425699506, 9.1853767957217993E-7, -0.0, -0.001391638779765514,
    -0.0011501728132765289, 0.0073666001295169623, -0.011161718745088724,
    0.00820124153324256, 5.8494966353776041E-7, -0.0079227307407974644,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369554E-7, -0.0,
    -0.0016207036860207355, -0.0014960212712305321, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969556, -1.2790233473825676E-6,
    -0.007020235458604745, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040202E-7, -0.0, -0.0018051919142820267, -0.0018435530683128007,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659432,
    -2.82239855008753E-6, -0.006154644849868848, -0.007934340486205024,
    0.056980982028061261, -5.1013685987929281E-7, -0.0, -0.0019487749913620006,
    -0.0021796573224240924, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589607, -4.0018112448208546E-6, -0.0053912134366169455,
    -0.0075881528377809079, 0.058718842971069225, -1.23424891917915E-6, -0.0,
    -0.0020573611713821582, -0.0024933028948330325, 0.017104826530695772,
    -0.017334285099427416, 0.0127345953246283, -4.8286811668072085E-6,
    -0.004756876866607529, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.00019811352068166413, 9.733336993428119E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442151,
    -6.5614497023245073E-6, 0.0080792362290577832, 0.0038844512459874072,
    -0.026788702408483002, 0.0, 0.00049104314225850373, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228137,
    -6.1601073524460925E-6, 0.0091991288332427812, 0.0053836032115810936,
    -0.035691534155111788, 0.0, 0.00081150591943762143, 0.00052435232813021946,
    -0.0034085439914897236, 0.0077185036154530772, -0.00563726604148579,
    -4.6396980079752287E-6, 0.0092690633506094088, 0.00654832074431959,
    -0.042501234100522735, 0.0, 0.0011189252136054859, 0.00082088448415742121,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424437,
    -2.6414509523473813E-6, 0.0087398966293815786, 0.0073714321358738892,
    -0.047702538425699506, 0.0, 0.001391638779765514, 0.0011501728132765289,
    -0.0073666001295169623, 0.011161718745088724, -0.00820124153324256,
    -5.8494966353776041E-7, 0.0079227307407974644, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.0016207036860207355, 0.0014960212712305321,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969556,
    1.2790233473825676E-6, 0.007020235458604745, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.0018051919142820267, 0.0018435530683128007,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659432,
    2.82239855008753E-6, 0.006154644849868848, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913620006, 0.0021796573224240924,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589607,
    4.0018112448208546E-6, 0.0053912134366169455, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821582, 0.0024933028948330325,
    -0.017104826530695772, 0.017334285099427416, -0.0127345953246283,
    4.8286811668072085E-6, 0.004756876866607529, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590372, -0.0014846744549160561, -7.0936716057342316E-6,
    0.0051391900270571457, -0.0021227702215873057, 0.015228232305159619,
    -5.1746825674618421E-7, -0.0, 0.00019360954683992132, -9.8951619720029927E-5,
    0.00066903596330777557, -0.0040067314306774966, -0.0029322591857517642,
    -1.0565746060026213E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970965, -1.2501804167265802E-6, -0.0, 0.00048137249874376524,
    -0.0002812123096721656, 0.0018515897913409904, -0.0058959962902359461,
    -0.00433805660413819, -1.1566011819059163E-5, 0.0090182698834108191,
    -0.0054509447270126056, 0.035888209656145233, -1.99674342474268E-6, -0.0,
    0.00079779982914970015, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130649, -0.0056981223890151169, -1.0967109079724044E-5,
    0.0091195753483278835, -0.00660567593380442, 0.0427701561488428,
    -2.6308219371928462E-6, -0.0, 0.0011028937830708195, -0.0008275864795065065,
    0.0053069505185103531, -0.0094682805098512523, -0.0070095628750181035,
    -9.4049919993817713E-6, 0.0086253321268044, -0.0074136435021352051,
    0.04804544484898185, -3.079742094619743E-6, -0.0, 0.0013749180814484189,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939333,
    -0.00827058862369585, -7.3245584742921722E-6, 0.0078377590270683056,
    -0.0078869236468970261, 0.052084536642155919, -3.3076191174553654E-6, -0.0,
    0.0016045634974303, -0.001502682321689071, 0.0097046471474189055,
    -0.01278758479729789, -0.009480426545954863, -5.0236620287564823E-6,
    0.0069562410011868225, -0.0080491061052958713, 0.055172377151487914,
    -3.3026429098114466E-6, -0.0, 0.0017904596235921739, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562018, -0.010639161635940208,
    -2.6918556487285661E-6, 0.0061029256813059053, -0.0079329836605401376,
    0.057528472990236557, -3.0679042907758775E-6, -0.0, 0.0019358763409865662,
    -0.0021835932805221218, 0.014653203386246897, -0.01587211736084378,
    -0.01174755497429808, -4.4233786615141425E-7, 0.0053445703843127169,
    -0.007578149996654163, 0.059322164719128156, -2.6150642512061629E-6, -0.0,
    0.002046412901449518, -0.0024952750539298735, 0.017257462274893824,
    -0.017329934052813311, -0.012806866470529164, 1.6630845986044885E-6,
    0.004710183664429741, -0.0070286124953556385, 0.06068425383363444, 0.0, 0.0,
    0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, -0.00019360954683992132, 9.8951619720029927E-5,
    -0.00066903596330777557, 0.0040067314306774966, 0.0029322591857517642,
    1.0565746060026213E-5, -0.0078884598525309352, 0.0039509928253638827,
    -0.026917231873970965, 0.0, -0.00048137249874376524, 0.0002812123096721656,
    -0.0018515897913409904, 0.0058959962902359461, 0.00433805660413819,
    1.1566011819059163E-5, -0.0090182698834108191, 0.0054509447270126056,
    -0.035888209656145233, 0.0, -0.00079779982914970015, 0.000529877384341185,
    -0.0034281815934806724, 0.0077152543580130649, 0.0056981223890151169,
    1.0967109079724044E-5, -0.0091195753483278835, 0.00660567593380442,
    -0.0427701561488428, 0.0, -0.0011028937830708195, 0.0008275864795065065,
    -0.0053069505185103531, 0.0094682805098512523, 0.0070095628750181035,
    9.4049919993817713E-6, -0.0086253321268044, 0.0074136435021352051,
    -0.04804544484898185, 0.0, -0.0013749180814484189, 0.0011572507586087781,
    -0.00741723100352391, 0.011158213201939333, 0.00827058862369585,
    7.3245584742921722E-6, -0.0078377590270683056, 0.0078869236468970261,
    -0.052084536642155919, 0.0, -0.0016045634974303, 0.001502682321689071,
    -0.0097046471474189055, 0.01278758479729789, 0.009480426545954863,
    5.0236620287564823E-6, -0.0069562410011868225, 0.0080491061052958713,
    -0.055172377151487914, 0.0, -0.0017904596235921739, 0.0018491127346458545,
    -0.012127361717645797, 0.014358380565562018, 0.010639161635940208,
    2.6918556487285661E-6, -0.0061029256813059053, 0.0079329836605401376,
    -0.057528472990236557, 0.0, -0.0019358763409865662, 0.0021835932805221218,
    -0.014653203386246897, 0.01587211736084378, 0.01174755497429808,
    4.4233786615141425E-7, -0.0053445703843127169, 0.007578149996654163,
    -0.059322164719128156, 0.0, -0.002046412901449518, 0.0024952750539298735,
    -0.017257462274893824, 0.017329934052813311, 0.012806866470529164,
    -1.6630845986044885E-6, -0.004710183664429741, 0.0070286124953556385,
    -0.06068425383363444, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021016480453829815, 0.0014857887933183288, 4.7070151263154071E-6,
    -0.0050961555194273568, -0.0020754929921346357, -0.015462266265499226,
    3.0426878718878512E-7, -0.0, -0.00019216872658156111, -9.73459460026197E-5,
    -0.0006792751071504849, -0.0041074683619141631, 0.0029340512081696582,
    6.3057460452133893E-6, -0.00782907896809333, -0.0038849506557918018,
    -0.027331354583334473, 6.62734268138552E-7, -0.0, -0.00047814040658582214,
    -0.000277566493848083, -0.0018802229105924365, -0.0060264210814452886,
    0.004340226359465434, 5.9587145352081754E-6, -0.0089598311740056811,
    -0.0053848318467642564, -0.036451644592615427, 9.2636180986459214E-7, -0.0,
    -0.00079309983115135284, -0.00052449064683289992, -0.0034822500476397213,
    -0.0078659750107290677, 0.0057004858091328934, 4.53035250065951E-6,
    -0.009072082021816039, -0.0065504901027000958, -0.04346807648358772,
    1.0194144264559595E-6, -0.0, -0.0010974076290702994, -0.00082115681443972331,
    -0.0053930322171731326, -0.0096322567462445857, 0.0070120285161873611,
    2.6300941233486375E-6, -0.00859341228061931, -0.0073746438770505617,
    -0.048873310311435589, 9.1637309261321483E-7, -0.0, -0.0013694590279160162,
    -0.001150631492424329, -0.0075418405117768745, -0.011330203401756304,
    0.0082731347444936279, 6.6101379080510053E-7, -0.0078222898403132,
    -0.0078653210901301167, -0.053043720345121143, 6.2369573871460046E-7, -0.0,
    -0.0015999229352117736, -0.0014967156366828343, -0.0098744448046202624,
    -0.012963718195152128, 0.009483080190435313, -1.1328950919024518E-6,
    -0.0069556646472008314, -0.0080434495506573524, -0.056266866774456553,
    1.6606812914153242E-7, -0.0, -0.0017873120317849229, -0.001844524963056166,
    -0.012349220884839871, -0.014535826846399721, 0.010641980597964831,
    -2.6245895611173217E-6, -0.0061142707936579412, -0.0079402478608791779,
    -0.058762467425333663, -4.2346592189731472E-7, -0.0, -0.0019347286197374037,
    -0.0021809376864936609, -0.014934176702927581, -0.016048831986543406,
    0.011750612976507081, -3.7686667972724881E-6, -0.0053642122139471188,
    -0.0075945532602473666, -0.060698414364158154, -1.1102016279514345E-6, -0.0,
    -0.002047586031960839, -0.0024949095612962508, -0.017604680748317732,
    -0.017504462457878039, 0.01281024154007194, -4.5731930224289637E-6,
    -0.0047343841216166364, -0.0070502037507671955, -0.062203013141477644, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156111, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696582,
    -6.3057460452133893E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582214, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.004340226359465434,
    -5.9587145352081754E-6, 0.0089598311740056811, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.00079309983115135284, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328934,
    -4.53035250065951E-6, 0.009072082021816039, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702994, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.0070120285161873611,
    -2.6300941233486375E-6, 0.00859341228061931, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160162, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.6101379080510053E-7, 0.0078222898403132, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117736, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.009483080190435313,
    1.1328950919024518E-6, 0.0069556646472008314, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849229, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964831,
    2.6245895611173217E-6, 0.0061142707936579412, 0.0079402478608791779,
    0.058762467425333663, 0.0, 0.0019347286197374037, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507081,
    3.7686667972724881E-6, 0.0053642122139471188, 0.0075945532602473666,
    0.060698414364158154, 0.0, 0.002047586031960839, 0.0024949095612962508,
    0.017604680748317732, 0.017504462457878039, -0.01281024154007194,
    4.5731930224289637E-6, 0.0047343841216166364, 0.0070502037507671955,
    0.062203013141477644, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017572, -7.3113332728645887E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.01539766274083806,
    -5.293595766346033E-7, -0.0, 0.00019955434094002435, -9.8964195788368479E-5,
    -0.00067609777093437923, -0.0041050445656567363, -0.0028891738663263207,
    -1.0821449717137331E-5, 0.0081386171134953875, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960036E-6, -0.0, 0.00049427523441644661,
    -0.00028126666539891307, -0.0018705737454285825, -0.0060234600994775568,
    -0.00428292063329557, -1.1767404636297082E-5, 0.0092575675426479175,
    -0.00545217336219577, -0.036254969091582, -2.021977139046697E-6, -0.0,
    0.00081620591743596853, -0.00053001570304386553, -0.0034626124456487752,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212516, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060056, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.416348828380519E-6, 0.0087718164755666659, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787082E-6, -0.0, 0.0013970978332979158,
    -0.0011577094377565786, -0.007491209637769931, -0.011326697858606906,
    -0.00819869541244478, -7.2484943470248376E-6, 0.0079381999275525677,
    -0.0078911687012202889, -0.0526280524684559, -3.28566710111032E-6, -0.0,
    0.0016253442482392609, -0.0015033766871413736, -0.0098029263852935661,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763732E-6,
    0.0070208118125907343, -0.0080542762665754622, -0.0557823370265015,
    -3.2504945682103177E-6, -0.0, 0.0018083395060892768, -0.0018500846293892205,
    -0.012253512617855847, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583657E-6, 0.00614329973751681, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939009E-6, -0.0, 0.0019499227126111626,
    -0.0021848736445916912, -0.014811305222971739, -0.016044804770756937,
    -0.011671987181380605, -2.0919341860305622E-7, 0.0053715716069825418,
    -0.0075845504191206286, -0.060095092616099251, -2.491016959978449E-6, -0.0,
    0.0020561880408708363, -0.0024968817203930927, -0.017452045004119697,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827252E-6,
    0.0047326764094206318, -0.007035229851983839, -0.061551515639656613, 0.0,
    0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, -0.00019955434094002435, 9.8964195788368479E-5,
    0.00067609777093437923, 0.0041050445656567363, 0.0028891738663263207,
    1.0821449717137331E-5, -0.0081386171134953875, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644661, 0.00028126666539891307,
    0.0018705737454285825, 0.0060234600994775568, 0.00428292063329557,
    1.1767404636297082E-5, -0.0092575675426479175, 0.00545217336219577,
    0.036254969091582, 0.0, -0.00081620591743596853, 0.00053001570304386553,
    0.0034626124456487752, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212516, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060056, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.416348828380519E-6, -0.0087718164755666659, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979158, 0.0011577094377565786,
    0.007491209637769931, 0.011326697858606906, 0.00819869541244478,
    7.2484943470248376E-6, -0.0079381999275525677, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392609, 0.0015033766871413736,
    0.0098029263852935661, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763732E-6, -0.0070208118125907343, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892768, 0.0018500846293892205,
    0.012253512617855847, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583657E-6, -0.00614329973751681, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111626, 0.0021848736445916912,
    0.014811305222971739, 0.016044804770756937, 0.011671987181380605,
    2.0919341860305622E-7, -0.0053715716069825418, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708363, 0.0024968817203930927,
    0.017452045004119697, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827252E-6, -0.0047326764094206318, 0.007035229851983839,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496928, 0.00048221414518065207, 0.0020535983066627922,
    0.02239703294428403, -0.011382823490747533, -4.5300466257935381E-5,
    0.00020111824649365369, -0.0, 0.0008351968162215236, -0.00052693283295635138,
    -1.4202292023779353E-6, 0.00056258770077962511, 0.00080001208779628772,
    0.0040222089662175116, 0.034075479854978261, -0.021043808615419379,
    -6.0914557418032515E-5, 0.00059482891125992271, -0.0, 0.0020621431062848592,
    -0.0014904815292193945, -3.3998696950912798E-6, 0.00075646106685663106,
    0.00099363790528140769, 0.0059054831078212966, 0.038583750917710685,
    -0.028829764251451333, -7.173583655156873E-5, 0.0011726262150481641, -0.0,
    0.0033929136972443525, -0.00279498368772149, -6.2738005970893276E-6,
    0.00087950249413920069, 0.0010977323314750817, 0.0077041407928327083,
    0.038610702862460149, -0.034678824448749812, -9.9958287731080519E-5,
    0.0019261216668453418, -0.0, 0.0046549264815772193, -0.0043437906953855288,
    -1.1349003863154773E-5, 0.00092769306525124077, 0.0011404644798644042,
    0.009419772323318653, 0.036103268168904447, -0.038611763746433325,
    -0.00016194825176056718, 0.0028471204265186336, -0.0, 0.0057572468853912644,
    -0.0060431370141094806, -2.0579570862839974E-5, 0.00090087854130221294,
    0.001143657327183455, 0.011054625516548589, 0.032403592626321823,
    -0.04072118239331815, -0.00026717427891659356, 0.0039276769289651294, -0.0,
    0.00666376541296399, -0.0078054281883259006, -3.6223635885386171E-5,
    0.00080226872093682746, 0.0011234628800830134, 0.012611407038876496,
    0.028384129958974068, -0.041159175748152546, -0.00041844655161156377,
    0.0051601319868246533, -0.0, 0.0073728135925645831, -0.00955188773329919,
    -6.053307029146797E-5, 0.00063786668577865517, 0.0010912837713868079,
    0.014093112150810595, 0.024568713767860049, -0.040124126137914669,
    -0.00061290951136035914, 0.0065371345335159294, -0.0, 0.0079023594828677973,
    -0.011214534686086313, -9.5503092630370764E-5, 0.00041585923480478323,
    0.0010547464749837698, 0.015502888074725239, 0.021234175454636826,
    -0.037847237535387088, -0.00084339143145200431, 0.00805165138168979, -0.0,
    0.0082797661137407261, -0.012737493468585184, -0.0001426924602110768,
    0.00014599763913536538, 0.001018611145724166, 0.016843930534120113,
    0.018491293400464751, -0.034579382681332371, -0.0010998423450844811, 0.0,
    0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, -0.0008351968162215236, 0.00052693283295635138,
    1.4202292023779353E-6, -0.00056258770077962511, -0.00080001208779628772,
    -0.0040222089662175116, -0.034075479854978261, 0.021043808615419379,
    6.0914557418032515E-5, 0.0, -0.0020621431062848592, 0.0014904815292193945,
    3.3998696950912798E-6, -0.00075646106685663106, -0.00099363790528140769,
    -0.0059054831078212966, -0.038583750917710685, 0.028829764251451333,
    7.173583655156873E-5, 0.0, -0.0033929136972443525, 0.00279498368772149,
    6.2738005970893276E-6, -0.00087950249413920069, -0.0010977323314750817,
    -0.0077041407928327083, -0.038610702862460149, 0.034678824448749812,
    9.9958287731080519E-5, 0.0, -0.0046549264815772193, 0.0043437906953855288,
    1.1349003863154773E-5, -0.00092769306525124077, -0.0011404644798644042,
    -0.009419772323318653, -0.036103268168904447, 0.038611763746433325,
    0.00016194825176056718, 0.0, -0.0057572468853912644, 0.0060431370141094806,
    2.0579570862839974E-5, -0.00090087854130221294, -0.001143657327183455,
    -0.011054625516548589, -0.032403592626321823, 0.04072118239331815,
    0.00026717427891659356, 0.0, -0.00666376541296399, 0.0078054281883259006,
    3.6223635885386171E-5, -0.00080226872093682746, -0.0011234628800830134,
    -0.012611407038876496, -0.028384129958974068, 0.041159175748152546,
    0.00041844655161156377, 0.0, -0.0073728135925645831, 0.00955188773329919,
    6.053307029146797E-5, -0.00063786668577865517, -0.0010912837713868079,
    -0.014093112150810595, -0.024568713767860049, 0.040124126137914669,
    0.00061290951136035914, 0.0, -0.0079023594828677973, 0.011214534686086313,
    9.5503092630370764E-5, -0.00041585923480478323, -0.0010547464749837698,
    -0.015502888074725239, -0.021234175454636826, 0.037847237535387088,
    0.00084339143145200431, 0.0, -0.0082797661137407261, 0.012737493468585184,
    0.0001426924602110768, -0.00014599763913536538, -0.001018611145724166,
    -0.016843930534120113, -0.018491293400464751, 0.034579382681332371,
    0.0010998423450844811, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.0003062394217119654, -0.00047731536664842925, -0.0020665268130396616,
    -0.022172426283366312, -0.011387616330349713, 0.00015666644814812003,
    -0.0002022625931303291, -0.0, -0.00082774518149017668, -0.000529592610445747,
    5.7389299890772084E-6, 0.00056396725231741671, -0.00079224661923222445,
    -0.0040450830466660873, -0.033768034595554684, -0.021141612605666528,
    0.00022480793913855977, -0.00059796183300178749, -0.0,
    -0.0020455667486544604, -0.0015016832971963196, 1.2281171297667533E-5,
    0.00075945441536740606, -0.0009843707517287496, -0.0059353031721315541,
    -0.038284778592207587, -0.029063239819559016, 0.00018775158260361411,
    -0.0011782958644571567, -0.0, -0.0033690819832402769, -0.0028218463087974089,
    1.4332584980973895E-5, 0.00088370610807833507, -0.0010877588806645177,
    -0.0077380022415320937, -0.03837241722031557, -0.035056627436016605,
    4.6343639124359488E-5, -0.0019345945407556694, -0.0, -0.0046275598281651058,
    -0.0043932358301320314, 6.920257210320176E-6, 0.0009321934846738553,
    -0.0011301251608970202, -0.0094549611400509669, -0.035949097799074847,
    -0.039118963178182836, -0.00018840012431222786, -0.0028584044719204794, -0.0,
    -0.0057307040828358151, -0.0061209378716336575, -1.4228364171763735E-5,
    0.00090443930240191107, -0.0011329532079862735, -0.011088696165303912,
    -0.032336970688930627, -0.04132810309639473, -0.00050011991607834528,
    -0.0039415515091365486, -0.0, -0.0066422289273360543, -0.0079156577616609179,
    -5.2501371284616778E-5, 0.00080349399699248939, -0.0011121622881278004,
    -0.012642241664372786, -0.028395620667837813, -0.0418285314829304,
    -0.00087020044792009415, -0.0051761828183116993, -0.0,
    -0.0073597906534701735, -0.00969668181913341, -0.00011034171177573492,
    0.0006353379826807698, -0.0010790145827917301, -0.014118960812822058,
    -0.024641539531302634, -0.040816497866809458, -0.0012796998356205372,
    -0.00655479171491834, -0.0, -0.0079004230433163732, -0.011394090655931458,
    -0.00018926275707432277, 0.00040824404672798562, -0.0010410718558982626,
    -0.015522390488027808, -0.021348319198257911, -0.0385250575094498,
    -0.0017105267608725739, -0.0080702287172710677, -0.0, -0.008290469892862088,
    -0.01295023522278608, -0.00028990993190658839, 0.00013213075603135004,
    -0.0010030885797492422, -0.01685612046981471, -0.018626398129647875,
    -0.035209634693518316, -0.0021461428964605904, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.00082774518149017668, 0.000529592610445747, -5.7389299890772084E-6,
    -0.00056396725231741671, 0.00079224661923222445, 0.0040450830466660873,
    0.033768034595554684, 0.021141612605666528, -0.00022480793913855977, 0.0,
    0.0020455667486544604, 0.0015016832971963196, -1.2281171297667533E-5,
    -0.00075945441536740606, 0.0009843707517287496, 0.0059353031721315541,
    0.038284778592207587, 0.029063239819559016, -0.00018775158260361411, 0.0,
    0.0033690819832402769, 0.0028218463087974089, -1.4332584980973895E-5,
    -0.00088370610807833507, 0.0010877588806645177, 0.0077380022415320937,
    0.03837241722031557, 0.035056627436016605, -4.6343639124359488E-5, 0.0,
    0.0046275598281651058, 0.0043932358301320314, -6.920257210320176E-6,
    -0.0009321934846738553, 0.0011301251608970202, 0.0094549611400509669,
    0.035949097799074847, 0.039118963178182836, 0.00018840012431222786, 0.0,
    0.0057307040828358151, 0.0061209378716336575, 1.4228364171763735E-5,
    -0.00090443930240191107, 0.0011329532079862735, 0.011088696165303912,
    0.032336970688930627, 0.04132810309639473, 0.00050011991607834528, 0.0,
    0.0066422289273360543, 0.0079156577616609179, 5.2501371284616778E-5,
    -0.00080349399699248939, 0.0011121622881278004, 0.012642241664372786,
    0.028395620667837813, 0.0418285314829304, 0.00087020044792009415, 0.0,
    0.0073597906534701735, 0.00969668181913341, 0.00011034171177573492,
    -0.0006353379826807698, 0.0010790145827917301, 0.014118960812822058,
    0.024641539531302634, 0.040816497866809458, 0.0012796998356205372, 0.0,
    0.0079004230433163732, 0.011394090655931458, 0.00018926275707432277,
    -0.00040824404672798562, 0.0010410718558982626, 0.015522390488027808,
    0.021348319198257911, 0.0385250575094498, 0.0017105267608725739, 0.0,
    0.008290469892862088, 0.01295023522278608, 0.00028990993190658839,
    -0.00013213075603135004, 0.0010030885797492422, 0.01685612046981471,
    0.018626398129647875, 0.035209634693518316, 0.0021461428964605904, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00031185892138120829,
    -0.000502570134369898, 0.0021189752999033816, -0.023341150699844014,
    0.011594289336350715, 4.8538698886608527E-5, 0.00020586795104612229, -0.0,
    -0.00086995623361496794, 0.00053660101735923357, 1.5306708468308135E-6,
    -0.00057297910874745141, -0.00083359519431663409, 0.004119248160739955,
    -0.035495899890902981, 0.021430149447512051, 6.5408284223244733E-5,
    0.0006062711891352639, -0.0, -0.0021471788857608371, 0.0015176122837254379,
    3.6460185703158003E-6, -0.000770344917774514, -0.00103515532550392,
    0.0060112845231374149, -0.040171560763765359, 0.029352888902237737,
    7.6101215650564729E-5, 0.0011908412917109572, -0.0, -0.0035314309384240458,
    0.0028454618318544097, 6.6294921173456258E-6, -0.00089555200508320771,
    -0.0011434481783357154, 0.0078039387061703035, -0.040176177008991183,
    0.035300685361534523, 0.00010352169015720698, 0.0019500242678547552, -0.0,
    -0.00484290600122265, 0.0044216287235151188, 1.1770888489239837E-5,
    -0.00094453662973384314, -0.0011878922635308329, 0.0095046860602438672,
    -0.037542072616071218, 0.039295727814625446, 0.00016467428301353407,
    0.0028749549914754272, -0.0, -0.0059870067172350123, 0.0061505759056418863,
    2.1035254999411097E-5, -0.00091716878475691331, -0.0011912658049384609,
    0.011119868808881342, -0.033669554571301941, 0.041433198448315861,
    0.00026950643131986451, 0.0039573555927472342, -0.0, -0.0069263207498740835,
    0.0079430910275364534, 3.6711018305390747E-5, -0.00081674138386906268,
    -0.0011704175763008584, 0.012654925863460519, -0.029468311129123046,
    0.041868716552104328, 0.0004211223488868039, 0.0051894553636579882, -0.0,
    -0.0076593329913997111, 0.00971897451281721, 6.1090607957708861E-5,
    -0.000649388305425708, -0.0011372333641091231, 0.014114591733434101,
    -0.025484039012415027, 0.040804892537124521, 0.00061678702026516556,
    0.00656392875731367, -0.0, -0.0082049716994792871, 0.01140904630781259,
    9.6212106762538893E-5, -0.00042346315376165077, -0.0010996549666288829,
    0.01550305918633214, -0.022004664482222366, 0.038477622702890485,
    0.00084930644176672517, 0.00807384784685867, -0.0, -0.008591923151116421,
    0.012956473101216526, 0.00014367324314189093, -0.00014890838604834526,
    -0.0010626319711789323, 0.016824106212107545, -0.019144919197986585,
    0.035142704197345845, 0.0011085037444974739, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.00086995623361496794, -0.00053660101735923357, -1.5306708468308135E-6,
    0.00057297910874745141, 0.00083359519431663409, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.5408284223244733E-5, 0.0,
    0.0021471788857608371, -0.0015176122837254379, -3.6460185703158003E-6,
    0.000770344917774514, 0.00103515532550392, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237737, -7.6101215650564729E-5, 0.0,
    0.0035314309384240458, -0.0028454618318544097, -6.6294921173456258E-6,
    0.00089555200508320771, 0.0011434481783357154, -0.0078039387061703035,
    0.040176177008991183, -0.035300685361534523, -0.00010352169015720698, 0.0,
    0.00484290600122265, -0.0044216287235151188, -1.1770888489239837E-5,
    0.00094453662973384314, 0.0011878922635308329, -0.0095046860602438672,
    0.037542072616071218, -0.039295727814625446, -0.00016467428301353407, 0.0,
    0.0059870067172350123, -0.0061505759056418863, -2.1035254999411097E-5,
    0.00091716878475691331, 0.0011912658049384609, -0.011119868808881342,
    0.033669554571301941, -0.041433198448315861, -0.00026950643131986451, 0.0,
    0.0069263207498740835, -0.0079430910275364534, -3.6711018305390747E-5,
    0.00081674138386906268, 0.0011704175763008584, -0.012654925863460519,
    0.029468311129123046, -0.041868716552104328, -0.0004211223488868039, 0.0,
    0.0076593329913997111, -0.00971897451281721, -6.1090607957708861E-5,
    0.000649388305425708, 0.0011372333641091231, -0.014114591733434101,
    0.025484039012415027, -0.040804892537124521, -0.00061678702026516556, 0.0,
    0.0082049716994792871, -0.01140904630781259, -9.6212106762538893E-5,
    0.00042346315376165077, 0.0010996549666288829, -0.01550305918633214,
    0.022004664482222366, -0.038477622702890485, -0.00084930644176672517, 0.0,
    0.008591923151116421, -0.012956473101216526, -0.00014367324314189093,
    0.00014890838604834526, 0.0010626319711789323, -0.016824106212107545,
    0.019144919197986585, -0.035142704197345845, -0.0011085037444974739, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572542,
    0.00049767135583767507, -0.0021060467935265117, 0.023116544038926296,
    0.01117615048474652, -0.00015990468077679308, -0.00020472360440944683, -0.0,
    0.00086250459888362091, 0.00051992442604286435, -5.8493716335300827E-6,
    -0.00055357584434958824, 0.00082582972575257082, -0.0040963740802913793,
    0.035188454631479404, 0.020755271773573836, -0.00022930166594377187,
    -0.0006031382673933989, -0.0, 0.0021306025281304384, 0.0014745525426902747,
    -1.2527320172892045E-5, -0.00074557056444952031, 0.001025888171951262,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772584,
    -0.00019211696170261, -0.0011851716423019645, -0.0, 0.0035075992244199706,
    0.0027713681646644867, -1.4688276501230182E-5, -0.00086765659713432448,
    0.0011334747275251512, -0.0077700772574709181, 0.039937891366846605,
    0.034434766523231866, -4.990704155048592E-5, -0.0019415513939444271, -0.0,
    0.0048155393478105379, 0.0043153978020024379, -7.3421418364052275E-6,
    -0.0009153499201912487, 0.0011775529445634484, -0.0094694972435115515,
    0.037387902246241611, 0.038434999109990681, 0.00018567409305926088,
    -0.002863670946073581, -0.0, 0.0059604639146795648, 0.0060134989801012466,
    1.3772680035192611E-5, -0.000888149058947206, 0.001180561685741279,
    -0.011085798160126016, 0.033602932633910738, 0.040616087041396992,
    0.0004977877636750741, -0.0039434810125758141, -0.0, 0.00690478426424615,
    0.0077779949224503582, 5.2013988864612175E-5, -0.00078902133406024907,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986781,
    0.04111899067897859, 0.00086752465064485358, -0.0051734045321709405, -0.0,
    0.0076463100523053032, 0.0095295950396153822, 0.00010978417410949397,
    -0.00062381636303371151, 0.0011249641755140447, -0.014088743071422632,
    0.0255568647758576, 0.040135731467599578, 0.0012758223267157302,
    -0.006546271575911259, -0.0, 0.0082030352599278648, 0.011199579034205171,
    0.00018855374294215457, -0.00040064012777111233, 0.001085980347543375,
    -0.015483556773029566, 0.022118808225843441, 0.037894672341946385,
    0.0017046117505578522, -0.0080552705112773917, -0.0, 0.0086026269302377847,
    0.012731255590154728, 0.0002889291489757741, -0.0001292200091183642,
    0.0010471094052040078, -0.016811916276412941, 0.0192800239271697,
    0.034646313177504821, 0.0021374814970475968, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    -0.00086250459888362091, -0.00051992442604286435, 5.8493716335300827E-6,
    0.00055357584434958824, -0.00082582972575257082, 0.0040963740802913793,
    -0.035188454631479404, -0.020755271773573836, 0.00022930166594377187, 0.0,
    -0.0021306025281304384, -0.0014745525426902747, 1.2527320172892045E-5,
    0.00074557056444952031, -0.001025888171951262, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772584, 0.00019211696170261, 0.0,
    -0.0035075992244199706, -0.0027713681646644867, 1.4688276501230182E-5,
    0.00086765659713432448, -0.0011334747275251512, 0.0077700772574709181,
    -0.039937891366846605, -0.034434766523231866, 4.990704155048592E-5, 0.0,
    -0.0048155393478105379, -0.0043153978020024379, 7.3421418364052275E-6,
    0.0009153499201912487, -0.0011775529445634484, 0.0094694972435115515,
    -0.037387902246241611, -0.038434999109990681, -0.00018567409305926088, 0.0,
    -0.0059604639146795648, -0.0060134989801012466, -1.3772680035192611E-5,
    0.000888149058947206, -0.001180561685741279, 0.011085798160126016,
    -0.033602932633910738, -0.040616087041396992, -0.0004977877636750741, 0.0,
    -0.00690478426424615, -0.0077779949224503582, -5.2013988864612175E-5,
    0.00078902133406024907, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986781, -0.04111899067897859, -0.00086752465064485358, 0.0,
    -0.0076463100523053032, -0.0095295950396153822, -0.00010978417410949397,
    0.00062381636303371151, -0.0011249641755140447, 0.014088743071422632,
    -0.0255568647758576, -0.040135731467599578, -0.0012758223267157302, 0.0,
    -0.0082030352599278648, -0.011199579034205171, -0.00018855374294215457,
    0.00040064012777111233, -0.001085980347543375, 0.015483556773029566,
    -0.022118808225843441, -0.037894672341946385, -0.0017046117505578522, 0.0,
    -0.0086026269302377847, -0.012731255590154728, -0.0002889291489757741,
    0.0001292200091183642, -0.0010471094052040078, 0.016811916276412941,
    -0.0192800239271697, -0.034646313177504821, -0.0021374814970475968, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0 };

  static const int8_T c_0[3003]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T d_1[4851]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422014, 0.00023231657375355515, 0.00085021850252945286,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531576,
    -1.8831321574108635, 0.0081315634991630872, 0.031843900678722038, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403592E-6,
    -2.7393041473633996E-5, 0.0, 0.00022368763943092469, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231477,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153033E-8,
    4.698526643327685E-7, 0.0, -3.7822888752804934E-6, 0.00035289231485000278,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502516E-7,
    8.9811567385581109E-6, -0.0001312690294498295, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779442E-6, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.260627473650893E-7,
    2.6894872029217169E-6, 0.0975461597654075, 0.0, 0.00010755525579326826,
    -2.1621574234746449E-5, -2.1868160728403114E-7, 1.3780352347645447E-5,
    4.726345500155462E-5, 0.95132850476213759, 0.0038484242973110937,
    -0.00083332348166736752, -7.02052193286396E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886007E-5, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674952848E-5, 0.0464090538358248, 2.4610229279834437E-5,
    0.0030919673412285178, 1.7576703166230984E-5, -9.7029434768206214E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.444384898559637E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001062E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069355,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382172E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T h_0[390]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0 };

  static const int8_T b_D[4290]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int32_T b_Mrows_1[226]{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83,
    84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
    104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122,
    123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140,
    141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161,
    162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200,
    201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218,
    219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257,
    258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 341, 342, 343, 344,
    345, 346, 347, 348 };

  static const real_T o[4746]{ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.00013605399495041681, -0.0, -0.94789999991422014,
    -0.00023231657375355515, -0.00085021850252945286, 7.4644574418929129E-5,
    0.042372304854011958, -0.0024338870206531576, 1.8831321574108635,
    -0.0081315634991630872, -0.031843900678722038, -0.00043991587755701022, -0.0,
    -0.828274284000475, -0.00071829654764050629, -0.0029829453882918139,
    6.2742313041972962E-5, 0.068633766567946786, -0.0034563974704851005,
    2.7676057047313591, -0.010552632650718258, -0.051628892588367392,
    -0.000797860786853296, -0.0, -0.6818963849413, -0.0012286665032447553,
    -0.0058496233936728374, -3.1342376034699586E-6, 0.083007916472729,
    -0.003589951713511725, 3.0036280976220535, -0.0094211711536435691,
    -0.061610545902671086, -0.0011410576782314461, -0.0, -0.5343495115843353,
    -0.0016286283183268835, -0.009021749356792794, -9.6497485535298051E-5,
    0.089026322360653609, -0.0032141564747645412, 2.8508353066487375,
    -0.0063671417100739421, -0.064250485451778416, -0.0014325731407650161, -0.0,
    -0.40019752452245955, -0.0018530175296307711, -0.012190593430831249,
    -0.00019695320686910958, 0.089492468630921779, -0.0025917690009131036,
    2.4929537206563293, -0.0025585879149516806, -0.06183312975738009,
    -0.0016569902495300276, -0.0, -0.28639136612488808, -0.0018851780974144152,
    -0.015153038865694132, -0.00028975242367587249, 0.086530782400458847,
    -0.0018944998662235903, 2.0533176075220276, 0.0012185274404540411,
    -0.056279995134445246, -0.0018124939712245022, -0.0, -0.19491893240955566,
    -0.0017398890238911875, -0.017791541512902187, -0.00036509371430410771,
    0.081679081417085062, -0.0012262657643497255, 1.6093908771185077,
    0.0044797329146593753, -0.049090033389302089, -0.00190510419796492, -0.0,
    -0.124775007481606, -0.0014501747445117856, -0.020053144545853434,
    -0.00041731907030702434, 0.075996736268228768, -0.00064278595634549422,
    1.2053422929471271, 0.0069681642442896569, -0.0413543415391572,
    -0.00194467159446681, -0.0, -0.073359348722708, -0.0010575604252408858,
    -0.021930316193073212, -0.00044409726735761094, 0.0701713979243816,
    -0.00016724585586822834, 0.86232253270031667, 0.00859101399456172,
    -0.033809555227781458, -0.0019422508947259363, -0.0, -0.037418484576088193,
    -0.00060521904635098484, -0.023444915627093114, -0.00044565246726613762,
    0.064614740447960034, 0.00019775366639506007, 0.58646352157906634,
    0.0093674482180796936, -0.026906527742490981, 0.0, 0.94789999991422014,
    0.00023231657375355515, 0.00085021850252945286, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531576, -1.8831321574108635,
    0.0081315634991630872, 0.031843900678722038, 0.0, 0.828274284000475,
    0.00071829654764050629, 0.0029829453882918139, -6.2742313041972962E-5,
    -0.068633766567946786, 0.0034563974704851005, -2.7676057047313591,
    0.010552632650718258, 0.051628892588367392, 0.0, 0.6818963849413,
    0.0012286665032447553, 0.0058496233936728374, 3.1342376034699586E-6,
    -0.083007916472729, 0.003589951713511725, -3.0036280976220535,
    0.0094211711536435691, 0.061610545902671086, 0.0, 0.5343495115843353,
    0.0016286283183268835, 0.009021749356792794, 9.6497485535298051E-5,
    -0.089026322360653609, 0.0032141564747645412, -2.8508353066487375,
    0.0063671417100739421, 0.064250485451778416, 0.0, 0.40019752452245955,
    0.0018530175296307711, 0.012190593430831249, 0.00019695320686910958,
    -0.089492468630921779, 0.0025917690009131036, -2.4929537206563293,
    0.0025585879149516806, 0.06183312975738009, 0.0, 0.28639136612488808,
    0.0018851780974144152, 0.015153038865694132, 0.00028975242367587249,
    -0.086530782400458847, 0.0018944998662235903, -2.0533176075220276,
    -0.0012185274404540411, 0.056279995134445246, 0.0, 0.19491893240955566,
    0.0017398890238911875, 0.017791541512902187, 0.00036509371430410771,
    -0.081679081417085062, 0.0012262657643497255, -1.6093908771185077,
    -0.0044797329146593753, 0.049090033389302089, 0.0, 0.124775007481606,
    0.0014501747445117856, 0.020053144545853434, 0.00041731907030702434,
    -0.075996736268228768, 0.00064278595634549422, -1.2053422929471271,
    -0.0069681642442896569, 0.0413543415391572, 0.0, 0.073359348722708,
    0.0010575604252408858, 0.021930316193073212, 0.00044409726735761094,
    -0.0701713979243816, 0.00016724585586822834, -0.86232253270031667,
    -0.00859101399456172, 0.033809555227781458, 0.0, 0.037418484576088193,
    0.00060521904635098484, 0.023444915627093114, 0.00044565246726613762,
    -0.064614740447960034, -0.00019775366639506007, -0.58646352157906634,
    -0.0093674482180796936, 0.026906527742490981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7393041473633996E-5,
    -0.0, -0.00022368763943092469, -0.97943363183036425, -0.0014929610497083712,
    -0.039186425137886907, -5.6614700144598253E-5, 0.00052789703364104388,
    -0.0078377521590508176, 0.80137776286231477, -0.056970805070725557,
    0.00010157607708522483, -0.0, -0.0006928899227488009, -0.92211339111192792,
    -0.00543690319059872, -0.073285774807074919, -4.6123839395337341E-5,
    0.00093583978277490387, -0.010204973422867386, 1.4679406075353216,
    -0.098330079431672449, 0.00021063569275170898, -0.0, -0.00118742477138997,
    -0.83504975370190071, -0.011094759552566745, -0.10151242737070898,
    6.5054042471130283E-6, 0.0012261501164608831, -0.0091500321471800414,
    1.9901277003085573, -0.12581707960111752, 0.00034308538224961334, -0.0,
    -0.0015770310792981481, -0.72555251236862717, -0.017816474142573421,
    -0.12341988813173868, 8.0264143073424557E-5, 0.0014049447068710742,
    -0.0062288168520714619, 2.3654096906129847, -0.14117636261848396,
    0.00048821416801761794, -0.0, -0.0017980869265099067, -0.60089840920731241,
    -0.025039554537448942, -0.13887539377535754, 0.00015870565009723183,
    0.0014815086013838215, -0.0025623484843079023, 2.5974908015098239,
    -0.14616521878490271, 0.00063637010650355059, -0.0, -0.0018336500124171166,
    -0.46804262274960007, -0.032289457713019082, -0.14802510882141279,
    0.00022990541532277067, 0.0014676225862297065, 0.0010906382789437497,
    2.6953622560768009, -0.14254095855242194, 0.00077917513704307188, -0.0,
    -0.0016972204487183172, -0.33338010549621289, -0.039178997027587086,
    -0.15125252723439678, 0.000286040975696016, 0.0013768668571441957,
    0.004259024861492205, 2.672264103686758, -0.13203559714993138,
    0.00090967019280314434, -0.0, -0.0014201240320154262, -0.20255999629099947,
    -0.045406297008819305, -0.14913262935985511, 0.00032277752150717767,
    0.0012239270282170202, 0.0066900551015905479, 2.5446089159537979,
    -0.11632397297836967, 0.0010223921260931036, -0.0, -0.0010421382438367184,
    -0.080353784609753856, -0.050751090741705619, -0.14238418727481639,
    0.00033858449201523894, 0.001023928636687647, 0.0082892702061722542,
    2.3309155290919734, -0.0969900191888171, 0.0011133865157176926, -0.0,
    -0.000604860594289518, 0.029424345381619813, -0.055069361216714394,
    -0.13182237870724534, 0.00033406267949034608, 0.00079182395248273969,
    0.0090709498678183311, 2.0507944495975989, -0.075494757610177043, 0.0,
    0.00022368763943092469, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231477, 0.056970805070725557, 0.0,
    0.0006928899227488009, 0.92211339111192792, 0.00543690319059872,
    0.073285774807074919, 4.6123839395337341E-5, -0.00093583978277490387,
    0.010204973422867386, -1.4679406075353216, 0.098330079431672449, 0.0,
    0.00118742477138997, 0.83504975370190071, 0.011094759552566745,
    0.10151242737070898, -6.5054042471130283E-6, -0.0012261501164608831,
    0.0091500321471800414, -1.9901277003085573, 0.12581707960111752, 0.0,
    0.0015770310792981481, 0.72555251236862717, 0.017816474142573421,
    0.12341988813173868, -8.0264143073424557E-5, -0.0014049447068710742,
    0.0062288168520714619, -2.3654096906129847, 0.14117636261848396, 0.0,
    0.0017980869265099067, 0.60089840920731241, 0.025039554537448942,
    0.13887539377535754, -0.00015870565009723183, -0.0014815086013838215,
    0.0025623484843079023, -2.5974908015098239, 0.14616521878490271, 0.0,
    0.0018336500124171166, 0.46804262274960007, 0.032289457713019082,
    0.14802510882141279, -0.00022990541532277067, -0.0014676225862297065,
    -0.0010906382789437497, -2.6953622560768009, 0.14254095855242194, 0.0,
    0.0016972204487183172, 0.33338010549621289, 0.039178997027587086,
    0.15125252723439678, -0.000286040975696016, -0.0013768668571441957,
    -0.004259024861492205, -2.672264103686758, 0.13203559714993138, 0.0,
    0.0014201240320154262, 0.20255999629099947, 0.045406297008819305,
    0.14913262935985511, -0.00032277752150717767, -0.0012239270282170202,
    -0.0066900551015905479, -2.5446089159537979, 0.11632397297836967, 0.0,
    0.0010421382438367184, 0.080353784609753856, 0.050751090741705619,
    0.14238418727481639, -0.00033858449201523894, -0.001023928636687647,
    -0.0082892702061722542, -2.3309155290919734, 0.0969900191888171, 0.0,
    0.000604860594289518, -0.029424345381619813, 0.055069361216714394,
    0.13182237870724534, -0.00033406267949034608, -0.00079182395248273969,
    -0.0090709498678183311, -2.0507944495975989, 0.075494757610177043, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -4.698526643327685E-7, -0.0, 3.7822888752804934E-6,
    -0.00035289231485000278, 3.4189139533984093E-5, -0.95461902809957677,
    7.1100422694502516E-7, -8.9811567385581109E-6, 0.0001312690294498295,
    -0.013640927712662433, 0.0012950988615465717, -1.7147269904128773E-6, -0.0,
    1.150767340776896E-5, -0.001315566365993538, 0.00012285543303127417,
    -0.91135406143948428, 3.3163316882791379E-7, -1.5519561417705546E-5,
    0.00016502531726898077, -0.02437486627411839, 0.0021906279895870522,
    -3.4972112753480519E-6, -0.0, 1.9307665671200697E-5, -0.0027413219232082322,
    0.00024768220209586342, -0.87012380424921076, -6.8812811117453457E-7,
    -1.9763302213130122E-5, 0.00013982125919807827, -0.032169433587467634,
    0.002751745249648645, -5.5977294121393286E-6, -0.0, 2.4989979045618723E-5,
    -0.0044849430478703716, 0.00039342983713991055, -0.83084483046096391,
    -1.9796506295754575E-6, -2.1918801185016628E-5, 8.4343468160018214E-5,
    -0.037113411718708571, 0.003036672947804085, -7.8197074306271E-6, -0.0,
    2.7577534552949828E-5, -0.0064082900969058146, 0.00054762695322665067,
    -0.793432109991374, -3.2636836733291796E-6, -2.2237423184653563E-5,
    1.8765440426749884E-5, -0.039397727302456866, 0.00309809039554805,
    -9.9933900139764223E-6, -0.0, 2.6921553480488338E-5, -0.0083848942547339062,
    0.00070031450657208035, -0.75779967207486343, -4.3468217299391308E-6,
    -2.1001923672367668E-5, -4.369046432035507E-5, -0.039294754138992867,
    0.002983898890566264, -1.1978309599851326E-5, -0.0, 2.3392946258553521E-5,
    -0.010303497261330055, 0.00084381691343032752, -0.72386135489367576,
    -5.1114348042188516E-6, -1.8513122731324463E-5, -9.5211988147831173E-5,
    -0.037136984758420775, 0.0027375673439149939, -1.3664452072861686E-5, -0.0,
    1.7647377061867673E-5, -0.01207052875767038, 0.00097252341176911846,
    -0.69153159412636034, -5.5025454870940645E-6, -1.507723451236707E-5,
    -0.00013200584315001913, -0.033296009575319148, 0.0023982197708525069,
    -1.497220553904411E-5, -0.0, 1.0454783952045055E-5, -0.013611557377969874,
    0.0010826699647867736, -0.6607262078574051, -5.5139498958081246E-6,
    -1.099426428108596E-5, -0.00015311621421909343, -0.028162610037210684,
    0.0020005870008040919, -1.58512172573075E-5, -0.0, 2.5823510576951064E-6,
    -0.014871788389995259, 0.0011721172939975261, -0.63136314118173154,
    -5.1749995919122709E-6, -6.5478271176522308E-6, -0.00015946802271606859,
    -0.022128624315847611, 0.0015749128178946061, 0.0, -3.7822888752804934E-6,
    0.00035289231485000278, -3.4189139533984093E-5, 0.95461902809957677,
    -7.1100422694502516E-7, 8.9811567385581109E-6, -0.0001312690294498295,
    0.013640927712662433, -0.0012950988615465717, 0.0, -1.150767340776896E-5,
    0.001315566365993538, -0.00012285543303127417, 0.91135406143948428,
    -3.3163316882791379E-7, 1.5519561417705546E-5, -0.00016502531726898077,
    0.02437486627411839, -0.0021906279895870522, 0.0, -1.9307665671200697E-5,
    0.0027413219232082322, -0.00024768220209586342, 0.87012380424921076,
    6.8812811117453457E-7, 1.9763302213130122E-5, -0.00013982125919807827,
    0.032169433587467634, -0.002751745249648645, 0.0, -2.4989979045618723E-5,
    0.0044849430478703716, -0.00039342983713991055, 0.83084483046096391,
    1.9796506295754575E-6, 2.1918801185016628E-5, -8.4343468160018214E-5,
    0.037113411718708571, -0.003036672947804085, 0.0, -2.7577534552949828E-5,
    0.0064082900969058146, -0.00054762695322665067, 0.793432109991374,
    3.2636836733291796E-6, 2.2237423184653563E-5, -1.8765440426749884E-5,
    0.039397727302456866, -0.00309809039554805, 0.0, -2.6921553480488338E-5,
    0.0083848942547339062, -0.00070031450657208035, 0.75779967207486343,
    4.3468217299391308E-6, 2.1001923672367668E-5, 4.369046432035507E-5,
    0.039294754138992867, -0.002983898890566264, 0.0, -2.3392946258553521E-5,
    0.010303497261330055, -0.00084381691343032752, 0.72386135489367576,
    5.1114348042188516E-6, 1.8513122731324463E-5, 9.5211988147831173E-5,
    0.037136984758420775, -0.0027375673439149939, 0.0, -1.7647377061867673E-5,
    0.01207052875767038, -0.00097252341176911846, 0.69153159412636034,
    5.5025454870940645E-6, 1.507723451236707E-5, 0.00013200584315001913,
    0.033296009575319148, -0.0023982197708525069, 0.0, -1.0454783952045055E-5,
    0.013611557377969874, -0.0010826699647867736, 0.6607262078574051,
    5.5139498958081246E-6, 1.099426428108596E-5, 0.00015311621421909343,
    0.028162610037210684, -0.0020005870008040919, 0.0, -2.5823510576951064E-6,
    0.014871788389995259, -0.0011721172939975261, 0.63136314118173154,
    5.1749995919122709E-6, 6.5478271176522308E-6, 0.00015946802271606859,
    0.022128624315847611, -0.0015749128178946061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.3215726369779442E-6,
    -0.0, 0.0008890798672821572, -3.9634420482915886E-6, -1.8779150781494825E-5,
    9.5621691177178581E-7, -0.95478880828256985, -4.1141673422749061E-5,
    0.03184011263878421, -0.00013737224957398745, -0.00070099650111093514,
    -7.37498820914889E-6, -0.0, 0.0028798974838507921, -1.2031552401106186E-5,
    -6.5541259101970566E-5, 4.8937143347579731E-7, -0.91186205573102064,
    -5.6569476786228777E-5, 0.045362532929058251, -0.00017200519888355809,
    -0.0011287940711174954, -1.3114491684476183E-5, -0.0, 0.0052334722224648012,
    -2.01428305293088E-5, -0.00012809304656000975, -8.0572652135228316E-7,
    -0.87104654382409041, -5.6272387520390891E-5, 0.047311950839458626,
    -0.0001450090986967697, -0.0013425995061396635, -1.8345363908047713E-5, -0.0,
    0.0075008822299020353, -2.6016006319195041E-5, -0.00019720530542317134,
    -2.4591635624240207E-6, -0.83218851749958367, -4.7375846559661062E-5,
    0.042598626592462489, -8.6719294425032092E-5, -0.0014003980563196173,
    -2.246593919613808E-5, -0.0, 0.00943970801201129, -2.8650001241530765E-5,
    -0.00026638512436626008, -4.121569324240198E-6, -0.79515340435959636,
    -3.4709382880706885E-5, 0.034628685752373246, -1.8297222644219502E-5,
    -0.0013530038284554778, -2.5265426660065411E-5, -0.0, 0.010947156098591032,
    -2.7909176085084142E-5, -0.0003314445701350322, -5.5519787679445418E-6,
    -0.75982412569723878, -2.1346028683459228E-5, 0.025634055662398753,
    4.6507757725176949E-5, -0.0012416072499104734, -2.6772519265671095E-5, -0.0,
    0.012008978947283564, -2.4195712839857506E-5, -0.00039000535890606163,
    -6.6018196083699578E-6, -0.72609874903249794, -9.0743971089964326E-6,
    0.016970752909635959, 9.9662858362088583E-5, -0.0010974787977650587,
    -2.7147117444576663E-5, -0.0, 0.012662186267626612, -1.8202379750182187E-5,
    -0.00044102211346605633, -7.1976650371651645E-6, -0.6938879802645469,
    1.2122638267861407E-6, 0.0093708626981431429, 0.00013734580510611544,
    -0.00094287838447155818, -2.6606724261902685E-5, -0.0, 0.012969100796935931,
    -1.0734651929982726E-5, -0.00048436730788982012, -7.3244316656170725E-6,
    -0.66311279263693523, 9.2109903987888457E-6, 0.0031443429792448793,
    0.00015868109865387842, -0.00079252796888270823, -2.5379438859688572E-5,
    -0.0, 0.013000295015379658, -2.589722391849923E-6, -0.00052049499991581891,
    -7.0100060277412662E-6, -0.63370234787111412, 1.4980529515579567E-5,
    -0.0016667489508736285, 0.00016472688705361702, -0.00065523809709111514, 0.0,
    -0.0008890798672821572, 3.9634420482915886E-6, 1.8779150781494825E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749061E-5,
    -0.03184011263878421, 0.00013737224957398745, 0.00070099650111093514, 0.0,
    -0.0028798974838507921, 1.2031552401106186E-5, 6.5541259101970566E-5,
    -4.8937143347579731E-7, 0.91186205573102064, 5.6569476786228777E-5,
    -0.045362532929058251, 0.00017200519888355809, 0.0011287940711174954, 0.0,
    -0.0052334722224648012, 2.01428305293088E-5, 0.00012809304656000975,
    8.0572652135228316E-7, 0.87104654382409041, 5.6272387520390891E-5,
    -0.047311950839458626, 0.0001450090986967697, 0.0013425995061396635, 0.0,
    -0.0075008822299020353, 2.6016006319195041E-5, 0.00019720530542317134,
    2.4591635624240207E-6, 0.83218851749958367, 4.7375846559661062E-5,
    -0.042598626592462489, 8.6719294425032092E-5, 0.0014003980563196173, 0.0,
    -0.00943970801201129, 2.8650001241530765E-5, 0.00026638512436626008,
    4.121569324240198E-6, 0.79515340435959636, 3.4709382880706885E-5,
    -0.034628685752373246, 1.8297222644219502E-5, 0.0013530038284554778, 0.0,
    -0.010947156098591032, 2.7909176085084142E-5, 0.0003314445701350322,
    5.5519787679445418E-6, 0.75982412569723878, 2.1346028683459228E-5,
    -0.025634055662398753, -4.6507757725176949E-5, 0.0012416072499104734, 0.0,
    -0.012008978947283564, 2.4195712839857506E-5, 0.00039000535890606163,
    6.6018196083699578E-6, 0.72609874903249794, 9.0743971089964326E-6,
    -0.016970752909635959, -9.9662858362088583E-5, 0.0010974787977650587, 0.0,
    -0.012662186267626612, 1.8202379750182187E-5, 0.00044102211346605633,
    7.1976650371651645E-6, 0.6938879802645469, -1.2122638267861407E-6,
    -0.0093708626981431429, -0.00013734580510611544, 0.00094287838447155818, 0.0,
    -0.012969100796935931, 1.0734651929982726E-5, 0.00048436730788982012,
    7.3244316656170725E-6, 0.66311279263693523, -9.2109903987888457E-6,
    -0.0031443429792448793, -0.00015868109865387842, 0.00079252796888270823, 0.0,
    -0.013000295015379658, 2.589722391849923E-6, 0.00052049499991581891,
    7.0100060277412662E-6, 0.63370234787111412, -1.4980529515579567E-5,
    0.0016667489508736285, -0.00016472688705361702, 0.00065523809709111514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0975461597654075, -0.0, -0.00010755525579326826, 2.1621574234746449E-5,
    2.1868160728403114E-7, -1.3780352347645447E-5, -4.726345500155462E-5,
    -0.95132850476213759, -0.0038484242973110937, 0.00083332348166736752,
    7.02052193286396E-6, -0.19034474888147196, -0.0, -0.00034781644809942771,
    8.0172011321042361E-5, 5.4969881802128017E-7, -2.27156084527028E-5,
    -6.1029197992035108E-5, -0.90502865766333274, -0.0054665593201632268,
    0.0014772527708812103, 4.95430814192846E-6, -0.2786270567235003, -0.0,
    -0.00063091851878645136, 0.00016625074040907872, 6.1735780707766991E-7,
    -2.6252607162803279E-5, -5.1494038048003027E-5, -0.8609839718388137,
    -0.0056795948236747461, 0.0019356125977258328, -2.9115307819424857E-6,
    -0.36261302471049911, -0.0, -0.00090245519432003731, 0.00027079983551271978,
    2.2119866829129678E-7, -2.4200604136820603E-5, -2.694558480094988E-5,
    -0.81908391692432025, -0.0050872380724722365, 0.0022181312643041419,
    -1.3038309501360736E-5, -0.44251182472821321, -0.0, -0.001133218449650502,
    0.00038537548095676305, -6.7382439476824743E-7, -1.6687728185037589E-5,
    6.2191354156035657E-6, -0.77922357682239962, -0.0041046725047747916,
    0.0023394769197791019, -2.2436874234736825E-5, -0.51852240413199335, -0.0,
    -0.0013110011036634765, 0.00050236920150929093, -1.9748026060019931E-6,
    -4.1108907278707743E-6, 4.3301618795228678E-5, -0.74130332450590952,
    -0.0030032803749125755, 0.002318216917374391, -2.900623182681863E-5,
    -0.59083399926298918, -0.0, -0.0014343460932402755, 0.00061517585671316138,
    -3.5074845746161022E-6, 1.2918293945842902E-5, 8.1030215241858355E-5,
    -0.70522851787898222, -0.0019473513770154724, 0.0021757356069629606,
    -3.1585817150007006E-5, -0.65962661966219394, -0.0, -0.0015079911327062028,
    0.00071830734181529922, -5.0610477977019175E-6, 3.3629077447434722E-5,
    0.00011726944236928726, -0.67090921790025126, -0.0010250256181252785,
    0.001935151871385348, -2.9846869647270715E-5, -0.72507150519220565, -0.0,
    -0.0015397052431117911, 0.00080745303342220735, -6.4252668261848784E-6,
    5.7146315618063624E-5, 0.00015074631934028013, -0.63825992842150658,
    -0.00027303091474991563, 0.0016202781342734003, -2.4108355014696026E-5,
    -0.78733155816749323, -0.0, -0.0015382130601616069, 0.0008794900279362227,
    -7.4177895974794721E-6, 8.254233258825305E-5, 0.00018081245359503957,
    -0.60719935621397325, 0.00030444277158692639, 0.0012546589538664273,
    -1.5132465589501264E-5, 0.0, 0.00010755525579326826, -2.1621574234746449E-5,
    -2.1868160728403114E-7, 1.3780352347645447E-5, 4.726345500155462E-5,
    0.95132850476213759, 0.0038484242973110937, -0.00083332348166736752,
    -7.02052193286396E-6, 0.0, 0.00034781644809942771, -8.0172011321042361E-5,
    -5.4969881802128017E-7, 2.27156084527028E-5, 6.1029197992035108E-5,
    0.90502865766333274, 0.0054665593201632268, -0.0014772527708812103,
    -4.95430814192846E-6, 0.0, 0.00063091851878645136, -0.00016625074040907872,
    -6.1735780707766991E-7, 2.6252607162803279E-5, 5.1494038048003027E-5,
    0.8609839718388137, 0.0056795948236747461, -0.0019356125977258328,
    2.9115307819424857E-6, 0.0, 0.00090245519432003731, -0.00027079983551271978,
    -2.2119866829129678E-7, 2.4200604136820603E-5, 2.694558480094988E-5,
    0.81908391692432025, 0.0050872380724722365, -0.0022181312643041419,
    1.3038309501360736E-5, 0.0, 0.001133218449650502, -0.00038537548095676305,
    6.7382439476824743E-7, 1.6687728185037589E-5, -6.2191354156035657E-6,
    0.77922357682239962, 0.0041046725047747916, -0.0023394769197791019,
    2.2436874234736825E-5, 0.0, 0.0013110011036634765, -0.00050236920150929093,
    1.9748026060019931E-6, 4.1108907278707743E-6, -4.3301618795228678E-5,
    0.74130332450590952, 0.0030032803749125755, -0.002318216917374391,
    2.900623182681863E-5, 0.0, 0.0014343460932402755, -0.00061517585671316138,
    3.5074845746161022E-6, -1.2918293945842902E-5, -8.1030215241858355E-5,
    0.70522851787898222, 0.0019473513770154724, -0.0021757356069629606,
    3.1585817150007006E-5, 0.0, 0.0015079911327062028, -0.00071830734181529922,
    5.0610477977019175E-6, -3.3629077447434722E-5, -0.00011726944236928726,
    0.67090921790025126, 0.0010250256181252785, -0.001935151871385348,
    2.9846869647270715E-5, 0.0, 0.0015397052431117911, -0.00080745303342220735,
    6.4252668261848784E-6, -5.7146315618063624E-5, -0.00015074631934028013,
    0.63825992842150658, 0.00027303091474991563, -0.0016202781342734003,
    2.4108355014696026E-5, 0.0, 0.0015382130601616069, -0.0008794900279362227,
    7.4177895974794721E-6, -8.254233258825305E-5, -0.00018081245359503957,
    0.60719935621397325, -0.00030444277158692639, -0.0012546589538664273,
    1.5132465589501264E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.3122055023886007E-5, -0.0, -0.037320608448162512,
    -5.6600484105171559E-5, -3.8015848024516285E-5, 3.1210978741585189E-5,
    0.0063626044977050395, -0.00061780149290204141, -0.522532770785621,
    -0.0020692471467052189, -0.0015825196049838537, -0.00011574479420093426,
    -0.0, -0.054883325379601333, -0.00018966443044090412,
    -0.00015913497745743808, 4.0945532666326082E-5, 0.010980623673581975,
    -0.0010008925162674571, -0.20297142785939026, -0.0031026752110159071,
    -0.0032311282598539476, -0.00022752205992960302, -0.0, -0.059609081713834416,
    -0.00035391491177341896, -0.00035558528147582914, 3.3871843192837595E-5,
    0.014100450874041791, -0.0012102947949394331, -0.0030704723812149492,
    -0.0033580569219097351, -0.00455523354405733, -0.00035373445001635136, -0.0,
    -0.05663109393802071, -0.00051640836201293655, -0.00060680377897153164,
    1.4575749290501952E-5, 0.016007318935255449, -0.0012972660302894576,
    0.11018003657398513, -0.0030685538629213714, -0.0054126799810898353,
    -0.00048426672704270595, -0.0, -0.049583442794241726,
    -0.00065501984891378037, -0.00088904456777334838, -1.2704805442094325E-5,
    0.016981062543788658, -0.0013026524393105453, 0.16368620902280748,
    -0.0024327504919446057, -0.0058038975365799226, -0.00061259029406701151,
    -0.0, -0.04090697737647888, -0.00075661345705760764, -0.0011806142711058261,
    -4.424036447938312E-5, 0.017271651919341414, -0.001257515359061474,
    0.17834162877389872, -0.00161152031852069, -0.0058011916778807696,
    -0.00073484551737083533, -0.0, -0.03213584920181918, -0.00081517090061464042,
    -0.0014642560380119258, -7.6892574247333707E-5, 0.01708822624401821,
    -0.001184417876137854, 0.16965200751586249, -0.0007291224956574101,
    -0.0055040033969809025, -0.00084906792512870249, -0.0, -0.024145793721376797,
    -0.00083004077131965755, -0.0017277857906788903, -0.00010814064629558114,
    0.016596797545768038, -0.0010989617207572743, 0.14860158330679785,
    0.00012332407723901842, -0.005012625439237463, -0.00095456944621838586, -0.0,
    -0.01735713873319502, -0.00080439364948997052, -0.0019637497123331021,
    -0.00013606869238948609, 0.015923070727663555, -0.0010113191101064471,
    0.12257349852075866, 0.00088324870111464876, -0.0044144807303690987,
    -0.0010514662248786064, -0.0, -0.011892888990472713, -0.00074391712028932275,
    -0.0021686144256626563, -0.00015932684725223796, 0.015157884401586403,
    -0.00092761579980605332, 0.096212946275474359, 0.001511729232775398,
    -0.003778520544014743, 0.0, 0.037320608448162512, 5.6600484105171559E-5,
    3.8015848024516285E-5, -3.1210978741585189E-5, -0.0063626044977050395,
    0.00061780149290204141, 0.522532770785621, 0.0020692471467052189,
    0.0015825196049838537, 0.0, 0.054883325379601333, 0.00018966443044090412,
    0.00015913497745743808, -4.0945532666326082E-5, -0.010980623673581975,
    0.0010008925162674571, 0.20297142785939026, 0.0031026752110159071,
    0.0032311282598539476, 0.0, 0.059609081713834416, 0.00035391491177341896,
    0.00035558528147582914, -3.3871843192837595E-5, -0.014100450874041791,
    0.0012102947949394331, 0.0030704723812149492, 0.0033580569219097351,
    0.00455523354405733, 0.0, 0.05663109393802071, 0.00051640836201293655,
    0.00060680377897153164, -1.4575749290501952E-5, -0.016007318935255449,
    0.0012972660302894576, -0.11018003657398513, 0.0030685538629213714,
    0.0054126799810898353, 0.0, 0.049583442794241726, 0.00065501984891378037,
    0.00088904456777334838, 1.2704805442094325E-5, -0.016981062543788658,
    0.0013026524393105453, -0.16368620902280748, 0.0024327504919446057,
    0.0058038975365799226, 0.0, 0.04090697737647888, 0.00075661345705760764,
    0.0011806142711058261, 4.424036447938312E-5, -0.017271651919341414,
    0.001257515359061474, -0.17834162877389872, 0.00161152031852069,
    0.0058011916778807696, 0.0, 0.03213584920181918, 0.00081517090061464042,
    0.0014642560380119258, 7.6892574247333707E-5, -0.01708822624401821,
    0.001184417876137854, -0.16965200751586249, 0.0007291224956574101,
    0.0055040033969809025, 0.0, 0.024145793721376797, 0.00083004077131965755,
    0.0017277857906788903, 0.00010814064629558114, -0.016596797545768038,
    0.0010989617207572743, -0.14860158330679785, -0.00012332407723901842,
    0.005012625439237463, 0.0, 0.01735713873319502, 0.00080439364948997052,
    0.0019637497123331021, 0.00013606869238948609, -0.015923070727663555,
    0.0010113191101064471, -0.12257349852075866, -0.00088324870111464876,
    0.0044144807303690987, 0.0, 0.011892888990472713, 0.00074391712028932275,
    0.0021686144256626563, 0.00015932684725223796, -0.015157884401586403,
    0.00092761579980605332, -0.096212946275474359, -0.001511729232775398,
    0.003778520544014743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 4.7891849279322587E-6, -0.0, -4.0707966674952848E-5,
    -0.0464090538358248, -2.4610229279834437E-5, -0.0030919673412285178,
    -1.7576703166230984E-5, 9.7029434768206214E-5, -0.001509971515662687,
    -0.85302749794390476, -0.0014260811666531243, 1.9553719176953735E-5, -0.0,
    -0.00014006202707132539, -0.085043975442043368, -0.00017751299843456395,
    -0.00740711831933932, -2.331676728368985E-5, 0.00019851677117884567,
    -0.0023646344510826279, -0.69051044383405968, -0.004954155578038663,
    4.4454435358372452E-5, -0.0, -0.00026826271666735042, -0.11534365076190714,
    -0.00053902544131978166, -0.012536343471712256, -1.9098185441358164E-5,
    0.0002988879087654879, -0.0026849353030476142, -0.520979283271595,
    -0.0096289389499085859, 7.9134060107265971E-5, -0.0, -0.00040176330142696506,
    -0.13715425116620267, -0.0011468724162840489, -0.018093900163176455,
    -7.1564909796443892E-6, 0.00039337136440643975, -0.0025974596751517382,
    -0.3521548087015986, -0.014697559634988085, 0.00012280175601163312, -0.0,
    -0.00052321971195517906, -0.15068329187039023, -0.0020056697008370367,
    -0.023729720288973084, 1.0187559718062388E-5, 0.00047807706044242535,
    -0.0022221772612706046, -0.19074114854511831, -0.01958465295628432,
    0.0001743235042656341, -0.0, -0.00062096627057911784, -0.156445031663433,
    -0.0030952386675238376, -0.029138730282527434, 3.0718566326344354E-5,
    0.00055003449195668548, -0.0016654345695013371, -0.042286139963745,
    -0.023870305244826039, 0.00023231434335936233, -0.0, -0.00068823862252685784,
    -0.15520051836868357, -0.0043778662362908066, -0.034067186692455738,
    5.2451113500909331E-5, 0.00060719215788508272, -0.0010166182473423798,
    0.088893913180309286, -0.027269783951359681, 0.000295228761163138, -0.0,
    -0.00072229547807477873, -0.14789537730594471, -0.0058045821695615419,
    -0.038316151156875658, 7.3702925095851655E-5, 0.00064838193668042329,
    -0.00034726845470145766, 0.19973030442548714, -0.029614426390290671,
    0.00036144597642456366, -0.0, -0.00072353779133067276, -0.1355981346702376,
    -0.0073205027918376167, -0.041742328553016711, 9.312905043858073E-5,
    0.00067325342140161679, 0.000288264953102637, 0.28836573449166897,
    -0.030833377529667579, 0.00042934739472332966, -0.0, -0.00069468534504446588,
    -0.11944148905527346, -0.00886928065737454, -0.044256570097747604,
    0.00010972744951220567, 0.00068218410550778476, 0.00085127183938044852,
    0.35407400817630924, -0.030936089919557017, 0.0, 4.0707966674952848E-5,
    0.0464090538358248, 2.4610229279834437E-5, 0.0030919673412285178,
    1.7576703166230984E-5, -9.7029434768206214E-5, 0.001509971515662687,
    0.85302749794390476, 0.0014260811666531243, 0.0, 0.00014006202707132539,
    0.085043975442043368, 0.00017751299843456395, 0.00740711831933932,
    2.331676728368985E-5, -0.00019851677117884567, 0.0023646344510826279,
    0.69051044383405968, 0.004954155578038663, 0.0, 0.00026826271666735042,
    0.11534365076190714, 0.00053902544131978166, 0.012536343471712256,
    1.9098185441358164E-5, -0.0002988879087654879, 0.0026849353030476142,
    0.520979283271595, 0.0096289389499085859, 0.0, 0.00040176330142696506,
    0.13715425116620267, 0.0011468724162840489, 0.018093900163176455,
    7.1564909796443892E-6, -0.00039337136440643975, 0.0025974596751517382,
    0.3521548087015986, 0.014697559634988085, 0.0, 0.00052321971195517906,
    0.15068329187039023, 0.0020056697008370367, 0.023729720288973084,
    -1.0187559718062388E-5, -0.00047807706044242535, 0.0022221772612706046,
    0.19074114854511831, 0.01958465295628432, 0.0, 0.00062096627057911784,
    0.156445031663433, 0.0030952386675238376, 0.029138730282527434,
    -3.0718566326344354E-5, -0.00055003449195668548, 0.0016654345695013371,
    0.042286139963745, 0.023870305244826039, 0.0, 0.00068823862252685784,
    0.15520051836868357, 0.0043778662362908066, 0.034067186692455738,
    -5.2451113500909331E-5, -0.00060719215788508272, 0.0010166182473423798,
    -0.088893913180309286, 0.027269783951359681, 0.0, 0.00072229547807477873,
    0.14789537730594471, 0.0058045821695615419, 0.038316151156875658,
    -7.3702925095851655E-5, -0.00064838193668042329, 0.00034726845470145766,
    -0.19973030442548714, 0.029614426390290671, 0.0, 0.00072353779133067276,
    0.1355981346702376, 0.0073205027918376167, 0.041742328553016711,
    -9.312905043858073E-5, -0.00067325342140161679, -0.000288264953102637,
    -0.28836573449166897, 0.030833377529667579, 0.0, 0.00069468534504446588,
    0.11944148905527346, 0.00886928065737454, 0.044256570097747604,
    -0.00010972744951220567, -0.00068218410550778476, -0.00085127183938044852,
    -0.35407400817630924, 0.030936089919557017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.7712698035315807E-8,
    -0.0, -3.7516049822001062E-5, 2.1506383219102627E-9, -0.04392176650032184,
    0.00043412487299914745, -0.00017734495634069355, 1.6549466756155211E-6,
    -0.001284906265277134, 5.4203394113382172E-7, -0.76714673440244707,
    2.8623302431047426E-7, -0.0, -0.0001121390299617303, 9.9930280580189543E-8,
    -0.077616305140426584, 0.000747506199145241, -0.00029561181255359953,
    1.9554069952167189E-6, -0.0015808726960927762, 3.8087378155025922E-6,
    -0.58851802581999169, 4.6650639151568784E-7, -0.0, -0.00018711420602605174,
    4.2294604396763033E-7, -0.10346524275805116, 0.00096914766771613733,
    -0.00037180786338522853, 1.5787303151743397E-6, -0.001361747426785568,
    9.4592306518407551E-6, -0.45148691855727247, 5.9359525743418038E-7, -0.0,
    -0.00024479725336299507, 1.0741642050550255E-6, -0.12329559588148699,
    0.0011212711730100332, -0.00041847461841373451, 9.4463966810712164E-7,
    -0.00092758038898164519, 1.6803124111984035E-5, -0.346366306838756,
    6.5500201794533079E-7, -0.0, -0.0002792866342812386, 2.1172715458094573E-6,
    -0.138508903504834, 0.0012208947103972338, -0.00044470714519871993,
    2.9366712462844636E-7, -0.00045553929121130624, 2.4987385449466568E-5,
    -0.26572470476623739, 6.5588988921601E-7, -0.0, -0.00029131346062250354,
    3.5723481355705388E-6, -0.15018030302999721, 0.0012810427483857993,
    -0.00045699420172890974, -2.5292400768863519E-7, -3.9477188905057173E-5,
    3.3141365333322384E-5, -0.20386119065003519, 6.094804032994702E-7, -0.0,
    -0.00028485382851914452, 5.4177287146368167E-6, -0.1591345420557225,
    0.001311674867081696, -0.0004598920407324363, -6.4904531571258E-7,
    0.00028047075352852127, 4.0479717286119691E-5, -0.15640251435364058,
    5.3119165151301672E-7, -0.0, -0.00026500649983706538, 7.596037228349394E-6,
    -0.16600429269349035, 0.0013203984116997654, -0.00045655152686565,
    -8.9257237188670223E-7, 0.00049658191433857735, 4.6367322924956278E-5,
    -0.11999395989233737, 4.3537253332436289E-7, -0.0, -0.00023676421406210017,
    1.0022645589551683E-5, -0.17127488705181956, 0.0013130155456245142,
    -0.00044912096591901844, -1.0041862766183764E-6, 0.00061883103334604015,
    5.0352466044721574E-5, -0.092062158674784081, 3.3375645750419287E-7, -0.0,
    -0.00020438893444202764, 1.259514109773049E-5, -0.17531863458673524,
    0.0012939433112788585, -0.0004390470915561648, -1.013757462781988E-6,
    0.00066520498038440633, 5.2175154946732956E-5, -0.070633117078497357, 0.0,
    3.7516049822001062E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069355, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382172E-7, 0.76714673440244707, 0.0,
    0.0001121390299617303, -9.9930280580189543E-8, 0.077616305140426584,
    -0.000747506199145241, 0.00029561181255359953, -1.9554069952167189E-6,
    0.0015808726960927762, -3.8087378155025922E-6, 0.58851802581999169, 0.0,
    0.00018711420602605174, -4.2294604396763033E-7, 0.10346524275805116,
    -0.00096914766771613733, 0.00037180786338522853, -1.5787303151743397E-6,
    0.001361747426785568, -9.4592306518407551E-6, 0.45148691855727247, 0.0,
    0.00024479725336299507, -1.0741642050550255E-6, 0.12329559588148699,
    -0.0011212711730100332, 0.00041847461841373451, -9.4463966810712164E-7,
    0.00092758038898164519, -1.6803124111984035E-5, 0.346366306838756, 0.0,
    0.0002792866342812386, -2.1172715458094573E-6, 0.138508903504834,
    -0.0012208947103972338, 0.00044470714519871993, -2.9366712462844636E-7,
    0.00045553929121130624, -2.4987385449466568E-5, 0.26572470476623739, 0.0,
    0.00029131346062250354, -3.5723481355705388E-6, 0.15018030302999721,
    -0.0012810427483857993, 0.00045699420172890974, 2.5292400768863519E-7,
    3.9477188905057173E-5, -3.3141365333322384E-5, 0.20386119065003519, 0.0,
    0.00028485382851914452, -5.4177287146368167E-6, 0.1591345420557225,
    -0.001311674867081696, 0.0004598920407324363, 6.4904531571258E-7,
    -0.00028047075352852127, -4.0479717286119691E-5, 0.15640251435364058, 0.0,
    0.00026500649983706538, -7.596037228349394E-6, 0.16600429269349035,
    -0.0013203984116997654, 0.00045655152686565, 8.9257237188670223E-7,
    -0.00049658191433857735, -4.6367322924956278E-5, 0.11999395989233737, 0.0,
    0.00023676421406210017, -1.0022645589551683E-5, 0.17127488705181956,
    -0.0013130155456245142, 0.00044912096591901844, 1.0041862766183764E-6,
    -0.00061883103334604015, -5.0352466044721574E-5, 0.092062158674784081, 0.0,
    0.00020438893444202764, -1.259514109773049E-5, 0.17531863458673524,
    -0.0012939433112788585, 0.0004390470915561648, 1.013757462781988E-6,
    -0.00066520498038440633, -5.2175154946732956E-5, 0.070633117078497357, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T q[1808]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040302, 4.9246767934457643E-6,
    -0.0052868326178782173, -0.0020754199270452169, 0.015163628780498446,
    3.1616010707720436E-7, -0.0, -0.00019811352068166413, -9.733336993428119E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442151,
    6.5614497023245073E-6, -0.0080792362290577832, -0.0038844512459874072,
    0.026788702408483002, 6.8512917620797546E-7, -0.0, -0.00049104314225850373,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228137, 6.1601073524460925E-6, -0.0091991288332427812,
    -0.0053836032115810936, 0.035691534155111788, 9.515955241686091E-7, -0.0,
    -0.00081150591943762143, -0.00052435232813021946, 0.0034085439914897236,
    -0.0077185036154530772, 0.00563726604148579, 4.6396980079752287E-6,
    -0.0092690633506094088, -0.00654832074431959, 0.042501234100522735,
    1.0377937756639656E-6, -0.0, -0.0011189252136054859, -0.00082088448415742121,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424437,
    2.6414509523473813E-6, -0.0087398966293815786, -0.0073714321358738892,
    0.047702538425699506, 9.1853767957217993E-7, -0.0, -0.001391638779765514,
    -0.0011501728132765289, 0.0073666001295169623, -0.011161718745088724,
    0.00820124153324256, 5.8494966353776041E-7, -0.0079227307407974644,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369554E-7, -0.0,
    -0.0016207036860207355, -0.0014960212712305321, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969556, -1.2790233473825676E-6,
    -0.007020235458604745, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040202E-7, -0.0, -0.0018051919142820267, -0.0018435530683128007,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659432,
    -2.82239855008753E-6, -0.006154644849868848, -0.007934340486205024,
    0.056980982028061261, -5.1013685987929281E-7, -0.0, -0.0019487749913620006,
    -0.0021796573224240924, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589607, -4.0018112448208546E-6, -0.0053912134366169455,
    -0.0075881528377809079, 0.058718842971069225, -1.23424891917915E-6, -0.0,
    -0.0020573611713821582, -0.0024933028948330325, 0.017104826530695772,
    -0.017334285099427416, 0.0127345953246283, -4.8286811668072085E-6,
    -0.004756876866607529, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040302,
    -4.9246767934457643E-6, 0.0052868326178782173, 0.0020754199270452169,
    -0.015163628780498446, 0.0, 0.00019811352068166413, 9.733336993428119E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442151,
    -6.5614497023245073E-6, 0.0080792362290577832, 0.0038844512459874072,
    -0.026788702408483002, 0.0, 0.00049104314225850373, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228137,
    -6.1601073524460925E-6, 0.0091991288332427812, 0.0053836032115810936,
    -0.035691534155111788, 0.0, 0.00081150591943762143, 0.00052435232813021946,
    -0.0034085439914897236, 0.0077185036154530772, -0.00563726604148579,
    -4.6396980079752287E-6, 0.0092690633506094088, 0.00654832074431959,
    -0.042501234100522735, 0.0, 0.0011189252136054859, 0.00082088448415742121,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424437,
    -2.6414509523473813E-6, 0.0087398966293815786, 0.0073714321358738892,
    -0.047702538425699506, 0.0, 0.001391638779765514, 0.0011501728132765289,
    -0.0073666001295169623, 0.011161718745088724, -0.00820124153324256,
    -5.8494966353776041E-7, 0.0079227307407974644, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.0016207036860207355, 0.0014960212712305321,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969556,
    1.2790233473825676E-6, 0.007020235458604745, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.0018051919142820267, 0.0018435530683128007,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659432,
    2.82239855008753E-6, 0.006154644849868848, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913620006, 0.0021796573224240924,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589607,
    4.0018112448208546E-6, 0.0053912134366169455, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821582, 0.0024933028948330325,
    -0.017104826530695772, 0.017334285099427416, -0.0127345953246283,
    4.8286811668072085E-6, 0.004756876866607529, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590372, -0.0014846744549160561, -7.0936716057342316E-6,
    0.0051391900270571457, -0.0021227702215873057, 0.015228232305159619,
    -5.1746825674618421E-7, -0.0, 0.00019360954683992132, -9.8951619720029927E-5,
    0.00066903596330777557, -0.0040067314306774966, -0.0029322591857517642,
    -1.0565746060026213E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970965, -1.2501804167265802E-6, -0.0, 0.00048137249874376524,
    -0.0002812123096721656, 0.0018515897913409904, -0.0058959962902359461,
    -0.00433805660413819, -1.1566011819059163E-5, 0.0090182698834108191,
    -0.0054509447270126056, 0.035888209656145233, -1.99674342474268E-6, -0.0,
    0.00079779982914970015, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130649, -0.0056981223890151169, -1.0967109079724044E-5,
    0.0091195753483278835, -0.00660567593380442, 0.0427701561488428,
    -2.6308219371928462E-6, -0.0, 0.0011028937830708195, -0.0008275864795065065,
    0.0053069505185103531, -0.0094682805098512523, -0.0070095628750181035,
    -9.4049919993817713E-6, 0.0086253321268044, -0.0074136435021352051,
    0.04804544484898185, -3.079742094619743E-6, -0.0, 0.0013749180814484189,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939333,
    -0.00827058862369585, -7.3245584742921722E-6, 0.0078377590270683056,
    -0.0078869236468970261, 0.052084536642155919, -3.3076191174553654E-6, -0.0,
    0.0016045634974303, -0.001502682321689071, 0.0097046471474189055,
    -0.01278758479729789, -0.009480426545954863, -5.0236620287564823E-6,
    0.0069562410011868225, -0.0080491061052958713, 0.055172377151487914,
    -3.3026429098114466E-6, -0.0, 0.0017904596235921739, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562018, -0.010639161635940208,
    -2.6918556487285661E-6, 0.0061029256813059053, -0.0079329836605401376,
    0.057528472990236557, -3.0679042907758775E-6, -0.0, 0.0019358763409865662,
    -0.0021835932805221218, 0.014653203386246897, -0.01587211736084378,
    -0.01174755497429808, -4.4233786615141425E-7, 0.0053445703843127169,
    -0.007578149996654163, 0.059322164719128156, -2.6150642512061629E-6, -0.0,
    0.002046412901449518, -0.0024952750539298735, 0.017257462274893824,
    -0.017329934052813311, -0.012806866470529164, 1.6630845986044885E-6,
    0.004710183664429741, -0.0070286124953556385, 0.06068425383363444, 0.0, 0.0,
    0.0, 0.0, 0.0020430568849590372, 0.0014846744549160561,
    7.0936716057342316E-6, -0.0051391900270571457, 0.0021227702215873057,
    -0.015228232305159619, 0.0, -0.00019360954683992132, 9.8951619720029927E-5,
    -0.00066903596330777557, 0.0040067314306774966, 0.0029322591857517642,
    1.0565746060026213E-5, -0.0078884598525309352, 0.0039509928253638827,
    -0.026917231873970965, 0.0, -0.00048137249874376524, 0.0002812123096721656,
    -0.0018515897913409904, 0.0058959962902359461, 0.00433805660413819,
    1.1566011819059163E-5, -0.0090182698834108191, 0.0054509447270126056,
    -0.035888209656145233, 0.0, -0.00079779982914970015, 0.000529877384341185,
    -0.0034281815934806724, 0.0077152543580130649, 0.0056981223890151169,
    1.0967109079724044E-5, -0.0091195753483278835, 0.00660567593380442,
    -0.0427701561488428, 0.0, -0.0011028937830708195, 0.0008275864795065065,
    -0.0053069505185103531, 0.0094682805098512523, 0.0070095628750181035,
    9.4049919993817713E-6, -0.0086253321268044, 0.0074136435021352051,
    -0.04804544484898185, 0.0, -0.0013749180814484189, 0.0011572507586087781,
    -0.00741723100352391, 0.011158213201939333, 0.00827058862369585,
    7.3245584742921722E-6, -0.0078377590270683056, 0.0078869236468970261,
    -0.052084536642155919, 0.0, -0.0016045634974303, 0.001502682321689071,
    -0.0097046471474189055, 0.01278758479729789, 0.009480426545954863,
    5.0236620287564823E-6, -0.0069562410011868225, 0.0080491061052958713,
    -0.055172377151487914, 0.0, -0.0017904596235921739, 0.0018491127346458545,
    -0.012127361717645797, 0.014358380565562018, 0.010639161635940208,
    2.6918556487285661E-6, -0.0061029256813059053, 0.0079329836605401376,
    -0.057528472990236557, 0.0, -0.0019358763409865662, 0.0021835932805221218,
    -0.014653203386246897, 0.01587211736084378, 0.01174755497429808,
    4.4233786615141425E-7, -0.0053445703843127169, 0.007578149996654163,
    -0.059322164719128156, 0.0, -0.002046412901449518, 0.0024952750539298735,
    -0.017257462274893824, 0.017329934052813311, 0.012806866470529164,
    -1.6630845986044885E-6, -0.004710183664429741, 0.0070286124953556385,
    -0.06068425383363444, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021016480453829815, 0.0014857887933183288, 4.7070151263154071E-6,
    -0.0050961555194273568, -0.0020754929921346357, -0.015462266265499226,
    3.0426878718878512E-7, -0.0, -0.00019216872658156111, -9.73459460026197E-5,
    -0.0006792751071504849, -0.0041074683619141631, 0.0029340512081696582,
    6.3057460452133893E-6, -0.00782907896809333, -0.0038849506557918018,
    -0.027331354583334473, 6.62734268138552E-7, -0.0, -0.00047814040658582214,
    -0.000277566493848083, -0.0018802229105924365, -0.0060264210814452886,
    0.004340226359465434, 5.9587145352081754E-6, -0.0089598311740056811,
    -0.0053848318467642564, -0.036451644592615427, 9.2636180986459214E-7, -0.0,
    -0.00079309983115135284, -0.00052449064683289992, -0.0034822500476397213,
    -0.0078659750107290677, 0.0057004858091328934, 4.53035250065951E-6,
    -0.009072082021816039, -0.0065504901027000958, -0.04346807648358772,
    1.0194144264559595E-6, -0.0, -0.0010974076290702994, -0.00082115681443972331,
    -0.0053930322171731326, -0.0096322567462445857, 0.0070120285161873611,
    2.6300941233486375E-6, -0.00859341228061931, -0.0073746438770505617,
    -0.048873310311435589, 9.1637309261321483E-7, -0.0, -0.0013694590279160162,
    -0.001150631492424329, -0.0075418405117768745, -0.011330203401756304,
    0.0082731347444936279, 6.6101379080510053E-7, -0.0078222898403132,
    -0.0078653210901301167, -0.053043720345121143, 6.2369573871460046E-7, -0.0,
    -0.0015999229352117736, -0.0014967156366828343, -0.0098744448046202624,
    -0.012963718195152128, 0.009483080190435313, -1.1328950919024518E-6,
    -0.0069556646472008314, -0.0080434495506573524, -0.056266866774456553,
    1.6606812914153242E-7, -0.0, -0.0017873120317849229, -0.001844524963056166,
    -0.012349220884839871, -0.014535826846399721, 0.010641980597964831,
    -2.6245895611173217E-6, -0.0061142707936579412, -0.0079402478608791779,
    -0.058762467425333663, -4.2346592189731472E-7, -0.0, -0.0019347286197374037,
    -0.0021809376864936609, -0.014934176702927581, -0.016048831986543406,
    0.011750612976507081, -3.7686667972724881E-6, -0.0053642122139471188,
    -0.0075945532602473666, -0.060698414364158154, -1.1102016279514345E-6, -0.0,
    -0.002047586031960839, -0.0024949095612962508, -0.017604680748317732,
    -0.017504462457878039, 0.01281024154007194, -4.5731930224289637E-6,
    -0.0047343841216166364, -0.0070502037507671955, -0.062203013141477644, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183288,
    -4.7070151263154071E-6, 0.0050961555194273568, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156111, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696582,
    -6.3057460452133893E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582214, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.004340226359465434,
    -5.9587145352081754E-6, 0.0089598311740056811, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.00079309983115135284, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328934,
    -4.53035250065951E-6, 0.009072082021816039, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702994, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.0070120285161873611,
    -2.6300941233486375E-6, 0.00859341228061931, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160162, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.6101379080510053E-7, 0.0078222898403132, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117736, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.009483080190435313,
    1.1328950919024518E-6, 0.0069556646472008314, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849229, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964831,
    2.6245895611173217E-6, 0.0061142707936579412, 0.0079402478608791779,
    0.058762467425333663, 0.0, 0.0019347286197374037, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507081,
    3.7686667972724881E-6, 0.0053642122139471188, 0.0075945532602473666,
    0.060698414364158154, 0.0, 0.002047586031960839, 0.0024949095612962508,
    0.017604680748317732, 0.017504462457878039, -0.01281024154007194,
    4.5731930224289637E-6, 0.0047343841216166364, 0.0070502037507671955,
    0.062203013141477644, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017572, -7.3113332728645887E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.01539766274083806,
    -5.293595766346033E-7, -0.0, 0.00019955434094002435, -9.8964195788368479E-5,
    -0.00067609777093437923, -0.0041050445656567363, -0.0028891738663263207,
    -1.0821449717137331E-5, 0.0081386171134953875, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960036E-6, -0.0, 0.00049427523441644661,
    -0.00028126666539891307, -0.0018705737454285825, -0.0060234600994775568,
    -0.00428292063329557, -1.1767404636297082E-5, 0.0092575675426479175,
    -0.00545217336219577, -0.036254969091582, -2.021977139046697E-6, -0.0,
    0.00081620591743596853, -0.00053001570304386553, -0.0034626124456487752,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212516, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060056, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.416348828380519E-6, 0.0087718164755666659, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787082E-6, -0.0, 0.0013970978332979158,
    -0.0011577094377565786, -0.007491209637769931, -0.011326697858606906,
    -0.00819869541244478, -7.2484943470248376E-6, 0.0079381999275525677,
    -0.0078911687012202889, -0.0526280524684559, -3.28566710111032E-6, -0.0,
    0.0016253442482392609, -0.0015033766871413736, -0.0098029263852935661,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763732E-6,
    0.0070208118125907343, -0.0080542762665754622, -0.0557823370265015,
    -3.2504945682103177E-6, -0.0, 0.0018083395060892768, -0.0018500846293892205,
    -0.012253512617855847, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583657E-6, 0.00614329973751681, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939009E-6, -0.0, 0.0019499227126111626,
    -0.0021848736445916912, -0.014811305222971739, -0.016044804770756937,
    -0.011671987181380605, -2.0919341860305622E-7, 0.0053715716069825418,
    -0.0075845504191206286, -0.060095092616099251, -2.491016959978449E-6, -0.0,
    0.0020561880408708363, -0.0024968817203930927, -0.017452045004119697,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827252E-6,
    0.0047326764094206318, -0.007035229851983839, -0.061551515639656613, 0.0,
    0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017572,
    7.3113332728645887E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.01539766274083806, 0.0, -0.00019955434094002435, 9.8964195788368479E-5,
    0.00067609777093437923, 0.0041050445656567363, 0.0028891738663263207,
    1.0821449717137331E-5, -0.0081386171134953875, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644661, 0.00028126666539891307,
    0.0018705737454285825, 0.0060234600994775568, 0.00428292063329557,
    1.1767404636297082E-5, -0.0092575675426479175, 0.00545217336219577,
    0.036254969091582, 0.0, -0.00081620591743596853, 0.00053001570304386553,
    0.0034626124456487752, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212516, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060056, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.416348828380519E-6, -0.0087718164755666659, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979158, 0.0011577094377565786,
    0.007491209637769931, 0.011326697858606906, 0.00819869541244478,
    7.2484943470248376E-6, -0.0079381999275525677, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392609, 0.0015033766871413736,
    0.0098029263852935661, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763732E-6, -0.0070208118125907343, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892768, 0.0018500846293892205,
    0.012253512617855847, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583657E-6, -0.00614329973751681, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111626, 0.0021848736445916912,
    0.014811305222971739, 0.016044804770756937, 0.011671987181380605,
    2.0919341860305622E-7, -0.0053715716069825418, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708363, 0.0024968817203930927,
    0.017452045004119697, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827252E-6, -0.0047326764094206318, 0.007035229851983839,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496928, 0.00048221414518065207, 0.0020535983066627922,
    0.02239703294428403, -0.011382823490747533, -4.5300466257935381E-5,
    0.00020111824649365369, -0.0, 0.0008351968162215236, -0.00052693283295635138,
    -1.4202292023779353E-6, 0.00056258770077962511, 0.00080001208779628772,
    0.0040222089662175116, 0.034075479854978261, -0.021043808615419379,
    -6.0914557418032515E-5, 0.00059482891125992271, -0.0, 0.0020621431062848592,
    -0.0014904815292193945, -3.3998696950912798E-6, 0.00075646106685663106,
    0.00099363790528140769, 0.0059054831078212966, 0.038583750917710685,
    -0.028829764251451333, -7.173583655156873E-5, 0.0011726262150481641, -0.0,
    0.0033929136972443525, -0.00279498368772149, -6.2738005970893276E-6,
    0.00087950249413920069, 0.0010977323314750817, 0.0077041407928327083,
    0.038610702862460149, -0.034678824448749812, -9.9958287731080519E-5,
    0.0019261216668453418, -0.0, 0.0046549264815772193, -0.0043437906953855288,
    -1.1349003863154773E-5, 0.00092769306525124077, 0.0011404644798644042,
    0.009419772323318653, 0.036103268168904447, -0.038611763746433325,
    -0.00016194825176056718, 0.0028471204265186336, -0.0, 0.0057572468853912644,
    -0.0060431370141094806, -2.0579570862839974E-5, 0.00090087854130221294,
    0.001143657327183455, 0.011054625516548589, 0.032403592626321823,
    -0.04072118239331815, -0.00026717427891659356, 0.0039276769289651294, -0.0,
    0.00666376541296399, -0.0078054281883259006, -3.6223635885386171E-5,
    0.00080226872093682746, 0.0011234628800830134, 0.012611407038876496,
    0.028384129958974068, -0.041159175748152546, -0.00041844655161156377,
    0.0051601319868246533, -0.0, 0.0073728135925645831, -0.00955188773329919,
    -6.053307029146797E-5, 0.00063786668577865517, 0.0010912837713868079,
    0.014093112150810595, 0.024568713767860049, -0.040124126137914669,
    -0.00061290951136035914, 0.0065371345335159294, -0.0, 0.0079023594828677973,
    -0.011214534686086313, -9.5503092630370764E-5, 0.00041585923480478323,
    0.0010547464749837698, 0.015502888074725239, 0.021234175454636826,
    -0.037847237535387088, -0.00084339143145200431, 0.00805165138168979, -0.0,
    0.0082797661137407261, -0.012737493468585184, -0.0001426924602110768,
    0.00014599763913536538, 0.001018611145724166, 0.016843930534120113,
    0.018491293400464751, -0.034579382681332371, -0.0010998423450844811, 0.0,
    0.0, 0.0, 0.0, -0.00030616429069496928, -0.00048221414518065207,
    -0.0020535983066627922, -0.02239703294428403, 0.011382823490747533,
    4.5300466257935381E-5, 0.0, -0.0008351968162215236, 0.00052693283295635138,
    1.4202292023779353E-6, -0.00056258770077962511, -0.00080001208779628772,
    -0.0040222089662175116, -0.034075479854978261, 0.021043808615419379,
    6.0914557418032515E-5, 0.0, -0.0020621431062848592, 0.0014904815292193945,
    3.3998696950912798E-6, -0.00075646106685663106, -0.00099363790528140769,
    -0.0059054831078212966, -0.038583750917710685, 0.028829764251451333,
    7.173583655156873E-5, 0.0, -0.0033929136972443525, 0.00279498368772149,
    6.2738005970893276E-6, -0.00087950249413920069, -0.0010977323314750817,
    -0.0077041407928327083, -0.038610702862460149, 0.034678824448749812,
    9.9958287731080519E-5, 0.0, -0.0046549264815772193, 0.0043437906953855288,
    1.1349003863154773E-5, -0.00092769306525124077, -0.0011404644798644042,
    -0.009419772323318653, -0.036103268168904447, 0.038611763746433325,
    0.00016194825176056718, 0.0, -0.0057572468853912644, 0.0060431370141094806,
    2.0579570862839974E-5, -0.00090087854130221294, -0.001143657327183455,
    -0.011054625516548589, -0.032403592626321823, 0.04072118239331815,
    0.00026717427891659356, 0.0, -0.00666376541296399, 0.0078054281883259006,
    3.6223635885386171E-5, -0.00080226872093682746, -0.0011234628800830134,
    -0.012611407038876496, -0.028384129958974068, 0.041159175748152546,
    0.00041844655161156377, 0.0, -0.0073728135925645831, 0.00955188773329919,
    6.053307029146797E-5, -0.00063786668577865517, -0.0010912837713868079,
    -0.014093112150810595, -0.024568713767860049, 0.040124126137914669,
    0.00061290951136035914, 0.0, -0.0079023594828677973, 0.011214534686086313,
    9.5503092630370764E-5, -0.00041585923480478323, -0.0010547464749837698,
    -0.015502888074725239, -0.021234175454636826, 0.037847237535387088,
    0.00084339143145200431, 0.0, -0.0082797661137407261, 0.012737493468585184,
    0.0001426924602110768, -0.00014599763913536538, -0.001018611145724166,
    -0.016843930534120113, -0.018491293400464751, 0.034579382681332371,
    0.0010998423450844811, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.0003062394217119654, -0.00047731536664842925, -0.0020665268130396616,
    -0.022172426283366312, -0.011387616330349713, 0.00015666644814812003,
    -0.0002022625931303291, -0.0, -0.00082774518149017668, -0.000529592610445747,
    5.7389299890772084E-6, 0.00056396725231741671, -0.00079224661923222445,
    -0.0040450830466660873, -0.033768034595554684, -0.021141612605666528,
    0.00022480793913855977, -0.00059796183300178749, -0.0,
    -0.0020455667486544604, -0.0015016832971963196, 1.2281171297667533E-5,
    0.00075945441536740606, -0.0009843707517287496, -0.0059353031721315541,
    -0.038284778592207587, -0.029063239819559016, 0.00018775158260361411,
    -0.0011782958644571567, -0.0, -0.0033690819832402769, -0.0028218463087974089,
    1.4332584980973895E-5, 0.00088370610807833507, -0.0010877588806645177,
    -0.0077380022415320937, -0.03837241722031557, -0.035056627436016605,
    4.6343639124359488E-5, -0.0019345945407556694, -0.0, -0.0046275598281651058,
    -0.0043932358301320314, 6.920257210320176E-6, 0.0009321934846738553,
    -0.0011301251608970202, -0.0094549611400509669, -0.035949097799074847,
    -0.039118963178182836, -0.00018840012431222786, -0.0028584044719204794, -0.0,
    -0.0057307040828358151, -0.0061209378716336575, -1.4228364171763735E-5,
    0.00090443930240191107, -0.0011329532079862735, -0.011088696165303912,
    -0.032336970688930627, -0.04132810309639473, -0.00050011991607834528,
    -0.0039415515091365486, -0.0, -0.0066422289273360543, -0.0079156577616609179,
    -5.2501371284616778E-5, 0.00080349399699248939, -0.0011121622881278004,
    -0.012642241664372786, -0.028395620667837813, -0.0418285314829304,
    -0.00087020044792009415, -0.0051761828183116993, -0.0,
    -0.0073597906534701735, -0.00969668181913341, -0.00011034171177573492,
    0.0006353379826807698, -0.0010790145827917301, -0.014118960812822058,
    -0.024641539531302634, -0.040816497866809458, -0.0012796998356205372,
    -0.00655479171491834, -0.0, -0.0079004230433163732, -0.011394090655931458,
    -0.00018926275707432277, 0.00040824404672798562, -0.0010410718558982626,
    -0.015522390488027808, -0.021348319198257911, -0.0385250575094498,
    -0.0017105267608725739, -0.0080702287172710677, -0.0, -0.008290469892862088,
    -0.01295023522278608, -0.00028990993190658839, 0.00013213075603135004,
    -0.0010030885797492422, -0.01685612046981471, -0.018626398129647875,
    -0.035209634693518316, -0.0021461428964605904, 0.0, 0.0, 0.0, 0.0,
    -0.0003062394217119654, 0.00047731536664842925, 0.0020665268130396616,
    0.022172426283366312, 0.011387616330349713, -0.00015666644814812003, 0.0,
    0.00082774518149017668, 0.000529592610445747, -5.7389299890772084E-6,
    -0.00056396725231741671, 0.00079224661923222445, 0.0040450830466660873,
    0.033768034595554684, 0.021141612605666528, -0.00022480793913855977, 0.0,
    0.0020455667486544604, 0.0015016832971963196, -1.2281171297667533E-5,
    -0.00075945441536740606, 0.0009843707517287496, 0.0059353031721315541,
    0.038284778592207587, 0.029063239819559016, -0.00018775158260361411, 0.0,
    0.0033690819832402769, 0.0028218463087974089, -1.4332584980973895E-5,
    -0.00088370610807833507, 0.0010877588806645177, 0.0077380022415320937,
    0.03837241722031557, 0.035056627436016605, -4.6343639124359488E-5, 0.0,
    0.0046275598281651058, 0.0043932358301320314, -6.920257210320176E-6,
    -0.0009321934846738553, 0.0011301251608970202, 0.0094549611400509669,
    0.035949097799074847, 0.039118963178182836, 0.00018840012431222786, 0.0,
    0.0057307040828358151, 0.0061209378716336575, 1.4228364171763735E-5,
    -0.00090443930240191107, 0.0011329532079862735, 0.011088696165303912,
    0.032336970688930627, 0.04132810309639473, 0.00050011991607834528, 0.0,
    0.0066422289273360543, 0.0079156577616609179, 5.2501371284616778E-5,
    -0.00080349399699248939, 0.0011121622881278004, 0.012642241664372786,
    0.028395620667837813, 0.0418285314829304, 0.00087020044792009415, 0.0,
    0.0073597906534701735, 0.00969668181913341, 0.00011034171177573492,
    -0.0006353379826807698, 0.0010790145827917301, 0.014118960812822058,
    0.024641539531302634, 0.040816497866809458, 0.0012796998356205372, 0.0,
    0.0079004230433163732, 0.011394090655931458, 0.00018926275707432277,
    -0.00040824404672798562, 0.0010410718558982626, 0.015522390488027808,
    0.021348319198257911, 0.0385250575094498, 0.0017105267608725739, 0.0,
    0.008290469892862088, 0.01295023522278608, 0.00028990993190658839,
    -0.00013213075603135004, 0.0010030885797492422, 0.01685612046981471,
    0.018626398129647875, 0.035209634693518316, 0.0021461428964605904, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00031185892138120829,
    -0.000502570134369898, 0.0021189752999033816, -0.023341150699844014,
    0.011594289336350715, 4.8538698886608527E-5, 0.00020586795104612229, -0.0,
    -0.00086995623361496794, 0.00053660101735923357, 1.5306708468308135E-6,
    -0.00057297910874745141, -0.00083359519431663409, 0.004119248160739955,
    -0.035495899890902981, 0.021430149447512051, 6.5408284223244733E-5,
    0.0006062711891352639, -0.0, -0.0021471788857608371, 0.0015176122837254379,
    3.6460185703158003E-6, -0.000770344917774514, -0.00103515532550392,
    0.0060112845231374149, -0.040171560763765359, 0.029352888902237737,
    7.6101215650564729E-5, 0.0011908412917109572, -0.0, -0.0035314309384240458,
    0.0028454618318544097, 6.6294921173456258E-6, -0.00089555200508320771,
    -0.0011434481783357154, 0.0078039387061703035, -0.040176177008991183,
    0.035300685361534523, 0.00010352169015720698, 0.0019500242678547552, -0.0,
    -0.00484290600122265, 0.0044216287235151188, 1.1770888489239837E-5,
    -0.00094453662973384314, -0.0011878922635308329, 0.0095046860602438672,
    -0.037542072616071218, 0.039295727814625446, 0.00016467428301353407,
    0.0028749549914754272, -0.0, -0.0059870067172350123, 0.0061505759056418863,
    2.1035254999411097E-5, -0.00091716878475691331, -0.0011912658049384609,
    0.011119868808881342, -0.033669554571301941, 0.041433198448315861,
    0.00026950643131986451, 0.0039573555927472342, -0.0, -0.0069263207498740835,
    0.0079430910275364534, 3.6711018305390747E-5, -0.00081674138386906268,
    -0.0011704175763008584, 0.012654925863460519, -0.029468311129123046,
    0.041868716552104328, 0.0004211223488868039, 0.0051894553636579882, -0.0,
    -0.0076593329913997111, 0.00971897451281721, 6.1090607957708861E-5,
    -0.000649388305425708, -0.0011372333641091231, 0.014114591733434101,
    -0.025484039012415027, 0.040804892537124521, 0.00061678702026516556,
    0.00656392875731367, -0.0, -0.0082049716994792871, 0.01140904630781259,
    9.6212106762538893E-5, -0.00042346315376165077, -0.0010996549666288829,
    0.01550305918633214, -0.022004664482222366, 0.038477622702890485,
    0.00084930644176672517, 0.00807384784685867, -0.0, -0.008591923151116421,
    0.012956473101216526, 0.00014367324314189093, -0.00014890838604834526,
    -0.0010626319711789323, 0.016824106212107545, -0.019144919197986585,
    0.035142704197345845, 0.0011085037444974739, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120829, 0.000502570134369898, -0.0021189752999033816,
    0.023341150699844014, -0.011594289336350715, -4.8538698886608527E-5, 0.0,
    0.00086995623361496794, -0.00053660101735923357, -1.5306708468308135E-6,
    0.00057297910874745141, 0.00083359519431663409, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.5408284223244733E-5, 0.0,
    0.0021471788857608371, -0.0015176122837254379, -3.6460185703158003E-6,
    0.000770344917774514, 0.00103515532550392, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237737, -7.6101215650564729E-5, 0.0,
    0.0035314309384240458, -0.0028454618318544097, -6.6294921173456258E-6,
    0.00089555200508320771, 0.0011434481783357154, -0.0078039387061703035,
    0.040176177008991183, -0.035300685361534523, -0.00010352169015720698, 0.0,
    0.00484290600122265, -0.0044216287235151188, -1.1770888489239837E-5,
    0.00094453662973384314, 0.0011878922635308329, -0.0095046860602438672,
    0.037542072616071218, -0.039295727814625446, -0.00016467428301353407, 0.0,
    0.0059870067172350123, -0.0061505759056418863, -2.1035254999411097E-5,
    0.00091716878475691331, 0.0011912658049384609, -0.011119868808881342,
    0.033669554571301941, -0.041433198448315861, -0.00026950643131986451, 0.0,
    0.0069263207498740835, -0.0079430910275364534, -3.6711018305390747E-5,
    0.00081674138386906268, 0.0011704175763008584, -0.012654925863460519,
    0.029468311129123046, -0.041868716552104328, -0.0004211223488868039, 0.0,
    0.0076593329913997111, -0.00971897451281721, -6.1090607957708861E-5,
    0.000649388305425708, 0.0011372333641091231, -0.014114591733434101,
    0.025484039012415027, -0.040804892537124521, -0.00061678702026516556, 0.0,
    0.0082049716994792871, -0.01140904630781259, -9.6212106762538893E-5,
    0.00042346315376165077, 0.0010996549666288829, -0.01550305918633214,
    0.022004664482222366, -0.038477622702890485, -0.00084930644176672517, 0.0,
    0.008591923151116421, -0.012956473101216526, -0.00014367324314189093,
    0.00014890838604834526, 0.0010626319711789323, -0.016824106212107545,
    0.019144919197986585, -0.035142704197345845, -0.0011085037444974739, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572542,
    0.00049767135583767507, -0.0021060467935265117, 0.023116544038926296,
    0.01117615048474652, -0.00015990468077679308, -0.00020472360440944683, -0.0,
    0.00086250459888362091, 0.00051992442604286435, -5.8493716335300827E-6,
    -0.00055357584434958824, 0.00082582972575257082, -0.0040963740802913793,
    0.035188454631479404, 0.020755271773573836, -0.00022930166594377187,
    -0.0006031382673933989, -0.0, 0.0021306025281304384, 0.0014745525426902747,
    -1.2527320172892045E-5, -0.00074557056444952031, 0.001025888171951262,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772584,
    -0.00019211696170261, -0.0011851716423019645, -0.0, 0.0035075992244199706,
    0.0027713681646644867, -1.4688276501230182E-5, -0.00086765659713432448,
    0.0011334747275251512, -0.0077700772574709181, 0.039937891366846605,
    0.034434766523231866, -4.990704155048592E-5, -0.0019415513939444271, -0.0,
    0.0048155393478105379, 0.0043153978020024379, -7.3421418364052275E-6,
    -0.0009153499201912487, 0.0011775529445634484, -0.0094694972435115515,
    0.037387902246241611, 0.038434999109990681, 0.00018567409305926088,
    -0.002863670946073581, -0.0, 0.0059604639146795648, 0.0060134989801012466,
    1.3772680035192611E-5, -0.000888149058947206, 0.001180561685741279,
    -0.011085798160126016, 0.033602932633910738, 0.040616087041396992,
    0.0004977877636750741, -0.0039434810125758141, -0.0, 0.00690478426424615,
    0.0077779949224503582, 5.2013988864612175E-5, -0.00078902133406024907,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986781,
    0.04111899067897859, 0.00086752465064485358, -0.0051734045321709405, -0.0,
    0.0076463100523053032, 0.0095295950396153822, 0.00010978417410949397,
    -0.00062381636303371151, 0.0011249641755140447, -0.014088743071422632,
    0.0255568647758576, 0.040135731467599578, 0.0012758223267157302,
    -0.006546271575911259, -0.0, 0.0082030352599278648, 0.011199579034205171,
    0.00018855374294215457, -0.00040064012777111233, 0.001085980347543375,
    -0.015483556773029566, 0.022118808225843441, 0.037894672341946385,
    0.0017046117505578522, -0.0080552705112773917, -0.0, 0.0086026269302377847,
    0.012731255590154728, 0.0002889291489757741, -0.0001292200091183642,
    0.0010471094052040078, -0.016811916276412941, 0.0192800239271697,
    0.034646313177504821, 0.0021374814970475968, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572542, -0.00049767135583767507, 0.0021060467935265117,
    -0.023116544038926296, -0.01117615048474652, 0.00015990468077679308, 0.0,
    -0.00086250459888362091, -0.00051992442604286435, 5.8493716335300827E-6,
    0.00055357584434958824, -0.00082582972575257082, 0.0040963740802913793,
    -0.035188454631479404, -0.020755271773573836, 0.00022930166594377187, 0.0,
    -0.0021306025281304384, -0.0014745525426902747, 1.2527320172892045E-5,
    0.00074557056444952031, -0.001025888171951262, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772584, 0.00019211696170261, 0.0,
    -0.0035075992244199706, -0.0027713681646644867, 1.4688276501230182E-5,
    0.00086765659713432448, -0.0011334747275251512, 0.0077700772574709181,
    -0.039937891366846605, -0.034434766523231866, 4.990704155048592E-5, 0.0,
    -0.0048155393478105379, -0.0043153978020024379, 7.3421418364052275E-6,
    0.0009153499201912487, -0.0011775529445634484, 0.0094694972435115515,
    -0.037387902246241611, -0.038434999109990681, -0.00018567409305926088, 0.0,
    -0.0059604639146795648, -0.0060134989801012466, -1.3772680035192611E-5,
    0.000888149058947206, -0.001180561685741279, 0.011085798160126016,
    -0.033602932633910738, -0.040616087041396992, -0.0004977877636750741, 0.0,
    -0.00690478426424615, -0.0077779949224503582, -5.2013988864612175E-5,
    0.00078902133406024907, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986781, -0.04111899067897859, -0.00086752465064485358, 0.0,
    -0.0076463100523053032, -0.0095295950396153822, -0.00010978417410949397,
    0.00062381636303371151, -0.0011249641755140447, 0.014088743071422632,
    -0.0255568647758576, -0.040135731467599578, -0.0012758223267157302, 0.0,
    -0.0082030352599278648, -0.011199579034205171, -0.00018855374294215457,
    0.00040064012777111233, -0.001085980347543375, 0.015483556773029566,
    -0.022118808225843441, -0.037894672341946385, -0.0017046117505578522, 0.0,
    -0.0086026269302377847, -0.012731255590154728, -0.0002889291489757741,
    0.0001292200091183642, -0.0010471094052040078, 0.016811916276412941,
    -0.0192800239271697, -0.034646313177504821, -0.0021374814970475968, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const real_T u[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T v[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const int8_T c_1[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T c_b[48]{ 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  boolean_T exitg1;
  boolean_T guard1;

  // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Outputs for IfAction SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' incorporates:
  //   ActionPort: '<S144>/Action Port'

  // SwitchCase: '<S137>/Switch Case' incorporates:
  //   MATLAB Function: '<S217>/NLMPC'

  f[0U] = (rtInf);
  f[1U] = (rtInf);
  f[2U] = (rtInf);
  f[3U] = (rtInf);
  f[4U] = (rtInf);
  f[5U] = (rtInf);
  f[6U] = (rtInf);
  f[7U] = (rtInf);
  f[8U] = (rtInf);
  f[9U] = (rtInf);
  f[10U] = (rtInf);
  f[11U] = (rtInf);
  f[12U] = (rtInf);
  f[13U] = (rtInf);
  f[14U] = (rtInf);
  f[15U] = (rtInf);
  f[16U] = (rtInf);
  f[17U] = (rtInf);
  f[18U] = (rtInf);
  f[19U] = (rtInf);
  d[0U] = (rtMinusInf);
  d[1U] = (rtMinusInf);
  d[2U] = (rtMinusInf);
  d[3U] = (rtMinusInf);
  d[4U] = (rtMinusInf);
  d[5U] = (rtMinusInf);
  d[6U] = (rtMinusInf);
  d[7U] = (rtMinusInf);
  d[8U] = (rtMinusInf);
  d[9U] = (rtMinusInf);
  d[10U] = (rtMinusInf);
  d[11U] = (rtMinusInf);
  d[12U] = (rtMinusInf);
  d[13U] = (rtMinusInf);
  d[14U] = (rtMinusInf);
  d[15U] = (rtMinusInf);
  d[16U] = (rtMinusInf);
  d[17U] = (rtMinusInf);
  d[18U] = (rtMinusInf);
  d[19U] = (rtMinusInf);
  d[20U] = (rtMinusInf);
  d[21U] = (rtMinusInf);
  d[22U] = (rtMinusInf);
  d[23U] = (rtMinusInf);
  d[24U] = (rtMinusInf);
  d[25U] = (rtMinusInf);
  d[26U] = (rtMinusInf);
  d[27U] = (rtMinusInf);
  d[28U] = (rtMinusInf);
  d[29U] = (rtMinusInf);

  // End of Outputs for SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' 
  // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // MATLABSystem: '<S125>/SourceBlock'
    proc_control_B.SourceBlock_o1_f = Sub_proc_control_1.getLatestMessage
      (&rtb_SourceBlock_o2_d2_0);

    // Outputs for Enabled SubSystem: '<S125>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S131>/Enable'

    if (proc_control_B.SourceBlock_o1_f) {
      // SignalConversion generated from: '<S131>/In1' incorporates:
      //   MATLABSystem: '<S125>/SourceBlock'

      proc_control_B.In1_me = rtb_SourceBlock_o2_d2_0;
    }

    // End of Outputs for SubSystem: '<S125>/Enabled Subsystem'

    // MATLABSystem: '<S126>/SourceBlock'
    proc_control_B.SourceBlock_o1_j = Sub_proc_control_1486.getLatestMessage
      (&rtb_SourceBlock_o2_my_0);

    // MATLABSystem: '<S129>/SourceBlock'
    proc_control_B.SourceBlock_o1_e = Sub_proc_control_13.getLatestMessage
      (&rtb_SourceBlock_o2_i_0);

    // Outputs for Enabled SubSystem: '<S129>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S135>/Enable'

    if (proc_control_B.SourceBlock_o1_e) {
      // SignalConversion generated from: '<S135>/In1' incorporates:
      //   MATLABSystem: '<S129>/SourceBlock'

      proc_control_B.In1_lz = rtb_SourceBlock_o2_i_0;
    }

    // End of Outputs for SubSystem: '<S129>/Enabled Subsystem'

    // MATLABSystem: '<S128>/SourceBlock'
    proc_control_B.SourceBlock_o1_a = Sub_proc_control_40.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_m_e);

    // Outputs for Enabled SubSystem: '<S128>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S134>/Enable'

    if (proc_control_B.SourceBlock_o1_a) {
      // SignalConversion generated from: '<S134>/In1' incorporates:
      //   MATLABSystem: '<S128>/SourceBlock'

      proc_control_B.In1_gs = proc_control_B.rtb_SourceBlock_o2_m_e;
    }

    // End of Outputs for SubSystem: '<S128>/Enabled Subsystem'

    // MATLABSystem: '<S130>/SourceBlock'
    proc_control_B.SourceBlock_o1_k = Sub_proc_control_15.getLatestMessage
      (&rtb_SourceBlock_o2_my_0);

    // Outputs for Enabled SubSystem: '<S130>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S136>/Enable'

    if (proc_control_B.SourceBlock_o1_k) {
      // SignalConversion generated from: '<S136>/In1' incorporates:
      //   MATLABSystem: '<S130>/SourceBlock'

      proc_control_B.In1_gf = rtb_SourceBlock_o2_my_0;
    }

    // End of Outputs for SubSystem: '<S130>/Enabled Subsystem'

    // MATLABSystem: '<S127>/SourceBlock'
    proc_control_B.SourceBlock_o1_kn = Sub_proc_control_16.getLatestMessage
      (&rtb_SourceBlock_o2_my_0);
  }

  // MATLABSystem: '<S114>/MATLAB System' incorporates:
  //   Delay: '<S114>/Delay'
  //   SignalConversion generated from: '<S114>/MATLAB System'

  if (proc_control_DW.obj_i.initial_mode != proc_control_P.mode.init) {
    proc_control_DW.obj_i.initial_mode = proc_control_P.mode.init;
  }

  //         %% Fonction qui détermine si on est mode dry_run
  if (proc_control_B.SourceBlock_o1_k) {
    proc_control_DW.obj_i.m_notDryRun = !proc_control_B.In1_gf.data;
  }

  //          %% Fonction qui détermine la condition initial
  if (proc_control_B.SourceBlock_o1_a) {
    proc_control_DW.obj_i.m_simulation = 1.0;

    //  activer la simulation
    proc_control_DW.obj_i.m_initCond[0] = 0.0;
    proc_control_DW.obj_i.m_initCond[1] = 0.0;
    proc_control_DW.obj_i.m_initCond[2] = proc_control_B.In1_gs.position.z;

    //         %% Fonction qui vérifie si le quaternion est unitaire
    proc_control_B.scale_l = 3.3121686421112381E-170;
    proc_control_B.absxk = std::abs(proc_control_B.In1_gs.orientation.x);
    if (proc_control_B.absxk > 3.3121686421112381E-170) {
      proc_control_B.d_a = 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
      proc_control_B.d_a = proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.In1_gs.orientation.y);
    if (proc_control_B.absxk > proc_control_B.scale_l) {
      proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
      proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
      proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.In1_gs.orientation.z);
    if (proc_control_B.absxk > proc_control_B.scale_l) {
      proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
      proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
      proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.In1_gs.orientation.w);
    if (proc_control_B.absxk > proc_control_B.scale_l) {
      proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
      proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
      proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.d_a = proc_control_B.scale_l * std::sqrt(proc_control_B.d_a);
    proc_control_B.t62 = proc_control_B.In1_gs.orientation.x /
      proc_control_B.d_a;
    proc_control_B.n[0] = proc_control_B.t62;
    proc_control_B.b_g[0] = std::isnan(proc_control_B.t62);
    proc_control_B.t62 = proc_control_B.In1_gs.orientation.y /
      proc_control_B.d_a;
    proc_control_B.n[1] = proc_control_B.t62;
    proc_control_B.b_g[1] = std::isnan(proc_control_B.t62);
    proc_control_B.t62 = proc_control_B.In1_gs.orientation.z /
      proc_control_B.d_a;
    proc_control_B.n[2] = proc_control_B.t62;
    proc_control_B.b_g[2] = std::isnan(proc_control_B.t62);
    proc_control_B.t62 = proc_control_B.In1_gs.orientation.w /
      proc_control_B.d_a;
    proc_control_B.n[3] = proc_control_B.t62;
    proc_control_B.b_g[3] = std::isnan(proc_control_B.t62);
    rtb_Reset = true;
    proc_control_B.b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.b_k < 4)) {
      if (!proc_control_B.b_g[proc_control_B.b_k]) {
        rtb_Reset = false;
        exitg1 = true;
      } else {
        proc_control_B.b_k++;
      }
    }

    if (rtb_Reset) {
      proc_control_B.n[0] = 1.0;
      proc_control_B.n[1] = 0.0;
      proc_control_B.n[2] = 0.0;
      proc_control_B.n[3] = 0.0;
    }

    proc_control_DW.obj_i.m_initCond[3] = proc_control_B.n[0];
    proc_control_DW.obj_i.m_initCond[4] = proc_control_B.n[1];
    proc_control_DW.obj_i.m_initCond[5] = proc_control_B.n[2];
    proc_control_DW.obj_i.m_initCond[6] = proc_control_B.n[3];
  }

  //         %% Fonction qui détermine le mode
  //          %% Fonction qui détermine l'arret d'urgence
  if (proc_control_B.SourceBlock_o1_e) {
    proc_control_DW.obj_i.m_killStatus = !proc_control_B.In1_lz.status;
  }

  //  regarder l'états de la kill
  if (proc_control_B.SourceBlock_o1_f && (!(proc_control_DW.obj_i.m_killStatus
        != 0.0)) && (proc_control_DW.Delay_DSTATE != 0.0)) {
    proc_control_DW.obj_i.m_mode = proc_control_B.In1_me.data;
  }

  if ((proc_control_DW.obj_i.m_killStatus != 0.0) ||
      (!(proc_control_DW.obj_i.m_notDryRun != 0.0))) {
    proc_control_DW.obj_i.m_mode = 0.0;
  }

  // Start for MATLABSystem: '<S114>/MATLAB System'
  //          %% Fonction qui détermine si on reset
  rtb_Reset = (proc_control_B.SourceBlock_o1_j ||
               proc_control_B.SourceBlock_o1_a);

  // MATLABSystem: '<S114>/MATLAB System'
  proc_control_DW.obj_i.m_reset = rtb_Reset;

  //          %% Fonction qui détermine si on clear la trajectoire
  proc_control_DW.obj_i.m_trajClear = (rtb_Reset ||
    proc_control_B.SourceBlock_o1_f || proc_control_B.SourceBlock_o1_kn);
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Delay: '<S250>/Delay'
    std::memcpy(&proc_control_B.Delay[0], &proc_control_DW.Delay_DSTATE_c[0],
                sizeof(real_T) << 3U);
  }

  // DataTypeConversion: '<S114>/Data Type Conversion' incorporates:
  //   MATLABSystem: '<S114>/MATLAB System'
  //
  proc_control_B.rtb_sincos_o2_i = std::floor(proc_control_DW.obj_i.m_mode);
  if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
      (proc_control_B.rtb_sincos_o2_i)) {
    proc_control_B.rtb_sincos_o2_i = 0.0;
  } else {
    proc_control_B.rtb_sincos_o2_i = std::fmod(proc_control_B.rtb_sincos_o2_i,
      256.0);
  }

  // DataTypeConversion: '<S114>/Data Type Conversion'
  mode = static_cast<uint8_T>(proc_control_B.rtb_sincos_o2_i < 0.0 ?
    static_cast<int32_T>(static_cast<uint8_T>(-static_cast<int8_T>(static_cast<
    uint8_T>(-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
    static_cast<uint8_T>(proc_control_B.rtb_sincos_o2_i)));

  // ZeroOrderHold: '<S7>/Zero-Order Hold'
  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // If: '<S7>/If'
    if (mode == 0) {
      // Outputs for IfAction SubSystem: '<S7>/Get_ROS_param' incorporates:
      //   ActionPort: '<S113>/Action Port'

      // MATLABSystem: '<S117>/MPC.P'
      ParamGet_proc_control_140.getParameter(&proc_control_B.b_value);

      // DataTypeConversion: '<S117>/Data Type Conversion' incorporates:
      //   MATLABSystem: '<S117>/MPC.P'

      proc_control_B.p_h = static_cast<real_T>(proc_control_B.b_value);

      // MATLABSystem: '<S117>/MPC.M'
      ParamGet_proc_control_143.getParameter(&proc_control_B.b_value);

      // DataTypeConversion: '<S117>/Data Type Conversion1' incorporates:
      //   MATLABSystem: '<S117>/MPC.M'

      proc_control_B.m_a = static_cast<real_T>(proc_control_B.b_value);

      // MATLABSystem: '<S119>/Default MV'
      ParamGet_proc_control_72.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S119>/Default MVR'
      ParamGet_proc_control_74.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S119>/Default OV'
      ParamGet_proc_control_66.getParameter(64U, &proc_control_B.dv10[0],
        &proc_control_B.len);

      // MATLABSystem: '<S119>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S119>/Default MVR'

      std::memcpy(&proc_control_B.MVR_cn[0], &proc_control_B.dv9[0], sizeof
                  (real_T) << 3U);

      // MATLABSystem: '<S119>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S119>/Default OV'

      std::memcpy(&proc_control_B.OV_d[0], &proc_control_B.dv10[0], 13U * sizeof
                  (real_T));

      // MATLABSystem: '<S119>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S119>/Default MV'

      std::memcpy(&proc_control_B.MV_p[0], &proc_control_B.dv8[0], sizeof(real_T)
                  << 3U);

      // MATLABSystem: '<S120>/C10 MV'
      ParamGet_proc_control_98.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S120>/C10 MVR'
      ParamGet_proc_control_99.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S120>/C10 OV'
      ParamGet_proc_control_97.getParameter(64U, &proc_control_B.dv10[0],
        &proc_control_B.len);

      // MATLABSystem: '<S120>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S120>/C10 MVR'

      std::memcpy(&proc_control_B.MVR_a[0], &proc_control_B.dv9[0], sizeof
                  (real_T) << 3U);

      // MATLABSystem: '<S120>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S120>/C10 OV'

      std::memcpy(&proc_control_B.OV_c[0], &proc_control_B.dv10[0], 13U * sizeof
                  (real_T));

      // MATLABSystem: '<S120>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S120>/C10 MV'

      std::memcpy(&proc_control_B.MV_j[0], &proc_control_B.dv8[0], sizeof(real_T)
                  << 3U);

      // MATLABSystem: '<S121>/C11 MV'
      ParamGet_proc_control_107.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S121>/C11 MVR'
      ParamGet_proc_control_108.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S121>/C11 OV'
      ParamGet_proc_control_106.getParameter(64U, &proc_control_B.dv10[0],
        &proc_control_B.len);

      // MATLABSystem: '<S121>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S121>/C11 MVR'

      std::memcpy(&proc_control_B.MVR_c[0], &proc_control_B.dv9[0], sizeof
                  (real_T) << 3U);

      // MATLABSystem: '<S121>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S121>/C11 OV'

      std::memcpy(&proc_control_B.OV_l[0], &proc_control_B.dv10[0], 13U * sizeof
                  (real_T));

      // MATLABSystem: '<S121>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S121>/C11 MV'

      std::memcpy(&proc_control_B.MV_l[0], &proc_control_B.dv8[0], sizeof(real_T)
                  << 3U);

      // MATLABSystem: '<S122>/C19 MV'
      ParamGet_proc_control_116.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S122>/C19 MVR'
      ParamGet_proc_control_117.getParameter(64U, &proc_control_B.dv9[0],
        &proc_control_B.len);

      // MATLABSystem: '<S122>/C19 OV'
      ParamGet_proc_control_115.getParameter(64U, &proc_control_B.dv10[0],
        &proc_control_B.len);

      // MATLABSystem: '<S122>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S122>/C19 MVR'

      std::memcpy(&proc_control_B.MVR[0], &proc_control_B.dv9[0], sizeof(real_T)
                  << 3U);

      // MATLABSystem: '<S122>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S122>/C19 OV'

      std::memcpy(&proc_control_B.OV[0], &proc_control_B.dv10[0], 13U * sizeof
                  (real_T));

      // MATLABSystem: '<S122>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S122>/C19 MV'

      std::memcpy(&proc_control_B.MV_c[0], &proc_control_B.dv8[0], sizeof(real_T)
                  << 3U);

      // MATLABSystem: '<S123>/NoDVL MV'
      ParamGet_proc_control_133.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S123>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S123>/NoDVL MV'

      std::memcpy(&proc_control_B.MV[0], &proc_control_B.dv8[0], sizeof(real_T) <<
                  3U);

      // MATLABSystem: '<S117>/MPC.TMAX'
      ParamGet_proc_control_144.getParameter(&proc_control_B.tmax);

      // MATLABSystem: '<S117>/MPC.TMIN'
      ParamGet_proc_control_145.getParameter(&proc_control_B.tmin);

      // MATLABSystem: '<S118>/Angular Tolerance'
      ParamGet_proc_control_151.getParameter(&proc_control_B.angularTol);

      // MATLABSystem: '<S118>/Linear Tolerance'
      ParamGet_proc_control_150.getParameter(&proc_control_B.linearTol);

      // MATLABSystem: '<S118>/Time in Tolerance'
      ParamGet_proc_control_152.getParameter(&proc_control_B.timeInTol);

      // BusCreator: '<S116>/Bus Creator' incorporates:
      //   MATLABSystem: '<S116>/Physics G'
      //   MATLABSystem: '<S116>/Physics Mass'
      //   MATLABSystem: '<S116>/Physics Rho'
      //   MATLABSystem: '<S116>/Physics Sub Height'
      //   MATLABSystem: '<S116>/Physics Volume'

      ParamGet_proc_control_166.getParameter(&proc_control_B.BusCreator.rho);
      ParamGet_proc_control_167.getParameter(&proc_control_B.BusCreator.g);
      ParamGet_proc_control_168.getParameter(&proc_control_B.BusCreator.mass);
      ParamGet_proc_control_169.getParameter(&proc_control_B.BusCreator.volume);
      ParamGet_proc_control_170.getParameter
        (&proc_control_B.BusCreator.sub_height);

      // MATLABSystem: '<S116>/Physics RG'
      ParamGet_proc_control_171.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System11' incorporates:
      //   MATLABSystem: '<S116>/Physics RG'

      proc_control_B.obj_n0.lastValues[0] = proc_control_B.dv8[0];
      proc_control_B.obj_n0.lastValues[1] = proc_control_B.dv8[1];
      proc_control_B.obj_n0.lastValues[2] = proc_control_B.dv8[2];

      // MATLABSystem: '<S116>/Physics RB'
      ParamGet_proc_control_173.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System12' incorporates:
      //   MATLABSystem: '<S116>/Physics RB'

      proc_control_B.obj_jm.lastValues[0] = proc_control_B.dv8[0];
      proc_control_B.obj_jm.lastValues[1] = proc_control_B.dv8[1];
      proc_control_B.obj_jm.lastValues[2] = proc_control_B.dv8[2];

      // MATLABSystem: '<S116>/Physics CDL'
      ParamGet_proc_control_175.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S116>/Physics CDL'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.obj_n.lastValues[proc_control_B.Ns] =
          proc_control_B.dv8[proc_control_B.Ns];
      }

      // MATLABSystem: '<S116>/Physics CDQ'
      ParamGet_proc_control_177.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System2' incorporates:
      //   MATLABSystem: '<S116>/Physics CDQ'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.obj_li.lastValues[proc_control_B.Ns] =
          proc_control_B.dv8[proc_control_B.Ns];
      }

      // MATLABSystem: '<S116>/Physics Added Mass'
      ParamGet_proc_control_180.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S116>/Physics Added Mass'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.obj_d.lastValues[proc_control_B.Ns] =
          proc_control_B.dv8[proc_control_B.Ns];
      }

      // MATLABSystem: '<S116>/Physics I'
      ParamGet_proc_control_182.getParameter(128U,
        &proc_control_B.VectorConcatenate[0], &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System4' incorporates:
      //   MATLABSystem: '<S116>/Physics I'

      std::memcpy(&proc_control_B.obj_lw.lastValues[0],
                  &proc_control_B.VectorConcatenate[0], 9U * sizeof(real_T));

      // MATLABSystem: '<S116>/Physics Depth Pose'
      ParamGet_proc_control_184.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System5' incorporates:
      //   MATLABSystem: '<S116>/Physics Depth Pose'

      proc_control_B.obj_bx.lastValues[0] = proc_control_B.dv8[0];
      proc_control_B.obj_bx.lastValues[1] = proc_control_B.dv8[1];
      proc_control_B.obj_bx.lastValues[2] = proc_control_B.dv8[2];

      // MATLABSystem: '<S116>/Physics Hydro Pose'
      ParamGet_proc_control_186.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System6' incorporates:
      //   MATLABSystem: '<S116>/Physics Hydro Pose'

      proc_control_B.obj_o4.lastValues[0] = proc_control_B.dv8[0];
      proc_control_B.obj_o4.lastValues[1] = proc_control_B.dv8[1];
      proc_control_B.obj_o4.lastValues[2] = proc_control_B.dv8[2];

      // MATLABSystem: '<S116>/Physics Sonar Pose'
      ParamGet_proc_control_190.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/MATLAB System7' incorporates:
      //   MATLABSystem: '<S116>/Physics Sonar Pose'

      proc_control_B.obj_k3.lastValues[0] = proc_control_B.dv8[0];
      proc_control_B.obj_k3.lastValues[1] = proc_control_B.dv8[1];
      proc_control_B.obj_k3.lastValues[2] = proc_control_B.dv8[2];

      // MATLABSystem: '<S116>/Physics DVL Rotation'
      ParamGet_proc_control_192.getParameter(64U, &proc_control_B.dv8[0],
        &proc_control_B.len);

      // MATLABSystem: '<S116>/Physics Thrusters'
      ParamGet_proc_control_194.getParameter(400U, &proc_control_B.dv1[0],
        &proc_control_B.len);

      // MATLAB Function: '<S116>/MATLAB Function' incorporates:
      //   MATLABSystem: '<S116>/Physics Thrusters'

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.base_index = proc_control_B.i * 6;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.array_p[proc_control_B.i + (proc_control_B.Ns << 3)] =
            proc_control_B.dv1[proc_control_B.Ns + proc_control_B.base_index];
        }
      }

      // End of MATLAB Function: '<S116>/MATLAB Function'

      // MATLABSystem: '<S116>/DVL Lost Override'
      ParamGet_proc_control_196.getParameter(&b_value);

      // BusCreator: '<S116>/Bus Creator' incorporates:
      //   DataTypeConversion: '<S116>/Data Type Conversion'
      //   MATLABSystem: '<S116>/DVL Lost Override'
      //   MATLABSystem: '<S116>/MATLAB System1'
      //   MATLABSystem: '<S116>/MATLAB System11'
      //   MATLABSystem: '<S116>/MATLAB System12'
      //   MATLABSystem: '<S116>/MATLAB System2'
      //   MATLABSystem: '<S116>/MATLAB System3'
      //   MATLABSystem: '<S116>/MATLAB System4'
      //   MATLABSystem: '<S116>/MATLAB System5'
      //   MATLABSystem: '<S116>/MATLAB System6'
      //   MATLABSystem: '<S116>/MATLAB System7'
      //   MATLABSystem: '<S116>/MATLAB System8'
      //   MATLABSystem: '<S116>/Physics DVL Rotation'
      //
      proc_control_B.BusCreator.rg[0] = proc_control_B.obj_n0.lastValues[0];
      proc_control_B.BusCreator.rb[0] = proc_control_B.obj_jm.lastValues[0];
      proc_control_B.BusCreator.rg[1] = proc_control_B.obj_n0.lastValues[1];
      proc_control_B.BusCreator.rb[1] = proc_control_B.obj_jm.lastValues[1];
      proc_control_B.BusCreator.rg[2] = proc_control_B.obj_n0.lastValues[2];
      proc_control_B.BusCreator.rb[2] = proc_control_B.obj_jm.lastValues[2];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.BusCreator.cdl[proc_control_B.Ns] =
          proc_control_B.obj_n.lastValues[proc_control_B.Ns];
        proc_control_B.BusCreator.cdq[proc_control_B.Ns] =
          proc_control_B.obj_li.lastValues[proc_control_B.Ns];
        proc_control_B.BusCreator.added_mass[proc_control_B.Ns] =
          proc_control_B.obj_d.lastValues[proc_control_B.Ns];
      }

      std::memcpy(&proc_control_B.BusCreator.I[0],
                  &proc_control_B.obj_lw.lastValues[0], 9U * sizeof(real_T));
      proc_control_B.BusCreator.depth_pose[0] =
        proc_control_B.obj_bx.lastValues[0];
      proc_control_B.BusCreator.hydro_pose[0] =
        proc_control_B.obj_o4.lastValues[0];
      proc_control_B.BusCreator.sonar_pose[0] =
        proc_control_B.obj_k3.lastValues[0];
      proc_control_B.BusCreator.dvl_rotation[0] = proc_control_B.dv8[0];
      proc_control_B.BusCreator.depth_pose[1] =
        proc_control_B.obj_bx.lastValues[1];
      proc_control_B.BusCreator.hydro_pose[1] =
        proc_control_B.obj_o4.lastValues[1];
      proc_control_B.BusCreator.sonar_pose[1] =
        proc_control_B.obj_k3.lastValues[1];
      proc_control_B.BusCreator.dvl_rotation[1] = proc_control_B.dv8[1];
      proc_control_B.BusCreator.depth_pose[2] =
        proc_control_B.obj_bx.lastValues[2];
      proc_control_B.BusCreator.hydro_pose[2] =
        proc_control_B.obj_o4.lastValues[2];
      proc_control_B.BusCreator.sonar_pose[2] =
        proc_control_B.obj_k3.lastValues[2];
      proc_control_B.BusCreator.dvl_rotation[2] = proc_control_B.dv8[2];
      std::memcpy(&proc_control_B.BusCreator.thrusters[0],
                  &proc_control_B.array_p[0], 48U * sizeof(real_T));
      proc_control_B.BusCreator.dvl_lost_override = b_value;

      // End of Outputs for SubSystem: '<S7>/Get_ROS_param'
    }

    // End of If: '<S7>/If'

    // Math: '<S250>/Transpose'
    proc_control_B.Ns = 0;
    for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
         proc_control_B.ibmat++) {
      proc_control_B.b_k = 0;
      for (proc_control_B.i_f = 0; proc_control_B.i_f < 8; proc_control_B.i_f++)
      {
        proc_control_B.Transpose[proc_control_B.b_k + proc_control_B.ibmat] =
          proc_control_B.BusCreator.thrusters[proc_control_B.i_f +
          proc_control_B.Ns];
        proc_control_B.b_k += 6;
      }

      proc_control_B.Ns += 8;
    }

    // End of Math: '<S250>/Transpose'
  }

  // End of ZeroOrderHold: '<S7>/Zero-Order Hold'

  // DataTypeConversion: '<S5>/Data Type Conversion' incorporates:
  //   MATLABSystem: '<S114>/MATLAB System'
  //
  proc_control_B.rtb_sincos_o2_i = std::floor(proc_control_DW.obj_i.m_simulation);
  if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
      (proc_control_B.rtb_sincos_o2_i)) {
    proc_control_B.rtb_sincos_o2_i = 0.0;
  } else {
    proc_control_B.rtb_sincos_o2_i = std::fmod(proc_control_B.rtb_sincos_o2_i,
      256.0);
  }

  // SwitchCase: '<S5>/Switch Case' incorporates:
  //   DataTypeConversion: '<S5>/Data Type Conversion'
  //   MATLABSystem: '<S83>/SourceBlock'
  //   MATLABSystem: '<S84>/SourceBlock'
  //   MATLABSystem: '<S85>/SourceBlock'
  //   MATLABSystem: '<S94>/SourceBlock'
  //   MATLABSystem: '<S95>/SourceBlock'
  //   MATLABSystem: '<S96>/SourceBlock'
  //
  if ((proc_control_B.rtb_sincos_o2_i < 0.0 ? static_cast<int32_T>(static_cast<
        uint8_T>(-static_cast<int8_T>(static_cast<uint8_T>
          (-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
        static_cast<uint8_T>(proc_control_B.rtb_sincos_o2_i))) == 1) {
    // Outputs for IfAction SubSystem: '<S5>/Simulation' incorporates:
    //   ActionPort: '<S82>/Action Port'

    // MATLABSystem: '<S94>/SourceBlock'
    b_value = Sub_proc_control_209_83.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_n_c);

    // Outputs for Enabled SubSystem: '<S94>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S97>/Enable'

    if (b_value) {
      // SignalConversion generated from: '<S97>/In1'
      proc_control_B.In1_g = proc_control_B.rtb_SourceBlock_o2_n_c;
    }

    // End of Outputs for SubSystem: '<S94>/Enabled Subsystem'

    // SignalConversion generated from: '<S252>/ SFunction ' incorporates:
    //   MATLAB Function: '<S245>/MATLAB Function'
    //   MATLABSystem: '<S94>/SourceBlock'
    //   SignalConversion generated from: '<S82>/imu data'
    //
    proc_control_B.n[1] = proc_control_B.In1_g.orientation.x;
    proc_control_B.n[2] = proc_control_B.In1_g.orientation.y;
    proc_control_B.n[3] = proc_control_B.In1_g.orientation.z;

    // SignalConversion generated from: '<S82>/imu data' incorporates:
    //   Merge: '<S5>/Merge'

    proc_control_B.t = proc_control_B.In1_g.orientation.w;
    proc_control_B.t6 = proc_control_B.In1_g.angular_velocity.x;
    proc_control_B.oa = proc_control_B.In1_g.angular_velocity.y;
    proc_control_B.ob = proc_control_B.In1_g.angular_velocity.z;

    // MATLABSystem: '<S95>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_209_84.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_p_c);

    // Outputs for Enabled SubSystem: '<S95>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S98>/Enable'

    if (rtb_NewDvlMsg) {
      // SignalConversion generated from: '<S98>/In1'
      proc_control_B.In1_iq = proc_control_B.rtb_SourceBlock_o2_p_c;
    }

    // End of Outputs for SubSystem: '<S95>/Enabled Subsystem'

    // SignalConversion generated from: '<S82>/dvl data' incorporates:
    //   MATLABSystem: '<S95>/SourceBlock'
    //   Merge: '<S5>/Merge1'
    //
    proc_control_B.Product3_bo = proc_control_B.In1_iq.x_vel_btm;
    proc_control_B.Divide3_b = proc_control_B.In1_iq.y_vel_btm;
    proc_control_B.Divide_a = proc_control_B.In1_iq.z_vel_btm;
    proc_control_B.t19 = proc_control_B.In1_iq.velocity1;
    proc_control_B.t20 = proc_control_B.In1_iq.velocity2;
    proc_control_B.t24 = proc_control_B.In1_iq.velocity3;
    proc_control_B.t26 = proc_control_B.In1_iq.velocity4;

    // MATLABSystem: '<S96>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_209_85.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_pk_e);

    // Outputs for Enabled SubSystem: '<S96>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S99>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S99>/In1'
      proc_control_B.In1_hb = proc_control_B.rtb_SourceBlock_o2_pk_e;
    }

    // End of Outputs for SubSystem: '<S96>/Enabled Subsystem'

    // SignalConversion generated from: '<S82>/depth data' incorporates:
    //   MATLABSystem: '<S96>/SourceBlock'
    //   Merge: '<S5>/Merge2'
    //
    proc_control_B.rtb_Merge2_data = proc_control_B.In1_hb.data;

    // End of Outputs for SubSystem: '<S5>/Simulation'
  } else {
    // Outputs for IfAction SubSystem: '<S5>/AUV' incorporates:
    //   ActionPort: '<S80>/Action Port'

    // MATLABSystem: '<S83>/SourceBlock'
    b_value = Sub_proc_control_209_4.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_n_c);

    // Outputs for Enabled SubSystem: '<S83>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S86>/Enable'

    if (b_value) {
      // SignalConversion generated from: '<S86>/In1'
      proc_control_B.In1_e = proc_control_B.rtb_SourceBlock_o2_n_c;
    }

    // End of Outputs for SubSystem: '<S83>/Enabled Subsystem'

    // SignalConversion generated from: '<S252>/ SFunction ' incorporates:
    //   MATLAB Function: '<S245>/MATLAB Function'
    //   MATLABSystem: '<S83>/SourceBlock'
    //   SignalConversion generated from: '<S80>/imu data'
    //
    proc_control_B.n[1] = proc_control_B.In1_e.orientation.x;
    proc_control_B.n[2] = proc_control_B.In1_e.orientation.y;
    proc_control_B.n[3] = proc_control_B.In1_e.orientation.z;

    // SignalConversion generated from: '<S80>/imu data' incorporates:
    //   Merge: '<S5>/Merge'

    proc_control_B.t = proc_control_B.In1_e.orientation.w;
    proc_control_B.t6 = proc_control_B.In1_e.angular_velocity.x;
    proc_control_B.oa = proc_control_B.In1_e.angular_velocity.y;
    proc_control_B.ob = proc_control_B.In1_e.angular_velocity.z;

    // MATLABSystem: '<S84>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_209_5.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_p_c);

    // Outputs for Enabled SubSystem: '<S84>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S87>/Enable'

    if (rtb_NewDvlMsg) {
      // SignalConversion generated from: '<S87>/In1'
      proc_control_B.In1_m = proc_control_B.rtb_SourceBlock_o2_p_c;
    }

    // End of Outputs for SubSystem: '<S84>/Enabled Subsystem'

    // SignalConversion generated from: '<S80>/dvl data' incorporates:
    //   MATLABSystem: '<S84>/SourceBlock'
    //   Merge: '<S5>/Merge1'
    //
    proc_control_B.Product3_bo = proc_control_B.In1_m.x_vel_btm;
    proc_control_B.Divide3_b = proc_control_B.In1_m.y_vel_btm;
    proc_control_B.Divide_a = proc_control_B.In1_m.z_vel_btm;
    proc_control_B.t19 = proc_control_B.In1_m.velocity1;
    proc_control_B.t20 = proc_control_B.In1_m.velocity2;
    proc_control_B.t24 = proc_control_B.In1_m.velocity3;
    proc_control_B.t26 = proc_control_B.In1_m.velocity4;

    // MATLABSystem: '<S85>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_209_6.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_pk_e);

    // Outputs for Enabled SubSystem: '<S85>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S88>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S88>/In1'
      proc_control_B.In1_b = proc_control_B.rtb_SourceBlock_o2_pk_e;
    }

    // End of Outputs for SubSystem: '<S85>/Enabled Subsystem'

    // SignalConversion generated from: '<S80>/depth data' incorporates:
    //   MATLABSystem: '<S85>/SourceBlock'
    //   Merge: '<S5>/Merge2'
    //
    proc_control_B.rtb_Merge2_data = proc_control_B.In1_b.data;

    // End of Outputs for SubSystem: '<S5>/AUV'
  }

  // End of SwitchCase: '<S5>/Switch Case'

  // SignalConversion generated from: '<S252>/ SFunction ' incorporates:
  //   MATLAB Function: '<S245>/MATLAB Function'
  //   Merge: '<S5>/Merge'

  proc_control_B.n[0] = proc_control_B.t;

  // MATLAB Function: '<S245>/MATLAB Function' incorporates:
  //   Merge: '<S5>/Merge'
  //   SignalConversion generated from: '<S252>/ SFunction '

  proc_control_B.scale_l = 3.3121686421112381E-170;
  proc_control_B.absxk = std::abs(proc_control_B.t);
  if (proc_control_B.absxk > 3.3121686421112381E-170) {
    proc_control_B.d_a = 1.0;
    proc_control_B.scale_l = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
    proc_control_B.d_a = proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = std::abs(proc_control_B.n[1]);
  if (proc_control_B.absxk > proc_control_B.scale_l) {
    proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
    proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
      proc_control_B.t + 1.0;
    proc_control_B.scale_l = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
    proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = std::abs(proc_control_B.n[2]);
  if (proc_control_B.absxk > proc_control_B.scale_l) {
    proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
    proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
      proc_control_B.t + 1.0;
    proc_control_B.scale_l = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
    proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = std::abs(proc_control_B.n[3]);
  if (proc_control_B.absxk > proc_control_B.scale_l) {
    proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
    proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
      proc_control_B.t + 1.0;
    proc_control_B.scale_l = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
    proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.d_a = proc_control_B.scale_l * std::sqrt(proc_control_B.d_a);
  proc_control_B.t62 = proc_control_B.n[0] / proc_control_B.d_a;
  proc_control_B.n[0] = proc_control_B.t62;
  proc_control_B.b_g[0] = std::isnan(proc_control_B.t62);
  proc_control_B.t62 = proc_control_B.n[1] / proc_control_B.d_a;
  proc_control_B.n[1] = proc_control_B.t62;
  proc_control_B.b_g[1] = std::isnan(proc_control_B.t62);
  proc_control_B.t62 = proc_control_B.n[2] / proc_control_B.d_a;
  proc_control_B.n[2] = proc_control_B.t62;
  proc_control_B.b_g[2] = std::isnan(proc_control_B.t62);
  proc_control_B.t62 = proc_control_B.n[3] / proc_control_B.d_a;
  proc_control_B.n[3] = proc_control_B.t62;
  proc_control_B.b_g[3] = std::isnan(proc_control_B.t62);
  rtb_Reset = true;
  proc_control_B.b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_k < 4)) {
    if (!proc_control_B.b_g[proc_control_B.b_k]) {
      rtb_Reset = false;
      exitg1 = true;
    } else {
      proc_control_B.b_k++;
    }
  }

  if (rtb_Reset) {
    proc_control_B.n[0] = 1.0;
    proc_control_B.n[1] = 0.0;
    proc_control_B.n[2] = 0.0;
    proc_control_B.n[3] = 0.0;
  }

  // Sum: '<S258>/Sum' incorporates:
  //   Product: '<S258>/Product'
  //   Product: '<S258>/Product1'
  //   Product: '<S258>/Product2'
  //   Product: '<S258>/Product3'
  //   UnaryMinus: '<S253>/Unary Minus'
  //   UnaryMinus: '<S253>/Unary Minus1'
  //   UnaryMinus: '<S253>/Unary Minus2'

  proc_control_B.d_a = ((proc_control_B.n[0] * proc_control_B.n[0] +
    -proc_control_B.n[1] * -proc_control_B.n[1]) + -proc_control_B.n[2] *
                        -proc_control_B.n[2]) + -proc_control_B.n[3] *
    -proc_control_B.n[3];

  // Product: '<S254>/Divide'
  proc_control_B.scale_l = proc_control_B.n[0] / proc_control_B.d_a;

  // Product: '<S254>/Divide1' incorporates:
  //   UnaryMinus: '<S253>/Unary Minus'

  proc_control_B.absxk = proc_control_B.n[1] / proc_control_B.d_a;

  // Product: '<S254>/Divide2' incorporates:
  //   UnaryMinus: '<S253>/Unary Minus1'

  proc_control_B.t = proc_control_B.n[2] / proc_control_B.d_a;

  // Product: '<S254>/Divide3' incorporates:
  //   UnaryMinus: '<S253>/Unary Minus2'

  proc_control_B.Divide3 = proc_control_B.n[3] / proc_control_B.d_a;

  // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
  //   EnablePort: '<S246>/Enable'

  if (rtb_NewDvlMsg) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S274>/Enable'

      // Delay: '<S271>/Delay'
      if (proc_control_DW.Delay_DSTATE_i > 0.0) {
        // Gain: '<S275>/1//2' incorporates:
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.rtb_sincos_o2_i = proc_control_P.u2_Gain_l *
          proc_control_B.BusCreator.dvl_rotation[0];

        // Trigonometry: '<S275>/sincos' incorporates:
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.d_a = std::cos(proc_control_B.rtb_sincos_o2_i);
        proc_control_B.rtb_sincos_o2_m = std::sin(proc_control_B.rtb_sincos_o2_i);

        // Gain: '<S275>/1//2' incorporates:
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.rtb_sincos_o2_i = proc_control_P.u2_Gain_l *
          proc_control_B.BusCreator.dvl_rotation[1];

        // Trigonometry: '<S275>/sincos' incorporates:
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.rtb_sincos_o1_idx_1 = std::cos
          (proc_control_B.rtb_sincos_o2_i);
        proc_control_B.t39 = std::sin(proc_control_B.rtb_sincos_o2_i);

        // Gain: '<S275>/1//2' incorporates:
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.rtb_sincos_o2_i = proc_control_P.u2_Gain_l *
          proc_control_B.BusCreator.dvl_rotation[2];

        // Trigonometry: '<S275>/sincos' incorporates:
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.rtb_sincos_o1_idx_2 = std::cos
          (proc_control_B.rtb_sincos_o2_i);
        proc_control_B.rtb_sincos_o2_i = std::sin(proc_control_B.rtb_sincos_o2_i);

        // Fcn: '<S275>/q0' incorporates:
        //   Fcn: '<S275>/q3'
        //   Trigonometry: '<S275>/sincos'
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.c_idx_0 = proc_control_B.d_a *
          proc_control_B.rtb_sincos_o1_idx_1;
        proc_control_B.t62 = proc_control_B.rtb_sincos_o2_m * proc_control_B.t39;

        // Fcn: '<S275>/q0' incorporates:
        //   Trigonometry: '<S275>/sincos'
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.q0 = proc_control_B.c_idx_0 *
          proc_control_B.rtb_sincos_o1_idx_2 - proc_control_B.t62 *
          proc_control_B.rtb_sincos_o2_i;

        // Fcn: '<S275>/q1' incorporates:
        //   Fcn: '<S275>/q2'
        //   Trigonometry: '<S275>/sincos'
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.d_a *= proc_control_B.t39;
        proc_control_B.rtb_sincos_o2_m *= proc_control_B.rtb_sincos_o1_idx_1;

        // Fcn: '<S275>/q1' incorporates:
        //   Trigonometry: '<S275>/sincos'
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.q1 = proc_control_B.d_a * proc_control_B.rtb_sincos_o2_i
          + proc_control_B.rtb_sincos_o2_m * proc_control_B.rtb_sincos_o1_idx_2;

        // Fcn: '<S275>/q2' incorporates:
        //   Trigonometry: '<S275>/sincos'
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.q2 = proc_control_B.d_a *
          proc_control_B.rtb_sincos_o1_idx_2 - proc_control_B.rtb_sincos_o2_m *
          proc_control_B.rtb_sincos_o2_i;

        // Fcn: '<S275>/q3' incorporates:
        //   Trigonometry: '<S275>/sincos'
        //   Trigonometry: '<S55>/sincos'

        proc_control_B.q3 = proc_control_B.c_idx_0 *
          proc_control_B.rtb_sincos_o2_i + proc_control_B.t62 *
          proc_control_B.rtb_sincos_o1_idx_2;
      }

      // End of Delay: '<S271>/Delay'
      // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
    }

    // MATLAB Function: '<S246>/MATLAB Function' incorporates:
    //   Constant: '<S246>/Constant'
    //   Merge: '<S5>/Merge1'
    //   SignalConversion generated from: '<S272>/ SFunction '

    proc_control_B.v[0] = std::abs(proc_control_B.Product3_bo);
    proc_control_B.v[1] = std::abs(proc_control_B.Divide3_b);
    proc_control_B.v[2] = std::abs(proc_control_B.Divide_a);
    if (!std::isnan(proc_control_B.v[0])) {
      proc_control_B.base_index = 1;
    } else {
      proc_control_B.base_index = 0;
      proc_control_B.b_k = 2;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k <= 3)) {
        if (!std::isnan(proc_control_B.v[proc_control_B.b_k - 1])) {
          proc_control_B.base_index = proc_control_B.b_k;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }
    }

    if (proc_control_B.base_index == 0) {
      proc_control_B.d_a = proc_control_B.v[0];
    } else {
      proc_control_B.d_a = proc_control_B.v[proc_control_B.base_index - 1];
      for (proc_control_B.ibmat = proc_control_B.base_index + 1;
           proc_control_B.ibmat < 4; proc_control_B.ibmat++) {
        proc_control_B.rtb_sincos_o1_idx_2 =
          proc_control_B.v[proc_control_B.ibmat - 1];
        if (proc_control_B.d_a < proc_control_B.rtb_sincos_o1_idx_2) {
          proc_control_B.d_a = proc_control_B.rtb_sincos_o1_idx_2;
        }
      }
    }

    if (proc_control_B.d_a < proc_control_P.Constant_Value_iv) {
      proc_control_B.v[0] = proc_control_B.Product3_bo;
      proc_control_B.v[1] = proc_control_B.Divide3_b;
      proc_control_B.v[2] = proc_control_B.Divide_a;
      proc_control_B.enable_i = 1.0;
    } else {
      proc_control_B.TmpSignalConversionAtSFunct[0] = std::abs
        (proc_control_B.t19);
      proc_control_B.TmpSignalConversionAtSFunct[1] = std::abs
        (proc_control_B.t20);
      proc_control_B.TmpSignalConversionAtSFunct[2] = std::abs
        (proc_control_B.t24);
      proc_control_B.TmpSignalConversionAtSFunct[3] = std::abs
        (proc_control_B.t26);
      if (!std::isnan(proc_control_B.TmpSignalConversionAtSFunct[0])) {
        proc_control_B.base_index = 1;
      } else {
        proc_control_B.base_index = 0;
        proc_control_B.ibmat = 2;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat <= 4)) {
          if (!std::isnan
              (proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.ibmat -
               1])) {
            proc_control_B.base_index = proc_control_B.ibmat;
            exitg1 = true;
          } else {
            proc_control_B.ibmat++;
          }
        }
      }

      if (proc_control_B.base_index == 0) {
        proc_control_B.d_a = proc_control_B.TmpSignalConversionAtSFunct[0];
      } else {
        proc_control_B.d_a =
          proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.base_index -
          1];
        for (proc_control_B.ibmat = proc_control_B.base_index + 1;
             proc_control_B.ibmat < 5; proc_control_B.ibmat++) {
          proc_control_B.Product3_bo =
            proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.ibmat - 1];
          if (proc_control_B.d_a < proc_control_B.Product3_bo) {
            proc_control_B.d_a = proc_control_B.Product3_bo;
          }
        }
      }

      if (proc_control_B.d_a < proc_control_P.Constant_Value_iv) {
        proc_control_B.v[0] = proc_control_B.t19;
        proc_control_B.v[1] = proc_control_B.t20;
        proc_control_B.v[2] = proc_control_B.t24;
        proc_control_B.enable_i = 0.0;
      } else {
        proc_control_B.v[0] = 0.0;
        proc_control_B.v[1] = 0.0;
        proc_control_B.v[2] = 0.0;
        proc_control_B.enable_i = 0.0;
      }
    }

    // End of MATLAB Function: '<S246>/MATLAB Function'
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Sqrt: '<S280>/sqrt' incorporates:
      //   Product: '<S281>/Product'
      //   Product: '<S281>/Product1'
      //   Product: '<S281>/Product2'
      //   Product: '<S281>/Product3'
      //   Sum: '<S281>/Sum'

      proc_control_B.Product3_dy = std::sqrt(((proc_control_B.q0 *
        proc_control_B.q0 + proc_control_B.q1 * proc_control_B.q1) +
        proc_control_B.q2 * proc_control_B.q2) + proc_control_B.q3 *
        proc_control_B.q3);

      // Product: '<S276>/Product'
      proc_control_B.Product1_fr = proc_control_B.q0 /
        proc_control_B.Product3_dy;

      // Product: '<S276>/Product1'
      proc_control_B.Product_al = proc_control_B.q1 / proc_control_B.Product3_dy;

      // Product: '<S276>/Product2'
      proc_control_B.Product2_al = proc_control_B.q2 /
        proc_control_B.Product3_dy;

      // Product: '<S276>/Product3'
      proc_control_B.Product3_dy = proc_control_B.q3 /
        proc_control_B.Product3_dy;

      // Product: '<S277>/Product' incorporates:
      //   Product: '<S278>/Product'

      proc_control_B.rtb_sincos_o2_i = proc_control_B.Product_al *
        proc_control_B.Product2_al;

      // Product: '<S277>/Product1' incorporates:
      //   Product: '<S278>/Product1'

      proc_control_B.Product3_bo = proc_control_B.Product1_fr *
        proc_control_B.Product3_dy;

      // Gain: '<S277>/Gain' incorporates:
      //   Product: '<S277>/Product'
      //   Product: '<S277>/Product1'
      //   Sum: '<S277>/Sum1'

      proc_control_B.Gain_l = (proc_control_B.rtb_sincos_o2_i +
        proc_control_B.Product3_bo) * proc_control_P.Gain_Gain_g;

      // Gain: '<S277>/Gain1' incorporates:
      //   Product: '<S277>/Product2'
      //   Product: '<S277>/Product3'
      //   Sum: '<S277>/Sum2'

      proc_control_B.Gain1 = (proc_control_B.Product_al *
        proc_control_B.Product3_dy - proc_control_B.Product1_fr *
        proc_control_B.Product2_al) * proc_control_P.Gain1_Gain_o;

      // Product: '<S277>/Product7' incorporates:
      //   Product: '<S278>/Product7'

      proc_control_B.d_a = proc_control_B.Product3_dy *
        proc_control_B.Product3_dy;

      // Gain: '<S277>/Gain2' incorporates:
      //   Constant: '<S277>/Constant'
      //   Product: '<S277>/Product6'
      //   Product: '<S277>/Product7'
      //   Sum: '<S277>/Sum3'

      proc_control_B.Gain2 = ((proc_control_P.Constant_Value_or -
        proc_control_B.Product2_al * proc_control_B.Product2_al) -
        proc_control_B.d_a) * proc_control_P.Gain2_Gain_n5;

      // Gain: '<S278>/Gain' incorporates:
      //   Sum: '<S278>/Sum1'

      proc_control_B.Gain_o = (proc_control_B.rtb_sincos_o2_i -
        proc_control_B.Product3_bo) * proc_control_P.Gain_Gain_gs;

      // Gain: '<S278>/Gain1' incorporates:
      //   Product: '<S278>/Product2'
      //   Product: '<S278>/Product3'
      //   Sum: '<S278>/Sum2'

      proc_control_B.Gain1_d = (proc_control_B.Product1_fr *
        proc_control_B.Product_al + proc_control_B.Product2_al *
        proc_control_B.Product3_dy) * proc_control_P.Gain1_Gain_jy;

      // Gain: '<S278>/Gain2' incorporates:
      //   Constant: '<S278>/Constant'
      //   Product: '<S278>/Product6'
      //   Sum: '<S278>/Sum3'

      proc_control_B.Gain2_l = ((proc_control_P.Constant_Value_mz -
        proc_control_B.Product_al * proc_control_B.Product_al) -
        proc_control_B.d_a) * proc_control_P.Gain2_Gain_j4;
    }

    // Sum: '<S277>/Sum' incorporates:
    //   Product: '<S277>/Product4'
    //   Product: '<S277>/Product5'
    //   Product: '<S277>/Product8'

    proc_control_B.Sum = (proc_control_B.v[0] * proc_control_B.Gain2 +
                          proc_control_B.Gain_l * proc_control_B.v[1]) +
      proc_control_B.Gain1 * proc_control_B.v[2];

    // Sum: '<S278>/Sum' incorporates:
    //   Product: '<S278>/Product4'
    //   Product: '<S278>/Product5'
    //   Product: '<S278>/Product8'

    proc_control_B.Sum_n = (proc_control_B.v[0] * proc_control_B.Gain_o +
      proc_control_B.Gain2_l * proc_control_B.v[1]) + proc_control_B.Gain1_d *
      proc_control_B.v[2];
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Gain: '<S279>/Gain' incorporates:
      //   Product: '<S279>/Product'
      //   Product: '<S279>/Product1'
      //   Sum: '<S279>/Sum1'

      proc_control_B.Gain_d = (proc_control_B.Product_al *
        proc_control_B.Product3_dy + proc_control_B.Product1_fr *
        proc_control_B.Product2_al) * proc_control_P.Gain_Gain_e;

      // Gain: '<S279>/Gain1' incorporates:
      //   Product: '<S279>/Product2'
      //   Product: '<S279>/Product3'
      //   Sum: '<S279>/Sum2'

      proc_control_B.Gain1_e = (proc_control_B.Product2_al *
        proc_control_B.Product3_dy - proc_control_B.Product1_fr *
        proc_control_B.Product_al) * proc_control_P.Gain1_Gain_e;

      // Gain: '<S279>/Gain2' incorporates:
      //   Constant: '<S279>/Constant'
      //   Product: '<S279>/Product6'
      //   Product: '<S279>/Product7'
      //   Sum: '<S279>/Sum3'

      proc_control_B.Gain2_n = ((proc_control_P.Constant_Value_j5 -
        proc_control_B.Product_al * proc_control_B.Product_al) -
        proc_control_B.Product2_al * proc_control_B.Product2_al) *
        proc_control_P.Gain2_Gain_h;

      // Update for Delay: '<S271>/Delay' incorporates:
      //   Constant: '<S271>/Constant'

      proc_control_DW.Delay_DSTATE_i = proc_control_P.Constant_Value_ll;
    }

    // Sum: '<S279>/Sum' incorporates:
    //   Product: '<S279>/Product4'
    //   Product: '<S279>/Product5'
    //   Product: '<S279>/Product8'

    proc_control_B.Sum_l = (proc_control_B.v[0] * proc_control_B.Gain_d +
      proc_control_B.Gain1_e * proc_control_B.v[1]) + proc_control_B.Gain2_n *
      proc_control_B.v[2];
  }

  // End of Outputs for SubSystem: '<S9>/DVL Measurements'

  // Outputs for Enabled SubSystem: '<S9>/Depth Measurements' incorporates:
  //   EnablePort: '<S247>/Enable'

  if (rtb_newPressureMsg) {
    // Sqrt: '<S288>/sqrt' incorporates:
    //   Product: '<S289>/Product'
    //   Product: '<S289>/Product1'
    //   Product: '<S289>/Product2'
    //   Product: '<S289>/Product3'
    //   Sum: '<S289>/Sum'

    proc_control_B.Product3_bo = std::sqrt(((proc_control_B.scale_l *
      proc_control_B.scale_l + proc_control_B.absxk * proc_control_B.absxk) +
      proc_control_B.t * proc_control_B.t) + proc_control_B.Divide3 *
      proc_control_B.Divide3);

    // Product: '<S284>/Product'
    proc_control_B.Divide3_b = proc_control_B.scale_l /
      proc_control_B.Product3_bo;

    // Product: '<S284>/Product1'
    proc_control_B.Divide_a = proc_control_B.absxk / proc_control_B.Product3_bo;

    // Product: '<S284>/Product2'
    proc_control_B.d_a = proc_control_B.t / proc_control_B.Product3_bo;

    // Product: '<S284>/Product3'
    proc_control_B.Product3_bo = proc_control_B.Divide3 /
      proc_control_B.Product3_bo;

    // Sum: '<S247>/Sum' incorporates:
    //   Constant: '<S287>/Constant'
    //   Gain: '<S287>/Gain'
    //   Gain: '<S287>/Gain1'
    //   Gain: '<S287>/Gain2'
    //   Merge: '<S5>/Merge2'
    //   Product: '<S287>/Product'
    //   Product: '<S287>/Product1'
    //   Product: '<S287>/Product2'
    //   Product: '<S287>/Product3'
    //   Product: '<S287>/Product4'
    //   Product: '<S287>/Product5'
    //   Product: '<S287>/Product6'
    //   Product: '<S287>/Product7'
    //   Product: '<S287>/Product8'
    //   Sum: '<S287>/Sum'
    //   Sum: '<S287>/Sum1'
    //   Sum: '<S287>/Sum2'
    //   Sum: '<S287>/Sum3'

    proc_control_B.zposition = proc_control_B.rtb_Merge2_data -
      (((proc_control_B.Divide_a * proc_control_B.Product3_bo +
         proc_control_B.Divide3_b * proc_control_B.d_a) *
        proc_control_P.Gain_Gain_c * proc_control_B.BusCreator.depth_pose[0] +
        (proc_control_B.d_a * proc_control_B.Product3_bo -
         proc_control_B.Divide3_b * proc_control_B.Divide_a) *
        proc_control_P.Gain1_Gain_p0 * proc_control_B.BusCreator.depth_pose[1])
       + ((proc_control_P.Constant_Value_b - proc_control_B.Divide_a *
           proc_control_B.Divide_a) - proc_control_B.d_a * proc_control_B.d_a) *
       proc_control_P.Gain2_Gain_e * proc_control_B.BusCreator.depth_pose[2]);
  }

  // End of Outputs for SubSystem: '<S9>/Depth Measurements'

  // Outputs for Enabled SubSystem: '<S5>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S81>/Enable'

  // Logic: '<S5>/NOT' incorporates:
  //   Delay: '<S5>/Delay'

  if (!(proc_control_DW.Delay_DSTATE_m != 0.0)) {
    // Switch: '<S92>/Reset' incorporates:
    //   Constant: '<S81>/Constant'
    //   Constant: '<S92>/Initial Condition'
    //   Memory: '<S92>/Memory'
    //   MinMax: '<S90>/MinMax'

    if (proc_control_P.Constant_Value_aw != 0.0) {
      rtb_Reset = proc_control_P.MinMaxRunningResettable_vinit;
    } else {
      rtb_Reset = (rtb_NewDvlMsg || proc_control_DW.Memory_PreviousInput_e);
    }

    // End of Switch: '<S92>/Reset'

    // Switch: '<S93>/Reset' incorporates:
    //   Constant: '<S81>/Constant1'
    //   Constant: '<S93>/Initial Condition'
    //   Memory: '<S93>/Memory'
    //   MinMax: '<S91>/MinMax'

    if (proc_control_P.Constant1_Value_i != 0.0) {
      b_value = proc_control_P.MinMaxRunningResettable1_vinit;
    } else {
      b_value = (b_value || proc_control_DW.Memory_PreviousInput_n);
    }

    // End of Switch: '<S93>/Reset'

    // MATLAB Function: '<S81>/MATLAB Function'
    proc_control_B.y = (rtb_Reset + b_value >= 2);

    // Update for Memory: '<S92>/Memory'
    proc_control_DW.Memory_PreviousInput_e = rtb_Reset;

    // Update for Memory: '<S93>/Memory'
    proc_control_DW.Memory_PreviousInput_n = b_value;
  }

  // End of Logic: '<S5>/NOT'
  // End of Outputs for SubSystem: '<S5>/Enabled Subsystem'

  // Outputs for Enabled SubSystem: '<Root>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S1>/Enable'

  // Outputs for Enabled SubSystem: '<S9>/Enabled Subsystem' incorporates:
  //   EnablePort: '<S248>/Enable'

  // Logic: '<S249>/AND' incorporates:
  //   Constant: '<S290>/Enable1'
  //   Constant: '<S290>/Enable3'
  //   DataTypeConversion: '<S290>/DataTypeConversion_Enable2'
  //   Logic: '<S249>/NOT'
  //   MATLABSystem: '<S114>/MATLAB System'
  //   Switch: '<S248>/Switch'
  //
  if ((!(proc_control_DW.obj_i.m_reset != 0.0)) && (proc_control_B.y != 0.0)) {
    // DataTypeConversion: '<S290>/DataTypeConversion_uState' incorporates:
    //   Delay: '<S250>/Delay'
    //   ZeroOrderHold: '<S250>/Zero-Order Hold'

    proc_control_B.DataTypeConversion_uState[0] = proc_control_B.Probe_o1;
    std::memcpy(&proc_control_B.DataTypeConversion_uState[1],
                &proc_control_B.Delay[0], sizeof(real_T) << 3U);
    proc_control_B.DataTypeConversion_uState[9] = proc_control_B.BusCreator.mass;
    proc_control_B.DataTypeConversion_uState[10] =
      proc_control_B.BusCreator.volume;
    proc_control_B.DataTypeConversion_uState[11] =
      proc_control_B.BusCreator.sub_height;
    std::memcpy(&proc_control_B.DataTypeConversion_uState[12],
                &proc_control_B.BusCreator.I[0], 9U * sizeof(real_T));
    proc_control_B.DataTypeConversion_uState[21] = proc_control_B.BusCreator.rg
      [0];
    proc_control_B.DataTypeConversion_uState[24] = proc_control_B.BusCreator.rb
      [0];
    proc_control_B.DataTypeConversion_uState[22] = proc_control_B.BusCreator.rg
      [1];
    proc_control_B.DataTypeConversion_uState[25] = proc_control_B.BusCreator.rb
      [1];
    proc_control_B.DataTypeConversion_uState[23] = proc_control_B.BusCreator.rg
      [2];
    proc_control_B.DataTypeConversion_uState[26] = proc_control_B.BusCreator.rb
      [2];
    for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
      proc_control_B.DataTypeConversion_uState[proc_control_B.i + 27] =
        proc_control_B.BusCreator.cdl[proc_control_B.i];
      proc_control_B.DataTypeConversion_uState[proc_control_B.i + 33] =
        proc_control_B.BusCreator.cdq[proc_control_B.i];
      proc_control_B.DataTypeConversion_uState[proc_control_B.i + 39] =
        proc_control_B.BusCreator.added_mass[proc_control_B.i];
    }

    proc_control_B.DataTypeConversion_uState[45] = proc_control_B.BusCreator.rho;
    proc_control_B.DataTypeConversion_uState[46] = proc_control_B.BusCreator.g;
    std::memcpy(&proc_control_B.DataTypeConversion_uState[47],
                &proc_control_B.Transpose[0], 48U * sizeof(real_T));

    // End of DataTypeConversion: '<S290>/DataTypeConversion_uState'

    // Outputs for Enabled SubSystem: '<S290>/Correct1' incorporates:
    //   EnablePort: '<S291>/Enable'

    if (proc_control_P.Enable1_Value) {
      // MATLABSystem: '<S291>/MATLAB System' incorporates:
      //   Constant: '<S290>/BlockOrdering'

      proc_control_B.MATLABSystem_o3_k = proc_control_P.BlockOrdering_Value;

      // MATLABSystem: '<S291>/MATLAB System' incorporates:
      //   DataStoreRead: '<S291>/Data Store ReadX'

      // EKFNAVMESUREDF Summary of this function goes here
      //    Detailed explanation goes here
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        std::memcpy(&proc_control_B.imvec[0], &proc_control_DW.x[0], 13U *
                    sizeof(real_T));
        proc_control_B.Product3_dy = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs(proc_control_DW.x[proc_control_B.b_j]));
        proc_control_B.imvec[proc_control_B.b_j] =
          proc_control_DW.x[proc_control_B.b_j] + proc_control_B.Product3_dy;

        // EKFNAVMESUREDF Summary of this function goes here
        //    Detailed explanation goes here
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_B.ibmat = tmp_2[proc_control_B.Ns];
          proc_control_B.b_dHdx[proc_control_B.Ns + 7 * proc_control_B.b_j] =
            (proc_control_B.imvec[proc_control_B.ibmat] -
             proc_control_DW.x[proc_control_B.ibmat]) /
            proc_control_B.Product3_dy;
        }
      }

      // EKFNAVMESUREDF Summary of this function goes here
      //    Detailed explanation goes here
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 7; proc_control_B.b_j++)
      {
        // Start for MATLABSystem: '<S291>/MATLAB System' incorporates:
        //   Constant: '<S290>/R1'
        //   DataStoreRead: '<S291>/Data Store ReadP'
        //
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.ibmat = proc_control_B.i * 13 - 1;
          proc_control_B.Product3_dy = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_dy += proc_control_DW.P
              [(proc_control_B.ibmat + proc_control_B.b_k) + 1] *
              proc_control_B.b_dHdx[proc_control_B.b_k * 7 + proc_control_B.b_j];
          }

          proc_control_B.K[proc_control_B.i + 20 * proc_control_B.b_j] =
            proc_control_B.Product3_dy;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_B.K[(proc_control_B.Ns + 20 * proc_control_B.b_j) + 13] =
            proc_control_P.R1_Value[7 * proc_control_B.Ns + proc_control_B.b_j];
        }
      }

      proc_control_qr(proc_control_B.K, proc_control_B.a__1_n,
                      proc_control_B.R_f);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 7; proc_control_B.i_f
             ++) {
          proc_control_B.Sy[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.R_f[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 7;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S291>/MATLAB System' incorporates:
        //   DataStoreRead: '<S291>/Data Store ReadP'

        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.rtb_sincos_o2_i = 0.0;
          proc_control_B.i_f = 0;
          for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
               proc_control_B.base_index++) {
            proc_control_B.rtb_sincos_o2_i +=
              proc_control_DW.P[proc_control_B.i_f + proc_control_B.Ns] *
              proc_control_DW.P[proc_control_B.i_f + proc_control_B.b_k];
            proc_control_B.i_f += 13;
          }

          proc_control_B.A_h[proc_control_B.ibmat + proc_control_B.Ns] =
            proc_control_B.rtb_sincos_o2_i;
          proc_control_B.ibmat += 13;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S291>/MATLAB System'
        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.Product_al = 0.0;
          proc_control_B.i_f = 0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++)
          {
            proc_control_B.Product_al += proc_control_B.A_h[proc_control_B.i_f +
              proc_control_B.b_k] *
              proc_control_B.b_dHdx[proc_control_B.base_index +
              proc_control_B.Ns];
            proc_control_B.i_f += 13;
            proc_control_B.base_index += 7;
          }

          proc_control_B.K_m[proc_control_B.ibmat + proc_control_B.Ns] =
            proc_control_B.Product_al;
          proc_control_B.ibmat += 7;
        }
      }

      // MATLABSystem: '<S291>/MATLAB System'
      std::memcpy(&proc_control_B.C_c[0], &proc_control_B.K_m[0], 91U * sizeof
                  (real_T));

      // Start for MATLABSystem: '<S291>/MATLAB System'
      proc_control_trisolve_p(proc_control_B.Sy, proc_control_B.C_c);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 7; proc_control_B.i_f
             ++) {
          proc_control_B.R_f[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.Sy[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 7;
      }

      proc_control_trisolve_pr(proc_control_B.R_f, proc_control_B.C_c);

      // MATLABSystem: '<S291>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_B.K_m[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.C_c[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 91; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S291>/MATLAB System'
        proc_control_B.C_c[proc_control_B.Ns] =
          -proc_control_B.K_m[proc_control_B.Ns];
      }

      // MATLABSystem: '<S291>/MATLAB System' incorporates:
      //   DataStoreRead: '<S291>/Data Store ReadP'

      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k++)
      {
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_B.Product_al = 0.0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
            proc_control_B.Product_al +=
              proc_control_B.C_c[proc_control_B.base_index + proc_control_B.i_f]
              * proc_control_B.b_dHdx[proc_control_B.i + proc_control_B.ibmat];
            proc_control_B.base_index += 13;
          }

          proc_control_B.A_h[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.Product_al;
        }

        proc_control_B.Ns += 13;
        proc_control_B.ibmat += 7;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.A_h[proc_control_B.Ns]++;
        proc_control_B.Ns += 14;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        proc_control_B.base_index = proc_control_B.b_j * 13 - 1;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.ibmat = proc_control_B.i * 13 - 1;
          proc_control_B.Product3_dy = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_dy += proc_control_DW.P
              [(proc_control_B.ibmat + proc_control_B.b_k) + 1] *
              proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
          }

          proc_control_B.y_m[(proc_control_B.base_index + proc_control_B.i) + 1]
            = proc_control_B.Product3_dy;
        }
      }

      // Start for MATLABSystem: '<S291>/MATLAB System' incorporates:
      //   Constant: '<S290>/R1'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_B.Product_al = 0.0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
            proc_control_B.Product_al +=
              proc_control_B.K_m[proc_control_B.base_index + proc_control_B.i_f]
              * proc_control_P.R1_Value[proc_control_B.i + proc_control_B.Ns];
            proc_control_B.base_index += 13;
          }

          proc_control_B.C_c[proc_control_B.b_k + proc_control_B.ibmat] =
            proc_control_B.Product_al;
          proc_control_B.b_k += 7;
        }

        proc_control_B.Ns += 7;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        std::memcpy(&proc_control_B.y_i[proc_control_B.Ns * 20],
                    &proc_control_B.y_m[proc_control_B.Ns * 13], 13U * sizeof
                    (real_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          proc_control_B.y_i[(proc_control_B.ibmat + 20 * proc_control_B.Ns) +
            13] = proc_control_B.C_c[7 * proc_control_B.Ns +
            proc_control_B.ibmat];
        }
      }

      // MATLABSystem: '<S291>/MATLAB System'
      proc_control_qr_p(proc_control_B.y_i, proc_control_B.a__1_f,
                        proc_control_B.A_h);

      // DataStoreWrite: '<S291>/Data Store WriteP' incorporates:
      //   MATLABSystem: '<S291>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_DW.P[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 13;
        }

        proc_control_B.Ns += 13;
      }

      // End of DataStoreWrite: '<S291>/Data Store WriteP'

      // SignalConversion generated from: '<S291>/MATLAB System' incorporates:
      //   Merge: '<S5>/Merge'

      proc_control_B.scale[0] = proc_control_B.scale_l;
      proc_control_B.scale[1] = proc_control_B.absxk;
      proc_control_B.scale[2] = proc_control_B.t;
      proc_control_B.scale[3] = proc_control_B.Divide3;
      proc_control_B.scale[4] = proc_control_B.t6;
      proc_control_B.scale[5] = proc_control_B.oa;
      proc_control_B.scale[6] = proc_control_B.ob;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S291>/MATLAB System' incorporates:
        //   DataStoreRead: '<S291>/Data Store ReadX'

        proc_control_B.scale_a[proc_control_B.Ns] =
          proc_control_B.scale[proc_control_B.Ns] -
          proc_control_DW.x[tmp_2[proc_control_B.Ns]];
      }

      // DataStoreWrite: '<S291>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S291>/Data Store ReadX'
      //   MATLABSystem: '<S291>/MATLAB System'
      //
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.rtb_sincos_o2_i = 0.0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 7; proc_control_B.b_k
             ++) {
          proc_control_B.rtb_sincos_o2_i +=
            proc_control_B.K_m[proc_control_B.ibmat + proc_control_B.Ns] *
            proc_control_B.scale_a[proc_control_B.b_k];
          proc_control_B.ibmat += 13;
        }

        proc_control_DW.x[proc_control_B.Ns] += proc_control_B.rtb_sincos_o2_i;
      }

      // End of DataStoreWrite: '<S291>/Data Store WriteX'
    }

    // End of Outputs for SubSystem: '<S290>/Correct1'

    // Switch: '<S248>/Switch' incorporates:
    //   Constant: '<S248>/Constant'
    //   Constant: '<S290>/Enable1'

    if (proc_control_B.BusCreator.dvl_lost_override >
        proc_control_P.Switch_Threshold_i) {
      proc_control_B.rtb_sincos_o2_i = proc_control_P.Constant_Value_le;
    } else {
      proc_control_B.rtb_sincos_o2_i = proc_control_B.enable_i;
    }

    // Outputs for Enabled SubSystem: '<S290>/Correct2' incorporates:
    //   EnablePort: '<S292>/Enable'

    if (proc_control_B.rtb_sincos_o2_i != 0.0) {
      // MATLABSystem: '<S292>/MATLAB System' incorporates:
      //   DataStoreRead: '<S292>/Data Store ReadP'
      //   DataStoreRead: '<S292>/Data Store ReadX'

      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        std::memcpy(&proc_control_B.imvec[0], &proc_control_DW.x[0], 13U *
                    sizeof(real_T));
        proc_control_B.Product3_dy = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs(proc_control_DW.x[proc_control_B.b_j]));
        proc_control_B.imvec[proc_control_B.b_j] =
          proc_control_DW.x[proc_control_B.b_j] + proc_control_B.Product3_dy;
        proc_control_B.b_dHdx_n[proc_control_B.Ns] = (proc_control_B.imvec[7] -
          proc_control_DW.x[7]) / proc_control_B.Product3_dy;
        proc_control_B.b_dHdx_n[proc_control_B.Ns + 1] = (proc_control_B.imvec[8]
          - proc_control_DW.x[8]) / proc_control_B.Product3_dy;
        proc_control_B.b_dHdx_n[proc_control_B.Ns + 2] = (proc_control_B.imvec[9]
          - proc_control_DW.x[9]) / proc_control_B.Product3_dy;
        proc_control_B.Ns += 3;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 3; proc_control_B.b_j++)
      {
        proc_control_B.base_index = proc_control_B.b_j * 13 - 1;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.ibmat = proc_control_B.i * 13 - 1;
          proc_control_B.Product3_dy = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_dy += proc_control_DW.P
              [(proc_control_B.ibmat + proc_control_B.b_k) + 1] *
              proc_control_B.b_dHdx_n[proc_control_B.b_k * 3 +
              proc_control_B.b_j];
          }

          proc_control_B.K_o[(proc_control_B.base_index + proc_control_B.i) + 1]
            = proc_control_B.Product3_dy;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S292>/MATLAB System'
        proc_control_B.K_p[proc_control_B.Ns] =
          proc_control_B.K_o[proc_control_B.Ns];
        proc_control_B.K_p[proc_control_B.Ns + 16] =
          proc_control_B.K_o[proc_control_B.Ns + 13];
        proc_control_B.K_p[proc_control_B.Ns + 32] =
          proc_control_B.K_o[proc_control_B.Ns + 26];
      }

      // Start for MATLABSystem: '<S292>/MATLAB System' incorporates:
      //   Constant: '<S290>/R2'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
           proc_control_B.ibmat++) {
        proc_control_B.K_p[proc_control_B.Ns + 13] =
          proc_control_P.R2_Value[proc_control_B.ibmat];
        proc_control_B.K_p[proc_control_B.Ns + 14] =
          proc_control_P.R2_Value[proc_control_B.ibmat + 3];
        proc_control_B.K_p[proc_control_B.Ns + 15] =
          proc_control_P.R2_Value[proc_control_B.ibmat + 6];
        proc_control_B.Ns += 16;
      }

      // MATLABSystem: '<S292>/MATLAB System'
      proc_control_qr_pr(proc_control_B.K_p, proc_control_B.array_p,
                         proc_control_B.TmpSignalConversionAtMATL_d);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
           proc_control_B.ibmat++) {
        proc_control_B.twpt[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.ibmat];
        proc_control_B.twpt[proc_control_B.Ns + 1] =
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.ibmat + 3];
        proc_control_B.twpt[proc_control_B.Ns + 2] =
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.ibmat + 6];
        proc_control_B.Ns += 3;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S292>/MATLAB System' incorporates:
        //   DataStoreRead: '<S292>/Data Store ReadP'

        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.rtb_sincos_o2_i = 0.0;
          proc_control_B.i_f = 0;
          for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
               proc_control_B.base_index++) {
            proc_control_B.rtb_sincos_o2_i +=
              proc_control_DW.P[proc_control_B.i_f + proc_control_B.Ns] *
              proc_control_DW.P[proc_control_B.i_f + proc_control_B.b_k];
            proc_control_B.i_f += 13;
          }

          proc_control_B.A_h[proc_control_B.ibmat + proc_control_B.Ns] =
            proc_control_B.rtb_sincos_o2_i;
          proc_control_B.ibmat += 13;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S292>/MATLAB System'
        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.Product_al = 0.0;
          proc_control_B.i_f = 0;
          proc_control_B.base_index = 0;
          for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++)
          {
            proc_control_B.Product_al += proc_control_B.A_h[proc_control_B.i_f +
              proc_control_B.b_k] *
              proc_control_B.b_dHdx_n[proc_control_B.base_index +
              proc_control_B.Ns];
            proc_control_B.i_f += 13;
            proc_control_B.base_index += 3;
          }

          proc_control_B.K_o[proc_control_B.ibmat + proc_control_B.Ns] =
            proc_control_B.Product_al;
          proc_control_B.ibmat += 3;
        }
      }

      // MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        proc_control_B.C_g[proc_control_B.Ns] =
          proc_control_B.K_o[proc_control_B.Ns];
        proc_control_B.C_g[proc_control_B.Ns + 1] =
          proc_control_B.K_o[proc_control_B.Ns + 1];
        proc_control_B.C_g[proc_control_B.Ns + 2] =
          proc_control_B.K_o[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;
      }

      // Start for MATLABSystem: '<S292>/MATLAB System'
      proc_control_trisolve_pr3(proc_control_B.twpt, proc_control_B.C_g);

      // MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        proc_control_B.C_cq[proc_control_B.Ns] =
          proc_control_B.C_g[proc_control_B.Ns];
        proc_control_B.C_cq[proc_control_B.Ns + 1] =
          proc_control_B.C_g[proc_control_B.Ns + 1];
        proc_control_B.C_cq[proc_control_B.Ns + 2] =
          proc_control_B.C_g[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;
      }

      // Start for MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
           proc_control_B.ibmat++) {
        proc_control_B.twpt_p[proc_control_B.Ns] =
          proc_control_B.twpt[proc_control_B.ibmat];
        proc_control_B.twpt_p[proc_control_B.Ns + 1] =
          proc_control_B.twpt[proc_control_B.ibmat + 3];
        proc_control_B.twpt_p[proc_control_B.Ns + 2] =
          proc_control_B.twpt[proc_control_B.ibmat + 6];
        proc_control_B.Ns += 3;
      }

      proc_control_trisolve_pr35(proc_control_B.twpt_p, proc_control_B.C_cq);

      // MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.K_o[proc_control_B.ibmat] =
          proc_control_B.C_cq[proc_control_B.Ns];
        proc_control_B.K_o[proc_control_B.ibmat + 13] =
          proc_control_B.C_cq[proc_control_B.Ns + 1];
        proc_control_B.K_o[proc_control_B.ibmat + 26] =
          proc_control_B.C_cq[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 39; proc_control_B.Ns++) {
        // Start for MATLABSystem: '<S292>/MATLAB System'
        proc_control_B.C_g[proc_control_B.Ns] =
          -proc_control_B.K_o[proc_control_B.Ns];
      }

      // MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k++)
      {
        proc_control_B.Product_al = proc_control_B.b_dHdx_n[proc_control_B.Ns +
          1];
        proc_control_B.ob = proc_control_B.b_dHdx_n[proc_control_B.Ns];
        proc_control_B.Product1_fr = proc_control_B.b_dHdx_n[proc_control_B.Ns +
          2];
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_B.A_h[proc_control_B.i_f + proc_control_B.ibmat] =
            (proc_control_B.C_g[proc_control_B.i_f + 13] *
             proc_control_B.Product_al + proc_control_B.ob *
             proc_control_B.C_g[proc_control_B.i_f]) +
            proc_control_B.C_g[proc_control_B.i_f + 26] *
            proc_control_B.Product1_fr;
        }

        proc_control_B.Ns += 3;
        proc_control_B.ibmat += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.A_h[proc_control_B.Ns]++;
        proc_control_B.Ns += 14;
      }

      // Start for MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        // MATLABSystem: '<S292>/MATLAB System' incorporates:
        //   DataStoreRead: '<S292>/Data Store ReadP'

        proc_control_B.base_index = proc_control_B.b_j * 13 - 1;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.ibmat = proc_control_B.i * 13 - 1;
          proc_control_B.Product3_dy = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_dy += proc_control_DW.P
              [(proc_control_B.ibmat + proc_control_B.b_k) + 1] *
              proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
          }

          proc_control_B.y_m[(proc_control_B.base_index + proc_control_B.i) + 1]
            = proc_control_B.Product3_dy;
        }

        // Start for MATLABSystem: '<S292>/MATLAB System' incorporates:
        //   Constant: '<S290>/R2'
        //
        proc_control_B.Product_al = proc_control_B.K_o[proc_control_B.b_j + 13];
        proc_control_B.ob = proc_control_B.K_o[proc_control_B.b_j];
        proc_control_B.Product1_fr = proc_control_B.K_o[proc_control_B.b_j + 26];
        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k
             ++) {
          proc_control_B.C_g[proc_control_B.b_k + proc_control_B.Ns] =
            (proc_control_P.R2_Value[proc_control_B.ibmat + 1] *
             proc_control_B.Product_al +
             proc_control_P.R2_Value[proc_control_B.ibmat] * proc_control_B.ob)
            + proc_control_P.R2_Value[proc_control_B.ibmat + 2] *
            proc_control_B.Product1_fr;
          proc_control_B.ibmat += 3;
        }

        proc_control_B.Ns += 3;
      }

      // Start for MATLABSystem: '<S292>/MATLAB System'
      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      proc_control_B.b_k = 0;
      for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f++)
      {
        std::memcpy(&proc_control_B.y_o4[proc_control_B.Ns],
                    &proc_control_B.y_m[proc_control_B.b_k], 13U * sizeof(real_T));
        proc_control_B.y_o4[proc_control_B.Ns + 13] =
          proc_control_B.C_g[proc_control_B.ibmat];
        proc_control_B.y_o4[proc_control_B.Ns + 14] =
          proc_control_B.C_g[proc_control_B.ibmat + 1];
        proc_control_B.y_o4[proc_control_B.Ns + 15] =
          proc_control_B.C_g[proc_control_B.ibmat + 2];
        proc_control_B.Ns += 16;
        proc_control_B.ibmat += 3;
        proc_control_B.b_k += 13;
      }

      // MATLABSystem: '<S292>/MATLAB System'
      proc_control_qr_pr3(proc_control_B.y_o4, proc_control_B.a__1_e,
                          proc_control_B.A_h);

      // SignalConversion generated from: '<S292>/MATLAB System' incorporates:
      //   DataStoreRead: '<S292>/Data Store ReadX'
      //   MATLABSystem: '<S292>/MATLAB System'
      //
      proc_control_B.Product_al = proc_control_B.Sum - proc_control_DW.x[7];
      proc_control_B.ob = proc_control_B.Sum_n - proc_control_DW.x[8];
      proc_control_B.Product1_fr = proc_control_B.Sum_l - proc_control_DW.x[9];

      // DataStoreWrite: '<S292>/Data Store WriteP' incorporates:
      //   DataStoreRead: '<S292>/Data Store ReadX'
      //   DataStoreWrite: '<S292>/Data Store WriteX'
      //   MATLABSystem: '<S292>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_DW.P[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 13;
        }

        proc_control_DW.x[proc_control_B.ibmat] +=
          (proc_control_B.K_o[proc_control_B.ibmat + 13] * proc_control_B.ob +
           proc_control_B.K_o[proc_control_B.ibmat] * proc_control_B.Product_al)
          + proc_control_B.K_o[proc_control_B.ibmat + 26] *
          proc_control_B.Product1_fr;
        proc_control_B.Ns += 13;
      }

      // End of DataStoreWrite: '<S292>/Data Store WriteP'
    }

    // End of Outputs for SubSystem: '<S290>/Correct2'

    // Outputs for Enabled SubSystem: '<S290>/Correct3' incorporates:
    //   EnablePort: '<S293>/Enable'

    if (proc_control_P.Enable3_Value) {
      // MATLABSystem: '<S293>/MATLAB System' incorporates:
      //   Constant: '<S290>/R3'
      //   DataStoreRead: '<S293>/Data Store ReadP'
      //   DataStoreRead: '<S293>/Data Store ReadX'

      EKFCorrectorAdditive_getMeasure(proc_control_P.R3_Value, proc_control_DW.x,
        proc_control_DW.P, &proc_control_B.Product_al, proc_control_B.imvec,
        &proc_control_B.Product3_dy, proc_control_B.z_f1,
        &proc_control_B.Product1_fr);
      proc_control_B.Product_al = proc_control_B.zposition -
        proc_control_B.Product_al;
      std::memcpy(&proc_control_B.X_e[0], &proc_control_B.imvec[0], 13U * sizeof
                  (real_T));

      // Start for MATLABSystem: '<S293>/MATLAB System'
      proc_control_trisolve_pr351(proc_control_B.Product3_dy, proc_control_B.X_e);

      // MATLABSystem: '<S293>/MATLAB System'
      std::memcpy(&proc_control_B.imvec[0], &proc_control_B.X_e[0], 13U * sizeof
                  (real_T));

      // Start for MATLABSystem: '<S293>/MATLAB System'
      proc_control_trisolve_pr351(proc_control_B.Product3_dy,
        proc_control_B.imvec);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.DataStoreRead[proc_control_B.Ns] =
          -proc_control_B.imvec[proc_control_B.Ns];
      }

      // MATLABSystem: '<S293>/MATLAB System' incorporates:
      //   DataStoreRead: '<S293>/Data Store ReadP'

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.A_h[proc_control_B.b_k + proc_control_B.Ns] =
            proc_control_B.DataStoreRead[proc_control_B.b_k] *
            proc_control_B.z_f1[proc_control_B.ibmat];
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.A_h[proc_control_B.Ns]++;
        proc_control_B.Ns += 14;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.ibmat = proc_control_B.i * 13 - 1;
          proc_control_B.Product3_dy = 0.0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 13;
               proc_control_B.b_k++) {
            proc_control_B.Product3_dy += proc_control_DW.P
              [(proc_control_B.ibmat + proc_control_B.b_k) + 1] *
              proc_control_B.A_h[proc_control_B.b_k * 13 + proc_control_B.b_j];
          }

          proc_control_B.y_l[proc_control_B.i + 14 * proc_control_B.b_j] =
            proc_control_B.Product3_dy;
        }

        proc_control_B.y_l[14 * proc_control_B.b_j + 13] =
          proc_control_B.imvec[proc_control_B.b_j] * proc_control_B.Product1_fr;
      }

      proc_control_qr_pr35(proc_control_B.y_l, proc_control_B.a__1_h,
                           proc_control_B.A_h);

      // DataStoreWrite: '<S293>/Data Store WriteP' incorporates:
      //   DataStoreRead: '<S293>/Data Store ReadX'
      //   DataStoreWrite: '<S293>/Data Store WriteX'
      //   MATLABSystem: '<S293>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_DW.P[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 13;
        }

        proc_control_DW.x[proc_control_B.ibmat] +=
          proc_control_B.imvec[proc_control_B.ibmat] * proc_control_B.Product_al;
        proc_control_B.Ns += 13;
      }

      // End of DataStoreWrite: '<S293>/Data Store WriteP'
    }

    // End of Outputs for SubSystem: '<S290>/Correct3'

    // Outputs for Atomic SubSystem: '<S290>/Output'
    // DataStoreRead: '<S294>/Data Store Read' incorporates:
    //   Constant: '<S290>/Enable3'
    //   DataTypeConversion: '<S290>/DataTypeConversion_Enable2'
    //   Switch: '<S248>/Switch'

    std::memcpy(&proc_control_B.DataStoreRead[0], &proc_control_DW.x[0], 13U *
                sizeof(real_T));

    // Outputs for Atomic SubSystem: '<S290>/Predict'
    // Start for MATLABSystem: '<S295>/MATLAB System' incorporates:
    //   DataStoreRead: '<S294>/Data Store Read'
    //   DataStoreRead: '<S295>/Data Store ReadX'
    //   DataTypeConversion: '<S290>/DataTypeConversion_uState'

    std::memcpy(&proc_control_B.z_f1[0], &proc_control_DW.x[0], 13U * sizeof
                (real_T));

    // End of Outputs for SubSystem: '<S290>/Output'
    proc_control_EkfNavStatesEq(proc_control_B.z_f1,
      proc_control_B.DataTypeConversion_uState);
    std::memcpy(&proc_control_B.z_f1[0], &proc_control_DW.x[0], 13U * sizeof
                (real_T));
    proc_control_EkfNavStatesEq(proc_control_B.z_f1,
      proc_control_B.DataTypeConversion_uState);

    // MATLABSystem: '<S295>/MATLAB System' incorporates:
    //   DataStoreRead: '<S295>/Data Store ReadX'

    for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
    {
      std::memcpy(&proc_control_B.imvec[0], &proc_control_DW.x[0], 13U * sizeof
                  (real_T));
      proc_control_B.Product3_dy = std::fmax(1.4901161193847656E-8,
        1.4901161193847656E-8 * std::abs(proc_control_DW.x[proc_control_B.b_j]));
      proc_control_B.imvec[proc_control_B.b_j] =
        proc_control_DW.x[proc_control_B.b_j] + proc_control_B.Product3_dy;

      // Start for MATLABSystem: '<S295>/MATLAB System' incorporates:
      //   DataStoreRead: '<S295>/Data Store ReadX'
      //   DataTypeConversion: '<S290>/DataTypeConversion_uState'

      proc_control_EkfNavStatesEq(proc_control_B.imvec,
        proc_control_B.DataTypeConversion_uState);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.A_h[proc_control_B.Ns + 13 * proc_control_B.b_j] =
          (proc_control_B.imvec[proc_control_B.Ns] -
           proc_control_B.z_f1[proc_control_B.Ns]) / proc_control_B.Product3_dy;
      }
    }

    // DataStoreWrite: '<S295>/Data Store WriteX' incorporates:
    //   DataTypeConversion: '<S290>/DataTypeConversion_uState'
    //   MATLABSystem: '<S295>/MATLAB System'
    //
    proc_control_EkfNavStatesEq(proc_control_DW.x,
      proc_control_B.DataTypeConversion_uState);
    for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
    {
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        // MATLABSystem: '<S295>/MATLAB System' incorporates:
        //   DataStoreRead: '<S295>/Data Store ReadP'

        proc_control_B.ibmat = proc_control_B.i * 13 - 1;
        proc_control_B.Product3_dy = 0.0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k
             ++) {
          proc_control_B.Product3_dy += proc_control_DW.P[(proc_control_B.ibmat
            + proc_control_B.b_k) + 1] * proc_control_B.A_h[proc_control_B.b_k *
            13 + proc_control_B.b_j];
        }

        // Start for MATLABSystem: '<S295>/MATLAB System' incorporates:
        //   Constant: '<S290>/Q'
        //
        proc_control_B.Ns = 26 * proc_control_B.b_j + proc_control_B.i;
        proc_control_B.y_a[proc_control_B.Ns] = proc_control_B.Product3_dy;
        proc_control_B.y_a[proc_control_B.Ns + 13] = proc_control_P.Q_Value[13 *
          proc_control_B.i + proc_control_B.b_j];
      }
    }

    // MATLABSystem: '<S295>/MATLAB System'
    proc_control_qr_pr351(proc_control_B.y_a, proc_control_B.a__1_a,
                          proc_control_B.A_h);

    // DataStoreWrite: '<S295>/Data Store WriteP' incorporates:
    //   MATLABSystem: '<S295>/MATLAB System'
    //
    proc_control_B.Ns = 0;
    for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
         proc_control_B.ibmat++) {
      proc_control_B.b_k = 0;
      for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f++)
      {
        proc_control_DW.P[proc_control_B.i_f + proc_control_B.Ns] =
          proc_control_B.A_h[proc_control_B.b_k + proc_control_B.ibmat];
        proc_control_B.b_k += 13;
      }

      proc_control_B.Ns += 13;
    }

    // End of DataStoreWrite: '<S295>/Data Store WriteP'
    // End of Outputs for SubSystem: '<S290>/Predict'

    // Outputs for Atomic SubSystem: '<S12>/Header Assignment'
    proc_control_CurrentTime(&proc_control_B.CurrentTime);

    // Switch: '<S16>/Switch1' incorporates:
    //   Constant: '<S16>/Constant1'
    //   StringConstant: '<S16>/String Constant1'

    if (proc_control_P.Constant1_Value != 0.0) {
      proc_control_B.Switch1_j = proc_control_P.StringConstant1_String;
    } else {
      // ASCIIToString: '<S16>/ASCII to String' incorporates:
      //   Constant: '<S15>/Constant'

      for (proc_control_B.i = 0; proc_control_B.i < 128; proc_control_B.i++) {
        proc_control_B.cv[proc_control_B.i] = static_cast<int8_T>
          (proc_control_P.Constant_Value_g3.header.frame_id[proc_control_B.i]);
      }

      proc_control_B.Switch1_j.assign(&proc_control_B.cv[0], 128U);

      // End of ASCIIToString: '<S16>/ASCII to String'
    }

    // End of Switch: '<S16>/Switch1'

    // StringToASCII: '<S16>/String To ASCII'
    std::strncpy((char_T *)&proc_control_B.BusAssignment_g.header.frame_id[0],
                 proc_control_B.Switch1_j.c_str(), 128U);

    // Switch: '<S16>/Switch' incorporates:
    //   Constant: '<S16>/Constant'

    if (proc_control_P.Constant_Value_gj != 0.0) {
      // BusAssignment: '<S12>/Bus Assignment'
      proc_control_B.BusAssignment_g.header.stamp =
        proc_control_B.CurrentTime.CurrentTime;
    } else {
      // BusAssignment: '<S12>/Bus Assignment' incorporates:
      //   Constant: '<S15>/Constant'

      proc_control_B.BusAssignment_g.header.stamp =
        proc_control_P.Constant_Value_g3.header.stamp;
    }

    // End of Switch: '<S16>/Switch'

    // BusAssignment: '<S12>/Bus Assignment' incorporates:
    //   Constant: '<S15>/Constant'
    //   SignalConversion generated from: '<S16>/HeaderAssign'
    //   StringLength: '<S16>/String Length'

    proc_control_B.BusAssignment_g.header.frame_id_SL_Info.CurrentLength =
      proc_control_B.Switch1_j.length();
    proc_control_B.BusAssignment_g.header.frame_id_SL_Info.ReceivedLength =
      proc_control_P.Constant_Value_g3.header.frame_id_SL_Info.ReceivedLength;
    std::memcpy(&proc_control_B.BusAssignment_g.child_frame_id[0],
                &proc_control_P.Constant_Value_g3.child_frame_id[0], sizeof
                (uint8_T) << 7U);
    proc_control_B.BusAssignment_g.child_frame_id_SL_Info =
      proc_control_P.Constant_Value_g3.child_frame_id_SL_Info;
    std::memcpy(&proc_control_B.BusAssignment_g.pose.covariance[0],
                &proc_control_P.Constant_Value_g3.pose.covariance[0], 36U *
                sizeof(real_T));
    std::memcpy(&proc_control_B.BusAssignment_g.twist.covariance[0],
                &proc_control_P.Constant_Value_g3.twist.covariance[0], 36U *
                sizeof(real_T));

    // End of Outputs for SubSystem: '<S12>/Header Assignment'
    proc_control_B.BusAssignment_g.pose.pose.position.x =
      proc_control_B.DataStoreRead[0];
    proc_control_B.BusAssignment_g.pose.pose.position.y =
      proc_control_B.DataStoreRead[1];
    proc_control_B.BusAssignment_g.pose.pose.position.z =
      proc_control_B.DataStoreRead[2];
    proc_control_B.BusAssignment_g.pose.pose.orientation.w =
      proc_control_B.DataStoreRead[3];
    proc_control_B.BusAssignment_g.pose.pose.orientation.x =
      proc_control_B.DataStoreRead[4];
    proc_control_B.BusAssignment_g.pose.pose.orientation.y =
      proc_control_B.DataStoreRead[5];
    proc_control_B.BusAssignment_g.pose.pose.orientation.z =
      proc_control_B.DataStoreRead[6];
    proc_control_B.BusAssignment_g.twist.twist.linear.x =
      proc_control_B.DataStoreRead[7];
    proc_control_B.BusAssignment_g.twist.twist.linear.y =
      proc_control_B.DataStoreRead[8];
    proc_control_B.BusAssignment_g.twist.twist.linear.z =
      proc_control_B.DataStoreRead[9];
    proc_control_B.BusAssignment_g.twist.twist.angular.x =
      proc_control_B.DataStoreRead[10];
    proc_control_B.BusAssignment_g.twist.twist.angular.y =
      proc_control_B.DataStoreRead[11];
    proc_control_B.BusAssignment_g.twist.twist.angular.z =
      proc_control_B.DataStoreRead[12];

    // MATLABSystem: '<S17>/SinkBlock'
    Pub_proc_control_478.publish(&proc_control_B.BusAssignment_g);

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.WorldPosition_f[0] = proc_control_B.DataStoreRead[0];
    proc_control_B.WorldPosition_f[1] = proc_control_B.DataStoreRead[1];
    proc_control_B.WorldPosition_f[2] = proc_control_B.DataStoreRead[2];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.qS2W[0] = proc_control_B.DataStoreRead[3];
    proc_control_B.qS2W[1] = proc_control_B.DataStoreRead[4];
    proc_control_B.qS2W[2] = proc_control_B.DataStoreRead[5];
    proc_control_B.qS2W[3] = proc_control_B.DataStoreRead[6];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.BodyVelocity_b[0] = proc_control_B.DataStoreRead[7];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.AngularRate_m[0] = proc_control_B.DataStoreRead[10];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.BodyVelocity_b[1] = proc_control_B.DataStoreRead[8];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.AngularRate_m[1] = proc_control_B.DataStoreRead[11];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.BodyVelocity_b[2] = proc_control_B.DataStoreRead[9];

    // SignalConversion generated from: '<S1>/Output'
    proc_control_B.AngularRate_m[2] = proc_control_B.DataStoreRead[12];

    // BusAssignment: '<S11>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S11>/Data Type Conversion'

    BusAssignment_j.data = (proc_control_B.y != 0.0);

    // ZeroOrderHold: '<S11>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLABSystem: '<S14>/SinkBlock'
      Pub_proc_control_500.publish(&BusAssignment_j);
    }

    // End of ZeroOrderHold: '<S11>/Zero-Order Hold'
  }

  // End of Logic: '<S249>/AND'
  // End of Outputs for SubSystem: '<S9>/Enabled Subsystem'
  // End of Outputs for SubSystem: '<Root>/Enabled Subsystem'
  if ((&proc_control_M)->Timing.TaskCounters.TID[1] == 0) {
    // MATLABSystem: '<S314>/SourceBlock'
    b_value = Sub_proc_control_532.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_g_f);

    // Outputs for Enabled SubSystem: '<S314>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S315>/Enable'

    // Start for MATLABSystem: '<S314>/SourceBlock'
    if (b_value) {
      // SignalConversion generated from: '<S315>/In1'
      proc_control_B.In1_l = proc_control_B.rtb_SourceBlock_o2_g_f;
    }

    // End of Start for MATLABSystem: '<S314>/SourceBlock'
    // End of Outputs for SubSystem: '<S314>/Enabled Subsystem'

    // Gain: '<S305>/Gain'
    proc_control_B.Gain[0] = proc_control_P.Gain_Gain_er *
      proc_control_B.In1_l.angular.x;
    proc_control_B.Gain[1] = proc_control_P.Gain_Gain_er *
      proc_control_B.In1_l.angular.y;
    proc_control_B.Gain[2] = proc_control_P.Gain_Gain_er *
      proc_control_B.In1_l.angular.z;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // MATLABSystem: '<S316>/SourceBlock'
    proc_control_B.SourceBlock_o1 = Sub_proc_control_572.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_j_l);

    // Outputs for Enabled SubSystem: '<S316>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S317>/Enable'

    if (proc_control_B.SourceBlock_o1) {
      // SignalConversion generated from: '<S317>/In1' incorporates:
      //   MATLABSystem: '<S316>/SourceBlock'

      proc_control_B.In1_i = proc_control_B.rtb_SourceBlock_o2_j_l;
    }

    // End of Outputs for SubSystem: '<S316>/Enabled Subsystem'
  }

  // SwitchCase: '<S10>/Switch Case' incorporates:
  //   Concatenate: '<S319>/Matrix Concatenate'
  //   Constant: '<S319>/Constant'
  //   Logic: '<S307>/OR'
  //   MATLABSystem: '<S114>/MATLAB System'
  //   MATLABSystem: '<S320>/Rotation Trajectory'
  //   MATLABSystem: '<S321>/SourceBlock'
  //   MATLABSystem: '<S322>/Polynomial Trajectory'
  //
  rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem;
  switch (mode) {
   case 19:
   case 20:
   case 21:
    rtAction = 0;
    break;

   case 10:
    rtAction = 1;
    break;

   case 11:
   case 30:
   case 31:
   case 40:
   case 41:
    rtAction = 2;
    break;

   default:
    rtAction = 3;
    break;
  }

  proc_control_DW.SwitchCase_ActiveSubsystem = rtAction;
  switch (rtAction) {
   case 0:
    // Outputs for IfAction SubSystem: '<S10>/SpaceNav' incorporates:
    //   ActionPort: '<S304>/Action Port'

    // SignalConversion generated from: '<S304>/Transpose' incorporates:
    //   Constant: '<S304>/Constant'

    for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
      proc_control_B.imvec[proc_control_B.i] =
        proc_control_P.Constant_Value_l4[proc_control_B.i];
    }

    proc_control_B.imvec[7] = proc_control_B.In1_l.linear.x;
    proc_control_B.imvec[8] = proc_control_B.In1_l.linear.y;
    proc_control_B.imvec[9] = proc_control_B.In1_l.linear.z;
    proc_control_B.imvec[10] = proc_control_B.Gain[0];
    proc_control_B.imvec[11] = proc_control_B.Gain[1];
    proc_control_B.imvec[12] = proc_control_B.Gain[2];

    // End of SignalConversion generated from: '<S304>/Transpose'

    // MATLAB Function: '<S304>/MATLAB Function' incorporates:
    //   Math: '<S304>/Transpose'

    for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
         proc_control_B.base_index++) {
      proc_control_B.ibmat = proc_control_B.base_index * 10;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 10; proc_control_B.b_k++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.ibmat +
          proc_control_B.b_k] = proc_control_B.imvec[proc_control_B.base_index];
      }
    }

    // End of MATLAB Function: '<S304>/MATLAB Function'

    // Merge generated from: '<S10>/Merge' incorporates:
    //   Constant: '<S304>/Constant2'
    //   SignalConversion generated from: '<S304>/Out1'

    rtb_Reset = proc_control_P.Constant2_Value_h;

    // Merge generated from: '<S10>/Merge' incorporates:
    //   Constant: '<S304>/Constant3'
    //   SignalConversion generated from: '<S304>/Out1'

    rtb_NewDvlMsg = proc_control_P.Constant3_Value_i;
    for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
      // Merge generated from: '<S10>/Merge' incorporates:
      //   Math: '<S304>/Transpose'
      //   SignalConversion generated from: '<S304>/Out1'

      proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.i] =
        proc_control_B.imvec[proc_control_B.i];
    }

    // End of Outputs for SubSystem: '<S10>/SpaceNav'
    break;

   case 1:
    // Outputs for IfAction SubSystem: '<S10>/ProcPlanner Trajectory' incorporates:
    //   ActionPort: '<S302>/Action Port'

    // RelationalOperator: '<S310>/Compare' incorporates:
    //   Constant: '<S310>/Constant'

    b_value = (static_cast<int32_T>(proc_control_B.SourceBlock_o1) >
               static_cast<int32_T>(proc_control_P.Constant_Value_pl));

    // SignalConversion generated from: '<S302>/MATLAB System'
    proc_control_B.DataStoreRead[0] = proc_control_B.WorldPosition_f[0];
    proc_control_B.DataStoreRead[1] = proc_control_B.WorldPosition_f[1];
    proc_control_B.DataStoreRead[2] = proc_control_B.WorldPosition_f[2];
    proc_control_B.DataStoreRead[3] = proc_control_B.qS2W[0];
    proc_control_B.DataStoreRead[4] = proc_control_B.qS2W[1];
    proc_control_B.DataStoreRead[5] = proc_control_B.qS2W[2];
    proc_control_B.DataStoreRead[6] = proc_control_B.qS2W[3];
    proc_control_B.DataStoreRead[7] = proc_control_B.BodyVelocity_b[0];
    proc_control_B.DataStoreRead[10] = proc_control_B.AngularRate_m[0];
    proc_control_B.DataStoreRead[8] = proc_control_B.BodyVelocity_b[1];
    proc_control_B.DataStoreRead[11] = proc_control_B.AngularRate_m[1];
    proc_control_B.DataStoreRead[9] = proc_control_B.BodyVelocity_b[2];
    proc_control_B.DataStoreRead[12] = proc_control_B.AngularRate_m[2];

    // Merge generated from: '<S10>/Merge' incorporates:
    //   BusCreator generated from: '<S302>/MATLAB System'
    //   MATLABSystem: '<S114>/MATLAB System'
    //   MATLABSystem: '<S302>/MATLAB System'
    //   RelationalOperator: '<S309>/FixPt Relational Operator'
    //   UnitDelay: '<S309>/Delay Input1'
    //  *
    //  Block description for '<S309>/Delay Input1':
    //
    //   Store in Global RAM

    pro_ProcPlannerManager_stepImpl(&proc_control_DW.obj_l, (static_cast<int32_T>
      (b_value) > static_cast<int32_T>(proc_control_DW.DelayInput1_DSTATE)),
      proc_control_B.In1_i.transforms,
      proc_control_B.In1_i.transforms_SL_Info.ReceivedLength,
      proc_control_B.In1_i.velocities, proc_control_DW.obj_i.m_trajClear,
      proc_control_B.DataStoreRead, proc_control_B.linearTol,
      proc_control_B.angularTol, proc_control_B.timeInTol,
      proc_control_B.CostFcn_workspace_runtimedata.ref, &rtb_Reset,
      &rtb_NewDvlMsg, proc_control_B.TmpSignalConversionAtMATLAB);

    // Update for UnitDelay: '<S309>/Delay Input1'
    //
    //  Block description for '<S309>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = b_value;

    // End of Outputs for SubSystem: '<S10>/ProcPlanner Trajectory'
    break;

   case 2:
    if (rtAction != rtPrevAction) {
      // InitializeConditions for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' incorporates:
      //   ActionPort: '<S307>/Action Port'

      // InitializeConditions for SwitchCase: '<S10>/Switch Case' incorporates:
      //   Delay: '<S307>/Delay'

      proc_control_DW.Delay_DSTATE_g = proc_control_P.Delay_InitialCondition_az;

      // End of InitializeConditions for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 

      // SystemReset for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' incorporates:
      //   ActionPort: '<S307>/Action Port'

      //  Fonction Reset
      //  Initialize / reset discrete-state properties
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 18; proc_control_B.Ns++) {
        // SystemReset for SwitchCase: '<S10>/Switch Case' incorporates:
        //   MATLABSystem: '<S307>/MATLAB System'
        //
        proc_control_DW.obj_fo.poseList[proc_control_B.Ns] = 999.0;
      }

      // SystemReset for SwitchCase: '<S10>/Switch Case' incorporates:
      //   DiscreteIntegrator: '<S320>/Discrete-Time Integrator'
      //   MATLABSystem: '<S307>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_fo.poseList[proc_control_B.Ns] =
          tmp_0[proc_control_B.ibmat];
        proc_control_B.Ns += 2;
      }

      // initCond(1,1:7);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_DW.obj_fo.initcond[proc_control_B.Ns] =
          tmp_1[proc_control_B.Ns];
      }

      proc_control_DW.obj_fo.i = 2.0;

      // SystemReset for Resettable SubSystem: '<S307>/Resettable Subsystem'
      proc_control_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_P.DiscreteTimeIntegrator_IC;

      // End of SystemReset for SubSystem: '<S307>/Resettable Subsystem'
      // End of SystemReset for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
    }

    // Outputs for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' incorporates:
    //   ActionPort: '<S307>/Action Port'

    // MATLABSystem: '<S321>/SourceBlock'
    b_value = Sub_proc_control_589.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_ne_e);

    // Outputs for Enabled SubSystem: '<S307>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S318>/Enable'

    // Outputs for Enabled SubSystem: '<S321>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S323>/Enable'

    if (b_value) {
      // DataTypeConversion: '<S318>/Data Type Conversion'
      proc_control_B.DataTypeConversion[0] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.position.x;
      proc_control_B.DataTypeConversion[1] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.position.y;
      proc_control_B.DataTypeConversion[2] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.position.z;
      proc_control_B.DataTypeConversion[3] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.orientation.z;
      proc_control_B.DataTypeConversion[4] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.orientation.y;
      proc_control_B.DataTypeConversion[5] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.orientation.x;

      // DataTypeConversion: '<S318>/Data Type Conversion1'
      proc_control_B.DataTypeConversion1[0] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.frame;
      proc_control_B.DataTypeConversion1[1] =
        proc_control_B.rtb_SourceBlock_o2_ne_e.speed;

      // DataTypeConversion: '<S318>/Data Type Conversion2'
      proc_control_B.DataTypeConversion2 =
        proc_control_B.rtb_SourceBlock_o2_ne_e.fine;
    }

    // End of Outputs for SubSystem: '<S321>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S307>/Enabled Subsystem'

    // SignalConversion generated from: '<S307>/MATLAB System' incorporates:
    //   MATLABSystem: '<S321>/SourceBlock'
    //
    for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
      proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.i] =
        proc_control_B.DataTypeConversion[proc_control_B.i];
    }

    proc_control_B.TmpSignalConversionAtMATL_d[6] =
      proc_control_B.DataTypeConversion1[0];
    proc_control_B.TmpSignalConversionAtMATL_d[7] =
      proc_control_B.DataTypeConversion1[1];
    proc_control_B.TmpSignalConversionAtMATL_d[8] =
      proc_control_B.DataTypeConversion2;

    // SignalConversion generated from: '<S307>/MATLAB System'
    proc_control_B.TmpSignalConversionAtMATLAB[0] =
      proc_control_B.WorldPosition_f[0];
    proc_control_B.TmpSignalConversionAtMATLAB[1] =
      proc_control_B.WorldPosition_f[1];
    proc_control_B.TmpSignalConversionAtMATLAB[2] =
      proc_control_B.WorldPosition_f[2];

    // MATLABSystem: '<S307>/MATLAB System' incorporates:
    //   Constant: '<S307>/Constant'
    //   Delay: '<S307>/Delay'
    //   MATLABSystem: '<S114>/MATLAB System'
    //   MATLABSystem: '<S321>/SourceBlock'
    //   SignalConversion generated from: '<S307>/MATLAB System'
    //
    //  Main appeller à chaque exécution
    //  Suppression du buffer.
    //  ======================================================================== 
    //  Sous Routines
    // ========================================================================== 
    //  Fonction qui interprete les message ROS
    if (proc_control_P.Constant_Value_ao == 1.0) {
      //  supprimer le buffer de way points
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_fo.poseList[proc_control_B.Ns + 1] = 999.0;
        proc_control_B.Ns += 2;
      }

      proc_control_DW.obj_fo.i = 2.0;
    }

    //  Ajout d'un waypoint provenant de ROS.
    if (b_value && (proc_control_DW.obj_fo.i <= 2.0)) {
      // ========================================================================== 
      //  Fonction qui interprete les waypoints reçu par ROS
      //  Determiner le quaternion en fonction des angles d'euler.
      //  Orde de rotation : ZYX.
      //  Reel
      //  Information sur le nouveau waypoints
      std::memset(&proc_control_B.twpt[0], 0, 9U * sizeof(real_T));
      proc_control_B.twpt[7] = proc_control_B.DataTypeConversion1[1];

      //  Information de la pose précédente
      //  LastPosition
      //  LastQuaternion
      //  transformer les angle d'euler quaternions
      proc_control_B.rtb_sincos_o1_idx_2 = 0.017453292519943295 *
        proc_control_B.TmpSignalConversionAtMATL_d[3] / 2.0;
      proc_control_B.v[0] = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.c_idx_0 = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.rtb_sincos_o1_idx_2 = 0.017453292519943295 *
        proc_control_B.TmpSignalConversionAtMATL_d[4] / 2.0;
      proc_control_B.v[1] = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.Divide3 = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.rtb_sincos_o1_idx_2 = 0.017453292519943295 *
        proc_control_B.TmpSignalConversionAtMATL_d[5] / 2.0;
      proc_control_B.c_idx_0 = std::cos(proc_control_B.c_idx_0);
      proc_control_B.v[0] = std::sin(proc_control_B.v[0]);
      proc_control_B.Divide3 = std::cos(proc_control_B.Divide3);
      proc_control_B.v[1] = std::sin(proc_control_B.v[1]);
      proc_control_B.Product_al = std::cos(proc_control_B.rtb_sincos_o1_idx_2);
      proc_control_B.v[2] = std::sin(proc_control_B.rtb_sincos_o1_idx_2);
      proc_control_B.ob = proc_control_B.c_idx_0 * proc_control_B.Divide3;
      proc_control_B.Product1_fr = proc_control_B.v[0] * proc_control_B.v[1];
      proc_control_B.n[0] = proc_control_B.ob * proc_control_B.Product_al +
        proc_control_B.Product1_fr * proc_control_B.v[2];
      proc_control_B.n[1] = proc_control_B.ob * proc_control_B.v[2] -
        proc_control_B.Product1_fr * proc_control_B.Product_al;
      proc_control_B.ob = proc_control_B.v[0] * proc_control_B.Divide3;
      proc_control_B.Product1_fr = proc_control_B.c_idx_0 * proc_control_B.v[1];
      proc_control_B.n[2] = proc_control_B.Product1_fr *
        proc_control_B.Product_al + proc_control_B.ob * proc_control_B.v[2];
      proc_control_B.n[3] = proc_control_B.ob * proc_control_B.Product_al -
        proc_control_B.Product1_fr * proc_control_B.v[2];

      //  calculer
      //  quaternion partie scalaire
      //  quaternion partie vectoriel
      proc_control_B.Product1_fr = 0.0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k++)
      {
        proc_control_B.Product1_fr += proc_control_DW.obj_fo.poseList
          [(((proc_control_B.b_k + 4) << 1) + static_cast<int32_T>
            (proc_control_DW.obj_fo.i - 1.0)) - 1] *
          proc_control_B.TmpSignalConversionAtMATL_d[proc_control_B.b_k];
      }

      proc_control_B.Product3_dy = 2.0 * proc_control_B.Product1_fr;
      proc_control_B.Product1_fr = 0.0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k++)
      {
        proc_control_B.Product3_bo = proc_control_DW.obj_fo.poseList
          [(((proc_control_B.b_k + 4) << 1) + static_cast<int32_T>
            (proc_control_DW.obj_fo.i - 1.0)) - 1];
        proc_control_B.Product1_fr += proc_control_B.Product3_bo *
          proc_control_B.Product3_bo;
      }

      proc_control_B.Divide3 = proc_control_DW.obj_fo.poseList
        [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) + 5];
      proc_control_B.Product1_fr = proc_control_B.Divide3 *
        proc_control_B.Divide3 - proc_control_B.Product1_fr;
      proc_control_B.Product_al = proc_control_B.Divide3 * 2.0;

      //  QuatRotate n'est pas compilable
      //  choisir sens du quaternion
      proc_control_B.TmpSignalConversionAtSFunct[1] = proc_control_B.n[1];
      proc_control_B.TmpSignalConversionAtSFunct[2] = proc_control_B.n[2];
      proc_control_B.TmpSignalConversionAtSFunct[3] = proc_control_B.n[3];

      // ========================================================================== 
      //  Fonnction qui retoure le quaternion le plus court/long selon
      //  l'utilisateur
      proc_control_B.Product2_al = 0.0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 4; proc_control_B.b_k++)
      {
        proc_control_B.Product2_al += proc_control_DW.obj_fo.poseList
          [(((proc_control_B.b_k + 3) << 1) + static_cast<int32_T>
            (proc_control_DW.obj_fo.i - 1.0)) - 1] *
          proc_control_B.n[proc_control_B.b_k];
      }

      //  conjuger le quaternion au besoin
      if (((proc_control_B.Product2_al > 1.0) &&
           (proc_control_B.DataTypeConversion2 == 0.0)) ||
          ((proc_control_B.Product2_al < 1.0) &&
           (proc_control_B.DataTypeConversion2 == 1.0))) {
        proc_control_B.TmpSignalConversionAtSFunct[1] = -proc_control_B.n[1];
        proc_control_B.TmpSignalConversionAtSFunct[2] = -proc_control_B.n[2];
        proc_control_B.TmpSignalConversionAtSFunct[3] = -proc_control_B.n[3];
      }

      //  transformer le point en fonction du frame
      proc_control_B.rtb_sincos_o2_i = std::round
        (proc_control_B.DataTypeConversion1[0]);
      if (proc_control_B.rtb_sincos_o2_i < 256.0) {
        if (proc_control_B.rtb_sincos_o2_i >= 0.0) {
          tmp = static_cast<uint8_T>(proc_control_B.rtb_sincos_o2_i);
        } else {
          tmp = 0U;
        }
      } else {
        tmp = MAX_uint8_T;
      }

      switch (tmp) {
       case 0U:
        //  position et angle absolue
        proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_d[0];
        proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_d[1];
        proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_d[2];
        proc_control_B.twpt[3] = proc_control_B.n[0];
        proc_control_B.twpt[4] = proc_control_B.n[1];
        proc_control_B.twpt[5] = proc_control_B.n[2];
        proc_control_B.twpt[6] = proc_control_B.n[3];
        break;

       case 1U:
        //  position et angle relatif
        proc_control_B.ob = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 11];
        proc_control_B.oa = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 7];
        proc_control_B.t6 = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 9];
        proc_control_B.twpt[0] = ((proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtMATL_d[2] - proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtMATL_d[1]) *
          proc_control_B.Product_al + (proc_control_B.oa *
          proc_control_B.Product3_dy + proc_control_B.Product1_fr *
          proc_control_B.TmpSignalConversionAtMATL_d[0])) +
          proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) - 1];
        proc_control_B.twpt[1] = ((proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtMATL_d[0] - proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtMATL_d[2]) *
          proc_control_B.Product_al + (proc_control_B.t6 *
          proc_control_B.Product3_dy + proc_control_B.Product1_fr *
          proc_control_B.TmpSignalConversionAtMATL_d[1])) +
          proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 1];
        proc_control_B.twpt[2] = ((proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtMATL_d[1] - proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtMATL_d[0]) *
          proc_control_B.Product_al + (proc_control_B.ob *
          proc_control_B.Product3_dy + proc_control_B.Product1_fr *
          proc_control_B.TmpSignalConversionAtMATL_d[2])) +
          proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 3];
        proc_control_B.twpt[3] = ((proc_control_B.Divide3 * proc_control_B.n[0]
          - proc_control_B.oa * proc_control_B.TmpSignalConversionAtSFunct[1]) -
          proc_control_B.t6 * proc_control_B.TmpSignalConversionAtSFunct[2]) -
          proc_control_B.ob * proc_control_B.TmpSignalConversionAtSFunct[3];
        proc_control_B.twpt[4] = (proc_control_B.Divide3 *
          proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.oa *
          proc_control_B.n[0]) + (proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtSFunct[3] - proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtSFunct[2]);
        proc_control_B.twpt[5] = (proc_control_B.Divide3 *
          proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.t6 *
          proc_control_B.n[0]) + (proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtSFunct[1] - proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtSFunct[3]);
        proc_control_B.twpt[6] = (proc_control_B.Divide3 *
          proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.ob *
          proc_control_B.n[0]) + (proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtSFunct[2] - proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtSFunct[1]);
        break;

       case 2U:
        //  position relatif et angle absolue
        proc_control_B.t6 = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 11];
        proc_control_B.ob = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 7];
        proc_control_B.oa = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 9];
        proc_control_B.twpt[0] = ((proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtMATL_d[2] - proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtMATL_d[1]) *
          proc_control_B.Product_al + (proc_control_B.ob *
          proc_control_B.Product3_dy + proc_control_B.Product1_fr *
          proc_control_B.TmpSignalConversionAtMATL_d[0])) +
          proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) - 1];
        proc_control_B.twpt[1] = ((proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtMATL_d[0] - proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtMATL_d[2]) *
          proc_control_B.Product_al + (proc_control_B.oa *
          proc_control_B.Product3_dy + proc_control_B.Product1_fr *
          proc_control_B.TmpSignalConversionAtMATL_d[1])) +
          proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 1];
        proc_control_B.twpt[2] = ((proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtMATL_d[1] - proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtMATL_d[0]) *
          proc_control_B.Product_al + (proc_control_B.t6 *
          proc_control_B.Product3_dy + proc_control_B.Product1_fr *
          proc_control_B.TmpSignalConversionAtMATL_d[2])) +
          proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 3];
        proc_control_B.twpt[3] = proc_control_B.n[0];
        proc_control_B.twpt[4] = proc_control_B.n[1];
        proc_control_B.twpt[5] = proc_control_B.n[2];
        proc_control_B.twpt[6] = proc_control_B.n[3];
        break;

       case 3U:
        //  position absolue et angle relatif
        proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_d[0];
        proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_d[1];
        proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_d[2];
        proc_control_B.t6 = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 7];
        proc_control_B.ob = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 9];
        proc_control_B.oa = proc_control_DW.obj_fo.poseList[static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + 11];
        proc_control_B.twpt[3] = ((proc_control_B.Divide3 * proc_control_B.n[0]
          - proc_control_B.t6 * proc_control_B.TmpSignalConversionAtSFunct[1]) -
          proc_control_B.ob * proc_control_B.TmpSignalConversionAtSFunct[2]) -
          proc_control_B.oa * proc_control_B.TmpSignalConversionAtSFunct[3];
        proc_control_B.twpt[4] = (proc_control_B.Divide3 *
          proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.t6 *
          proc_control_B.n[0]) + (proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtSFunct[3] - proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtSFunct[2]);
        proc_control_B.twpt[5] = (proc_control_B.Divide3 *
          proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.ob *
          proc_control_B.n[0]) + (proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtSFunct[1] - proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtSFunct[3]);
        proc_control_B.twpt[6] = (proc_control_B.Divide3 *
          proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.oa *
          proc_control_B.n[0]) + (proc_control_B.t6 *
          proc_control_B.TmpSignalConversionAtSFunct[2] - proc_control_B.ob *
          proc_control_B.TmpSignalConversionAtSFunct[1]);
        break;

       default:
        //  retourne le point précédent
        proc_control_B.twpt[0] = proc_control_DW.obj_fo.poseList
          [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) - 1];
        proc_control_B.twpt[1] = proc_control_DW.obj_fo.poseList
          [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) + 1];
        proc_control_B.twpt[2] = proc_control_DW.obj_fo.poseList
          [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) + 3];
        proc_control_B.twpt[3] = proc_control_B.Divide3;
        proc_control_B.twpt[4] = proc_control_DW.obj_fo.poseList
          [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) + 7];
        proc_control_B.twpt[5] = proc_control_DW.obj_fo.poseList
          [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) + 9];
        proc_control_B.twpt[6] = proc_control_DW.obj_fo.poseList
          [static_cast<int32_T>(proc_control_DW.obj_fo.i - 1.0) + 11];
        break;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++) {
        proc_control_DW.obj_fo.poseList[(static_cast<int32_T>
          (proc_control_DW.obj_fo.i) + (proc_control_B.Ns << 1)) - 1] =
          proc_control_B.twpt[proc_control_B.Ns];
      }

      proc_control_DW.obj_fo.i++;
    }

    //  Générer la trajectoire
    if (proc_control_DW.Delay_DSTATE_g) {
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++) {
        proc_control_B.ibmat = proc_control_B.Ns << 1;
        proc_control_DW.obj_fo.poseList[proc_control_B.ibmat] =
          proc_control_DW.obj_fo.poseList[(static_cast<int32_T>
          (proc_control_DW.obj_fo.i - 1.0) + proc_control_B.ibmat) - 1];
        proc_control_DW.obj_fo.poseList[proc_control_B.ibmat + 1] = 999.0;
      }

      proc_control_DW.obj_fo.i = 2.0;
    }

    //  Reset Trajectoire
    if (proc_control_DW.obj_i.m_trajClear != 0.0) {
      // ========================================================================== 
      //  Fonction qui reset la trajectoire
      //  remove roll and pitch from initial condition
      proc_control_B.Product3_dy = 1.0 / std::sqrt(((proc_control_B.qS2W[0] *
        proc_control_B.qS2W[0] + proc_control_B.qS2W[1] * proc_control_B.qS2W[1])
        + proc_control_B.qS2W[2] * proc_control_B.qS2W[2]) +
        proc_control_B.qS2W[3] * proc_control_B.qS2W[3]);
      proc_control_B.n[0] = proc_control_B.qS2W[0] * proc_control_B.Product3_dy;
      proc_control_B.n[1] = proc_control_B.qS2W[1] * proc_control_B.Product3_dy;
      proc_control_B.n[2] = proc_control_B.qS2W[2] * proc_control_B.Product3_dy;
      proc_control_B.n[3] = proc_control_B.qS2W[3] * proc_control_B.Product3_dy;
      proc_control_B.Product3_dy = (proc_control_B.n[1] * proc_control_B.n[3] +
        proc_control_B.n[0] * proc_control_B.n[2]) * 2.0;
      mask1 = (proc_control_B.Product3_dy >= 0.99999999999999778);
      proc_control_B.Product2_al = proc_control_B.Product3_dy;
      if (mask1) {
        proc_control_B.Product2_al = 1.0;
      }

      if (proc_control_B.Product3_dy <= -0.99999999999999778) {
        proc_control_B.Product2_al = -1.0;
      }

      mask1 = (mask1 || (proc_control_B.Product3_dy <= -0.99999999999999778));
      proc_control_B.Product_al = proc_control_B.n[0] * proc_control_B.n[0];
      proc_control_B.ob = proc_control_B.n[1] * proc_control_B.n[1];
      proc_control_B.Product1_fr = proc_control_B.n[2] * proc_control_B.n[2];
      proc_control_B.Product3_bo = proc_control_B.n[3] * proc_control_B.n[3];
      proc_control_B.v[0] = rt_atan2d_snf((proc_control_B.n[2] *
        proc_control_B.n[3] - proc_control_B.n[0] * proc_control_B.n[1]) * -2.0,
        ((proc_control_B.Product_al - proc_control_B.ob) -
         proc_control_B.Product1_fr) + proc_control_B.Product3_bo);
      proc_control_B.v[1] = std::asin(proc_control_B.Product2_al);
      proc_control_B.v[2] = rt_atan2d_snf((proc_control_B.n[1] *
        proc_control_B.n[2] - proc_control_B.n[0] * proc_control_B.n[3]) * -2.0,
        ((proc_control_B.Product_al + proc_control_B.ob) -
         proc_control_B.Product1_fr) - proc_control_B.Product3_bo);
      proc_control_B.ibmat = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.ibmat++;
        }
      }

      if (proc_control_B.ibmat - 1 >= 0) {
        proc_control_B.v[0] = 0.0;
      }

      proc_control_B.ibmat = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.ibmat++;
        }
      }

      proc_control_B.g_size[0] = proc_control_B.ibmat;
      proc_control_B.ibmat = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.ibmat++;
        }
      }

      proc_control_B.b_k = proc_control_B.ibmat;
      proc_control_B.ibmat = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.ibmat++;
        }
      }

      if (proc_control_B.ibmat - 1 >= 0) {
        proc_control_B.b_x_data = proc_control_B.Product2_al;
      }

      proc_control_B.Ns = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.Ns++;
        }
      }

      proc_control_B.b_j = proc_control_B.Ns - 1;
      for (proc_control_B.base_index = 0; proc_control_B.base_index <=
           proc_control_B.b_j; proc_control_B.base_index++) {
        if (std::isnan(proc_control_B.b_x_data)) {
          proc_control_B.b_x_data = (rtNaN);
        } else if (proc_control_B.b_x_data < 0.0) {
          proc_control_B.b_x_data = -1.0;
        } else {
          proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.ibmat;
           proc_control_B.Ns++) {
        proc_control_B.b_x_data *= 2.0;
      }

      if (proc_control_B.g_size[0] == proc_control_B.b_k) {
        proc_control_B.j_size[0] = proc_control_B.g_size[0];
        if (proc_control_B.g_size[0] - 1 >= 0) {
          proc_control_B.j_data = rt_atan2d_snf(proc_control_B.n[1],
            proc_control_B.n[0]);
        }
      } else {
        proc_control_B.Ns = 0;
        if (mask1) {
          for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
            proc_control_B.Ns++;
          }
        }

        proc_control_B.n_size[0] = proc_control_B.Ns;
        proc_control_B.n_size_b[0] = proc_control_B.Ns;
        if (proc_control_B.Ns - 1 >= 0) {
          proc_control_B.n_data = proc_control_B.n[1];
          proc_control_B.n_data_j = proc_control_B.n[0];
        }

        proc_control_expand_atan2(&proc_control_B.n_data, proc_control_B.n_size,
          &proc_control_B.n_data_j, proc_control_B.n_size_b,
          &proc_control_B.j_data, proc_control_B.j_size);
      }

      proc_control_B.Ns = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.Ns++;
        }
      }

      proc_control_B.g_size[0] = proc_control_B.Ns;
      if (proc_control_B.ibmat == proc_control_B.j_size[0]) {
        if (proc_control_B.g_size[0] - 1 >= 0) {
          proc_control_B.v[2] = proc_control_B.b_x_data * proc_control_B.j_data;
        }
      } else {
        proc_control_binary_expand_op_2(proc_control_B.v, proc_control_B.g_size,
          &proc_control_B.b_x_data, &proc_control_B.j_data);
      }

      //  Retransformer en quaternion
      proc_control_B.rtb_sincos_o1_idx_2 = proc_control_B.v[0] * 0.0 / 2.0;
      proc_control_B.v[0] = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.c_idx_0 = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.rtb_sincos_o1_idx_2 = proc_control_B.v[1] * 0.0 / 2.0;
      proc_control_B.v[1] = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.Divide3 = proc_control_B.rtb_sincos_o1_idx_2;
      proc_control_B.rtb_sincos_o1_idx_2 = proc_control_B.v[2] / 2.0;
      proc_control_B.c_idx_0 = std::cos(proc_control_B.c_idx_0);
      proc_control_B.v[0] = std::sin(proc_control_B.v[0]);
      proc_control_B.Divide3 = std::cos(proc_control_B.Divide3);
      proc_control_B.v[1] = std::sin(proc_control_B.v[1]);
      proc_control_B.Product_al = std::cos(proc_control_B.rtb_sincos_o1_idx_2);
      proc_control_B.v[2] = std::sin(proc_control_B.rtb_sincos_o1_idx_2);
      proc_control_B.ob = proc_control_B.c_idx_0 * proc_control_B.Divide3;
      proc_control_B.Product1_fr = proc_control_B.v[0] * proc_control_B.v[1];
      proc_control_B.TmpSignalConversionAtMATLAB[3] = proc_control_B.ob *
        proc_control_B.Product_al - proc_control_B.Product1_fr *
        proc_control_B.v[2];
      proc_control_B.Product3_bo = proc_control_B.c_idx_0 * proc_control_B.v[1];
      proc_control_B.TmpSignalConversionAtMATLAB[4] = proc_control_B.v[0] *
        proc_control_B.Divide3 * proc_control_B.Product_al +
        proc_control_B.Product3_bo * proc_control_B.v[2];
      proc_control_B.TmpSignalConversionAtMATLAB[5] = -proc_control_B.v[0] *
        proc_control_B.Divide3 * proc_control_B.v[2] +
        proc_control_B.Product3_bo * proc_control_B.Product_al;
      proc_control_B.TmpSignalConversionAtMATLAB[6] = proc_control_B.ob *
        proc_control_B.v[2] + proc_control_B.Product1_fr *
        proc_control_B.Product_al;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_DW.obj_fo.initcond[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns];
      }

      //  definir les conditions initiaux
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_fo.poseList[proc_control_B.Ns + 1] = 999.0;
        proc_control_B.Ns += 2;
      }

      proc_control_DW.obj_fo.poseList[14] = 0.0;
      proc_control_DW.obj_fo.poseList[16] = 0.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_fo.poseList[proc_control_B.Ns] =
          proc_control_DW.obj_fo.initcond[proc_control_B.ibmat];
        proc_control_DW.obj_fo.poseList[proc_control_B.Ns + 1] =
          proc_control_DW.obj_fo.initcond[proc_control_B.ibmat];
        proc_control_B.Ns += 2;
      }

      proc_control_DW.obj_fo.poseList[15] = 1.0;
      proc_control_DW.obj_fo.poseList[17] = 0.0;
      proc_control_DW.obj_fo.i = 2.0;
    }

    // Outputs for Enabled SubSystem: '<S307>/Pre-traitement' incorporates:
    //   EnablePort: '<S319>/Enable'

    if (b_value || (proc_control_DW.obj_i.m_trajClear != 0.0)) {
      proc_control_B.MatrixConcatenate[0] = proc_control_P.Constant_Value_j55;

      // Math: '<S319>/Transpose' incorporates:
      //   Concatenate: '<S319>/Matrix Concatenate'
      //   Constant: '<S319>/Constant'
      //   MATLABSystem: '<S307>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        proc_control_B.Transpose_b[proc_control_B.ibmat] =
          proc_control_DW.obj_fo.poseList[proc_control_B.Ns];
        proc_control_B.Transpose_b[proc_control_B.ibmat + 9] =
          proc_control_DW.obj_fo.poseList[proc_control_B.Ns + 1];
        proc_control_B.Ns += 2;
      }

      // End of Math: '<S319>/Transpose'

      // Selector: '<S319>/Selector2' incorporates:
      //   Concatenate: '<S319>/Matrix Concatenate'
      //   Math: '<S319>/Transpose'

      proc_control_B.MatrixConcatenate[1] = proc_control_B.Transpose_b[16];

      // Selector: '<S319>/Selector' incorporates:
      //   Math: '<S319>/Transpose'
      //   Selector: '<S319>/Selector1'

      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      proc_control_B.b_k = 0;
      for (proc_control_B.i_f = 0; proc_control_B.i_f < 2; proc_control_B.i_f++)
      {
        proc_control_B.Selector[proc_control_B.Ns] =
          proc_control_B.Transpose_b[proc_control_B.ibmat];
        proc_control_B.Selector[proc_control_B.Ns + 1] =
          proc_control_B.Transpose_b[proc_control_B.ibmat + 1];
        proc_control_B.Selector[proc_control_B.Ns + 2] =
          proc_control_B.Transpose_b[proc_control_B.ibmat + 2];
        proc_control_B.Selector1[proc_control_B.b_k] =
          proc_control_B.Transpose_b[proc_control_B.ibmat + 3];
        proc_control_B.Selector1[proc_control_B.b_k + 1] =
          proc_control_B.Transpose_b[proc_control_B.ibmat + 4];
        proc_control_B.Selector1[proc_control_B.b_k + 2] =
          proc_control_B.Transpose_b[proc_control_B.ibmat + 5];
        proc_control_B.Selector1[proc_control_B.b_k + 3] =
          proc_control_B.Transpose_b[proc_control_B.ibmat + 6];
        proc_control_B.Ns += 3;
        proc_control_B.ibmat += 9;
        proc_control_B.b_k += 4;
      }

      // End of Selector: '<S319>/Selector'
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Selector: '<S319>/Selector4' incorporates:
        //   Math: '<S319>/Transpose'

        proc_control_B.Selector4[proc_control_B.Ns] =
          proc_control_B.Transpose_b[proc_control_B.Ns + 9];
      }
    }

    // End of Outputs for SubSystem: '<S307>/Pre-traitement'

    // Outputs for Resettable SubSystem: '<S307>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S320>/Reset'

    if (b_value && (proc_control_PrevZCX.ResettableSubsystem_Reset_ZCE !=
                    POS_ZCSIG)) {
      // InitializeConditions for DiscreteIntegrator: '<S320>/Discrete-Time Integrator' 
      proc_control_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_P.DiscreteTimeIntegrator_IC;
    }

    proc_control_PrevZCX.ResettableSubsystem_Reset_ZCE = b_value;

    // DiscreteIntegrator: '<S320>/Discrete-Time Integrator' incorporates:
    //   Concatenate: '<S319>/Matrix Concatenate'
    //   Constant: '<S319>/Constant'
    //   Constant: '<S320>/Constant'
    //   Logic: '<S307>/OR'
    //   MATLABSystem: '<S114>/MATLAB System'
    //   MATLABSystem: '<S321>/SourceBlock'
    //
    proc_control_B.Divide3 = proc_control_P.DiscreteTimeIntegrator_gainva_g *
      proc_control_P.Constant_Value_ht;

    // DiscreteIntegrator: '<S320>/Discrete-Time Integrator'
    proc_control_B.Product3_dy = proc_control_B.Divide3 +
      proc_control_DW.DiscreteTimeIntegrator_DSTATE;

    // MATLABSystem: '<S320>/Rotation Trajectory' incorporates:
    //   Concatenate: '<S319>/Matrix Concatenate'
    //   MATLABSystem: '<S322>/Polynomial Trajectory'

    if (proc_control_DW.obj_p3.TunablePropsChanged) {
      proc_control_DW.obj_p3.TunablePropsChanged = false;
    }

    proc_control_B.Product3_bo = proc_control_B.MatrixConcatenate[1] -
      proc_control_B.MatrixConcatenate[0];
    proc_control_B.Product1_fr = 1.0 / proc_control_B.Product3_bo;
    proc_control_B.Product2_al = (proc_control_B.Product3_dy -
      proc_control_B.MatrixConcatenate[0]) * proc_control_B.Product1_fr;
    if (proc_control_B.Product3_dy < proc_control_B.MatrixConcatenate[0]) {
      proc_control_B.Product2_al = 0.0;
    }

    if (proc_control_B.Product3_dy > proc_control_B.MatrixConcatenate[1]) {
      proc_control_B.Product2_al = 1.0;
    }

    if (proc_control_B.Product3_dy < proc_control_B.MatrixConcatenate[0]) {
      proc_control_B.Product1_fr = 0.0;
    }

    // MATLABSystem: '<S320>/Rotation Trajectory' incorporates:
    //   Concatenate: '<S319>/Matrix Concatenate'

    proc_control_B.t62 = proc_control_B.Product1_fr;
    if (proc_control_B.Product3_dy > proc_control_B.MatrixConcatenate[1]) {
      proc_control_B.t62 = 0.0;
    }

    // MATLABSystem: '<S320>/Rotation Trajectory' incorporates:
    //   Concatenate: '<S319>/Matrix Concatenate'

    proc_control_B.oa = proc_control_B.Product2_al;
    if ((proc_control_B.Product2_al > 1.0) && (proc_control_B.Product2_al <
         1.0000000149011612)) {
      proc_control_B.oa = 1.0;
    }

    if ((proc_control_B.Product2_al < 0.0) && (proc_control_B.Product2_al >
         -1.4901161193847656E-8)) {
      proc_control_B.oa = 0.0;
    }

    // MATLABSystem: '<S320>/Rotation Trajectory' incorporates:
    //   Selector: '<S319>/Selector1'
    //   Selector: '<S320>/Selector'

    proc_control_B.t6 = std::sqrt(((proc_control_B.Selector1[0] *
      proc_control_B.Selector1[0] + proc_control_B.Selector1[1] *
      proc_control_B.Selector1[1]) + proc_control_B.Selector1[2] *
      proc_control_B.Selector1[2]) + proc_control_B.Selector1[3] *
      proc_control_B.Selector1[3]);
    proc_control_B.Product_al = proc_control_B.Selector1[0] / proc_control_B.t6;
    proc_control_B.ob = proc_control_B.Selector1[1] / proc_control_B.t6;
    proc_control_B.rtb_sincos_o2_i = proc_control_B.Selector1[2] /
      proc_control_B.t6;
    proc_control_B.Product1_fr = proc_control_B.Selector1[3] / proc_control_B.t6;
    proc_control_B.expl_temp_j = proc_contr_quaternionBase_slerp
      (proc_control_B.Product_al, proc_control_B.ob,
       proc_control_B.rtb_sincos_o2_i, proc_control_B.Product1_fr,
       proc_control_B.Product_al, proc_control_B.ob,
       proc_control_B.rtb_sincos_o2_i, proc_control_B.Product1_fr);
    proc_control_B.expl_temp_h = proc_con_quaternionBase_slerp_p
      (proc_control_B.Product_al, proc_control_B.ob,
       proc_control_B.rtb_sincos_o2_i, proc_control_B.Product1_fr,
       proc_control_B.Product_al, proc_control_B.ob,
       proc_control_B.rtb_sincos_o2_i, proc_control_B.Product1_fr);
    proc_control_B.expl_temp_c = proc_co_quaternionBase_slerp_pr
      (proc_control_B.Product_al, proc_control_B.ob,
       proc_control_B.rtb_sincos_o2_i, proc_control_B.Product1_fr,
       proc_control_B.Product_al, proc_control_B.ob,
       proc_control_B.rtb_sincos_o2_i, proc_control_B.Product1_fr,
       proc_control_B.oa);
    proc_control_quaternionBase_log(((proc_control_B.expl_temp_j.a *
      proc_control_B.expl_temp_h.a - -proc_control_B.expl_temp_j.b *
      proc_control_B.expl_temp_h.b) - -proc_control_B.expl_temp_j.c *
      proc_control_B.expl_temp_h.c) - -proc_control_B.expl_temp_j.d *
      proc_control_B.expl_temp_h.d, ((proc_control_B.expl_temp_j.a *
      proc_control_B.expl_temp_h.b + -proc_control_B.expl_temp_j.b *
      proc_control_B.expl_temp_h.a) + -proc_control_B.expl_temp_j.c *
      proc_control_B.expl_temp_h.d) - -proc_control_B.expl_temp_j.d *
      proc_control_B.expl_temp_h.c, ((proc_control_B.expl_temp_j.a *
      proc_control_B.expl_temp_h.c - -proc_control_B.expl_temp_j.b *
      proc_control_B.expl_temp_h.d) + -proc_control_B.expl_temp_j.c *
      proc_control_B.expl_temp_h.a) + -proc_control_B.expl_temp_j.d *
      proc_control_B.expl_temp_h.b, ((proc_control_B.expl_temp_j.a *
      proc_control_B.expl_temp_h.d + -proc_control_B.expl_temp_j.b *
      proc_control_B.expl_temp_h.c) - -proc_control_B.expl_temp_j.c *
      proc_control_B.expl_temp_h.b) + -proc_control_B.expl_temp_j.d *
      proc_control_B.expl_temp_h.a, &proc_control_B.Product1_fr,
      &proc_control_B.Product_al, &proc_control_B.Product2_al,
      &proc_control_B.t6);
    proc_control_B.oa = (((proc_control_B.expl_temp_c.a *
      proc_control_B.Product1_fr - proc_control_B.expl_temp_c.b *
      proc_control_B.Product_al) - proc_control_B.expl_temp_c.c *
                          proc_control_B.Product2_al) -
                         proc_control_B.expl_temp_c.d * proc_control_B.t6) *
      proc_control_B.t62 * 2.0;
    proc_control_B.ob = (((proc_control_B.expl_temp_c.a *
      proc_control_B.Product_al + proc_control_B.expl_temp_c.b *
      proc_control_B.Product1_fr) + proc_control_B.expl_temp_c.c *
                          proc_control_B.t6) - proc_control_B.expl_temp_c.d *
                         proc_control_B.Product2_al) * proc_control_B.t62 * 2.0;
    proc_control_B.d_a = (((proc_control_B.expl_temp_c.a *
      proc_control_B.Product2_al - proc_control_B.expl_temp_c.b *
      proc_control_B.t6) + proc_control_B.expl_temp_c.c *
      proc_control_B.Product1_fr) + proc_control_B.expl_temp_c.d *
                          proc_control_B.Product_al) * proc_control_B.t62 * 2.0;
    proc_control_B.Product1_fr = (((proc_control_B.expl_temp_c.a *
      proc_control_B.t6 + proc_control_B.expl_temp_c.b *
      proc_control_B.Product2_al) - proc_control_B.expl_temp_c.c *
      proc_control_B.Product_al) + proc_control_B.expl_temp_c.d *
      proc_control_B.Product1_fr) * proc_control_B.t62 * 2.0;

    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    proc_control_B.v[0] = ((proc_control_B.oa * -proc_control_B.expl_temp_c.b +
      proc_control_B.ob * proc_control_B.expl_temp_c.a) + proc_control_B.d_a *
      -proc_control_B.expl_temp_c.d) - proc_control_B.Product1_fr *
      -proc_control_B.expl_temp_c.c;
    proc_control_B.v[1] = ((proc_control_B.oa * -proc_control_B.expl_temp_c.c -
      proc_control_B.ob * -proc_control_B.expl_temp_c.d) + proc_control_B.d_a *
      proc_control_B.expl_temp_c.a) + proc_control_B.Product1_fr *
      -proc_control_B.expl_temp_c.b;
    proc_control_B.v[2] = ((proc_control_B.oa * -proc_control_B.expl_temp_c.d +
      proc_control_B.ob * -proc_control_B.expl_temp_c.c) - proc_control_B.d_a *
      -proc_control_B.expl_temp_c.b) + proc_control_B.Product1_fr *
      proc_control_B.expl_temp_c.a;

    // MATLABSystem: '<S322>/Polynomial Trajectory' incorporates:
    //   Concatenate: '<S319>/Matrix Concatenate'
    //   Selector: '<S319>/Selector'

    rtb_newPressureMsg = false;
    mask1 = true;
    proc_control_B.b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.b_k < 6)) {
      if (!(proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.b_k] ==
            proc_control_P.PolynomialTrajectory_VelocityBo[proc_control_B.b_k]))
      {
        mask1 = false;
        exitg1 = true;
      } else {
        proc_control_B.b_k++;
      }
    }

    if (mask1) {
      rtb_newPressureMsg = true;
    }

    if (!rtb_newPressureMsg) {
      if (proc_control_DW.obj_m.isInitialized == 1) {
        proc_control_DW.obj_m.TunablePropsChanged = true;
        proc_control_DW.obj_m.tunablePropertyChanged[3] = true;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.Ns] =
          proc_control_P.PolynomialTrajectory_VelocityBo[proc_control_B.Ns];
      }
    }

    if (proc_control_DW.obj_m.TunablePropsChanged) {
      proc_control_DW.obj_m.TunablePropsChanged = false;
      if (proc_control_DW.obj_m.tunablePropertyChanged[3] ||
          proc_control_DW.obj_m.tunablePropertyChanged[4]) {
        rtb_Reset = true;
      } else {
        rtb_Reset = false;
      }

      proc_control_DW.obj_m.PPFormUpdatedNeeded = rtb_Reset;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 5; proc_control_B.Ns++) {
        proc_control_DW.obj_m.tunablePropertyChanged[proc_control_B.Ns] = false;
      }
    }

    guard1 = false;
    if (proc_control_DW.obj_m.PPFormUpdatedNeeded) {
      guard1 = true;
    } else {
      rtb_newPressureMsg = false;
      rtb_Reset = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 6)) {
        if (!(proc_control_B.Selector[proc_control_B.b_k] ==
              proc_control_DW.obj_m.PrevOptInputs.f1[proc_control_B.b_k])) {
          rtb_Reset = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (!rtb_Reset) {
        mask1 = false;
      } else {
        mask1 = true;
        proc_control_B.b_k = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.b_k < 2)) {
          if (!(proc_control_B.MatrixConcatenate[proc_control_B.b_k] ==
                proc_control_DW.obj_m.PrevOptInputs.f2[proc_control_B.b_k])) {
            mask1 = false;
            exitg1 = true;
          } else {
            proc_control_B.b_k++;
          }
        }
      }

      if (mask1) {
        rtb_newPressureMsg = true;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_DW.obj_m.PrevOptInputs.f1[proc_control_B.Ns] =
          proc_control_B.Selector[proc_control_B.Ns];
      }

      proc_control_DW.obj_m.PrevOptInputs.f2[0] =
        proc_control_B.MatrixConcatenate[0];
      proc_control_DW.obj_m.PrevOptInputs.f2[1] =
        proc_control_B.MatrixConcatenate[1];
      if (!rtb_newPressureMsg) {
        guard1 = true;
      }
    }

    if (guard1) {
      for (proc_control_B.b_j = 0; proc_control_B.b_j < 3; proc_control_B.b_j++)
      {
        proc_control_B.dv25[0] = proc_control_B.Selector[proc_control_B.b_j];
        proc_control_B.dv26[0] =
          proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.b_j];
        proc_control_B.dv25[1] = proc_control_B.Selector[proc_control_B.b_j + 3];
        proc_control_B.dv26[1] =
          proc_control_DW.obj_m.VelocityBoundaryCondition[proc_control_B.b_j + 3];
        proc_contro_generateCubicCoeffs(proc_control_B.dv25, proc_control_B.dv26,
          proc_control_B.Product3_bo, proc_control_B.n);
        proc_control_B.coefMat[proc_control_B.b_j] = proc_control_B.n[0];
        proc_control_B.coefMat[proc_control_B.b_j + 3] = proc_control_B.n[1];
        proc_control_B.coefMat[proc_control_B.b_j + 6] = proc_control_B.n[2];
        proc_control_B.coefMat[proc_control_B.b_j + 9] = proc_control_B.n[3];
      }

      pr_addFlatSegmentsToPPFormParts(proc_control_B.MatrixConcatenate,
        proc_control_B.coefMat, proc_control_B.n, proc_control_B.modCoeffs);
      PolyTrajSys_updateStoredPPForms(&proc_control_DW.obj_m, proc_control_B.n,
        proc_control_B.modCoeffs);
      proc_control_DW.obj_m.PPFormUpdatedNeeded = false;
    }

    proc_control_B.Product2_al = proc_control_B.Product3_dy;
    if (proc_control_B.Product3_dy == proc_control_DW.obj_m.PPStruct.breaks[2])
    {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.Product2_al = proc_control_DW.obj_m.PPStruct.breaks[2] -
          2.2204460492503131E-15;
      }
    }

    // Update for DiscreteIntegrator: '<S320>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S322>/Polynomial Trajectory'
    //
    proc_control_DW.DiscreteTimeIntegrator_DSTATE = proc_control_B.Divide3 +
      proc_control_B.Product3_dy;

    // End of Outputs for SubSystem: '<S307>/Resettable Subsystem'

    // MATLABSystem: '<S307>/MATLAB System1'
    if (proc_control_DW.obj.linearConvergence !=
        proc_control_P.MATLABSystem1_linearConvergence) {
      proc_control_DW.obj.linearConvergence =
        proc_control_P.MATLABSystem1_linearConvergence;
    }

    if (proc_control_DW.obj.quaternionConvergence !=
        proc_control_P.MATLABSystem1_quaternionConverg) {
      proc_control_DW.obj.quaternionConvergence =
        proc_control_P.MATLABSystem1_quaternionConverg;
    }

    if (proc_control_DW.obj.TargetThreshold !=
        proc_control_P.MATLABSystem1_TargetThreshold) {
      proc_control_DW.obj.TargetThreshold =
        proc_control_P.MATLABSystem1_TargetThreshold;
    }

    // Outputs for Resettable SubSystem: '<S307>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S320>/Reset'

    // MATLABSystem: '<S322>/Polynomial Trajectory'
    proc_control_ppval(proc_control_DW.obj_m.PPStruct.breaks,
                       proc_control_DW.obj_m.PPStruct.coefs,
                       proc_control_B.Product3_dy, proc_control_B.unusedExpr_h);
    proc_control_ppval(proc_control_DW.obj_m.PPDStruct.breaks,
                       proc_control_DW.obj_m.PPDStruct.coefs,
                       proc_control_B.Product2_al, proc_control_B.dv23);

    // Start for MATLABSystem: '<S307>/MATLAB System1' incorporates:
    //   MATLABSystem: '<S320>/Rotation Trajectory'
    //   MATLABSystem: '<S322>/Polynomial Trajectory'
    //   SignalConversion generated from: '<S307>/Transpose2'
    //
    proc_control_B.DataStoreRead[0] = proc_control_B.unusedExpr_h[0];
    proc_control_B.DataStoreRead[1] = proc_control_B.unusedExpr_h[1];
    proc_control_B.DataStoreRead[2] = proc_control_B.unusedExpr_h[2];
    proc_control_B.DataStoreRead[3] = proc_control_B.expl_temp_c.a;
    proc_control_B.DataStoreRead[4] = proc_control_B.expl_temp_c.b;
    proc_control_B.DataStoreRead[5] = proc_control_B.expl_temp_c.c;
    proc_control_B.DataStoreRead[6] = proc_control_B.expl_temp_c.d;
    proc_control_B.DataStoreRead[7] = proc_control_B.dv23[0];
    proc_control_B.DataStoreRead[10] = proc_control_B.v[0];

    // End of Outputs for SubSystem: '<S307>/Resettable Subsystem'
    proc_control_B.imvec[0] = proc_control_B.WorldPosition_f[0];

    // Outputs for Resettable SubSystem: '<S307>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S320>/Reset'

    proc_control_B.DataStoreRead[8] = proc_control_B.dv23[1];
    proc_control_B.DataStoreRead[11] = proc_control_B.v[1];

    // End of Outputs for SubSystem: '<S307>/Resettable Subsystem'
    proc_control_B.imvec[1] = proc_control_B.WorldPosition_f[1];

    // Outputs for Resettable SubSystem: '<S307>/Resettable Subsystem' incorporates:
    //   ResetPort: '<S320>/Reset'

    proc_control_B.DataStoreRead[9] = proc_control_B.dv23[2];
    proc_control_B.DataStoreRead[12] = proc_control_B.v[2];

    // End of Outputs for SubSystem: '<S307>/Resettable Subsystem'
    proc_control_B.imvec[2] = proc_control_B.WorldPosition_f[2];
    proc_control_B.imvec[3] = proc_control_B.qS2W[0];
    proc_control_B.imvec[4] = proc_control_B.qS2W[1];
    proc_control_B.imvec[5] = proc_control_B.qS2W[2];
    proc_control_B.imvec[6] = proc_control_B.qS2W[3];
    proc_control_B.imvec[7] = proc_control_B.BodyVelocity_b[0];
    proc_control_B.imvec[10] = proc_control_B.AngularRate_m[0];
    proc_control_B.imvec[8] = proc_control_B.BodyVelocity_b[1];
    proc_control_B.imvec[11] = proc_control_B.AngularRate_m[1];
    proc_control_B.imvec[9] = proc_control_B.BodyVelocity_b[2];
    proc_control_B.imvec[12] = proc_control_B.AngularRate_m[2];

    // Merge generated from: '<S10>/Merge' incorporates:
    //   MATLABSystem: '<S114>/MATLAB System'
    //   MATLABSystem: '<S307>/MATLAB System'
    //   MATLABSystem: '<S307>/MATLAB System1'
    //   Math: '<S307>/Transpose1'
    //   Selector: '<S319>/Selector4'
    //
    proc_TrajectoryManager_stepImpl(&proc_control_DW.obj,
      proc_control_DW.obj_i.m_trajClear, proc_control_B.DataStoreRead,
      proc_control_B.Selector4, proc_control_DW.obj_fo.initcond,
      proc_control_B.imvec, proc_control_B.CostFcn_workspace_runtimedata.ref,
      &rtb_Reset);

    // Merge generated from: '<S10>/Merge' incorporates:
    //   Constant: '<S307>/Constant1'
    //   SignalConversion generated from: '<S307>/Reference'

    rtb_NewDvlMsg = proc_control_P.Constant1_Value_is;
    for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
      // Merge generated from: '<S10>/Merge' incorporates:
      //   Math: '<S307>/Transpose1'
      //   Selector: '<S319>/Selector4'
      //   SignalConversion generated from: '<S307>/Reference'

      proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.i] =
        proc_control_B.Selector4[proc_control_B.i];
    }

    // Update for Delay: '<S307>/Delay' incorporates:
    //   MATLABSystem: '<S321>/SourceBlock'
    //
    proc_control_DW.Delay_DSTATE_g = b_value;

    // End of Outputs for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
    break;

   default:
    // Outputs for IfAction SubSystem: '<S10>/IDLE' incorporates:
    //   ActionPort: '<S300>/Action Port'

    // MATLAB Function: '<S300>/MATLAB Function' incorporates:
    //   Constant: '<S300>/Constant'
    //   Math: '<S300>/Transpose'

    std::memcpy(&proc_control_B.imvec[0], &proc_control_P.Constant_Value_mt[0],
                13U * sizeof(real_T));
    proc_control_B.imvec[9] = -proc_control_P.Constant_Value_mt[9];
    for (proc_control_B.base_index = 0; proc_control_B.base_index < 13;
         proc_control_B.base_index++) {
      proc_control_B.ibmat = proc_control_B.base_index * 10;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 10; proc_control_B.b_k++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.ibmat +
          proc_control_B.b_k] = proc_control_B.imvec[proc_control_B.base_index];
      }
    }

    // End of MATLAB Function: '<S300>/MATLAB Function'

    // Merge generated from: '<S10>/Merge' incorporates:
    //   Constant: '<S300>/Constant2'
    //   SignalConversion generated from: '<S300>/y'

    rtb_Reset = proc_control_P.Constant2_Value_a;

    // Merge generated from: '<S10>/Merge' incorporates:
    //   Constant: '<S300>/Constant3'
    //   SignalConversion generated from: '<S300>/y'

    rtb_NewDvlMsg = proc_control_P.Constant3_Value_n;
    for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
      // Merge generated from: '<S10>/Merge' incorporates:
      //   Constant: '<S300>/Constant'
      //   Math: '<S300>/Transpose'
      //   SignalConversion generated from: '<S300>/y'

      proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.i] =
        proc_control_P.Constant_Value_mt[proc_control_B.i];
    }

    // End of Outputs for SubSystem: '<S10>/IDLE'
    break;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // If: '<S8>/If' incorporates:
    //   BusCreator generated from: '<S138>/MATLAB System'
    //   DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
    //   DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
    //   Lookup_n-D: '<S139>/N to A'
    //   Lookup_n-D: '<S139>/n-D Lookup Table1'
    //   Lookup_n-D: '<S26>/PWN to N'
    //   Lookup_n-D: '<S32>/N to RPM'
    //   MATLABSystem: '<S119>/MATLAB System1'
    //   MATLABSystem: '<S119>/MATLAB System3'
    //   MATLABSystem: '<S119>/MATLAB System4'
    //   MATLABSystem: '<S120>/MATLAB System3'
    //   MATLABSystem: '<S120>/MATLAB System4'
    //   MATLABSystem: '<S120>/MATLAB System5'
    //   MATLABSystem: '<S121>/MATLAB System3'
    //   MATLABSystem: '<S121>/MATLAB System4'
    //   MATLABSystem: '<S121>/MATLAB System5'
    //   MATLABSystem: '<S122>/MATLAB System3'
    //   MATLABSystem: '<S122>/MATLAB System4'
    //   MATLABSystem: '<S122>/MATLAB System5'
    //   MATLABSystem: '<S138>/MATLAB System'
    //   MATLABSystem: '<S240>/SourceBlock'
    //   MATLABSystem: '<S241>/SourceBlock'
    //   Trigonometry: '<S275>/sincos'
    //   Trigonometry: '<S55>/sincos'
    //   UniformRandomNumber: '<S27>/Drift'
    //
    rtPrevAction = proc_control_DW.If_ActiveSubsystem_b;
    proc_control_DW.If_ActiveSubsystem_b = 0;
    if (rtPrevAction != 0) {
      // SystemReset for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
      //   ActionPort: '<S138>/Action Port'

      // SystemReset for If: '<S8>/If' incorporates:
      //   MATLABSystem: '<S138>/MATLAB System'

      proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_k);

      // End of SystemReset for SubSystem: '<S8>/If Action Subsystem'
    }

    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    b_value = Sub_proc_control_780.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_h_e);

    // Outputs for Enabled SubSystem: '<S240>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S242>/Enable'

    if (b_value) {
      // SignalConversion generated from: '<S242>/In1'
      proc_control_B.In1_j = proc_control_B.rtb_SourceBlock_o2_h_e;
    }

    // End of Outputs for SubSystem: '<S240>/Enabled Subsystem'
    rtb_newPressureMsg = Sub_proc_control_781.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_a);

    // Outputs for Enabled SubSystem: '<S241>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S243>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S243>/In1'
      proc_control_B.In1 = proc_control_B.rtb_SourceBlock_o2_a;
    }

    // End of Outputs for SubSystem: '<S241>/Enabled Subsystem'
    //         %% Fonction D'initialisation
    //  Conditions initial
    if (proc_control_DW.obj_k.init == 0.0) {
      proc_control_DW.obj_k.gainsList[0] = 10.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 20] =
          proc_control_B.OV_c[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 280] =
          proc_control_B.MV_j[proc_control_B.ibmat];
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 440] =
          proc_control_B.MVR_a[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_DW.obj_k.gainsList[1] = 11.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 21] =
          proc_control_B.OV_l[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 281] =
          proc_control_B.MV_l[proc_control_B.ibmat];
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 441] =
          proc_control_B.MVR_c[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_DW.obj_k.gainsList[2] = 19.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 22] =
          proc_control_B.OV[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 282] =
          proc_control_B.MV_c[proc_control_B.ibmat];
        proc_control_DW.obj_k.gainsList[proc_control_B.Ns + 442] =
          proc_control_B.MVR[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_DW.obj_k.init = 1.0;
    }

    //  Init function
    //       %% Fonction qui traite les gains recu via ros.
    if (b_value) {
      if (proc_control_B.In1_j.ov_SL_Info.CurrentLength == 13U) {
        //  regarder la vaiditée des ov
        std::memcpy(&proc_control_DW.obj_k.rosOV[0], &proc_control_B.In1_j.ov[0],
                    13U * sizeof(real_T));
      }

      if (proc_control_B.In1_j.mv_SL_Info.CurrentLength == 8U) {
        //  regarder la vaiditée des mv
        std::memcpy(&proc_control_DW.obj_k.rosMV[0], &proc_control_B.In1_j.mv[0],
                    sizeof(real_T) << 3U);
      }

      if (proc_control_B.In1_j.mvr_SL_Info.CurrentLength == 8U) {
        //  regarder la vaiditée des mvr
        std::memcpy(&proc_control_DW.obj_k.rosMVR[0], &proc_control_B.In1_j.mvr
                    [0], sizeof(real_T) << 3U);
      }
    }

    //  traiter les gains recu via ros.
    //         %% Fonction qui détermine les gain
    //  Vérifier si le mode existe
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 20; proc_control_B.Ns++) {
      proc_control_B.corr[proc_control_B.Ns] =
        (proc_control_DW.obj_k.gainsList[proc_control_B.Ns] == mode);
    }

    if (mode == 31) {
      //  Mode ros debug
      std::memcpy(&proc_control_B.imvec[0], &proc_control_DW.obj_k.rosOV[0], 13U
                  * sizeof(real_T));
      std::memcpy(&proc_control_B.mv[0], &proc_control_DW.obj_k.rosMV[0], sizeof
                  (real_T) << 3U);
      std::memcpy(&proc_control_B.U_l[0], &proc_control_DW.obj_k.rosMVR[0],
                  sizeof(real_T) << 3U);
    } else {
      proc_control_B.ibmat = proc_control_B.corr[0];
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 19;
           proc_control_B.base_index++) {
        // Outputs for Enabled SubSystem: '<Root>/Model System' incorporates:
        //   EnablePort: '<S3>/Enable'

        // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
        //   EnablePort: '<S246>/Enable'

        // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S274>/Enable'

        proc_control_B.ibmat += proc_control_B.corr[proc_control_B.base_index +
          1];

        // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/DVL Measurements'
        // End of Outputs for SubSystem: '<Root>/Model System'
      }

      if (proc_control_B.ibmat == 1) {
        //  mode existe et unique
        proc_control_B.base_index = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat - 1 < 20)) {
          if (proc_control_B.corr[proc_control_B.ibmat - 1]) {
            proc_control_B.base_index++;
            proc_control_B.ii_data_d[proc_control_B.base_index - 1] =
              proc_control_B.ibmat;
            if (proc_control_B.base_index >= 20) {
              exitg1 = true;
            } else {
              proc_control_B.ibmat++;
            }
          } else {
            proc_control_B.ibmat++;
          }
        }

        if (proc_control_B.base_index < 1) {
          proc_control_B.Ns = 0;
        } else {
          proc_control_B.Ns = proc_control_B.base_index;
        }

        if (proc_control_B.Ns - 1 >= 0) {
          std::memcpy(&proc_control_B.i_data[0], &proc_control_B.ii_data_d[0],
                      static_cast<uint32_T>(proc_control_B.Ns) * sizeof(int32_T));
        }

        if (proc_control_B.Ns == 0) {
          proc_control_B.Product3_dy = 0.0;
        } else {
          proc_control_B.Product3_dy = proc_control_B.i_data[0];
          for (proc_control_B.base_index = 2; proc_control_B.base_index <=
               proc_control_B.Ns; proc_control_B.base_index++) {
            // Outputs for Enabled SubSystem: '<Root>/Model System' incorporates:
            //   EnablePort: '<S3>/Enable'

            // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
            //   EnablePort: '<S246>/Enable'

            // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
            //   EnablePort: '<S274>/Enable'

            proc_control_B.Product3_dy += static_cast<real_T>
              (proc_control_B.i_data[proc_control_B.base_index - 1]);

            // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
            // End of Outputs for SubSystem: '<S9>/DVL Measurements'
            // End of Outputs for SubSystem: '<Root>/Model System'
          }
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.imvec[proc_control_B.Ns] =
            proc_control_DW.obj_k.gainsList[((proc_control_B.Ns + 1) * 20 +
            static_cast<int32_T>(proc_control_B.Product3_dy)) - 1];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.mv[proc_control_B.Ns] =
            proc_control_DW.obj_k.gainsList[((proc_control_B.Ns + 14) * 20 +
            static_cast<int32_T>(proc_control_B.Product3_dy)) - 1];
          proc_control_B.U_l[proc_control_B.Ns] =
            proc_control_DW.obj_k.gainsList[((proc_control_B.Ns + 22) * 20 +
            static_cast<int32_T>(proc_control_B.Product3_dy)) - 1];
        }
      } else {
        //  mode non trouver. retourne default
        std::memcpy(&proc_control_B.imvec[0], &proc_control_B.OV_d[0], 13U *
                    sizeof(real_T));
        std::memcpy(&proc_control_B.mv[0], &proc_control_B.MV_p[0], sizeof
                    (real_T) << 3U);
        std::memcpy(&proc_control_B.U_l[0], &proc_control_B.MVR_cn[0], sizeof
                    (real_T) << 3U);
      }
    }

    //   Ajust gain if loosing dvl
    proc_control_B.Product3_dy = 1.0 / std::sqrt(((proc_control_B.qS2W[0] *
      proc_control_B.qS2W[0] + proc_control_B.qS2W[1] * proc_control_B.qS2W[1])
      + proc_control_B.qS2W[2] * proc_control_B.qS2W[2]) + proc_control_B.qS2W[3]
      * proc_control_B.qS2W[3]);
    proc_control_B.rq[0] = proc_control_B.qS2W[0] * proc_control_B.Product3_dy;
    proc_control_B.rq[1] = proc_control_B.qS2W[1] * proc_control_B.Product3_dy;
    proc_control_B.rq[2] = proc_control_B.qS2W[2] * proc_control_B.Product3_dy;
    proc_control_B.rq[3] = proc_control_B.qS2W[3] * proc_control_B.Product3_dy;
    proc_control_B.Product3_dy = (proc_control_B.rq[1] * proc_control_B.rq[3] -
      proc_control_B.rq[0] * proc_control_B.rq[2]) * -2.0;
    mask1 = (proc_control_B.Product3_dy >= 0.99999999999999778);
    proc_control_B.Product2_al = proc_control_B.Product3_dy;
    if (mask1) {
      proc_control_B.Product2_al = 1.0;
    }

    if (proc_control_B.Product3_dy <= -0.99999999999999778) {
      proc_control_B.Product2_al = -1.0;
    }

    mask1 = (mask1 || (proc_control_B.Product3_dy <= -0.99999999999999778));
    proc_control_B.Product_al = proc_control_B.rq[0] * proc_control_B.rq[0];
    proc_control_B.ob = proc_control_B.rq[1] * proc_control_B.rq[1];
    proc_control_B.Product1_fr = proc_control_B.rq[2] * proc_control_B.rq[2];
    proc_control_B.Product3_bo = proc_control_B.rq[3] * proc_control_B.rq[3];
    proc_control_B.v[0] = rt_atan2d_snf((proc_control_B.rq[1] *
      proc_control_B.rq[2] + proc_control_B.rq[0] * proc_control_B.rq[3]) * 2.0,
      ((proc_control_B.Product_al + proc_control_B.ob) -
       proc_control_B.Product1_fr) - proc_control_B.Product3_bo);
    proc_control_B.v[1] = std::asin(proc_control_B.Product2_al);
    proc_control_B.v[2] = rt_atan2d_snf((proc_control_B.rq[2] *
      proc_control_B.rq[3] + proc_control_B.rq[0] * proc_control_B.rq[1]) * 2.0,
      ((proc_control_B.Product_al - proc_control_B.ob) -
       proc_control_B.Product1_fr) + proc_control_B.Product3_bo);

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.ibmat = 0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'

    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.g_size[0] = proc_control_B.ibmat;
    proc_control_B.ibmat = 0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'

    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.b_k = proc_control_B.ibmat;
    proc_control_B.ibmat = 0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'
    //
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.b_x_data = proc_control_B.Product2_al;
    }

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.Ns = 0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'
    //
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.Ns++;
      }
    }

    proc_control_B.b_j = proc_control_B.Ns - 1;
    for (proc_control_B.base_index = 0; proc_control_B.base_index <=
         proc_control_B.b_j; proc_control_B.base_index++) {
      if (std::isnan(proc_control_B.b_x_data)) {
        proc_control_B.b_x_data = (rtNaN);
      } else if (proc_control_B.b_x_data < 0.0) {
        proc_control_B.b_x_data = -1.0;
      } else {
        proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
      }
    }

    for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.ibmat;
         proc_control_B.Ns++) {
      proc_control_B.b_x_data = -proc_control_B.b_x_data * 2.0;
    }

    if (proc_control_B.g_size[0] == proc_control_B.b_k) {
      proc_control_B.j_size[0] = proc_control_B.g_size[0];
      if (proc_control_B.g_size[0] - 1 >= 0) {
        proc_control_B.j_data = rt_atan2d_snf(proc_control_B.rq[1],
          proc_control_B.rq[0]);
      }
    } else {
      proc_control_B.Ns = 0;
      if (mask1) {
        for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
          proc_control_B.Ns++;
        }
      }

      proc_control_B.n_size[0] = proc_control_B.Ns;
      proc_control_B.n_size_b[0] = proc_control_B.Ns;
      if (proc_control_B.Ns - 1 >= 0) {
        proc_control_B.n_data = proc_control_B.rq[1];
        proc_control_B.n_data_j = proc_control_B.rq[0];
      }

      proc_control_expand_atan2(&proc_control_B.n_data, proc_control_B.n_size,
        &proc_control_B.n_data_j, proc_control_B.n_size_b,
        &proc_control_B.j_data, proc_control_B.j_size);
    }

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.Ns = 0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'

    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.Ns++;
      }
    }

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.g_size[0] = proc_control_B.Ns;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'

    if (proc_control_B.ibmat != proc_control_B.j_size[0]) {
      proc_control_binary_expand_op_1(proc_control_B.v, proc_control_B.g_size,
        &proc_control_B.b_x_data, &proc_control_B.j_data);
    }

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'
    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
    proc_control_B.ibmat = 0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Outputs for IfAction SubSystem: '<S8>/If Action Subsystem' incorporates:
    //   ActionPort: '<S138>/Action Port'

    // If: '<S8>/If' incorporates:
    //   BusCreator generated from: '<S138>/MATLAB System'
    //   Delay: '<S8>/Delay'
    //   MATLABSystem: '<S123>/MATLAB System5'
    //   MATLABSystem: '<S138>/MATLAB System'
    //   MATLABSystem: '<S241>/SourceBlock'
    //   Math: '<S138>/Transpose'
    //   SignalConversion generated from: '<S138>/MATLAB System'
    //
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.v[2] = 0.0;
    }

    if ((std::abs(proc_control_B.v[1]) > 0.3490658503988659) || (std::abs
         (proc_control_B.v[2]) > 0.3490658503988659)) {
      //  If roll pitch exeed 20deg
      std::memcpy(&proc_control_B.mv[0], &proc_control_B.MV[0], sizeof(real_T) <<
                  3U);
    }

    //  Avoir les gains selon le mode
    std::memcpy(&proc_control_B.VectorConcatenate[0], &proc_control_B.In1.data[0],
                sizeof(real_T) << 7U);

    //         %% Fonction qui vérifie l'états des moteurs.
    if (rtb_newPressureMsg) {
      proc_control_B.VectorConcatenate[7] = 0.0;

      //  regarder si le courant est en dessou du seuil
      //  Rénitialiser le compteur si thruster est bon
      //  Aditionner les échantillion défectueux
      //  Condition qui vérifie si les thruster sont defectueux
      //  rajouter des moteur défecteux
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        b_value = (proc_control_B.VectorConcatenate[proc_control_B.Ns] < std::
                   round(static_cast<real_T>
                         (proc_control_DW.Delay_DSTATE_m0[proc_control_B.Ns]) *
                         0.1));
        proc_control_DW.obj_k.currentFaultCount[proc_control_B.Ns] =
          proc_control_DW.obj_k.currentFaultCount[proc_control_B.Ns] *
          static_cast<real_T>(b_value) + static_cast<real_T>(b_value);
        proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns] =
          ((proc_control_DW.obj_k.currentFaultCount[proc_control_B.Ns] >= 20.0)
           + proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns] != 0);
      }
    }

    //  Vérifier l'etats des thrusters
    //         %% Fonction qui applique la saturation des moteurs
    //  Enlever les thrusters defectueux
    //       %% Fonction qui prend la decision de kill le sub
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      proc_control_B.i =
        !proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns];

      // MATLABSystem: '<S138>/MATLAB System'
      proc_control_B.mvmin[proc_control_B.Ns] = proc_control_B.tmin *
        static_cast<real_T>(proc_control_B.i);

      // MATLABSystem: '<S138>/MATLAB System'
      proc_control_B.mvmax[proc_control_B.Ns] = proc_control_B.tmax *
        static_cast<real_T>(proc_control_B.i);
    }

    std::memcpy(&proc_control_B.ywt[0], &proc_control_B.imvec[0], 13U * sizeof
                (real_T));
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      // SignalConversion generated from: '<S138>/MATLAB System'
      proc_control_B.mvwt[proc_control_B.Ns] =
        proc_control_B.mv[proc_control_B.Ns];

      // SignalConversion generated from: '<S138>/MATLAB System'
      proc_control_B.dmwwt[proc_control_B.Ns] =
        proc_control_B.U_l[proc_control_B.Ns];

      // SignalConversion generated from: '<S138>/MATLAB System'
      proc_control_B.thrustersStatus[proc_control_B.Ns] =
        !proc_control_DW.obj_k.isThrusterFault[proc_control_B.Ns];
    }

    proc_control_B.p = proc_control_B.p_h;
    proc_control_B.m = proc_control_B.m_a;

    // End of Outputs for SubSystem: '<S8>/If Action Subsystem'

    // SwitchCase: '<S137>/Switch Case' incorporates:
    //   MATLAB Function: '<S176>/VariableHorizonOptimizer'
    //   MATLAB Function: '<S212>/FixedHorizonOptimizer'

    rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem_p;
    switch (mode) {
     case 10:
     case 11:
     case 19:
     case 31:
      rtAction = 0;
      break;

     case 20:
     case 21:
      rtAction = 1;
      break;

     case 30:
      rtAction = 2;
      break;

     case 40:
      rtAction = 3;
      break;

     default:
      rtAction = 4;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem_p = rtAction;
    switch (rtAction) {
     case 0:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S137>/If Action Subsystem' incorporates:
        //   ActionPort: '<S140>/Action Port'

        // InitializeConditions for SwitchCase: '<S137>/Switch Case' incorporates:
        //   Delay: '<S140>/Delay'
        //   DiscretePulseGenerator: '<S140>/Pulse Generator'
        //   Memory: '<S148>/Memory'
        //   UnitDelay: '<S148>/last_mv'

        std::memcpy(&proc_control_DW.Delay_DSTATE_a[0],
                    &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) <<
                    3U);
        std::memcpy(&proc_control_DW.Memory_PreviousInput_l[0],
                    &proc_control_P.Memory_InitialCondition[0], 226U * sizeof
                    (boolean_T));
        std::memcpy(&proc_control_DW.last_mv_DSTATE_j[0],
                    &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.clockTickCounter_f = 0;

        // End of InitializeConditions for SubSystem: '<S137>/If Action Subsystem' 

        // SystemReset for IfAction SubSystem: '<S137>/If Action Subsystem' incorporates:
        //   ActionPort: '<S140>/Action Port'

        // SystemReset for SwitchCase: '<S137>/Switch Case' incorporates:
        //   MATLABSystem: '<S140>/MATLAB System'
        //
        proc_contro_TrimPlant_resetImpl(&proc_control_DW.obj_b);

        // End of SystemReset for SubSystem: '<S137>/If Action Subsystem'
      }

      // Outputs for IfAction SubSystem: '<S137>/If Action Subsystem' incorporates:
      //   ActionPort: '<S140>/Action Port'

      // Outputs for Atomic SubSystem: '<S147>/Header Assignment'
      // MATLABSystem: '<S179>/Current Time'
      currentROS2TimeBus(&proc_control_B.BusAssignment_k.header.stamp);

      // Switch: '<S179>/Switch1' incorporates:
      //   Constant: '<S179>/Constant1'
      //   StringConstant: '<S179>/String Constant1'

      if (proc_control_P.Constant1_Value_l != 0.0) {
        proc_control_B.Switch1 = proc_control_P.StringConstant1_String_j;
      } else {
        // ASCIIToString: '<S179>/ASCII to String' incorporates:
        //   Constant: '<S178>/Constant'

        for (proc_control_B.i = 0; proc_control_B.i < 128; proc_control_B.i++) {
          proc_control_B.cv[proc_control_B.i] = static_cast<int8_T>
            (proc_control_P.Constant_Value_f.header.frame_id[proc_control_B.i]);
        }

        proc_control_B.Switch1.assign(&proc_control_B.cv[0], 128U);

        // End of ASCIIToString: '<S179>/ASCII to String'
      }

      // End of Switch: '<S179>/Switch1'

      // StringToASCII: '<S179>/String To ASCII'
      std::strncpy((char_T *)&proc_control_B.BusAssignment_k.header.frame_id[0],
                   proc_control_B.Switch1.c_str(), 128U);

      // Switch: '<S179>/Switch' incorporates:
      //   Constant: '<S179>/Constant'

      if (!(proc_control_P.Constant_Value_l != 0.0)) {
        // BusAssignment: '<S147>/Bus Assignment' incorporates:
        //   Constant: '<S178>/Constant'

        proc_control_B.BusAssignment_k.header.stamp =
          proc_control_P.Constant_Value_f.header.stamp;
      }

      // End of Switch: '<S179>/Switch'
      // End of Outputs for SubSystem: '<S147>/Header Assignment'

      // SignalConversion generated from: '<S140>/MATLAB System'
      proc_control_B.DataStoreRead[0] = proc_control_B.WorldPosition_f[0];
      proc_control_B.DataStoreRead[1] = proc_control_B.WorldPosition_f[1];
      proc_control_B.DataStoreRead[2] = proc_control_B.WorldPosition_f[2];
      proc_control_B.DataStoreRead[3] = proc_control_B.qS2W[0];
      proc_control_B.DataStoreRead[4] = proc_control_B.qS2W[1];
      proc_control_B.DataStoreRead[5] = proc_control_B.qS2W[2];
      proc_control_B.DataStoreRead[6] = proc_control_B.qS2W[3];
      proc_control_B.DataStoreRead[7] = proc_control_B.BodyVelocity_b[0];
      proc_control_B.DataStoreRead[10] = proc_control_B.AngularRate_m[0];
      proc_control_B.DataStoreRead[8] = proc_control_B.BodyVelocity_b[1];
      proc_control_B.DataStoreRead[11] = proc_control_B.AngularRate_m[1];
      proc_control_B.DataStoreRead[9] = proc_control_B.BodyVelocity_b[2];
      proc_control_B.DataStoreRead[12] = proc_control_B.AngularRate_m[2];

      // Start for MATLABSystem: '<S140>/MATLAB System' incorporates:
      //   BusCreator: '<S116>/Bus Creator'
      //   Delay: '<S140>/Delay'

      proc_control_TrimPlant_stepImpl(&proc_control_DW.obj_b,
        proc_control_DW.Delay_DSTATE_a, proc_control_B.DataStoreRead,
        proc_control_B.CostFcn_workspace_runtimedata.ref,
        proc_control_B.BusCreator.rho, proc_control_B.BusCreator.g,
        proc_control_B.BusCreator.mass, proc_control_B.BusCreator.volume,
        proc_control_B.BusCreator.sub_height, proc_control_B.BusCreator.rg,
        proc_control_B.BusCreator.rb, proc_control_B.BusCreator.cdl,
        proc_control_B.BusCreator.cdq, proc_control_B.BusCreator.added_mass,
        proc_control_B.BusCreator.I, proc_control_B.BusCreator.thrusters,
        proc_control_B.y_m, proc_control_B.rtb_B_o, proc_control_B.A_h,
        proc_control_B.dv6, proc_control_B.mv, proc_control_B.z_f1,
        proc_control_B.X_e, proc_control_B.imvec,
        proc_control_B.rtb_MATLABSystem_o10_l);

      // Outputs for Atomic SubSystem: '<S147>/Header Assignment'
      // BusAssignment: '<S147>/Bus Assignment' incorporates:
      //   Constant: '<S178>/Constant'
      //   MATLABSystem: '<S140>/MATLAB System'
      //   SignalConversion generated from: '<S179>/HeaderAssign'
      //   StringLength: '<S179>/String Length'

      proc_control_B.BusAssignment_k.header.frame_id_SL_Info.CurrentLength =
        proc_control_B.Switch1.length();
      proc_control_B.BusAssignment_k.header.frame_id_SL_Info.ReceivedLength =
        proc_control_P.Constant_Value_f.header.frame_id_SL_Info.ReceivedLength;
      std::memcpy(&proc_control_B.BusAssignment_k.child_frame_id[0],
                  &proc_control_P.Constant_Value_f.child_frame_id[0], sizeof
                  (uint8_T) << 7U);
      proc_control_B.BusAssignment_k.child_frame_id_SL_Info =
        proc_control_P.Constant_Value_f.child_frame_id_SL_Info;
      std::memcpy(&proc_control_B.BusAssignment_k.pose.covariance[0],
                  &proc_control_P.Constant_Value_f.pose.covariance[0], 36U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.BusAssignment_k.twist.covariance[0],
                  &proc_control_P.Constant_Value_f.twist.covariance[0], 36U *
                  sizeof(real_T));

      // End of Outputs for SubSystem: '<S147>/Header Assignment'
      proc_control_B.BusAssignment_k.pose.pose.position.x =
        proc_control_B.rtb_MATLABSystem_o10_l[0];
      proc_control_B.BusAssignment_k.pose.pose.position.y =
        proc_control_B.rtb_MATLABSystem_o10_l[1];
      proc_control_B.BusAssignment_k.pose.pose.position.z =
        proc_control_B.rtb_MATLABSystem_o10_l[2];
      proc_control_B.BusAssignment_k.pose.pose.orientation.w =
        proc_control_B.rtb_MATLABSystem_o10_l[4];
      proc_control_B.BusAssignment_k.pose.pose.orientation.x =
        proc_control_B.rtb_MATLABSystem_o10_l[3];
      proc_control_B.BusAssignment_k.pose.pose.orientation.y =
        proc_control_B.rtb_MATLABSystem_o10_l[5];
      proc_control_B.BusAssignment_k.pose.pose.orientation.z =
        proc_control_B.rtb_MATLABSystem_o10_l[6];
      proc_control_B.BusAssignment_k.twist.twist.linear.x =
        proc_control_B.rtb_MATLABSystem_o10_l[7];
      proc_control_B.BusAssignment_k.twist.twist.linear.y =
        proc_control_B.rtb_MATLABSystem_o10_l[8];
      proc_control_B.BusAssignment_k.twist.twist.linear.z =
        proc_control_B.rtb_MATLABSystem_o10_l[9];
      proc_control_B.BusAssignment_k.twist.twist.angular.x =
        proc_control_B.rtb_MATLABSystem_o10_l[10];
      proc_control_B.BusAssignment_k.twist.twist.angular.y =
        proc_control_B.rtb_MATLABSystem_o10_l[11];
      proc_control_B.BusAssignment_k.twist.twist.angular.z =
        proc_control_B.rtb_MATLABSystem_o10_l[12];

      // MATLABSystem: '<S180>/SinkBlock'
      Pub_proc_control_913.publish(&proc_control_B.BusAssignment_k);

      // MATLAB Function: '<S176>/VariableHorizonOptimizer' incorporates:
      //   Constant: '<S148>/Constant'
      //   MinMax: '<S148>/Min'
      //   Rounding: '<S148>/Floor'

      proc_control_B.base_index = static_cast<int32_T>(std::round(std::fmin
        (proc_control_P.Constant_Value_aa, std::floor(proc_control_B.p))));
      proc_control_B.Bu.set_size(21, 8, proc_control_B.base_index + 1);

      // MATLAB Function: '<S176>/VariableHorizonOptimizer'
      proc_control_B.i = (proc_control_B.base_index + 1) * 168;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.i;
           proc_control_B.Ns++) {
        proc_control_B.Bu[proc_control_B.Ns] = 0.0;
      }

      proc_control_B.Bv.set_size(21, 1, proc_control_B.base_index + 1);

      // MATLAB Function: '<S176>/VariableHorizonOptimizer'
      proc_control_B.i = (proc_control_B.base_index + 1) * 21;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.i;
           proc_control_B.Ns++) {
        proc_control_B.Bv[proc_control_B.Ns] = 0.0;
      }

      proc_control_B.Dv.set_size(13, 1, proc_control_B.base_index + 1);

      // MATLAB Function: '<S176>/VariableHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S144>/Pulse Generator'
      //   MATLABSystem: '<S140>/MATLAB System'

      proc_control_B.i = (proc_control_B.base_index + 1) * 13;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.i;
           proc_control_B.Ns++) {
        proc_control_B.Dv[proc_control_B.Ns] = 0.0;
      }

      std::memcpy(&proc_control_B.b_A_c[0], &b[0], 441U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c[0], 630U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 273; proc_control_B.Ns++)
      {
        proc_control_B.b_C_o[proc_control_B.Ns] = d_0[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 13; proc_control_B.b_k++)
      {
        std::memcpy(&proc_control_B.b_C_o[proc_control_B.Ns],
                    &proc_control_B.A_h[proc_control_B.Ns], 13U * sizeof(real_T));
        std::memcpy(&proc_control_B.b_A_c[proc_control_B.ibmat],
                    &proc_control_B.y_m[proc_control_B.Ns], 13U * sizeof(real_T));
        proc_control_B.Ns += 13;
        proc_control_B.ibmat += 21;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        std::memcpy(&proc_control_B.b_B[proc_control_B.Ns * 21],
                    &proc_control_B.rtb_B_o[proc_control_B.Ns * 13], 13U *
                    sizeof(real_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 21;
             proc_control_B.ibmat++) {
          proc_control_B.Bu[proc_control_B.ibmat + 21 * proc_control_B.Ns] =
            proc_control_B.b_B[21 * proc_control_B.Ns + proc_control_B.ibmat];
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 21; proc_control_B.Ns++) {
        proc_control_B.Bv[proc_control_B.Ns] =
          proc_control_B.b_B[proc_control_B.Ns + 168];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.Dv[proc_control_B.Ns] = 0.0;
      }

      std::memcpy(&proc_control_B.b_Mlim_m[0], &e[0], 226U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_l[0], &proc_control_B.mv[0], sizeof(real_T) <<
                  3U);
      for (proc_control_B.i = 0; proc_control_B.i < 226; proc_control_B.i++) {
        b_Mrows = b_Mrows_0[proc_control_B.i];
        if (b_Mrows <= 130) {
          proc_control_B.Ns = (b_Mrows - (b_Mrows - 1) / 13 * 13) - 1;
          proc_control_B.b_Mlim_m[proc_control_B.i] +=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_f1[proc_control_B.Ns];
        } else if (b_Mrows <= 260) {
          proc_control_B.Ns = (b_Mrows - (b_Mrows - 131) / 13 * 13) - 131;
          proc_control_B.b_Mlim_m[proc_control_B.i] -=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_f1[proc_control_B.Ns];
        } else if (b_Mrows <= 340) {
          proc_control_B.b_Mlim_m[proc_control_B.i] += 0.0 - proc_control_B.U_l
            [(b_Mrows - (((b_Mrows - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.b_Mlim_m[proc_control_B.i] -= 0.0 -
            proc_control_B.U_l[b_Mrows - 341];
        }
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.ob = proc_control_B.U_l[proc_control_B.i];
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 10;
             proc_control_B.ibmat++) {
          proc_control_B.b_j = proc_control_B.Ns + proc_control_B.i;
          proc_control_B.b_utarget[proc_control_B.b_j] -= proc_control_B.ob;
          proc_control_B.Ns += 8;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.b_xoff[proc_control_B.Ns] =
          proc_control_B.X_e[proc_control_B.Ns];
        proc_control_B.Bv[proc_control_B.Ns] =
          proc_control_B.imvec[proc_control_B.Ns];
      }

      proc_control_B.vseq.set_size(proc_control_B.base_index + 1);

      // MATLAB Function: '<S176>/VariableHorizonOptimizer'
      for (proc_control_B.i = 0; proc_control_B.i <= proc_control_B.base_index;
           proc_control_B.i++) {
        proc_control_B.vseq[proc_control_B.i] = 1.0;
      }

      proc_control_B.rseq.set_size(proc_control_B.base_index * 13);

      // MATLAB Function: '<S176>/VariableHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S140>/MATLAB System'

      proc_control_B.i = proc_control_B.base_index * 13;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.i;
           proc_control_B.Ns++) {
        proc_control_B.rseq[proc_control_B.Ns] = 0.0;
      }

      for (proc_control_B.b_j = 0; proc_control_B.b_j < 13; proc_control_B.b_j++)
      {
        if (proc_control_B.base_index >= 10) {
          for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++)
          {
            proc_control_B.rseq[proc_control_B.b_j + proc_control_B.i * 13] =
              proc_control_B.CostFcn_workspace_runtimedata.ref[10 *
              proc_control_B.b_j + proc_control_B.i] -
              proc_control_B.z_f1[proc_control_B.b_j];
          }

          for (proc_control_B.i = 10; proc_control_B.i <
               proc_control_B.base_index; proc_control_B.i++) {
            proc_control_B.rseq[proc_control_B.b_j + proc_control_B.i * 13] =
              proc_control_B.CostFcn_workspace_runtimedata.ref[10 *
              proc_control_B.b_j + 9] - proc_control_B.z_f1[proc_control_B.b_j];
          }
        } else {
          for (proc_control_B.i = 0; proc_control_B.i <
               proc_control_B.base_index; proc_control_B.i++) {
            proc_control_B.rseq[proc_control_B.b_j + proc_control_B.i * 13] =
              proc_control_B.CostFcn_workspace_runtimedata.ref[10 *
              proc_control_B.b_j + proc_control_B.i] -
              proc_control_B.z_f1[proc_control_B.b_j];
          }
        }

        // SignalConversion generated from: '<S177>/ SFunction ' incorporates:
        //   MATLABSystem: '<S140>/MATLAB System'

        proc_control_B.rtb_X_e_d[proc_control_B.b_j] =
          proc_control_B.X_e[proc_control_B.b_j] -
          proc_control_B.b_xoff[proc_control_B.b_j];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        // SignalConversion generated from: '<S177>/ SFunction ' incorporates:
        //   Constant: '<S140>/Constant'
        //   MATLAB Function: '<S176>/VariableHorizonOptimizer'

        proc_control_B.rtb_X_e_d[proc_control_B.Ns + 13] =
          proc_control_P.Constant_Value_o1x[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns + 13];
      }

      // SignalConversion generated from: '<S177>/ SFunction ' incorporates:
      //   Constant: '<S140>/Constant'
      //   Constant: '<S140>/Constant1'
      //   MATLAB Function: '<S176>/VariableHorizonOptimizer'

      proc_control_B.rtb_X_e_d[19] = proc_control_P.Constant1_Value_g[0] -
        proc_control_B.b_xoff[19];
      proc_control_B.rtb_X_e_d[20] = proc_control_P.Constant1_Value_g[1] -
        proc_control_B.b_xoff[20];

      // MATLAB Function: '<S176>/VariableHorizonOptimizer' incorporates:
      //   UnitDelay: '<S148>/last_mv'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv21[proc_control_B.Ns] =
          proc_control_DW.last_mv_DSTATE_j[proc_control_B.Ns] -
          proc_control_B.mv[proc_control_B.Ns];
      }

      // Update for Memory: '<S148>/Memory' incorporates:
      //   MATLAB Function: '<S176>/VariableHorizonOptimizer'
      //   MATLABSystem: '<S138>/MATLAB System'
      //   Math: '<S148>/Math Function'
      //   Math: '<S148>/Math Function1'
      //   Math: '<S148>/Math Function2'
      //   Rounding: '<S148>/Floor1'
      //   SignalConversion generated from: '<S138>/MATLAB System'
      //
      proc_contr_mpcblock_optimizerPM(proc_control_B.rseq, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax, proc_control_B.rtb_X_e_d,
        proc_control_B.dv21, proc_control_B.b_Mlim_m, proc_control_B.b_utarget,
        proc_control_B.base_index, static_cast<int32_T>(std::floor
        (proc_control_B.m)), proc_control_B.mv, g, h, proc_control_B.ywt,
        proc_control_B.mvwt, proc_control_B.dmwwt, proc_control_B.b_A_c,
        proc_control_B.Bu, proc_control_B.Bv, proc_control_B.b_C_o,
        proc_control_B.Dv, proc_control_B.U_l, proc_control_B.U,
        &proc_control_B.Product3_dy);

      // DataTypeConversion: '<S140>/Data Type Conversion'
      proc_control_B.rtb_sincos_o2_i = std::floor(proc_control_B.Product3_dy);
      if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
          (proc_control_B.rtb_sincos_o2_i)) {
        proc_control_B.rtb_sincos_o2_i = 0.0;
      } else {
        proc_control_B.rtb_sincos_o2_i = std::fmod
          (proc_control_B.rtb_sincos_o2_i, 256.0);
      }

      // Merge generated from: '<S137>/Merge' incorporates:
      //   DataTypeConversion: '<S140>/Data Type Conversion'
      //   SignalConversion generated from: '<S140>/Out1'

      proc_control_B.MpcStatus = static_cast<int8_T>
        (proc_control_B.rtb_sincos_o2_i < 0.0 ? static_cast<int32_T>(
          static_cast<int8_T>(-static_cast<int8_T>(static_cast<uint8_T>
            (-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
          static_cast<int8_T>(static_cast<uint8_T>
           (proc_control_B.rtb_sincos_o2_i))));

      // Merge generated from: '<S137>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S140>/Pulse Generator'

      proc_control_B.Product3_dy = (proc_control_DW.clockTickCounter_f <
        proc_control_P.PulseGenerator_Duty) &&
        (proc_control_DW.clockTickCounter_f >= 0) ?
        proc_control_P.PulseGenerator_Amp : 0.0;

      // DiscretePulseGenerator: '<S140>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_f >=
          proc_control_P.PulseGenerator_Period - 1.0) {
        proc_control_DW.clockTickCounter_f = 0;
      } else {
        proc_control_DW.clockTickCounter_f++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        // Gain: '<S148>/u_scale'
        proc_control_B.ob = proc_control_B.U_l[proc_control_B.i];
        proc_control_B.Product_al = proc_control_P.u_scale_Gain[proc_control_B.i]
          * proc_control_B.ob;
        proc_control_B.mv[proc_control_B.i] = proc_control_B.Product_al;

        // Update for Delay: '<S140>/Delay' incorporates:
        //   Gain: '<S148>/u_scale'

        proc_control_DW.Delay_DSTATE_a[proc_control_B.i] =
          proc_control_B.Product_al;

        // Update for UnitDelay: '<S148>/last_mv' incorporates:
        //   Gain: '<S148>/u_scale'

        proc_control_DW.last_mv_DSTATE_j[proc_control_B.i] = proc_control_B.ob;
      }

      // End of Outputs for SubSystem: '<S137>/If Action Subsystem'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S137>/If Action Subsystem2' incorporates:
      //   ActionPort: '<S142>/Action Port'

      // SampleTimeMath: '<S214>/TSamp' incorporates:
      //   Merge generated from: '<S10>/Merge'
      //   Selector: '<S142>/Selector'
      //
      //  About '<S214>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
           proc_control_B.ibmat++) {
        proc_control_B.TSamp[proc_control_B.ibmat] =
          proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns +
          70] * proc_control_P.TSamp_WtEt;
        proc_control_B.Ns += 10;
      }

      // End of SampleTimeMath: '<S214>/TSamp'

      // MATLABSystem: '<S142>/MATLAB System' incorporates:
      //   Merge generated from: '<S10>/Merge'
      //   Selector: '<S142>/Selector'

      if (proc_control_DW.obj_p.k != proc_control_P.MATLABSystem_k) {
        proc_control_DW.obj_p.k = proc_control_P.MATLABSystem_k;
      }

      rtb_newPressureMsg = false;
      mask1 = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 48)) {
        if (!(proc_control_DW.obj_p.binv[proc_control_B.b_k] ==
              proc_control_P.binv[proc_control_B.b_k])) {
          mask1 = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (mask1) {
        rtb_newPressureMsg = true;
      }

      if (!rtb_newPressureMsg) {
        std::memcpy(&proc_control_DW.obj_p.binv[0], &proc_control_P.binv[0], 48U
                    * sizeof(real_T));
      }

      if (proc_control_DW.obj_p.mass != proc_control_P.physics.mass) {
        proc_control_DW.obj_p.mass = proc_control_P.physics.mass;
      }

      if (proc_control_DW.obj_p.volume != proc_control_P.physics.volume) {
        proc_control_DW.obj_p.volume = proc_control_P.physics.volume;
      }

      if (proc_control_DW.obj_p.height != proc_control_P.physics.height) {
        proc_control_DW.obj_p.height = proc_control_P.physics.height;
      }

      rtb_newPressureMsg = false;
      mask1 = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 9)) {
        if (!(proc_control_DW.obj_p.I[proc_control_B.b_k] ==
              proc_control_P.physics.I[proc_control_B.b_k])) {
          mask1 = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (mask1) {
        rtb_newPressureMsg = true;
      }

      if (!rtb_newPressureMsg) {
        std::memcpy(&proc_control_DW.obj_p.I[0], &proc_control_P.physics.I[0],
                    9U * sizeof(real_T));
      }

      if (!proc_control_isequal(proc_control_DW.obj_p.RG,
           proc_control_P.physics.RG)) {
        proc_control_DW.obj_p.RG[0] = proc_control_P.physics.RG[0];
        proc_control_DW.obj_p.RG[1] = proc_control_P.physics.RG[1];
        proc_control_DW.obj_p.RG[2] = proc_control_P.physics.RG[2];
      }

      if (!proc_control_isequal(proc_control_DW.obj_p.RB,
           proc_control_P.physics.RB)) {
        proc_control_DW.obj_p.RB[0] = proc_control_P.physics.RB[0];
        proc_control_DW.obj_p.RB[1] = proc_control_P.physics.RB[1];
        proc_control_DW.obj_p.RB[2] = proc_control_P.physics.RB[2];
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_p.AddedMass,
           proc_control_P.physics.AddedMass)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_p.AddedMass[proc_control_B.Ns] =
            proc_control_P.physics.AddedMass[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_p.CDL,
           proc_control_P.physics.CDL)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_p.CDL[proc_control_B.Ns] =
            proc_control_P.physics.CDL[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_p.CDQ,
           proc_control_P.physics.CDQ)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_p.CDQ[proc_control_B.Ns] =
            proc_control_P.physics.CDQ[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal(proc_control_DW.obj_p.AF,
           proc_control_P.physics.AF)) {
        proc_control_DW.obj_p.AF[0] = proc_control_P.physics.AF[0];
        proc_control_DW.obj_p.AF[1] = proc_control_P.physics.AF[1];
        proc_control_DW.obj_p.AF[2] = proc_control_P.physics.AF[2];
      }

      if (proc_control_DW.obj_p.g != proc_control_P.physics.g) {
        proc_control_DW.obj_p.g = proc_control_P.physics.g;
      }

      if (proc_control_DW.obj_p.rho != proc_control_P.physics.rho) {
        proc_control_DW.obj_p.rho = proc_control_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (mode) {
       case 20U:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_B.constValues[0] = proc_control_DW.obj_p.mass;
        proc_control_B.constValues[1] = proc_control_DW.obj_p.volume;
        proc_control_B.constValues[3] = proc_control_DW.obj_p.AF[0];
        proc_control_B.constValues[6] = proc_control_DW.obj_p.I[0];
        proc_control_B.constValues[9] = proc_control_DW.obj_p.I[1];
        proc_control_B.constValues[12] = proc_control_DW.obj_p.I[2];
        proc_control_B.constValues[15] = proc_control_DW.obj_p.RG[0];
        proc_control_B.constValues[18] = proc_control_DW.obj_p.RB[0];
        proc_control_B.constValues[4] = proc_control_DW.obj_p.AF[1];
        proc_control_B.constValues[7] = proc_control_DW.obj_p.I[3];
        proc_control_B.constValues[10] = proc_control_DW.obj_p.I[4];
        proc_control_B.constValues[13] = proc_control_DW.obj_p.I[5];
        proc_control_B.constValues[16] = proc_control_DW.obj_p.RG[1];
        proc_control_B.constValues[19] = proc_control_DW.obj_p.RB[1];
        proc_control_B.constValues[5] = proc_control_DW.obj_p.AF[2];
        proc_control_B.constValues[8] = proc_control_DW.obj_p.I[6];
        proc_control_B.constValues[11] = proc_control_DW.obj_p.I[7];
        proc_control_B.constValues[14] = proc_control_DW.obj_p.I[8];
        proc_control_B.constValues[17] = proc_control_DW.obj_p.RG[2];
        proc_control_B.constValues[20] = proc_control_DW.obj_p.RB[2];

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_B.imvec[3] = 1.0;
        proc_control_B.imvec[4] = 0.0;
        proc_control_B.imvec[5] = 0.0;
        proc_control_B.imvec[6] = 0.0;
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          proc_control_B.constValues[proc_control_B.ibmat + 21] =
            proc_control_DW.obj_p.CDL[proc_control_B.ibmat];
          proc_control_B.constValues[proc_control_B.ibmat + 27] =
            proc_control_DW.obj_p.CDQ[proc_control_B.ibmat];
          proc_control_B.constValues[proc_control_B.ibmat + 33] =
            proc_control_DW.obj_p.AddedMass[proc_control_B.ibmat];
          proc_control_B.imvec[proc_control_B.ibmat + 7] =
            proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns +
            70];
          proc_control_B.Ns += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVModelMatrices
        //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 9.1. 
        //     12-Jul-2022 16:58:53
        proc_control_B.Product3_dy = proc_control_B.constValues[3] *
          proc_control_B.imvec[10];
        proc_control_B.Product1_fr = proc_control_B.constValues[6] *
          proc_control_B.imvec[10];
        proc_control_B.Product_al = proc_control_B.constValues[9] *
          proc_control_B.imvec[10];
        proc_control_B.Product2_al = proc_control_B.constValues[4] *
          proc_control_B.imvec[11];
        proc_control_B.t6 = proc_control_B.constValues[7] *
          proc_control_B.imvec[11];
        proc_control_B.oa = proc_control_B.constValues[10] *
          proc_control_B.imvec[11];
        proc_control_B.ob = proc_control_B.constValues[5] *
          proc_control_B.imvec[12];
        proc_control_B.d_a = proc_control_B.constValues[8] *
          proc_control_B.imvec[12];
        proc_control_B.Product3_bo = proc_control_B.constValues[11] *
          proc_control_B.imvec[12];
        proc_control_B.Divide3_b = proc_control_B.imvec[10] *
          proc_control_B.constValues[33];
        proc_control_B.Divide_a = proc_control_B.imvec[11] *
          proc_control_B.constValues[34];
        proc_control_B.t13 = proc_control_B.constValues[0] *
          proc_control_B.constValues[12];
        proc_control_B.t14 = proc_control_B.constValues[0] *
          proc_control_B.constValues[13];
        proc_control_B.t15 = proc_control_B.constValues[0] *
          proc_control_B.constValues[14];
        proc_control_B.t16 = proc_control_B.imvec[12] *
          proc_control_B.constValues[35];
        proc_control_B.t17 = proc_control_B.imvec[10] *
          proc_control_B.constValues[12];
        proc_control_B.t21 = proc_control_B.imvec[11] *
          proc_control_B.constValues[13];
        proc_control_B.t25 = proc_control_B.imvec[12] *
          proc_control_B.constValues[14];
        proc_control_B.t26 = proc_control_B.imvec[7] *
          proc_control_B.constValues[30];
        proc_control_B.scale_l = proc_control_B.imvec[8] *
          proc_control_B.constValues[31];
        proc_control_B.absxk = proc_control_B.imvec[9] *
          proc_control_B.constValues[32];
        proc_control_B.t = proc_control_B.constValues[1] *
          proc_control_B.constValues[36];
        proc_control_B.t20 = proc_control_B.imvec[5] * proc_control_B.imvec[6];
        proc_control_B.t39 = proc_control_B.imvec[3] * proc_control_B.imvec[4];
        proc_control_B.Divide3 = proc_control_B.t20 * 2.0 + proc_control_B.t39 *
          2.0;
        proc_control_B.t56 = (proc_control_B.imvec[11] *
                              proc_control_B.constValues[14] +
                              proc_control_B.imvec[7]) *
          proc_control_B.constValues[0];
        proc_control_B.rtb_sincos_o1_idx_2 = (proc_control_B.imvec[10] *
          proc_control_B.constValues[13] + proc_control_B.imvec[9]) *
          proc_control_B.constValues[0];
        proc_control_B.c_idx_0 = (proc_control_B.constValues[12] *
          proc_control_B.imvec[12] + proc_control_B.imvec[8]) *
          proc_control_B.constValues[0];
        proc_control_B.t62 = (proc_control_B.t17 + proc_control_B.t21) *
          proc_control_B.constValues[0];
        proc_control_B.t17 = (proc_control_B.t17 + proc_control_B.t25) *
          proc_control_B.constValues[0];
        proc_control_B.t21 = (proc_control_B.t21 + proc_control_B.t25) *
          proc_control_B.constValues[0];
        proc_control_B.t25_tmp = proc_control_B.imvec[4] * proc_control_B.imvec
          [6];
        proc_control_B.t40 = proc_control_B.imvec[3] * proc_control_B.imvec[5];
        proc_control_B.t25 = proc_control_B.t25_tmp * 2.0 - proc_control_B.t40 *
          2.0;
        proc_control_B.t70 = (proc_control_B.imvec[4] * proc_control_B.imvec[4] *
                              2.0 + proc_control_B.imvec[5] *
                              proc_control_B.imvec[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_B.modCoeffs[0] = -proc_control_B.constValues[30] +
          proc_control_B.constValues[0];
        proc_control_B.modCoeffs[1] = 0.0;
        proc_control_B.modCoeffs[2] = 0.0;
        proc_control_B.modCoeffs[3] = 0.0;
        proc_control_B.modCoeffs[4] = proc_control_B.t15;
        proc_control_B.modCoeffs[5] = -proc_control_B.t14;
        proc_control_B.modCoeffs[6] = 0.0;
        proc_control_B.modCoeffs[7] = -proc_control_B.constValues[31] +
          proc_control_B.constValues[0];
        proc_control_B.modCoeffs[8] = 0.0;
        proc_control_B.modCoeffs[9] = -proc_control_B.t15;
        proc_control_B.modCoeffs[10] = 0.0;
        proc_control_B.modCoeffs[11] = proc_control_B.t13;
        proc_control_B.modCoeffs[12] = 0.0;
        proc_control_B.modCoeffs[13] = 0.0;
        proc_control_B.modCoeffs[14] = -proc_control_B.constValues[32] +
          proc_control_B.constValues[0];
        proc_control_B.modCoeffs[15] = proc_control_B.t14;
        proc_control_B.modCoeffs[16] = -proc_control_B.t13;
        proc_control_B.modCoeffs[17] = 0.0;
        proc_control_B.modCoeffs[18] = 0.0;
        proc_control_B.modCoeffs[19] = -proc_control_B.t15;
        proc_control_B.modCoeffs[20] = proc_control_B.t14;
        proc_control_B.modCoeffs[21] = proc_control_B.constValues[3] -
          proc_control_B.constValues[33];
        proc_control_B.modCoeffs[22] = proc_control_B.constValues[6];
        proc_control_B.modCoeffs[23] = proc_control_B.constValues[9];
        proc_control_B.modCoeffs[24] = proc_control_B.t15;
        proc_control_B.modCoeffs[25] = 0.0;
        proc_control_B.modCoeffs[26] = -proc_control_B.t13;
        proc_control_B.modCoeffs[27] = proc_control_B.constValues[4];
        proc_control_B.modCoeffs[28] = proc_control_B.constValues[7] -
          proc_control_B.constValues[34];
        proc_control_B.modCoeffs[29] = proc_control_B.constValues[10];
        proc_control_B.modCoeffs[30] = -proc_control_B.t14;
        proc_control_B.modCoeffs[31] = proc_control_B.t13;
        proc_control_B.modCoeffs[32] = 0.0;
        proc_control_B.modCoeffs[33] = proc_control_B.constValues[5];
        proc_control_B.modCoeffs[34] = proc_control_B.constValues[8];
        proc_control_B.modCoeffs[35] = proc_control_B.constValues[11] -
          proc_control_B.constValues[35];

        // Sum: '<S214>/Diff' incorporates:
        //   Merge generated from: '<S10>/Merge'
        //   SampleTimeMath: '<S214>/TSamp'
        //   Selector: '<S142>/Selector'
        //   UnitDelay: '<S214>/UD'
        //
        //  About '<S214>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //    *
        //  Block description for '<S214>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S214>/UD':
        //
        //   Store in Global RAM

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.rtb_TSamp_o[proc_control_B.Ns] =
            proc_control_B.TSamp[proc_control_B.Ns] -
            proc_control_DW.UD_DSTATE[proc_control_B.Ns];
        }

        // End of Sum: '<S214>/Diff'
        proc_control_B.dv11[0] = 0.0;
        proc_control_B.dv11[1] = 0.0;
        proc_control_B.dv11[2] = 0.0;
        proc_control_B.dv11[3] = -proc_control_B.t21;
        proc_control_B.rtb_sincos_o2_i = proc_control_B.imvec[11] *
          proc_control_B.constValues[12] - proc_control_B.imvec[9];
        proc_control_B.dv11[4] = proc_control_B.rtb_sincos_o2_i *
          proc_control_B.constValues[0] + proc_control_B.absxk;
        proc_control_B.dv11[5] = -proc_control_B.scale_l +
          proc_control_B.c_idx_0;
        proc_control_B.dv11[6] = 0.0;
        proc_control_B.dv11[7] = 0.0;
        proc_control_B.dv11[8] = 0.0;
        proc_control_B.dv11[9] = -proc_control_B.absxk +
          proc_control_B.rtb_sincos_o1_idx_2;
        proc_control_B.dv11[10] = -proc_control_B.t17;
        proc_control_B.rtb_sincos_o2_m = proc_control_B.imvec[12] *
          proc_control_B.constValues[13] - proc_control_B.imvec[7];
        proc_control_B.dv11[11] = proc_control_B.rtb_sincos_o2_m *
          proc_control_B.constValues[0] + proc_control_B.t26;
        proc_control_B.dv11[12] = 0.0;
        proc_control_B.dv11[13] = 0.0;
        proc_control_B.dv11[14] = 0.0;
        proc_control_B.rtb_sincos_o1_idx_1 = proc_control_B.imvec[10] *
          proc_control_B.constValues[14] - proc_control_B.imvec[8];
        proc_control_B.dv11[15] = proc_control_B.rtb_sincos_o1_idx_1 *
          proc_control_B.constValues[0] + proc_control_B.scale_l;
        proc_control_B.dv11[16] = -proc_control_B.t26 + proc_control_B.t56;
        proc_control_B.dv11[17] = -proc_control_B.t62;
        proc_control_B.dv11[18] = proc_control_B.t21;
        proc_control_B.dv11[19] = proc_control_B.absxk -
          proc_control_B.rtb_sincos_o1_idx_2;
        proc_control_B.dv11[20] = proc_control_B.rtb_sincos_o1_idx_1 *
          -proc_control_B.constValues[0] - proc_control_B.scale_l;
        proc_control_B.dv11[21] = 0.0;
        proc_control_B.dv11[22] = ((-proc_control_B.Product_al -
          proc_control_B.oa) - proc_control_B.Product3_bo) + proc_control_B.t16;
        proc_control_B.dv11[23] = ((proc_control_B.Product1_fr +
          proc_control_B.t6) + proc_control_B.d_a) - proc_control_B.Divide_a;
        proc_control_B.dv11[24] = proc_control_B.rtb_sincos_o2_i *
          -proc_control_B.constValues[0] - proc_control_B.absxk;
        proc_control_B.dv11[25] = proc_control_B.t17;
        proc_control_B.dv11[26] = proc_control_B.t26 - proc_control_B.t56;
        proc_control_B.dv11[27] = ((proc_control_B.Product_al +
          proc_control_B.oa) + proc_control_B.Product3_bo) - proc_control_B.t16;
        proc_control_B.dv11[28] = 0.0;
        proc_control_B.dv11[29] = ((-proc_control_B.Product3_dy -
          proc_control_B.Product2_al) - proc_control_B.ob) +
          proc_control_B.Divide3_b;
        proc_control_B.dv11[30] = proc_control_B.scale_l -
          proc_control_B.c_idx_0;
        proc_control_B.dv11[31] = proc_control_B.rtb_sincos_o2_m *
          -proc_control_B.constValues[0] - proc_control_B.t26;
        proc_control_B.dv11[32] = proc_control_B.t62;
        proc_control_B.dv11[33] = ((-proc_control_B.Product1_fr -
          proc_control_B.t6) - proc_control_B.d_a) + proc_control_B.Divide_a;
        proc_control_B.dv11[34] = ((proc_control_B.Product3_dy +
          proc_control_B.Product2_al) + proc_control_B.ob) -
          proc_control_B.Divide3_b;
        proc_control_B.dv11[35] = 0.0;
        proc_control_B.constValues_c[0] = proc_control_B.constValues[24] * std::
          abs(proc_control_B.imvec[7]) + proc_control_B.constValues[18];
        proc_control_B.constValues_c[1] = 0.0;
        proc_control_B.constValues_c[2] = 0.0;
        proc_control_B.constValues_c[3] = 0.0;
        proc_control_B.constValues_c[4] = 0.0;
        proc_control_B.constValues_c[5] = 0.0;
        proc_control_B.constValues_c[6] = 0.0;
        proc_control_B.constValues_c[7] = proc_control_B.constValues[25] * std::
          abs(proc_control_B.imvec[8]) + proc_control_B.constValues[19];
        proc_control_B.constValues_c[8] = 0.0;
        proc_control_B.constValues_c[9] = 0.0;
        proc_control_B.constValues_c[10] = 0.0;
        proc_control_B.constValues_c[11] = 0.0;
        proc_control_B.constValues_c[12] = 0.0;
        proc_control_B.constValues_c[13] = 0.0;
        proc_control_B.constValues_c[14] = proc_control_B.constValues[26] * std::
          abs(proc_control_B.imvec[9]) + proc_control_B.constValues[20];
        proc_control_B.constValues_c[15] = 0.0;
        proc_control_B.constValues_c[16] = 0.0;
        proc_control_B.constValues_c[17] = 0.0;
        proc_control_B.constValues_c[18] = 0.0;
        proc_control_B.constValues_c[19] = 0.0;
        proc_control_B.constValues_c[20] = 0.0;
        proc_control_B.constValues_c[21] = proc_control_B.constValues[27] * std::
          abs(proc_control_B.imvec[10]) + proc_control_B.constValues[21];
        proc_control_B.constValues_c[22] = 0.0;
        proc_control_B.constValues_c[23] = 0.0;
        proc_control_B.constValues_c[24] = 0.0;
        proc_control_B.constValues_c[25] = 0.0;
        proc_control_B.constValues_c[26] = 0.0;
        proc_control_B.constValues_c[27] = 0.0;
        proc_control_B.constValues_c[28] = proc_control_B.constValues[28] * std::
          abs(proc_control_B.imvec[11]) + proc_control_B.constValues[22];
        proc_control_B.constValues_c[29] = 0.0;
        proc_control_B.constValues_c[30] = 0.0;
        proc_control_B.constValues_c[31] = 0.0;
        proc_control_B.constValues_c[32] = 0.0;
        proc_control_B.constValues_c[33] = 0.0;
        proc_control_B.constValues_c[34] = 0.0;
        proc_control_B.constValues_c[35] = proc_control_B.constValues[29] * std::
          abs(proc_control_B.imvec[12]) + proc_control_B.constValues[23];
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 36; proc_control_B.Ns++)
        {
          proc_control_B.dv12[proc_control_B.Ns] =
            proc_control_B.dv11[proc_control_B.Ns] +
            proc_control_B.constValues_c[proc_control_B.Ns];
        }

        proc_control_B.Product_al = (proc_control_B.constValues[0] -
          proc_control_B.t) * proc_control_B.constValues[37];
        proc_control_B.constValues_l[0] = (proc_control_B.t25_tmp -
          proc_control_B.t40) * proc_control_B.Product_al * -2.0;
        proc_control_B.constValues_l[1] = (proc_control_B.t20 +
          proc_control_B.t39) * proc_control_B.Product_al * -2.0;
        proc_control_B.constValues_l[2] = proc_control_B.Product_al *
          proc_control_B.t70;
        proc_control_B.Product_al = proc_control_B.constValues[17] *
          proc_control_B.constValues[37];
        proc_control_B.ob = proc_control_B.constValues[37] * proc_control_B.t14;
        proc_control_B.Product1_fr = proc_control_B.constValues[16] *
          proc_control_B.constValues[37] * -proc_control_B.t;
        proc_control_B.constValues_l[3] = ((proc_control_B.constValues[37] *
          proc_control_B.t15 * proc_control_B.Divide3 + proc_control_B.ob *
          proc_control_B.t70) + proc_control_B.Product_al * -proc_control_B.t *
          proc_control_B.Divide3) + proc_control_B.Product1_fr *
          proc_control_B.t70;
        proc_control_B.Product3_bo = proc_control_B.constValues[37] *
          -proc_control_B.t13;
        proc_control_B.Product3_dy = proc_control_B.constValues[15] *
          proc_control_B.constValues[37] * proc_control_B.t;
        proc_control_B.constValues_l[4] = ((proc_control_B.constValues[37] *
          -proc_control_B.t15 * proc_control_B.t25 + proc_control_B.Product3_bo *
          proc_control_B.t70) + proc_control_B.Product3_dy * proc_control_B.t70)
          + proc_control_B.Product_al * proc_control_B.t * proc_control_B.t25;
        proc_control_B.constValues_l[5] = ((proc_control_B.ob *
          proc_control_B.t25 + proc_control_B.Product3_bo *
          proc_control_B.Divide3) + proc_control_B.Product3_dy *
          proc_control_B.Divide3) + proc_control_B.Product1_fr *
          proc_control_B.t25;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.Product_al = 0.0;
          proc_control_B.rtb_sincos_o2_i = 0.0;
          proc_control_B.ibmat = 0;
          proc_control_B.b_k = 0;
          for (proc_control_B.i_f = 0; proc_control_B.i_f < 6;
               proc_control_B.i_f++) {
            proc_control_B.i = proc_control_B.ibmat + proc_control_B.Ns;
            proc_control_B.Product_al +=
              proc_control_B.modCoeffs[proc_control_B.i] *
              proc_control_B.rtb_TSamp_o[proc_control_B.i_f];
            proc_control_B.rtb_sincos_o2_i +=
              proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.b_k
              + 70] * proc_control_B.dv12[proc_control_B.i];
            proc_control_B.ibmat += 6;
            proc_control_B.b_k += 10;
          }

          proc_control_B.constValues_lu[proc_control_B.Ns] =
            (proc_control_B.Product_al + proc_control_B.rtb_sincos_o2_i) +
            proc_control_B.constValues_l[proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.Product_al = 0.0;
          proc_control_B.ibmat = 0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 6;
               proc_control_B.b_k++) {
            proc_control_B.Product_al +=
              proc_control_DW.obj_p.binv[proc_control_B.ibmat +
              proc_control_B.Ns] *
              proc_control_B.constValues_lu[proc_control_B.b_k];
            proc_control_B.ibmat += 8;
          }

          proc_control_B.mv[proc_control_B.Ns] = proc_control_B.Product_al;
        }
        break;

       case 21U:
        //  Open loop matrice b invese directe
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.rtb_sincos_o2_i = 0.0;
          proc_control_B.ibmat = 0;
          proc_control_B.b_k = 0;
          for (proc_control_B.i_f = 0; proc_control_B.i_f < 6;
               proc_control_B.i_f++) {
            proc_control_B.rtb_sincos_o2_i +=
              proc_control_DW.obj_p.binv[proc_control_B.ibmat +
              proc_control_B.Ns] *
              proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.b_k
              + 70];
            proc_control_B.ibmat += 8;
            proc_control_B.b_k += 10;
          }

          proc_control_B.mv[proc_control_B.Ns] = proc_control_B.rtb_sincos_o2_i *
            proc_control_DW.obj_p.k;
        }
        break;

       default:
        std::memset(&proc_control_B.mv[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // End of MATLABSystem: '<S142>/MATLAB System'

      // Merge generated from: '<S137>/Merge' incorporates:
      //   Constant: '<S142>/Constant1'
      //   SignalConversion generated from: '<S142>/Constant1'

      proc_control_B.Product3_dy = proc_control_P.Constant1_Value_g0;

      // Merge generated from: '<S137>/Merge' incorporates:
      //   Constant: '<S142>/Constant'
      //   SignalConversion generated from: '<S142>/Constant'

      proc_control_B.MpcStatus = proc_control_P.Constant_Value_m0;

      // Update for UnitDelay: '<S214>/UD' incorporates:
      //   SampleTimeMath: '<S214>/TSamp'
      //
      //  About '<S214>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //    *
      //  Block description for '<S214>/UD':
      //
      //   Store in Global RAM

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_DW.UD_DSTATE[proc_control_B.i] =
          proc_control_B.TSamp[proc_control_B.i];
      }

      // End of Update for UnitDelay: '<S214>/UD'
      // End of Outputs for SubSystem: '<S137>/If Action Subsystem2'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S137>/If Action Subsystem1' incorporates:
        //   ActionPort: '<S141>/Action Port'

        // InitializeConditions for SwitchCase: '<S137>/Switch Case' incorporates:
        //   Delay: '<S141>/Delay1'
        //   DiscretePulseGenerator: '<S141>/Pulse Generator'
        //   Memory: '<S184>/Memory'
        //   UnitDelay: '<S184>/last_mv'

        std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                    &proc_control_P.Memory_InitialCondition_n[0], 226U * sizeof
                    (boolean_T));
        std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                    &proc_control_P.last_mv_InitialCondition_k[0], sizeof(real_T)
                    << 3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                    &proc_control_P.Delay1_InitialCondition[0], 88U * sizeof
                    (real_T));
        proc_control_DW.clockTickCounter_n = 0;

        // End of InitializeConditions for SubSystem: '<S137>/If Action Subsystem1' 
      }

      // Outputs for IfAction SubSystem: '<S137>/If Action Subsystem1' incorporates:
      //   ActionPort: '<S141>/Action Port'

      // MATLAB Function: '<S141>/MATLAB Function' incorporates:
      //   Constant: '<S141>/Constant'
      //   Constant: '<S141>/Constant1'
      //   Delay: '<S141>/Delay1'
      //   DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      //   Lookup_n-D: '<S139>/N to A'
      //   Lookup_n-D: '<S139>/n-D Lookup Table1'
      //   Lookup_n-D: '<S26>/PWN to N'
      //   Lookup_n-D: '<S32>/N to RPM'
      //   SignalConversion generated from: '<S183>/ SFunction '
      //   Trigonometry: '<S275>/sincos'
      //   Trigonometry: '<S55>/sincos'
      //   UniformRandomNumber: '<S27>/Drift'
      //
      proc_control_B.imvec[0] = proc_control_B.WorldPosition_f[0];
      proc_control_B.imvec[1] = proc_control_B.WorldPosition_f[1];
      proc_control_B.imvec[2] = proc_control_B.WorldPosition_f[2];
      proc_control_B.imvec[3] = proc_control_B.qS2W[0];
      proc_control_B.imvec[4] = proc_control_B.qS2W[1];
      proc_control_B.imvec[5] = proc_control_B.qS2W[2];
      proc_control_B.imvec[6] = proc_control_B.qS2W[3];
      proc_control_B.imvec[7] = proc_control_B.BodyVelocity_b[0];
      proc_control_B.imvec[10] = proc_control_B.AngularRate_m[0];
      proc_control_B.imvec[8] = proc_control_B.BodyVelocity_b[1];
      proc_control_B.imvec[11] = proc_control_B.AngularRate_m[1];
      proc_control_B.imvec[9] = proc_control_B.BodyVelocity_b[2];
      proc_control_B.imvec[12] = proc_control_B.AngularRate_m[2];
      std::memset(&proc_control_B.A[0], 0, 1859U * sizeof(real_T));
      std::memset(&proc_control_B.A_h[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_h[38] = 0.0;
      proc_control_B.A_h[42] = 0.0;
      proc_control_B.A_h[56] = 0.0;
      proc_control_B.A_h[70] = 0.0;
      proc_control_B.A_h[84] = 0.0;
      proc_control_B.A_h[94] = 0.0;
      proc_control_B.A_h[95] = 0.0;
      proc_control_B.A_h[96] = 0.0;
      proc_control_B.A_h[97] = 0.0;
      proc_control_B.A_h[107] = 0.0;
      proc_control_B.A_h[108] = 0.0;
      proc_control_B.A_h[109] = 0.0;
      proc_control_B.A_h[110] = 0.0;
      proc_control_B.A_h[120] = 0.0;
      proc_control_B.A_h[121] = 0.0;
      proc_control_B.A_h[122] = 0.0;
      proc_control_B.A_h[123] = 0.0;
      proc_control_B.A_h[130] = 0.0;
      proc_control_B.A_h[131] = 0.0;
      proc_control_B.A_h[132] = 0.0;
      proc_control_B.A_h[143] = 0.0;
      proc_control_B.A_h[144] = 0.0;
      proc_control_B.A_h[145] = 0.0;
      proc_control_B.A_h[156] = 0.0;
      proc_control_B.A_h[157] = 0.0;
      proc_control_B.A_h[158] = 0.0;
      std::memset(&proc_control_B.y_m[0], 0, 38U * sizeof(real_T));
      proc_control_B.y_m[38] = 0.0;
      proc_control_B.y_m[42] = 0.0;
      proc_control_B.y_m[56] = 0.0;
      proc_control_B.y_m[70] = 0.0;
      proc_control_B.y_m[84] = 0.0;
      proc_control_B.y_m[94] = 0.0;
      proc_control_B.y_m[95] = 0.0;
      proc_control_B.y_m[96] = 0.0;
      proc_control_B.y_m[97] = 0.0;
      proc_control_B.y_m[107] = 0.0;
      proc_control_B.y_m[108] = 0.0;
      proc_control_B.y_m[109] = 0.0;
      proc_control_B.y_m[110] = 0.0;
      proc_control_B.y_m[120] = 0.0;
      proc_control_B.y_m[121] = 0.0;
      proc_control_B.y_m[122] = 0.0;
      proc_control_B.y_m[123] = 0.0;
      proc_control_B.y_m[130] = 0.0;
      proc_control_B.y_m[131] = 0.0;
      proc_control_B.y_m[132] = 0.0;
      proc_control_B.y_m[143] = 0.0;
      proc_control_B.y_m[144] = 0.0;
      proc_control_B.y_m[145] = 0.0;
      proc_control_B.y_m[156] = 0.0;
      proc_control_B.y_m[157] = 0.0;
      proc_control_B.y_m[158] = 0.0;
      proc_control_B.b_j = static_cast<int32_T>
        (proc_control_P.Constant1_Value_gt);
      for (proc_control_B.i = 0; proc_control_B.i < 11; proc_control_B.i++) {
        std::memcpy(&proc_control_B.z_f1[0], &proc_control_B.imvec[0], 13U *
                    sizeof(real_T));
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.mv[proc_control_B.Ns] = proc_control_DW.Delay1_DSTATE
            [11 * proc_control_B.Ns + proc_control_B.i];
        }

        proc_control_B.Product3_dy = std::abs(proc_control_B.imvec[10]);
        proc_control_B.Product1_fr = std::abs(proc_control_B.imvec[11]);
        proc_control_B.Product_al = std::abs(proc_control_B.imvec[12]);
        proc_control_B.Product2_al = std::abs(proc_control_B.imvec[7]);
        proc_control_B.t6 = std::abs(proc_control_B.imvec[8]);
        proc_control_B.oa = std::abs(proc_control_B.imvec[9]);
        if (std::isnan(proc_control_B.imvec[10])) {
          proc_control_B.ob = (rtNaN);
        } else if (proc_control_B.imvec[10] < 0.0) {
          proc_control_B.ob = -1.0;
        } else {
          proc_control_B.ob = (proc_control_B.imvec[10] > 0.0);
        }

        if (std::isnan(proc_control_B.imvec[11])) {
          proc_control_B.d_a = (rtNaN);
        } else if (proc_control_B.imvec[11] < 0.0) {
          proc_control_B.d_a = -1.0;
        } else {
          proc_control_B.d_a = (proc_control_B.imvec[11] > 0.0);
        }

        if (std::isnan(proc_control_B.imvec[12])) {
          proc_control_B.Product3_bo = (rtNaN);
        } else if (proc_control_B.imvec[12] < 0.0) {
          proc_control_B.Product3_bo = -1.0;
        } else {
          proc_control_B.Product3_bo = (proc_control_B.imvec[12] > 0.0);
        }

        if (std::isnan(proc_control_B.imvec[7])) {
          proc_control_B.Divide3_b = (rtNaN);
        } else if (proc_control_B.imvec[7] < 0.0) {
          proc_control_B.Divide3_b = -1.0;
        } else {
          proc_control_B.Divide3_b = (proc_control_B.imvec[7] > 0.0);
        }

        if (std::isnan(proc_control_B.imvec[8])) {
          proc_control_B.Divide_a = (rtNaN);
        } else if (proc_control_B.imvec[8] < 0.0) {
          proc_control_B.Divide_a = -1.0;
        } else {
          proc_control_B.Divide_a = (proc_control_B.imvec[8] > 0.0);
        }

        if (std::isnan(proc_control_B.imvec[9])) {
          proc_control_B.t13 = (rtNaN);
        } else if (proc_control_B.imvec[9] < 0.0) {
          proc_control_B.t13 = -1.0;
        } else {
          proc_control_B.t13 = (proc_control_B.imvec[9] > 0.0);
        }

        proc_control_B.t17 = proc_control_B.imvec[4] * proc_control_B.imvec[5] *
          2.0;
        proc_control_B.t14 = proc_control_B.imvec[4] * proc_control_B.imvec[6] *
          2.0;
        proc_control_B.t19 = proc_control_B.imvec[5] * proc_control_B.imvec[6] *
          2.0;
        proc_control_B.t20 = proc_control_B.imvec[3] * proc_control_B.imvec[4] *
          2.0;
        proc_control_B.t21 = proc_control_B.imvec[3] * proc_control_B.imvec[5] *
          2.0;
        proc_control_B.t15 = proc_control_B.imvec[3] * proc_control_B.imvec[6] *
          2.0;
        proc_control_B.t16 = proc_control_B.imvec[4] * proc_control_B.imvec[7] *
          2.0;
        proc_control_B.t24_tmp = proc_control_B.imvec[5] * proc_control_B.imvec
          [7];
        proc_control_B.t24 = proc_control_B.t24_tmp * 2.0;
        proc_control_B.t25_tmp = proc_control_B.imvec[6] * proc_control_B.imvec
          [7];
        proc_control_B.t25 = proc_control_B.t25_tmp * 2.0;
        proc_control_B.t26 = proc_control_B.imvec[3] * proc_control_B.imvec[7] *
          2.0;
        proc_control_B.scale_tmp = proc_control_B.imvec[4] *
          proc_control_B.imvec[8];
        proc_control_B.scale_l = proc_control_B.scale_tmp * 2.0;
        proc_control_B.absxk = proc_control_B.imvec[5] * proc_control_B.imvec[8]
          * 2.0;
        proc_control_B.t_tmp = proc_control_B.imvec[6] * proc_control_B.imvec[8];
        proc_control_B.t = proc_control_B.t_tmp * 2.0;
        proc_control_B.t52 = proc_control_B.imvec[3] * proc_control_B.imvec[8] *
          2.0;
        proc_control_B.t70_tmp = proc_control_B.imvec[4] * proc_control_B.imvec
          [9];
        proc_control_B.t70 = proc_control_B.t70_tmp * 2.0;
        proc_control_B.t32_tmp = proc_control_B.imvec[5] * proc_control_B.imvec
          [9];
        proc_control_B.t32 = proc_control_B.t32_tmp * 2.0;
        proc_control_B.t33 = proc_control_B.imvec[6] * proc_control_B.imvec[9] *
          2.0;
        proc_control_B.t34 = proc_control_B.imvec[3] * proc_control_B.imvec[9] *
          2.0;
        proc_control_B.t39 = proc_control_B.imvec[4] / 2.0;
        proc_control_B.t40 = proc_control_B.imvec[5] / 2.0;
        proc_control_B.t41 = proc_control_B.imvec[6] / 2.0;
        proc_control_B.t42 = proc_control_B.imvec[3] / 2.0;
        proc_control_B.t43 = proc_control_B.imvec[10] / 2.0;
        proc_control_B.t44 = proc_control_B.imvec[11] / 2.0;
        proc_control_B.t45 = proc_control_B.imvec[12] / 2.0;
        proc_control_B.t55 = proc_control_B.imvec[12] * 1.0571299073092789E-5;
        proc_control_B.t56 = proc_control_B.imvec[11] * 9.7602896722846373E-5;
        proc_control_B.rtb_sincos_o1_idx_2 = proc_control_B.imvec[8] *
          0.01129023503850542;
        proc_control_B.c_idx_0 = proc_control_B.imvec[7] * 0.00477039452928936;
        proc_control_B.t59 = proc_control_B.imvec[10] * 9.1703771260780813E-5;
        proc_control_B.t61 = proc_control_B.imvec[9] * 0.143523560675718;
        proc_control_B.t62 = proc_control_B.imvec[7] * 0.00568699616459184;
        proc_control_B.Divide3 = proc_control_B.imvec[9] * 0.069014505171846527;
        proc_control_B.t68 = proc_control_B.imvec[8] * 0.0071670223909459834;
        proc_control_B.t35_tmp = proc_control_B.imvec[4] * proc_control_B.imvec
          [4] * 2.0;
        proc_control_B.t36_tmp = proc_control_B.imvec[5] * proc_control_B.imvec
          [5] * 2.0;
        proc_control_B.t37_tmp = proc_control_B.imvec[6] * proc_control_B.imvec
          [6] * 2.0;
        proc_control_B.t60 = -(proc_control_B.imvec[10] * 9.1703771260780813E-5);
        proc_control_B.rtb_sincos_o2_i = -proc_control_B.t + proc_control_B.t32;
        proc_control_B.A_h[39] = proc_control_B.rtb_sincos_o2_i;
        proc_control_B.rtb_sincos_o2_m = proc_control_B.t25 - proc_control_B.t70;
        proc_control_B.A_h[40] = proc_control_B.rtb_sincos_o2_m;
        proc_control_B.rtb_sincos_o1_idx_1 = -proc_control_B.t24 +
          proc_control_B.scale_l;
        proc_control_B.A_h[41] = proc_control_B.rtb_sincos_o1_idx_1;
        proc_control_B.A_h[43] = proc_control_B.t43;
        proc_control_B.A_h[44] = proc_control_B.t44;
        proc_control_B.A_h[45] = proc_control_B.t45;
        proc_control_B.d_f = proc_control_B.imvec[4] * -0.0013017970932508 +
          proc_control_B.imvec[5] * 0.4138016519122657;
        proc_control_B.A_h[46] = proc_control_B.d_f;
        proc_control_B.d1 = proc_control_B.imvec[4] * -0.51979016069898065 +
          proc_control_B.imvec[5] * 0.00099202109956931486;
        proc_control_B.A_h[47] = proc_control_B.d1;
        proc_control_B.d2 = proc_control_B.imvec[4] * 0.033540735888224739 -
          proc_control_B.imvec[5] * 0.0058758415205803329;
        proc_control_B.A_h[48] = proc_control_B.d2;
        proc_control_B.d3 = proc_control_B.imvec[4] * -25.242114556122988 +
          proc_control_B.imvec[5] * 0.1138522338822895;
        proc_control_B.A_h[49] = proc_control_B.d3;
        proc_control_B.d4 = proc_control_B.imvec[4] * 0.1184627304742461 -
          proc_control_B.imvec[5] * 8.6371397256799973;
        proc_control_B.A_h[50] = proc_control_B.d4;
        proc_control_B.d5 = proc_control_B.imvec[4] * 0.38451002147839958 +
          proc_control_B.imvec[5] * 0.65361132374006825;
        proc_control_B.A_h[51] = proc_control_B.d5;
        proc_control_B.d6 = proc_control_B.absxk + proc_control_B.t33;
        proc_control_B.A_h[52] = proc_control_B.d6;
        proc_control_B.t24 = (proc_control_B.t24 - proc_control_B.t34) -
          proc_control_B.scale_tmp * 4.0;
        proc_control_B.A_h[53] = proc_control_B.t24;
        proc_control_B.t25 = (proc_control_B.t25 + proc_control_B.t52) -
          proc_control_B.t70_tmp * 4.0;
        proc_control_B.A_h[54] = proc_control_B.t25;
        proc_control_B.A_h[55] = -proc_control_B.t43;
        proc_control_B.A_h[57] = -proc_control_B.t45;
        proc_control_B.A_h[58] = proc_control_B.t44;
        proc_control_B.t70_tmp = (proc_control_B.imvec[4] * -0.01263905936484723
          - proc_control_B.imvec[6] * 0.4138016519122657) -
          proc_control_B.imvec[3] * 0.0013017970932508;
        proc_control_B.A_h[59] = proc_control_B.t70_tmp;
        proc_control_B.scale_tmp = (proc_control_B.imvec[4] *
          -0.05386046241846134 - proc_control_B.imvec[6] *
          0.00099202109956931486) - proc_control_B.imvec[3] *
          0.51979016069898065;
        proc_control_B.A_h[60] = proc_control_B.scale_tmp;
        proc_control_B.d7 = (proc_control_B.imvec[4] * 0.37271497842704371 +
                             proc_control_B.imvec[6] * 0.0058758415205803329) +
          proc_control_B.imvec[3] * 0.033540735888224739;
        proc_control_B.A_h[61] = proc_control_B.d7;
        proc_control_B.d8 = (proc_control_B.imvec[4] * -4.2094140168137981 -
                             proc_control_B.imvec[6] * 0.1138522338822895) -
          proc_control_B.imvec[3] * 25.242114556122988;
        proc_control_B.A_h[62] = proc_control_B.d8;
        proc_control_B.d9 = (proc_control_B.imvec[4] * 0.73643595165049924 +
                             proc_control_B.imvec[6] * 8.6371397256799973) +
          proc_control_B.imvec[3] * 0.1184627304742461;
        proc_control_B.A_h[63] = proc_control_B.d9;
        proc_control_B.d10 = (proc_control_B.imvec[4] * 0.009785912146552939 -
                              proc_control_B.imvec[6] * 0.65361132374006825) +
          proc_control_B.imvec[3] * 0.38451002147839958;
        proc_control_B.A_h[64] = proc_control_B.d10;
        proc_control_B.scale_l = (proc_control_B.scale_l + proc_control_B.t34) -
          proc_control_B.t24_tmp * 4.0;
        proc_control_B.A_h[65] = proc_control_B.scale_l;
        proc_control_B.t33 += proc_control_B.t16;
        proc_control_B.A_h[66] = proc_control_B.t33;
        proc_control_B.t = (-proc_control_B.t26 + proc_control_B.t) -
          proc_control_B.t32_tmp * 4.0;
        proc_control_B.A_h[67] = proc_control_B.t;
        proc_control_B.A_h[68] = -proc_control_B.t44;
        proc_control_B.A_h[69] = proc_control_B.t45;
        proc_control_B.A_h[71] = -proc_control_B.t43;
        proc_control_B.t32_tmp = (proc_control_B.imvec[5] * -0.01263905936484723
          - proc_control_B.imvec[6] * 0.0013017970932508) +
          proc_control_B.imvec[3] * 0.4138016519122657;
        proc_control_B.A_h[72] = proc_control_B.t32_tmp;
        proc_control_B.t24_tmp = (proc_control_B.imvec[5] * -0.05386046241846134
          - proc_control_B.imvec[6] * 0.51979016069898065) +
          proc_control_B.imvec[3] * 0.00099202109956931486;
        proc_control_B.A_h[73] = proc_control_B.t24_tmp;
        proc_control_B.t34 = (proc_control_B.imvec[5] * 0.37271497842704371 +
                              proc_control_B.imvec[6] * 0.033540735888224739) -
          proc_control_B.imvec[3] * 0.0058758415205803329;
        proc_control_B.A_h[74] = proc_control_B.t34;
        proc_control_B.d11 = (proc_control_B.imvec[5] * -4.2094140168137981 -
                              proc_control_B.imvec[6] * 25.242114556122988) +
          proc_control_B.imvec[3] * 0.1138522338822895;
        proc_control_B.A_h[75] = proc_control_B.d11;
        proc_control_B.d12 = (proc_control_B.imvec[5] * 0.73643595165049924 +
                              proc_control_B.imvec[6] * 0.1184627304742461) -
          proc_control_B.imvec[3] * 8.6371397256799973;
        proc_control_B.A_h[76] = proc_control_B.d12;
        proc_control_B.d13 = (proc_control_B.imvec[5] * 0.009785912146552939 +
                              proc_control_B.imvec[6] * 0.38451002147839958) +
          proc_control_B.imvec[3] * 0.65361132374006825;
        proc_control_B.A_h[77] = proc_control_B.d13;
        proc_control_B.t70 = (-proc_control_B.t52 + proc_control_B.t70) -
          proc_control_B.t25_tmp * 4.0;
        proc_control_B.A_h[78] = proc_control_B.t70;
        proc_control_B.t26 = (proc_control_B.t26 + proc_control_B.t32) -
          proc_control_B.t_tmp * 4.0;
        proc_control_B.A_h[79] = proc_control_B.t26;
        proc_control_B.absxk += proc_control_B.t16;
        proc_control_B.A_h[80] = proc_control_B.absxk;
        proc_control_B.A_h[81] = -proc_control_B.t45;
        proc_control_B.A_h[82] = -proc_control_B.t44;
        proc_control_B.A_h[83] = proc_control_B.t43;
        proc_control_B.t16 = proc_control_B.imvec[4] * -0.4138016519122657 -
          proc_control_B.imvec[5] * 0.0013017970932508;
        proc_control_B.A_h[85] = proc_control_B.t16;
        proc_control_B.t25_tmp = proc_control_B.imvec[4] *
          -0.00099202109956931486 - proc_control_B.imvec[5] *
          0.51979016069898065;
        proc_control_B.A_h[86] = proc_control_B.t25_tmp;
        proc_control_B.t_tmp = proc_control_B.imvec[4] * 0.0058758415205803329 +
          proc_control_B.imvec[5] * 0.033540735888224739;
        proc_control_B.A_h[87] = proc_control_B.t_tmp;
        proc_control_B.t32 = proc_control_B.imvec[4] * -0.1138522338822895 -
          proc_control_B.imvec[5] * 25.242114556122988;
        proc_control_B.A_h[88] = proc_control_B.t32;
        proc_control_B.t52 = proc_control_B.imvec[4] * 8.6371397256799973 +
          proc_control_B.imvec[5] * 0.1184627304742461;
        proc_control_B.A_h[89] = proc_control_B.t52;
        proc_control_B.d14 = proc_control_B.imvec[4] * -0.65361132374006825 +
          proc_control_B.imvec[5] * 0.38451002147839958;
        proc_control_B.A_h[90] = proc_control_B.d14;
        proc_control_B.A_tmp = (-proc_control_B.t36_tmp - proc_control_B.t37_tmp)
          + 1.0;
        proc_control_B.A_h[91] = proc_control_B.A_tmp;
        proc_control_B.d15 = proc_control_B.t17 + proc_control_B.t15;
        proc_control_B.A_h[92] = proc_control_B.d15;
        proc_control_B.d16 = proc_control_B.t14 - proc_control_B.t21;
        proc_control_B.A_h[93] = proc_control_B.d16;
        proc_control_B.Divide3_b *= proc_control_B.imvec[7];
        proc_control_B.d17 = (((((proc_control_B.Product2_al *
          -0.036243063166504788 + proc_control_B.t55) + proc_control_B.t56) -
          proc_control_B.rtb_sincos_o1_idx_2) - proc_control_B.t61) -
                              proc_control_B.Divide3_b * 0.036243063166504788) -
          0.46465465598083061;
        proc_control_B.A_h[98] = proc_control_B.d17;
        proc_control_B.d18 = (((proc_control_B.imvec[8] * 0.00477039452928936 -
          proc_control_B.imvec[9] * 0.001468966557066211) -
          proc_control_B.Divide3_b * 1.109195745194835E-6) -
                              1.422045827172866E-5) + ((proc_control_B.imvec[11]
          * 0.00041592787873873338 - proc_control_B.imvec[12] *
          0.74121409319149256) - proc_control_B.Product2_al *
          1.109195745194835E-6);
        proc_control_B.A_h[99] = proc_control_B.d18;
        proc_control_B.d19 = (((proc_control_B.imvec[8] * -5.890830655932608E-5
          + proc_control_B.imvec[9] * 0.00568699616459184) +
          proc_control_B.Divide3_b * 7.9830677445685858E-6) +
                              0.0001023470223662639) + ((proc_control_B.imvec[11]
          * 0.69409782663856512 - proc_control_B.imvec[12] *
          0.00032422410747795261) + proc_control_B.Product2_al *
          7.9830677445685858E-6);
        proc_control_B.A_h[100] = proc_control_B.d19;
        proc_control_B.d20 = (((proc_control_B.imvec[11] * 0.032506453976272241
          + proc_control_B.imvec[12] * 0.24400486517334929) -
          proc_control_B.Product2_al * 0.0001525121428377004) +
                              ((proc_control_B.imvec[8] * 0.044446246736648841 -
          proc_control_B.imvec[9] * 0.1148218101592509) -
          proc_control_B.Divide3_b * 0.0001525121428377004)) -
          0.0019552838825346208;
        proc_control_B.A_h[101] = proc_control_B.d20;
        proc_control_B.d21 = (((proc_control_B.imvec[8] * 1.7911420833141059E-5
          + proc_control_B.imvec[9] * 8.3502908029033716) +
          proc_control_B.Divide3_b * 0.011738978516892359) + 0.150499724575543)
          + ((proc_control_B.imvec[11] * -0.00568699616459184 -
              proc_control_B.imvec[12] * 0.001145088836853196) +
             proc_control_B.Product2_al * 0.011738978516892359);
        proc_control_B.A_h[102] = proc_control_B.d21;
        proc_control_B.Divide3_b = (((proc_control_B.imvec[11] *
          -7.5569972812640509E-5 - proc_control_B.imvec[12] *
          0.00477039452928936) - proc_control_B.Product2_al *
          0.0011846302503005471) + ((proc_control_B.imvec[8] * -5.91169722427816
          - proc_control_B.imvec[9] * 2.2977499514997389E-5) -
          proc_control_B.Divide3_b * 0.0011846302503005471)) -
          0.015187567311545479;
        proc_control_B.A_h[103] = proc_control_B.Divide3_b;
        proc_control_B.Product2_al = proc_control_B.t17 - proc_control_B.t15;
        proc_control_B.A_h[104] = proc_control_B.Product2_al;
        proc_control_B.t37_tmp = (-proc_control_B.t35_tmp -
          proc_control_B.t37_tmp) + 1.0;
        proc_control_B.A_h[105] = proc_control_B.t37_tmp;
        proc_control_B.t15 = proc_control_B.t19 + proc_control_B.t20;
        proc_control_B.A_h[106] = proc_control_B.t15;
        proc_control_B.Divide_a *= proc_control_B.imvec[8];
        proc_control_B.t17 = (((proc_control_B.imvec[10] *
          -2.1519484922730651E-5 + proc_control_B.imvec[12] * 1.3454180758607359)
          - proc_control_B.t6 * 7.7738505218783331E-7) - proc_control_B.imvec[7]
                              * 0.01129023503850542) + ((proc_control_B.imvec[9]
          * -0.00041111798914172931 - proc_control_B.Divide_a *
          7.7738505218783331E-7) - 1.8960611028971542E-5);
        proc_control_B.A_h[111] = proc_control_B.t17;
        proc_control_B.t55 = (proc_control_B.t6 * -0.01903042325061665 +
                              proc_control_B.t55) + proc_control_B.c_idx_0;
        proc_control_B.d22 = proc_control_B.Divide_a * 0.01903042325061665;
        proc_control_B.A_h[112] = (((proc_control_B.t55 - proc_control_B.t59) -
          proc_control_B.Divide3) - proc_control_B.d22) - 0.46415666464918648;
        proc_control_B.d23 = (((proc_control_B.imvec[7] * -5.890830655932608E-5
          + proc_control_B.imvec[9] * 0.0071670223909459834) +
          proc_control_B.Divide_a * 2.3842573459475649E-5) +
                              0.00058152618193843065) + ((proc_control_B.imvec
          [10] * -0.93255469429176219 - proc_control_B.imvec[12] *
          7.6083411800115719E-5) + proc_control_B.t6 * 2.3842573459475649E-5);
        proc_control_B.A_h[113] = proc_control_B.d23;
        proc_control_B.d24 = (((proc_control_B.imvec[10] *
          -0.0071670223909459834 + proc_control_B.imvec[12] *
          0.00145353196782447) - proc_control_B.t6 * 0.017943464992838758) +
                              ((proc_control_B.imvec[7] * 0.044446246736648841 -
          proc_control_B.imvec[9] * 5.3937622658585171) -
          proc_control_B.Divide_a * 0.017943464992838758)) - 0.4376454876302136;
        proc_control_B.A_h[114] = proc_control_B.d24;
        proc_control_B.d25 = (((proc_control_B.imvec[10] * 0.0012538688125934979
          - proc_control_B.imvec[12] * 0.1118794885864644) + proc_control_B.t6 *
          8.4206769578830268E-5) + proc_control_B.imvec[7] *
                              1.7911420833141059E-5) + ((proc_control_B.Divide_a
          * 8.4206769578830268E-5 + proc_control_B.imvec[9] *
          0.025315910649035739) + 0.0020538236482641531);
        proc_control_B.A_h[115] = proc_control_B.d25;
        proc_control_B.Divide_a = (((proc_control_B.imvec[10] *
          1.6661666253314429E-5 + proc_control_B.imvec[12] * 0.01129023503850542)
          + proc_control_B.t6 * 0.00035080205133418912) +
          ((proc_control_B.imvec[7] * -5.91169722427816 + proc_control_B.imvec[9]
            * 0.01257120723021817) + proc_control_B.Divide_a *
           0.00035080205133418912)) + 0.0085561475935168052;
        proc_control_B.A_h[116] = proc_control_B.Divide_a;
        proc_control_B.t6 = proc_control_B.t14 + proc_control_B.t21;
        proc_control_B.A_h[117] = proc_control_B.t6;
        proc_control_B.t20 = proc_control_B.t19 - proc_control_B.t20;
        proc_control_B.A_h[118] = proc_control_B.t20;
        proc_control_B.t35_tmp = (-proc_control_B.t35_tmp -
          proc_control_B.t36_tmp) + 1.0;
        proc_control_B.A_h[119] = proc_control_B.t35_tmp;
        proc_control_B.t13 *= proc_control_B.imvec[9];
        proc_control_B.t19 = (((proc_control_B.imvec[10] * 2.989993556213668E-6
          - proc_control_B.imvec[11] * 1.4431163638272659) + proc_control_B.oa *
          5.1582899272597018E-6) - proc_control_B.imvec[7] * 0.143523560675718)
          + ((proc_control_B.t13 * 5.1582899272597018E-6 + proc_control_B.imvec
              [8] * -0.00041111798914172931) + 0.0001592064792364106);
        proc_control_B.A_h[124] = proc_control_B.t19;
        proc_control_B.t14 = (((proc_control_B.imvec[10] * 1.0731951852318531 -
          proc_control_B.imvec[11] * 1.356129262930646E-5) + proc_control_B.oa *
          2.1981689677272681E-5) + ((proc_control_B.imvec[7] *
          -0.001468966557066211 - proc_control_B.imvec[8] * 0.069014505171846527)
          + proc_control_B.t13 * 2.1981689677272681E-5)) +
          0.00067844721226150231;
        proc_control_B.A_h[125] = proc_control_B.t14;
        proc_control_B.t56 += proc_control_B.oa * -0.01616685726098728;
        proc_control_B.t21 = proc_control_B.t13 * 0.01616685726098728;
        proc_control_B.A_h[126] = ((((proc_control_B.t56 - proc_control_B.t59) +
          proc_control_B.t62) + proc_control_B.t68) - proc_control_B.t21) -
          0.49897707595639768;
        proc_control_B.t59 = (((proc_control_B.imvec[10] * 0.069014505171846527
          - proc_control_B.imvec[11] * 0.0018646499569661989) +
          proc_control_B.oa * 0.00171795837774031) + ((proc_control_B.imvec[7] *
          -0.1148218101592509 - proc_control_B.imvec[8] * 5.3937622658585171) +
          proc_control_B.t13 * 0.00171795837774031)) + 0.053023406720379938;
        proc_control_B.A_h[127] = proc_control_B.t59;
        proc_control_B.t36_tmp = (((proc_control_B.imvec[10] *
          -0.00032387772021301561 + proc_control_B.imvec[11] * 0.143523560675718)
          - proc_control_B.oa * 0.00030055639757781919) +
          ((proc_control_B.imvec[7] * 8.3502908029033716 + proc_control_B.imvec
            [8] * 0.025315910649035739) - proc_control_B.t13 *
           0.00030055639757781919)) - 0.0092764320240067664;
        proc_control_B.A_h[128] = proc_control_B.t36_tmp;
        proc_control_B.t13 = (((proc_control_B.imvec[10] *
          -0.0013492616947596331 - proc_control_B.imvec[11] *
          0.01448357294143097) - proc_control_B.oa * 3.993855127780116E-6) -
                              proc_control_B.imvec[7] * 2.2977499514997389E-5) +
          ((proc_control_B.imvec[8] * 0.01257120723021817 - proc_control_B.t13 *
            3.993855127780116E-6) - 0.00012326713357346041);
        proc_control_B.A_h[129] = proc_control_B.t13;
        proc_control_B.A_h[133] = -proc_control_B.t39;
        proc_control_B.A_h[134] = proc_control_B.t42;
        proc_control_B.A_h[135] = proc_control_B.t41;
        proc_control_B.A_h[136] = -proc_control_B.t40;
        proc_control_B.ob *= proc_control_B.imvec[10];
        proc_control_B.oa = (((proc_control_B.imvec[10] *
          -0.00010396365424827521 - proc_control_B.imvec[11] *
          0.0030560301354578762) - proc_control_B.imvec[12] *
                              0.030270009262121408) - proc_control_B.Product3_dy
                             * 2.1768827225552109E-5) + (((proc_control_B.imvec
          [8] * -2.1519484922730651E-5 + proc_control_B.imvec[9] *
          2.989993556213668E-6) - proc_control_B.ob * 2.1768827225552109E-5) -
          0.00043450752945213789);
        proc_control_B.A_h[137] = proc_control_B.oa;
        proc_control_B.d26 = ((((proc_control_B.imvec[10] * 0.0028513455484883 -
          proc_control_B.imvec[11] * 0.00032316342950661811) +
          proc_control_B.imvec[12] * 4.2079285691049859E-5) -
          proc_control_B.Product3_dy * 0.0036543398217122828) +
                              ((proc_control_B.imvec[8] * -9.1703771260780813E-5
          + proc_control_B.imvec[9] * 1.0731951852318531) - proc_control_B.ob *
          0.0036543398217122828)) - 0.072940914605035587;
        proc_control_B.A_h[138] = proc_control_B.d26;
        proc_control_B.d27 = (((proc_control_B.imvec[10] * 0.023864851221217471
          + proc_control_B.imvec[11] * 4.0426879502317728E-6) -
          proc_control_B.imvec[12] * 0.00016269010774240791) +
                              ((proc_control_B.Product3_dy *
          0.0003794960966701478 - proc_control_B.imvec[8] * 0.93255469429176219)
          - proc_control_B.imvec[9] * 9.1703771260780813E-5)) +
          (proc_control_B.ob * 0.0003794960966701478 + 0.007574772388625705);
        proc_control_B.A_h[139] = proc_control_B.d27;
        proc_control_B.d28 = ((((proc_control_B.Product3_dy *
          -0.28560141361437341 + proc_control_B.Divide3) - proc_control_B.t68) -
          proc_control_B.ob * 0.28560141361437341) - 5.7006270182509668) +
          ((proc_control_B.imvec[10] * 0.00017692814721597281 -
            proc_control_B.imvec[11] * 0.00301187450220627) +
           proc_control_B.imvec[12] * 0.0032852614324183722);
        proc_control_B.A_h[140] = proc_control_B.d28;
        proc_control_B.d29 = (((proc_control_B.imvec[10] * 0.005100926963153893
          + proc_control_B.imvec[11] * 7.54282242443926E-5) +
          proc_control_B.imvec[12] * 0.76112100692746432) +
                              ((proc_control_B.Product3_dy *
          0.0013404854555911631 + proc_control_B.imvec[8] *
          0.0012538688125934979) - proc_control_B.imvec[9] *
          0.00032387772021301561)) + (proc_control_B.ob * 0.0013404854555911631
          + 0.026756196718386482);
        proc_control_B.A_h[141] = proc_control_B.d29;
        proc_control_B.ob = (((proc_control_B.imvec[10] * -0.0085297096290247246
          - proc_control_B.imvec[11] * 0.59953739020136265) -
                              proc_control_B.imvec[12] * 6.8948828938803766E-5)
                             + ((proc_control_B.Product3_dy *
          0.00066564938883491385 + proc_control_B.imvec[8] *
          1.6661666253314429E-5) - proc_control_B.imvec[9] *
          0.0013492616947596331)) + (proc_control_B.ob * 0.00066564938883491385
          + 0.013286414946804669);
        proc_control_B.A_h[142] = proc_control_B.ob;
        proc_control_B.A_h[146] = -proc_control_B.t40;
        proc_control_B.A_h[147] = -proc_control_B.t41;
        proc_control_B.A_h[148] = proc_control_B.t42;
        proc_control_B.A_h[149] = proc_control_B.t39;
        proc_control_B.Product3_dy = proc_control_B.imvec[11] *
          proc_control_B.d_a;
        proc_control_B.d_a = ((((proc_control_B.imvec[10] *
          -0.0030560301354578762 + proc_control_B.imvec[11] *
          0.001929418735906703) + proc_control_B.imvec[12] *
          6.2884941489263073E-5) + proc_control_B.Product1_fr *
          0.001003331497170287) + ((proc_control_B.imvec[7] *
          9.7602896722846373E-5 - proc_control_B.imvec[9] * 1.4431163638272659)
          + proc_control_B.Product3_dy * 0.001003331497170287)) +
          0.0234110682673067;
        proc_control_B.A_h[150] = proc_control_B.d_a;
        proc_control_B.d30 = (((proc_control_B.imvec[10] *
          -0.00032316342950661811 + proc_control_B.imvec[11] *
          4.5292476302332957E-6) - proc_control_B.imvec[12] *
          0.016528998001422841) + proc_control_B.Product1_fr *
                              1.026911824132076E-5) + (((proc_control_B.imvec[7]
          * 0.00041592787873873338 - proc_control_B.imvec[9] *
          1.356129262930646E-5) + proc_control_B.Product3_dy *
          1.026911824132076E-5) + 0.00023961275896415121);
        proc_control_B.A_h[151] = proc_control_B.d30;
        proc_control_B.d31 = (((proc_control_B.imvec[10] * 4.0426879502317728E-6
          + proc_control_B.imvec[11] * 0.023860477346842442) -
          proc_control_B.imvec[12] * 0.000941018323416786) +
                              ((proc_control_B.Product1_fr *
          -3.9756137245743291E-5 + proc_control_B.imvec[7] * 0.69409782663856512)
          + proc_control_B.imvec[9] * 9.7602896722846373E-5)) +
          (proc_control_B.Product3_dy * -3.9756137245743291E-5 -
           0.00092764320240067675);
        proc_control_B.A_h[152] = proc_control_B.d31;
        proc_control_B.d32 = (((proc_control_B.imvec[10] * -0.00301187450220627
          + proc_control_B.imvec[11] * 0.00082864946354184129) -
          proc_control_B.imvec[12] * 0.291807921220024) +
                              ((proc_control_B.Product1_fr *
          0.00080268590155159437 + proc_control_B.imvec[7] *
          0.032506453976272241) - proc_control_B.imvec[9] *
          0.0018646499569661989)) + (proc_control_B.Product3_dy *
          0.00080268590155159437 + 0.018729337702870542);
        proc_control_B.A_h[153] = proc_control_B.d32;
        proc_control_B.t61 = ((((proc_control_B.Product1_fr *
          -0.058374455968341669 + proc_control_B.t61) - proc_control_B.t62) -
          proc_control_B.Product3_dy * 0.058374455968341669) - 1.362070639261306)
          + ((proc_control_B.imvec[10] * 7.54282242443926E-5 -
              proc_control_B.imvec[11] * 0.00019446645525741661) -
             proc_control_B.imvec[12] * 0.003324115892995542);
        proc_control_B.A_h[154] = proc_control_B.t61;
        proc_control_B.Product3_dy = ((((proc_control_B.Product1_fr *
          1.6062902063655571E-7 - proc_control_B.imvec[7] *
          7.5569972812640509E-5) - proc_control_B.imvec[9] * 0.01448357294143097)
          + proc_control_B.Product3_dy * 1.6062902063655571E-7) +
          ((proc_control_B.imvec[10] * -0.59953739020136265 +
            proc_control_B.imvec[11] * 0.0085432434746820687) +
           proc_control_B.imvec[12] * 0.0030111351640179931)) +
          3.7480104815196341E-6;
        proc_control_B.A_h[155] = proc_control_B.Product3_dy;
        proc_control_B.A_h[159] = -proc_control_B.t41;
        proc_control_B.A_h[160] = proc_control_B.t40;
        proc_control_B.A_h[161] = -proc_control_B.t39;
        proc_control_B.A_h[162] = proc_control_B.t42;
        proc_control_B.Product1_fr = proc_control_B.imvec[12] *
          proc_control_B.Product3_bo;
        proc_control_B.Product3_bo = (((proc_control_B.imvec[10] *
          -0.030270009262121408 + proc_control_B.imvec[11] *
          6.2884941489263073E-5) + proc_control_B.imvec[12] *
          0.0020006959490984312) - proc_control_B.Product_al *
          0.0001032754577185093) + (((proc_control_B.imvec[7] *
          1.0571299073092789E-5 + proc_control_B.imvec[8] * 1.3454180758607359)
          - proc_control_B.Product1_fr * 0.0001032754577185093) -
          0.0050625224371818262);
        proc_control_B.A_h[163] = proc_control_B.Product3_bo;
        proc_control_B.d33 = (((proc_control_B.imvec[10] * 4.2079285691049859E-5
          - proc_control_B.imvec[11] * 0.016528998001422841) +
          proc_control_B.imvec[12] * 0.00283488707941543) +
                              proc_control_B.Product_al * 4.3636352726935713E-5)
          + (((proc_control_B.imvec[7] * -0.74121409319149256 +
               proc_control_B.imvec[8] * 1.0571299073092789E-5) +
              proc_control_B.Product1_fr * 4.3636352726935713E-5) +
             0.0021390368983792022);
        proc_control_B.A_h[164] = proc_control_B.d33;
        proc_control_B.d34 = ((((proc_control_B.Product_al *
          -5.3885346962112674E-7 - proc_control_B.imvec[7] *
          0.00032422410747795261) - proc_control_B.imvec[8] *
          7.6083411800115719E-5) - proc_control_B.Product1_fr *
          5.3885346962112674E-7) + ((proc_control_B.imvec[10] *
          -0.00016269010774240791 - proc_control_B.imvec[11] *
          0.000941018323416786) - proc_control_B.imvec[12] * 2.6641242336162E-6))
          - 2.6414385765741509E-5;
        proc_control_B.A_h[165] = proc_control_B.d34;
        proc_control_B.d35 = (((proc_control_B.imvec[10] * 0.0032852614324183722
          - proc_control_B.imvec[11] * 0.291807921220024) -
          proc_control_B.imvec[12] * 0.00063467747547131872) +
                              ((proc_control_B.Product_al *
          0.00040656429737222281 + proc_control_B.imvec[7] * 0.24400486517334929)
          + proc_control_B.imvec[8] * 0.00145353196782447)) +
          (proc_control_B.Product1_fr * 0.00040656429737222281 +
           0.019929622420207);
        proc_control_B.A_h[166] = proc_control_B.d35;
        proc_control_B.d36 = ((((proc_control_B.Product_al *
          1.6384160104928689E-7 - proc_control_B.imvec[7] * 0.001145088836853196)
          - proc_control_B.imvec[8] * 0.1118794885864644) +
          proc_control_B.Product1_fr * 1.6384160104928689E-7) +
                              ((proc_control_B.imvec[10] * 0.76112100692746432 -
          proc_control_B.imvec[11] * 0.003324115892995542) -
          proc_control_B.imvec[12] * 0.005288701994301117)) +
          8.0314510318277867E-6;
        proc_control_B.A_h[167] = proc_control_B.d36;
        proc_control_B.Product1_fr = ((((proc_control_B.Product_al *
          -0.054076220260104418 + proc_control_B.rtb_sincos_o1_idx_2) -
          proc_control_B.c_idx_0) - proc_control_B.Product1_fr *
          0.054076220260104418) - 2.6507951107894319) + ((proc_control_B.imvec
          [10] * -6.8948828938803766E-5 + proc_control_B.imvec[11] *
          0.0030111351640179931) + proc_control_B.imvec[12] *
          1.7711862430984169E-5);
        proc_control_B.A_h[168] = proc_control_B.Product1_fr;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 169; proc_control_B.Ns++)
        {
          proc_control_B.C[proc_control_B.Ns + proc_control_B.i * 169] =
            c_1[proc_control_B.Ns];
          proc_control_B.dv2[proc_control_B.Ns] =
            proc_control_B.A_h[proc_control_B.Ns] *
            proc_control_P.Constant_Value_ce;
        }

        proc_control_expm_l(proc_control_B.dv2, &proc_control_B.A[169 *
                            proc_control_B.i]);
        std::memset(&proc_control_B.modCoeffs[0], 0, 36U * sizeof(real_T));

        // Outputs for Enabled SubSystem: '<Root>/Model System' incorporates:
        //   EnablePort: '<S3>/Enable'

        // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
        //   EnablePort: '<S246>/Enable'

        // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S274>/Enable'

        proc_control_B.Ns = 0;

        // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/DVL Measurements'
        // End of Outputs for SubSystem: '<Root>/Model System'
        for (proc_control_B.base_index = 0; proc_control_B.base_index < 6;
             proc_control_B.base_index++) {
          // Outputs for Enabled SubSystem: '<Root>/Model System' incorporates:
          //   EnablePort: '<S3>/Enable'

          // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
          //   EnablePort: '<S246>/Enable'

          // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S274>/Enable'

          proc_control_B.modCoeffs[proc_control_B.Ns] = 1.0;
          proc_control_B.Ns += 7;

          // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S9>/DVL Measurements'
          // End of Outputs for SubSystem: '<Root>/Model System'
        }

        proc_control_B.y_m[39] = proc_control_B.rtb_sincos_o2_i;
        proc_control_B.y_m[40] = proc_control_B.rtb_sincos_o2_m;
        proc_control_B.y_m[41] = proc_control_B.rtb_sincos_o1_idx_1;
        proc_control_B.y_m[43] = proc_control_B.t43;
        proc_control_B.y_m[44] = proc_control_B.t44;
        proc_control_B.y_m[45] = proc_control_B.t45;
        proc_control_B.y_m[46] = proc_control_B.d_f;
        proc_control_B.y_m[47] = proc_control_B.d1;
        proc_control_B.y_m[48] = proc_control_B.d2;
        proc_control_B.y_m[49] = proc_control_B.d3;
        proc_control_B.y_m[50] = proc_control_B.d4;
        proc_control_B.y_m[51] = proc_control_B.d5;
        proc_control_B.y_m[52] = proc_control_B.d6;
        proc_control_B.y_m[53] = proc_control_B.t24;
        proc_control_B.y_m[54] = proc_control_B.t25;
        proc_control_B.y_m[55] = -proc_control_B.t43;
        proc_control_B.y_m[57] = -proc_control_B.t45;
        proc_control_B.y_m[58] = proc_control_B.t44;
        proc_control_B.y_m[59] = proc_control_B.t70_tmp;
        proc_control_B.y_m[60] = proc_control_B.scale_tmp;
        proc_control_B.y_m[61] = proc_control_B.d7;
        proc_control_B.y_m[62] = proc_control_B.d8;
        proc_control_B.y_m[63] = proc_control_B.d9;
        proc_control_B.y_m[64] = proc_control_B.d10;
        proc_control_B.y_m[65] = proc_control_B.scale_l;
        proc_control_B.y_m[66] = proc_control_B.t33;
        proc_control_B.y_m[67] = proc_control_B.t;
        proc_control_B.y_m[68] = -proc_control_B.t44;
        proc_control_B.y_m[69] = proc_control_B.t45;
        proc_control_B.y_m[71] = -proc_control_B.t43;
        proc_control_B.y_m[72] = proc_control_B.t32_tmp;
        proc_control_B.y_m[73] = proc_control_B.t24_tmp;
        proc_control_B.y_m[74] = proc_control_B.t34;
        proc_control_B.y_m[75] = proc_control_B.d11;
        proc_control_B.y_m[76] = proc_control_B.d12;
        proc_control_B.y_m[77] = proc_control_B.d13;
        proc_control_B.y_m[78] = proc_control_B.t70;
        proc_control_B.y_m[79] = proc_control_B.t26;
        proc_control_B.y_m[80] = proc_control_B.absxk;
        proc_control_B.y_m[81] = -proc_control_B.t45;
        proc_control_B.y_m[82] = -proc_control_B.t44;
        proc_control_B.y_m[83] = proc_control_B.t43;
        proc_control_B.y_m[85] = proc_control_B.t16;
        proc_control_B.y_m[86] = proc_control_B.t25_tmp;
        proc_control_B.y_m[87] = proc_control_B.t_tmp;
        proc_control_B.y_m[88] = proc_control_B.t32;
        proc_control_B.y_m[89] = proc_control_B.t52;
        proc_control_B.y_m[90] = proc_control_B.d14;
        proc_control_B.y_m[91] = proc_control_B.A_tmp;
        proc_control_B.y_m[92] = proc_control_B.d15;
        proc_control_B.y_m[93] = proc_control_B.d16;
        proc_control_B.y_m[98] = proc_control_B.d17;
        proc_control_B.y_m[99] = proc_control_B.d18;
        proc_control_B.y_m[100] = proc_control_B.d19;
        proc_control_B.y_m[101] = proc_control_B.d20;
        proc_control_B.y_m[102] = proc_control_B.d21;
        proc_control_B.y_m[103] = proc_control_B.Divide3_b;
        proc_control_B.y_m[104] = proc_control_B.Product2_al;
        proc_control_B.y_m[105] = proc_control_B.t37_tmp;
        proc_control_B.y_m[106] = proc_control_B.t15;
        proc_control_B.y_m[111] = proc_control_B.t17;
        proc_control_B.y_m[112] = (((proc_control_B.t55 + proc_control_B.t60) -
          proc_control_B.Divide3) - proc_control_B.d22) - 0.46415666464918648;
        proc_control_B.y_m[113] = proc_control_B.d23;
        proc_control_B.y_m[114] = proc_control_B.d24;
        proc_control_B.y_m[115] = proc_control_B.d25;
        proc_control_B.y_m[116] = proc_control_B.Divide_a;
        proc_control_B.y_m[117] = proc_control_B.t6;
        proc_control_B.y_m[118] = proc_control_B.t20;
        proc_control_B.y_m[119] = proc_control_B.t35_tmp;
        proc_control_B.y_m[124] = proc_control_B.t19;
        proc_control_B.y_m[125] = proc_control_B.t14;
        proc_control_B.y_m[126] = ((((proc_control_B.t56 + proc_control_B.t60) +
          proc_control_B.t62) + proc_control_B.t68) - proc_control_B.t21) -
          0.49897707595639768;
        proc_control_B.y_m[127] = proc_control_B.t59;
        proc_control_B.y_m[128] = proc_control_B.t36_tmp;
        proc_control_B.y_m[129] = proc_control_B.t13;
        proc_control_B.y_m[133] = -proc_control_B.t39;
        proc_control_B.y_m[134] = proc_control_B.t42;
        proc_control_B.y_m[135] = proc_control_B.t41;
        proc_control_B.y_m[136] = -proc_control_B.t40;
        proc_control_B.y_m[137] = proc_control_B.oa;
        proc_control_B.y_m[138] = proc_control_B.d26;
        proc_control_B.y_m[139] = proc_control_B.d27;
        proc_control_B.y_m[140] = proc_control_B.d28;
        proc_control_B.y_m[141] = proc_control_B.d29;
        proc_control_B.y_m[142] = proc_control_B.ob;
        proc_control_B.y_m[146] = -proc_control_B.t40;
        proc_control_B.y_m[147] = -proc_control_B.t41;
        proc_control_B.y_m[148] = proc_control_B.t42;
        proc_control_B.y_m[149] = proc_control_B.t39;
        proc_control_B.y_m[150] = proc_control_B.d_a;
        proc_control_B.y_m[151] = proc_control_B.d30;
        proc_control_B.y_m[152] = proc_control_B.d31;
        proc_control_B.y_m[153] = proc_control_B.d32;
        proc_control_B.y_m[154] = proc_control_B.t61;
        proc_control_B.y_m[155] = proc_control_B.Product3_dy;
        proc_control_B.y_m[159] = -proc_control_B.t41;
        proc_control_B.y_m[160] = proc_control_B.t40;
        proc_control_B.y_m[161] = -proc_control_B.t39;
        proc_control_B.y_m[162] = proc_control_B.t42;
        proc_control_B.y_m[163] = proc_control_B.Product3_bo;
        proc_control_B.y_m[164] = proc_control_B.d33;
        proc_control_B.y_m[165] = proc_control_B.d34;
        proc_control_B.y_m[166] = proc_control_B.d35;
        proc_control_B.y_m[167] = proc_control_B.d36;
        proc_control_B.y_m[168] = proc_control_B.Product1_fr;
        proc_control_B.Ns = 0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k
             ++) {
          for (proc_control_B.i_f = 0; proc_control_B.i_f < 6;
               proc_control_B.i_f++) {
            proc_control_B.base_index = proc_control_B.i_f + proc_control_B.Ns;
            proc_control_B.modCoeffs_tmp = (proc_control_B.i_f +
              proc_control_B.ibmat) + 98;
            proc_control_B.modCoeffs[proc_control_B.base_index] =
              proc_control_B.A[proc_control_B.modCoeffs_tmp] -
              proc_control_B.modCoeffs[proc_control_B.base_index];
            proc_control_B.dv11[proc_control_B.base_index] =
              proc_control_B.y_m[proc_control_B.modCoeffs_tmp];
          }

          proc_control_B.Ns += 6;
          proc_control_B.ibmat += 13;
        }

        proc_control_mldivide_jo(proc_control_B.dv11, proc_control_B.modCoeffs);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.ibmat = 0;
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 8;
               proc_control_B.b_k++) {
            proc_control_B.Product_al = 0.0;
            proc_control_B.i_f = 0;
            for (proc_control_B.base_index = 0; proc_control_B.base_index < 6;
                 proc_control_B.base_index++) {
              proc_control_B.Product_al +=
                proc_control_B.modCoeffs[proc_control_B.i_f + proc_control_B.Ns]
                * c_b[proc_control_B.base_index + proc_control_B.ibmat];
              proc_control_B.i_f += 6;
            }

            proc_control_B.array_p[proc_control_B.ibmat + proc_control_B.Ns] =
              proc_control_B.Product_al;
            proc_control_B.ibmat += 6;
          }
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
               proc_control_B.ibmat++) {
            proc_control_B.B[(proc_control_B.ibmat + 13 * proc_control_B.Ns) +
              104 * proc_control_B.i] = 0.0;
          }

          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
               proc_control_B.ibmat++) {
            proc_control_B.B[((proc_control_B.ibmat + 13 * proc_control_B.Ns) +
                              104 * proc_control_B.i) + 7] =
              proc_control_B.array_p[6 * proc_control_B.Ns +
              proc_control_B.ibmat];
          }
        }

        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < proc_control_B.b_j;
             proc_control_B.ibmat++) {
          proc_control_B.Product3_dy = proc_control_P.Constant_Value_ce /
            proc_control_P.Constant1_Value_gt;
          proc_control_AUV8QuatSimFcn(proc_control_B.imvec, proc_control_B.mv,
            proc_control_B.DataStoreRead);
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns
               ++) {
            proc_control_B.imvec[proc_control_B.Ns] +=
              proc_control_B.DataStoreRead[proc_control_B.Ns] *
              proc_control_B.Product3_dy;
          }

          proc_control_B.d_a = proc_control_norm_nti(&proc_control_B.imvec[3]);
          proc_control_B.imvec[3] /= proc_control_B.d_a;
          proc_control_B.imvec[4] /= proc_control_B.d_a;
          proc_control_B.imvec[5] /= proc_control_B.d_a;
          proc_control_B.imvec[6] /= proc_control_B.d_a;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.U[proc_control_B.Ns + (proc_control_B.i << 3)] =
            proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
            proc_control_B.i];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.Product_al = proc_control_B.z_f1[proc_control_B.Ns];
          proc_control_B.ibmat = 13 * proc_control_B.i + proc_control_B.Ns;
          proc_control_B.Y[proc_control_B.ibmat] = proc_control_B.Product_al;
          proc_control_B.X[proc_control_B.ibmat] = proc_control_B.Product_al;
          proc_control_B.DX[proc_control_B.ibmat] =
            proc_control_B.imvec[proc_control_B.Ns] - proc_control_B.Product_al;
        }
      }

      // End of MATLAB Function: '<S141>/MATLAB Function'

      // MATLAB Function: '<S212>/FixedHorizonOptimizer'
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3003; proc_control_B.Ns++)
      {
        proc_control_B.b_C[proc_control_B.Ns] = c_0[proc_control_B.Ns];
      }

      std::memcpy(&proc_control_B.b_A[0], &d_1[0], 4851U * sizeof(real_T));
      std::memset(&proc_control_B.Bu_o[0], 0, 1848U * sizeof(real_T));
      std::memset(&proc_control_B.Bv_m[0], 0, 231U * sizeof(real_T));
      std::memset(&proc_control_B.Dv_e[0], 0, 143U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 21; proc_control_B.Ns++) {
        std::memcpy(&proc_control_B.b_A[proc_control_B.Ns * 21],
                    &b[proc_control_B.Ns * 21], 21U * sizeof(real_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          proc_control_B.i = 13 * proc_control_B.Ns + proc_control_B.ibmat;
          proc_control_B.b_C[proc_control_B.i] = d_0[proc_control_B.i];
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.iv1[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv21[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.DataStoreRead[proc_control_B.Ns] = 1.0;
      }

      std::memcpy(&proc_control_B.rtb_B_o[0], &(*(real_T (*)[104])&
        proc_control_B.B[0])[0], 104U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S212>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S144>/Pulse Generator'
      //   DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      //   MATLABSystem: '<S307>/MATLAB System'
      //   Merge generated from: '<S10>/Merge'
      //   SwitchCase: '<S10>/Switch Case'
      //
      proc_control_mpc_plantupdate(&proc_control_B.A[0], proc_control_B.rtb_B_o,
        &proc_control_B.C[0], &proc_control_B.b_A[0], proc_control_B.b_B,
        &proc_control_B.b_C[0], h_0, proc_control_B.iv1, proc_control_B.iv,
        proc_control_B.dv21, proc_control_B.DataStoreRead, &proc_control_B.Bu_o
        [0], &proc_control_B.Bv_m[0], proc_control_B.b_C_o,
        &proc_control_B.Dv_e[0], proc_control_B.z_f1, proc_control_B.b_A_c,
        proc_control_B.y_m, proc_control_B.Nk);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.iv1[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv21[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.DataStoreRead[proc_control_B.Ns] = 1.0;
      }

      proc_control_B.ibmat = 0;
      proc_control_B.b_j = 0;
      proc_control_B.base_index = 0;
      proc_control_B.b_k = 0;
      proc_control_B.i_f = 0;
      proc_control_B.modCoeffs_tmp = 0;
      proc_control_B.i_h = 0;
      proc_control_B.i_hh = 0;
      proc_control_B.i_b = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 390; proc_control_B.Ns++)
        {
          proc_control_B.b_D[proc_control_B.Ns] = b_D[(proc_control_B.Ns +
            proc_control_B.i_b) + 390];
        }

        std::memcpy(&proc_control_B.rtb_B_o[0], &(*(real_T (*)[104])&
          proc_control_B.B[proc_control_B.b_j + 104])[0], 104U * sizeof(real_T));
        std::memcpy(&proc_control_B.b_B[0], &(*(real_T (*)[630])&
          b_B[proc_control_B.b_k + 630])[0], 630U * sizeof(real_T));
        proc_control_mpc_plantupdate(&proc_control_B.A[proc_control_B.ibmat +
          169], proc_control_B.rtb_B_o, &proc_control_B.C[proc_control_B.ibmat +
          169], &proc_control_B.b_A[proc_control_B.base_index + 441],
          proc_control_B.b_B, &proc_control_B.b_C[proc_control_B.i_f + 273],
          proc_control_B.b_D, proc_control_B.iv1, proc_control_B.iv,
          proc_control_B.dv21, proc_control_B.DataStoreRead,
          &proc_control_B.Bu_o[proc_control_B.modCoeffs_tmp + 168],
          &proc_control_B.Bv_m[proc_control_B.i_h + 21], proc_control_B.b_C_o,
          &proc_control_B.Dv_e[proc_control_B.i_hh + 13], proc_control_B.imvec,
          proc_control_B.b_A_c, proc_control_B.y_m, proc_control_B.Nk);
        proc_control_B.ibmat += 169;
        proc_control_B.b_j += 104;
        proc_control_B.base_index += 441;
        proc_control_B.b_k += 630;
        proc_control_B.i_f += 273;
        proc_control_B.modCoeffs_tmp += 168;
        proc_control_B.i_h += 21;
        proc_control_B.i_hh += 13;
        proc_control_B.i_b += 390;
      }

      std::memcpy(&proc_control_B.b_Mlim_m[0], &e[0], 226U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_l[0], &proc_control_B.U[0], sizeof(real_T) <<
                  3U);
      std::memcpy(&proc_control_B.z_f1[0], &proc_control_B.Y[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.mv[0], &proc_control_B.U[0], sizeof(real_T) <<
                  3U);
      for (proc_control_B.i = 0; proc_control_B.i < 226; proc_control_B.i++) {
        proc_control_B.Ns = b_Mrows_1[proc_control_B.i];
        if (proc_control_B.Ns <= 130) {
          proc_control_B.Ns = (proc_control_B.Ns - (proc_control_B.Ns - 1) / 13 *
                               13) - 1;
          proc_control_B.b_Mlim_m[proc_control_B.i] +=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_f1[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 260) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 131, 13) * 13) - 131;
          proc_control_B.b_Mlim_m[proc_control_B.i] -=
            old_yoff[proc_control_B.Ns] - proc_control_B.z_f1[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 340) {
          proc_control_B.b_Mlim_m[proc_control_B.i] += 0.0 - proc_control_B.U_l
            [(proc_control_B.Ns - (((proc_control_B.Ns - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.b_Mlim_m[proc_control_B.i] -= 0.0 -
            proc_control_B.U_l[proc_control_B.Ns - 341];
        }
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.ob = proc_control_B.U_l[proc_control_B.i];
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 10;
             proc_control_B.ibmat++) {
          proc_control_B.b_j = proc_control_B.Ns + proc_control_B.i;
          proc_control_B.b_utarget[proc_control_B.b_j] -= proc_control_B.ob;
          proc_control_B.Ns += 8;
        }
      }

      std::memcpy(&proc_control_B.b_xoff[0], &proc_control_B.X[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.Bv_m[0], &proc_control_B.DX[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 10;
           proc_control_B.base_index++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.imvec[proc_control_B.Ns] =
            proc_control_B.b_xoff[proc_control_B.Ns] - proc_control_B.X
            [(proc_control_B.base_index + 1) * 13 + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.U_l[proc_control_B.Ns] =
            proc_control_B.mv[proc_control_B.Ns] - proc_control_B.U
            [((proc_control_B.base_index + 1) << 3) + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.rtb_sincos_o2_i = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.rtb_sincos_o2_i += proc_control_B.b_A[(21 *
              proc_control_B.ibmat + proc_control_B.Ns) +
              (proc_control_B.base_index + 1) * 441] *
              proc_control_B.imvec[proc_control_B.ibmat];
          }

          proc_control_B.Product_al = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
               proc_control_B.ibmat++) {
            proc_control_B.Product_al += proc_control_B.Bu_o[(21 *
              proc_control_B.ibmat + proc_control_B.Ns) +
              (proc_control_B.base_index + 1) * 168] *
              proc_control_B.U_l[proc_control_B.ibmat];
          }

          proc_control_B.i = (proc_control_B.base_index + 1) * 13 +
            proc_control_B.Ns;
          proc_control_B.Bv_m[proc_control_B.Ns + 21 *
            (proc_control_B.base_index + 1)] =
            (((proc_control_B.DX[proc_control_B.i] +
               proc_control_B.X[proc_control_B.i]) -
              proc_control_B.b_xoff[proc_control_B.Ns]) +
             proc_control_B.rtb_sincos_o2_i) + proc_control_B.Product_al;
          proc_control_B.rtb_sincos_o2_i = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.rtb_sincos_o2_i += proc_control_B.b_C[(13 *
              proc_control_B.ibmat + proc_control_B.Ns) +
              (proc_control_B.base_index + 1) * 273] *
              proc_control_B.imvec[proc_control_B.ibmat];
          }

          proc_control_B.Dv_e[proc_control_B.i] =
            (proc_control_B.Y[proc_control_B.i] -
             proc_control_B.z_f1[proc_control_B.Ns]) +
            proc_control_B.rtb_sincos_o2_i;
        }
      }

      for (proc_control_B.i = 0; proc_control_B.i < 11; proc_control_B.i++) {
        proc_control_B.vseq_h[proc_control_B.i] = 1.0;
      }

      proc_control_B.base_index = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++) {
        // Outputs for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' incorporates:
        //   ActionPort: '<S307>/Action Port'

        proc_control_B.Ns = 0;

        // End of Outputs for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          // Outputs for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' incorporates:
          //   ActionPort: '<S307>/Action Port'

          proc_control_B.rseq_p[proc_control_B.ibmat + proc_control_B.base_index]
            = proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns
            + proc_control_B.i] - proc_control_B.z_f1[proc_control_B.ibmat];
          proc_control_B.Ns += 10;

          // End of Outputs for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
        }

        proc_control_B.base_index += 13;
      }

      // SignalConversion generated from: '<S213>/ SFunction ' incorporates:
      //   Constant: '<S141>/Constant2'
      //   MATLAB Function: '<S212>/FixedHorizonOptimizer'
      //   UnitDelay: '<S184>/last_mv'

      proc_control_B.rtb_X_e_d[0] = proc_control_B.WorldPosition_f[0] -
        proc_control_B.b_xoff[0];
      proc_control_B.rtb_X_e_d[1] = proc_control_B.WorldPosition_f[1] -
        proc_control_B.b_xoff[1];
      proc_control_B.rtb_X_e_d[2] = proc_control_B.WorldPosition_f[2] -
        proc_control_B.b_xoff[2];
      proc_control_B.rtb_X_e_d[3] = proc_control_B.qS2W[0] -
        proc_control_B.b_xoff[3];
      proc_control_B.rtb_X_e_d[4] = proc_control_B.qS2W[1] -
        proc_control_B.b_xoff[4];
      proc_control_B.rtb_X_e_d[5] = proc_control_B.qS2W[2] -
        proc_control_B.b_xoff[5];
      proc_control_B.rtb_X_e_d[6] = proc_control_B.qS2W[3] -
        proc_control_B.b_xoff[6];
      proc_control_B.rtb_X_e_d[7] = proc_control_B.BodyVelocity_b[0] -
        proc_control_B.b_xoff[7];
      proc_control_B.rtb_X_e_d[10] = proc_control_B.AngularRate_m[0] -
        proc_control_B.b_xoff[10];
      proc_control_B.rtb_X_e_d[8] = proc_control_B.BodyVelocity_b[1] -
        proc_control_B.b_xoff[8];
      proc_control_B.rtb_X_e_d[11] = proc_control_B.AngularRate_m[1] -
        proc_control_B.b_xoff[11];
      proc_control_B.rtb_X_e_d[9] = proc_control_B.BodyVelocity_b[2] -
        proc_control_B.b_xoff[9];
      proc_control_B.rtb_X_e_d[12] = proc_control_B.AngularRate_m[2] -
        proc_control_B.b_xoff[12];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.rtb_X_e_d[proc_control_B.Ns + 13] =
          proc_control_P.Constant2_Value_p[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns + 13];
        proc_control_B.dv21[proc_control_B.Ns] =
          proc_control_DW.last_mv_DSTATE[proc_control_B.Ns] -
          proc_control_B.mv[proc_control_B.Ns];
      }

      // End of SignalConversion generated from: '<S213>/ SFunction '

      // MATLAB Function: '<S212>/FixedHorizonOptimizer'
      std::memset(&proc_control_B.dv[0], 0, 2486U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv20[proc_control_B.Ns] = 1.0;
      }

      // Memory: '<S184>/Memory'
      std::memcpy(&proc_control_B.bv[0], &proc_control_DW.Memory_PreviousInput[0],
                  226U * sizeof(boolean_T));
      std::memcpy(&proc_control_B.o[0], &o[0], 4746U * sizeof(real_T));
      std::memcpy(&proc_control_B.q[0], &q[0], 1808U * sizeof(real_T));
      std::memcpy(&proc_control_B.g[0], &g[0], 81U * sizeof(real_T));
      std::memcpy(&proc_control_B.h[0], &h[0], 2034U * sizeof(real_T));

      // Update for Memory: '<S184>/Memory' incorporates:
      //   MATLAB Function: '<S212>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S138>/MATLAB System'
      //   Math: '<S184>/Math Function'
      //   Math: '<S184>/Math Function1'
      //   Math: '<S184>/Math Function2'
      //   SignalConversion generated from: '<S138>/MATLAB System'
      //
      proc_control_mpcblock_optimizer(proc_control_B.rseq_p,
        proc_control_B.vseq_h, proc_control_B.mvmin, proc_control_B.mvmax,
        proc_control_B.rtb_X_e_d, proc_control_B.dv21, proc_control_B.bv,
        proc_control_B.b_Mlim_m, proc_control_B.o, proc_control_B.q,
        proc_control_B.dv, proc_control_B.b_utarget, proc_control_B.mv,
        proc_control_B.g, proc_control_B.h, proc_control_B.ywt,
        proc_control_B.mvwt, proc_control_B.dmwwt, u, v, proc_control_B.b_A,
        proc_control_B.Bu_o, proc_control_B.Bv_m, proc_control_B.b_C,
        proc_control_B.Dv_e, b_Mrows_1, proc_control_B.dv20, proc_control_B.U_l,
        proc_control_B.U, &proc_control_B.Product3_dy,
        proc_control_DW.Memory_PreviousInput);

      // DataTypeConversion: '<S141>/Data Type Conversion'
      proc_control_B.rtb_sincos_o2_i = std::floor(proc_control_B.Product3_dy);
      if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
          (proc_control_B.rtb_sincos_o2_i)) {
        proc_control_B.rtb_sincos_o2_i = 0.0;
      } else {
        proc_control_B.rtb_sincos_o2_i = std::fmod
          (proc_control_B.rtb_sincos_o2_i, 256.0);
      }

      // Merge generated from: '<S137>/Merge' incorporates:
      //   DataTypeConversion: '<S141>/Data Type Conversion'

      proc_control_B.MpcStatus = static_cast<int8_T>
        (proc_control_B.rtb_sincos_o2_i < 0.0 ? static_cast<int32_T>(
          static_cast<int8_T>(-static_cast<int8_T>(static_cast<uint8_T>
            (-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
          static_cast<int8_T>(static_cast<uint8_T>
           (proc_control_B.rtb_sincos_o2_i))));

      // Merge generated from: '<S137>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S141>/Pulse Generator'

      proc_control_B.Product3_dy = (proc_control_DW.clockTickCounter_n <
        proc_control_P.PulseGenerator_Duty_l) &&
        (proc_control_DW.clockTickCounter_n >= 0) ?
        proc_control_P.PulseGenerator_Amp_a : 0.0;

      // DiscretePulseGenerator: '<S141>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_n >=
          proc_control_P.PulseGenerator_Period_d - 1.0) {
        proc_control_DW.clockTickCounter_n = 0;
      } else {
        proc_control_DW.clockTickCounter_n++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        // Gain: '<S184>/u_scale' incorporates:
        //   Merge generated from: '<S137>/Merge'

        proc_control_B.ob = proc_control_B.U_l[proc_control_B.i];

        // Merge generated from: '<S137>/Merge' incorporates:
        //   Gain: '<S184>/u_scale'

        proc_control_B.mv[proc_control_B.i] =
          proc_control_P.u_scale_Gain_o[proc_control_B.i] * proc_control_B.ob;

        // Update for UnitDelay: '<S184>/last_mv' incorporates:
        //   Gain: '<S184>/u_scale'
        //   Merge generated from: '<S137>/Merge'

        proc_control_DW.last_mv_DSTATE[proc_control_B.i] = proc_control_B.ob;
      }

      // Update for Delay: '<S141>/Delay1' incorporates:
      //   Gain: '<S184>/useq_scale'

      for (proc_control_B.i = 0; proc_control_B.i < 88; proc_control_B.i++) {
        proc_control_DW.Delay1_DSTATE[proc_control_B.i] =
          proc_control_P.useq_scale_Gain[proc_control_B.i] *
          proc_control_B.U[proc_control_B.i];
      }

      // End of Update for Delay: '<S141>/Delay1'
      // End of Outputs for SubSystem: '<S137>/If Action Subsystem1'
      break;

     case 3:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S144>/Action Port'

        // InitializeConditions for SwitchCase: '<S137>/Switch Case' incorporates:
        //   Delay: '<S144>/Delay'
        //   Delay: '<S218>/mv_Delay'
        //   Delay: '<S218>/slack_delay'
        //   Delay: '<S218>/x_Delay'
        //   DiscretePulseGenerator: '<S144>/Pulse Generator'

        std::memcpy(&proc_control_DW.Delay_DSTATE_pp[0],
                    &proc_control_P.Delay_InitialCondition_a[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.icLoad = true;
        proc_control_DW.icLoad_g = true;
        proc_control_DW.icLoad_o = true;
        proc_control_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' 
      }

      // Outputs for IfAction SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S144>/Action Port'

      // Reshape: '<S217>/Reshape'
      proc_control_B.CostFcn_workspace_runtimedata.x[0] =
        proc_control_B.WorldPosition_f[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[1] =
        proc_control_B.WorldPosition_f[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[2] =
        proc_control_B.WorldPosition_f[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[3] = proc_control_B.qS2W[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[4] = proc_control_B.qS2W[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[5] = proc_control_B.qS2W[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[6] = proc_control_B.qS2W[3];
      proc_control_B.CostFcn_workspace_runtimedata.x[7] =
        proc_control_B.BodyVelocity_b[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[10] =
        proc_control_B.AngularRate_m[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[8] =
        proc_control_B.BodyVelocity_b[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[11] =
        proc_control_B.AngularRate_m[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[9] =
        proc_control_B.BodyVelocity_b[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[12] =
        proc_control_B.AngularRate_m[2];

      // Delay: '<S218>/mv_Delay' incorporates:
      //   Constant: '<S218>/ones'
      //   Delay: '<S144>/Delay'
      //   Product: '<S218>/Product'

      if (proc_control_DW.icLoad) {
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 11;
               proc_control_B.b_k++) {
            proc_control_DW.mv_Delay_DSTATE[proc_control_B.b_k +
              proc_control_B.Ns] = proc_control_P.ones_Value[proc_control_B.b_k]
              * proc_control_DW.Delay_DSTATE_pp[proc_control_B.ibmat];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S218>/Selector1' incorporates:
      //   Constant: '<S218>/Constant1'
      //   Delay: '<S218>/mv_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.Selector1_h[proc_control_B.ibmat + 9 *
            proc_control_B.Ns] = proc_control_DW.mv_Delay_DSTATE[(11 *
            proc_control_B.Ns + static_cast<int32_T>
            (proc_control_P.Constant1_Value_iz[proc_control_B.ibmat])) - 1];
        }
      }

      // End of Selector: '<S218>/Selector1'

      // Delay: '<S218>/x_Delay' incorporates:
      //   Constant: '<S218>/ones'
      //   Product: '<S218>/Product1'

      if (proc_control_DW.icLoad_g) {
        // Product: '<S218>/Product1' incorporates:
        //   Reshape: '<S218>/reshape_x'

        proc_control_B.DataStoreRead[0] = proc_control_B.WorldPosition_f[0];
        proc_control_B.DataStoreRead[1] = proc_control_B.WorldPosition_f[1];
        proc_control_B.DataStoreRead[2] = proc_control_B.WorldPosition_f[2];
        proc_control_B.DataStoreRead[3] = proc_control_B.qS2W[0];
        proc_control_B.DataStoreRead[4] = proc_control_B.qS2W[1];
        proc_control_B.DataStoreRead[5] = proc_control_B.qS2W[2];
        proc_control_B.DataStoreRead[6] = proc_control_B.qS2W[3];
        proc_control_B.DataStoreRead[7] = proc_control_B.BodyVelocity_b[0];
        proc_control_B.DataStoreRead[10] = proc_control_B.AngularRate_m[0];
        proc_control_B.DataStoreRead[8] = proc_control_B.BodyVelocity_b[1];
        proc_control_B.DataStoreRead[11] = proc_control_B.AngularRate_m[1];
        proc_control_B.DataStoreRead[9] = proc_control_B.BodyVelocity_b[2];
        proc_control_B.DataStoreRead[12] = proc_control_B.AngularRate_m[2];
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          for (proc_control_B.b_k = 0; proc_control_B.b_k < 11;
               proc_control_B.b_k++) {
            proc_control_DW.x_Delay_DSTATE[proc_control_B.b_k +
              proc_control_B.Ns] = proc_control_P.ones_Value[proc_control_B.b_k]
              * proc_control_B.DataStoreRead[proc_control_B.ibmat];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S218>/Selector' incorporates:
      //   Constant: '<S218>/Constant'
      //   Delay: '<S218>/x_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.Selector_m[proc_control_B.ibmat + 9 * proc_control_B.Ns]
            = proc_control_DW.x_Delay_DSTATE[(11 * proc_control_B.Ns +
            static_cast<int32_T>
            (proc_control_P.Constant_Value_ld[proc_control_B.ibmat])) - 1];
        }
      }

      // End of Selector: '<S218>/Selector'

      // Delay: '<S218>/slack_delay' incorporates:
      //   Constant: '<S216>/e.init_zero'

      if (proc_control_DW.icLoad_o) {
        proc_control_DW.slack_delay_DSTATE = proc_control_P.einit_zero_Value;
      }

      // MATLAB Function: '<S217>/NLMPC' incorporates:
      //   DataTypeConversion: '<S217>/mo or x Conversion1'
      //   Delay: '<S144>/Delay'
      //   Delay: '<S218>/slack_delay'
      //   MATLABSystem: '<S138>/MATLAB System'
      //   Merge generated from: '<S10>/Merge'
      //   Reshape: '<S217>/Reshape'
      //   Selector: '<S218>/Selector'
      //   Selector: '<S218>/Selector1'
      //   SignalConversion generated from: '<S138>/MATLAB System'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[proc_control_B.Ns]
          = proc_control_B.ywt[proc_control_B.ibmat];
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 9; proc_control_B.b_k
             ++) {
          proc_control_B.CostFcn_workspace_runtimedata.OutputWeights
            [(proc_control_B.b_k + proc_control_B.Ns) + 1] =
            proc_control_B.ywt[proc_control_B.ibmat];
        }

        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.Ns]
          = proc_control_B.mvwt[proc_control_B.ibmat];
        proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.Ns]
          = proc_control_B.dmwwt[proc_control_B.ibmat];
        proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.mvmin[proc_control_B.ibmat];
        proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.mvmax[proc_control_B.ibmat];
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 9; proc_control_B.b_k
             ++) {
          proc_control_B.i_f = (proc_control_B.b_k + proc_control_B.Ns) + 1;
          proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.i_f]
            = proc_control_B.mvwt[proc_control_B.ibmat];
          proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.i_f]
            = proc_control_B.dmwwt[proc_control_B.ibmat];
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.i_f]
            = proc_control_B.mvmin[proc_control_B.ibmat];
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.i_f]
            = proc_control_B.mvmax[proc_control_B.ibmat];
        }

        proc_control_B.Ns += 10;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.b_utarget[proc_control_B.Ns] = (rtMinusInf);
        proc_control_B.dv7[proc_control_B.Ns] = (rtInf);
      }

      proc_control_getUBounds(proc_control_DW.Delay_DSTATE_pp,
        proc_control_B.CostFcn_workspace_runtimedata.MVMin,
        proc_control_B.CostFcn_workspace_runtimedata.MVMax,
        proc_control_B.b_utarget, proc_control_B.dv7, proc_control_B.A_data,
        proc_control_B.A_size, proc_control_B.B_data_i, proc_control_B.g_size);
      std::memcpy(&proc_control_B.CostFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      proc_control_B.CostFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.StateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.StateMax[proc_control_B.Ns]
          = (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.x[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.ref[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.ref[0], 130U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.OutputWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVWeights[0],
                  80U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVRateWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[0],
                  80U * sizeof(real_T));
      proc_control_B.ConFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.ConFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.StateMin[proc_control_B.Ns] =
          (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.StateMax[proc_control_B.Ns] =
          (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.ConFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      proc_control_B.expl_temp.PassivityUsePredictedX = true;
      proc_control_B.expl_temp.OutputPassivityIndex = 0.1;
      proc_control_B.expl_temp.InputPassivityIndex = 0.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.expl_temp.MVIndex[proc_control_B.Ns] = static_cast<real_T>
          (proc_control_B.Ns) + 1.0;
      }

      proc_control_B.expl_temp.NumOfInputs = 8.0;
      proc_control_B.expl_temp.NumOfOutputs = 13.0;
      proc_control_B.expl_temp.NumOfStates = 13.0;
      proc_control_B.expl_temp.PredictionHorizon = 10.0;
      std::memset(&proc_control_B.expl_temp.MVTarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.References[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.ref[0], 130U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.LastMV[0],
                  &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.expl_temp.CurrentStates[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      proc_control_B.expl_temp.Ts = 0.1;
      proc_control_B.expl_temp_l.PassivityUsePredictedX = true;
      proc_control_B.expl_temp_l.OutputPassivityIndex = 0.1;
      proc_control_B.expl_temp_l.InputPassivityIndex = 0.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.expl_temp_l.MVIndex[proc_control_B.Ns] =
          static_cast<real_T>(proc_control_B.Ns) + 1.0;
      }

      proc_control_B.expl_temp_l.NumOfInputs = 8.0;
      proc_control_B.expl_temp_l.NumOfOutputs = 13.0;
      proc_control_B.expl_temp_l.NumOfStates = 13.0;
      proc_control_B.expl_temp_l.PredictionHorizon = 10.0;
      std::memset(&proc_control_B.expl_temp_l.MVTarget[0], 0, 80U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.expl_temp_l.References[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.ref[0], 130U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp_l.LastMV[0],
                  &proc_control_DW.Delay_DSTATE_pp[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.expl_temp_l.CurrentStates[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      proc_control_B.expl_temp_l.Ts = 0.1;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f
             ++) {
          proc_control_B.rseq_p[proc_control_B.i_f + proc_control_B.Ns] =
            proc_control_B.Selector_m[proc_control_B.b_k + proc_control_B.ibmat];
          proc_control_B.b_k += 9;
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.rseq_p[proc_control_B.ibmat + 117] =
          proc_control_B.Selector_m[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.b_k = 0;
        for (proc_control_B.i_f = 0; proc_control_B.i_f < 9; proc_control_B.i_f
             ++) {
          proc_control_B.b_utarget[proc_control_B.b_k + proc_control_B.ibmat] =
            proc_control_B.Selector1_h[proc_control_B.i_f + proc_control_B.Ns];
          proc_control_B.b_k += 8;
        }

        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.b_utarget[proc_control_B.ibmat + 72] =
          proc_control_B.Selector1_h[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.Product_al = 0.0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 80; proc_control_B.b_k
             ++) {
          proc_control_B.Product_al += static_cast<real_T>
            (a[proc_control_B.ibmat + proc_control_B.Ns]) *
            proc_control_B.b_utarget[proc_control_B.b_k];
          proc_control_B.ibmat += 8;
        }

        proc_control_B.mv[proc_control_B.Ns] = proc_control_B.Product_al;
      }

      std::memcpy(&proc_control_B.rtb_Selector_m_l[0], &proc_control_B.rseq_p[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.rtb_Selector_m_l[130], &proc_control_B.mv[0],
                  sizeof(real_T) << 3U);
      proc_control_B.rtb_Selector_m_l[138] = proc_control_DW.slack_delay_DSTATE;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.dv5[proc_control_B.Ns] = (rtMinusInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv5[proc_control_B.Ns + 130] = (rtMinusInf);
      }

      proc_control_B.dv5[138] = 0.0;
      proc_control_fmincon(&proc_control_B.CostFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp,
                           proc_control_B.rtb_Selector_m_l,
                           proc_control_B.A_data, proc_control_B.B_data_i,
                           proc_control_B.g_size, proc_control_B.dv5,
                           &proc_control_B.ConFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp_l, proc_control_B.z,
                           &proc_control_B.Product3_dy, &proc_control_B.d_a,
                           &proc_control_B.Product1_fr,
                           &proc_control_B.Product_al, expl_temp,
                           &proc_control_B.Product2_al, &proc_control_B.t6,
                           &proc_control_B.oa, &proc_control_B.ob);
      if ((proc_control_B.d_a == 0.0) && (proc_control_B.Product2_al > 0.02)) {
        proc_control_B.d_a = -2.0;
      }

      // Update for Delay: '<S218>/slack_delay' incorporates:
      //   MATLAB Function: '<S217>/NLMPC'
      //   Reshape: '<S217>/Reshape'

      proc_control_getXUe(proc_control_B.z,
                          proc_control_B.CostFcn_workspace_runtimedata.x,
                          proc_control_B.Y, proc_control_B.U,
                          &proc_control_DW.slack_delay_DSTATE);

      // MATLAB Function: '<S217>/NLMPC' incorporates:
      //   Delay: '<S144>/Delay'

      if (proc_control_B.d_a > 0.0) {
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          proc_control_B.mv[proc_control_B.ibmat] =
            proc_control_B.U[proc_control_B.Ns];
          proc_control_B.Ns += 11;
        }
      } else {
        std::memcpy(&proc_control_B.mv[0], &proc_control_DW.Delay_DSTATE_pp[0],
                    sizeof(real_T) << 3U);
      }

      // DataTypeConversion: '<S144>/Data Type Conversion' incorporates:
      //   MATLAB Function: '<S217>/NLMPC'

      proc_control_B.rtb_sincos_o2_i = std::floor(proc_control_B.d_a);
      if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
          (proc_control_B.rtb_sincos_o2_i)) {
        proc_control_B.rtb_sincos_o2_i = 0.0;
      } else {
        proc_control_B.rtb_sincos_o2_i = std::fmod
          (proc_control_B.rtb_sincos_o2_i, 256.0);
      }

      // Merge generated from: '<S137>/Merge' incorporates:
      //   DataTypeConversion: '<S144>/Data Type Conversion'
      //   SignalConversion generated from: '<S144>/Out'

      proc_control_B.MpcStatus = static_cast<int8_T>
        (proc_control_B.rtb_sincos_o2_i < 0.0 ? static_cast<int32_T>(
          static_cast<int8_T>(-static_cast<int8_T>(static_cast<uint8_T>
            (-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
          static_cast<int8_T>(static_cast<uint8_T>
           (proc_control_B.rtb_sincos_o2_i))));

      // Merge generated from: '<S137>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S144>/Pulse Generator'

      proc_control_B.Product3_dy = (proc_control_DW.clockTickCounter <
        proc_control_P.PulseGenerator_Duty_c) &&
        (proc_control_DW.clockTickCounter >= 0) ?
        proc_control_P.PulseGenerator_Amp_n : 0.0;

      // DiscretePulseGenerator: '<S144>/Pulse Generator'
      if (proc_control_DW.clockTickCounter >=
          proc_control_P.PulseGenerator_Period_f - 1.0) {
        proc_control_DW.clockTickCounter = 0;
      } else {
        proc_control_DW.clockTickCounter++;
      }

      // Update for Delay: '<S144>/Delay'
      std::memcpy(&proc_control_DW.Delay_DSTATE_pp[0], &proc_control_B.mv[0],
                  sizeof(real_T) << 3U);

      // Update for Delay: '<S218>/mv_Delay' incorporates:
      //   MATLAB Function: '<S217>/NLMPC'

      proc_control_DW.icLoad = false;
      std::memcpy(&proc_control_DW.mv_Delay_DSTATE[0], &proc_control_B.U[0], 88U
                  * sizeof(real_T));

      // Update for Delay: '<S218>/x_Delay' incorporates:
      //   MATLAB Function: '<S217>/NLMPC'

      proc_control_DW.icLoad_g = false;
      std::memcpy(&proc_control_DW.x_Delay_DSTATE[0], &proc_control_B.Y[0], 143U
                  * sizeof(real_T));

      // Update for Delay: '<S218>/slack_delay'
      proc_control_DW.icLoad_o = false;

      // End of Outputs for SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     default:
      // Outputs for IfAction SubSystem: '<S137>/If Action Subsystem3' incorporates:
      //   ActionPort: '<S143>/Action Port'

      // Merge generated from: '<S137>/Merge' incorporates:
      //   Constant: '<S143>/Constant1'
      //   SignalConversion generated from: '<S143>/Constant1'

      proc_control_B.MpcStatus = proc_control_P.Constant1_Value_j;

      // Merge generated from: '<S137>/Merge' incorporates:
      //   Constant: '<S143>/Constant2'
      //   SignalConversion generated from: '<S143>/Constant2'

      proc_control_B.Product3_dy = proc_control_P.Constant2_Value_n;

      // Merge generated from: '<S137>/Merge' incorporates:
      //   Constant: '<S143>/Constant'
      //   SignalConversion generated from: '<S143>/Constant'

      std::memcpy(&proc_control_B.mv[0], &proc_control_P.Constant_Value_g3b[0],
                  sizeof(real_T) << 3U);

      // End of Outputs for SubSystem: '<S137>/If Action Subsystem3'
      break;
    }

    // DataTypeConversion: '<S139>/Data Type Conversion' incorporates:
    //   Delay: '<S139>/Delay'
    //   Sum: '<S139>/Sum'

    proc_control_B.isMpcAlive = (proc_control_DW.Delay_DSTATE_p -
      proc_control_B.Product3_dy != 0.0);

    // Switch: '<S244>/Switch2' incorporates:
    //   MATLABSystem: '<S138>/MATLAB System'
    //   Math: '<S139>/Transpose'
    //   RelationalOperator: '<S244>/LowerRelop1'

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      // Math: '<S139>/Transpose'
      proc_control_B.Product_al = proc_control_B.mv[proc_control_B.Ns];

      // RelationalOperator: '<S244>/LowerRelop1' incorporates:
      //   MATLABSystem: '<S138>/MATLAB System'
      //   Math: '<S139>/Transpose'

      proc_control_B.ob = proc_control_B.mvmax[proc_control_B.Ns];
      if (proc_control_B.Product_al > proc_control_B.ob) {
        // Switch: '<S244>/Switch2'
        proc_control_B.mv[proc_control_B.Ns] = proc_control_B.ob;
      } else {
        // RelationalOperator: '<S244>/UpperRelop' incorporates:
        //   MATLABSystem: '<S138>/MATLAB System'

        proc_control_B.ob = proc_control_B.mvmin[proc_control_B.Ns];

        // Switch: '<S244>/Switch' incorporates:
        //   MATLABSystem: '<S138>/MATLAB System'
        //   RelationalOperator: '<S244>/UpperRelop'

        if (proc_control_B.Product_al < proc_control_B.ob) {
          // Switch: '<S244>/Switch2'
          proc_control_B.mv[proc_control_B.Ns] = proc_control_B.ob;
        }

        // End of Switch: '<S244>/Switch'
      }
    }

    // End of Switch: '<S244>/Switch2'

    // Lookup_n-D: '<S139>/N to A' incorporates:
    //   Switch: '<S244>/Switch2'

    for (proc_control_B.base_index = 0; proc_control_B.base_index < 8;
         proc_control_B.base_index++) {
      proc_control_B.len = plook_u32d_binckpang
        (proc_control_B.mv[proc_control_B.base_index], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex[proc_control_B.base_index]);
      proc_control_B.current[proc_control_B.base_index] =
        proc_control_P.A[proc_control_B.len];
    }

    // Lookup_n-D: '<S139>/n-D Lookup Table1' incorporates:
    //   Switch: '<S244>/Switch2'

    for (proc_control_B.base_index = 0; proc_control_B.base_index < 8;
         proc_control_B.base_index++) {
      proc_control_B.len = plook_u32d_binckpang
        (proc_control_B.mv[proc_control_B.base_index], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_o[proc_control_B.base_index]);
      proc_control_B.pwm[proc_control_B.base_index] =
        proc_control_P.PWM[proc_control_B.len];
    }

    // Update for Delay: '<S8>/Delay' incorporates:
    //   Lookup_n-D: '<S139>/N to A'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_DW.Delay_DSTATE_m0[proc_control_B.i] =
        proc_control_B.current[proc_control_B.i];
    }

    // End of Update for Delay: '<S8>/Delay'

    // Update for Delay: '<S139>/Delay'
    proc_control_DW.Delay_DSTATE_p = proc_control_B.Product3_dy;

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
  }

  // Outputs for Enabled SubSystem: '<Root>/Enabled Subsystem1' incorporates:
  //   EnablePort: '<S2>/Enable'

  // Start for MATLABSystem: '<S114>/MATLAB System' incorporates:
  //   Constant: '<S23>/Constant'
  //   Constant: '<S23>/Constant1'
  //   Constant: '<S23>/Constant3'
  //   Constant: '<S23>/Constant4'
  //   MATLAB Function: '<S29>/MATLAB Function'
  //   MATLABSystem: '<S58>/SourceBlock'
  //
  if (proc_control_DW.obj_i.m_notDryRun > 0.0) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // BusAssignment: '<S2>/Bus Assignment'
      proc_control_B.BusAssignment_p.motor1 = proc_control_B.pwm[0];
      proc_control_B.BusAssignment_p.motor2 = proc_control_B.pwm[1];
      proc_control_B.BusAssignment_p.motor3 = proc_control_B.pwm[2];
      proc_control_B.BusAssignment_p.motor4 = proc_control_B.pwm[3];
      proc_control_B.BusAssignment_p.motor5 = proc_control_B.pwm[4];
      proc_control_B.BusAssignment_p.motor6 = proc_control_B.pwm[5];
      proc_control_B.BusAssignment_p.motor7 = proc_control_B.pwm[6];
      proc_control_B.BusAssignment_p.motor8 = proc_control_B.pwm[7];

      // MATLABSystem: '<S21>/SinkBlock'
      Pub_proc_control_1380.publish(&proc_control_B.BusAssignment_p);

      // DataTypeConversion: '<S2>/Data Type Conversion' incorporates:
      //   Switch: '<S244>/Switch2'

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.rtb_sincos_o2_i = std::floor
          (proc_control_B.mv[proc_control_B.i]);
        if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
            (proc_control_B.rtb_sincos_o2_i)) {
          proc_control_B.rtb_sincos_o2_i = 0.0;
        } else {
          proc_control_B.rtb_sincos_o2_i = std::fmod
            (proc_control_B.rtb_sincos_o2_i, 65536.0);
        }

        proc_control_B.current[proc_control_B.i] = static_cast<uint16_T>
          (proc_control_B.rtb_sincos_o2_i < 0.0 ? static_cast<int32_T>(
            static_cast<uint16_T>(-static_cast<int16_T>(static_cast<uint16_T>
              (-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
            static_cast<uint16_T>(proc_control_B.rtb_sincos_o2_i)));
      }

      // End of DataTypeConversion: '<S2>/Data Type Conversion'

      // BusAssignment: '<S2>/Bus Assignment1'
      proc_control_B.BusAssignment1.motor1 = proc_control_B.current[0];
      proc_control_B.BusAssignment1.motor2 = proc_control_B.current[1];
      proc_control_B.BusAssignment1.motor3 = proc_control_B.current[2];
      proc_control_B.BusAssignment1.motor4 = proc_control_B.current[3];
      proc_control_B.BusAssignment1.motor5 = proc_control_B.current[4];
      proc_control_B.BusAssignment1.motor6 = proc_control_B.current[5];
      proc_control_B.BusAssignment1.motor7 = proc_control_B.current[6];
      proc_control_B.BusAssignment1.motor8 = proc_control_B.current[7];

      // MATLABSystem: '<S22>/SinkBlock'
      Pub_proc_control_1386.publish(&proc_control_B.BusAssignment1);
    }

    // BusAssignment: '<S23>/Bus Assignment' incorporates:
    //   Constant: '<S24>/Constant'

    proc_control_B.BusAssignment = proc_control_P.Constant_Value_k;

    // DataTypeConversion: '<S23>/Data Type Conversion2' incorporates:
    //   DataTypeConversion: '<S23>/Data Type Conversion1'
    //   SignalConversion generated from: '<S138>/MATLAB System'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_B.VectorConcatenate[proc_control_B.i] =
        proc_control_B.thrustersStatus[proc_control_B.i];
    }

    // End of DataTypeConversion: '<S23>/Data Type Conversion2'
    std::memcpy(&proc_control_B.VectorConcatenate[8],
                &proc_control_P.Constant_Value_e2[0], 120U * sizeof(real_T));

    // SignalConversion generated from: '<S23>/Vector Concatenate1' incorporates:
    //   Constant: '<S23>/Constant'
    //   SignalConversion generated from: '<S138>/MATLAB System'

    std::memcpy(&proc_control_B.VectorConcatenate1[0], &proc_control_B.ywt[0],
                13U * sizeof(real_T));
    std::memcpy(&proc_control_B.VectorConcatenate1[13],
                &proc_control_P.Constant1_Value_h[0], 115U * sizeof(real_T));

    // SignalConversion generated from: '<S23>/Vector Concatenate2' incorporates:
    //   Constant: '<S23>/Constant1'
    //   SignalConversion generated from: '<S138>/MATLAB System'

    std::memcpy(&proc_control_B.VectorConcatenate2[0], &proc_control_B.mvwt[0],
                sizeof(real_T) << 3U);
    std::memcpy(&proc_control_B.VectorConcatenate2[8],
                &proc_control_P.Constant3_Value[0], 120U * sizeof(real_T));

    // SignalConversion generated from: '<S23>/Vector Concatenate3' incorporates:
    //   Constant: '<S23>/Constant3'
    //   SignalConversion generated from: '<S138>/MATLAB System'

    std::memcpy(&proc_control_B.VectorConcatenate3[0], &proc_control_B.dmwwt[0],
                sizeof(real_T) << 3U);
    std::memcpy(&proc_control_B.VectorConcatenate3[8],
                &proc_control_P.Constant4_Value[0], 120U * sizeof(real_T));

    // BusAssignment: '<S23>/Bus Assignment' incorporates:
    //   Concatenate: '<S23>/Vector Concatenate'
    //   Constant: '<S23>/Constant2'
    //   Constant: '<S23>/Constant4'
    //   Constant: '<S23>/Constant5'
    //   Constant: '<S23>/Constant6'
    //   Constant: '<S23>/Constant7'
    //   DataTypeConversion: '<S23>/Data Type Conversion'

    proc_control_B.BusAssignment.target_reached = rtb_Reset;
    proc_control_B.BusAssignment.is_trajectory_done = rtb_NewDvlMsg;
    proc_control_B.BusAssignment.mpc_mode = mode;
    proc_control_B.BusAssignment.is_mpc_alive = proc_control_B.isMpcAlive;
    proc_control_B.BusAssignment.thrusters_status_SL_Info.CurrentLength =
      proc_control_P.Constant2_Value_l;
    proc_control_B.BusAssignment.mpc_status = proc_control_B.MpcStatus;
    proc_control_B.BusAssignment.current_gains.ov_SL_Info.CurrentLength =
      proc_control_P.Constant5_Value;
    proc_control_B.BusAssignment.current_gains.mv_SL_Info.CurrentLength =
      proc_control_P.Constant6_Value;
    for (proc_control_B.i = 0; proc_control_B.i < 128; proc_control_B.i++) {
      proc_control_B.BusAssignment.thrusters_status[proc_control_B.i] =
        (proc_control_B.VectorConcatenate[proc_control_B.i] != 0.0);
      proc_control_B.BusAssignment.current_gains.ov[proc_control_B.i] =
        proc_control_B.VectorConcatenate1[proc_control_B.i];
      proc_control_B.BusAssignment.current_gains.mv[proc_control_B.i] =
        proc_control_B.VectorConcatenate2[proc_control_B.i];
      proc_control_B.BusAssignment.current_gains.mvr[proc_control_B.i] =
        proc_control_B.VectorConcatenate3[proc_control_B.i];
    }

    proc_control_B.BusAssignment.current_gains.mvr_SL_Info.CurrentLength =
      proc_control_P.Constant7_Value;

    // MATLABSystem: '<S25>/SinkBlock'
    Pub_proc_control_1430.publish(&proc_control_B.BusAssignment);
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // SignalConversion generated from: '<S2>/thrust' incorporates:
      //   SignalConversion generated from: '<S2>/mv'
      //   Switch: '<S244>/Switch2'

      std::memcpy(&proc_control_B.BufferToMakeInportVirtual_Inser[0],
                  &proc_control_B.mv[0], sizeof(real_T) << 3U);
      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        // SignalConversion generated from: '<S2>/mv' incorporates:
        //   Lookup_n-D: '<S139>/n-D Lookup Table1'

        proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i] =
          proc_control_B.pwm[proc_control_B.i];
      }
    }
  }

  // End of Outputs for SubSystem: '<Root>/Enabled Subsystem1'

  // Outputs for Enabled SubSystem: '<Root>/Model System' incorporates:
  //   EnablePort: '<S3>/Enable'

  if (proc_control_DW.obj_i.m_simulation > 0.0) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S26>/MATLAB Function' incorporates:
      //   SignalConversion generated from: '<S2>/mv'

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.pwm[proc_control_B.i] =
          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i];
      }

      if (proc_control_B.BufferToMakeInportVirtual_Ins_e[0] < 1100) {
        proc_control_B.pwm[0] = 1500U;
      } else if (proc_control_B.BufferToMakeInportVirtual_Ins_e[0] > 1900) {
        proc_control_B.pwm[0] = 1500U;
      }

      // End of MATLAB Function: '<S26>/MATLAB Function'

      // Lookup_n-D: '<S26>/PWN to N'
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 8;
           proc_control_B.base_index++) {
        proc_control_B.PWNtoN[proc_control_B.base_index] =
          proc_control_P.N[plook_u32u16_binckan
          (proc_control_B.pwm[proc_control_B.base_index], proc_control_P.PWM,
           200U)];
      }

      // DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp = (proc_control_B.PWNtoN[0] -
        proc_control_P.DiscreteTransferFcn_DenCoef[1] *
        proc_control_DW.DiscreteTransferFcn_states) /
        proc_control_P.DiscreteTransferFcn_DenCoef[0];

      // DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn =
        proc_control_P.DiscreteTransferFcn_NumCoef[0] *
        proc_control_DW.DiscreteTransferFcn_tmp +
        proc_control_P.DiscreteTransferFcn_NumCoef[1] *
        proc_control_DW.DiscreteTransferFcn_states;

      // DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_o = (proc_control_B.PWNtoN[1] -
        proc_control_P.DiscreteTransferFcn_DenCoef_n[1] *
        proc_control_DW.DiscreteTransferFcn_states_k) /
        proc_control_P.DiscreteTransferFcn_DenCoef_n[0];

      // DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_o =
        proc_control_P.DiscreteTransferFcn_NumCoef_e[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_o +
        proc_control_P.DiscreteTransferFcn_NumCoef_e[1] *
        proc_control_DW.DiscreteTransferFcn_states_k;

      // DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_d = (proc_control_B.PWNtoN[2] -
        proc_control_P.DiscreteTransferFcn_DenCoef_j[1] *
        proc_control_DW.DiscreteTransferFcn_states_p) /
        proc_control_P.DiscreteTransferFcn_DenCoef_j[0];

      // DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_i =
        proc_control_P.DiscreteTransferFcn_NumCoef_h[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_d +
        proc_control_P.DiscreteTransferFcn_NumCoef_h[1] *
        proc_control_DW.DiscreteTransferFcn_states_p;

      // DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_h = (proc_control_B.PWNtoN[3] -
        proc_control_P.DiscreteTransferFcn_DenCoef_i[1] *
        proc_control_DW.DiscreteTransferFcn_states_f) /
        proc_control_P.DiscreteTransferFcn_DenCoef_i[0];

      // DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_e =
        proc_control_P.DiscreteTransferFcn_NumCoef_a[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_h +
        proc_control_P.DiscreteTransferFcn_NumCoef_a[1] *
        proc_control_DW.DiscreteTransferFcn_states_f;

      // DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_c = (proc_control_B.PWNtoN[4] -
        proc_control_P.DiscreteTransferFcn_DenCoef_g[1] *
        proc_control_DW.DiscreteTransferFcn_states_e) /
        proc_control_P.DiscreteTransferFcn_DenCoef_g[0];

      // DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_m =
        proc_control_P.DiscreteTransferFcn_NumCoef_k[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_c +
        proc_control_P.DiscreteTransferFcn_NumCoef_k[1] *
        proc_control_DW.DiscreteTransferFcn_states_e;

      // DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_j = (proc_control_B.PWNtoN[5] -
        proc_control_P.DiscreteTransferFcn_DenCoef_b[1] *
        proc_control_DW.DiscreteTransferFcn_states_m) /
        proc_control_P.DiscreteTransferFcn_DenCoef_b[0];

      // DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_a =
        proc_control_P.DiscreteTransferFcn_NumCoef_kp[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_j +
        proc_control_P.DiscreteTransferFcn_NumCoef_kp[1] *
        proc_control_DW.DiscreteTransferFcn_states_m;

      // DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_jr = (proc_control_B.PWNtoN[6] -
        proc_control_P.DiscreteTransferFcn_DenCoef_c[1] *
        proc_control_DW.DiscreteTransferFcn_states_l) /
        proc_control_P.DiscreteTransferFcn_DenCoef_c[0];

      // DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_j =
        proc_control_P.DiscreteTransferFcn_NumCoef_ke[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_jr +
        proc_control_P.DiscreteTransferFcn_NumCoef_ke[1] *
        proc_control_DW.DiscreteTransferFcn_states_l;

      // DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_tmp_hn = (proc_control_B.PWNtoN[7] -
        proc_control_P.DiscreteTransferFcn_DenCoef_ig[1] *
        proc_control_DW.DiscreteTransferFcn_states_px) /
        proc_control_P.DiscreteTransferFcn_DenCoef_ig[0];

      // DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      proc_control_B.DiscreteTransferFcn_h =
        proc_control_P.DiscreteTransferFcn_NumCoef_j[0] *
        proc_control_DW.DiscreteTransferFcn_tmp_hn +
        proc_control_P.DiscreteTransferFcn_NumCoef_j[1] *
        proc_control_DW.DiscreteTransferFcn_states_px;
    }

    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // UniformRandomNumber: '<S27>/Drift' incorporates:
      //   DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      //   Lookup_n-D: '<S139>/N to A'
      //   Lookup_n-D: '<S139>/n-D Lookup Table1'
      //   Lookup_n-D: '<S26>/PWN to N'
      //   Lookup_n-D: '<S32>/N to RPM'
      //   Trigonometry: '<S275>/sincos'
      //   Trigonometry: '<S55>/sincos'
      //
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 6;
           proc_control_B.base_index++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
        //   EnablePort: '<S246>/Enable'

        // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S274>/Enable'

        proc_control_B.Drift[proc_control_B.base_index] =
          proc_control_DW.Drift_NextOutput[proc_control_B.base_index];

        // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/DVL Measurements'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Switch: '<S27>/Switch' incorporates:
    //   Constant: '<Root>/Constant'
    //   Constant: '<S27>/Constant2'
    //   Product: '<S27>/Product1'
    //   Sin: '<S27>/Sine Wave'
    //   Sum: '<S27>/Sum1'

    if (proc_control_P.Constant_Value_pz > proc_control_P.Switch_Threshold) {
      // Sum: '<S27>/Sum' incorporates:
      //   Constant: '<S27>/Constant'
      //   Constant: '<S27>/Constant1'
      //   Product: '<S27>/Product'
      //   UnitDelay: '<S3>/Unit Delay'

      proc_control_B.Product3_dy = proc_control_DW.UnitDelay_DSTATE[2] *
        proc_control_P.Constant_Value_pr + proc_control_P.Constant1_Value_m;

      // Saturate: '<S27>/Saturation'
      if (proc_control_B.Product3_dy > proc_control_P.Saturation_UpperSat) {
        proc_control_B.Product3_dy = proc_control_P.Saturation_UpperSat;
      } else if (proc_control_B.Product3_dy < proc_control_P.Saturation_LowerSat)
      {
        proc_control_B.Product3_dy = proc_control_P.Saturation_LowerSat;
      }

      // End of Saturate: '<S27>/Saturation'
      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TSamp[proc_control_B.i] = (std::sin((static_cast<real_T>
          (proc_control_DW.counter[proc_control_B.i]) +
          proc_control_P.SineWave_Offset[proc_control_B.i]) * 2.0 *
          3.1415926535897931 /
          proc_control_P.waveDiscreteFrequency[proc_control_B.i]) *
          proc_control_P.SineWave_Amp[proc_control_B.i] +
          proc_control_P.SineWave_Bias) * proc_control_B.Product3_dy +
          proc_control_B.Drift[proc_control_B.i];
      }
    } else {
      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TSamp[proc_control_B.i] =
          proc_control_P.Constant2_Value[proc_control_B.i];
      }
    }

    // End of Switch: '<S27>/Switch'

    // MATLABSystem: '<S3>/MATLAB System' incorporates:
    //   BusCreator: '<S116>/Bus Creator'

    //  Step fonction
    // ------------------------------------------------------------------------------ 
    //  Implement algorithm. Calculate y as a function of input u and
    //  discrete states.
    //  check if block need to be init
    //  fonction qui initialise les constante mec
    // ------------------------------------------------------------------------------ 
    if (!proc_control_DW.obj_f.init) {
      proc_control_DW.obj_f.constValues[0] = proc_control_B.BusCreator.mass;
      proc_control_DW.obj_f.constValues[1] = proc_control_B.BusCreator.volume;
      proc_control_DW.obj_f.constValues[2] =
        proc_control_B.BusCreator.sub_height;
      std::memcpy(&proc_control_DW.obj_f.constValues[3],
                  &proc_control_B.BusCreator.I[0], 9U * sizeof(real_T));
      proc_control_DW.obj_f.constValues[12] = proc_control_B.BusCreator.rg[0];
      proc_control_DW.obj_f.constValues[15] = proc_control_B.BusCreator.rb[0];
      proc_control_DW.obj_f.constValues[13] = proc_control_B.BusCreator.rg[1];
      proc_control_DW.obj_f.constValues[16] = proc_control_B.BusCreator.rb[1];
      proc_control_DW.obj_f.constValues[14] = proc_control_B.BusCreator.rg[2];
      proc_control_DW.obj_f.constValues[17] = proc_control_B.BusCreator.rb[2];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_DW.obj_f.constValues[proc_control_B.Ns + 18] =
          proc_control_B.BusCreator.cdl[proc_control_B.Ns];
        proc_control_DW.obj_f.constValues[proc_control_B.Ns + 24] =
          proc_control_B.BusCreator.cdq[proc_control_B.Ns];
        proc_control_DW.obj_f.constValues[proc_control_B.Ns + 30] =
          proc_control_B.BusCreator.added_mass[proc_control_B.Ns];
      }

      proc_control_DW.obj_f.constValues[36] = proc_control_B.BusCreator.rho;
      proc_control_DW.obj_f.constValues[37] = proc_control_B.BusCreator.g;

      //  Fonction qui genere la matrice B
      // ------------------------------------------------------------------------------ 
      //  Crée la matrice thrusters
      //  prendre la matrice M
      // AUVModelMatrices
      //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
      //     This function was generated by the Symbolic Math Toolbox version 9.1. 
      //     12-Jul-2022 16:58:53
      //  M inverse * Tm
      proc_control_DW.obj_f.init = true;
    }

    // SignalConversion generated from: '<S3>/MATLAB System'
    proc_control_B.dv21[0] = proc_control_B.DiscreteTransferFcn;
    proc_control_B.dv21[1] = proc_control_B.DiscreteTransferFcn_o;
    proc_control_B.dv21[2] = proc_control_B.DiscreteTransferFcn_i;
    proc_control_B.dv21[3] = proc_control_B.DiscreteTransferFcn_e;
    proc_control_B.dv21[4] = proc_control_B.DiscreteTransferFcn_m;
    proc_control_B.dv21[5] = proc_control_B.DiscreteTransferFcn_a;
    proc_control_B.dv21[6] = proc_control_B.DiscreteTransferFcn_j;
    proc_control_B.dv21[7] = proc_control_B.DiscreteTransferFcn_h;

    // MATLABSystem: '<S3>/MATLAB System' incorporates:
    //   UnitDelay: '<S3>/Unit Delay'

    proc_co_AUV8QuatPerturbedSimFcn(proc_control_DW.UnitDelay_DSTATE,
      proc_control_B.TSamp, proc_control_B.dv21, proc_control_B.imvec);

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:
    //   Constant: '<S30>/Constant'
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    //  legacy
    if (proc_control_DW.DiscreteTimeIntegrator_IC_LOADI != 0) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[0] =
        proc_control_P.Constant_Value_j2[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[1] =
        proc_control_P.Constant_Value_j2[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[2] =
        proc_control_DW.obj_i.m_initCond[2];
    }

    if ((proc_control_DW.obj_i.m_reset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[0] =
        proc_control_P.Constant_Value_j2[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[1] =
        proc_control_P.Constant_Value_j2[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[2] =
        proc_control_DW.obj_i.m_initCond[2];
    }

    proc_control_B.rtb_sincos_o1_idx_2 =
      proc_control_P.DiscreteTimeIntegrator_gainval * proc_control_B.imvec[0];
    proc_control_B.v[0] = proc_control_B.rtb_sincos_o1_idx_2;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
    proc_control_B.WorldPosition[0] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[0] +
      proc_control_B.rtb_sincos_o1_idx_2;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.rtb_sincos_o1_idx_2 =
      proc_control_P.DiscreteTimeIntegrator_gainval * proc_control_B.imvec[1];
    proc_control_B.v[1] = proc_control_B.rtb_sincos_o1_idx_2;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
    proc_control_B.WorldPosition[1] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[1] +
      proc_control_B.rtb_sincos_o1_idx_2;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.rtb_sincos_o1_idx_2 =
      proc_control_P.DiscreteTimeIntegrator_gainval * proc_control_B.imvec[2];

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
    proc_control_B.WorldPosition[2] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[2] +
      proc_control_B.rtb_sincos_o1_idx_2;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    if (proc_control_DW.DiscreteTimeIntegrator1_IC_LOAD != 0) {
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
        proc_control_DW.obj_i.m_initCond[3];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
        proc_control_DW.obj_i.m_initCond[4];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
        proc_control_DW.obj_i.m_initCond[5];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[3] =
        proc_control_DW.obj_i.m_initCond[6];
    }

    if ((proc_control_DW.obj_i.m_reset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator1_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
        proc_control_DW.obj_i.m_initCond[3];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
        proc_control_DW.obj_i.m_initCond[4];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
        proc_control_DW.obj_i.m_initCond[5];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[3] =
        proc_control_DW.obj_i.m_initCond[6];
    }

    proc_control_B.t62 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.imvec[3];
    proc_control_B.n[0] = proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'
    proc_control_B.TmpSignalConversionAtSFunct[0] =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] + proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.t62 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.imvec[4];
    proc_control_B.n[1] = proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'
    proc_control_B.TmpSignalConversionAtSFunct[1] =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] + proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.t62 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.imvec[5];
    proc_control_B.n[2] = proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'
    proc_control_B.TmpSignalConversionAtSFunct[2] =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] + proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.t62 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.imvec[6];

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'
    proc_control_B.TmpSignalConversionAtSFunct[3] =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[3] + proc_control_B.t62;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' incorporates:
    //   Constant: '<S3>/Initial Body Velocity'
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    if ((proc_control_DW.obj_i.m_reset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator2_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_P.InitialBodyVelocity_Value[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_P.InitialBodyVelocity_Value[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_P.InitialBodyVelocity_Value[2];
    }

    proc_control_B.rtb_sincos_o2_m =
      proc_control_P.DiscreteTimeIntegrator2_gainval * proc_control_B.imvec[7];
    proc_control_B.c_idx_0 = proc_control_B.rtb_sincos_o2_m;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] +=
      proc_control_B.rtb_sincos_o2_m;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.rtb_sincos_o2_m =
      proc_control_P.DiscreteTimeIntegrator2_gainval * proc_control_B.imvec[8];
    proc_control_B.Divide3 = proc_control_B.rtb_sincos_o2_m;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] +=
      proc_control_B.rtb_sincos_o2_m;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.rtb_sincos_o2_m =
      proc_control_P.DiscreteTimeIntegrator2_gainval * proc_control_B.imvec[9];

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] +=
      proc_control_B.rtb_sincos_o2_m;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S3>/Initial Angular Rates'
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    if ((proc_control_DW.obj_i.m_reset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator3_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
        proc_control_P.InitialAngularRates_Value[0];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
        proc_control_P.InitialAngularRates_Value[1];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
        proc_control_P.InitialAngularRates_Value[2];
    }

    proc_control_B.rtb_sincos_o1_idx_1 =
      proc_control_P.DiscreteTimeIntegrator3_gainval * proc_control_B.imvec[10];
    proc_control_B.t39 = proc_control_B.rtb_sincos_o1_idx_1;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] +=
      proc_control_B.rtb_sincos_o1_idx_1;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.rtb_sincos_o1_idx_1 =
      proc_control_P.DiscreteTimeIntegrator3_gainval * proc_control_B.imvec[11];
    proc_control_B.t40 = proc_control_B.rtb_sincos_o1_idx_1;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] +=
      proc_control_B.rtb_sincos_o1_idx_1;

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S3>/MATLAB System'
    //
    proc_control_B.rtb_sincos_o1_idx_1 =
      proc_control_P.DiscreteTimeIntegrator3_gainval * proc_control_B.imvec[12];

    // DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] +=
      proc_control_B.rtb_sincos_o1_idx_1;
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // BusAssignment: '<S32>/Bus Assignment' incorporates:
      //   Constant: '<S41>/Constant'

      proc_control_B.BusAssignment_a = proc_control_P.Constant_Value_c;

      // SignalConversion generated from: '<S32>/N to RPM'
      proc_control_B.PWNtoN[0] = proc_control_B.DiscreteTransferFcn;
      proc_control_B.PWNtoN[1] = proc_control_B.DiscreteTransferFcn_o;
      proc_control_B.PWNtoN[2] = proc_control_B.DiscreteTransferFcn_i;
      proc_control_B.PWNtoN[3] = proc_control_B.DiscreteTransferFcn_e;
      proc_control_B.PWNtoN[4] = proc_control_B.DiscreteTransferFcn_m;
      proc_control_B.PWNtoN[5] = proc_control_B.DiscreteTransferFcn_a;
      proc_control_B.PWNtoN[6] = proc_control_B.DiscreteTransferFcn_j;
      proc_control_B.PWNtoN[7] = proc_control_B.DiscreteTransferFcn_h;

      // Lookup_n-D: '<S32>/N to RPM'
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 8;
           proc_control_B.base_index++) {
        proc_control_B.len = plook_u32d_binckpan
          (proc_control_B.PWNtoN[proc_control_B.base_index], proc_control_P.N,
           200U, &proc_control_DW.m_bpIndex_oc[proc_control_B.base_index]);
        proc_control_B.rtb_sincos_o2_i = std::trunc
          (proc_control_P.RPM[proc_control_B.len]);
        if (std::isnan(proc_control_B.rtb_sincos_o2_i) || std::isinf
            (proc_control_B.rtb_sincos_o2_i)) {
          proc_control_B.rtb_sincos_o2_i = 0.0;
        } else {
          proc_control_B.rtb_sincos_o2_i = std::fmod
            (proc_control_B.rtb_sincos_o2_i, 65536.0);
        }

        proc_control_B.NtoRPM[proc_control_B.base_index] = static_cast<int16_T>
          (proc_control_B.rtb_sincos_o2_i < 0.0 ? static_cast<int32_T>(
            static_cast<int16_T>(-static_cast<int16_T>(static_cast<uint16_T>
              (-proc_control_B.rtb_sincos_o2_i)))) : static_cast<int32_T>(
            static_cast<int16_T>(static_cast<uint16_T>
             (proc_control_B.rtb_sincos_o2_i))));
      }

      // Product: '<S32>/Product' incorporates:
      //   Signum: '<S32>/Sign'

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        // Signum: '<S32>/Sign'
        proc_control_B.Product_al = proc_control_B.PWNtoN[proc_control_B.i];
        if (std::isnan(proc_control_B.Product_al)) {
          proc_control_B.rtb_sincos_o2_i = (rtNaN);
        } else if (proc_control_B.Product_al < 0.0) {
          proc_control_B.rtb_sincos_o2_i = -1.0;
        } else {
          proc_control_B.rtb_sincos_o2_i = (proc_control_B.Product_al > 0.0);
        }

        proc_control_B.rtb_sincos_o2_i *= static_cast<real_T>
          (proc_control_B.NtoRPM[proc_control_B.i]);
        if (std::isnan(proc_control_B.rtb_sincos_o2_i)) {
          proc_control_B.Ns = 0;
        } else {
          proc_control_B.Ns = static_cast<int32_T>(std::fmod
            (proc_control_B.rtb_sincos_o2_i, 65536.0));
        }

        proc_control_B.VectorConcatenate_g[proc_control_B.i] =
          static_cast<int16_T>(proc_control_B.Ns < 0 ? static_cast<int32_T>(
          static_cast<int16_T>(-static_cast<int16_T>(static_cast<uint16_T>(-
          static_cast<real_T>(proc_control_B.Ns))))) : static_cast<int32_T>(
          static_cast<int16_T>(proc_control_B.Ns)));
      }

      // End of Product: '<S32>/Product'
      std::memcpy(&proc_control_B.VectorConcatenate_g[8],
                  &proc_control_P.Constant1_Value_b[0], 120U * sizeof(int16_T));

      // BusAssignment: '<S32>/Bus Assignment' incorporates:
      //   Constant: '<S32>/Constant'
      //   Constant: '<S32>/Constant1'

      std::memcpy(&proc_control_B.BusAssignment_a.data[0],
                  &proc_control_B.VectorConcatenate_g[0], sizeof(int16_T) << 7U);
      proc_control_B.BusAssignment_a.data_SL_Info.CurrentLength =
        proc_control_P.Constant_Value_of;

      // MATLABSystem: '<S42>/SinkBlock'
      Pub_proc_control_1184.publish(&proc_control_B.BusAssignment_a);
    }

    // MATLAB Function: '<S3>/Quaternion Normalise' incorporates:
    //   Constant: '<S32>/Constant1'
    //   DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'

    proc_control_B.scale_l = 3.3121686421112381E-170;
    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[0]);
    if (proc_control_B.absxk > 3.3121686421112381E-170) {
      proc_control_B.d_a = 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
      proc_control_B.d_a = proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[1]);
    if (proc_control_B.absxk > proc_control_B.scale_l) {
      proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
      proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
      proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[2]);
    if (proc_control_B.absxk > proc_control_B.scale_l) {
      proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
      proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
      proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[3]);
    if (proc_control_B.absxk > proc_control_B.scale_l) {
      proc_control_B.t = proc_control_B.scale_l / proc_control_B.absxk;
      proc_control_B.d_a = proc_control_B.d_a * proc_control_B.t *
        proc_control_B.t + 1.0;
      proc_control_B.scale_l = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale_l;
      proc_control_B.d_a += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.d_a = proc_control_B.scale_l * std::sqrt(proc_control_B.d_a);
    proc_control_B.y_o[0] = proc_control_B.TmpSignalConversionAtSFunct[0] /
      proc_control_B.d_a;
    proc_control_B.y_o[1] = proc_control_B.TmpSignalConversionAtSFunct[1] /
      proc_control_B.d_a;
    proc_control_B.y_o[2] = proc_control_B.TmpSignalConversionAtSFunct[2] /
      proc_control_B.d_a;
    proc_control_B.y_o[3] = proc_control_B.TmpSignalConversionAtSFunct[3] /
      proc_control_B.d_a;

    // End of MATLAB Function: '<S3>/Quaternion Normalise'

    // Gain: '<S44>/Output' incorporates:
    //   RandomNumber: '<S44>/White Noise'

    proc_control_B.t6 = std::sqrt(proc_control_P.BandLimitedWhiteNoise1_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_c;

    // Gain: '<S45>/Output' incorporates:
    //   RandomNumber: '<S45>/White Noise'

    proc_control_B.Product3_bo = std::sqrt
      (proc_control_P.BandLimitedWhiteNoise2_Cov) / 0.1414213562373095 *
      proc_control_DW.NextOutput_g;

    // Gain: '<S46>/Output' incorporates:
    //   RandomNumber: '<S46>/White Noise'

    proc_control_B.oa = std::sqrt(proc_control_P.BandLimitedWhiteNoise3_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_i;

    // Gain: '<S47>/Output' incorporates:
    //   RandomNumber: '<S47>/White Noise'

    proc_control_B.ob = std::sqrt(proc_control_P.BandLimitedWhiteNoise4_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_f;

    // Product: '<S67>/Product' incorporates:
    //   Product: '<S61>/Product'

    proc_control_B.t43 = proc_control_B.y_o[0] * proc_control_B.y_o[0];

    // Sqrt: '<S66>/sqrt' incorporates:
    //   MATLAB Function: '<S29>/MATLAB Function'
    //   Product: '<S67>/Product'
    //   Product: '<S67>/Product1'
    //   Product: '<S67>/Product2'
    //   Product: '<S67>/Product3'
    //   Sum: '<S67>/Sum'

    proc_control_B.Divide3_b = std::sqrt(((proc_control_B.y_o[1] *
      proc_control_B.y_o[1] + proc_control_B.t43) + proc_control_B.y_o[2] *
      proc_control_B.y_o[2]) + proc_control_B.y_o[3] * proc_control_B.y_o[3]);

    // Product: '<S62>/Product1' incorporates:
    //   Product: '<S74>/Product1'
    //   Sqrt: '<S66>/sqrt'

    proc_control_B.d_a = proc_control_B.y_o[1] / proc_control_B.Divide3_b;

    // Product: '<S62>/Product3' incorporates:
    //   Product: '<S74>/Product3'
    //   Sqrt: '<S66>/sqrt'

    proc_control_B.t41 = proc_control_B.y_o[3] / proc_control_B.Divide3_b;

    // Product: '<S62>/Product' incorporates:
    //   Product: '<S74>/Product'
    //   Sqrt: '<S66>/sqrt'

    proc_control_B.rtb_sincos_o2_i = proc_control_B.y_o[0] /
      proc_control_B.Divide3_b;

    // Product: '<S62>/Product2' incorporates:
    //   Product: '<S74>/Product2'
    //   Sqrt: '<S66>/sqrt'

    proc_control_B.t42 = proc_control_B.y_o[2] / proc_control_B.Divide3_b;
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Gain: '<S55>/1//2' incorporates:
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.Product3_dy = proc_control_P.u2_Gain *
        proc_control_B.BusCreator.dvl_rotation[0];

      // Trigonometry: '<S55>/sincos'
      proc_control_B.sincos_o2[0] = std::cos(proc_control_B.Product3_dy);
      proc_control_B.Product_al = std::sin(proc_control_B.Product3_dy);

      // Gain: '<S55>/1//2' incorporates:
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.Product3_dy = proc_control_P.u2_Gain *
        proc_control_B.BusCreator.dvl_rotation[1];

      // Trigonometry: '<S55>/sincos'
      proc_control_B.sincos_o2[1] = std::cos(proc_control_B.Product3_dy);
      proc_control_B.t68 = std::sin(proc_control_B.Product3_dy);

      // Gain: '<S55>/1//2' incorporates:
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.Product3_dy = proc_control_P.u2_Gain *
        proc_control_B.BusCreator.dvl_rotation[2];

      // Trigonometry: '<S55>/sincos'
      proc_control_B.sincos_o2[2] = std::cos(proc_control_B.Product3_dy);
      proc_control_B.Product3_dy = std::sin(proc_control_B.Product3_dy);

      // Fcn: '<S55>/q2' incorporates:
      //   Fcn: '<S55>/q1'
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.Product1_fr = proc_control_B.sincos_o2[0] *
        proc_control_B.t68;
      proc_control_B.t45 = proc_control_B.Product_al * proc_control_B.sincos_o2
        [1];
      proc_control_B.Product2_al = proc_control_B.Product1_fr *
        proc_control_B.sincos_o2[2] - proc_control_B.t45 *
        proc_control_B.Product3_dy;

      // Fcn: '<S55>/q0' incorporates:
      //   Fcn: '<S55>/q3'
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.t20 = proc_control_B.sincos_o2[0] *
        proc_control_B.sincos_o2[1];
      proc_control_B.t68 *= proc_control_B.Product_al;
      proc_control_B.Product_al = proc_control_B.t20 * proc_control_B.sincos_o2
        [2] - proc_control_B.t68 * proc_control_B.Product3_dy;

      // Fcn: '<S55>/q1' incorporates:
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.Product1_fr = proc_control_B.Product1_fr *
        proc_control_B.Product3_dy + proc_control_B.t45 *
        proc_control_B.sincos_o2[2];

      // Fcn: '<S55>/q3' incorporates:
      //   Trigonometry: '<S55>/sincos'

      proc_control_B.Product3_dy = proc_control_B.t20 *
        proc_control_B.Product3_dy + proc_control_B.t68 *
        proc_control_B.sincos_o2[2];

      // Sqrt: '<S72>/sqrt' incorporates:
      //   Product: '<S73>/Product'
      //   Product: '<S73>/Product1'
      //   Product: '<S73>/Product2'
      //   Product: '<S73>/Product3'
      //   Sum: '<S73>/Sum'

      proc_control_B.t20 = std::sqrt(((proc_control_B.Product_al *
        proc_control_B.Product_al + proc_control_B.Product1_fr *
        proc_control_B.Product1_fr) + proc_control_B.Product2_al *
        proc_control_B.Product2_al) + proc_control_B.Product3_dy *
        proc_control_B.Product3_dy);

      // Product: '<S68>/Product2'
      proc_control_B.Product2_al /= proc_control_B.t20;

      // Product: '<S68>/Product3'
      proc_control_B.Product3_dy /= proc_control_B.t20;

      // Product: '<S69>/Product7' incorporates:
      //   Product: '<S70>/Product7'

      proc_control_B.t35_tmp = proc_control_B.Product3_dy *
        proc_control_B.Product3_dy;

      // Product: '<S69>/Product6' incorporates:
      //   Product: '<S71>/Product7'

      proc_control_B.t45 = proc_control_B.Product2_al *
        proc_control_B.Product2_al;

      // Gain: '<S69>/Gain2' incorporates:
      //   Constant: '<S69>/Constant'
      //   Product: '<S69>/Product6'
      //   Product: '<S69>/Product7'
      //   Sum: '<S69>/Sum3'

      proc_control_B.Gain2_ld = ((proc_control_P.Constant_Value_pj -
        proc_control_B.t45) - proc_control_B.t35_tmp) *
        proc_control_P.Gain2_Gain_l;

      // Product: '<S68>/Product1'
      proc_control_B.Product1_fr /= proc_control_B.t20;

      // Product: '<S68>/Product'
      proc_control_B.Product_al /= proc_control_B.t20;

      // Product: '<S69>/Product' incorporates:
      //   Product: '<S70>/Product'

      proc_control_B.t36_tmp = proc_control_B.Product1_fr *
        proc_control_B.Product2_al;

      // Product: '<S69>/Product1' incorporates:
      //   Product: '<S70>/Product1'

      proc_control_B.t37_tmp = proc_control_B.Product_al *
        proc_control_B.Product3_dy;

      // Gain: '<S69>/Gain' incorporates:
      //   Product: '<S69>/Product'
      //   Product: '<S69>/Product1'
      //   Sum: '<S69>/Sum1'

      proc_control_B.Gain_n = (proc_control_B.t36_tmp + proc_control_B.t37_tmp) *
        proc_control_P.Gain_Gain_k;

      // Product: '<S69>/Product3' incorporates:
      //   Product: '<S71>/Product'

      proc_control_B.t20 = proc_control_B.Product1_fr *
        proc_control_B.Product3_dy;

      // Product: '<S69>/Product2' incorporates:
      //   Product: '<S71>/Product1'

      proc_control_B.t68 = proc_control_B.Product_al *
        proc_control_B.Product2_al;

      // Gain: '<S69>/Gain1' incorporates:
      //   Product: '<S69>/Product2'
      //   Product: '<S69>/Product3'
      //   Sum: '<S69>/Sum2'

      proc_control_B.Gain1_l = (proc_control_B.t20 - proc_control_B.t68) *
        proc_control_P.Gain1_Gain_f;

      // Gain: '<S70>/Gain' incorporates:
      //   Sum: '<S70>/Sum1'

      proc_control_B.Gain_f = (proc_control_B.t36_tmp - proc_control_B.t37_tmp) *
        proc_control_P.Gain_Gain_p;

      // Product: '<S70>/Product6' incorporates:
      //   Product: '<S71>/Product6'

      proc_control_B.t36_tmp = proc_control_B.Product1_fr *
        proc_control_B.Product1_fr;

      // Gain: '<S70>/Gain2' incorporates:
      //   Constant: '<S70>/Constant'
      //   Product: '<S70>/Product6'
      //   Sum: '<S70>/Sum3'

      proc_control_B.Gain2_f = ((proc_control_P.Constant_Value_oi -
        proc_control_B.t36_tmp) - proc_control_B.t35_tmp) *
        proc_control_P.Gain2_Gain_c;

      // Product: '<S70>/Product3' incorporates:
      //   Product: '<S71>/Product3'

      proc_control_B.Product3_dy *= proc_control_B.Product2_al;

      // Product: '<S70>/Product2' incorporates:
      //   Product: '<S71>/Product2'

      proc_control_B.Product_al *= proc_control_B.Product1_fr;

      // Gain: '<S70>/Gain1' incorporates:
      //   Product: '<S70>/Product2'
      //   Product: '<S70>/Product3'
      //   Sum: '<S70>/Sum2'

      proc_control_B.Gain1_h = (proc_control_B.Product_al +
        proc_control_B.Product3_dy) * proc_control_P.Gain1_Gain_c;

      // Gain: '<S71>/Gain' incorporates:
      //   Sum: '<S71>/Sum1'

      proc_control_B.Gain_c = (proc_control_B.t20 + proc_control_B.t68) *
        proc_control_P.Gain_Gain_o;

      // Gain: '<S71>/Gain1' incorporates:
      //   Sum: '<S71>/Sum2'

      proc_control_B.Gain1_m = (proc_control_B.Product3_dy -
        proc_control_B.Product_al) * proc_control_P.Gain1_Gain_b;

      // Gain: '<S71>/Gain2' incorporates:
      //   Constant: '<S71>/Constant'
      //   Sum: '<S71>/Sum3'

      proc_control_B.Gain2_e = ((proc_control_P.Constant_Value_mg -
        proc_control_B.t36_tmp) - proc_control_B.t45) *
        proc_control_P.Gain2_Gain_j;
    }

    // Product: '<S65>/Product' incorporates:
    //   Product: '<S62>/Product1'
    //   Product: '<S62>/Product3'
    //   Product: '<S75>/Product3'

    proc_control_B.scale_l = proc_control_B.d_a * proc_control_B.t41;

    // Product: '<S65>/Product7' incorporates:
    //   Product: '<S62>/Product2'
    //   Product: '<S75>/Product6'

    proc_control_B.absxk = proc_control_B.t42 * proc_control_B.t42;

    // Product: '<S65>/Product3' incorporates:
    //   Product: '<S62>/Product2'
    //   Product: '<S62>/Product3'
    //   Product: '<S76>/Product3'

    proc_control_B.t = proc_control_B.t42 * proc_control_B.t41;

    // Product: '<S65>/Product6' incorporates:
    //   Product: '<S62>/Product1'
    //   Product: '<S76>/Product6'

    proc_control_B.t20 = proc_control_B.d_a * proc_control_B.d_a;

    // Gain: '<S29>/Gain' incorporates:
    //   Constant: '<S65>/Constant'
    //   Gain: '<S43>/Output'
    //   Gain: '<S65>/Gain'
    //   Gain: '<S65>/Gain1'
    //   Gain: '<S65>/Gain2'
    //   MATLABSystem: '<S29>/Divide by Constant and Round'
    //   Product: '<S62>/Product'
    //   Product: '<S62>/Product1'
    //   Product: '<S62>/Product2'
    //   Product: '<S65>/Product'
    //   Product: '<S65>/Product1'
    //   Product: '<S65>/Product2'
    //   Product: '<S65>/Product3'
    //   Product: '<S65>/Product4'
    //   Product: '<S65>/Product5'
    //   Product: '<S65>/Product6'
    //   Product: '<S65>/Product7'
    //   Product: '<S65>/Product8'
    //   RandomNumber: '<S43>/White Noise'
    //   Sum: '<S29>/Sum'
    //   Sum: '<S29>/Sum1'
    //   Sum: '<S65>/Sum'
    //   Sum: '<S65>/Sum1'
    //   Sum: '<S65>/Sum2'
    //   Sum: '<S65>/Sum3'
    //
    proc_control_B.PressureDepth = std::floor
      ((((((proc_control_B.rtb_sincos_o2_i * proc_control_B.t42 +
            proc_control_B.scale_l) * proc_control_P.Gain_Gain *
           proc_control_B.BusCreator.depth_pose[0] + (proc_control_B.t -
            proc_control_B.rtb_sincos_o2_i * proc_control_B.d_a) *
           proc_control_P.Gain1_Gain * proc_control_B.BusCreator.depth_pose[1])
          + ((proc_control_P.Constant_Value_a5 - proc_control_B.t20) -
             proc_control_B.absxk) * proc_control_P.Gain2_Gain *
          proc_control_B.BusCreator.depth_pose[2]) +
         proc_control_B.WorldPosition[2]) + std::sqrt
        (proc_control_P.BandLimitedWhiteNoise_Cov) / 0.1414213562373095 *
        proc_control_DW.NextOutput) * 1000.0 + 0.5) * proc_control_P.Gain_Gain_h;

    // MATLABSystem: '<S58>/SourceBlock'
    b_value = Sub_proc_control_1278.getLatestMessage
      (&proc_control_B.rtb_SourceBlock_o2_d_n);

    // Outputs for Enabled SubSystem: '<S58>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S59>/Enable'

    if (b_value) {
      // SignalConversion generated from: '<S59>/In1'
      proc_control_B.In1_k = proc_control_B.rtb_SourceBlock_o2_d_n;
    } else {
      // Outputs for IfAction SubSystem: '<S48>/If Action Subsystem' incorporates:
      //   ActionPort: '<S56>/Action Port'

      // If: '<S48>/If' incorporates:
      //   SignalConversion generated from: '<S56>/In1'

      proc_control_B.In1_g2 = proc_control_B.In1_k;

      // End of Outputs for SubSystem: '<S48>/If Action Subsystem'
    }

    // End of Outputs for SubSystem: '<S58>/Enabled Subsystem'

    // ZeroOrderHold: '<S48>/Zero-Order Hold' incorporates:
    //   MATLABSystem: '<S58>/SourceBlock'
    //
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLABSystem: '<S57>/SinkBlock'
      Pub_proc_control_1280.publish(&proc_control_B.In1_g2);
    }

    // End of ZeroOrderHold: '<S48>/Zero-Order Hold'

    // MATLABSystem: '<S48>/MATLAB System'
    //  Ajout du bruit sur la position du pinger.
    proc_control_rand(proc_control_B.unusedExpr_h);

    // MATLAB Function: '<S29>/MATLAB Function' incorporates:
    //   Gain: '<S29>/Gain1'
    //   MATLABSystem: '<S29>/Divide by Constant and Round1'
    //   Product: '<S69>/Product4'
    //   Product: '<S69>/Product5'
    //   Product: '<S69>/Product8'
    //   Product: '<S70>/Product4'
    //   Product: '<S70>/Product5'
    //   Product: '<S70>/Product8'
    //   Product: '<S71>/Product4'
    //   Product: '<S71>/Product5'
    //   Product: '<S71>/Product8'
    //   Sum: '<S29>/Sum3'
    //   Sum: '<S69>/Sum'
    //   Sum: '<S70>/Sum'
    //   Sum: '<S71>/Sum'
    //
    //  Calculer les angles des hydros.
    // pinger2hydroAngles
    //     T__H_N = pinger2hydroAngles(IN1,IN2,IN3,IN4)
    //     This function was generated by the Symbolic Math Toolbox version 9.0. 
    //     02-Mar-2022 21:23:59
    proc_control_B.y_p[0] = std::floor
      ((((proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] *
          proc_control_B.Gain2_ld + proc_control_B.Gain_n *
          proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1]) +
         proc_control_B.Gain1_l *
         proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2]) +
        proc_control_B.Product3_bo) * 1000.0 + 0.5) *
      proc_control_P.Gain1_Gain_h;
    proc_control_B.y_p[1] = std::floor
      ((((proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] *
          proc_control_B.Gain_f + proc_control_B.Gain2_f *
          proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1]) +
         proc_control_B.Gain1_h *
         proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2]) +
        proc_control_B.Product3_bo) * 1000.0 + 0.5) *
      proc_control_P.Gain1_Gain_h;
    proc_control_B.y_p[2] = std::floor
      ((((proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] *
          proc_control_B.Gain_c + proc_control_B.Gain1_m *
          proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1]) +
         proc_control_B.Gain2_e *
         proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2]) +
        proc_control_B.Product3_bo) * 1000.0 + 0.5) *
      proc_control_P.Gain1_Gain_h;
    proc_control_B.Product3_dy = 1.0 / proc_control_B.Divide3_b;
    proc_control_B.rq[0] = proc_control_B.y_o[0] * proc_control_B.Product3_dy;
    proc_control_B.rq[1] = proc_control_B.y_o[1] * proc_control_B.Product3_dy;
    proc_control_B.rq[2] = proc_control_B.y_o[2] * proc_control_B.Product3_dy;
    proc_control_B.rq[3] = proc_control_B.y_o[3] * proc_control_B.Product3_dy;
    proc_control_B.Product3_dy = (proc_control_B.rq[1] * proc_control_B.rq[3] -
      proc_control_B.rq[0] * proc_control_B.rq[2]) * -2.0;
    mask1 = (proc_control_B.Product3_dy >= 0.99999999999999778);
    proc_control_B.Product2_al = proc_control_B.Product3_dy;
    if (mask1) {
      proc_control_B.Product2_al = 1.0;
    }

    if (proc_control_B.Product3_dy <= -0.99999999999999778) {
      proc_control_B.Product2_al = -1.0;
    }

    // MATLAB Function: '<S29>/MATLAB Function'
    mask1 = (mask1 || (proc_control_B.Product3_dy <= -0.99999999999999778));
    proc_control_B.Product_al = proc_control_B.rq[0] * proc_control_B.rq[0];
    proc_control_B.Product1_fr = proc_control_B.rq[1] * proc_control_B.rq[1];
    proc_control_B.Product3_bo = proc_control_B.rq[2] * proc_control_B.rq[2];
    proc_control_B.Product3_dy = proc_control_B.rq[3] * proc_control_B.rq[3];
    proc_control_B.sincos_o2[0] = rt_atan2d_snf((proc_control_B.rq[1] *
      proc_control_B.rq[2] + proc_control_B.rq[0] * proc_control_B.rq[3]) * 2.0,
      ((proc_control_B.Product_al + proc_control_B.Product1_fr) -
       proc_control_B.Product3_bo) - proc_control_B.Product3_dy);
    proc_control_B.sincos_o2[1] = std::asin(proc_control_B.Product2_al);
    proc_control_B.sincos_o2[2] = rt_atan2d_snf((proc_control_B.rq[2] *
      proc_control_B.rq[3] + proc_control_B.rq[0] * proc_control_B.rq[1]) * 2.0,
      ((proc_control_B.Product_al - proc_control_B.Product1_fr) -
       proc_control_B.Product3_bo) + proc_control_B.Product3_dy);
    proc_control_B.ibmat = 0;
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    // MATLAB Function: '<S29>/MATLAB Function'
    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.b_x_data = proc_control_B.Product2_al;
    }

    proc_control_B.Ns = 0;
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.Ns++;
      }
    }

    // MATLAB Function: '<S29>/MATLAB Function'
    for (proc_control_B.base_index = 0; proc_control_B.base_index <
         proc_control_B.Ns; proc_control_B.base_index++) {
      if (std::isnan(proc_control_B.b_x_data)) {
        proc_control_B.b_x_data = (rtNaN);
      } else if (proc_control_B.b_x_data < 0.0) {
        proc_control_B.b_x_data = -1.0;
      } else {
        proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
      }
    }

    proc_control_B.Ns = 0;
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.Ns++;
      }
    }

    proc_control_B.tmp_size[0] = 1;
    proc_control_B.tmp_size[1] = proc_control_B.Ns;
    proc_control_B.Ns = 0;
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.Ns++;
      }
    }

    if (proc_control_B.ibmat != proc_control_B.Ns) {
      proc_control_binary_expand_op(proc_control_B.sincos_o2,
        proc_control_B.tmp_size, &proc_control_B.b_x_data, proc_control_B.rq);
    }

    proc_control_B.ibmat = 0;
    if (mask1) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    // MATLAB Function: '<S29>/MATLAB Function'
    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.sincos_o2[2] = 0.0;
    }

    if (std::abs(proc_control_B.sincos_o2[1]) > 0.349066) {
      proc_control_B.y_p[0] = 32.7675;
      proc_control_B.y_p[1] = 32.7675;
      proc_control_B.y_p[2] = 32.7675;
    } else if (std::abs(proc_control_B.sincos_o2[2]) > 0.349066) {
      proc_control_B.y_p[0] = 32.7675;
      proc_control_B.y_p[1] = 32.7675;
      proc_control_B.y_p[2] = 32.7675;
    }

    // Sum: '<S61>/Sum' incorporates:
    //   Product: '<S61>/Product1'
    //   Product: '<S61>/Product2'
    //   Product: '<S61>/Product3'
    //   UnaryMinus: '<S50>/Unary Minus'
    //   UnaryMinus: '<S50>/Unary Minus1'
    //   UnaryMinus: '<S50>/Unary Minus2'

    proc_control_B.Divide3_b = ((-proc_control_B.y_o[1] * -proc_control_B.y_o[1]
      + proc_control_B.t43) + -proc_control_B.y_o[2] * -proc_control_B.y_o[2]) +
      -proc_control_B.y_o[3] * -proc_control_B.y_o[3];

    // Sum: '<S29>/Sum2' incorporates:
    //   Product: '<S51>/Divide'
    //   Product: '<S51>/Divide1'
    //   Product: '<S51>/Divide2'
    //   Product: '<S51>/Divide3'
    //   UnaryMinus: '<S50>/Unary Minus'
    //   UnaryMinus: '<S50>/Unary Minus1'
    //   UnaryMinus: '<S50>/Unary Minus2'

    proc_control_B.Quaternion[0] = proc_control_B.y_o[0] /
      proc_control_B.Divide3_b + proc_control_B.t6;
    proc_control_B.Quaternion[1] = proc_control_B.y_o[1] /
      proc_control_B.Divide3_b + proc_control_B.t6;
    proc_control_B.Quaternion[2] = proc_control_B.y_o[2] /
      proc_control_B.Divide3_b + proc_control_B.t6;
    proc_control_B.Quaternion[3] = proc_control_B.y_o[3] /
      proc_control_B.Divide3_b + proc_control_B.t6;

    // Sum: '<S29>/Sum4' incorporates:
    //   DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'

    proc_control_B.AngularRate_j[0] = proc_control_B.oa +
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0];
    proc_control_B.AngularRate_j[1] = proc_control_B.oa +
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1];
    proc_control_B.AngularRate_j[2] = proc_control_B.oa +
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2];

    // Product: '<S75>/Product7' incorporates:
    //   Product: '<S76>/Product7'

    proc_control_B.Product_al = proc_control_B.t41 * proc_control_B.t41;

    // Product: '<S75>/Product' incorporates:
    //   Product: '<S76>/Product'

    proc_control_B.Product1_fr = proc_control_B.d_a * proc_control_B.t42;

    // Product: '<S75>/Product1' incorporates:
    //   Product: '<S76>/Product1'

    proc_control_B.Product3_bo = proc_control_B.rtb_sincos_o2_i *
      proc_control_B.t41;

    // Product: '<S75>/Product2' incorporates:
    //   Product: '<S77>/Product1'

    proc_control_B.oa = proc_control_B.rtb_sincos_o2_i * proc_control_B.t42;

    // Sum: '<S29>/Sum6' incorporates:
    //   Constant: '<S29>/Constant'
    //   Constant: '<S75>/Constant'
    //   Gain: '<S75>/Gain'
    //   Gain: '<S75>/Gain1'
    //   Gain: '<S75>/Gain2'
    //   MATLABSystem: '<S3>/MATLAB System'
    //   Product: '<S75>/Product'
    //   Product: '<S75>/Product1'
    //   Product: '<S75>/Product2'
    //   Product: '<S75>/Product4'
    //   Product: '<S75>/Product5'
    //   Product: '<S75>/Product7'
    //   Product: '<S75>/Product8'
    //   Sum: '<S29>/Sum5'
    //   Sum: '<S75>/Sum'
    //   Sum: '<S75>/Sum1'
    //   Sum: '<S75>/Sum2'
    //   Sum: '<S75>/Sum3'
    //
    proc_control_B.LinearAcceleration[0] = (((((proc_control_P.Constant_Value_i2
      - proc_control_B.absxk) - proc_control_B.Product_al) *
      proc_control_P.Gain2_Gain_lf * proc_control_P.Constant_Value_a[0] +
      (proc_control_B.Product1_fr + proc_control_B.Product3_bo) *
      proc_control_P.Gain_Gain_n * proc_control_P.Constant_Value_a[1]) +
      (proc_control_B.scale_l - proc_control_B.oa) * proc_control_P.Gain1_Gain_i
      * proc_control_P.Constant_Value_a[2]) + proc_control_B.imvec[7]) +
      proc_control_B.ob;

    // Product: '<S76>/Product2' incorporates:
    //   Product: '<S77>/Product2'

    proc_control_B.rtb_sincos_o2_i *= proc_control_B.d_a;

    // Sum: '<S29>/Sum6' incorporates:
    //   Constant: '<S29>/Constant'
    //   Constant: '<S76>/Constant'
    //   Constant: '<S77>/Constant'
    //   Gain: '<S76>/Gain'
    //   Gain: '<S76>/Gain1'
    //   Gain: '<S76>/Gain2'
    //   Gain: '<S77>/Gain'
    //   Gain: '<S77>/Gain1'
    //   Gain: '<S77>/Gain2'
    //   MATLABSystem: '<S3>/MATLAB System'
    //   Product: '<S76>/Product2'
    //   Product: '<S76>/Product4'
    //   Product: '<S76>/Product5'
    //   Product: '<S76>/Product8'
    //   Product: '<S77>/Product4'
    //   Product: '<S77>/Product5'
    //   Product: '<S77>/Product8'
    //   Sum: '<S29>/Sum5'
    //   Sum: '<S76>/Sum'
    //   Sum: '<S76>/Sum1'
    //   Sum: '<S76>/Sum2'
    //   Sum: '<S76>/Sum3'
    //   Sum: '<S77>/Sum'
    //   Sum: '<S77>/Sum1'
    //   Sum: '<S77>/Sum2'
    //   Sum: '<S77>/Sum3'
    //
    proc_control_B.LinearAcceleration[1] = (((((proc_control_P.Constant_Value_jx
      - proc_control_B.t20) - proc_control_B.Product_al) *
      proc_control_P.Gain2_Gain_n * proc_control_P.Constant_Value_a[1] +
      (proc_control_B.Product1_fr - proc_control_B.Product3_bo) *
      proc_control_P.Gain_Gain_hw * proc_control_P.Constant_Value_a[0]) +
      (proc_control_B.rtb_sincos_o2_i + proc_control_B.t) *
      proc_control_P.Gain1_Gain_p * proc_control_P.Constant_Value_a[2]) +
      proc_control_B.imvec[8]) + proc_control_B.ob;
    proc_control_B.LinearAcceleration[2] = ((((proc_control_B.scale_l +
      proc_control_B.oa) * proc_control_P.Gain_Gain_d *
      proc_control_P.Constant_Value_a[0] + (proc_control_B.t -
      proc_control_B.rtb_sincos_o2_i) * proc_control_P.Gain1_Gain_j *
      proc_control_P.Constant_Value_a[1]) + ((proc_control_P.Constant_Value_iu -
      proc_control_B.t20) - proc_control_B.absxk) * proc_control_P.Gain2_Gain_b *
      proc_control_P.Constant_Value_a[2]) + proc_control_B.imvec[9]) +
      proc_control_B.ob;
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // Update for DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states =
        proc_control_DW.DiscreteTransferFcn_tmp;

      // Update for DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_k =
        proc_control_DW.DiscreteTransferFcn_tmp_o;

      // Update for DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_p =
        proc_control_DW.DiscreteTransferFcn_tmp_d;

      // Update for DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_f =
        proc_control_DW.DiscreteTransferFcn_tmp_h;

      // Update for DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_e =
        proc_control_DW.DiscreteTransferFcn_tmp_c;

      // Update for DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_m =
        proc_control_DW.DiscreteTransferFcn_tmp_j;

      // Update for DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_l =
        proc_control_DW.DiscreteTransferFcn_tmp_jr;

      // Update for DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      proc_control_DW.DiscreteTransferFcn_states_px =
        proc_control_DW.DiscreteTransferFcn_tmp_hn;
    }

    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // Update for UniformRandomNumber: '<S27>/Drift' incorporates:
      //   DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn'
      //   DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn'
      //   Lookup_n-D: '<S139>/N to A'
      //   Lookup_n-D: '<S139>/n-D Lookup Table1'
      //   Lookup_n-D: '<S26>/PWN to N'
      //   Lookup_n-D: '<S32>/N to RPM'
      //   Trigonometry: '<S275>/sincos'
      //   Trigonometry: '<S55>/sincos'
      //
      for (proc_control_B.base_index = 0; proc_control_B.base_index < 6;
           proc_control_B.base_index++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S9>/DVL Measurements' incorporates:
        //   EnablePort: '<S246>/Enable'

        // Outputs for Enabled SubSystem: '<S271>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S274>/Enable'

        proc_control_B.Product_al =
          proc_control_P.dmin[proc_control_B.base_index];
        proc_control_DW.Drift_NextOutput[proc_control_B.base_index] =
          (proc_control_P.dmax[proc_control_B.base_index] -
           proc_control_B.Product_al) * rt_urand_Upu32_Yd_f_pw_snf
          (&proc_control_DW.RandSeed[proc_control_B.base_index]) +
          proc_control_B.Product_al;

        // End of Outputs for SubSystem: '<S271>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/DVL Measurements'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Update for Sin: '<S27>/Sine Wave'
    for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
      proc_control_B.Ns = proc_control_DW.counter[proc_control_B.i] + 1;
      proc_control_DW.counter[proc_control_B.i] = proc_control_B.Ns;
      if (proc_control_B.Ns ==
          proc_control_P.waveDiscreteFrequency[proc_control_B.i]) {
        proc_control_DW.counter[proc_control_B.i] = 0;
      }
    }

    // End of Update for Sin: '<S27>/Sine Wave'

    // Update for UnitDelay: '<S3>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[0] = proc_control_B.WorldPosition[0];
    proc_control_DW.UnitDelay_DSTATE[1] = proc_control_B.WorldPosition[1];
    proc_control_DW.UnitDelay_DSTATE[2] = proc_control_B.WorldPosition[2];
    proc_control_DW.UnitDelay_DSTATE[3] = proc_control_B.y_o[0];
    proc_control_DW.UnitDelay_DSTATE[4] = proc_control_B.y_o[1];
    proc_control_DW.UnitDelay_DSTATE[5] = proc_control_B.y_o[2];
    proc_control_DW.UnitDelay_DSTATE[6] = proc_control_B.y_o[3];

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_IC_LOADI = 0U;

    // Update for UnitDelay: '<S3>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[7] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0];
    proc_control_DW.UnitDelay_DSTATE[10] =
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0];

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[0] =
      proc_control_B.WorldPosition[0] + proc_control_B.v[0];

    // Update for UnitDelay: '<S3>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[8] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1];
    proc_control_DW.UnitDelay_DSTATE[11] =
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1];

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[1] =
      proc_control_B.WorldPosition[1] + proc_control_B.v[1];

    // Update for UnitDelay: '<S3>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[9] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2];
    proc_control_DW.UnitDelay_DSTATE[12] =
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2];

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:
    //   DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'

    proc_control_DW.DiscreteTimeIntegrator_DSTATE_e[2] =
      proc_control_B.WorldPosition[2] + proc_control_B.rtb_sincos_o1_idx_2;
    if (proc_control_DW.obj_i.m_reset > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 1;
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 1;

      // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 1;
    } else {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 0;
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 0;

      // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 0;
    }

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator1'
    proc_control_DW.DiscreteTimeIntegrator1_IC_LOAD = 0U;
    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
      proc_control_B.TmpSignalConversionAtSFunct[0] + proc_control_B.n[0];
    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.n[1];
    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
      proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.n[2];
    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[3] =
      proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.t62;

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] += proc_control_B.c_idx_0;

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] += proc_control_B.t39;

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] += proc_control_B.Divide3;

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] += proc_control_B.t40;

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] +=
      proc_control_B.rtb_sincos_o2_m;

    // Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] +=
      proc_control_B.rtb_sincos_o1_idx_1;
    if (proc_control_DW.obj_i.m_reset > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 1;
    } else {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 0;
    }

    // Update for RandomNumber: '<S43>/White Noise'
    proc_control_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_o) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // Update for RandomNumber: '<S44>/White Noise'
    proc_control_DW.NextOutput_c = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_i +
      proc_control_P.WhiteNoise_Mean_j;

    // Update for RandomNumber: '<S45>/White Noise'
    proc_control_DW.NextOutput_g = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_h) * proc_control_P.WhiteNoise_StdDev_a +
      proc_control_P.WhiteNoise_Mean_n;

    // Update for RandomNumber: '<S46>/White Noise'
    proc_control_DW.NextOutput_i = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_g;

    // Update for RandomNumber: '<S47>/White Noise'
    proc_control_DW.NextOutput_f = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_l +
      proc_control_P.WhiteNoise_Mean_p;

    // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
    //   EnablePort: '<S6>/Enable'

    // BusAssignment: '<S103>/Bus Assignment'
    proc_control_B.BusAssignment_c.position.x = proc_control_B.WorldPosition[0];
    proc_control_B.BusAssignment_c.position.y = proc_control_B.WorldPosition[1];
    proc_control_B.BusAssignment_c.position.z = proc_control_B.WorldPosition[2];
    proc_control_B.BusAssignment_c.orientation.x = proc_control_B.y_o[0];
    proc_control_B.BusAssignment_c.orientation.y = proc_control_B.y_o[1];
    proc_control_B.BusAssignment_c.orientation.z = proc_control_B.y_o[2];
    proc_control_B.BusAssignment_c.orientation.w = proc_control_B.y_o[3];

    // MATLABSystem: '<S112>/SinkBlock'
    Pub_proc_control_1321.publish(&proc_control_B.BusAssignment_c);

    // BusAssignment: '<S100>/Bus Assignment'
    proc_control_B.BusAssignment_aa.x = proc_control_B.y_p[0];
    proc_control_B.BusAssignment_aa.y = proc_control_B.y_p[1];
    proc_control_B.BusAssignment_aa.z = proc_control_B.y_p[2];

    // MATLABSystem: '<S105>/SinkBlock'
    Pub_proc_control_1347.publish(&proc_control_B.BusAssignment_aa);

    // BusAssignment: '<S101>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S101>/Data Type Conversion'

    proc_control_B.BusAssignment_ak.data = static_cast<real32_T>
      (proc_control_B.PressureDepth);

    // MATLABSystem: '<S107>/SinkBlock'
    Pub_proc_control_1353.publish(&proc_control_B.BusAssignment_ak);

    // Outputs for Atomic SubSystem: '<S102>/Header Assignment'
    proc_control_CurrentTime(&proc_control_B.CurrentTime_n);

    // Switch: '<S109>/Switch1' incorporates:
    //   Constant: '<S109>/Constant1'
    //   StringConstant: '<S109>/String Constant1'

    if (proc_control_P.Constant1_Value_e != 0.0) {
      proc_control_B.Switch1_j = proc_control_P.StringConstant1_String_f;
    } else {
      // ASCIIToString: '<S109>/ASCII to String' incorporates:
      //   Constant: '<S108>/Constant'

      for (proc_control_B.i = 0; proc_control_B.i < 128; proc_control_B.i++) {
        proc_control_B.cv[proc_control_B.i] = static_cast<int8_T>
          (proc_control_P.Constant_Value_e.header.frame_id[proc_control_B.i]);
      }

      proc_control_B.Switch1_j.assign(&proc_control_B.cv[0], 128U);

      // End of ASCIIToString: '<S109>/ASCII to String'
    }

    // End of Switch: '<S109>/Switch1'

    // StringToASCII: '<S109>/String To ASCII'
    std::strncpy((char_T *)&proc_control_B.BusAssignment_i.header.frame_id[0],
                 proc_control_B.Switch1_j.c_str(), 128U);

    // Switch: '<S109>/Switch' incorporates:
    //   Constant: '<S109>/Constant'

    if (proc_control_P.Constant_Value_dg != 0.0) {
      // BusAssignment: '<S102>/Bus Assignment'
      proc_control_B.BusAssignment_i.header.stamp =
        proc_control_B.CurrentTime_n.CurrentTime;
    } else {
      // BusAssignment: '<S102>/Bus Assignment' incorporates:
      //   Constant: '<S108>/Constant'

      proc_control_B.BusAssignment_i.header.stamp =
        proc_control_P.Constant_Value_e.header.stamp;
    }

    // End of Switch: '<S109>/Switch'

    // BusAssignment: '<S102>/Bus Assignment' incorporates:
    //   Constant: '<S108>/Constant'
    //   SignalConversion generated from: '<S109>/HeaderAssign'
    //   StringLength: '<S109>/String Length'

    proc_control_B.BusAssignment_i.header.frame_id_SL_Info.CurrentLength =
      proc_control_B.Switch1_j.length();
    proc_control_B.BusAssignment_i.header.frame_id_SL_Info.ReceivedLength =
      proc_control_P.Constant_Value_e.header.frame_id_SL_Info.ReceivedLength;
    std::memcpy(&proc_control_B.BusAssignment_i.orientation_covariance[0],
                &proc_control_P.Constant_Value_e.orientation_covariance[0], 9U *
                sizeof(real_T));
    std::memcpy(&proc_control_B.BusAssignment_i.angular_velocity_covariance[0],
                &proc_control_P.Constant_Value_e.angular_velocity_covariance[0],
                9U * sizeof(real_T));
    std::memcpy(&proc_control_B.BusAssignment_i.linear_acceleration_covariance[0],
                &proc_control_P.Constant_Value_e.linear_acceleration_covariance
                [0], 9U * sizeof(real_T));

    // End of Outputs for SubSystem: '<S102>/Header Assignment'
    proc_control_B.BusAssignment_i.angular_velocity.x =
      proc_control_B.AngularRate_j[0];
    proc_control_B.BusAssignment_i.angular_velocity.y =
      proc_control_B.AngularRate_j[1];
    proc_control_B.BusAssignment_i.angular_velocity.z =
      proc_control_B.AngularRate_j[2];
    proc_control_B.BusAssignment_i.orientation.w = proc_control_B.Quaternion[0];
    proc_control_B.BusAssignment_i.orientation.x = proc_control_B.Quaternion[1];
    proc_control_B.BusAssignment_i.orientation.y = proc_control_B.Quaternion[2];
    proc_control_B.BusAssignment_i.orientation.z = proc_control_B.Quaternion[3];
    proc_control_B.BusAssignment_i.linear_acceleration.x =
      proc_control_B.LinearAcceleration[0];
    proc_control_B.BusAssignment_i.linear_acceleration.y =
      proc_control_B.LinearAcceleration[1];
    proc_control_B.BusAssignment_i.linear_acceleration.z =
      proc_control_B.LinearAcceleration[2];

    // MATLABSystem: '<S110>/SinkBlock'
    Pub_proc_control_1342.publish(&proc_control_B.BusAssignment_i);

    // End of Outputs for SubSystem: '<Root>/ROS Output'
  }

  // End of Outputs for SubSystem: '<Root>/Model System'

  // BusAssignment: '<S303>/Bus Assignment'
  proc_control_B.BusAssignment_b.position.x =
    proc_control_B.TmpSignalConversionAtMATLAB[0];
  proc_control_B.BusAssignment_b.position.y =
    proc_control_B.TmpSignalConversionAtMATLAB[1];
  proc_control_B.BusAssignment_b.position.z =
    proc_control_B.TmpSignalConversionAtMATLAB[2];
  proc_control_B.BusAssignment_b.orientation.w =
    proc_control_B.TmpSignalConversionAtMATLAB[3];
  proc_control_B.BusAssignment_b.orientation.x =
    proc_control_B.TmpSignalConversionAtMATLAB[4];
  proc_control_B.BusAssignment_b.orientation.y =
    proc_control_B.TmpSignalConversionAtMATLAB[5];
  proc_control_B.BusAssignment_b.orientation.z =
    proc_control_B.TmpSignalConversionAtMATLAB[6];

  // ZeroOrderHold: '<S303>/Zero-Order Hold'
  if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
    // MATLABSystem: '<S312>/SinkBlock'
    Pub_proc_control_671.publish(&proc_control_B.BusAssignment_b);
  }

  // End of ZeroOrderHold: '<S303>/Zero-Order Hold'

  // Update for Delay: '<S114>/Delay'
  proc_control_DW.Delay_DSTATE = proc_control_B.y;
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Delay: '<S250>/Delay' incorporates:
    //   SignalConversion generated from: '<S2>/thrust'

    std::memcpy(&proc_control_DW.Delay_DSTATE_c[0],
                &proc_control_B.BufferToMakeInportVirtual_Inser[0], sizeof
                (real_T) << 3U);
  }

  // Update for Delay: '<S5>/Delay'
  proc_control_DW.Delay_DSTATE_m = proc_control_B.y;
  rate_scheduler((&proc_control_M));
}

// Model initialize function
void proc_control::initialize()
{
  {
    static const char_T prmName_2[35]{ "proc_control.mpc.gains.default.mvr" };

    static const char_T prmName_1[34]{ "proc_control.mpc.gains.default.mv" };

    static const char_T prmName_3[34]{ "proc_control.mpc.gains.default.ov" };

    static const char_T prmName[19]{ "proc_control.mpc.p" };

    static const char_T prmName_0[19]{ "proc_control.mpc.m" };

    static const real_T varargin_1[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_5[31]{ "proc_control.mpc.gains.c10.mvr" };

    static const char_T prmName_4[30]{ "proc_control.mpc.gains.c10.mv" };

    static const real_T varargin_1_0[8]{ 0.1, 0.1, 0.1, 0.1, 0.3, 0.3, 0.3, 0.3
    };

    static const char_T prmName_6[30]{ "proc_control.mpc.gains.c10.ov" };

    static const real_T varargin_1_1[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_7[30]{ "proc_control.mpc.gains.c11.mv" };

    static const real_T varargin_1_2[8]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_8[31]{ "proc_control.mpc.gains.c11.mvr" };

    static const real_T varargin_1_3[8]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_9[30]{ "proc_control.mpc.gains.c11.ov" };

    static const real_T varargin_1_4[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_a[30]{ "proc_control.mpc.gains.c19.mv" };

    static const real_T varargin_1_5[8]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_b[31]{ "proc_control.mpc.gains.c19.mvr" };

    static const real_T varargin_1_6[8]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_c[30]{ "proc_control.mpc.gains.c19.ov" };

    static const real_T varargin_1_7[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    static const char_T prmName_d[32]{ "proc_control.mpc.gains.noDvl.mv" };

    static const real_T varargin_1_8[8]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0,
      45.0, 0.0 };

    static const char_T prmName_g[46]{
      "proc_control.target_reached.angular_tolerance" };

    static const char_T prmName_i[46]{
      "proc_control.target_reached.time_in_tolerance" };

    static const char_T prmName_h[45]{
      "proc_control.target_reached.linear_tolerance" };

    static const char_T prmName_z[39]{ "proc_control.physics.dvl_lost_override"
    };

    static const char_T prmName_x[34]{ "proc_control.physics.dvl_rotation" };

    static const char_T prmName_n[32]{ "proc_control.physics.sub_height" };

    static const char_T prmName_s[32]{ "proc_control.physics.added_mass" };

    static const char_T prmName_u[32]{ "proc_control.physics.depth_pose" };

    static const char_T prmName_v[32]{ "proc_control.physics.hydro_pose" };

    static const char_T prmName_w[32]{ "proc_control.physics.sonar_pose" };

    static const char_T prmName_y[31]{ "proc_control.physics.thrusters" };

    static const char_T prmName_m[28]{ "proc_control.physics.volume" };

    static const char_T prmName_l[26]{ "proc_control.physics.mass" };

    static const char_T prmName_j[25]{ "proc_control.physics.rho" };

    static const char_T prmName_q[25]{ "proc_control.physics.cdl" };

    static const char_T prmName_r[25]{ "proc_control.physics.cdq" };

    static const char_T prmName_o[24]{ "proc_control.physics.rg" };

    static const char_T prmName_p[24]{ "proc_control.physics.rb" };

    static const char_T prmName_k[23]{ "proc_control.physics.g" };

    static const char_T prmName_t[23]{ "proc_control.physics.I" };

    static const char_T prmName_e[22]{ "proc_control.mpc.tmax" };

    static const char_T prmName_f[22]{ "proc_control.mpc.tmin" };

    static const char_T b_zeroDelimTopic[21]{ "/proc_nav/auv_states" };

    int32_T i;
    int32_T r;
    int32_T t;
    uint32_T tseed;
    static const real_T tmp[33]{ 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0, 0.0,
      0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0, 0.0,
      0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const int8_T tmp_0[9]{ 0, 0, 0, 1, 0, 0, 0, 0, 0 };

    static const int8_T tmp_1[7]{ 0, 0, 0, 1, 0, 0, 0 };

    static const char_T b_zeroDelimTopic_0[34]{
      "/proc_control/measurment_residual" };

    // Start for Probe: '<S250>/Probe'
    proc_control_B.Probe_o1 = 8.0;

    // Start for SwitchCase: '<S10>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem = -1;
    proc_control_PrevZCX.ResettableSubsystem_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S114>/Delay'
    proc_control_DW.Delay_DSTATE = proc_control_P.Delay_InitialCondition_at;

    // InitializeConditions for Delay: '<S250>/Delay'
    std::memcpy(&proc_control_DW.Delay_DSTATE_c[0],
                &proc_control_P.Delay_InitialCondition_fy[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S5>/Delay'
    proc_control_DW.Delay_DSTATE_m = proc_control_P.Delay_InitialCondition_fl;

    // SystemInitialize for Enabled SubSystem: '<S125>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S131>/In1' incorporates:
    //   Outport: '<S131>/Out1'

    proc_control_B.In1_me = proc_control_P.Out1_Y0_fy;

    // End of SystemInitialize for SubSystem: '<S125>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S129>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S135>/In1' incorporates:
    //   Outport: '<S135>/Out1'

    proc_control_B.In1_lz = proc_control_P.Out1_Y0_o;

    // End of SystemInitialize for SubSystem: '<S129>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S128>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S134>/In1' incorporates:
    //   Outport: '<S134>/Out1'

    proc_control_B.In1_gs = proc_control_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S128>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S130>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S136>/In1' incorporates:
    //   Outport: '<S136>/Out1'

    proc_control_B.In1_gf = proc_control_P.Out1_Y0_e;

    // End of SystemInitialize for SubSystem: '<S130>/Enabled Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S7>/Get_ROS_param'
    // Start for MATLABSystem: '<S117>/MPC.P'
    proc_control_DW.obj_f0.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_f0.isInitialized = 1;
    ParamGet_proc_control_140.initParam(&prmName[0]);
    ParamGet_proc_control_140.setInitialValue(10LL);
    proc_control_DW.obj_f0.isSetupComplete = true;

    // Start for MATLABSystem: '<S117>/MPC.M'
    proc_control_DW.obj_dx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dx.isInitialized = 1;
    ParamGet_proc_control_143.initParam(&prmName_0[0]);
    ParamGet_proc_control_143.setInitialValue(1LL);
    proc_control_DW.obj_dx.isSetupComplete = true;

    // Start for MATLABSystem: '<S119>/Default MV'
    proc_control_DW.obj_iw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_iw.isInitialized = 1;
    for (i = 0; i < 8; i++) {
      proc_control_B.varargin_1_d[i] = 0.2;
    }

    ParamGet_proc_control_72.initParam(&prmName_1[0]);
    ParamGet_proc_control_72.setInitialValue(&proc_control_B.varargin_1_d[0], 8U);
    proc_control_DW.obj_iw.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S119>/Default MV'

    // Start for MATLABSystem: '<S119>/Default MVR'
    proc_control_DW.obj_bn.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bn.isInitialized = 1;
    std::memset(&proc_control_B.varargin_1_d[0], 0, sizeof(real_T) << 3U);
    ParamGet_proc_control_74.initParam(&prmName_2[0]);
    ParamGet_proc_control_74.setInitialValue(&proc_control_B.varargin_1_d[0], 8U);
    proc_control_DW.obj_bn.isSetupComplete = true;

    // Start for MATLABSystem: '<S119>/Default OV'
    proc_control_DW.obj_fk.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fk.isInitialized = 1;
    ParamGet_proc_control_66.initParam(&prmName_3[0]);
    ParamGet_proc_control_66.setInitialValue(&varargin_1[0], 13U);
    proc_control_DW.obj_fk.isSetupComplete = true;

    // Start for MATLABSystem: '<S120>/C10 MV' incorporates:
    //   MATLABSystem: '<S119>/MATLAB System4'
    //
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_f2.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_f2.isInitialized = 1;
    std::memset(&proc_control_B.varargin_1_d[0], 0, sizeof(real_T) << 3U);
    ParamGet_proc_control_98.initParam(&prmName_4[0]);
    ParamGet_proc_control_98.setInitialValue(&proc_control_B.varargin_1_d[0], 8U);
    proc_control_DW.obj_f2.isSetupComplete = true;

    // Start for MATLABSystem: '<S120>/C10 MVR'
    proc_control_DW.obj_pzf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pzf.isInitialized = 1;
    ParamGet_proc_control_99.initParam(&prmName_5[0]);
    ParamGet_proc_control_99.setInitialValue(&varargin_1_0[0], 8U);
    proc_control_DW.obj_pzf.isSetupComplete = true;

    // Start for MATLABSystem: '<S120>/C10 OV'
    proc_control_DW.obj_j1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_j1.isInitialized = 1;
    ParamGet_proc_control_97.initParam(&prmName_6[0]);
    ParamGet_proc_control_97.setInitialValue(&varargin_1_1[0], 13U);
    proc_control_DW.obj_j1.isSetupComplete = true;

    // Start for MATLABSystem: '<S121>/C11 MV'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_nr.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nr.isInitialized = 1;
    ParamGet_proc_control_107.initParam(&prmName_7[0]);
    ParamGet_proc_control_107.setInitialValue(&varargin_1_2[0], 8U);
    proc_control_DW.obj_nr.isSetupComplete = true;

    // Start for MATLABSystem: '<S121>/C11 MVR'
    proc_control_DW.obj_as.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_as.isInitialized = 1;
    ParamGet_proc_control_108.initParam(&prmName_8[0]);
    ParamGet_proc_control_108.setInitialValue(&varargin_1_3[0], 8U);
    proc_control_DW.obj_as.isSetupComplete = true;

    // Start for MATLABSystem: '<S121>/C11 OV'
    proc_control_DW.obj_nl.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nl.isInitialized = 1;
    ParamGet_proc_control_106.initParam(&prmName_9[0]);
    ParamGet_proc_control_106.setInitialValue(&varargin_1_4[0], 13U);
    proc_control_DW.obj_nl.isSetupComplete = true;

    // Start for MATLABSystem: '<S122>/C19 MV'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_pz.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pz.isInitialized = 1;
    ParamGet_proc_control_116.initParam(&prmName_a[0]);
    ParamGet_proc_control_116.setInitialValue(&varargin_1_5[0], 8U);
    proc_control_DW.obj_pz.isSetupComplete = true;

    // Start for MATLABSystem: '<S122>/C19 MVR'
    proc_control_DW.obj_hq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hq.isInitialized = 1;
    ParamGet_proc_control_117.initParam(&prmName_b[0]);
    ParamGet_proc_control_117.setInitialValue(&varargin_1_6[0], 8U);
    proc_control_DW.obj_hq.isSetupComplete = true;

    // Start for MATLABSystem: '<S122>/C19 OV'
    proc_control_DW.obj_fs.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fs.isInitialized = 1;
    ParamGet_proc_control_115.initParam(&prmName_c[0]);
    ParamGet_proc_control_115.setInitialValue(&varargin_1_7[0], 13U);
    proc_control_DW.obj_fs.isSetupComplete = true;

    // Start for MATLABSystem: '<S123>/NoDVL MV'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_nb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nb.isInitialized = 1;
    ParamGet_proc_control_133.initParam(&prmName_d[0]);
    ParamGet_proc_control_133.setInitialValue(&varargin_1_8[0], 8U);
    proc_control_DW.obj_nb.isSetupComplete = true;

    // Start for MATLABSystem: '<S117>/MPC.TMAX'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_cm.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cm.isInitialized = 1;
    ParamGet_proc_control_144.initParam(&prmName_e[0]);
    ParamGet_proc_control_144.setInitialValue(20.0);
    proc_control_DW.obj_cm.isSetupComplete = true;

    // Start for MATLABSystem: '<S117>/MPC.TMIN'
    proc_control_DW.obj_pu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pu.isInitialized = 1;
    ParamGet_proc_control_145.initParam(&prmName_f[0]);
    ParamGet_proc_control_145.setInitialValue(-15.0);
    proc_control_DW.obj_pu.isSetupComplete = true;

    // Start for MATLABSystem: '<S118>/Angular Tolerance'
    proc_control_DW.obj_eug.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eug.isInitialized = 1;
    ParamGet_proc_control_151.initParam(&prmName_g[0]);
    ParamGet_proc_control_151.setInitialValue(0.1);
    proc_control_DW.obj_eug.isSetupComplete = true;

    // Start for MATLABSystem: '<S118>/Linear Tolerance'
    proc_control_DW.obj_dc.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dc.isInitialized = 1;
    ParamGet_proc_control_150.initParam(&prmName_h[0]);
    ParamGet_proc_control_150.setInitialValue(0.2);
    proc_control_DW.obj_dc.isSetupComplete = true;

    // Start for MATLABSystem: '<S118>/Time in Tolerance'
    proc_control_DW.obj_do.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_do.isInitialized = 1;
    ParamGet_proc_control_152.initParam(&prmName_i[0]);
    ParamGet_proc_control_152.setInitialValue(3.0);
    proc_control_DW.obj_do.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Rho'
    proc_control_DW.obj_pp.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_pp.isInitialized = 1;
    ParamGet_proc_control_166.initParam(&prmName_j[0]);
    ParamGet_proc_control_166.setInitialValue(998.0);
    proc_control_DW.obj_pp.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics G'
    proc_control_DW.obj_axm.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_axm.isInitialized = 1;
    ParamGet_proc_control_167.initParam(&prmName_k[0]);
    ParamGet_proc_control_167.setInitialValue(9.81);
    proc_control_DW.obj_axm.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Mass'
    proc_control_DW.obj_jq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jq.isInitialized = 1;
    ParamGet_proc_control_168.initParam(&prmName_l[0]);
    ParamGet_proc_control_168.setInitialValue(31.0);
    proc_control_DW.obj_jq.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Volume'
    proc_control_DW.obj_ju.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ju.isInitialized = 1;
    ParamGet_proc_control_169.initParam(&prmName_m[0]);
    ParamGet_proc_control_169.setInitialValue(0.0315);
    proc_control_DW.obj_ju.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Sub Height'
    proc_control_DW.obj_e5.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e5.isInitialized = 1;
    ParamGet_proc_control_170.initParam(&prmName_n[0]);
    ParamGet_proc_control_170.setInitialValue(0.15);
    proc_control_DW.obj_e5.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics RG'
    proc_control_DW.obj_e1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e1.isInitialized = 1;
    proc_control_B.varargin_1_h[0] = 0.0;
    proc_control_B.varargin_1_h[1] = 0.0;
    proc_control_B.varargin_1_h[2] = 0.0;
    ParamGet_proc_control_171.initParam(&prmName_o[0]);
    ParamGet_proc_control_171.setInitialValue(&proc_control_B.varargin_1_h[0],
      3U);
    proc_control_DW.obj_e1.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics RB'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_h.isInitialized = 1;
    proc_control_B.varargin_1_h[0] = 0.0;
    proc_control_B.varargin_1_h[1] = 0.0;
    proc_control_B.varargin_1_h[2] = 0.0;
    ParamGet_proc_control_173.initParam(&prmName_p[0]);
    ParamGet_proc_control_173.setInitialValue(&proc_control_B.varargin_1_h[0],
      3U);
    proc_control_DW.obj_h.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics CDL'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_fg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fg.isInitialized = 1;
    for (i = 0; i < 6; i++) {
      proc_control_B.varargin_1_g[i] = 0.0;
    }

    ParamGet_proc_control_175.initParam(&prmName_q[0]);
    ParamGet_proc_control_175.setInitialValue(&proc_control_B.varargin_1_g[0],
      6U);
    proc_control_DW.obj_fg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S116>/Physics CDL'

    // Start for MATLABSystem: '<S116>/Physics CDQ'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_kb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kb.isInitialized = 1;
    for (i = 0; i < 6; i++) {
      // Start for MATLABSystem: '<S116>/Physics CDQ' incorporates:
      //   MATLABSystem: '<S116>/MATLAB System1'
      //
      proc_control_B.varargin_1_g[i] = 0.0;
    }

    // Start for MATLABSystem: '<S116>/Physics CDQ'
    ParamGet_proc_control_177.initParam(&prmName_r[0]);
    ParamGet_proc_control_177.setInitialValue(&proc_control_B.varargin_1_g[0],
      6U);
    proc_control_DW.obj_kb.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Added Mass'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_ps.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ps.isInitialized = 1;
    for (i = 0; i < 6; i++) {
      // Start for MATLABSystem: '<S116>/Physics Added Mass' incorporates:
      //   MATLABSystem: '<S116>/MATLAB System2'
      //
      proc_control_B.varargin_1_g[i] = 0.0;
    }

    // Start for MATLABSystem: '<S116>/Physics Added Mass'
    ParamGet_proc_control_180.initParam(&prmName_s[0]);
    ParamGet_proc_control_180.setInitialValue(&proc_control_B.varargin_1_g[0],
      6U);
    proc_control_DW.obj_ps.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics I'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_hn.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hn.isInitialized = 1;
    std::memset(&proc_control_B.varargin_1_o[0], 0, 9U * sizeof(real_T));
    ParamGet_proc_control_182.initParam(&prmName_t[0]);
    ParamGet_proc_control_182.setInitialValue(&proc_control_B.varargin_1_o[0],
      9U);
    proc_control_DW.obj_hn.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Depth Pose'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_lq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lq.isInitialized = 1;
    proc_control_B.varargin_1_h[0] = 0.0;
    proc_control_B.varargin_1_h[1] = 0.0;
    proc_control_B.varargin_1_h[2] = 0.0;
    ParamGet_proc_control_184.initParam(&prmName_u[0]);
    ParamGet_proc_control_184.setInitialValue(&proc_control_B.varargin_1_h[0],
      3U);
    proc_control_DW.obj_lq.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Hydro Pose'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_c4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_c4.isInitialized = 1;
    proc_control_B.varargin_1_h[0] = 0.0;
    proc_control_B.varargin_1_h[1] = 0.0;
    proc_control_B.varargin_1_h[2] = 0.0;
    ParamGet_proc_control_186.initParam(&prmName_v[0]);
    ParamGet_proc_control_186.setInitialValue(&proc_control_B.varargin_1_h[0],
      3U);
    proc_control_DW.obj_c4.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Sonar Pose'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_eu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eu.isInitialized = 1;
    proc_control_B.varargin_1_h[0] = 0.0;
    proc_control_B.varargin_1_h[1] = 0.0;
    proc_control_B.varargin_1_h[2] = 0.0;
    ParamGet_proc_control_190.initParam(&prmName_w[0]);
    ParamGet_proc_control_190.setInitialValue(&proc_control_B.varargin_1_h[0],
      3U);
    proc_control_DW.obj_eu.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics DVL Rotation'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_mh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_mh.isInitialized = 1;
    proc_control_B.varargin_1_h[0] = 0.0;
    proc_control_B.varargin_1_h[1] = 0.0;
    proc_control_B.varargin_1_h[2] = 0.0;
    ParamGet_proc_control_192.initParam(&prmName_x[0]);
    ParamGet_proc_control_192.setInitialValue(&proc_control_B.varargin_1_h[0],
      3U);
    proc_control_DW.obj_mh.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/Physics Thrusters'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_l4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_l4.isInitialized = 1;
    std::memset(&proc_control_B.varargin_1[0], 0, 48U * sizeof(real_T));
    ParamGet_proc_control_194.initParam(&prmName_y[0]);
    ParamGet_proc_control_194.setInitialValue(&proc_control_B.varargin_1[0], 48U);
    proc_control_DW.obj_l4.isSetupComplete = true;

    // Start for MATLABSystem: '<S116>/DVL Lost Override'
    proc_control_DW.obj_jk.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jk.isInitialized = 1;
    ParamGet_proc_control_196.initParam(&prmName_z[0]);
    ParamGet_proc_control_196.setInitialValue(true);
    proc_control_DW.obj_jk.isSetupComplete = true;

    // SystemInitialize for MATLABSystem: '<S119>/MATLAB System3' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.OV_d[0],
                &proc_control_P.mpcParams_Y0.gains.predefined.OV[0], 13U *
                sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S119>/MATLAB System4' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MV_p[0],
                &proc_control_P.mpcParams_Y0.gains.predefined.MV[0], sizeof
                (real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S119>/MATLAB System1' incorporates:
    //   MATLABSystem: '<S119>/MATLAB System4'
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MVR_cn[0],
                &proc_control_P.mpcParams_Y0.gains.predefined.MVR[0], sizeof
                (real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S120>/MATLAB System4' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.OV_c[0],
                &proc_control_P.mpcParams_Y0.gains.c10.OV[0], 13U * sizeof
                (real_T));

    // SystemInitialize for MATLABSystem: '<S120>/MATLAB System5' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MV_j[0],
                &proc_control_P.mpcParams_Y0.gains.c10.MV[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for MATLABSystem: '<S120>/MATLAB System3' incorporates:
    //   MATLABSystem: '<S120>/MATLAB System5'
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MVR_a[0],
                &proc_control_P.mpcParams_Y0.gains.c10.MVR[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for MATLABSystem: '<S121>/MATLAB System4' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.OV_l[0],
                &proc_control_P.mpcParams_Y0.gains.c11.OV[0], 13U * sizeof
                (real_T));

    // SystemInitialize for MATLABSystem: '<S121>/MATLAB System5' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MV_l[0],
                &proc_control_P.mpcParams_Y0.gains.c11.MV[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for MATLABSystem: '<S121>/MATLAB System3' incorporates:
    //   MATLABSystem: '<S121>/MATLAB System5'
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MVR_c[0],
                &proc_control_P.mpcParams_Y0.gains.c11.MVR[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for MATLABSystem: '<S122>/MATLAB System4' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.OV[0],
                &proc_control_P.mpcParams_Y0.gains.c19.OV[0], 13U * sizeof
                (real_T));

    // SystemInitialize for MATLABSystem: '<S122>/MATLAB System5' incorporates:
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MV_c[0],
                &proc_control_P.mpcParams_Y0.gains.c19.MV[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for MATLABSystem: '<S122>/MATLAB System3' incorporates:
    //   MATLABSystem: '<S122>/MATLAB System5'
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MVR[0],
                &proc_control_P.mpcParams_Y0.gains.c19.MVR[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for MATLABSystem: '<S123>/MATLAB System5' incorporates:
    //   MATLABSystem: '<S122>/MATLAB System5'
    //   Outport: '<S113>/mpcParams'

    std::memcpy(&proc_control_B.MV[0],
                &proc_control_P.mpcParams_Y0.gains.noDvl.MV[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for DataTypeConversion: '<S117>/Data Type Conversion' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.p_h = proc_control_P.mpcParams_Y0.gains.p;

    // SystemInitialize for DataTypeConversion: '<S117>/Data Type Conversion1' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.m_a = proc_control_P.mpcParams_Y0.gains.m;

    // SystemInitialize for MATLABSystem: '<S117>/MPC.TMAX' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.tmax = proc_control_P.mpcParams_Y0.gains.tmax;

    // SystemInitialize for MATLABSystem: '<S117>/MPC.TMIN' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.tmin = proc_control_P.mpcParams_Y0.gains.tmin;

    // SystemInitialize for MATLABSystem: '<S118>/Linear Tolerance' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.linearTol =
      proc_control_P.mpcParams_Y0.targetReached.linearTol;

    // SystemInitialize for MATLABSystem: '<S118>/Angular Tolerance' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.angularTol =
      proc_control_P.mpcParams_Y0.targetReached.angularTol;

    // SystemInitialize for MATLABSystem: '<S118>/Time in Tolerance' incorporates:
    //   Outport: '<S113>/mpcParams'

    proc_control_B.timeInTol =
      proc_control_P.mpcParams_Y0.targetReached.timeInTol;

    // SystemInitialize for BusCreator: '<S116>/Bus Creator' incorporates:
    //   Outport: '<S113>/physicsConstants'

    proc_control_B.BusCreator = proc_control_P.physicsConstants_Y0;

    // End of SystemInitialize for SubSystem: '<S7>/Get_ROS_param'

    // SystemInitialize for IfAction SubSystem: '<S5>/Simulation'
    // SystemInitialize for Enabled SubSystem: '<S94>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S97>/In1' incorporates:
    //   Outport: '<S97>/Out1'

    proc_control_B.In1_g = proc_control_P.Out1_Y0_no;

    // End of SystemInitialize for SubSystem: '<S94>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S95>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S98>/In1' incorporates:
    //   Outport: '<S98>/Out1'

    proc_control_B.In1_iq = proc_control_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S95>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S96>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S99>/In1' incorporates:
    //   Outport: '<S99>/Out1'

    proc_control_B.In1_hb = proc_control_P.Out1_Y0_oo;

    // End of SystemInitialize for SubSystem: '<S96>/Enabled Subsystem'

    // Start for MATLABSystem: '<S94>/SourceBlock'
    proc_control_DW.obj_fe.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fe.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fe.isSetupComplete = false;
    proc_control_DW.obj_fe.isInitialized = 1;
    proc_con_Subscriber_setupImpl_p(&proc_control_DW.obj_fe);
    proc_control_DW.obj_fe.isSetupComplete = true;

    // Start for MATLABSystem: '<S95>/SourceBlock'
    proc_control_DW.obj_fka.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fka.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fka.isSetupComplete = false;
    proc_control_DW.obj_fka.isInitialized = 1;
    proc_co_Subscriber_setupImpl_pr(&proc_control_DW.obj_fka);
    proc_control_DW.obj_fka.isSetupComplete = true;

    // Start for MATLABSystem: '<S96>/SourceBlock'
    proc_control_DW.obj_na.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_na.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_na.isSetupComplete = false;
    proc_control_DW.obj_na.isInitialized = 1;
    proc_c_Subscriber_setupImpl_pr3(&proc_control_DW.obj_na);
    proc_control_DW.obj_na.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S5>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S5>/AUV'
    // SystemInitialize for Enabled SubSystem: '<S83>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S86>/In1' incorporates:
    //   Outport: '<S86>/Out1'

    proc_control_B.In1_e = proc_control_P.Out1_Y0_c;

    // End of SystemInitialize for SubSystem: '<S83>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S84>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S87>/In1' incorporates:
    //   Outport: '<S87>/Out1'

    proc_control_B.In1_m = proc_control_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S84>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S85>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S88>/In1' incorporates:
    //   Outport: '<S88>/Out1'

    proc_control_B.In1_b = proc_control_P.Out1_Y0_bc;

    // End of SystemInitialize for SubSystem: '<S85>/Enabled Subsystem'

    // Start for MATLABSystem: '<S83>/SourceBlock'
    proc_control_DW.obj_du.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_du.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_du.isSetupComplete = false;
    proc_control_DW.obj_du.isInitialized = 1;
    proc__Subscriber_setupImpl_pr35(&proc_control_DW.obj_du);
    proc_control_DW.obj_du.isSetupComplete = true;

    // Start for MATLABSystem: '<S84>/SourceBlock'
    proc_control_DW.obj_n5.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_n5.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_n5.isSetupComplete = false;
    proc_control_DW.obj_n5.isInitialized = 1;
    proc_Subscriber_setupImpl_pr351(&proc_control_DW.obj_n5);
    proc_control_DW.obj_n5.isSetupComplete = true;

    // Start for MATLABSystem: '<S85>/SourceBlock'
    proc_control_DW.obj_ak.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ak.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ak.isSetupComplete = false;
    proc_control_DW.obj_ak.isInitialized = 1;
    pro_Subscriber_setupImpl_pr351e(&proc_control_DW.obj_ak);
    proc_control_DW.obj_ak.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S5>/AUV'

    // SystemInitialize for Enabled SubSystem: '<S9>/DVL Measurements'
    // InitializeConditions for Delay: '<S271>/Delay'
    proc_control_DW.Delay_DSTATE_i = proc_control_P.Delay_InitialCondition_f;

    // SystemInitialize for Enabled SubSystem: '<S271>/Enabled Subsystem'
    // SystemInitialize for Fcn: '<S275>/q0' incorporates:
    //   Outport: '<S274>/Quat'

    proc_control_B.q0 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S275>/q1' incorporates:
    //   Outport: '<S274>/Quat'

    proc_control_B.q1 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S275>/q2' incorporates:
    //   Outport: '<S274>/Quat'

    proc_control_B.q2 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S275>/q3' incorporates:
    //   Outport: '<S274>/Quat'

    proc_control_B.q3 = proc_control_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S271>/Enabled Subsystem'

    // SystemInitialize for Outport: '<S246>/DVL Measurements'
    proc_control_B.enable_i = proc_control_P.DVLMeasurements_Y0.enable;

    // End of SystemInitialize for SubSystem: '<S9>/DVL Measurements'

    // SystemInitialize for Enabled SubSystem: '<S9>/Depth Measurements'
    // SystemInitialize for Sum: '<S247>/Sum' incorporates:
    //   Outport: '<S247>/Depth Measurements'

    proc_control_B.zposition = proc_control_P.DepthMeasurements_Y0;

    // End of SystemInitialize for SubSystem: '<S9>/Depth Measurements'

    // SystemInitialize for Enabled SubSystem: '<S5>/Enabled Subsystem'
    // InitializeConditions for Memory: '<S92>/Memory'
    proc_control_DW.Memory_PreviousInput_e =
      proc_control_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S93>/Memory'
    proc_control_DW.Memory_PreviousInput_n =
      proc_control_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S81>/y'
    proc_control_B.y = proc_control_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S5>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S9>/Enabled Subsystem'
    // Start for DataStoreMemory: '<S290>/DataStoreMemory - P'
    std::memcpy(&proc_control_DW.P[0],
                &proc_control_P.DataStoreMemoryP_InitialValue[0], 169U * sizeof
                (real_T));

    // SystemInitialize for Enabled SubSystem: '<S290>/Correct1'
    // SystemInitialize for MATLABSystem: '<S291>/MATLAB System' incorporates:
    //   Outport: '<S291>/yBlockOrdering'

    proc_control_B.MATLABSystem_o3_k = proc_control_P.yBlockOrdering_Y0;

    // End of SystemInitialize for SubSystem: '<S290>/Correct1'

    // Start for DataStoreMemory: '<S290>/DataStoreMemory - x'
    std::memcpy(&proc_control_DW.x[0],
                &proc_control_P.DataStoreMemoryx_InitialValue[0], 13U * sizeof
                (real_T));

    // End of SystemInitialize for SubSystem: '<S9>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Enabled Subsystem'
    // SystemInitialize for Atomic SubSystem: '<S12>/Header Assignment'
    proc_control_CurrentTime_Init(&proc_control_DW.CurrentTime);

    // End of SystemInitialize for SubSystem: '<S12>/Header Assignment'

    // Start for MATLABSystem: '<S17>/SinkBlock'
    proc_control_DW.obj_ez.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ez.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ez.isInitialized = 1;
    proc_control_B.qos_profile = rmw_qos_profile_default;
    pr_ROS2PubSubBase_setQOSProfile(proc_control_B.qos_profile, 1.0, (rtInf),
      5.0, 5.0, false);
    for (i = 0; i < 21; i++) {
      proc_control_B.b_zeroDelimTopic_os[i] = b_zeroDelimTopic[i];
    }

    Pub_proc_control_478.createPublisher(&proc_control_B.b_zeroDelimTopic_os[0],
      proc_control_B.qos_profile);
    proc_control_DW.obj_ez.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S17>/SinkBlock'

    // Start for MATLABSystem: '<S14>/SinkBlock'
    proc_control_DW.obj_dv.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_dv.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dv.isSetupComplete = false;
    proc_control_DW.obj_dv.isInitialized = 1;
    proc_contro_Publisher_setupImpl(&proc_control_DW.obj_dv);
    proc_control_DW.obj_dv.isSetupComplete = true;

    // SystemInitialize for SignalConversion generated from: '<S1>/Output' incorporates:
    //   Outport: '<S1>/Output'

    proc_control_B.WorldPosition_f[0] = proc_control_P.Output_Y0.WorldPosition[0];
    proc_control_B.WorldPosition_f[1] = proc_control_P.Output_Y0.WorldPosition[1];
    proc_control_B.WorldPosition_f[2] = proc_control_P.Output_Y0.WorldPosition[2];

    // SystemInitialize for SignalConversion generated from: '<S1>/Output' incorporates:
    //   Outport: '<S1>/Output'

    proc_control_B.qS2W[0] = proc_control_P.Output_Y0.qS2W[0];
    proc_control_B.qS2W[1] = proc_control_P.Output_Y0.qS2W[1];
    proc_control_B.qS2W[2] = proc_control_P.Output_Y0.qS2W[2];
    proc_control_B.qS2W[3] = proc_control_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S314>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S315>/In1' incorporates:
    //   Outport: '<S315>/Out1'

    proc_control_B.In1_l = proc_control_P.Out1_Y0_f;

    // End of SystemInitialize for SubSystem: '<S314>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S316>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S317>/In1' incorporates:
    //   Outport: '<S317>/Out1'

    proc_control_B.In1_i = proc_control_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S316>/Enabled Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S10>/ProcPlanner Trajectory'
    // InitializeConditions for UnitDelay: '<S309>/Delay Input1'
    //
    //  Block description for '<S309>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = proc_control_P.DetectRisePositive_vinit;

    // Start for MATLABSystem: '<S302>/MATLAB System'
    proc_control_DW.obj_l.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S302>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj_l.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj_l.emptyArray[i] = 999.0;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj_l.targetReachedCount = 0.0;
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_l.initialPose[i] = 0.0;
    }

    //  Buffer trajectoire
    for (i = 0; i < 78000; i++) {
      proc_control_DW.obj_l.poseBuffer[i] = 999.0;
    }

    proc_control_DW.obj_l.bufferCount = 0.0;
    proc_control_DW.obj_l.done = false;
    proc_control_DW.obj_l.init = false;

    // End of InitializeConditions for MATLABSystem: '<S302>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S10>/ProcPlanner Trajectory'

    // SystemInitialize for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
    // InitializeConditions for Delay: '<S307>/Delay'
    proc_control_DW.Delay_DSTATE_g = proc_control_P.Delay_InitialCondition_az;

    // SystemInitialize for Enabled SubSystem: '<S307>/Enabled Subsystem'
    // SystemInitialize for DataTypeConversion: '<S318>/Data Type Conversion1' incorporates:
    //   Outport: '<S318>/Out1'

    proc_control_B.DataTypeConversion1[0] = proc_control_P.Out1_Y0_j3;
    proc_control_B.DataTypeConversion1[1] = proc_control_P.Out1_Y0_j3;

    // SystemInitialize for DataTypeConversion: '<S318>/Data Type Conversion2' incorporates:
    //   Outport: '<S318>/Out1'

    proc_control_B.DataTypeConversion2 = proc_control_P.Out1_Y0_j3;

    // SystemInitialize for Enabled SubSystem: '<S307>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S318>/Data Type Conversion' incorporates:
      //   Outport: '<S318>/Out1'

      proc_control_B.DataTypeConversion[i] = proc_control_P.Out1_Y0_j3;

      // SystemInitialize for Selector: '<S319>/Selector' incorporates:
      //   DataTypeConversion: '<S318>/Data Type Conversion'
      //   Outport: '<S318>/Out1'
      //   Outport: '<S319>/linWpts'

      proc_control_B.Selector[i] = proc_control_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S307>/Enabled Subsystem'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S319>/Selector1' incorporates:
      //   Outport: '<S319>/RotWpts'

      proc_control_B.Selector1[i] = proc_control_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S319>/Matrix Concatenate' incorporates:
    //   Outport: '<S319>/time'

    proc_control_B.MatrixConcatenate[0] = proc_control_P.time_Y0;
    proc_control_B.MatrixConcatenate[1] = proc_control_P.time_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S319>/Selector4' incorporates:
      //   Outport: '<S319>/target'

      proc_control_B.Selector4[i] = proc_control_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S307>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S307>/Resettable Subsystem'
    // InitializeConditions for DiscreteIntegrator: '<S320>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S320>/Rotation Trajectory'
    std::memcpy(&proc_control_DW.obj_p3.TimeScaling[0], &tmp[0], 33U * sizeof
                (real_T));
    proc_control_DW.obj_p3.isInitialized = 1;
    proc_control_DW.obj_p3.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    std::memset(&proc_control_DW.obj_m.AccelerationBoundaryCondition[0], 0, 10U *
                sizeof(real_T));
    for (i = 0; i < 5; i++) {
      proc_control_DW.obj_m.tunablePropertyChanged[i] = false;
    }

    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_m.VelocityBoundaryCondition[i] =
        proc_control_P.PolynomialTrajectory_VelocityBo[i];
    }

    proc_control_DW.obj_m.isInitialized = 1;
    proc_cont_PolyTrajSys_setupImpl(&proc_control_DW.obj_m);
    proc_control_DW.obj_m.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S322>/Polynomial Trajectory'
    // End of SystemInitialize for SubSystem: '<S307>/Resettable Subsystem'

    // Start for MATLABSystem: '<S321>/SourceBlock'
    proc_control_DW.obj_ha.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ha.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ha.isSetupComplete = false;
    proc_control_DW.obj_ha.isInitialized = 1;
    proc_con_Subscriber_setupImpl_g(&proc_control_DW.obj_ha);
    proc_control_DW.obj_ha.isSetupComplete = true;

    // InitializeConditions for MATLABSystem: '<S307>/MATLAB System'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 18; i++) {
      proc_control_DW.obj_fo.poseList[i] = 999.0;
    }

    i = 0;
    for (r = 0; r < 9; r++) {
      proc_control_DW.obj_fo.poseList[i] = tmp_0[r];
      i += 2;
    }

    // initCond(1,1:7);
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_fo.initcond[i] = tmp_1[i];
    }

    proc_control_DW.obj_fo.i = 2.0;

    // End of InitializeConditions for MATLABSystem: '<S307>/MATLAB System'

    // Start for MATLABSystem: '<S307>/MATLAB System1'
    proc_control_DW.obj.linearConvergence =
      proc_control_P.MATLABSystem1_linearConvergence;
    proc_control_DW.obj.quaternionConvergence =
      proc_control_P.MATLABSystem1_quaternionConverg;
    proc_control_DW.obj.TargetThreshold =
      proc_control_P.MATLABSystem1_TargetThreshold;
    proc_control_DW.obj.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj.generationNumber = 0.0;
    proc_control_DW.obj.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj.emptyArray[i] = 999.0;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj.targetReachedCount = 0.0;

    //  Buffer trajectoire
    for (i = 0; i < 78013; i++) {
      proc_control_DW.obj.poseBuffer[i] = 999.0;
    }

    proc_control_DW.obj.bufferCount = 0.0;
    proc_control_DW.obj.done = false;
    proc_control_DW.obj.init = 0.0;

    // End of Start for MATLABSystem: '<S307>/MATLAB System1'
    // End of SystemInitialize for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for If: '<S8>/If'
    proc_control_DW.If_ActiveSubsystem_b = -1;

    // Start for SwitchCase: '<S137>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem_p = -1;

    // InitializeConditions for Delay: '<S8>/Delay'
    for (i = 0; i < 8; i++) {
      proc_control_DW.Delay_DSTATE_m0[i] =
        proc_control_P.Delay_InitialCondition_e[i];
    }

    // End of InitializeConditions for Delay: '<S8>/Delay'

    // InitializeConditions for Delay: '<S139>/Delay'
    proc_control_DW.Delay_DSTATE_p = proc_control_P.Delay_InitialCondition_c;

    // SystemInitialize for IfAction SubSystem: '<S8>/If Action Subsystem'
    // SystemInitialize for Enabled SubSystem: '<S240>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S242>/In1' incorporates:
    //   Outport: '<S242>/Out1'

    proc_control_B.In1_j = proc_control_P.Out1_Y0_b;

    // End of SystemInitialize for SubSystem: '<S240>/Enabled Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S241>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S243>/In1' incorporates:
    //   Outport: '<S243>/Out1'

    proc_control_B.In1 = proc_control_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S241>/Enabled Subsystem'

    // Start for MATLABSystem: '<S240>/SourceBlock'
    proc_control_DW.obj_no.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_no.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_no.isSetupComplete = false;
    proc_control_DW.obj_no.isInitialized = 1;
    Subscriber_setupI_pr351ewpk3k4u(&proc_control_DW.obj_no);
    proc_control_DW.obj_no.isSetupComplete = true;

    // Start for MATLABSystem: '<S241>/SourceBlock'
    proc_control_DW.obj_if.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_if.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_if.isSetupComplete = false;
    proc_control_DW.obj_if.isInitialized = 1;
    Subscriber_setup_pr351ewpk3k4u0(&proc_control_DW.obj_if);
    proc_control_DW.obj_if.isSetupComplete = true;

    // Start for MATLABSystem: '<S138>/MATLAB System'
    proc_control_DW.obj_k.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S138>/MATLAB System'
    //         %% Fonction execute a chaque iteration
    //  Perform one-time calculations, such as computing constants
    proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_k);

    // SystemInitialize for MATLABSystem: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    std::memcpy(&proc_control_B.mvmin[0], &proc_control_P.MPCparam_Y0.mvmin[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    std::memcpy(&proc_control_B.mvmax[0], &proc_control_P.MPCparam_Y0.mvmax[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for SignalConversion generated from: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    std::memcpy(&proc_control_B.ywt[0], &proc_control_P.MPCparam_Y0.ywt[0], 13U *
                sizeof(real_T));

    // SystemInitialize for SignalConversion generated from: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    proc_control_B.p = proc_control_P.MPCparam_Y0.p;

    // SystemInitialize for SignalConversion generated from: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    proc_control_B.m = proc_control_P.MPCparam_Y0.m;

    // SystemInitialize for SignalConversion generated from: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    std::memcpy(&proc_control_B.mvwt[0], &proc_control_P.MPCparam_Y0.mvwt[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for SignalConversion generated from: '<S138>/MATLAB System' incorporates:
    //   Outport: '<S138>/MPC param'

    std::memcpy(&proc_control_B.dmwwt[0], &proc_control_P.MPCparam_Y0.dmwwt[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for IfAction SubSystem: '<S137>/If Action Subsystem'
    // InitializeConditions for Delay: '<S140>/Delay' incorporates:
    //   Outport: '<S138>/MPC param'
    //   SignalConversion generated from: '<S138>/MATLAB System'

    std::memcpy(&proc_control_DW.Delay_DSTATE_a[0],
                &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) << 3U);
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S138>/MATLAB System' incorporates:
      //   Outport: '<S138>/MPC param'

      proc_control_B.thrustersStatus[i] =
        proc_control_P.MPCparam_Y0.thrustersStatus[i];
    }

    // End of SystemInitialize for SubSystem: '<S8>/If Action Subsystem'

    // InitializeConditions for Memory: '<S148>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput_l[0],
                &proc_control_P.Memory_InitialCondition[0], 226U * sizeof
                (boolean_T));

    // InitializeConditions for UnitDelay: '<S148>/last_mv'
    std::memcpy(&proc_control_DW.last_mv_DSTATE_j[0],
                &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                3U);

    // SystemInitialize for Atomic SubSystem: '<S147>/Header Assignment'
    // Start for MATLABSystem: '<S179>/Current Time'
    proc_control_DW.obj_o3.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_o3.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S147>/Header Assignment'

    // Start for MATLABSystem: '<S140>/MATLAB System'
    proc_control_DW.obj_b.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S140>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_contro_TrimPlant_resetImpl(&proc_control_DW.obj_b);

    // Start for MATLABSystem: '<S180>/SinkBlock'
    proc_control_DW.obj_ni.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ni.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ni.isInitialized = 1;
    proc_control_B.qos_profile = rmw_qos_profile_default;
    pr_ROS2PubSubBase_setQOSProfile(proc_control_B.qos_profile, 1.0, (rtInf),
      (rtInf), (rtInf), false);
    for (i = 0; i < 34; i++) {
      proc_control_B.b_zeroDelimTopic_j[i] = b_zeroDelimTopic_0[i];
    }

    Pub_proc_control_913.createPublisher(&proc_control_B.b_zeroDelimTopic_j[0],
      proc_control_B.qos_profile);
    proc_control_DW.obj_ni.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S180>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S137>/If Action Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S137>/If Action Subsystem2'
    // InitializeConditions for UnitDelay: '<S214>/UD'
    //
    //  Block description for '<S214>/UD':
    //
    //   Store in Global RAM

    for (i = 0; i < 6; i++) {
      proc_control_DW.UD_DSTATE[i] =
        proc_control_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S214>/UD'

    // Start for MATLABSystem: '<S142>/MATLAB System'
    proc_control_DW.obj_p.k = proc_control_P.MATLABSystem_k;
    std::memcpy(&proc_control_DW.obj_p.binv[0], &proc_control_P.binv[0], 48U *
                sizeof(real_T));
    proc_control_DW.obj_p.mass = proc_control_P.physics.mass;
    proc_control_DW.obj_p.volume = proc_control_P.physics.volume;
    proc_control_DW.obj_p.height = proc_control_P.physics.height;
    std::memcpy(&proc_control_DW.obj_p.I[0], &proc_control_P.physics.I[0], 9U *
                sizeof(real_T));
    proc_control_DW.obj_p.RG[0] = proc_control_P.physics.RG[0];
    proc_control_DW.obj_p.RB[0] = proc_control_P.physics.RB[0];
    proc_control_DW.obj_p.RG[1] = proc_control_P.physics.RG[1];
    proc_control_DW.obj_p.RB[1] = proc_control_P.physics.RB[1];
    proc_control_DW.obj_p.RG[2] = proc_control_P.physics.RG[2];
    proc_control_DW.obj_p.RB[2] = proc_control_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_p.AddedMass[i] = proc_control_P.physics.AddedMass[i];
      proc_control_DW.obj_p.CDL[i] = proc_control_P.physics.CDL[i];
      proc_control_DW.obj_p.CDQ[i] = proc_control_P.physics.CDQ[i];
    }

    proc_control_DW.obj_p.AF[0] = proc_control_P.physics.AF[0];
    proc_control_DW.obj_p.AF[1] = proc_control_P.physics.AF[1];
    proc_control_DW.obj_p.AF[2] = proc_control_P.physics.AF[2];
    proc_control_DW.obj_p.g = proc_control_P.physics.g;
    proc_control_DW.obj_p.rho = proc_control_P.physics.rho;
    proc_control_DW.obj_p.isInitialized = 1;

    // End of Start for MATLABSystem: '<S142>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S137>/If Action Subsystem2'

    // SystemInitialize for IfAction SubSystem: '<S137>/If Action Subsystem1'
    // InitializeConditions for Memory: '<S184>/Memory'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                &proc_control_P.Memory_InitialCondition_n[0], 226U * sizeof
                (boolean_T));

    // InitializeConditions for UnitDelay: '<S184>/last_mv'
    std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                &proc_control_P.last_mv_InitialCondition_k[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S141>/Delay1'
    std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                &proc_control_P.Delay1_InitialCondition[0], 88U * sizeof(real_T));

    // End of SystemInitialize for SubSystem: '<S137>/If Action Subsystem1'

    // SystemInitialize for IfAction SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S144>/Delay'
    std::memcpy(&proc_control_DW.Delay_DSTATE_pp[0],
                &proc_control_P.Delay_InitialCondition_a[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S218>/mv_Delay'
    proc_control_DW.icLoad = true;

    // InitializeConditions for Delay: '<S218>/x_Delay'
    proc_control_DW.icLoad_g = true;

    // InitializeConditions for Delay: '<S218>/slack_delay'
    proc_control_DW.icLoad_o = true;

    // End of SystemInitialize for SubSystem: '<S137>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for Merge generated from: '<S137>/Merge'
    proc_control_B.MpcStatus = proc_control_P.Merge_2_InitialOutput_i;

    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Enabled SubSystem: '<Root>/Enabled Subsystem1'
    // Start for MATLABSystem: '<S21>/SinkBlock'
    proc_control_DW.obj_oa.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_oa.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oa.isSetupComplete = false;
    proc_control_DW.obj_oa.isInitialized = 1;
    proc_cont_Publisher_setupImpl_p(&proc_control_DW.obj_oa);
    proc_control_DW.obj_oa.isSetupComplete = true;

    // Start for MATLABSystem: '<S22>/SinkBlock'
    proc_control_DW.obj_fd.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fd.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fd.isSetupComplete = false;
    proc_control_DW.obj_fd.isInitialized = 1;
    proc_con_Publisher_setupImpl_pr(&proc_control_DW.obj_fd);
    proc_control_DW.obj_fd.isSetupComplete = true;

    // Start for MATLABSystem: '<S25>/SinkBlock'
    proc_control_DW.obj_clf.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_clf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_clf.isSetupComplete = false;
    proc_control_DW.obj_clf.isInitialized = 1;
    proc_co_Publisher_setupImpl_pr3(&proc_control_DW.obj_clf);
    proc_control_DW.obj_clf.isSetupComplete = true;
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S2>/mv' incorporates:
      //   Outport: '<S2>/mv'

      proc_control_B.BufferToMakeInportVirtual_Ins_e[i] = proc_control_P.mv_Y0;

      // SystemInitialize for SignalConversion generated from: '<S2>/thrust' incorporates:
      //   Outport: '<S2>/mv'
      //   Outport: '<S2>/thrust'
      //   SignalConversion generated from: '<S2>/mv'

      proc_control_B.BufferToMakeInportVirtual_Inser[i] =
        proc_control_P.thrust_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Enabled Subsystem1'

    // SystemInitialize for Enabled SubSystem: '<Root>/Model System'
    // InitializeConditions for DiscreteTransferFcn: '<S33>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states =
      proc_control_P.DiscreteTransferFcn_InitialStat;

    // InitializeConditions for DiscreteTransferFcn: '<S34>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_k =
      proc_control_P.DiscreteTransferFcn_InitialSt_j;

    // InitializeConditions for DiscreteTransferFcn: '<S35>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_p =
      proc_control_P.DiscreteTransferFcn_InitialSt_d;

    // InitializeConditions for DiscreteTransferFcn: '<S36>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_f =
      proc_control_P.DiscreteTransferFcn_InitialSt_e;

    // InitializeConditions for DiscreteTransferFcn: '<S37>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_e =
      proc_control_P.DiscreteTransferFcn_InitialSt_c;

    // InitializeConditions for DiscreteTransferFcn: '<S38>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_m =
      proc_control_P.DiscreteTransferFcn_InitialSt_f;

    // InitializeConditions for DiscreteTransferFcn: '<S39>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_l =
      proc_control_P.DiscreteTransferFcn_InitialSt_g;

    // InitializeConditions for DiscreteTransferFcn: '<S40>/Discrete Transfer Fcn' 
    proc_control_DW.DiscreteTransferFcn_states_px =
      proc_control_P.DiscreteTransferFcn_InitialS_ft;

    // InitializeConditions for UniformRandomNumber: '<S27>/Drift'
    proc_control_B.d37 = std::floor(proc_control_P.dSeedX);
    if (std::isnan(proc_control_B.d37) || std::isinf(proc_control_B.d37)) {
      proc_control_B.d37 = 0.0;
    } else {
      proc_control_B.d37 = std::fmod(proc_control_B.d37, 4.294967296E+9);
    }

    for (i = 0; i < 6; i++) {
      tseed = proc_control_B.d37 < 0.0 ? static_cast<uint32_T>(-static_cast<
        int32_T>(static_cast<uint32_T>(-proc_control_B.d37))) :
        static_cast<uint32_T>(proc_control_B.d37);
      r = static_cast<int32_T>(tseed >> 16U);
      t = static_cast<int32_T>(tseed & 32768U);
      tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) +
                 static_cast<uint32_T>(t)) << 16U) + static_cast<uint32_T>(t)) +
        static_cast<uint32_T>(r);
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else if (tseed > 2147483646U) {
        tseed = 2147483646U;
      }

      proc_control_DW.RandSeed[i] = tseed;
      proc_control_B.dmin = proc_control_P.dmin[i];
      proc_control_DW.Drift_NextOutput[i] = (proc_control_P.dmax[i] -
        proc_control_B.dmin) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_DW.RandSeed[i]) + proc_control_B.dmin;
    }

    // End of InitializeConditions for UniformRandomNumber: '<S27>/Drift'

    // InitializeConditions for UnitDelay: '<S3>/Unit Delay'
    std::memcpy(&proc_control_DW.UnitDelay_DSTATE[0],
                &proc_control_P.UnitDelay_InitialCondition[0], 13U * sizeof
                (real_T));

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;
    proc_control_DW.DiscreteTimeIntegrator_IC_LOADI = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator1' 
    proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;
    proc_control_DW.DiscreteTimeIntegrator1_IC_LOAD = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' incorporates:
    //   Constant: '<S3>/Initial Body Velocity'

    proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
      proc_control_P.InitialBodyVelocity_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S3>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
      proc_control_P.InitialAngularRates_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' incorporates:
    //   Constant: '<S3>/Initial Body Velocity'

    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
      proc_control_P.InitialBodyVelocity_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S3>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
      proc_control_P.InitialAngularRates_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator2' incorporates:
    //   Constant: '<S3>/Initial Body Velocity'

    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
      proc_control_P.InitialBodyVelocity_Value[2];

    // InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S3>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
      proc_control_P.InitialAngularRates_Value[2];
    proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;

    // InitializeConditions for RandomNumber: '<S43>/White Noise'
    proc_control_B.d37 = std::floor(proc_control_P.BandLimitedWhiteNoise_seed);
    if (std::isnan(proc_control_B.d37) || std::isinf(proc_control_B.d37)) {
      proc_control_B.d37 = 0.0;
    } else {
      proc_control_B.d37 = std::fmod(proc_control_B.d37, 4.294967296E+9);
    }

    tseed = proc_control_B.d37 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_B.d37))) :
      static_cast<uint32_T>(proc_control_B.d37);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) +
               static_cast<uint32_T>(t)) << 16U) + static_cast<uint32_T>(t)) +
      static_cast<uint32_T>(r);
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_o = tseed;
    proc_control_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_o) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S43>/White Noise'

    // InitializeConditions for RandomNumber: '<S44>/White Noise'
    proc_control_B.d37 = std::floor(proc_control_P.BandLimitedWhiteNoise1_seed);
    if (std::isnan(proc_control_B.d37) || std::isinf(proc_control_B.d37)) {
      proc_control_B.d37 = 0.0;
    } else {
      proc_control_B.d37 = std::fmod(proc_control_B.d37, 4.294967296E+9);
    }

    tseed = proc_control_B.d37 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_B.d37))) :
      static_cast<uint32_T>(proc_control_B.d37);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) +
               static_cast<uint32_T>(t)) << 16U) + static_cast<uint32_T>(t)) +
      static_cast<uint32_T>(r);
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_n = tseed;
    proc_control_DW.NextOutput_c = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_i +
      proc_control_P.WhiteNoise_Mean_j;

    // End of InitializeConditions for RandomNumber: '<S44>/White Noise'

    // InitializeConditions for RandomNumber: '<S45>/White Noise'
    proc_control_B.d37 = std::floor(proc_control_P.BandLimitedWhiteNoise2_seed);
    if (std::isnan(proc_control_B.d37) || std::isinf(proc_control_B.d37)) {
      proc_control_B.d37 = 0.0;
    } else {
      proc_control_B.d37 = std::fmod(proc_control_B.d37, 4.294967296E+9);
    }

    tseed = proc_control_B.d37 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_B.d37))) :
      static_cast<uint32_T>(proc_control_B.d37);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) +
               static_cast<uint32_T>(t)) << 16U) + static_cast<uint32_T>(t)) +
      static_cast<uint32_T>(r);
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_h = tseed;
    proc_control_DW.NextOutput_g = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_h) * proc_control_P.WhiteNoise_StdDev_a +
      proc_control_P.WhiteNoise_Mean_n;

    // End of InitializeConditions for RandomNumber: '<S45>/White Noise'

    // InitializeConditions for RandomNumber: '<S46>/White Noise'
    proc_control_B.d37 = std::floor(proc_control_P.BandLimitedWhiteNoise3_seed);
    if (std::isnan(proc_control_B.d37) || std::isinf(proc_control_B.d37)) {
      proc_control_B.d37 = 0.0;
    } else {
      proc_control_B.d37 = std::fmod(proc_control_B.d37, 4.294967296E+9);
    }

    tseed = proc_control_B.d37 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_B.d37))) :
      static_cast<uint32_T>(proc_control_B.d37);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) +
               static_cast<uint32_T>(t)) << 16U) + static_cast<uint32_T>(t)) +
      static_cast<uint32_T>(r);
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_d = tseed;
    proc_control_DW.NextOutput_i = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_g;

    // End of InitializeConditions for RandomNumber: '<S46>/White Noise'

    // InitializeConditions for RandomNumber: '<S47>/White Noise'
    proc_control_B.d37 = std::floor(proc_control_P.BandLimitedWhiteNoise4_seed);
    if (std::isnan(proc_control_B.d37) || std::isinf(proc_control_B.d37)) {
      proc_control_B.d37 = 0.0;
    } else {
      proc_control_B.d37 = std::fmod(proc_control_B.d37, 4.294967296E+9);
    }

    tseed = proc_control_B.d37 < 0.0 ? static_cast<uint32_T>(-static_cast<
      int32_T>(static_cast<uint32_T>(-proc_control_B.d37))) :
      static_cast<uint32_T>(proc_control_B.d37);
    r = static_cast<int32_T>(tseed >> 16U);
    t = static_cast<int32_T>(tseed & 32768U);
    tseed = ((((tseed - (static_cast<uint32_T>(r) << 16U)) +
               static_cast<uint32_T>(t)) << 16U) + static_cast<uint32_T>(t)) +
      static_cast<uint32_T>(r);
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_e = tseed;
    proc_control_DW.NextOutput_f = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_l +
      proc_control_P.WhiteNoise_Mean_p;

    // End of InitializeConditions for RandomNumber: '<S47>/White Noise'

    // SystemInitialize for Enabled SubSystem: '<S58>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S59>/In1' incorporates:
    //   Outport: '<S59>/Out1'

    proc_control_B.In1_k = proc_control_P.Out1_Y0_p1;

    // End of SystemInitialize for SubSystem: '<S58>/Enabled Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S48>/If Action Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S56>/In1' incorporates:
    //   Outport: '<S56>/Out1'

    proc_control_B.In1_g2 = proc_control_P.Out1_Y0_j;

    // End of SystemInitialize for SubSystem: '<S48>/If Action Subsystem'

    // Start for MATLABSystem: '<S3>/MATLAB System'
    proc_control_DW.obj_f.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S3>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  reset  fonction
    // ------------------------------------------------------------------------------ 
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_f.init = false;
    std::memset(&proc_control_DW.obj_f.constValues[0], 0, 38U * sizeof(real_T));

    // Start for MATLABSystem: '<S42>/SinkBlock'
    proc_control_DW.obj_p5.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_p5.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_p5.isSetupComplete = false;
    proc_control_DW.obj_p5.isInitialized = 1;
    proc_c_Publisher_setupImpl_pr35(&proc_control_DW.obj_p5);
    proc_control_DW.obj_p5.isSetupComplete = true;

    // Start for MATLABSystem: '<S58>/SourceBlock'
    proc_control_DW.obj_fb.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fb.isSetupComplete = false;
    proc_control_DW.obj_fb.isInitialized = 1;
    proc_contr_Subscriber_setupImpl(&proc_control_DW.obj_fb);
    proc_control_DW.obj_fb.isSetupComplete = true;

    // Start for MATLABSystem: '<S57>/SinkBlock'
    proc_control_DW.obj_of.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_of.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_of.isSetupComplete = false;
    proc_control_DW.obj_of.isInitialized = 1;
    proc__Publisher_setupImpl_pr351(&proc_control_DW.obj_of);
    proc_control_DW.obj_of.isSetupComplete = true;

    // Start for MATLABSystem: '<S48>/MATLAB System'
    proc_control_DW.method = 7U;
    proc_control_DW.state = 1144108930U;
    proc_control_DW.state_f[0] = 362436069U;
    proc_control_DW.state_f[1] = 521288629U;

    // SystemInitialize for Outport: '<S3>/Clean Output'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    // this.pingerPosition = this.pingerStartPosition;
    proc_control_B.y_o[0] = proc_control_P.CleanOutput_Y0.x.Quaternion[0];

    // SystemInitialize for Sum: '<S29>/Sum2' incorporates:
    //   Outport: '<S3>/Sensors Output'

    proc_control_B.Quaternion[0] = proc_control_P.SensorsOutput_Y0.Quaternion[0];

    // SystemInitialize for Outport: '<S3>/Clean Output'
    proc_control_B.y_o[1] = proc_control_P.CleanOutput_Y0.x.Quaternion[1];

    // SystemInitialize for Sum: '<S29>/Sum2' incorporates:
    //   Outport: '<S3>/Sensors Output'

    proc_control_B.Quaternion[1] = proc_control_P.SensorsOutput_Y0.Quaternion[1];

    // SystemInitialize for Outport: '<S3>/Clean Output'
    proc_control_B.y_o[2] = proc_control_P.CleanOutput_Y0.x.Quaternion[2];

    // SystemInitialize for Sum: '<S29>/Sum2' incorporates:
    //   Outport: '<S3>/Sensors Output'

    proc_control_B.Quaternion[2] = proc_control_P.SensorsOutput_Y0.Quaternion[2];

    // SystemInitialize for Outport: '<S3>/Clean Output'
    proc_control_B.y_o[3] = proc_control_P.CleanOutput_Y0.x.Quaternion[3];

    // SystemInitialize for Sum: '<S29>/Sum2' incorporates:
    //   Outport: '<S3>/Sensors Output'

    proc_control_B.Quaternion[3] = proc_control_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Model System'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S102>/Header Assignment'
    proc_control_CurrentTime_Init(&proc_control_DW.CurrentTime_n);

    // End of SystemInitialize for SubSystem: '<S102>/Header Assignment'

    // Start for MATLABSystem: '<S112>/SinkBlock'
    proc_control_DW.obj_bq.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_bq.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bq.isSetupComplete = false;
    proc_control_DW.obj_bq.isInitialized = 1;
    p_Publisher_setupImpl_pr351ewpk(&proc_control_DW.obj_bq);
    proc_control_DW.obj_bq.isSetupComplete = true;

    // Start for MATLABSystem: '<S105>/SinkBlock'
    proc_control_DW.obj_i2.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_i2.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i2.isSetupComplete = false;
    proc_control_DW.obj_i2.isInitialized = 1;
    proc_Publisher_setupImpl_pr351e(&proc_control_DW.obj_i2);
    proc_control_DW.obj_i2.isSetupComplete = true;

    // Start for MATLABSystem: '<S107>/SinkBlock'
    proc_control_DW.obj_cr.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_cr.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cr.isSetupComplete = false;
    proc_control_DW.obj_cr.isInitialized = 1;
    pro_Publisher_setupImpl_pr351ew(&proc_control_DW.obj_cr);
    proc_control_DW.obj_cr.isSetupComplete = true;

    // Start for MATLABSystem: '<S110>/SinkBlock'
    proc_control_DW.obj_iv.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_iv.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_iv.isSetupComplete = false;
    proc_control_DW.obj_iv.isInitialized = 1;
    pr_Publisher_setupImpl_pr351ewp(&proc_control_DW.obj_iv);
    proc_control_DW.obj_iv.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'

    // Start for MATLABSystem: '<S125>/SourceBlock'
    proc_control_DW.obj_nf.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_nf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nf.isSetupComplete = false;
    proc_control_DW.obj_nf.isInitialized = 1;
    pr_Subscriber_setupImpl_pr351ew(&proc_control_DW.obj_nf);
    proc_control_DW.obj_nf.isSetupComplete = true;

    // Start for MATLABSystem: '<S126>/SourceBlock'
    proc_control_DW.obj_i3.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_i3.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i3.isSetupComplete = false;
    proc_control_DW.obj_i3.isInitialized = 1;
    p_Subscriber_setupImpl_pr351ewp(&proc_control_DW.obj_i3);
    proc_control_DW.obj_i3.isSetupComplete = true;

    // Start for MATLABSystem: '<S129>/SourceBlock'
    proc_control_DW.obj_lt.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_lt.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lt.isSetupComplete = false;
    proc_control_DW.obj_lt.isInitialized = 1;
    Subscriber_setupImp_pr351ewpk3k(&proc_control_DW.obj_lt);
    proc_control_DW.obj_lt.isSetupComplete = true;

    // Start for MATLABSystem: '<S128>/SourceBlock'
    proc_control_DW.obj_fw.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_fw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fw.isSetupComplete = false;
    proc_control_DW.obj_fw.isInitialized = 1;
    Subscriber_setupImpl_pr351ewpk3(&proc_control_DW.obj_fw);
    proc_control_DW.obj_fw.isSetupComplete = true;

    // Start for MATLABSystem: '<S130>/SourceBlock'
    proc_control_DW.obj_cg.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_cg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cg.isSetupComplete = false;
    proc_control_DW.obj_cg.isInitialized = 1;
    Subscriber_setupIm_pr351ewpk3k4(&proc_control_DW.obj_cg);
    proc_control_DW.obj_cg.isSetupComplete = true;

    // Start for MATLABSystem: '<S127>/SourceBlock'
    proc_control_DW.obj_ppy.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_ppy.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ppy.isSetupComplete = false;
    proc_control_DW.obj_ppy.isInitialized = 1;
    Subscriber_setupImpl_pr351ewpk(&proc_control_DW.obj_ppy);
    proc_control_DW.obj_ppy.isSetupComplete = true;

    // Start for MATLABSystem: '<S114>/MATLAB System'
    proc_control_DW.obj_i.initial_mode = proc_control_P.mode.init;
    proc_control_DW.obj_i.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S114>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_i.m_initCond[i] = 0.0;
    }

    proc_control_DW.obj_i.m_mode = proc_control_DW.obj_i.initial_mode;
    proc_control_DW.obj_i.m_killStatus = 0.0;
    proc_control_DW.obj_i.m_simulation = 0.0;
    proc_control_DW.obj_i.m_reset = 0.0;
    proc_control_DW.obj_i.m_trajClear = 0.0;
    proc_control_DW.obj_i.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S114>/MATLAB System'

    // Start for MATLABSystem: '<S314>/SourceBlock'
    proc_control_DW.obj_jb.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_jb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jb.isSetupComplete = false;
    proc_control_DW.obj_jb.isInitialized = 1;
    Subscriber_setu_pr351ewpk3k4u0o(&proc_control_DW.obj_jb);
    proc_control_DW.obj_jb.isSetupComplete = true;

    // Start for MATLABSystem: '<S316>/SourceBlock'
    proc_control_DW.obj_eh.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_eh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eh.isSetupComplete = false;
    proc_control_DW.obj_eh.isInitialized = 1;
    proc_con_Subscriber_setupImpl_n(&proc_control_DW.obj_eh);
    proc_control_DW.obj_eh.isSetupComplete = true;

    // Start for MATLABSystem: '<S312>/SinkBlock'
    proc_control_DW.obj_oe.QOSAvoidROSNamespaceConventions = false;
    proc_control_DW.obj_oe.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oe.isSetupComplete = false;
    proc_control_DW.obj_oe.isInitialized = 1;
    Publisher_setupImpl_pr351ewpk3(&proc_control_DW.obj_oe);
    proc_control_DW.obj_oe.isSetupComplete = true;
  }
}

// Model terminate function
void proc_control::terminate()
{
  // Terminate for MATLABSystem: '<S125>/SourceBlock'
  if (!proc_control_DW.obj_nf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S125>/SourceBlock'

  // Terminate for MATLABSystem: '<S126>/SourceBlock'
  if (!proc_control_DW.obj_i3.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i3.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S126>/SourceBlock'

  // Terminate for MATLABSystem: '<S129>/SourceBlock'
  if (!proc_control_DW.obj_lt.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S129>/SourceBlock'

  // Terminate for MATLABSystem: '<S128>/SourceBlock'
  if (!proc_control_DW.obj_fw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S128>/SourceBlock'

  // Terminate for MATLABSystem: '<S130>/SourceBlock'
  if (!proc_control_DW.obj_cg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S130>/SourceBlock'

  // Terminate for MATLABSystem: '<S127>/SourceBlock'
  if (!proc_control_DW.obj_ppy.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ppy.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S127>/SourceBlock'

  // Terminate for IfAction SubSystem: '<S7>/Get_ROS_param'
  // Terminate for MATLABSystem: '<S117>/MPC.P'
  if (!proc_control_DW.obj_f0.matlabCodegenIsDeleted) {
    proc_control_DW.obj_f0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S117>/MPC.P'

  // Terminate for MATLABSystem: '<S117>/MPC.M'
  if (!proc_control_DW.obj_dx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S117>/MPC.M'

  // Terminate for MATLABSystem: '<S119>/Default MV'
  if (!proc_control_DW.obj_iw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_iw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S119>/Default MV'

  // Terminate for MATLABSystem: '<S119>/Default MVR'
  if (!proc_control_DW.obj_bn.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bn.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S119>/Default MVR'

  // Terminate for MATLABSystem: '<S119>/Default OV'
  if (!proc_control_DW.obj_fk.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fk.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S119>/Default OV'

  // Terminate for MATLABSystem: '<S120>/C10 MV'
  if (!proc_control_DW.obj_f2.matlabCodegenIsDeleted) {
    proc_control_DW.obj_f2.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S120>/C10 MV'

  // Terminate for MATLABSystem: '<S120>/C10 MVR'
  if (!proc_control_DW.obj_pzf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pzf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S120>/C10 MVR'

  // Terminate for MATLABSystem: '<S120>/C10 OV'
  if (!proc_control_DW.obj_j1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_j1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S120>/C10 OV'

  // Terminate for MATLABSystem: '<S121>/C11 MV'
  if (!proc_control_DW.obj_nr.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nr.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S121>/C11 MV'

  // Terminate for MATLABSystem: '<S121>/C11 MVR'
  if (!proc_control_DW.obj_as.matlabCodegenIsDeleted) {
    proc_control_DW.obj_as.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S121>/C11 MVR'

  // Terminate for MATLABSystem: '<S121>/C11 OV'
  if (!proc_control_DW.obj_nl.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nl.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S121>/C11 OV'

  // Terminate for MATLABSystem: '<S122>/C19 MV'
  if (!proc_control_DW.obj_pz.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S122>/C19 MV'

  // Terminate for MATLABSystem: '<S122>/C19 MVR'
  if (!proc_control_DW.obj_hq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S122>/C19 MVR'

  // Terminate for MATLABSystem: '<S122>/C19 OV'
  if (!proc_control_DW.obj_fs.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S122>/C19 OV'

  // Terminate for MATLABSystem: '<S123>/NoDVL MV'
  if (!proc_control_DW.obj_nb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S123>/NoDVL MV'

  // Terminate for MATLABSystem: '<S117>/MPC.TMAX'
  if (!proc_control_DW.obj_cm.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S117>/MPC.TMAX'

  // Terminate for MATLABSystem: '<S117>/MPC.TMIN'
  if (!proc_control_DW.obj_pu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S117>/MPC.TMIN'

  // Terminate for MATLABSystem: '<S118>/Angular Tolerance'
  if (!proc_control_DW.obj_eug.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eug.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S118>/Angular Tolerance'

  // Terminate for MATLABSystem: '<S118>/Linear Tolerance'
  if (!proc_control_DW.obj_dc.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dc.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S118>/Linear Tolerance'

  // Terminate for MATLABSystem: '<S118>/Time in Tolerance'
  if (!proc_control_DW.obj_do.matlabCodegenIsDeleted) {
    proc_control_DW.obj_do.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S118>/Time in Tolerance'

  // Terminate for MATLABSystem: '<S116>/Physics Rho'
  if (!proc_control_DW.obj_pp.matlabCodegenIsDeleted) {
    proc_control_DW.obj_pp.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Rho'

  // Terminate for MATLABSystem: '<S116>/Physics G'
  if (!proc_control_DW.obj_axm.matlabCodegenIsDeleted) {
    proc_control_DW.obj_axm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics G'

  // Terminate for MATLABSystem: '<S116>/Physics Mass'
  if (!proc_control_DW.obj_jq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Mass'

  // Terminate for MATLABSystem: '<S116>/Physics Volume'
  if (!proc_control_DW.obj_ju.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ju.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Volume'

  // Terminate for MATLABSystem: '<S116>/Physics Sub Height'
  if (!proc_control_DW.obj_e5.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Sub Height'

  // Terminate for MATLABSystem: '<S116>/Physics RG'
  if (!proc_control_DW.obj_e1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics RG'

  // Terminate for MATLABSystem: '<S116>/Physics RB'
  if (!proc_control_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics RB'

  // Terminate for MATLABSystem: '<S116>/Physics CDL'
  if (!proc_control_DW.obj_fg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics CDL'

  // Terminate for MATLABSystem: '<S116>/Physics CDQ'
  if (!proc_control_DW.obj_kb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics CDQ'

  // Terminate for MATLABSystem: '<S116>/Physics Added Mass'
  if (!proc_control_DW.obj_ps.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ps.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Added Mass'

  // Terminate for MATLABSystem: '<S116>/Physics I'
  if (!proc_control_DW.obj_hn.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hn.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics I'

  // Terminate for MATLABSystem: '<S116>/Physics Depth Pose'
  if (!proc_control_DW.obj_lq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Depth Pose'

  // Terminate for MATLABSystem: '<S116>/Physics Hydro Pose'
  if (!proc_control_DW.obj_c4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_c4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Hydro Pose'

  // Terminate for MATLABSystem: '<S116>/Physics Sonar Pose'
  if (!proc_control_DW.obj_eu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Sonar Pose'

  // Terminate for MATLABSystem: '<S116>/Physics DVL Rotation'
  if (!proc_control_DW.obj_mh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_mh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics DVL Rotation'

  // Terminate for MATLABSystem: '<S116>/Physics Thrusters'
  if (!proc_control_DW.obj_l4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_l4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/Physics Thrusters'

  // Terminate for MATLABSystem: '<S116>/DVL Lost Override'
  if (!proc_control_DW.obj_jk.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jk.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/DVL Lost Override'
  // End of Terminate for SubSystem: '<S7>/Get_ROS_param'

  // Terminate for IfAction SubSystem: '<S5>/Simulation'
  // Terminate for MATLABSystem: '<S94>/SourceBlock'
  if (!proc_control_DW.obj_fe.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fe.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S94>/SourceBlock'

  // Terminate for MATLABSystem: '<S95>/SourceBlock'
  if (!proc_control_DW.obj_fka.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fka.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S95>/SourceBlock'

  // Terminate for MATLABSystem: '<S96>/SourceBlock'
  if (!proc_control_DW.obj_na.matlabCodegenIsDeleted) {
    proc_control_DW.obj_na.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S96>/SourceBlock'
  // End of Terminate for SubSystem: '<S5>/Simulation'

  // Terminate for IfAction SubSystem: '<S5>/AUV'
  // Terminate for MATLABSystem: '<S83>/SourceBlock'
  if (!proc_control_DW.obj_du.matlabCodegenIsDeleted) {
    proc_control_DW.obj_du.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S83>/SourceBlock'

  // Terminate for MATLABSystem: '<S84>/SourceBlock'
  if (!proc_control_DW.obj_n5.matlabCodegenIsDeleted) {
    proc_control_DW.obj_n5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S84>/SourceBlock'

  // Terminate for MATLABSystem: '<S85>/SourceBlock'
  if (!proc_control_DW.obj_ak.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ak.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S85>/SourceBlock'
  // End of Terminate for SubSystem: '<S5>/AUV'

  // Terminate for Enabled SubSystem: '<Root>/Enabled Subsystem'
  // Terminate for Atomic SubSystem: '<S12>/Header Assignment'
  proc_control_CurrentTime_Term(&proc_control_DW.CurrentTime);

  // End of Terminate for SubSystem: '<S12>/Header Assignment'

  // Terminate for MATLABSystem: '<S17>/SinkBlock'
  if (!proc_control_DW.obj_ez.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ez.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S17>/SinkBlock'

  // Terminate for MATLABSystem: '<S14>/SinkBlock'
  if (!proc_control_DW.obj_dv.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dv.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S14>/SinkBlock'
  // End of Terminate for SubSystem: '<Root>/Enabled Subsystem'

  // Terminate for MATLABSystem: '<S314>/SourceBlock'
  if (!proc_control_DW.obj_jb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S314>/SourceBlock'

  // Terminate for MATLABSystem: '<S316>/SourceBlock'
  if (!proc_control_DW.obj_eh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S316>/SourceBlock'

  // Terminate for IfAction SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 
  // Terminate for MATLABSystem: '<S321>/SourceBlock'
  if (!proc_control_DW.obj_ha.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ha.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S321>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/singleWpts Trajectory Control DEBUG only' 

  // Terminate for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Terminate for IfAction SubSystem: '<S8>/If Action Subsystem'
  // Terminate for MATLABSystem: '<S240>/SourceBlock'
  if (!proc_control_DW.obj_no.matlabCodegenIsDeleted) {
    proc_control_DW.obj_no.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S240>/SourceBlock'

  // Terminate for MATLABSystem: '<S241>/SourceBlock'
  if (!proc_control_DW.obj_if.matlabCodegenIsDeleted) {
    proc_control_DW.obj_if.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S241>/SourceBlock'
  // End of Terminate for SubSystem: '<S8>/If Action Subsystem'

  // Terminate for IfAction SubSystem: '<S137>/If Action Subsystem'
  // Terminate for Atomic SubSystem: '<S147>/Header Assignment'
  // Terminate for MATLABSystem: '<S179>/Current Time'
  if (!proc_control_DW.obj_o3.matlabCodegenIsDeleted) {
    proc_control_DW.obj_o3.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S179>/Current Time'
  // End of Terminate for SubSystem: '<S147>/Header Assignment'

  // Terminate for MATLABSystem: '<S180>/SinkBlock'
  if (!proc_control_DW.obj_ni.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ni.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S180>/SinkBlock'
  // End of Terminate for SubSystem: '<S137>/If Action Subsystem'
  // End of Terminate for SubSystem: '<Root>/Subsystem Controller'

  // Terminate for Enabled SubSystem: '<Root>/Enabled Subsystem1'
  // Terminate for MATLABSystem: '<S21>/SinkBlock'
  if (!proc_control_DW.obj_oa.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oa.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S21>/SinkBlock'

  // Terminate for MATLABSystem: '<S22>/SinkBlock'
  if (!proc_control_DW.obj_fd.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S22>/SinkBlock'

  // Terminate for MATLABSystem: '<S25>/SinkBlock'
  if (!proc_control_DW.obj_clf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_clf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S25>/SinkBlock'
  // End of Terminate for SubSystem: '<Root>/Enabled Subsystem1'

  // Terminate for Enabled SubSystem: '<Root>/Model System'
  // Terminate for MATLABSystem: '<S42>/SinkBlock'
  if (!proc_control_DW.obj_p5.matlabCodegenIsDeleted) {
    proc_control_DW.obj_p5.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S42>/SinkBlock'

  // Terminate for MATLABSystem: '<S58>/SourceBlock'
  if (!proc_control_DW.obj_fb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S58>/SourceBlock'

  // Terminate for MATLABSystem: '<S57>/SinkBlock'
  if (!proc_control_DW.obj_of.matlabCodegenIsDeleted) {
    proc_control_DW.obj_of.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S57>/SinkBlock'
  // End of Terminate for SubSystem: '<Root>/Model System'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for MATLABSystem: '<S112>/SinkBlock'
  if (!proc_control_DW.obj_bq.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bq.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S112>/SinkBlock'

  // Terminate for MATLABSystem: '<S105>/SinkBlock'
  if (!proc_control_DW.obj_i2.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i2.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S105>/SinkBlock'

  // Terminate for MATLABSystem: '<S107>/SinkBlock'
  if (!proc_control_DW.obj_cr.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cr.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S107>/SinkBlock'

  // Terminate for Atomic SubSystem: '<S102>/Header Assignment'
  proc_control_CurrentTime_Term(&proc_control_DW.CurrentTime_n);

  // End of Terminate for SubSystem: '<S102>/Header Assignment'

  // Terminate for MATLABSystem: '<S110>/SinkBlock'
  if (!proc_control_DW.obj_iv.matlabCodegenIsDeleted) {
    proc_control_DW.obj_iv.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S110>/SinkBlock'
  // End of Terminate for SubSystem: '<Root>/ROS Output'

  // Terminate for MATLABSystem: '<S312>/SinkBlock'
  if (!proc_control_DW.obj_oe.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oe.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S312>/SinkBlock'
}

// Constructor
proc_control::proc_control() :
  proc_control_B(),
  proc_control_DW(),
  proc_control_PrevZCX(),
  proc_control_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
// Currently there is no destructor body generated.
proc_control::~proc_control() = default;

// Real-Time Model get method
proc_control::RT_MODEL_proc_control_T * proc_control::getRTM()
{
  return (&proc_control_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
